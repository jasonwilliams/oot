#![allow(dead_code, mutable_transmutes, non_camel_case_types, non_snake_case,
         non_upper_case_globals, unused_assignments, unused_mut)]
#![register_tool(c2rust)]
#![feature(const_raw_ptr_to_usize_cast, const_transmute, register_tool)]
extern "C" {
    #[no_mangle]
    fn fabsf(f: f32_0) -> f32_0;
    #[no_mangle]
    fn sqrtf(f: f32_0) -> f32_0;
    #[no_mangle]
    fn func_8002836C(globalCtx: *mut GlobalContext, pos: *mut Vec3f,
                     velocity: *mut Vec3f, accel: *mut Vec3f,
                     primColor: *mut Color_RGBA8, envColor: *mut Color_RGBA8,
                     scale: s16, scaleStep: s16, life: s16);
    #[no_mangle]
    fn ActorShape_Init(shape: *mut ActorShape, yOffset: f32_0,
                       shadowDraw: ActorShadowFunc, shadowScale: f32_0);
    #[no_mangle]
    fn Flags_GetSwitch(globalCtx: *mut GlobalContext, flag: s32) -> s32;
    #[no_mangle]
    fn Flags_SetSwitch(globalCtx: *mut GlobalContext, flag: s32);
    #[no_mangle]
    fn TitleCard_InitBossName(globalCtx: *mut GlobalContext,
                              titleCtx: *mut TitleCardContext,
                              texture: *mut libc::c_void, x: s16, y: s16,
                              width: u8_0, height: u8_0);
    #[no_mangle]
    fn Actor_Kill(actor: *mut Actor);
    #[no_mangle]
    fn Actor_SetScale(actor: *mut Actor, scale: f32_0);
    #[no_mangle]
    fn func_8002D7EC(actor: *mut Actor);
    #[no_mangle]
    fn func_8002D908(actor: *mut Actor);
    #[no_mangle]
    fn func_8002DF54(globalCtx: *mut GlobalContext, actor: *mut Actor,
                     arg2: u8_0) -> s32;
    #[no_mangle]
    fn Actor_UpdateBgCheckInfo(globalCtx: *mut GlobalContext,
                               actor: *mut Actor, wallCheckHeight: f32_0,
                               wallCheckRadius: f32_0,
                               ceilingCheckHeight: f32_0, flags: s32);
    #[no_mangle]
    fn func_8002F6D4(globalCtx: *mut GlobalContext, actor: *mut Actor,
                     arg2: f32_0, arg3: s16, arg4: f32_0, arg5: u32_0);
    #[no_mangle]
    fn func_8002F7DC(actor: *mut Actor, sfxId: u16_0);
    #[no_mangle]
    fn Audio_PlayActorSound2(actor: *mut Actor, sfxId: u16_0);
    #[no_mangle]
    fn Actor_SpawnAsChild(actorCtx: *mut ActorContext, parent: *mut Actor,
                          globalCtx: *mut GlobalContext, actorId: s16,
                          posX: f32_0, posY: f32_0, posZ: f32_0, rotX: s16,
                          rotY: s16, rotZ: s16, params: s16) -> *mut Actor;
    #[no_mangle]
    fn Actor_ChangeCategory(globalCtx: *mut GlobalContext,
                            actorCtx: *mut ActorContext, actor: *mut Actor,
                            actorCategory: u8_0);
    #[no_mangle]
    fn func_80033E88(actor: *mut Actor, globalCtx: *mut GlobalContext,
                     arg2: s16, arg3: s16);
    #[no_mangle]
    fn Rand_ZeroFloat(f: f32_0) -> f32_0;
    #[no_mangle]
    fn Rand_CenteredFloat(f: f32_0) -> f32_0;
    #[no_mangle]
    fn Camera_GetInputDirYaw(camera: *mut Camera) -> s16;
    #[no_mangle]
    fn Collider_InitCylinder(globalCtx: *mut GlobalContext,
                             collider: *mut ColliderCylinder) -> s32;
    #[no_mangle]
    fn Collider_DestroyCylinder(globalCtx: *mut GlobalContext,
                                collider: *mut ColliderCylinder) -> s32;
    #[no_mangle]
    fn Collider_SetCylinder(globalCtx: *mut GlobalContext,
                            collider: *mut ColliderCylinder,
                            actor: *mut Actor, src: *mut ColliderCylinderInit)
     -> s32;
    #[no_mangle]
    fn CollisionCheck_SetAT(globalCtx: *mut GlobalContext,
                            colChkCtx: *mut CollisionCheckContext,
                            collider: *mut Collider) -> s32;
    #[no_mangle]
    fn CollisionCheck_SetAC(globalCtx: *mut GlobalContext,
                            colChkCtx: *mut CollisionCheckContext,
                            collider: *mut Collider) -> s32;
    #[no_mangle]
    fn CollisionCheck_SetOC(globalCtx: *mut GlobalContext,
                            colChkCtx: *mut CollisionCheckContext,
                            collider: *mut Collider) -> s32;
    #[no_mangle]
    fn Collider_UpdateCylinder(actor: *mut Actor,
                               collider: *mut ColliderCylinder);
    #[no_mangle]
    fn CollisionCheck_GetSwordDamage(dmgFlags: s32) -> u8_0;
    #[no_mangle]
    fn func_80064520(globalCtx: *mut GlobalContext,
                     csCtx: *mut CutsceneContext);
    #[no_mangle]
    fn func_80064534(globalCtx: *mut GlobalContext,
                     csCtx: *mut CutsceneContext);
    #[no_mangle]
    fn Audio_PlaySoundAtPosition(globalCtx: *mut GlobalContext,
                                 pos: *mut Vec3f, duration: s32,
                                 sfxId: u16_0);
    #[no_mangle]
    fn Math_CosS(angle: s16) -> f32_0;
    #[no_mangle]
    fn Math_SinS(angle: s16) -> f32_0;
    #[no_mangle]
    fn Actor_ProcessInitChain(actor: *mut Actor,
                              initChain: *mut InitChainEntry);
    #[no_mangle]
    fn Math_SmoothStepToF(pValue: *mut f32_0, target: f32_0, fraction: f32_0,
                          step: f32_0, minStep: f32_0) -> f32_0;
    #[no_mangle]
    fn Math_ApproachF(pValue: *mut f32_0, target: f32_0, fraction: f32_0,
                      step: f32_0);
    #[no_mangle]
    fn Math_ApproachZeroF(pValue: *mut f32_0, fraction: f32_0, step: f32_0);
    #[no_mangle]
    fn Math_ApproachS(pValue: *mut s16, target: s16, scale: s16, step: s16);
    #[no_mangle]
    fn func_80078884(sfxId: u16_0);
    #[no_mangle]
    fn func_80078914(arg0: *mut Vec3f, sfxId: u16_0);
    #[no_mangle]
    fn Interface_ChangeAlpha(alphaType: u16_0);
    #[no_mangle]
    fn Player_HasMirrorShieldEquipped(globalCtx: *mut GlobalContext) -> s32;
    #[no_mangle]
    fn Gfx_SetFog(gfx: *mut Gfx, r: s32, g: s32, b: s32, a: s32, near: s32,
                  far: s32) -> *mut Gfx;
    #[no_mangle]
    fn func_80093D18(gfxCtx: *mut GraphicsContext);
    #[no_mangle]
    fn func_80093D84(gfxCtx: *mut GraphicsContext);
    #[no_mangle]
    fn Gfx_TwoTexScroll(gfxCtx: *mut GraphicsContext, tile1: s32, x1: u32_0,
                        y1: u32_0, width1: s32, height1: s32, tile2: s32,
                        x2: u32_0, y2: u32_0, width2: s32, height2: s32)
     -> *mut Gfx;
    #[no_mangle]
    fn Object_GetIndex(objectCtx: *mut ObjectContext, objectId: s16) -> s32;
    #[no_mangle]
    fn Object_IsLoaded(objectCtx: *mut ObjectContext, bankIndex: s32) -> s32;
    #[no_mangle]
    fn SkelAnime_DrawFlexOpa(globalCtx: *mut GlobalContext,
                             skeleton: *mut *mut libc::c_void,
                             jointTable: *mut Vec3s, dListCount: s32,
                             overrideLimbDraw: OverrideLimbDrawOpa,
                             postLimbDraw: PostLimbDrawOpa,
                             arg: *mut libc::c_void);
    #[no_mangle]
    fn Animation_GetLastFrame(animation: *mut libc::c_void) -> s16;
    #[no_mangle]
    fn SkelAnime_InitFlex(globalCtx: *mut GlobalContext,
                          skelAnime: *mut SkelAnime,
                          skeletonHeaderSeg: *mut FlexSkeletonHeader,
                          animation: *mut AnimationHeader,
                          jointTable: *mut Vec3s, morphTable: *mut Vec3s,
                          limbCount: s32) -> s32;
    #[no_mangle]
    fn SkelAnime_Update(skelAnime: *mut SkelAnime) -> s32;
    #[no_mangle]
    fn Animation_MorphToPlayOnce(skelAnime: *mut SkelAnime,
                                 animation: *mut AnimationHeader,
                                 morphFrames: f32_0);
    #[no_mangle]
    fn Animation_MorphToLoop(skelAnime: *mut SkelAnime,
                             animation: *mut AnimationHeader,
                             morphFrames: f32_0);
    #[no_mangle]
    fn Animation_OnFrame(skelAnime: *mut SkelAnime, frame: f32_0) -> s32;
    #[no_mangle]
    fn SkelAnime_Free(skelAnime: *mut SkelAnime,
                      globalCtx: *mut GlobalContext);
    #[no_mangle]
    fn func_800AA000(_: f32_0, _: u8_0, _: u8_0, _: u8_0);
    #[no_mangle]
    fn Gameplay_SetFog(globalCtx: *mut GlobalContext, gfx: *mut Gfx)
     -> *mut Gfx;
    #[no_mangle]
    fn Gameplay_CreateSubCamera(globalCtx: *mut GlobalContext) -> s16;
    #[no_mangle]
    fn Gameplay_ChangeCameraStatus(globalCtx: *mut GlobalContext, camId: s16,
                                   status: s16) -> s16;
    #[no_mangle]
    fn Gameplay_GetCamera(globalCtx: *mut GlobalContext, camId: s16)
     -> *mut Camera;
    #[no_mangle]
    fn Gameplay_CameraSetAtEye(globalCtx: *mut GlobalContext, camId: s16,
                               at: *mut Vec3f, eye: *mut Vec3f) -> s32;
    #[no_mangle]
    fn Gameplay_CameraSetFov(globalCtx: *mut GlobalContext, camId: s16,
                             fov: f32_0) -> s32;
    #[no_mangle]
    fn func_800C08AC(globalCtx: *mut GlobalContext, camId: s16, arg2: s16);
    #[no_mangle]
    fn Graph_Alloc(gfxCtx: *mut GraphicsContext, size: size_t)
     -> *mut libc::c_void;
    #[no_mangle]
    fn Graph_OpenDisps(dispRefs: *mut *mut Gfx, gfxCtx: *mut GraphicsContext,
                       file: *const libc::c_char, line: s32);
    #[no_mangle]
    fn Graph_CloseDisps(dispRefs: *mut *mut Gfx, gfxCtx: *mut GraphicsContext,
                        file: *const libc::c_char, line: s32);
    #[no_mangle]
    fn Math_Atan2S(x: f32_0, y: f32_0) -> s16;
    #[no_mangle]
    fn Math_Atan2F(x: f32_0, y: f32_0) -> f32_0;
    #[no_mangle]
    fn Matrix_Push();
    #[no_mangle]
    fn Matrix_Pop();
    #[no_mangle]
    fn Matrix_Translate(x: f32_0, y: f32_0, z: f32_0, mode: u8_0);
    #[no_mangle]
    fn Matrix_Scale(x: f32_0, y: f32_0, z: f32_0, mode: u8_0);
    #[no_mangle]
    fn Matrix_RotateX(x: f32_0, mode: u8_0);
    #[no_mangle]
    fn Matrix_RotateY(y: f32_0, mode: u8_0);
    #[no_mangle]
    fn Matrix_RotateZ(z: f32_0, mode: u8_0);
    #[no_mangle]
    fn Matrix_ToMtx(dest: *mut Mtx, file: *mut libc::c_char, line: s32)
     -> *mut Mtx;
    #[no_mangle]
    fn Matrix_NewMtx(gfxCtx: *mut GraphicsContext, file: *mut libc::c_char,
                     line: s32) -> *mut Mtx;
    #[no_mangle]
    fn Matrix_MultVec3f(src: *mut Vec3f, dest: *mut Vec3f);
    #[no_mangle]
    fn func_800D1FD4(mf: *mut MtxF);
    #[no_mangle]
    static mut gSegments: [u32_0; 16];
    #[no_mangle]
    static mut gLensFlareScreenFillAlpha: s16;
    #[no_mangle]
    static mut gLensFlareColorIntensity: f32_0;
    #[no_mangle]
    static mut gLensFlareScale: s16;
    #[no_mangle]
    static mut gCustomLensFlarePos: Vec3f;
    #[no_mangle]
    static mut gCustomLensFlareOn: u8_0;
    #[no_mangle]
    static mut gSaveContext: SaveContext;
    #[no_mangle]
    static mut D_801333E8: s8;
    #[no_mangle]
    static mut D_801333E0: f32_0;
    #[no_mangle]
    fn Audio_QueueSeqCmd(bgmID: u32_0);
    #[no_mangle]
    fn Audio_PlaySoundGeneral(sfxId: u16_0, pos: *mut Vec3f, token: u8_0,
                              freqScale: *mut f32_0, a4: *mut f32_0,
                              reverbAdd: *mut s8);
    #[no_mangle]
    fn Math_FAtan2F(y: f32_0, x: f32_0) -> f32_0;
    #[no_mangle]
    fn Rand_ZeroOne() -> f32_0;
    #[no_mangle]
    fn sinf(_: f32_0) -> f32_0;
    #[no_mangle]
    fn cosf(_: f32_0) -> f32_0;
    #[no_mangle]
    fn Message_StartTextbox(globalCtx: *mut GlobalContext, textId: u16_0,
                            actor: *mut Actor);
    #[no_mangle]
    fn Message_GetState(msgCtx: *mut MessageContext) -> u8_0;
    #[no_mangle]
    static mut gDorfEyeTex: [u64_0; 0];
    #[no_mangle]
    static mut object_ganon_DL_00BE90: [Gfx; 0];
    #[no_mangle]
    static mut gDorfOpenHandDL: [Gfx; 0];
    #[no_mangle]
    static mut gDorfTitleCardTex: [u64_0; 0];
    #[no_mangle]
    static mut gDorfSkel: FlexSkeletonHeader;
    #[no_mangle]
    static mut gDorfBigMagicWindupAnim: AnimationHeader;
    #[no_mangle]
    static mut gDorfBigMagicThrowAnim: AnimationHeader;
    #[no_mangle]
    static mut gDorfBigMagicThrowEndAnim: AnimationHeader;
    #[no_mangle]
    static mut gDorfBigMagicChargeStartAnim: AnimationHeader;
    #[no_mangle]
    static mut gDorfBigMagicChargeHoldAnim: AnimationHeader;
    #[no_mangle]
    static mut gDorfPoundAnim: AnimationHeader;
    #[no_mangle]
    static mut gDorfPoundEndAnim: AnimationHeader;
    #[no_mangle]
    static mut gDorfKneelVulnerableAnim: AnimationHeader;
    #[no_mangle]
    static mut gDorfLightArrowHitAnim: AnimationHeader;
    #[no_mangle]
    static mut gDorfLightEnergyHitAnim: AnimationHeader;
    #[no_mangle]
    static mut gDorfGetUp1Anim: AnimationHeader;
    #[no_mangle]
    static mut gDorfGetUp2Anim: AnimationHeader;
    #[no_mangle]
    static mut gDorfLandAnim: AnimationHeader;
    #[no_mangle]
    static mut gDorfVulnerableAnim: AnimationHeader;
    #[no_mangle]
    static mut gDorfThrowAnim: AnimationHeader;
    #[no_mangle]
    static mut gDorfBigMagicHitAnim: AnimationHeader;
    #[no_mangle]
    static mut gDorfGetUp3Anim: AnimationHeader;
    #[no_mangle]
    static mut gDorfLightArrowWaitAnim: AnimationHeader;
    #[no_mangle]
    static mut gDorfDamageAnim: AnimationHeader;
    #[no_mangle]
    static mut gDorfFloatAnim: AnimationHeader;
    #[no_mangle]
    static mut gDorfBlockAnim: AnimationHeader;
    #[no_mangle]
    static mut gDorfBlockReleaseAnim: AnimationHeader;
    #[no_mangle]
    static mut gDorfChargeLightBallAnim: AnimationHeader;
    #[no_mangle]
    static mut gDorfVolleyLeftAnim: AnimationHeader;
    #[no_mangle]
    static mut gDorfVolleyRightAnim: AnimationHeader;
    #[no_mangle]
    static mut object_ganon_anime2_Anim_001F58: AnimationHeader;
    #[no_mangle]
    static mut object_ganon_anime2_Anim_003018: AnimationHeader;
    #[no_mangle]
    static mut object_ganon_anime2_Anim_004304: AnimationHeader;
    #[no_mangle]
    static mut object_ganon_anime2_Anim_004F64: AnimationHeader;
    #[no_mangle]
    static mut object_ganon_anime2_Anim_005FFC: AnimationHeader;
    #[no_mangle]
    static mut object_ganon_anime2_Anim_006AF4: AnimationHeader;
    #[no_mangle]
    static mut object_ganon_anime2_Anim_007268: AnimationHeader;
    #[no_mangle]
    static mut object_ganon_anime2_Anim_007A64: AnimationHeader;
    #[no_mangle]
    static mut object_ganon_anime2_Anim_0089F8: AnimationHeader;
    #[no_mangle]
    static mut object_ganon_anime2_Anim_00ADDC: AnimationHeader;
    #[no_mangle]
    static mut object_ganon_anime2_Anim_00B668: AnimationHeader;
    #[no_mangle]
    static mut object_ganon_anime2_Anim_00BE38: AnimationHeader;
    #[no_mangle]
    static mut object_ganon_anime2_Anim_00EA00: AnimationHeader;
    #[no_mangle]
    static mut object_ganon_anime2_Anim_00F19C: AnimationHeader;
    #[no_mangle]
    static mut object_ganon_anime2_Anim_010298: AnimationHeader;
    #[no_mangle]
    static mut object_ganon_anime2_Anim_010514: AnimationHeader;
    #[no_mangle]
    static mut ganon_boss_sceneTex_006C18: [u64_0; 0];
    #[no_mangle]
    static mut ganon_boss_sceneTex_007418: [u64_0; 0];
    #[no_mangle]
    static mut gEffUnknown12Tex: [u64_0; 0];
    #[no_mangle]
    static mut gEffFleckTex: [u64_0; 0];
}
pub type s8 = libc::c_schar;
pub type u8_0 = libc::c_uchar;
pub type s16 = libc::c_short;
pub type u16_0 = libc::c_ushort;
pub type s32 = libc::c_int;
pub type u32_0 = libc::c_uint;
pub type u64_0 = libc::c_ulonglong;
pub type f32_0 = libc::c_float;
pub type Mtx_t = [[libc::c_long; 4]; 4];
#[derive(Copy, Clone)]
#[repr(C)]
pub union Mtx {
    pub m: Mtx_t,
    pub c2rust_unnamed: C2RustUnnamed,
    pub forc_structure_alignment: libc::c_longlong,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed {
    pub intPart: [[u16_0; 4]; 4],
    pub fracPart: [[u16_0; 4]; 4],
}
pub type MtxF_t = [[libc::c_float; 4]; 4];
#[derive(Copy, Clone)]
#[repr(C)]
pub union MtxF {
    pub mf: MtxF_t,
    pub c2rust_unnamed: C2RustUnnamed_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_0 {
    pub xx: libc::c_float,
    pub yx: libc::c_float,
    pub zx: libc::c_float,
    pub wx: libc::c_float,
    pub xy: libc::c_float,
    pub yy: libc::c_float,
    pub zy: libc::c_float,
    pub wy: libc::c_float,
    pub xz: libc::c_float,
    pub yz: libc::c_float,
    pub zz: libc::c_float,
    pub wz: libc::c_float,
    pub xw: libc::c_float,
    pub yw: libc::c_float,
    pub zw: libc::c_float,
    pub ww: libc::c_float,
}
pub type size_t = libc::c_ulong;
pub type OSPri = s32;
pub type OSId = s32;
#[derive(Copy, Clone)]
#[repr(C)]
pub union __OSfp {
    pub f: C2RustUnnamed_1,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_1 {
    pub f_odd: f32_0,
    pub f_even: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __OSThreadContext {
    pub at: u64_0,
    pub v0: u64_0,
    pub v1: u64_0,
    pub a0: u64_0,
    pub a1: u64_0,
    pub a2: u64_0,
    pub a3: u64_0,
    pub t0: u64_0,
    pub t1: u64_0,
    pub t2: u64_0,
    pub t3: u64_0,
    pub t4: u64_0,
    pub t5: u64_0,
    pub t6: u64_0,
    pub t7: u64_0,
    pub s0: u64_0,
    pub s1: u64_0,
    pub s2: u64_0,
    pub s3: u64_0,
    pub s4: u64_0,
    pub s5: u64_0,
    pub s6: u64_0,
    pub s7: u64_0,
    pub t8: u64_0,
    pub t9: u64_0,
    pub gp: u64_0,
    pub sp: u64_0,
    pub s8: u64_0,
    pub ra: u64_0,
    pub lo: u64_0,
    pub hi: u64_0,
    pub sr: u32_0,
    pub pc: u32_0,
    pub cause: u32_0,
    pub badvaddr: u32_0,
    pub rcp: u32_0,
    pub fpcsr: u32_0,
    pub fp0: __OSfp,
    pub fp2: __OSfp,
    pub fp4: __OSfp,
    pub fp6: __OSfp,
    pub fp8: __OSfp,
    pub fp10: __OSfp,
    pub fp12: __OSfp,
    pub fp14: __OSfp,
    pub fp16: __OSfp,
    pub fp18: __OSfp,
    pub fp20: __OSfp,
    pub fp22: __OSfp,
    pub fp24: __OSfp,
    pub fp26: __OSfp,
    pub fp28: __OSfp,
    pub fp30: __OSfp,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __OSThreadprofile {
    pub flag: u32_0,
    pub count: u32_0,
    pub time: u64_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSThread {
    pub next: *mut OSThread,
    pub priority: OSPri,
    pub queue: *mut *mut OSThread,
    pub tlnext: *mut OSThread,
    pub state: u16_0,
    pub flags: u16_0,
    pub id: OSId,
    pub fp: s32,
    pub thprof: *mut __OSThreadprofile,
    pub context: __OSThreadContext,
}
pub type OSMesg = *mut libc::c_void;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSMesgQueue {
    pub mtqueue: *mut OSThread,
    pub fullqueue: *mut OSThread,
    pub validCount: s32,
    pub first: s32,
    pub msgCount: s32,
    pub msg: *mut OSMesg,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSTask_t {
    pub type_0: u32_0,
    pub flags: u32_0,
    pub ucode_boot: *mut u64_0,
    pub ucode_boot_size: u32_0,
    pub ucode: *mut u64_0,
    pub ucode_size: u32_0,
    pub ucode_data: *mut u64_0,
    pub ucode_data_size: u32_0,
    pub dram_stack: *mut u64_0,
    pub dram_stack_size: u32_0,
    pub output_buff: *mut u64_0,
    pub output_buff_size: *mut u64_0,
    pub data_ptr: *mut u64_0,
    pub data_size: u32_0,
    pub yield_data_ptr: *mut u64_0,
    pub yield_data_size: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union OSTask {
    pub t: OSTask_t,
    pub force_structure_alignment: libc::c_longlong,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSViCommonRegs {
    pub ctrl: u32_0,
    pub width: u32_0,
    pub burst: u32_0,
    pub vSync: u32_0,
    pub hSync: u32_0,
    pub leap: u32_0,
    pub hStart: u32_0,
    pub xScale: u32_0,
    pub vCurrent: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSViFieldRegs {
    pub origin: u32_0,
    pub yScale: u32_0,
    pub vStart: u32_0,
    pub vBurst: u32_0,
    pub vIntr: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSViMode {
    pub type_0: u8_0,
    pub comRegs: OSViCommonRegs,
    pub fldRegs: [OSViFieldRegs; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSContPad {
    pub button: u16_0,
    pub stick_x: s8,
    pub stick_y: s8,
    pub errno: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Vtx_t {
    pub ob: [libc::c_short; 3],
    pub flag: libc::c_ushort,
    pub tc: [libc::c_short; 2],
    pub cn: [libc::c_uchar; 4],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Vtx_tn {
    pub ob: [libc::c_short; 3],
    pub flag: libc::c_ushort,
    pub tc: [libc::c_short; 2],
    pub n: [libc::c_schar; 3],
    pub a: libc::c_uchar,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union Vtx {
    pub v: Vtx_t,
    pub n: Vtx_tn,
    pub force_structure_alignment: libc::c_longlong,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Tri {
    pub flag: libc::c_uchar,
    pub v: [libc::c_uchar; 3],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Vp_t {
    pub vscale: [libc::c_short; 4],
    pub vtrans: [libc::c_short; 4],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union Vp {
    pub vp: Vp_t,
    pub force_structure_alignment: libc::c_longlong,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Light_t {
    pub col: [libc::c_uchar; 3],
    pub pad1: libc::c_char,
    pub colc: [libc::c_uchar; 3],
    pub pad2: libc::c_char,
    pub dir: [libc::c_schar; 3],
    pub pad3: libc::c_char,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Ambient_t {
    pub col: [libc::c_uchar; 3],
    pub pad1: libc::c_char,
    pub colc: [libc::c_uchar; 3],
    pub pad2: libc::c_char,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union Light {
    pub l: Light_t,
    pub force_structure_alignment: [libc::c_longlong; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union Ambient {
    pub l: Ambient_t,
    pub force_structure_alignment: [libc::c_longlong; 1],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Lightsn {
    pub a: Ambient,
    pub l: [Light; 7],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gdma {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "par", ty = "libc::c_uint", bits = "8..=15")]
    #[bitfield(name = "len", ty = "libc::c_uint", bits = "16..=31")]
    pub cmd_par_len: [u8; 4],
    pub addr: libc::c_uint,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gtri {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "pad", ty = "libc::c_int", bits = "8..=31")]
    pub cmd_pad: [u8; 4],
    pub tri: Tri,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gpopmtx {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "pad1", ty = "libc::c_int", bits = "8..=31")]
    #[bitfield(name = "pad2", ty = "libc::c_int", bits = "32..=55")]
    #[bitfield(name = "param", ty = "libc::c_uchar", bits = "56..=63")]
    pub cmd_pad1_pad2_param: [u8; 8],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gsegment {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "pad0", ty = "libc::c_int", bits = "8..=15")]
    #[bitfield(name = "mw_index", ty = "libc::c_int", bits = "16..=23")]
    #[bitfield(name = "number", ty = "libc::c_int", bits = "24..=31")]
    #[bitfield(name = "pad1", ty = "libc::c_int", bits = "32..=39")]
    #[bitfield(name = "base", ty = "libc::c_int", bits = "40..=63")]
    pub cmd_pad0_mw_index_number_pad1_base: [u8; 8],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct GsetothermodeL {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "pad0", ty = "libc::c_int", bits = "8..=15")]
    #[bitfield(name = "sft", ty = "libc::c_int", bits = "16..=23")]
    #[bitfield(name = "len", ty = "libc::c_int", bits = "24..=31")]
    #[bitfield(name = "data", ty = "libc::c_uint", bits = "32..=63")]
    pub cmd_pad0_sft_len_data: [u8; 8],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct GsetothermodeH {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "pad0", ty = "libc::c_int", bits = "8..=15")]
    #[bitfield(name = "sft", ty = "libc::c_int", bits = "16..=23")]
    #[bitfield(name = "len", ty = "libc::c_int", bits = "24..=31")]
    #[bitfield(name = "data", ty = "libc::c_uint", bits = "32..=63")]
    pub cmd_pad0_sft_len_data: [u8; 8],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Gtexture {
    pub cmd: libc::c_uchar,
    pub lodscale: libc::c_uchar,
    pub tile: libc::c_uchar,
    pub on: libc::c_uchar,
    pub s: libc::c_ushort,
    pub t: libc::c_ushort,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gline3D {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "pad", ty = "libc::c_int", bits = "8..=31")]
    pub cmd_pad: [u8; 4],
    pub line: Tri,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gperspnorm {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "pad1", ty = "libc::c_int", bits = "8..=31")]
    pub cmd_pad1: [u8; 4],
    pub pad2: libc::c_short,
    pub scale: libc::c_short,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gsetimg {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "fmt", ty = "libc::c_uint", bits = "8..=10")]
    #[bitfield(name = "siz", ty = "libc::c_uint", bits = "11..=12")]
    #[bitfield(name = "pad", ty = "libc::c_uint", bits = "13..=19")]
    #[bitfield(name = "wd", ty = "libc::c_uint", bits = "20..=31")]
    pub cmd_fmt_siz_pad_wd: [u8; 4],
    pub dram: libc::c_uint,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gsetcombine {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "muxs0", ty = "libc::c_uint", bits = "8..=31")]
    #[bitfield(name = "muxs1", ty = "libc::c_uint", bits = "32..=63")]
    pub cmd_muxs0_muxs1: [u8; 8],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gsetcolor {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    pub cmd: [u8; 1],
    pub pad: libc::c_uchar,
    pub prim_min_level: libc::c_uchar,
    pub prim_level: libc::c_uchar,
    pub color: libc::c_ulong,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gfillrect {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "x0", ty = "libc::c_int", bits = "8..=17")]
    #[bitfield(name = "x0frac", ty = "libc::c_int", bits = "18..=19")]
    #[bitfield(name = "y0", ty = "libc::c_int", bits = "20..=29")]
    #[bitfield(name = "y0frac", ty = "libc::c_int", bits = "30..=31")]
    #[bitfield(name = "pad", ty = "libc::c_uint", bits = "32..=39")]
    #[bitfield(name = "x1", ty = "libc::c_int", bits = "40..=49")]
    #[bitfield(name = "x1frac", ty = "libc::c_int", bits = "50..=51")]
    #[bitfield(name = "y1", ty = "libc::c_int", bits = "52..=61")]
    #[bitfield(name = "y1frac", ty = "libc::c_int", bits = "62..=63")]
    pub cmd_x0_x0frac_y0_y0frac_pad_x1_x1frac_y1_y1frac: [u8; 8],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gsettile {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "fmt", ty = "libc::c_uint", bits = "8..=10")]
    #[bitfield(name = "siz", ty = "libc::c_uint", bits = "11..=12")]
    #[bitfield(name = "pad0", ty = "libc::c_uint", bits = "13..=13")]
    #[bitfield(name = "line", ty = "libc::c_uint", bits = "14..=22")]
    #[bitfield(name = "tmem", ty = "libc::c_uint", bits = "23..=31")]
    #[bitfield(name = "pad1", ty = "libc::c_uint", bits = "32..=36")]
    #[bitfield(name = "tile", ty = "libc::c_uint", bits = "37..=39")]
    #[bitfield(name = "palette", ty = "libc::c_uint", bits = "40..=43")]
    #[bitfield(name = "ct", ty = "libc::c_uint", bits = "44..=44")]
    #[bitfield(name = "mt", ty = "libc::c_uint", bits = "45..=45")]
    #[bitfield(name = "maskt", ty = "libc::c_uint", bits = "46..=49")]
    #[bitfield(name = "shiftt", ty = "libc::c_uint", bits = "50..=53")]
    #[bitfield(name = "cs", ty = "libc::c_uint", bits = "54..=54")]
    #[bitfield(name = "ms", ty = "libc::c_uint", bits = "55..=55")]
    #[bitfield(name = "masks", ty = "libc::c_uint", bits = "56..=59")]
    #[bitfield(name = "shifts", ty = "libc::c_uint", bits = "60..=63")]
    pub cmd_fmt_siz_pad0_line_tmem_pad1_tile_palette_ct_mt_maskt_shiftt_cs_ms_masks_shifts: [u8; 8],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gloadtile {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "sl", ty = "libc::c_uint", bits = "8..=19")]
    #[bitfield(name = "tl", ty = "libc::c_uint", bits = "20..=31")]
    #[bitfield(name = "pad", ty = "libc::c_int", bits = "32..=36")]
    #[bitfield(name = "tile", ty = "libc::c_uint", bits = "37..=39")]
    #[bitfield(name = "sh", ty = "libc::c_uint", bits = "40..=51")]
    #[bitfield(name = "th", ty = "libc::c_uint", bits = "52..=63")]
    pub cmd_sl_tl_pad_tile_sh_th: [u8; 8],
}
pub type Gsettilesize = Gloadtile;
pub type Gloadtlut = Gloadtile;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Gwords {
    pub w0: libc::c_uint,
    pub w1: libc::c_uint,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union Gfx {
    pub words: Gwords,
    pub dma: Gdma,
    pub tri: Gtri,
    pub line: Gline3D,
    pub popmtx: Gpopmtx,
    pub segment: Gsegment,
    pub setothermodeH: GsetothermodeH,
    pub setothermodeL: GsetothermodeL,
    pub texture: Gtexture,
    pub perspnorm: Gperspnorm,
    pub setimg: Gsetimg,
    pub setcombine: Gsetcombine,
    pub setcolor: Gsetcolor,
    pub fillrect: Gfillrect,
    pub settile: Gsettile,
    pub loadtile: Gloadtile,
    pub settilesize: Gsettilesize,
    pub loadtlut: Gloadtlut,
    pub force_structure_alignment: libc::c_longlong,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Vec3f {
    pub x: f32_0,
    pub y: f32_0,
    pub z: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Vec3us {
    pub x: u16_0,
    pub y: u16_0,
    pub z: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Vec3s {
    pub x: s16,
    pub y: s16,
    pub z: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Vec3i {
    pub x: s32,
    pub y: s32,
    pub z: s32,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Sphere16 {
    pub center: Vec3s,
    pub radius: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Cylinder16 {
    pub radius: s16,
    pub height: s16,
    pub yShift: s16,
    pub pos: Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Linef {
    pub a: Vec3f,
    pub b: Vec3f,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ItemEquips {
    pub buttonItems: [u8_0; 4],
    pub cButtonSlots: [u8_0; 3],
    pub equipment: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Inventory {
    pub items: [u8_0; 24],
    pub ammo: [s8; 16],
    pub equipment: u16_0,
    pub upgrades: u32_0,
    pub questItems: u32_0,
    pub dungeonItems: [u8_0; 20],
    pub dungeonKeys: [s8; 19],
    pub defenseHearts: s8,
    pub gsTokens: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SavedSceneFlags {
    pub chest: u32_0,
    pub swch: u32_0,
    pub clear: u32_0,
    pub collect: u32_0,
    pub unk: u32_0,
    pub rooms: u32_0,
    pub floors: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct HorseData {
    pub scene: s16,
    pub pos: Vec3s,
    pub angle: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct RespawnData {
    pub pos: Vec3f,
    pub yaw: s16,
    pub playerParams: s16,
    pub entranceIndex: s16,
    pub roomIndex: u8_0,
    pub data: s8,
    pub tempSwchFlags: u32_0,
    pub tempCollectFlags: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct FaroresWindData {
    pub pos: Vec3i,
    pub yaw: s32,
    pub playerParams: s32,
    pub entranceIndex: s32,
    pub roomIndex: s32,
    pub set: s32,
    pub tempSwchFlags: s32,
    pub tempCollectFlags: s32,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SaveContext {
    pub entranceIndex: s32,
    pub linkAge: s32,
    pub cutsceneIndex: s32,
    pub dayTime: u16_0,
    pub nightFlag: s32,
    pub totalDays: s32,
    pub bgsDayCount: s32,
    pub newf: [libc::c_char; 6],
    pub deaths: u16_0,
    pub playerName: [libc::c_char; 8],
    pub n64ddFlag: s16,
    pub healthCapacity: s16,
    pub health: s16,
    pub magicLevel: s8,
    pub magic: s8,
    pub rupees: s16,
    pub swordHealth: u16_0,
    pub naviTimer: u16_0,
    pub magicAcquired: u8_0,
    pub unk_3B: [libc::c_char; 1],
    pub doubleMagic: u8_0,
    pub doubleDefense: u8_0,
    pub bgsFlag: u8_0,
    pub ocarinaGameRoundNum: u8_0,
    pub childEquips: ItemEquips,
    pub adultEquips: ItemEquips,
    pub unk_54: u32_0,
    pub unk_58: [libc::c_char; 14],
    pub savedSceneNum: s16,
    pub equips: ItemEquips,
    pub inventory: Inventory,
    pub sceneFlags: [SavedSceneFlags; 124],
    pub fw: FaroresWindData,
    pub unk_E8C: [libc::c_char; 16],
    pub gsFlags: [s32; 6],
    pub unk_EB4: [libc::c_char; 4],
    pub highScores: [s32; 7],
    pub eventChkInf: [u16_0; 14],
    pub itemGetInf: [u16_0; 4],
    pub infTable: [u16_0; 30],
    pub unk_F34: [libc::c_char; 4],
    pub worldMapAreaData: u32_0,
    pub unk_F3C: [libc::c_char; 4],
    pub scarecrowCustomSongSet: u8_0,
    pub scarecrowCustomSong: [u8_0; 864],
    pub unk_12A1: [libc::c_char; 36],
    pub scarecrowSpawnSongSet: u8_0,
    pub scarecrowSpawnSong: [u8_0; 128],
    pub unk_1346: [libc::c_char; 2],
    pub horseData: HorseData,
    pub checksum: u16_0,
    pub fileNum: s32,
    pub unk_1358: [libc::c_char; 4],
    pub gameMode: s32,
    pub sceneSetupIndex: s32,
    pub respawnFlag: s32,
    pub respawn: [RespawnData; 3],
    pub entranceSpeed: f32_0,
    pub entranceSound: u16_0,
    pub unk_13C2: [libc::c_char; 1],
    pub unk_13C3: u8_0,
    pub dogParams: s16,
    pub textTriggerFlags: u8_0,
    pub showTitleCard: u8_0,
    pub nayrusLoveTimer: s16,
    pub unk_13CA: [libc::c_char; 2],
    pub rupeeAccumulator: s16,
    pub timer1State: s16,
    pub timer1Value: s16,
    pub timer2State: s16,
    pub timer2Value: s16,
    pub timerX: [s16; 2],
    pub timerY: [s16; 2],
    pub unk_13DE: [libc::c_char; 2],
    pub seqId: u8_0,
    pub natureAmbienceId: u8_0,
    pub buttonStatus: [u8_0; 5],
    pub unk_13E7: u8_0,
    pub unk_13E8: u16_0,
    pub unk_13EA: u16_0,
    pub unk_13EC: u16_0,
    pub unk_13EE: u16_0,
    pub unk_13F0: s16,
    pub unk_13F2: s16,
    pub unk_13F4: s16,
    pub unk_13F6: s16,
    pub unk_13F8: s16,
    pub eventInf: [u16_0; 4],
    pub mapIndex: u16_0,
    pub minigameState: u16_0,
    pub minigameScore: u16_0,
    pub unk_1408: [libc::c_char; 1],
    pub language: u8_0,
    pub audioSetting: u8_0,
    pub unk_140B: [libc::c_char; 1],
    pub zTargetSetting: u8_0,
    pub forcedSeqId: u16_0,
    pub unk_1410: u8_0,
    pub unk_1411: [libc::c_char; 1],
    pub nextCutsceneIndex: u16_0,
    pub cutsceneTrigger: u8_0,
    pub chamberCutsceneNum: u8_0,
    pub nextDayTime: u16_0,
    pub fadeDuration: u8_0,
    pub unk_1419: u8_0,
    pub skyboxTime: u16_0,
    pub dogIsLost: u8_0,
    pub nextTransition: u8_0,
    pub unk_141E: [libc::c_char; 2],
    pub worldMapArea: s16,
    pub sunsSongState: s16,
    pub healthAccumulator: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Color_RGB8 {
    pub r: u8_0,
    pub g: u8_0,
    pub b: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Color_RGBA8 {
    pub r: u8_0,
    pub g: u8_0,
    pub b: u8_0,
    pub a: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union Color_RGBA8_u32 {
    pub c2rust_unnamed: C2RustUnnamed_2,
    pub rgba: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_2 {
    pub r: u8_0,
    pub g: u8_0,
    pub b: u8_0,
    pub a: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Color_RGBAf {
    pub r: f32_0,
    pub g: f32_0,
    pub b: f32_0,
    pub a: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct LightPoint {
    pub x: s16,
    pub y: s16,
    pub z: s16,
    pub color: [u8_0; 3],
    pub drawGlow: u8_0,
    pub radius: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct LightDirectional {
    pub x: s8,
    pub y: s8,
    pub z: s8,
    pub color: [u8_0; 3],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union LightParams {
    pub point: LightPoint,
    pub dir: LightDirectional,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct LightInfo {
    pub type_0: u8_0,
    pub params: LightParams,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Lights {
    pub numLights: u8_0,
    pub l: Lightsn,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct LightNode {
    pub info: *mut LightInfo,
    pub prev: *mut LightNode,
    pub next: *mut LightNode,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct LightContext {
    pub listHead: *mut LightNode,
    pub ambientColor: [u8_0; 3],
    pub fogColor: [u8_0; 3],
    pub fogNear: s16,
    pub fogFar: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GlobalContext {
    pub state: GameState,
    pub sceneNum: s16,
    pub sceneConfig: u8_0,
    pub unk_A7: [libc::c_char; 9],
    pub sceneSegment: *mut libc::c_void,
    pub view: View,
    pub mainCamera: Camera,
    pub subCameras: [Camera; 3],
    pub cameraPtrs: [*mut Camera; 4],
    pub activeCamera: s16,
    pub nextCamera: s16,
    pub sequenceCtx: SequenceContext,
    pub lightCtx: LightContext,
    pub frameAdvCtx: FrameAdvanceContext,
    pub colCtx: CollisionContext,
    pub actorCtx: ActorContext,
    pub csCtx: CutsceneContext,
    pub soundSources: [SoundSource; 16],
    pub sramCtx: SramContext,
    pub skyboxCtx: SkyboxContext,
    pub msgCtx: MessageContext,
    pub interfaceCtx: InterfaceContext,
    pub pauseCtx: PauseContext,
    pub gameOverCtx: GameOverContext,
    pub envCtx: EnvironmentContext,
    pub animationCtx: AnimationContext,
    pub objectCtx: ObjectContext,
    pub roomCtx: RoomContext,
    pub transiActorCtx: TransitionActorContext,
    pub playerInit: Option<unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext,
                                                _: *mut FlexSkeletonHeader)
                               -> ()>,
    pub playerUpdate: Option<unsafe extern "C" fn(_: *mut Player,
                                                  _: *mut GlobalContext,
                                                  _: *mut Input) -> ()>,
    pub isPlayerDroppingFish: Option<unsafe extern "C" fn(_:
                                                              *mut GlobalContext)
                                         -> s32>,
    pub startPlayerFishing: Option<unsafe extern "C" fn(_: *mut GlobalContext)
                                       -> s32>,
    pub grabPlayer: Option<unsafe extern "C" fn(_: *mut GlobalContext,
                                                _: *mut Player) -> s32>,
    pub startPlayerCutscene: Option<unsafe extern "C" fn(_:
                                                             *mut GlobalContext,
                                                         _: *mut Actor,
                                                         _: s32) -> s32>,
    pub func_11D54: Option<unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()>,
    pub damagePlayer: Option<unsafe extern "C" fn(_: *mut GlobalContext,
                                                  _: s32) -> s32>,
    pub talkWithPlayer: Option<unsafe extern "C" fn(_: *mut GlobalContext,
                                                    _: *mut Actor) -> ()>,
    pub viewProjectionMtxF: MtxF,
    pub billboardMtxF: MtxF,
    pub billboardMtx: *mut Mtx,
    pub gameplayFrames: u32_0,
    pub linkAgeOnLoad: u8_0,
    pub unk_11DE9: u8_0,
    pub curSpawn: u8_0,
    pub numSetupActors: u8_0,
    pub numRooms: u8_0,
    pub roomList: *mut RomFile,
    pub linkActorEntry: *mut ActorEntry,
    pub setupActorList: *mut ActorEntry,
    pub unk_11DFC: *mut libc::c_void,
    pub setupEntranceList: *mut EntranceEntry,
    pub setupExitList: *mut s16,
    pub setupPathList: *mut Path,
    pub cUpElfMsgs: *mut ElfMessage,
    pub specialEffects: *mut libc::c_void,
    pub skyboxId: u8_0,
    pub sceneLoadFlag: s8,
    pub unk_11E16: s16,
    pub unk_11E18: s16,
    pub nextEntranceIndex: s16,
    pub unk_11E1C: [libc::c_char; 64],
    pub shootingGalleryStatus: s8,
    pub bombchuBowlingStatus: s8,
    pub fadeTransition: u8_0,
    pub colChkCtx: CollisionCheckContext,
    pub envFlags: [u16_0; 20],
    pub pauseBgPreRender: PreRender,
    pub unk_12174: [libc::c_char; 83],
    pub unk_121C7: s8,
    pub transitionCtx: TransitionContext,
    pub unk_12418: [libc::c_char; 3],
    pub transitionMode: u8_0,
    pub transitionFade: TransitionFade,
    pub unk_12428: [libc::c_char; 3],
    pub unk_1242B: u8_0,
    pub loadedScene: *mut SceneTableEntry,
    pub unk_12430: [libc::c_char; 232],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SceneTableEntry {
    pub sceneFile: RomFile,
    pub titleFile: RomFile,
    pub unk_10: u8_0,
    pub config: u8_0,
    pub unk_12: u8_0,
    pub unk_13: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct RomFile {
    pub vromStart: u32_0,
    pub vromEnd: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TransitionFade {
    pub fadeType: u8_0,
    pub isDone: u8_0,
    pub fadeDirection: u8_0,
    pub fadeColor: Color_RGBA8_u32,
    pub fadeTimer: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TransitionContext {
    pub c2rust_unnamed: C2RustUnnamed_3,
    pub transitionType: s32,
    pub init: Option<unsafe extern "C" fn(_: *mut libc::c_void)
                         -> *mut libc::c_void>,
    pub destroy: Option<unsafe extern "C" fn(_: *mut libc::c_void) -> ()>,
    pub update: Option<unsafe extern "C" fn(_: *mut libc::c_void, _: s32)
                           -> ()>,
    pub draw: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                          _: *mut *mut Gfx) -> ()>,
    pub start: Option<unsafe extern "C" fn(_: *mut libc::c_void) -> ()>,
    pub setType: Option<unsafe extern "C" fn(_: *mut libc::c_void, _: s32)
                            -> ()>,
    pub setColor: Option<unsafe extern "C" fn(_: *mut libc::c_void, _: u32_0)
                             -> ()>,
    pub setEnvColor: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                                 _: u32_0) -> ()>,
    pub isDone: Option<unsafe extern "C" fn(_: *mut libc::c_void) -> s32>,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_3 {
    pub fade: TransitionFade,
    pub circle: TransitionCircle,
    pub triforce: TransitionTriforce,
    pub wipe: TransitionWipe,
    pub data: [libc::c_char; 552],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TransitionWipe {
    pub color: Color_RGBA8_u32,
    pub envColor: Color_RGBA8_u32,
    pub direction: u8_0,
    pub frame: u8_0,
    pub isDone: u8_0,
    pub texX: u16_0,
    pub texY: u16_0,
    pub normal: u16_0,
    pub projection: Mtx,
    pub lookAt: Mtx,
    pub modelView: [[Mtx; 3]; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TransitionTriforce {
    pub color: Color_RGBA8_u32,
    pub transPos: f32_0,
    pub step: f32_0,
    pub state: s32,
    pub fadeDirection: s32,
    pub projection: Mtx,
    pub frame: s32,
    pub modelView: [[Mtx; 3]; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TransitionCircle {
    pub color: Color_RGBA8_u32,
    pub envColor: Color_RGBA8_u32,
    pub texX: s32,
    pub texY: s32,
    pub step: s32,
    pub unk_14: u8_0,
    pub typeColor: u8_0,
    pub speed: u8_0,
    pub effect: u8_0,
    pub isDone: u8_0,
    pub frame: u8_0,
    pub normal: u16_0,
    pub projection: Mtx,
    pub lookAt: Mtx,
    pub texture: *mut libc::c_void,
    pub modelView: [[Mtx; 3]; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PreRender {
    pub width: s32,
    pub height: s32,
    pub widthSave: s32,
    pub heightSave: s32,
    pub fbuf: *mut u16_0,
    pub fbufSave: *mut u16_0,
    pub cvgSave: *mut u8_0,
    pub zbuf: *mut u16_0,
    pub zbufSave: *mut u16_0,
    pub ulxSave: s32,
    pub ulySave: s32,
    pub lrxSave: s32,
    pub lrySave: s32,
    pub ulx: s32,
    pub uly: s32,
    pub lrx: s32,
    pub lry: s32,
    pub alloc: ListAlloc,
    pub unk_4C: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ListAlloc {
    pub prev: *mut ListAlloc,
    pub next: *mut ListAlloc,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CollisionCheckContext {
    pub colATCount: s16,
    pub sacFlags: u16_0,
    pub colAT: [*mut Collider; 50],
    pub colACCount: s32,
    pub colAC: [*mut Collider; 60],
    pub colOCCount: s32,
    pub colOC: [*mut Collider; 50],
    pub colLineCount: s32,
    pub colLine: [*mut OcLine; 3],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OcLine {
    pub line: Linef,
    pub ocFlags: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Collider {
    pub actor: *mut Actor,
    pub at: *mut Actor,
    pub ac: *mut Actor,
    pub oc: *mut Actor,
    pub atFlags: u8_0,
    pub acFlags: u8_0,
    pub ocFlags1: u8_0,
    pub ocFlags2: u8_0,
    pub colType: u8_0,
    pub shape: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Actor {
    pub id: s16,
    pub category: u8_0,
    pub room: s8,
    pub flags: u32_0,
    pub home: PosRot,
    pub params: s16,
    pub objBankIndex: s8,
    pub targetMode: s8,
    pub sfx: u16_0,
    pub world: PosRot,
    pub focus: PosRot,
    pub targetArrowOffset: f32_0,
    pub scale: Vec3f,
    pub velocity: Vec3f,
    pub speedXZ: f32_0,
    pub gravity: f32_0,
    pub minVelocityY: f32_0,
    pub wallPoly: *mut CollisionPoly,
    pub floorPoly: *mut CollisionPoly,
    pub wallBgId: u8_0,
    pub floorBgId: u8_0,
    pub wallYaw: s16,
    pub floorHeight: f32_0,
    pub yDistToWater: f32_0,
    pub bgCheckFlags: u16_0,
    pub yawTowardsPlayer: s16,
    pub xyzDistToPlayerSq: f32_0,
    pub xzDistToPlayer: f32_0,
    pub yDistToPlayer: f32_0,
    pub colChkInfo: CollisionCheckInfo,
    pub shape: ActorShape,
    pub projectedPos: Vec3f,
    pub projectedW: f32_0,
    pub uncullZoneForward: f32_0,
    pub uncullZoneScale: f32_0,
    pub uncullZoneDownward: f32_0,
    pub prevPos: Vec3f,
    pub isTargeted: u8_0,
    pub targetPriority: u8_0,
    pub textId: u16_0,
    pub freezeTimer: u16_0,
    pub colorFilterParams: u16_0,
    pub colorFilterTimer: u8_0,
    pub isDrawn: u8_0,
    pub dropFlag: u8_0,
    pub naviEnemyId: u8_0,
    pub parent: *mut Actor,
    pub child: *mut Actor,
    pub prev: *mut Actor,
    pub next: *mut Actor,
    pub init: ActorFunc,
    pub destroy: ActorFunc,
    pub update: ActorFunc,
    pub draw: ActorFunc,
    pub overlayEntry: *mut ActorOverlay,
    pub dbgPad: [libc::c_char; 16],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ActorOverlay {
    pub vromStart: u32_0,
    pub vromEnd: u32_0,
    pub vramStart: *mut libc::c_void,
    pub vramEnd: *mut libc::c_void,
    pub loadedRamAddr: *mut libc::c_void,
    pub initInfo: *mut ActorInit,
    pub name: *mut libc::c_char,
    pub allocType: u16_0,
    pub numLoaded: s8,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ActorInit {
    pub id: s16,
    pub category: u8_0,
    pub flags: u32_0,
    pub objectId: s16,
    pub instanceSize: u32_0,
    pub init: ActorFunc,
    pub destroy: ActorFunc,
    pub update: ActorFunc,
    pub draw: ActorFunc,
}
pub type ActorFunc
    =
    Option<unsafe extern "C" fn(_: *mut Actor, _: *mut GlobalContext) -> ()>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ActorShape {
    pub rot: Vec3s,
    pub face: s16,
    pub yOffset: f32_0,
    pub shadowDraw: ActorShadowFunc,
    pub shadowScale: f32_0,
    pub shadowAlpha: u8_0,
    pub feetFloorFlags: u8_0,
    pub feetPos: [Vec3f; 2],
}
pub type ActorShadowFunc
    =
    Option<unsafe extern "C" fn(_: *mut Actor, _: *mut Lights,
                                _: *mut GlobalContext) -> ()>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CollisionCheckInfo {
    pub damageTable: *mut DamageTable,
    pub displacement: Vec3f,
    pub cylRadius: s16,
    pub cylHeight: s16,
    pub cylYShift: s16,
    pub mass: u8_0,
    pub health: u8_0,
    pub damage: u8_0,
    pub damageEffect: u8_0,
    pub atHitEffect: u8_0,
    pub acHitEffect: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct DamageTable {
    pub table: [u8_0; 32],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CollisionPoly {
    pub type_0: u16_0,
    pub c2rust_unnamed: C2RustUnnamed_4,
    pub normal: Vec3s,
    pub dist: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_4 {
    pub vtxData: [u16_0; 3],
    pub c2rust_unnamed: C2RustUnnamed_5,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_5 {
    pub flags_vIA: u16_0,
    pub flags_vIB: u16_0,
    pub vIC: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PosRot {
    pub pos: Vec3f,
    pub rot: Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ElfMessage {
    pub byte0: u8_0,
    pub byte1: u8_0,
    pub byte2: u8_0,
    pub byte3: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Path {
    pub count: u8_0,
    pub points: *mut Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct EntranceEntry {
    pub spawn: u8_0,
    pub room: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ActorEntry {
    pub id: s16,
    pub pos: Vec3s,
    pub rot: Vec3s,
    pub params: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Player {
    pub actor: Actor,
    pub currentTunic: s8,
    pub currentSword: s8,
    pub currentShield: s8,
    pub currentBoots: s8,
    pub heldItemButton: s8,
    pub heldItemActionParam: s8,
    pub heldItemId: u8_0,
    pub prevBoots: s8,
    pub itemActionParam: s8,
    pub unk_155: [libc::c_char; 3],
    pub modelGroup: u8_0,
    pub nextModelGroup: u8_0,
    pub unk_15A: s8,
    pub modelAnimType: u8_0,
    pub leftHandType: u8_0,
    pub rightHandType: u8_0,
    pub sheathType: u8_0,
    pub currentMask: u8_0,
    pub rightHandDLists: *mut *mut Gfx,
    pub leftHandDLists: *mut *mut Gfx,
    pub sheathDLists: *mut *mut Gfx,
    pub waistDLists: *mut *mut Gfx,
    pub giObjectLoading: u8_0,
    pub giObjectDmaRequest: DmaRequest,
    pub giObjectLoadQueue: OSMesgQueue,
    pub giObjectLoadMsg: OSMesg,
    pub giObjectSegment: *mut libc::c_void,
    pub skelAnime: SkelAnime,
    pub jointTable: [Vec3s; 24],
    pub morphTable: [Vec3s; 24],
    pub blendTable: [Vec3s; 24],
    pub unk_3A8: [s16; 2],
    pub heldActor: *mut Actor,
    pub leftHandPos: Vec3f,
    pub unk_3BC: Vec3s,
    pub unk_3C4: *mut Actor,
    pub unk_3C8: Vec3f,
    pub unk_3D4: [libc::c_char; 88],
    pub doorType: s8,
    pub doorDirection: s8,
    pub doorTimer: s16,
    pub doorActor: *mut Actor,
    pub getItemId: s8,
    pub getItemDirection: u16_0,
    pub interactRangeActor: *mut Actor,
    pub mountSide: s8,
    pub unk_43D: [libc::c_char; 3],
    pub rideActor: *mut Actor,
    pub csMode: u8_0,
    pub prevCsMode: u8_0,
    pub unk_446: u8_0,
    pub unk_447: u8_0,
    pub unk_448: *mut Actor,
    pub unk_44C: [libc::c_char; 4],
    pub unk_450: Vec3f,
    pub unk_45C: Vec3f,
    pub unk_468: [libc::c_char; 2],
    pub unk_46A: s16,
    pub unk_46C: s16,
    pub unk_46E: [libc::c_char; 42],
    pub cylinder: ColliderCylinder,
    pub swordQuads: [ColliderQuad; 2],
    pub shieldQuad: ColliderQuad,
    pub unk_664: *mut Actor,
    pub unk_668: [libc::c_char; 4],
    pub unk_66C: s32,
    pub swordEffectIndex: s32,
    pub func_674: PlayerFunc674,
    pub ageProperties: *mut PlayerAgeProperties,
    pub stateFlags1: u32_0,
    pub stateFlags2: u32_0,
    pub unk_684: *mut Actor,
    pub boomerangActor: *mut Actor,
    pub naviActor: *mut Actor,
    pub naviTextId: s16,
    pub stateFlags3: u8_0,
    pub exchangeItemId: s8,
    pub targetActor: *mut Actor,
    pub targetActorDistance: f32_0,
    pub unk_69C: [libc::c_char; 4],
    pub unk_6A0: f32_0,
    pub unk_6A4: f32_0,
    pub unk_6A8: *mut Actor,
    pub unk_6AC: s8,
    pub unk_6AD: u8_0,
    pub unk_6AE: u16_0,
    pub unk_6B0: s16,
    pub unk_6B4: [libc::c_char; 4],
    pub unk_6B6: s16,
    pub unk_6B8: s16,
    pub unk_6BA: s16,
    pub unk_6BC: s16,
    pub unk_6BE: s16,
    pub unk_6C0: s16,
    pub unk_6C2: s16,
    pub unk_6C4: f32_0,
    pub skelAnime2: SkelAnime,
    pub jointTable2: [Vec3s; 24],
    pub morphTable2: [Vec3s; 24],
    pub func_82C: PlayerFunc82C,
    pub unk_830: f32_0,
    pub unk_834: s16,
    pub unk_836: s8,
    pub unk_837: u8_0,
    pub linearVelocity: f32_0,
    pub currentYaw: s16,
    pub targetYaw: s16,
    pub unk_840: u16_0,
    pub swordAnimation: s8,
    pub swordState: s8,
    pub unk_844: s8,
    pub unk_845: u8_0,
    pub unk_846: u8_0,
    pub unk_847: [s8; 4],
    pub unk_84B: [s8; 4],
    pub unk_84F: s8,
    pub unk_850: s16,
    pub unk_854: f32_0,
    pub unk_858: f32_0,
    pub unk_85C: f32_0,
    pub unk_860: s16,
    pub unk_862: s8,
    pub unk_864: f32_0,
    pub unk_868: f32_0,
    pub unk_86C: f32_0,
    pub unk_870: f32_0,
    pub unk_874: f32_0,
    pub unk_878: f32_0,
    pub unk_87C: s16,
    pub unk_87E: s16,
    pub unk_880: f32_0,
    pub wallHeight: f32_0,
    pub wallDistance: f32_0,
    pub unk_88C: u8_0,
    pub unk_88D: u8_0,
    pub unk_88E: u8_0,
    pub unk_88F: u8_0,
    pub unk_890: u8_0,
    pub shockTimer: u8_0,
    pub unk_892: u8_0,
    pub hoverBootsTimer: u8_0,
    pub fallStartHeight: s16,
    pub fallDistance: s16,
    pub unk_898: s16,
    pub unk_89A: s16,
    pub unk_89C: s16,
    pub unk_89E: u16_0,
    pub unk_8A0: u8_0,
    pub unk_8A1: u8_0,
    pub unk_8A2: s16,
    pub unk_8A4: f32_0,
    pub unk_8A8: f32_0,
    pub windSpeed: f32_0,
    pub windDirection: s16,
    pub swordInfo: [WeaponInfo; 3],
    pub bodyPartsPos: [Vec3f; 18],
    pub mf_9E0: MtxF,
    pub shieldMf: MtxF,
    pub isBurning: u8_0,
    pub flameTimers: [u8_0; 18],
    pub unk_A73: u8_0,
    pub func_A74: PlayerFuncA74,
    pub invincibilityTimer: s8,
    pub unk_A79: u8_0,
    pub unk_A7A: u8_0,
    pub unk_A7B: u8_0,
    pub unk_A7C: f32_0,
    pub unk_A80: s16,
    pub unk_A82: u16_0,
    pub unk_A84: s16,
    pub unk_A86: s8,
    pub unk_A87: u8_0,
    pub unk_A88: Vec3f,
}
pub type PlayerFuncA74
    =
    Option<unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player) -> ()>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct WeaponInfo {
    pub active: s32,
    pub tip: Vec3f,
    pub base: Vec3f,
}
pub type PlayerFunc82C
    =
    Option<unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
               -> s32>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SkelAnime {
    pub limbCount: u8_0,
    pub mode: u8_0,
    pub dListCount: u8_0,
    pub taper: s8,
    pub skeleton: *mut *mut libc::c_void,
    pub animation: *mut libc::c_void,
    pub startFrame: f32_0,
    pub endFrame: f32_0,
    pub animLength: f32_0,
    pub curFrame: f32_0,
    pub playSpeed: f32_0,
    pub jointTable: *mut Vec3s,
    pub morphTable: *mut Vec3s,
    pub morphWeight: f32_0,
    pub morphRate: f32_0,
    pub update: Option<unsafe extern "C" fn() -> s32>,
    pub initFlags: s8,
    pub moveFlags: u8_0,
    pub prevRot: s16,
    pub prevTransl: Vec3s,
    pub baseTransl: Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PlayerAgeProperties {
    pub unk_00: f32_0,
    pub unk_04: f32_0,
    pub unk_08: f32_0,
    pub unk_0C: f32_0,
    pub unk_10: f32_0,
    pub unk_14: f32_0,
    pub unk_18: f32_0,
    pub unk_1C: f32_0,
    pub unk_20: f32_0,
    pub unk_24: f32_0,
    pub unk_28: f32_0,
    pub unk_2C: f32_0,
    pub unk_30: f32_0,
    pub unk_34: f32_0,
    pub unk_38: f32_0,
    pub unk_3C: f32_0,
    pub unk_40: f32_0,
    pub unk_44: Vec3s,
    pub unk_4A: [Vec3s; 4],
    pub unk_62: [Vec3s; 4],
    pub unk_7A: [Vec3s; 2],
    pub unk_86: [Vec3s; 2],
    pub unk_92: u16_0,
    pub unk_94: u16_0,
    pub unk_98: *mut LinkAnimationHeader,
    pub unk_9C: *mut LinkAnimationHeader,
    pub unk_A0: *mut LinkAnimationHeader,
    pub unk_A4: *mut LinkAnimationHeader,
    pub unk_A8: *mut LinkAnimationHeader,
    pub unk_AC: [*mut LinkAnimationHeader; 4],
    pub unk_BC: [*mut LinkAnimationHeader; 2],
    pub unk_C4: [*mut LinkAnimationHeader; 2],
    pub unk_CC: [*mut LinkAnimationHeader; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct LinkAnimationHeader {
    pub common: AnimationHeaderCommon,
    pub segment: *mut libc::c_void,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimationHeaderCommon {
    pub frameCount: s16,
}
pub type PlayerFunc674
    =
    Option<unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext) -> ()>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderQuad {
    pub base: Collider,
    pub info: ColliderInfo,
    pub dim: ColliderQuadDim,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderQuadDim {
    pub quad: [Vec3f; 4],
    pub dcMid: Vec3s,
    pub baMid: Vec3s,
    pub acDist: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderInfo {
    pub toucher: ColliderTouch,
    pub bumper: ColliderBump,
    pub elemType: u8_0,
    pub toucherFlags: u8_0,
    pub bumperFlags: u8_0,
    pub ocElemFlags: u8_0,
    pub atHit: *mut Collider,
    pub acHit: *mut Collider,
    pub atHitInfo: *mut ColliderInfo,
    pub acHitInfo: *mut ColliderInfo,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderBump {
    pub dmgFlags: u32_0,
    pub effect: u8_0,
    pub defense: u8_0,
    pub hitPos: Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderTouch {
    pub dmgFlags: u32_0,
    pub effect: u8_0,
    pub damage: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderCylinder {
    pub base: Collider,
    pub info: ColliderInfo,
    pub dim: Cylinder16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct DmaRequest {
    pub vromAddr: u32_0,
    pub dramAddr: *mut libc::c_void,
    pub size: u32_0,
    pub filename: *const libc::c_char,
    pub line: s32,
    pub unk_14: s32,
    pub notifyQueue: *mut OSMesgQueue,
    pub notifyMsg: OSMesg,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Input {
    pub cur: OSContPad,
    pub prev: OSContPad,
    pub press: OSContPad,
    pub rel: OSContPad,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct FlexSkeletonHeader {
    pub sh: SkeletonHeader,
    pub dListCount: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SkeletonHeader {
    pub segment: *mut *mut libc::c_void,
    pub limbCount: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TransitionActorContext {
    pub numActors: u8_0,
    pub list: *mut TransitionActorEntry,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TransitionActorEntry {
    pub sides: [C2RustUnnamed_6; 2],
    pub id: s16,
    pub pos: Vec3s,
    pub rotY: s16,
    pub params: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_6 {
    pub room: s8,
    pub effects: s8,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct RoomContext {
    pub curRoom: Room,
    pub prevRoom: Room,
    pub bufPtrs: [*mut libc::c_void; 2],
    pub unk_30: u8_0,
    pub status: s8,
    pub unk_34: *mut libc::c_void,
    pub dmaRequest: DmaRequest,
    pub loadQueue: OSMesgQueue,
    pub loadMsg: OSMesg,
    pub unk_74: [s16; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Room {
    pub num: s8,
    pub unk_01: u8_0,
    pub unk_02: u8_0,
    pub unk_03: u8_0,
    pub echo: s8,
    pub showInvisActors: u8_0,
    pub mesh: *mut Mesh,
    pub segment: *mut libc::c_void,
    pub unk_10: [libc::c_char; 4],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union Mesh {
    pub polygon: Polygon,
    pub polygon0: PolygonType0,
    pub polygon1: PolygonType1,
    pub polygon2: PolygonType2,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PolygonType2 {
    pub type_0: u8_0,
    pub num: u8_0,
    pub start: *mut libc::c_void,
    pub end: *mut libc::c_void,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PolygonType1 {
    pub type_0: u8_0,
    pub format: u8_0,
    pub dlist: *mut Gfx,
    pub c2rust_unnamed: C2RustUnnamed_7,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_7 {
    pub single: C2RustUnnamed_9,
    pub multi: C2RustUnnamed_8,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_8 {
    pub count: u8_0,
    pub list: *mut BgImage,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct BgImage {
    pub unk_00: u16_0,
    pub id: u8_0,
    pub source: u32_0,
    pub unk_0C: u32_0,
    pub tlut: u32_0,
    pub width: u16_0,
    pub height: u16_0,
    pub fmt: u8_0,
    pub siz: u8_0,
    pub mode0: u16_0,
    pub tlutCount: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_9 {
    pub source: *mut libc::c_void,
    pub unk_0C: u32_0,
    pub tlut: *mut libc::c_void,
    pub width: u16_0,
    pub height: u16_0,
    pub fmt: u8_0,
    pub siz: u8_0,
    pub mode0: u16_0,
    pub tlutCount: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PolygonType0 {
    pub type_0: u8_0,
    pub num: u8_0,
    pub start: *mut libc::c_void,
    pub end: *mut libc::c_void,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Polygon {
    pub type_0: u8_0,
    pub num: u8_0,
    pub start: *mut libc::c_void,
    pub end: *mut libc::c_void,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ObjectContext {
    pub spaceStart: *mut libc::c_void,
    pub spaceEnd: *mut libc::c_void,
    pub num: u8_0,
    pub unk_09: u8_0,
    pub mainKeepIndex: u8_0,
    pub subKeepIndex: u8_0,
    pub status: [ObjectStatus; 19],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ObjectStatus {
    pub id: s16,
    pub segment: *mut libc::c_void,
    pub dmaRequest: DmaRequest,
    pub loadQueue: OSMesgQueue,
    pub loadMsg: OSMesg,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimationContext {
    pub animationCount: s16,
    pub entries: [AnimationEntry; 50],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimationEntry {
    pub type_0: u8_0,
    pub data: AnimationEntryData,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union AnimationEntryData {
    pub load: AnimEntryLoadFrame,
    pub copy: AnimEntryCopyAll,
    pub interp: AnimEntryInterp,
    pub copy1: AnimEntryCopyTrue,
    pub copy0: AnimEntryCopyFalse,
    pub move_0: AnimEntryMoveActor,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimEntryMoveActor {
    pub actor: *mut Actor,
    pub skelAnime: *mut SkelAnime,
    pub unk_08: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimEntryCopyFalse {
    pub queueFlag: u8_0,
    pub vecCount: u8_0,
    pub dst: *mut Vec3s,
    pub src: *mut Vec3s,
    pub copyFlag: *mut u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimEntryCopyTrue {
    pub queueFlag: u8_0,
    pub vecCount: u8_0,
    pub dst: *mut Vec3s,
    pub src: *mut Vec3s,
    pub copyFlag: *mut u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimEntryInterp {
    pub queueFlag: u8_0,
    pub vecCount: u8_0,
    pub base: *mut Vec3s,
    pub mod_0: *mut Vec3s,
    pub weight: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimEntryCopyAll {
    pub queueFlag: u8_0,
    pub vecCount: u8_0,
    pub dst: *mut Vec3s,
    pub src: *mut Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimEntryLoadFrame {
    pub req: DmaRequest,
    pub msgQueue: OSMesgQueue,
    pub msg: OSMesg,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct EnvironmentContext {
    pub unk_00: [libc::c_char; 2],
    pub timeIncrement: u16_0,
    pub sunPos: Vec3f,
    pub skybox1Index: u8_0,
    pub skybox2Index: u8_0,
    pub unk_12: [libc::c_char; 1],
    pub skyboxBlend: u8_0,
    pub unk_14: [libc::c_char; 1],
    pub skyboxDisabled: u8_0,
    pub sunMoonDisabled: u8_0,
    pub unk_17: u8_0,
    pub unk_18: u8_0,
    pub unk_19: u8_0,
    pub unk_1A: u16_0,
    pub unk_1C: [libc::c_char; 2],
    pub indoors: u8_0,
    pub unk_1F: u8_0,
    pub unk_20: u8_0,
    pub unk_21: u8_0,
    pub unk_22: u16_0,
    pub unk_24: u16_0,
    pub unk_26: [libc::c_char; 2],
    pub dirLight1: LightInfo,
    pub dirLight2: LightInfo,
    pub skyboxDmaState: s8,
    pub dmaRequest: DmaRequest,
    pub loadQueue: OSMesgQueue,
    pub loadMsg: OSMesg,
    pub unk_84: f32_0,
    pub unk_88: f32_0,
    pub adjAmbientColor: [s16; 3],
    pub adjLight1Color: [s16; 3],
    pub adjFogColor: [s16; 3],
    pub adjFogNear: s16,
    pub adjFogFar: s16,
    pub unk_A2: [libc::c_char; 6],
    pub windDirection: Vec3s,
    pub windSpeed: f32_0,
    pub numLightSettings: u8_0,
    pub lightSettingsList: *mut EnvLightSettings,
    pub blendIndoorLights: u8_0,
    pub unk_BD: u8_0,
    pub unk_BE: u8_0,
    pub unk_BF: u8_0,
    pub lightSettings: EnvLightSettings,
    pub unk_D6: u16_0,
    pub unk_D8: f32_0,
    pub unk_DC: u8_0,
    pub gloomySkyMode: u8_0,
    pub unk_DE: u8_0,
    pub lightningMode: u8_0,
    pub unk_E0: u8_0,
    pub fillScreen: u8_0,
    pub screenFillColor: [u8_0; 4],
    pub sandstormState: u8_0,
    pub sandstormPrimA: u8_0,
    pub sandstormEnvA: u8_0,
    pub customSkyboxFilter: u8_0,
    pub skyboxFilterColor: [u8_0; 4],
    pub unk_EE: [u8_0; 4],
    pub unk_F2: [u8_0; 4],
    pub unk_F6: [libc::c_char; 6],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct EnvLightSettings {
    pub ambientColor: [u8_0; 3],
    pub light1Dir: [s8; 3],
    pub light1Color: [u8_0; 3],
    pub light2Dir: [s8; 3],
    pub light2Color: [u8_0; 3],
    pub fogColor: [u8_0; 3],
    pub fogNear: s16,
    pub fogFar: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GameOverContext {
    pub state: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PauseContext {
    pub view: View,
    pub iconItemSegment: *mut u8_0,
    pub iconItem24Segment: *mut u8_0,
    pub iconItemAltSegment: *mut u8_0,
    pub iconItemLangSegment: *mut u8_0,
    pub nameSegment: *mut u8_0,
    pub playerSegment: *mut u8_0,
    pub unk_140: [libc::c_char; 4],
    pub itemPageVtx: *mut Vtx,
    pub equipPageVtx: *mut Vtx,
    pub mapPageVtx: *mut Vtx,
    pub questPageVtx: *mut Vtx,
    pub infoPanelVtx: *mut Vtx,
    pub itemVtx: *mut Vtx,
    pub equipVtx: *mut Vtx,
    pub unk_160: [libc::c_char; 4],
    pub questVtx: *mut Vtx,
    pub cursorVtx: *mut Vtx,
    pub saveVtx: *mut Vtx,
    pub unk_170: [libc::c_char; 36],
    pub ocarinaStaff: *mut OcarinaStaff,
    pub unk_198: [libc::c_char; 32],
    pub loadQueue: OSMesgQueue,
    pub loadMsg: OSMesg,
    pub state: u16_0,
    pub debugState: u16_0,
    pub eye: Vec3f,
    pub unk_1E4: u16_0,
    pub mode: u16_0,
    pub pageIndex: u16_0,
    pub unk_1EA: u16_0,
    pub unk_1EC: u16_0,
    pub unk_1F0: f32_0,
    pub unk_1F4: f32_0,
    pub unk_1F8: f32_0,
    pub unk_1FC: f32_0,
    pub unk_200: f32_0,
    pub unk_204: f32_0,
    pub alpha: u16_0,
    pub offsetY: s16,
    pub unk_20C: [libc::c_char; 8],
    pub stickRelX: s16,
    pub stickRelY: s16,
    pub cursorPoint: [s16; 5],
    pub cursorX: [s16; 5],
    pub cursorY: [s16; 5],
    pub dungeonMapSlot: s16,
    pub cursorSpecialPos: s16,
    pub pageSwitchTimer: s16,
    pub namedItem: u16_0,
    pub cursorItem: [u16_0; 4],
    pub cursorSlot: [u16_0; 4],
    pub equipTargetItem: u16_0,
    pub equipTargetSlot: u16_0,
    pub equipTargetCBtn: u16_0,
    pub equipAnimX: s16,
    pub equipAnimY: s16,
    pub equipAnimAlpha: s16,
    pub infoPanelOffsetY: s16,
    pub nameDisplayTimer: u16_0,
    pub nameColorSet: u16_0,
    pub cursorColorSet: s16,
    pub promptChoice: s16,
    pub ocarinaSongIdx: s16,
    pub worldMapPoints: [u8_0; 20],
    pub tradeQuestLocation: u8_0,
    pub playerSkelAnime: SkelAnime,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OcarinaStaff {
    pub noteIdx: u8_0,
    pub state: u8_0,
    pub pos: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct View {
    pub magic: s32,
    pub gfxCtx: *mut GraphicsContext,
    pub viewport: Viewport,
    pub fovy: f32_0,
    pub zNear: f32_0,
    pub zFar: f32_0,
    pub scale: f32_0,
    pub eye: Vec3f,
    pub lookAt: Vec3f,
    pub up: Vec3f,
    pub vp: Vp,
    pub projection: Mtx,
    pub viewing: Mtx,
    pub projectionPtr: *mut Mtx,
    pub viewingPtr: *mut Mtx,
    pub unk_E8: Vec3f,
    pub unk_F4: Vec3f,
    pub unk_100: f32_0,
    pub unk_104: Vec3f,
    pub unk_110: Vec3f,
    pub normal: u16_0,
    pub flags: s32,
    pub unk_124: s32,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Viewport {
    pub topY: s32,
    pub bottomY: s32,
    pub leftX: s32,
    pub rightX: s32,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraphicsContext {
    pub polyOpaBuffer: *mut Gfx,
    pub polyXluBuffer: *mut Gfx,
    pub unk_008: [libc::c_char; 8],
    pub overlayBuffer: *mut Gfx,
    pub unk_014: u32_0,
    pub unk_018: [libc::c_char; 32],
    pub msgBuff: [OSMesg; 8],
    pub schedMsgQ: *mut OSMesgQueue,
    pub queue: OSMesgQueue,
    pub unk_074: [libc::c_char; 4],
    pub task: OSScTask,
    pub unk_0D0: [libc::c_char; 224],
    pub workBuffer: *mut Gfx,
    pub work: TwoHeadGfxArena,
    pub unk_01C4: [libc::c_char; 192],
    pub viMode: *mut OSViMode,
    pub unk_0288: [libc::c_char; 32],
    pub overlay: TwoHeadGfxArena,
    pub polyOpa: TwoHeadGfxArena,
    pub polyXlu: TwoHeadGfxArena,
    pub gfxPoolIdx: u32_0,
    pub curFrameBuffer: *mut u16_0,
    pub unk_2E0: [libc::c_char; 4],
    pub viFeatures: u32_0,
    pub fbIdx: s32,
    pub callback: Option<unsafe extern "C" fn(_: *mut GraphicsContext,
                                              _: *mut libc::c_void) -> ()>,
    pub callbackParam: *mut libc::c_void,
    pub xScale: f32_0,
    pub yScale: f32_0,
    pub unk_2FC: [libc::c_char; 4],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TwoHeadGfxArena {
    pub size: u32_0,
    pub bufp: *mut Gfx,
    pub p: *mut Gfx,
    pub d: *mut Gfx,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSScTask {
    pub next: *mut OSScTask,
    pub state: u32_0,
    pub flags: u32_0,
    pub framebuffer: *mut CfbInfo,
    pub list: OSTask,
    pub msgQ: *mut OSMesgQueue,
    pub msg: OSMesg,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CfbInfo {
    pub fb1: *mut u16_0,
    pub swapBuffer: *mut u16_0,
    pub viMode: *mut OSViMode,
    pub features: u32_0,
    pub unk_10: u8_0,
    pub updateRate: s8,
    pub updateRate2: s8,
    pub unk_13: u8_0,
    pub xScale: f32_0,
    pub yScale: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct InterfaceContext {
    pub view: View,
    pub actionVtx: *mut Vtx,
    pub beatingHeartVtx: *mut Vtx,
    pub parameterSegment: *mut u8_0,
    pub doActionSegment: *mut u8_0,
    pub iconItemSegment: *mut u8_0,
    pub mapSegment: *mut u8_0,
    pub mapPalette: [u8_0; 32],
    pub dmaRequest_160: DmaRequest,
    pub dmaRequest_180: DmaRequest,
    pub unk_1A0: [libc::c_char; 32],
    pub loadQueue: OSMesgQueue,
    pub loadMsg: OSMesg,
    pub viewport: Viewport,
    pub unk_1EC: s16,
    pub unk_1EE: u16_0,
    pub unk_1F0: u16_0,
    pub unk_1F4: f32_0,
    pub naviCalling: s16,
    pub unk_1FA: s16,
    pub unk_1FC: s16,
    pub unk_1FE: s16,
    pub unk_200: s16,
    pub beatingHeartPrim: [s16; 3],
    pub beatingHeartEnv: [s16; 3],
    pub heartsPrimR: [s16; 2],
    pub heartsPrimG: [s16; 2],
    pub heartsPrimB: [s16; 2],
    pub heartsEnvR: [s16; 2],
    pub heartsEnvG: [s16; 2],
    pub heartsEnvB: [s16; 2],
    pub unk_226: s16,
    pub unk_228: s16,
    pub unk_22A: s16,
    pub unk_22C: s16,
    pub unk_22E: s16,
    pub unk_230: s16,
    pub counterDigits: [s16; 4],
    pub numHorseBoosts: u8_0,
    pub unk_23C: u16_0,
    pub hbaAmmo: u16_0,
    pub unk_240: u16_0,
    pub unk_242: u16_0,
    pub unk_244: u16_0,
    pub aAlpha: u16_0,
    pub bAlpha: u16_0,
    pub cLeftAlpha: u16_0,
    pub cDownAlpha: u16_0,
    pub cRightAlpha: u16_0,
    pub healthAlpha: u16_0,
    pub magicAlpha: u16_0,
    pub minimapAlpha: u16_0,
    pub startAlpha: s16,
    pub unk_258: s16,
    pub unk_25A: s16,
    pub mapRoomNum: s16,
    pub mapPaletteIndex: s16,
    pub unk_260: u8_0,
    pub unk_261: u8_0,
    pub restrictions: C2RustUnnamed_10,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_10 {
    pub hGauge: u8_0,
    pub bButton: u8_0,
    pub aButton: u8_0,
    pub bottles: u8_0,
    pub tradeItems: u8_0,
    pub hookshot: u8_0,
    pub ocarina: u8_0,
    pub warpSongs: u8_0,
    pub sunsSong: u8_0,
    pub farores: u8_0,
    pub dinsNayrus: u8_0,
    pub all: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct MessageContext {
    pub view: View,
    pub font: Font,
    pub textboxSegment: *mut libc::c_void,
    pub unk_E2B4: [libc::c_char; 4],
    pub ocarinaStaff: *mut OcarinaStaff,
    pub unk_E2BC: [libc::c_char; 60],
    pub textId: u16_0,
    pub choiceTextId: u16_0,
    pub textBoxProperties: u8_0,
    pub textBoxType: u8_0,
    pub textBoxPos: u8_0,
    pub msgLength: s32,
    pub msgMode: u8_0,
    pub unk_E305: [libc::c_char; 1],
    pub msgBufDecoded: [u8_0; 200],
    pub msgBufPos: u16_0,
    pub unk_E3D0: u16_0,
    pub textDrawPos: u16_0,
    pub decodedTextLen: u16_0,
    pub textUnskippable: u16_0,
    pub textPosX: s16,
    pub textPosY: s16,
    pub textColorR: s16,
    pub textColorG: s16,
    pub textColorB: s16,
    pub textColorAlpha: s16,
    pub textboxEndType: u8_0,
    pub choiceIndex: u8_0,
    pub choiceNum: u8_0,
    pub stateTimer: u8_0,
    pub textDelayTimer: u16_0,
    pub textDelay: u16_0,
    pub lastPlayedSong: u16_0,
    pub ocarinaMode: u16_0,
    pub ocarinaAction: u16_0,
    pub unk_E3F2: u16_0,
    pub unk_E3F4: u16_0,
    pub textboxBackgroundIdx: u16_0,
    pub textboxBackgroundForeColorIdx: u8_0,
    pub textboxBackgroundBackColorIdx: u8_0,
    pub textboxBackgroundYOffsetIdx: u8_0,
    pub textboxBackgroundUnkArg: u8_0,
    pub unk_E3FC: [libc::c_char; 2],
    pub textboxColorRed: s16,
    pub textboxColorGreen: s16,
    pub textboxColorBlue: s16,
    pub textboxColorAlphaTarget: s16,
    pub textboxColorAlphaCurrent: s16,
    pub talkActor: *mut Actor,
    pub disableWarpSongs: s16,
    pub unk_E40E: s16,
    pub lastOcaNoteIdx: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Font {
    pub msgOffset: u32_0,
    pub msgLength: u32_0,
    pub charTexBuf: [u8_0; 15360],
    pub iconBuf: [u8_0; 128],
    pub fontBuf: [u8_0; 40960],
    pub c2rust_unnamed: C2RustUnnamed_11,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_11 {
    pub msgBuf: [libc::c_char; 1280],
    pub msgBufWide: [u16_0; 640],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SkyboxContext {
    pub unk_00: [libc::c_char; 296],
    pub staticSegments: [*mut libc::c_void; 2],
    pub palettes: *mut [u16_0; 256],
    pub dListBuf: *mut [Gfx; 150],
    pub unk_138: *mut Gfx,
    pub roomVtx: *mut Vtx,
    pub unk_140: s16,
    pub rot: Vec3f,
    pub unk_150: [libc::c_char; 16],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SramContext {
    pub readBuff: *mut u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SoundSource {
    pub countdown: u16_0,
    pub originPos: Vec3f,
    pub relativePos: Vec3f,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CutsceneContext {
    pub unk_00: [libc::c_char; 4],
    pub segment: *mut libc::c_void,
    pub state: u8_0,
    pub unk_0C: f32_0,
    pub frames: u16_0,
    pub unk_12: u16_0,
    pub unk_14: s32,
    pub unk_18: u16_0,
    pub unk_1A: u8_0,
    pub unk_1B: u8_0,
    pub cameraFocus: *mut CutsceneCameraPoint,
    pub cameraPosition: *mut CutsceneCameraPoint,
    pub linkAction: *mut CsCmdActorAction,
    pub npcActions: [*mut CsCmdActorAction; 10],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CsCmdActorAction {
    pub action: u16_0,
    pub startFrame: u16_0,
    pub endFrame: u16_0,
    pub c2rust_unnamed: C2RustUnnamed_12,
    pub startPos: Vec3i,
    pub endPos: Vec3i,
    pub normal: Vec3i,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_12 {
    pub rot: Vec3s,
    pub urot: Vec3us,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CutsceneCameraPoint {
    pub continueFlag: s8,
    pub cameraRoll: s8,
    pub nextPointFrame: u16_0,
    pub viewAngle: f32_0,
    pub pos: Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ActorContext {
    pub freezeFlashTimer: u8_0,
    pub unk_01: [libc::c_char; 1],
    pub unk_02: u8_0,
    pub unk_03: u8_0,
    pub unk_04: [libc::c_char; 4],
    pub total: u8_0,
    pub unk_09: [libc::c_char; 3],
    pub actorLists: [ActorListEntry; 12],
    pub targetCtx: TargetContext,
    pub flags: C2RustUnnamed_13,
    pub titleCtx: TitleCardContext,
    pub unk_138: [libc::c_char; 4],
    pub absoluteSpace: *mut libc::c_void,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TitleCardContext {
    pub texture: *mut libc::c_void,
    pub x: s16,
    pub y: s16,
    pub width: u8_0,
    pub height: u8_0,
    pub durationTimer: u8_0,
    pub delayTimer: u8_0,
    pub alpha: s16,
    pub intensity: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_13 {
    pub swch: u32_0,
    pub tempSwch: u32_0,
    pub unk0: u32_0,
    pub unk1: u32_0,
    pub chest: u32_0,
    pub clear: u32_0,
    pub tempClear: u32_0,
    pub collect: u32_0,
    pub tempCollect: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TargetContext {
    pub naviRefPos: Vec3f,
    pub targetCenterPos: Vec3f,
    pub naviInner: Color_RGBAf,
    pub naviOuter: Color_RGBAf,
    pub arrowPointedActor: *mut Actor,
    pub targetedActor: *mut Actor,
    pub unk_40: f32_0,
    pub unk_44: f32_0,
    pub unk_48: s16,
    pub activeCategory: u8_0,
    pub unk_4B: u8_0,
    pub unk_4C: s8,
    pub unk_4D: [libc::c_char; 3],
    pub arr_50: [TargetContextEntry; 3],
    pub unk_8C: *mut Actor,
    pub bgmEnemy: *mut Actor,
    pub unk_94: *mut Actor,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TargetContextEntry {
    pub pos: Vec3f,
    pub unk_0C: f32_0,
    pub color: Color_RGB8,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ActorListEntry {
    pub length: s32,
    pub head: *mut Actor,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CollisionContext {
    pub colHeader: *mut CollisionHeader,
    pub minBounds: Vec3f,
    pub maxBounds: Vec3f,
    pub subdivAmount: Vec3i,
    pub subdivLength: Vec3f,
    pub subdivLengthInv: Vec3f,
    pub lookupTbl: *mut StaticLookup,
    pub polyNodes: SSNodeList,
    pub dyna: DynaCollisionContext,
    pub memSize: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct DynaCollisionContext {
    pub bitFlag: u8_0,
    pub bgActors: [BgActor; 50],
    pub bgActorFlags: [u16_0; 50],
    pub polyList: *mut CollisionPoly,
    pub vtxList: *mut Vec3s,
    pub polyNodes: DynaSSNodeList,
    pub polyNodesMax: s32,
    pub polyListMax: s32,
    pub vtxListMax: s32,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct DynaSSNodeList {
    pub tbl: *mut SSNode,
    pub count: s32,
    pub max: s32,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SSNode {
    pub polyId: s16,
    pub next: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct BgActor {
    pub actor: *mut Actor,
    pub colHeader: *mut CollisionHeader,
    pub dynaLookup: DynaLookup,
    pub vtxStartIndex: u16_0,
    pub prevTransform: ScaleRotPos,
    pub curTransform: ScaleRotPos,
    pub boundingSphere: Sphere16,
    pub minY: f32_0,
    pub maxY: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ScaleRotPos {
    pub scale: Vec3f,
    pub rot: Vec3s,
    pub pos: Vec3f,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct DynaLookup {
    pub polyStartIndex: u16_0,
    pub ceiling: SSList,
    pub wall: SSList,
    pub floor: SSList,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SSList {
    pub head: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CollisionHeader {
    pub minBounds: Vec3s,
    pub maxBounds: Vec3s,
    pub numVertices: u16_0,
    pub vtxList: *mut Vec3s,
    pub numPolygons: u16_0,
    pub polyList: *mut CollisionPoly,
    pub surfaceTypeList: *mut SurfaceType,
    pub cameraDataList: *mut CamData,
    pub numWaterBoxes: u16_0,
    pub waterBoxes: *mut WaterBox,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct WaterBox {
    pub xMin: s16,
    pub ySurface: s16,
    pub zMin: s16,
    pub xLength: s16,
    pub zLength: s16,
    pub properties: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CamData {
    pub cameraSType: u16_0,
    pub numCameras: s16,
    pub camPosData: *mut Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SurfaceType {
    pub data: [u32_0; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SSNodeList {
    pub max: u16_0,
    pub count: u16_0,
    pub tbl: *mut SSNode,
    pub polyCheckTbl: *mut u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct StaticLookup {
    pub floor: SSList,
    pub wall: SSList,
    pub ceiling: SSList,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct FrameAdvanceContext {
    pub enabled: s32,
    pub timer: s32,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SequenceContext {
    pub seqId: u8_0,
    pub natureAmbienceId: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Camera {
    pub paramData: [libc::c_char; 80],
    pub at: Vec3f,
    pub eye: Vec3f,
    pub up: Vec3f,
    pub eyeNext: Vec3f,
    pub skyboxOffset: Vec3f,
    pub globalCtx: *mut GlobalContext,
    pub player: *mut Player,
    pub playerPosRot: PosRot,
    pub target: *mut Actor,
    pub targetPosRot: PosRot,
    pub rUpdateRateInv: f32_0,
    pub pitchUpdateRateInv: f32_0,
    pub yawUpdateRateInv: f32_0,
    pub xzOffsetUpdateRate: f32_0,
    pub yOffsetUpdateRate: f32_0,
    pub fovUpdateRate: f32_0,
    pub xzSpeed: f32_0,
    pub dist: f32_0,
    pub speedRatio: f32_0,
    pub posOffset: Vec3f,
    pub playerPosDelta: Vec3f,
    pub fov: f32_0,
    pub atLERPStepScale: f32_0,
    pub playerGroundY: f32_0,
    pub floorNorm: Vec3f,
    pub waterYPos: f32_0,
    pub waterPrevCamIdx: s32,
    pub waterPrevCamSetting: s32,
    pub waterQuakeId: s32,
    pub data0: *mut libc::c_void,
    pub data1: *mut libc::c_void,
    pub data2: s16,
    pub data3: s16,
    pub uid: s16,
    pub unk_132: [libc::c_char; 2],
    pub inputDir: Vec3s,
    pub camDir: Vec3s,
    pub status: s16,
    pub setting: s16,
    pub mode: s16,
    pub bgCheckId: s16,
    pub camDataIdx: s16,
    pub unk_14A: s16,
    pub unk_14C: s16,
    pub childCamIdx: s16,
    pub unk_150: s16,
    pub unk_152: s16,
    pub prevSetting: s16,
    pub nextCamDataIdx: s16,
    pub nextBGCheckId: s16,
    pub roll: s16,
    pub paramFlags: s16,
    pub animState: s16,
    pub timer: s16,
    pub parentCamIdx: s16,
    pub thisIdx: s16,
    pub prevCamDataIdx: s16,
    pub csId: s16,
    pub unk_16A: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GameState {
    pub gfxCtx: *mut GraphicsContext,
    pub main: GameStateFunc,
    pub destroy: GameStateFunc,
    pub init: GameStateFunc,
    pub size: u32_0,
    pub input: [Input; 4],
    pub tha: TwoHeadArena,
    pub alloc: GameAlloc,
    pub running: u32_0,
    pub frames: u32_0,
    pub unk_A0: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GameAlloc {
    pub base: GameAllocEntry,
    pub head: *mut GameAllocEntry,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GameAllocEntry {
    pub next: *mut GameAllocEntry,
    pub prev: *mut GameAllocEntry,
    pub size: u32_0,
    pub unk_0C: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TwoHeadArena {
    pub size: u32_0,
    pub bufp: *mut libc::c_void,
    pub head: *mut libc::c_void,
    pub tail: *mut libc::c_void,
}
pub type GameStateFunc
    =
    Option<unsafe extern "C" fn(_: *mut GameState) -> ()>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct DynaPolyActor {
    pub actor: Actor,
    pub bgId: s32,
    pub unk_150: f32_0,
    pub unk_154: f32_0,
    pub unk_158: s16,
    pub unk_15A: u16_0,
    pub unk_15C: u32_0,
    pub unk_160: u8_0,
    pub unk_162: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct JointIndex {
    pub x: u16_0,
    pub y: u16_0,
    pub z: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimationHeader {
    pub common: AnimationHeaderCommon,
    pub frameData: *mut s16,
    pub jointIndices: *mut JointIndex,
    pub staticIndexMax: u16_0,
}
pub type OverrideLimbDrawOpa
    =
    Option<unsafe extern "C" fn(_: *mut GlobalContext, _: s32,
                                _: *mut *mut Gfx, _: *mut Vec3f,
                                _: *mut Vec3s, _: *mut libc::c_void) -> s32>;
pub type PostLimbDrawOpa
    =
    Option<unsafe extern "C" fn(_: *mut GlobalContext, _: s32,
                                _: *mut *mut Gfx, _: *mut Vec3s,
                                _: *mut libc::c_void) -> ()>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderInit {
    pub colType: u8_0,
    pub atFlags: u8_0,
    pub acFlags: u8_0,
    pub ocFlags1: u8_0,
    pub ocFlags2: u8_0,
    pub shape: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderBumpInit {
    pub dmgFlags: u32_0,
    pub effect: u8_0,
    pub defense: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderInfoInit {
    pub elemType: u8_0,
    pub toucher: ColliderTouch,
    pub bumper: ColliderBumpInit,
    pub toucherFlags: u8_0,
    pub bumperFlags: u8_0,
    pub ocElemFlags: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderJntSphElementDim {
    pub modelSphere: Sphere16,
    pub worldSphere: Sphere16,
    pub scale: f32_0,
    pub limb: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderJntSphElement {
    pub info: ColliderInfo,
    pub dim: ColliderJntSphElementDim,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderJntSph {
    pub base: Collider,
    pub count: s32,
    pub elements: *mut ColliderJntSphElement,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderCylinderInit {
    pub base: ColliderInit,
    pub info: ColliderInfoInit,
    pub dim: Cylinder16,
}
pub type C2RustUnnamed_14 = libc::c_uint;
pub const COLTYPE_TREE: C2RustUnnamed_14 = 13;
pub const COLTYPE_HARD: C2RustUnnamed_14 = 12;
pub const COLTYPE_WOOD: C2RustUnnamed_14 = 11;
pub const COLTYPE_NONE: C2RustUnnamed_14 = 10;
pub const COLTYPE_METAL: C2RustUnnamed_14 = 9;
pub const COLTYPE_HIT8: C2RustUnnamed_14 = 8;
pub const COLTYPE_HIT7: C2RustUnnamed_14 = 7;
pub const COLTYPE_HIT6: C2RustUnnamed_14 = 6;
pub const COLTYPE_HIT5: C2RustUnnamed_14 = 5;
pub const COLTYPE_HIT4: C2RustUnnamed_14 = 4;
pub const COLTYPE_HIT3: C2RustUnnamed_14 = 3;
pub const COLTYPE_HIT2: C2RustUnnamed_14 = 2;
pub const COLTYPE_HIT1: C2RustUnnamed_14 = 1;
pub const COLTYPE_HIT0: C2RustUnnamed_14 = 0;
pub type C2RustUnnamed_15 = libc::c_uint;
pub const COLSHAPE_INVALID: C2RustUnnamed_15 = 4;
pub const COLSHAPE_QUAD: C2RustUnnamed_15 = 3;
pub const COLSHAPE_TRIS: C2RustUnnamed_15 = 2;
pub const COLSHAPE_CYLINDER: C2RustUnnamed_15 = 1;
pub const COLSHAPE_JNTSPH: C2RustUnnamed_15 = 0;
pub type C2RustUnnamed_16 = libc::c_uint;
pub const ELEMTYPE_UNK7: C2RustUnnamed_16 = 7;
pub const ELEMTYPE_UNK6: C2RustUnnamed_16 = 6;
pub const ELEMTYPE_UNK5: C2RustUnnamed_16 = 5;
pub const ELEMTYPE_UNK4: C2RustUnnamed_16 = 4;
pub const ELEMTYPE_UNK3: C2RustUnnamed_16 = 3;
pub const ELEMTYPE_UNK2: C2RustUnnamed_16 = 2;
pub const ELEMTYPE_UNK1: C2RustUnnamed_16 = 1;
pub const ELEMTYPE_UNK0: C2RustUnnamed_16 = 0;
pub type C2RustUnnamed_17 = libc::c_uint;
pub const ACTORCAT_CHEST: C2RustUnnamed_17 = 11;
pub const ACTORCAT_DOOR: C2RustUnnamed_17 = 10;
pub const ACTORCAT_BOSS: C2RustUnnamed_17 = 9;
pub const ACTORCAT_MISC: C2RustUnnamed_17 = 8;
pub const ACTORCAT_ITEMACTION: C2RustUnnamed_17 = 7;
pub const ACTORCAT_PROP: C2RustUnnamed_17 = 6;
pub const ACTORCAT_ENEMY: C2RustUnnamed_17 = 5;
pub const ACTORCAT_NPC: C2RustUnnamed_17 = 4;
pub const ACTORCAT_EXPLOSIVE: C2RustUnnamed_17 = 3;
pub const ACTORCAT_PLAYER: C2RustUnnamed_17 = 2;
pub const ACTORCAT_BG: C2RustUnnamed_17 = 1;
pub const ACTORCAT_SWITCH: C2RustUnnamed_17 = 0;
pub type C2RustUnnamed_18 = libc::c_uint;
pub const ACTOR_ID_MAX: C2RustUnnamed_18 = 471;
pub const ACTOR_OBJ_WARP2BLOCK: C2RustUnnamed_18 = 470;
pub const ACTOR_BG_JYA_BLOCK: C2RustUnnamed_18 = 469;
pub const ACTOR_EN_MM2: C2RustUnnamed_18 = 468;
pub const ACTOR_EN_ZL4: C2RustUnnamed_18 = 467;
pub const ACTOR_OBJ_HAMISHI: C2RustUnnamed_18 = 466;
pub const ACTOR_OBJ_TIMEBLOCK: C2RustUnnamed_18 = 465;
pub const ACTOR_EN_GE3: C2RustUnnamed_18 = 464;
pub const ACTOR_OBJ_MAKEKINSUTA: C2RustUnnamed_18 = 463;
pub const ACTOR_EN_ZO: C2RustUnnamed_18 = 462;
pub const ACTOR_BG_MENKURI_NISEKABE: C2RustUnnamed_18 = 461;
pub const ACTOR_EN_EG: C2RustUnnamed_18 = 460;
pub const ACTOR_OCEFF_WIPE4: C2RustUnnamed_18 = 459;
pub const ACTOR_EN_KAKASI3: C2RustUnnamed_18 = 458;
pub const ACTOR_EN_KAKASI2: C2RustUnnamed_18 = 457;
pub const ACTOR_BG_ICE_SHUTTER: C2RustUnnamed_18 = 456;
pub const ACTOR_BG_ICE_TURARA: C2RustUnnamed_18 = 455;
pub const ACTOR_EN_COW: C2RustUnnamed_18 = 454;
pub const ACTOR_EN_MA3: C2RustUnnamed_18 = 453;
pub const ACTOR_BG_SPOT18_SHUTTER: C2RustUnnamed_18 = 452;
pub const ACTOR_BG_SPOT18_FUTA: C2RustUnnamed_18 = 451;
pub const ACTOR_BG_SPOT11_OASIS: C2RustUnnamed_18 = 450;
pub const ACTOR_DOOR_KILLER: C2RustUnnamed_18 = 449;
pub const ACTOR_EN_CROW: C2RustUnnamed_18 = 448;
pub const ACTOR_EN_PO_DESERT: C2RustUnnamed_18 = 447;
pub const ACTOR_EN_WALL_TUBO: C2RustUnnamed_18 = 446;
pub const ACTOR_BG_BOWL_WALL: C2RustUnnamed_18 = 445;
pub const ACTOR_EN_DAIKU_KAKARIKO: C2RustUnnamed_18 = 444;
pub const ACTOR_BG_MIZU_SHUTTER: C2RustUnnamed_18 = 443;
pub const ACTOR_BG_MIZU_BWALL: C2RustUnnamed_18 = 442;
pub const ACTOR_EN_GS: C2RustUnnamed_18 = 441;
pub const ACTOR_EN_GB: C2RustUnnamed_18 = 440;
pub const ACTOR_BG_GND_ICEBLOCK: C2RustUnnamed_18 = 439;
pub const ACTOR_BG_GND_NISEKABE: C2RustUnnamed_18 = 438;
pub const ACTOR_BG_GND_SOULMEIRO: C2RustUnnamed_18 = 437;
pub const ACTOR_BG_GND_DARKMEIRO: C2RustUnnamed_18 = 436;
pub const ACTOR_BG_GND_FIREMEIRO: C2RustUnnamed_18 = 435;
pub const ACTOR_DEMO_GEFF: C2RustUnnamed_18 = 434;
pub const ACTOR_DEMO_GJ: C2RustUnnamed_18 = 433;
pub const ACTOR_EN_SKB: C2RustUnnamed_18 = 432;
pub const ACTOR_EN_WF: C2RustUnnamed_18 = 431;
pub const ACTOR_EN_GO2: C2RustUnnamed_18 = 430;
pub const ACTOR_EN_MU: C2RustUnnamed_18 = 429;
pub const ACTOR_EN_TG: C2RustUnnamed_18 = 428;
pub const ACTOR_OBJ_MURE3: C2RustUnnamed_18 = 427;
pub const ACTOR_UNSET_1AA: C2RustUnnamed_18 = 426;
pub const ACTOR_BG_SPOT17_BAKUDANKABE: C2RustUnnamed_18 = 425;
pub const ACTOR_BG_SPOT08_BAKUDANKABE: C2RustUnnamed_18 = 424;
pub const ACTOR_DEMO_KEKKAI: C2RustUnnamed_18 = 423;
pub const ACTOR_EN_HS2: C2RustUnnamed_18 = 422;
pub const ACTOR_BG_BOM_GUARD: C2RustUnnamed_18 = 421;
pub const ACTOR_EN_GUEST: C2RustUnnamed_18 = 420;
pub const ACTOR_EN_DNT_NOMAL: C2RustUnnamed_18 = 419;
pub const ACTOR_EN_DNT_JIJI: C2RustUnnamed_18 = 418;
pub const ACTOR_EN_DNT_DEMO: C2RustUnnamed_18 = 417;
pub const ACTOR_OBJ_KIBAKO2: C2RustUnnamed_18 = 416;
pub const ACTOR_BG_SPOT11_BAKUDANKABE: C2RustUnnamed_18 = 415;
pub const ACTOR_OBJ_COMB: C2RustUnnamed_18 = 414;
pub const ACTOR_BG_SPOT01_OBJECTS2: C2RustUnnamed_18 = 413;
pub const ACTOR_EN_SI: C2RustUnnamed_18 = 412;
pub const ACTOR_EN_DOG: C2RustUnnamed_18 = 411;
pub const ACTOR_EN_NIW_GIRL: C2RustUnnamed_18 = 410;
pub const ACTOR_OCEFF_WIPE3: C2RustUnnamed_18 = 409;
pub const ACTOR_OCEFF_WIPE2: C2RustUnnamed_18 = 408;
pub const ACTOR_EN_GELDB: C2RustUnnamed_18 = 407;
pub const ACTOR_EN_IT: C2RustUnnamed_18 = 406;
pub const ACTOR_EN_SHOPNUTS: C2RustUnnamed_18 = 405;
pub const ACTOR_BG_SPOT00_BREAK: C2RustUnnamed_18 = 404;
pub const ACTOR_EN_NUTSBALL: C2RustUnnamed_18 = 403;
pub const ACTOR_EN_HINTNUTS: C2RustUnnamed_18 = 402;
pub const ACTOR_BG_SPOT12_SAKU: C2RustUnnamed_18 = 401;
pub const ACTOR_BG_SPOT12_GATE: C2RustUnnamed_18 = 400;
pub const ACTOR_BG_JYA_HAHENIRON: C2RustUnnamed_18 = 399;
pub const ACTOR_BG_JYA_1FLIFT: C2RustUnnamed_18 = 398;
pub const ACTOR_BG_SPOT05_SOKO: C2RustUnnamed_18 = 397;
pub const ACTOR_EN_WEIYER: C2RustUnnamed_18 = 396;
pub const ACTOR_OCEFF_STORM: C2RustUnnamed_18 = 395;
pub const ACTOR_OCEFF_WIPE: C2RustUnnamed_18 = 394;
pub const ACTOR_EN_STH: C2RustUnnamed_18 = 393;
pub const ACTOR_EN_SSH: C2RustUnnamed_18 = 392;
pub const ACTOR_OBJ_ROOMTIMER: C2RustUnnamed_18 = 391;
pub const ACTOR_EN_GE2: C2RustUnnamed_18 = 390;
pub const ACTOR_EN_WONDER_TALK2: C2RustUnnamed_18 = 389;
pub const ACTOR_EN_DY_EXTRA: C2RustUnnamed_18 = 388;
pub const ACTOR_SHOT_SUN: C2RustUnnamed_18 = 387;
pub const ACTOR_DEMO_EC: C2RustUnnamed_18 = 386;
pub const ACTOR_EN_TORCH: C2RustUnnamed_18 = 385;
pub const ACTOR_UNSET_180: C2RustUnnamed_18 = 384;
pub const ACTOR_END_TITLE: C2RustUnnamed_18 = 383;
pub const ACTOR_OCEFF_SPOT: C2RustUnnamed_18 = 382;
pub const ACTOR_OBJ_MAKEOSHIHIKI: C2RustUnnamed_18 = 381;
pub const ACTOR_EN_TAKARA_MAN: C2RustUnnamed_18 = 380;
pub const ACTOR_EN_KAKASI: C2RustUnnamed_18 = 379;
pub const ACTOR_BOSS_GANON2: C2RustUnnamed_18 = 378;
pub const ACTOR_EN_ZL3: C2RustUnnamed_18 = 377;
pub const ACTOR_EN_HEISHI4: C2RustUnnamed_18 = 376;
pub const ACTOR_BG_ZG: C2RustUnnamed_18 = 375;
pub const ACTOR_EFC_ERUPC: C2RustUnnamed_18 = 374;
pub const ACTOR_EN_PO_FIELD: C2RustUnnamed_18 = 373;
pub const ACTOR_DEMO_GT: C2RustUnnamed_18 = 372;
pub const ACTOR_ELF_MSG2: C2RustUnnamed_18 = 371;
pub const ACTOR_DOOR_GERUDO: C2RustUnnamed_18 = 370;
pub const ACTOR_EN_MAG: C2RustUnnamed_18 = 369;
pub const ACTOR_EN_OKARINA_EFFECT: C2RustUnnamed_18 = 368;
pub const ACTOR_EN_GANON_MANT: C2RustUnnamed_18 = 367;
pub const ACTOR_EN_HY: C2RustUnnamed_18 = 366;
pub const ACTOR_EN_MD: C2RustUnnamed_18 = 365;
pub const ACTOR_EN_CS: C2RustUnnamed_18 = 364;
pub const ACTOR_EN_JSJUTAN: C2RustUnnamed_18 = 363;
pub const ACTOR_EN_JS: C2RustUnnamed_18 = 362;
pub const ACTOR_BG_JYA_IRONOBJ: C2RustUnnamed_18 = 361;
pub const ACTOR_EN_EX_ITEM: C2RustUnnamed_18 = 360;
pub const ACTOR_EN_ANI: C2RustUnnamed_18 = 359;
pub const ACTOR_BG_SST_FLOOR: C2RustUnnamed_18 = 358;
pub const ACTOR_EN_WEATHER_TAG: C2RustUnnamed_18 = 357;
pub const ACTOR_EN_KZ: C2RustUnnamed_18 = 356;
pub const ACTOR_EN_KO: C2RustUnnamed_18 = 355;
pub const ACTOR_EN_MM: C2RustUnnamed_18 = 354;
pub const ACTOR_UNSET_161: C2RustUnnamed_18 = 353;
pub const ACTOR_EN_STREAM: C2RustUnnamed_18 = 352;
pub const ACTOR_EN_SIOFUKI: C2RustUnnamed_18 = 351;
pub const ACTOR_EN_GANON_ORGAN: C2RustUnnamed_18 = 350;
pub const ACTOR_UNSET_15D: C2RustUnnamed_18 = 349;
pub const ACTOR_BG_SPOT18_BASKET: C2RustUnnamed_18 = 348;
pub const ACTOR_BG_JYA_BOMBIWA: C2RustUnnamed_18 = 347;
pub const ACTOR_BG_JYA_AMISHUTTER: C2RustUnnamed_18 = 346;
pub const ACTOR_BG_JYA_BOMBCHUIWA: C2RustUnnamed_18 = 345;
pub const ACTOR_BG_JYA_BIGMIRROR: C2RustUnnamed_18 = 344;
pub const ACTOR_BG_JYA_LIFT: C2RustUnnamed_18 = 343;
pub const ACTOR_BG_JYA_MEGAMI: C2RustUnnamed_18 = 342;
pub const ACTOR_EN_CHANGER: C2RustUnnamed_18 = 341;
pub const ACTOR_UNSET_154: C2RustUnnamed_18 = 340;
pub const ACTOR_EN_FU: C2RustUnnamed_18 = 339;
pub const ACTOR_EN_GO: C2RustUnnamed_18 = 338;
pub const ACTOR_OBJ_MURE2: C2RustUnnamed_18 = 337;
pub const ACTOR_OBJ_LIGHTSWITCH: C2RustUnnamed_18 = 336;
pub const ACTOR_OBJ_HANA: C2RustUnnamed_18 = 335;
pub const ACTOR_EN_ISHI: C2RustUnnamed_18 = 334;
pub const ACTOR_EN_OWL: C2RustUnnamed_18 = 333;
pub const ACTOR_EN_BOM_BOWL_PIT: C2RustUnnamed_18 = 332;
pub const ACTOR_EN_BOM_BOWL_MAN: C2RustUnnamed_18 = 331;
pub const ACTOR_EN_MK: C2RustUnnamed_18 = 330;
pub const ACTOR_EN_DS: C2RustUnnamed_18 = 329;
pub const ACTOR_BG_GJYO_BRIDGE: C2RustUnnamed_18 = 328;
pub const ACTOR_EN_WONDER_TALK: C2RustUnnamed_18 = 327;
pub const ACTOR_EN_SA: C2RustUnnamed_18 = 326;
pub const ACTOR_BG_SPOT01_IDOSOKO: C2RustUnnamed_18 = 325;
pub const ACTOR_EN_ATTACK_NIW: C2RustUnnamed_18 = 324;
pub const ACTOR_EN_SYATEKI_NIW: C2RustUnnamed_18 = 323;
pub const ACTOR_EN_HEISHI3: C2RustUnnamed_18 = 322;
pub const ACTOR_EN_KANBAN: C2RustUnnamed_18 = 321;
pub const ACTOR_BG_INGATE: C2RustUnnamed_18 = 320;
pub const ACTOR_EN_HS: C2RustUnnamed_18 = 319;
pub const ACTOR_EN_MS: C2RustUnnamed_18 = 318;
pub const ACTOR_EN_GM: C2RustUnnamed_18 = 317;
pub const ACTOR_EN_NIW_LADY: C2RustUnnamed_18 = 316;
pub const ACTOR_EN_CLEAR_TAG: C2RustUnnamed_18 = 315;
pub const ACTOR_EN_SDA: C2RustUnnamed_18 = 314;
pub const ACTOR_OBJ_BLOCKSTOP: C2RustUnnamed_18 = 313;
pub const ACTOR_EN_GE1: C2RustUnnamed_18 = 312;
pub const ACTOR_ITEM_INBOX: C2RustUnnamed_18 = 311;
pub const ACTOR_EN_BLKOBJ: C2RustUnnamed_18 = 310;
pub const ACTOR_EN_NWC: C2RustUnnamed_18 = 309;
pub const ACTOR_UNSET_134: C2RustUnnamed_18 = 308;
pub const ACTOR_EN_DAIKU: C2RustUnnamed_18 = 307;
pub const ACTOR_EN_TORYO: C2RustUnnamed_18 = 306;
pub const ACTOR_EN_EX_RUPPY: C2RustUnnamed_18 = 305;
pub const ACTOR_EN_GOROIWA: C2RustUnnamed_18 = 304;
pub const ACTOR_EN_YABUSAME_MARK: C2RustUnnamed_18 = 303;
pub const ACTOR_EN_OKARINA_TAG: C2RustUnnamed_18 = 302;
pub const ACTOR_OBJ_HSBLOCK: C2RustUnnamed_18 = 301;
pub const ACTOR_OBJ_LIFT: C2RustUnnamed_18 = 300;
pub const ACTOR_OBJ_ELEVATOR: C2RustUnnamed_18 = 299;
pub const ACTOR_OBJ_SWITCH: C2RustUnnamed_18 = 298;
pub const ACTOR_UNSET_129: C2RustUnnamed_18 = 297;
pub const ACTOR_UNSET_128: C2RustUnnamed_18 = 296;
pub const ACTOR_OBJ_BOMBIWA: C2RustUnnamed_18 = 295;
pub const ACTOR_OBJ_BEAN: C2RustUnnamed_18 = 294;
pub const ACTOR_EN_KUSA: C2RustUnnamed_18 = 293;
pub const ACTOR_EN_DIVING_GAME: C2RustUnnamed_18 = 292;
pub const ACTOR_BG_RELAY_OBJECTS: C2RustUnnamed_18 = 291;
pub const ACTOR_EN_PO_RELAY: C2RustUnnamed_18 = 290;
pub const ACTOR_EN_FZ: C2RustUnnamed_18 = 289;
pub const ACTOR_BG_SPOT07_TAKI: C2RustUnnamed_18 = 288;
pub const ACTOR_BG_SPOT03_TAKI: C2RustUnnamed_18 = 287;
pub const ACTOR_OBJ_ICE_POLY: C2RustUnnamed_18 = 286;
pub const ACTOR_EN_TUBO_TRAP: C2RustUnnamed_18 = 285;
pub const ACTOR_EN_HONOTRAP: C2RustUnnamed_18 = 284;
pub const ACTOR_ELF_MSG: C2RustUnnamed_18 = 283;
pub const ACTOR_EN_DNS: C2RustUnnamed_18 = 282;
pub const ACTOR_DEMO_SHD: C2RustUnnamed_18 = 281;
pub const ACTOR_DEMO_EXT: C2RustUnnamed_18 = 280;
pub const ACTOR_EN_G_SWITCH: C2RustUnnamed_18 = 279;
pub const ACTOR_EN_SKJNEEDLE: C2RustUnnamed_18 = 278;
pub const ACTOR_EN_SKJ: C2RustUnnamed_18 = 277;
pub const ACTOR_DEMO_IK: C2RustUnnamed_18 = 276;
pub const ACTOR_EN_IK: C2RustUnnamed_18 = 275;
pub const ACTOR_EN_WONDER_ITEM: C2RustUnnamed_18 = 274;
pub const ACTOR_OBJ_TSUBO: C2RustUnnamed_18 = 273;
pub const ACTOR_OBJ_KIBAKO: C2RustUnnamed_18 = 272;
pub const ACTOR_ITEM_ETCETERA: C2RustUnnamed_18 = 271;
pub const ACTOR_UNSET_10E: C2RustUnnamed_18 = 270;
pub const ACTOR_UNSET_10D: C2RustUnnamed_18 = 269;
pub const ACTOR_ARROW_LIGHT: C2RustUnnamed_18 = 268;
pub const ACTOR_ARROW_ICE: C2RustUnnamed_18 = 267;
pub const ACTOR_ARROW_FIRE: C2RustUnnamed_18 = 266;
pub const ACTOR_UNSET_109: C2RustUnnamed_18 = 265;
pub const ACTOR_BG_UMAJUMP: C2RustUnnamed_18 = 264;
pub const ACTOR_BG_SPOT15_RRBOX: C2RustUnnamed_18 = 263;
pub const ACTOR_BG_GANON_OTYUKA: C2RustUnnamed_18 = 262;
pub const ACTOR_BG_PO_SYOKUDAI: C2RustUnnamed_18 = 261;
pub const ACTOR_BG_SPOT01_IDOMIZU: C2RustUnnamed_18 = 260;
pub const ACTOR_BG_SPOT01_IDOHASHIRA: C2RustUnnamed_18 = 259;
pub const ACTOR_BG_SPOT01_FUSYA: C2RustUnnamed_18 = 258;
pub const ACTOR_EFF_DUST: C2RustUnnamed_18 = 257;
pub const ACTOR_BG_GATE_SHUTTER: C2RustUnnamed_18 = 256;
pub const ACTOR_OBJ_OSHIHIKI: C2RustUnnamed_18 = 255;
pub const ACTOR_FISHING: C2RustUnnamed_18 = 254;
pub const ACTOR_BG_JYA_KANAAMI: C2RustUnnamed_18 = 253;
pub const ACTOR_BG_JYA_COBRA: C2RustUnnamed_18 = 252;
pub const ACTOR_UNSET_FB: C2RustUnnamed_18 = 251;
pub const ACTOR_BG_JYA_ZURERUKABE: C2RustUnnamed_18 = 250;
pub const ACTOR_BG_JYA_GOROIWA: C2RustUnnamed_18 = 249;
pub const ACTOR_BG_SPOT15_SAKU: C2RustUnnamed_18 = 248;
pub const ACTOR_BG_HAKA_GATE: C2RustUnnamed_18 = 247;
pub const ACTOR_EN_ANUBICE_TAG: C2RustUnnamed_18 = 246;
pub const ACTOR_DEMO_6K: C2RustUnnamed_18 = 245;
pub const ACTOR_MAGIC_DARK: C2RustUnnamed_18 = 244;
pub const ACTOR_UNSET_F3: C2RustUnnamed_18 = 243;
pub const ACTOR_UNSET_F2: C2RustUnnamed_18 = 242;
pub const ACTOR_ITEM_OCARINA: C2RustUnnamed_18 = 241;
pub const ACTOR_EN_ICE_HONO: C2RustUnnamed_18 = 240;
pub const ACTOR_BG_ICE_SHELTER: C2RustUnnamed_18 = 239;
pub const ACTOR_ITEM_SHIELD: C2RustUnnamed_18 = 238;
pub const ACTOR_EN_FR: C2RustUnnamed_18 = 237;
pub const ACTOR_EN_NY: C2RustUnnamed_18 = 236;
pub const ACTOR_UNSET_EB: C2RustUnnamed_18 = 235;
pub const ACTOR_UNSET_EA: C2RustUnnamed_18 = 234;
pub const ACTOR_BOSS_SST: C2RustUnnamed_18 = 233;
pub const ACTOR_BOSS_GANON: C2RustUnnamed_18 = 232;
pub const ACTOR_EN_MA1: C2RustUnnamed_18 = 231;
pub const ACTOR_BG_BDAN_SWITCH: C2RustUnnamed_18 = 230;
pub const ACTOR_BG_SPOT16_DOUGHNUT: C2RustUnnamed_18 = 229;
pub const ACTOR_BG_MORI_IDOMIZU: C2RustUnnamed_18 = 228;
pub const ACTOR_BG_MORI_HASHIRA4: C2RustUnnamed_18 = 227;
pub const ACTOR_BG_MORI_HASHIGO: C2RustUnnamed_18 = 226;
pub const ACTOR_EN_ANUBICE_FIRE: C2RustUnnamed_18 = 225;
pub const ACTOR_EN_ANUBICE: C2RustUnnamed_18 = 224;
pub const ACTOR_EN_BX: C2RustUnnamed_18 = 223;
pub const ACTOR_EN_BA: C2RustUnnamed_18 = 222;
pub const ACTOR_EN_RR: C2RustUnnamed_18 = 221;
pub const ACTOR_BOSS_TW: C2RustUnnamed_18 = 220;
pub const ACTOR_EN_HORSE_GAME_CHECK: C2RustUnnamed_18 = 219;
pub const ACTOR_EN_BOM_CHU: C2RustUnnamed_18 = 218;
pub const ACTOR_EN_MA2: C2RustUnnamed_18 = 217;
pub const ACTOR_UNSET_D8: C2RustUnnamed_18 = 216;
pub const ACTOR_BG_HAKA_WATER: C2RustUnnamed_18 = 215;
pub const ACTOR_BG_ICE_OBJECTS: C2RustUnnamed_18 = 214;
pub const ACTOR_BG_SPOT06_OBJECTS: C2RustUnnamed_18 = 213;
pub const ACTOR_BG_MIZU_UZU: C2RustUnnamed_18 = 212;
pub const ACTOR_OBJ_DEKUJR: C2RustUnnamed_18 = 211;
pub const ACTOR_EN_RU2: C2RustUnnamed_18 = 210;
pub const ACTOR_BG_SPOT08_ICEBLOCK: C2RustUnnamed_18 = 209;
pub const ACTOR_BG_BOMBWALL: C2RustUnnamed_18 = 208;
pub const ACTOR_BG_HIDAN_KOWARERUKABE: C2RustUnnamed_18 = 207;
pub const ACTOR_UNSET_CE: C2RustUnnamed_18 = 206;
pub const ACTOR_BG_SPOT16_BOMBSTONE: C2RustUnnamed_18 = 205;
pub const ACTOR_EN_TR: C2RustUnnamed_18 = 204;
pub const ACTOR_EN_IN: C2RustUnnamed_18 = 203;
pub const ACTOR_DEMO_GO: C2RustUnnamed_18 = 202;
pub const ACTOR_DEMO_SA: C2RustUnnamed_18 = 201;
pub const ACTOR_BG_BDAN_OBJECTS: C2RustUnnamed_18 = 200;
pub const ACTOR_EN_KAREBABA: C2RustUnnamed_18 = 199;
pub const ACTOR_EN_BIGOKUTA: C2RustUnnamed_18 = 198;
pub const ACTOR_EN_SB: C2RustUnnamed_18 = 197;
pub const ACTOR_BOSS_MO: C2RustUnnamed_18 = 196;
pub const ACTOR_EN_NB: C2RustUnnamed_18 = 195;
pub const ACTOR_EN_TANA: C2RustUnnamed_18 = 194;
pub const ACTOR_EN_SYATEKI_MAN: C2RustUnnamed_18 = 193;
pub const ACTOR_EN_SYATEKI_ITM: C2RustUnnamed_18 = 192;
pub const ACTOR_BG_SPOT17_FUNEN: C2RustUnnamed_18 = 191;
pub const ACTOR_BG_HAKA_ZOU: C2RustUnnamed_18 = 190;
pub const ACTOR_BG_HAKA_HUTA: C2RustUnnamed_18 = 189;
pub const ACTOR_BG_HAKA_TRAP: C2RustUnnamed_18 = 188;
pub const ACTOR_BG_HAKA_TUBO: C2RustUnnamed_18 = 187;
pub const ACTOR_BOSS_VA: C2RustUnnamed_18 = 186;
pub const ACTOR_BG_SPOT18_OBJ: C2RustUnnamed_18 = 185;
pub const ACTOR_BG_SPOT09_OBJ: C2RustUnnamed_18 = 184;
pub const ACTOR_MIR_RAY: C2RustUnnamed_18 = 183;
pub const ACTOR_EN_BROB: C2RustUnnamed_18 = 182;
pub const ACTOR_EN_FIRE_ROCK: C2RustUnnamed_18 = 181;
pub const ACTOR_EN_ENCOUNT2: C2RustUnnamed_18 = 180;
pub const ACTOR_EN_HEISHI2: C2RustUnnamed_18 = 179;
pub const ACTOR_UNSET_B2: C2RustUnnamed_18 = 178;
pub const ACTOR_BG_HAKA_SGAMI: C2RustUnnamed_18 = 177;
pub const ACTOR_BG_HAKA_SHIP: C2RustUnnamed_18 = 176;
pub const ACTOR_BG_HAKA_MEGANEBG: C2RustUnnamed_18 = 175;
pub const ACTOR_BG_HAKA_MEGANE: C2RustUnnamed_18 = 174;
pub const ACTOR_EN_VB_BALL: C2RustUnnamed_18 = 173;
pub const ACTOR_BG_VB_SIMA: C2RustUnnamed_18 = 172;
pub const ACTOR_EN_FW: C2RustUnnamed_18 = 171;
pub const ACTOR_DEMO_TRE_LGT: C2RustUnnamed_18 = 170;
pub const ACTOR_DEMO_IM: C2RustUnnamed_18 = 169;
pub const ACTOR_DEMO_DU: C2RustUnnamed_18 = 168;
pub const ACTOR_EN_ENCOUNT1: C2RustUnnamed_18 = 167;
pub const ACTOR_EN_RL: C2RustUnnamed_18 = 166;
pub const ACTOR_EN_DHA: C2RustUnnamed_18 = 165;
pub const ACTOR_EN_DH: C2RustUnnamed_18 = 164;
pub const ACTOR_EN_FD_FIRE: C2RustUnnamed_18 = 163;
pub const ACTOR_BOSS_FD2: C2RustUnnamed_18 = 162;
pub const ACTOR_EN_RU1: C2RustUnnamed_18 = 161;
pub const ACTOR_UNSET_A0: C2RustUnnamed_18 = 160;
pub const ACTOR_MAGIC_FIRE: C2RustUnnamed_18 = 159;
pub const ACTOR_MAGIC_WIND: C2RustUnnamed_18 = 158;
pub const ACTOR_BG_HAKA: C2RustUnnamed_18 = 157;
pub const ACTOR_BG_SPOT02_OBJECTS: C2RustUnnamed_18 = 156;
pub const ACTOR_DOOR_ANA: C2RustUnnamed_18 = 155;
pub const ACTOR_EN_HORSE_LINK_CHILD: C2RustUnnamed_18 = 154;
pub const ACTOR_EN_FD: C2RustUnnamed_18 = 153;
pub const ACTOR_EN_DU: C2RustUnnamed_18 = 152;
pub const ACTOR_OBJECT_KANKYO: C2RustUnnamed_18 = 151;
pub const ACTOR_BOSS_FD: C2RustUnnamed_18 = 150;
pub const ACTOR_EN_SW: C2RustUnnamed_18 = 149;
pub const ACTOR_OBJ_MURE: C2RustUnnamed_18 = 148;
pub const ACTOR_BG_PO_EVENT: C2RustUnnamed_18 = 147;
pub const ACTOR_BG_HEAVY_BLOCK: C2RustUnnamed_18 = 146;
pub const ACTOR_EN_PO_SISTERS: C2RustUnnamed_18 = 145;
pub const ACTOR_EN_RD: C2RustUnnamed_18 = 144;
pub const ACTOR_EN_HEISHI1: C2RustUnnamed_18 = 143;
pub const ACTOR_EN_FLOORMAS: C2RustUnnamed_18 = 142;
pub const ACTOR_BG_HIDAN_FWBIG: C2RustUnnamed_18 = 141;
pub const ACTOR_DEMO_KANKYO: C2RustUnnamed_18 = 140;
pub const ACTOR_DEMO_EFFECT: C2RustUnnamed_18 = 139;
pub const ACTOR_EN_VM: C2RustUnnamed_18 = 138;
pub const ACTOR_BG_MORI_RAKKATENJO: C2RustUnnamed_18 = 137;
pub const ACTOR_BG_MORI_KAITENKABE: C2RustUnnamed_18 = 136;
pub const ACTOR_BG_MORI_ELEVATOR: C2RustUnnamed_18 = 135;
pub const ACTOR_BG_MORI_BIGST: C2RustUnnamed_18 = 134;
pub const ACTOR_EN_TK: C2RustUnnamed_18 = 133;
pub const ACTOR_EN_TA: C2RustUnnamed_18 = 132;
pub const ACTOR_UNSET_83: C2RustUnnamed_18 = 131;
pub const ACTOR_EN_VASE: C2RustUnnamed_18 = 130;
pub const ACTOR_EN_AROW_TRAP: C2RustUnnamed_18 = 129;
pub const ACTOR_EN_TRAP: C2RustUnnamed_18 = 128;
pub const ACTOR_UNSET_7F: C2RustUnnamed_18 = 127;
pub const ACTOR_UNSET_7E: C2RustUnnamed_18 = 126;
pub const ACTOR_EN_PU_BOX: C2RustUnnamed_18 = 125;
pub const ACTOR_EN_LIGHTBOX: C2RustUnnamed_18 = 124;
pub const ACTOR_UNSET_7B: C2RustUnnamed_18 = 123;
pub const ACTOR_UNSET_7A: C2RustUnnamed_18 = 122;
pub const ACTOR_UNSET_79: C2RustUnnamed_18 = 121;
pub const ACTOR_UNSET_78: C2RustUnnamed_18 = 120;
pub const ACTOR_EN_WOOD02: C2RustUnnamed_18 = 119;
pub const ACTOR_UNSET_76: C2RustUnnamed_18 = 118;
pub const ACTOR_UNSET_75: C2RustUnnamed_18 = 117;
pub const ACTOR_UNSET_74: C2RustUnnamed_18 = 116;
pub const ACTOR_UNSET_73: C2RustUnnamed_18 = 115;
pub const ACTOR_EN_BIRD: C2RustUnnamed_18 = 114;
pub const ACTOR_BG_HIDAN_HAMSTEP: C2RustUnnamed_18 = 113;
pub const ACTOR_DOOR_TOKI: C2RustUnnamed_18 = 112;
pub const ACTOR_BG_HIDAN_KOUSI: C2RustUnnamed_18 = 111;
pub const ACTOR_BG_MJIN: C2RustUnnamed_18 = 110;
pub const ACTOR_EN_FHG_FIRE: C2RustUnnamed_18 = 109;
pub const ACTOR_BG_TOKI_SWD: C2RustUnnamed_18 = 108;
pub const ACTOR_EN_YUKABYUN: C2RustUnnamed_18 = 107;
pub const ACTOR_BG_TOKI_HIKARI: C2RustUnnamed_18 = 106;
pub const ACTOR_EN_BB: C2RustUnnamed_18 = 105;
pub const ACTOR_BG_MORI_HINERI: C2RustUnnamed_18 = 104;
pub const ACTOR_EN_FHG: C2RustUnnamed_18 = 103;
pub const ACTOR_ARMS_HOOK: C2RustUnnamed_18 = 102;
pub const ACTOR_BG_MIZU_WATER: C2RustUnnamed_18 = 101;
pub const ACTOR_BG_MIZU_MOVEBG: C2RustUnnamed_18 = 100;
pub const ACTOR_EN_VALI: C2RustUnnamed_18 = 99;
pub const ACTOR_BG_MENKURI_EYE: C2RustUnnamed_18 = 98;
pub const ACTOR_BG_MENKURI_KAITEN: C2RustUnnamed_18 = 97;
pub const ACTOR_EN_DEKUNUTS: C2RustUnnamed_18 = 96;
pub const ACTOR_ITEM_B_HEART: C2RustUnnamed_18 = 95;
pub const ACTOR_OBJ_SYOKUDAI: C2RustUnnamed_18 = 94;
pub const ACTOR_DOOR_WARP1: C2RustUnnamed_18 = 93;
pub const ACTOR_BG_DDAN_KD: C2RustUnnamed_18 = 92;
pub const ACTOR_EN_HORSE_ZELDA: C2RustUnnamed_18 = 91;
pub const ACTOR_EN_JJ: C2RustUnnamed_18 = 90;
pub const ACTOR_BG_BREAKWALL: C2RustUnnamed_18 = 89;
pub const ACTOR_BG_DDAN_JD: C2RustUnnamed_18 = 88;
pub const ACTOR_EN_M_THUNDER: C2RustUnnamed_18 = 87;
pub const ACTOR_EN_M_FIRE1: C2RustUnnamed_18 = 86;
pub const ACTOR_EN_DEKUBABA: C2RustUnnamed_18 = 85;
pub const ACTOR_EN_AM: C2RustUnnamed_18 = 84;
pub const ACTOR_UNSET_53: C2RustUnnamed_18 = 83;
pub const ACTOR_BOSS_GANONDROF: C2RustUnnamed_18 = 82;
pub const ACTOR_BG_YDAN_MARUTA: C2RustUnnamed_18 = 81;
pub const ACTOR_BG_YDAN_HASI: C2RustUnnamed_18 = 80;
pub const ACTOR_EN_OE2: C2RustUnnamed_18 = 79;
pub const ACTOR_BG_HIDAN_FSLIFT: C2RustUnnamed_18 = 78;
pub const ACTOR_EN_ZL2: C2RustUnnamed_18 = 77;
pub const ACTOR_EN_BOMBF: C2RustUnnamed_18 = 76;
pub const ACTOR_EN_MB: C2RustUnnamed_18 = 75;
pub const ACTOR_BG_SPOT00_HANEBASI: C2RustUnnamed_18 = 74;
pub const ACTOR_BG_HIDAN_CURTAIN: C2RustUnnamed_18 = 73;
pub const ACTOR_EN_XC: C2RustUnnamed_18 = 72;
pub const ACTOR_BG_HIDAN_SYOKU: C2RustUnnamed_18 = 71;
pub const ACTOR_BG_HIDAN_SIMA: C2RustUnnamed_18 = 70;
pub const ACTOR_BG_HIDAN_SEKIZOU: C2RustUnnamed_18 = 69;
pub const ACTOR_BG_HIDAN_RSEKIZOU: C2RustUnnamed_18 = 68;
pub const ACTOR_BG_HIDAN_ROCK: C2RustUnnamed_18 = 67;
pub const ACTOR_EN_HORSE_GANON: C2RustUnnamed_18 = 66;
pub const ACTOR_BG_HIDAN_HROCK: C2RustUnnamed_18 = 65;
pub const ACTOR_BG_HIDAN_DALM: C2RustUnnamed_18 = 64;
pub const ACTOR_BG_DODOAGO: C2RustUnnamed_18 = 63;
pub const ACTOR_BG_TREEMOUTH: C2RustUnnamed_18 = 62;
pub const ACTOR_EN_OSSAN: C2RustUnnamed_18 = 61;
pub const ACTOR_EN_HORSE_NORMAL: C2RustUnnamed_18 = 60;
pub const ACTOR_EN_RIVER_SOUND: C2RustUnnamed_18 = 59;
pub const ACTOR_EN_EIYER: C2RustUnnamed_18 = 58;
pub const ACTOR_EN_A_OBJ: C2RustUnnamed_18 = 57;
pub const ACTOR_EN_BW: C2RustUnnamed_18 = 56;
pub const ACTOR_EN_ST: C2RustUnnamed_18 = 55;
pub const ACTOR_UNSET_36: C2RustUnnamed_18 = 54;
pub const ACTOR_EN_TP: C2RustUnnamed_18 = 53;
pub const ACTOR_EN_BILI: C2RustUnnamed_18 = 52;
pub const ACTOR_EN_TORCH2: C2RustUnnamed_18 = 51;
pub const ACTOR_EN_BOOM: C2RustUnnamed_18 = 50;
pub const ACTOR_UNSET_31: C2RustUnnamed_18 = 49;
pub const ACTOR_EN_BDFIRE: C2RustUnnamed_18 = 48;
pub const ACTOR_EN_DODOJR: C2RustUnnamed_18 = 47;
pub const ACTOR_DOOR_SHUTTER: C2RustUnnamed_18 = 46;
pub const ACTOR_EN_BUBBLE: C2RustUnnamed_18 = 45;
pub const ACTOR_BG_PUSHBOX: C2RustUnnamed_18 = 44;
pub const ACTOR_EN_GOMA: C2RustUnnamed_18 = 43;
pub const ACTOR_EN_VIEWER: C2RustUnnamed_18 = 42;
pub const ACTOR_EN_ZL1: C2RustUnnamed_18 = 41;
pub const ACTOR_BOSS_GOMA: C2RustUnnamed_18 = 40;
pub const ACTOR_BOSS_DODONGO: C2RustUnnamed_18 = 39;
pub const ACTOR_EN_HATA: C2RustUnnamed_18 = 38;
pub const ACTOR_EN_ZF: C2RustUnnamed_18 = 37;
pub const ACTOR_EN_SCENE_CHANGE: C2RustUnnamed_18 = 36;
pub const ACTOR_EN_HOLL: C2RustUnnamed_18 = 35;
pub const ACTOR_UNSET_22: C2RustUnnamed_18 = 34;
pub const ACTOR_EN_FISH: C2RustUnnamed_18 = 33;
pub const ACTOR_EN_INSECT: C2RustUnnamed_18 = 32;
pub const ACTOR_UNSET_1F: C2RustUnnamed_18 = 31;
pub const ACTOR_EN_BUTTE: C2RustUnnamed_18 = 30;
pub const ACTOR_EN_PEEHAT: C2RustUnnamed_18 = 29;
pub const ACTOR_EN_REEBA: C2RustUnnamed_18 = 28;
pub const ACTOR_EN_TITE: C2RustUnnamed_18 = 27;
pub const ACTOR_UNSET_1A: C2RustUnnamed_18 = 26;
pub const ACTOR_EN_NIW: C2RustUnnamed_18 = 25;
pub const ACTOR_EN_ELF: C2RustUnnamed_18 = 24;
pub const ACTOR_UNSET_17: C2RustUnnamed_18 = 23;
pub const ACTOR_EN_ARROW: C2RustUnnamed_18 = 22;
pub const ACTOR_EN_ITEM00: C2RustUnnamed_18 = 21;
pub const ACTOR_EN_HORSE: C2RustUnnamed_18 = 20;
pub const ACTOR_EN_FIREFLY: C2RustUnnamed_18 = 19;
pub const ACTOR_EN_DODONGO: C2RustUnnamed_18 = 18;
pub const ACTOR_EN_WALLMAS: C2RustUnnamed_18 = 17;
pub const ACTOR_EN_BOM: C2RustUnnamed_18 = 16;
pub const ACTOR_BG_YDAN_SP: C2RustUnnamed_18 = 15;
pub const ACTOR_EN_OKUTA: C2RustUnnamed_18 = 14;
pub const ACTOR_EN_POH: C2RustUnnamed_18 = 13;
pub const ACTOR_BG_HIDAN_FIREWALL: C2RustUnnamed_18 = 12;
pub const ACTOR_BG_DY_YOSEIZO: C2RustUnnamed_18 = 11;
pub const ACTOR_EN_BOX: C2RustUnnamed_18 = 10;
pub const ACTOR_EN_DOOR: C2RustUnnamed_18 = 9;
pub const ACTOR_EN_LIGHT: C2RustUnnamed_18 = 8;
pub const ACTOR_EN_PART: C2RustUnnamed_18 = 7;
pub const ACTOR_UNSET_6: C2RustUnnamed_18 = 6;
pub const ACTOR_UNSET_5: C2RustUnnamed_18 = 5;
pub const ACTOR_EN_GIRLA: C2RustUnnamed_18 = 4;
pub const ACTOR_UNSET_3: C2RustUnnamed_18 = 3;
pub const ACTOR_EN_TEST: C2RustUnnamed_18 = 2;
pub const ACTOR_UNSET_1: C2RustUnnamed_18 = 1;
pub const ACTOR_PLAYER: C2RustUnnamed_18 = 0;
pub type C2RustUnnamed_19 = libc::c_uint;
pub const OBJECT_ID_MAX: C2RustUnnamed_19 = 402;
pub const OBJECT_ZL4: C2RustUnnamed_19 = 401;
pub const OBJECT_TIMEBLOCK: C2RustUnnamed_19 = 400;
pub const OBJECT_OUKE_HAKA: C2RustUnnamed_19 = 399;
pub const OBJECT_DOOR_KILLER: C2RustUnnamed_19 = 398;
pub const OBJECT_GI_SWORD_1: C2RustUnnamed_19 = 397;
pub const OBJECT_COB: C2RustUnnamed_19 = 396;
pub const OBJECT_COW: C2RustUnnamed_19 = 395;
pub const OBJECT_BWALL: C2RustUnnamed_19 = 394;
pub const OBJECT_PS: C2RustUnnamed_19 = 393;
pub const OBJECT_GS: C2RustUnnamed_19 = 392;
pub const OBJECT_HAKA_DOOR: C2RustUnnamed_19 = 391;
pub const OBJECT_GEFF: C2RustUnnamed_19 = 390;
pub const OBJECT_GJ: C2RustUnnamed_19 = 389;
pub const OBJECT_SKB: C2RustUnnamed_19 = 388;
pub const OBJECT_WF: C2RustUnnamed_19 = 387;
pub const OBJECT_MU: C2RustUnnamed_19 = 386;
pub const OBJECT_SPOT01_MATOYAB: C2RustUnnamed_19 = 385;
pub const OBJECT_SPOT01_MATOYA: C2RustUnnamed_19 = 384;
pub const OBJECT_GI_RUPY: C2RustUnnamed_19 = 383;
pub const OBJECT_GANON_ANIME3: C2RustUnnamed_19 = 382;
pub const OBJECT_GANON_ANIME2: C2RustUnnamed_19 = 381;
pub const OBJECT_GANON_ANIME1: C2RustUnnamed_19 = 380;
pub const OBJECT_GI_DEKUPOUCH: C2RustUnnamed_19 = 379;
pub const OBJECT_EFC_DOUGHNUT: C2RustUnnamed_19 = 378;
pub const OBJECT_DEMO_KEKKAI: C2RustUnnamed_19 = 377;
pub const OBJECT_BOWL: C2RustUnnamed_19 = 376;
pub const OBJECT_GI_SOUL: C2RustUnnamed_19 = 375;
pub const OBJECT_GI_GHOST: C2RustUnnamed_19 = 374;
pub const OBJECT_GI_BUTTERFLY: C2RustUnnamed_19 = 373;
pub const OBJECT_GI_INSECT: C2RustUnnamed_19 = 372;
pub const OBJECT_GI_FIRE: C2RustUnnamed_19 = 371;
pub const OBJECT_DNK: C2RustUnnamed_19 = 370;
pub const OBJECT_DNS: C2RustUnnamed_19 = 369;
pub const OBJECT_KIBAKO2: C2RustUnnamed_19 = 368;
pub const OBJECT_SPOT11_OBJ: C2RustUnnamed_19 = 367;
pub const OBJECT_UNSET_16E: C2RustUnnamed_19 = 366;
pub const OBJECT_JYA_DOOR: C2RustUnnamed_19 = 365;
pub const OBJECT_JYA_IRON: C2RustUnnamed_19 = 364;
pub const OBJECT_DOG: C2RustUnnamed_19 = 363;
pub const OBJECT_GR: C2RustUnnamed_19 = 362;
pub const OBJECT_GELDB: C2RustUnnamed_19 = 361;
pub const OBJECT_SHOPNUTS: C2RustUnnamed_19 = 360;
pub const OBJECT_GLA: C2RustUnnamed_19 = 359;
pub const OBJECT_SPOT00_BREAK: C2RustUnnamed_19 = 358;
pub const OBJECT_RS: C2RustUnnamed_19 = 357;
pub const OBJECT_HINTNUTS: C2RustUnnamed_19 = 356;
pub const OBJECT_BOMBIWA: C2RustUnnamed_19 = 355;
pub const OBJECT_SPOT12_OBJ: C2RustUnnamed_19 = 354;
pub const OBJECT_SPOT05_OBJECTS: C2RustUnnamed_19 = 353;
pub const OBJECT_BG: C2RustUnnamed_19 = 352;
pub const OBJECT_BIGOKUTA: C2RustUnnamed_19 = 351;
pub const OBJECT_SSH: C2RustUnnamed_19 = 350;
pub const OBJECT_GI_GODDESS: C2RustUnnamed_19 = 349;
pub const OBJECT_GI_SUTARU: C2RustUnnamed_19 = 348;
pub const OBJECT_FISH: C2RustUnnamed_19 = 347;
pub const OBJECT_EC: C2RustUnnamed_19 = 346;
pub const OBJECT_DS2: C2RustUnnamed_19 = 345;
pub const OBJECT_GI_M_ARROW: C2RustUnnamed_19 = 344;
pub const OBJECT_GI_HOVERBOOTS: C2RustUnnamed_19 = 343;
pub const OBJECT_ZG: C2RustUnnamed_19 = 342;
pub const OBJECT_TS: C2RustUnnamed_19 = 341;
pub const OBJECT_KA: C2RustUnnamed_19 = 340;
pub const OBJECT_GANON2: C2RustUnnamed_19 = 339;
pub const OBJECT_GI_GERUDOMASK: C2RustUnnamed_19 = 338;
pub const OBJECT_GI_ZORAMASK: C2RustUnnamed_19 = 337;
pub const OBJECT_GI_GOLONMASK: C2RustUnnamed_19 = 336;
pub const OBJECT_ZL2_ANIME2: C2RustUnnamed_19 = 335;
pub const OBJECT_ZL2_ANIME1: C2RustUnnamed_19 = 334;
pub const OBJECT_EFC_ERUPC: C2RustUnnamed_19 = 333;
pub const OBJECT_GT: C2RustUnnamed_19 = 332;
pub const OBJECT_DOOR_GERUDO: C2RustUnnamed_19 = 331;
pub const OBJECT_MAG: C2RustUnnamed_19 = 330;
pub const OBJECT_GI_FROG: C2RustUnnamed_19 = 329;
pub const OBJECT_GI_SOLDOUT: C2RustUnnamed_19 = 328;
pub const OBJECT_GI_BRACELET: C2RustUnnamed_19 = 327;
pub const OBJECT_GI_PRESCRIPTION: C2RustUnnamed_19 = 326;
pub const OBJECT_CS: C2RustUnnamed_19 = 325;
pub const OBJECT_JS: C2RustUnnamed_19 = 324;
pub const OBJECT_GI_BROKENSWORD: C2RustUnnamed_19 = 323;
pub const OBJECT_GI_TICKETSTONE: C2RustUnnamed_19 = 322;
pub const OBJECT_GI_MUSHROOM: C2RustUnnamed_19 = 321;
pub const OBJECT_GI_POWDER: C2RustUnnamed_19 = 320;
pub const OBJECT_GI_EYE_LOTION: C2RustUnnamed_19 = 319;
pub const OBJECT_OS: C2RustUnnamed_19 = 318;
pub const OBJECT_FA: C2RustUnnamed_19 = 317;
pub const OBJECT_MM: C2RustUnnamed_19 = 316;
pub const OBJECT_STREAM: C2RustUnnamed_19 = 315;
pub const OBJECT_SIOFUKI: C2RustUnnamed_19 = 314;
pub const OBJECT_GANON_OBJECTS: C2RustUnnamed_19 = 313;
pub const OBJECT_GI_TRUTH_MASK: C2RustUnnamed_19 = 312;
pub const OBJECT_GI_RABIT_MASK: C2RustUnnamed_19 = 311;
pub const OBJECT_GI_SKJ_MASK: C2RustUnnamed_19 = 310;
pub const OBJECT_GI_REDEAD_MASK: C2RustUnnamed_19 = 309;
pub const OBJECT_GI_KI_TAN_MASK: C2RustUnnamed_19 = 308;
pub const OBJECT_FU: C2RustUnnamed_19 = 307;
pub const OBJECT_MK: C2RustUnnamed_19 = 306;
pub const OBJECT_OWL: C2RustUnnamed_19 = 305;
pub const OBJECT_GJYO_OBJECTS: C2RustUnnamed_19 = 304;
pub const OBJECT_KANBAN: C2RustUnnamed_19 = 303;
pub const OBJECT_GI_COIN: C2RustUnnamed_19 = 302;
pub const OBJECT_GI_GLOVES: C2RustUnnamed_19 = 301;
pub const OBJECT_TSUBO: C2RustUnnamed_19 = 300;
pub const OBJECT_KUSA: C2RustUnnamed_19 = 299;
pub const OBJECT_LIGHTSWITCH: C2RustUnnamed_19 = 298;
pub const OBJECT_INGATE: C2RustUnnamed_19 = 297;
pub const OBJECT_HS: C2RustUnnamed_19 = 296;
pub const OBJECT_MS: C2RustUnnamed_19 = 295;
pub const OBJECT_GM: C2RustUnnamed_19 = 294;
pub const OBJECT_BLKOBJ: C2RustUnnamed_19 = 293;
pub const OBJECT_NWC: C2RustUnnamed_19 = 292;
pub const OBJECT_UNSET_123: C2RustUnnamed_19 = 291;
pub const OBJECT_DAIKU: C2RustUnnamed_19 = 290;
pub const OBJECT_TORYO: C2RustUnnamed_19 = 289;
pub const OBJECT_UNSET_120: C2RustUnnamed_19 = 288;
pub const OBJECT_GOROIWA: C2RustUnnamed_19 = 287;
pub const OBJECT_MAMENOKI: C2RustUnnamed_19 = 286;
pub const OBJECT_D_LIFT: C2RustUnnamed_19 = 285;
pub const OBJECT_D_HSBLOCK: C2RustUnnamed_19 = 284;
pub const OBJECT_D_ELEVATOR: C2RustUnnamed_19 = 283;
pub const OBJECT_GND_MAGIC: C2RustUnnamed_19 = 282;
pub const OBJECT_GI_SEED: C2RustUnnamed_19 = 281;
pub const OBJECT_GI_BOOTS_2: C2RustUnnamed_19 = 280;
pub const OBJECT_YABUSAME_POINT: C2RustUnnamed_19 = 279;
pub const OBJECT_GE1: C2RustUnnamed_19 = 278;
pub const OBJECT_BOB: C2RustUnnamed_19 = 277;
pub const OBJECT_FZ: C2RustUnnamed_19 = 276;
pub const OBJECT_SPOT07_OBJECT: C2RustUnnamed_19 = 275;
pub const OBJECT_SPOT03_OBJECT: C2RustUnnamed_19 = 274;
pub const OBJECT_BOJ: C2RustUnnamed_19 = 273;
pub const OBJECT_ANE: C2RustUnnamed_19 = 272;
pub const OBJECT_DS: C2RustUnnamed_19 = 271;
pub const OBJECT_GI_OCARINA_0: C2RustUnnamed_19 = 270;
pub const OBJECT_BBA: C2RustUnnamed_19 = 269;
pub const OBJECT_BJI: C2RustUnnamed_19 = 268;
pub const OBJECT_GI_BOTTLE_LETTER: C2RustUnnamed_19 = 267;
pub const OBJECT_SKJ: C2RustUnnamed_19 = 266;
pub const OBJECT_GI_NIWATORI: C2RustUnnamed_19 = 265;
pub const OBJECT_CNE: C2RustUnnamed_19 = 264;
pub const OBJECT_AHG: C2RustUnnamed_19 = 263;
pub const OBJECT_IK: C2RustUnnamed_19 = 262;
pub const OBJECT_AOB: C2RustUnnamed_19 = 261;
pub const OBJECT_MASTERZOORA: C2RustUnnamed_19 = 260;
pub const OBJECT_MASTERGOLON: C2RustUnnamed_19 = 259;
pub const OBJECT_MASTERKOKIRIHEAD: C2RustUnnamed_19 = 258;
pub const OBJECT_MASTERKOKIRI: C2RustUnnamed_19 = 257;
pub const OBJECT_UMAJUMP: C2RustUnnamed_19 = 256;
pub const OBJECT_KZ: C2RustUnnamed_19 = 255;
pub const OBJECT_ZO: C2RustUnnamed_19 = 254;
pub const OBJECT_KW1: C2RustUnnamed_19 = 253;
pub const OBJECT_KM1: C2RustUnnamed_19 = 252;
pub const OBJECT_MD: C2RustUnnamed_19 = 251;
pub const OBJECT_MD_UNUSED: C2RustUnnamed_19 = 250;
pub const OBJECT_SPOT01_OBJECTS: C2RustUnnamed_19 = 249;
pub const OBJECT_GI_LONGSWORD: C2RustUnnamed_19 = 248;
pub const OBJECT_GI_GRASS: C2RustUnnamed_19 = 247;
pub const OBJECT_GI_HAMMER: C2RustUnnamed_19 = 246;
pub const OBJECT_GI_SAW: C2RustUnnamed_19 = 245;
pub const OBJECT_GI_FISH: C2RustUnnamed_19 = 244;
pub const OBJECT_GI_BEAN: C2RustUnnamed_19 = 243;
pub const OBJECT_GI_CLOTHES: C2RustUnnamed_19 = 242;
pub const OBJECT_JYA_OBJ: C2RustUnnamed_19 = 241;
pub const OBJECT_SPOT15_OBJ: C2RustUnnamed_19 = 240;
pub const OBJECT_GI_LETTER: C2RustUnnamed_19 = 239;
pub const OBJECT_GI_SHIELD_3: C2RustUnnamed_19 = 238;
pub const OBJECT_DEMO_6K: C2RustUnnamed_19 = 237;
pub const OBJECT_ANI: C2RustUnnamed_19 = 236;
pub const OBJECT_GI_LIQUID: C2RustUnnamed_19 = 235;
pub const OBJECT_GI_GLASSES: C2RustUnnamed_19 = 234;
pub const OBJECT_GI_BOW: C2RustUnnamed_19 = 233;
pub const OBJECT_GI_BOOMERANG: C2RustUnnamed_19 = 232;
pub const OBJECT_GI_PACHINKO: C2RustUnnamed_19 = 231;
pub const OBJECT_FR: C2RustUnnamed_19 = 230;
pub const OBJECT_NY: C2RustUnnamed_19 = 229;
pub const OBJECT_UNSET_E4: C2RustUnnamed_19 = 228;
pub const OBJECT_NY_UNUSED: C2RustUnnamed_19 = 227;
pub const OBJECT_SST: C2RustUnnamed_19 = 226;
pub const OBJECT_GANON: C2RustUnnamed_19 = 225;
pub const OBJECT_MA1: C2RustUnnamed_19 = 224;
pub const OBJECT_GI_MILK: C2RustUnnamed_19 = 223;
pub const OBJECT_GI_OCARINA: C2RustUnnamed_19 = 222;
pub const OBJECT_GI_HOOKSHOT: C2RustUnnamed_19 = 221;
pub const OBJECT_GI_SHIELD_2: C2RustUnnamed_19 = 220;
pub const OBJECT_GI_SCALE: C2RustUnnamed_19 = 219;
pub const OBJECT_GI_EGG: C2RustUnnamed_19 = 218;
pub const OBJECT_GI_BOMB_2: C2RustUnnamed_19 = 217;
pub const OBJECT_GI_ARROW: C2RustUnnamed_19 = 216;
pub const OBJECT_GI_GERUDO: C2RustUnnamed_19 = 215;
pub const OBJECT_ANUBICE: C2RustUnnamed_19 = 214;
pub const OBJECT_BXA: C2RustUnnamed_19 = 213;
pub const OBJECT_RR: C2RustUnnamed_19 = 212;
pub const OBJECT_TW: C2RustUnnamed_19 = 211;
pub const OBJECT_HNI: C2RustUnnamed_19 = 210;
pub const OBJECT_GI_PURSE: C2RustUnnamed_19 = 209;
pub const OBJECT_MA2: C2RustUnnamed_19 = 208;
pub const OBJECT_OF1S: C2RustUnnamed_19 = 207;
pub const OBJECT_GI_BOMB_1: C2RustUnnamed_19 = 206;
pub const OBJECT_GI_MAGICPOT: C2RustUnnamed_19 = 205;
pub const OBJECT_DEKUJR: C2RustUnnamed_19 = 204;
pub const OBJECT_GI_SHIELD_1: C2RustUnnamed_19 = 203;
pub const OBJECT_RU2: C2RustUnnamed_19 = 202;
pub const OBJECT_OF1D_MAP: C2RustUnnamed_19 = 201;
pub const OBJECT_GI_MAP: C2RustUnnamed_19 = 200;
pub const OBJECT_GI_STICK: C2RustUnnamed_19 = 199;
pub const OBJECT_GI_BOTTLE: C2RustUnnamed_19 = 198;
pub const OBJECT_OS_ANIME: C2RustUnnamed_19 = 197;
pub const OBJECT_OE4S: C2RustUnnamed_19 = 196;
pub const OBJECT_OE1S: C2RustUnnamed_19 = 195;
pub const OBJECT_SPOT16_OBJ: C2RustUnnamed_19 = 194;
pub const OBJECT_TR: C2RustUnnamed_19 = 193;
pub const OBJECT_IN: C2RustUnnamed_19 = 192;
pub const OBJECT_GI_BOMBPOUCH: C2RustUnnamed_19 = 191;
pub const OBJECT_GI_ARROWCASE: C2RustUnnamed_19 = 190;
pub const OBJECT_GI_HEARTS: C2RustUnnamed_19 = 189;
pub const OBJECT_SA: C2RustUnnamed_19 = 188;
pub const OBJECT_GI_NUTS: C2RustUnnamed_19 = 187;
pub const OBJECT_GI_MEDAL: C2RustUnnamed_19 = 186;
pub const OBJECT_GI_BOSSKEY: C2RustUnnamed_19 = 185;
pub const OBJECT_GI_COMPASS: C2RustUnnamed_19 = 184;
pub const OBJECT_GI_HEART: C2RustUnnamed_19 = 183;
pub const OBJECT_GI_MELODY: C2RustUnnamed_19 = 182;
pub const OBJECT_SB: C2RustUnnamed_19 = 181;
pub const OBJECT_MO: C2RustUnnamed_19 = 180;
pub const OBJECT_NB: C2RustUnnamed_19 = 179;
pub const OBJECT_SHOP_DUNGEN: C2RustUnnamed_19 = 178;
pub const OBJECT_SPOT17_OBJ: C2RustUnnamed_19 = 177;
pub const OBJECT_BDOOR: C2RustUnnamed_19 = 176;
pub const OBJECT_SPOT18_OBJ: C2RustUnnamed_19 = 175;
pub const OBJECT_SPOT09_OBJ: C2RustUnnamed_19 = 174;
pub const OBJECT_GI_JEWEL: C2RustUnnamed_19 = 173;
pub const OBJECT_BROB: C2RustUnnamed_19 = 172;
pub const OBJECT_MIR_RAY: C2RustUnnamed_19 = 171;
pub const OBJECT_GI_KEY: C2RustUnnamed_19 = 170;
pub const OBJECT_DEMO_TRE_LGT: C2RustUnnamed_19 = 169;
pub const OBJECT_EFC_TW: C2RustUnnamed_19 = 168;
pub const OBJECT_RL: C2RustUnnamed_19 = 167;
pub const OBJECT_DH: C2RustUnnamed_19 = 166;
pub const OBJECT_FD2: C2RustUnnamed_19 = 165;
pub const OBJECT_SYOKUDAI: C2RustUnnamed_19 = 164;
pub const OBJECT_RU1: C2RustUnnamed_19 = 163;
pub const OBJECT_HAKA: C2RustUnnamed_19 = 162;
pub const OBJECT_SPOT02_OBJECTS: C2RustUnnamed_19 = 161;
pub const OBJECT_HORSE_LINK_CHILD: C2RustUnnamed_19 = 160;
pub const OBJECT_MEDAL: C2RustUnnamed_19 = 159;
pub const OBJECT_FW: C2RustUnnamed_19 = 158;
pub const OBJECT_DU: C2RustUnnamed_19 = 157;
pub const OBJECT_FD: C2RustUnnamed_19 = 156;
pub const OBJECT_GNDD: C2RustUnnamed_19 = 155;
pub const OBJECT_HEAVY_OBJECT: C2RustUnnamed_19 = 154;
pub const OBJECT_PO_SISTERS: C2RustUnnamed_19 = 153;
pub const OBJECT_RD: C2RustUnnamed_19 = 152;
pub const OBJECT_SD: C2RustUnnamed_19 = 151;
pub const OBJECT_BDAN_OBJECTS: C2RustUnnamed_19 = 150;
pub const OBJECT_TRIFORCE_SPOT: C2RustUnnamed_19 = 149;
pub const OBJECT_LIGHT_RING: C2RustUnnamed_19 = 148;
pub const OBJECT_GOD_LGT: C2RustUnnamed_19 = 147;
pub const OBJECT_EFC_STAR_FIELD: C2RustUnnamed_19 = 146;
pub const OBJECT_EFC_LGT_SHOWER: C2RustUnnamed_19 = 145;
pub const OBJECT_EFC_FLASH: C2RustUnnamed_19 = 144;
pub const OBJECT_EFC_FIRE_BALL: C2RustUnnamed_19 = 143;
pub const OBJECT_EFC_CRYSTAL_LIGHT: C2RustUnnamed_19 = 142;
pub const OBJECT_HAKACH_OBJECTS: C2RustUnnamed_19 = 141;
pub const OBJECT_BV: C2RustUnnamed_19 = 140;
pub const OBJECT_VM: C2RustUnnamed_19 = 139;
pub const OBJECT_XC: C2RustUnnamed_19 = 138;
pub const OBJECT_TK: C2RustUnnamed_19 = 137;
pub const OBJECT_TA: C2RustUnnamed_19 = 136;
pub const OBJECT_IM: C2RustUnnamed_19 = 135;
pub const OBJECT_VASE: C2RustUnnamed_19 = 134;
pub const OBJECT_TRAP: C2RustUnnamed_19 = 133;
pub const OBJECT_UNSET_84: C2RustUnnamed_19 = 132;
pub const OBJECT_UNSET_83: C2RustUnnamed_19 = 131;
pub const OBJECT_PU_BOX: C2RustUnnamed_19 = 130;
pub const OBJECT_LIGHTBOX: C2RustUnnamed_19 = 129;
pub const OBJECT_UNSET_80: C2RustUnnamed_19 = 128;
pub const OBJECT_UNSET_7F: C2RustUnnamed_19 = 127;
pub const OBJECT_UNSET_7E: C2RustUnnamed_19 = 126;
pub const OBJECT_UNSET_7D: C2RustUnnamed_19 = 125;
pub const OBJECT_WOOD02: C2RustUnnamed_19 = 124;
pub const OBJECT_UNSET_7B: C2RustUnnamed_19 = 123;
pub const OBJECT_UNSET_7A: C2RustUnnamed_19 = 122;
pub const OBJECT_UNSET_79: C2RustUnnamed_19 = 121;
pub const OBJECT_UNSET_78: C2RustUnnamed_19 = 120;
pub const OBJECT_BIRD: C2RustUnnamed_19 = 119;
pub const OBJECT_HATA: C2RustUnnamed_19 = 118;
pub const OBJECT_WARP2: C2RustUnnamed_19 = 117;
pub const OBJECT_SPOT08_OBJ: C2RustUnnamed_19 = 116;
pub const OBJECT_MORI_TEX: C2RustUnnamed_19 = 115;
pub const OBJECT_MORI_OBJECTS: C2RustUnnamed_19 = 114;
pub const OBJECT_MORI_HINERI2A: C2RustUnnamed_19 = 113;
pub const OBJECT_MORI_HINERI2: C2RustUnnamed_19 = 112;
pub const OBJECT_MORI_HINERI1A: C2RustUnnamed_19 = 111;
pub const OBJECT_PO_COMPOSER: C2RustUnnamed_19 = 110;
pub const OBJECT_PO_FIELD: C2RustUnnamed_19 = 109;
pub const OBJECT_RELAY_OBJECTS: C2RustUnnamed_19 = 108;
pub const OBJECT_ICE_OBJECTS: C2RustUnnamed_19 = 107;
pub const OBJECT_SPOT06_OBJECTS: C2RustUnnamed_19 = 106;
pub const OBJECT_HAKA_OBJECTS: C2RustUnnamed_19 = 105;
pub const OBJECT_MJIN_OKA: C2RustUnnamed_19 = 104;
pub const OBJECT_MJIN_WIND: C2RustUnnamed_19 = 103;
pub const OBJECT_MJIN_SOUL: C2RustUnnamed_19 = 102;
pub const OBJECT_MJIN_ICE: C2RustUnnamed_19 = 101;
pub const OBJECT_MJIN_FLAME: C2RustUnnamed_19 = 100;
pub const OBJECT_MJIN_DARK: C2RustUnnamed_19 = 99;
pub const OBJECT_MJIN_FLASH: C2RustUnnamed_19 = 98;
pub const OBJECT_MJIN: C2RustUnnamed_19 = 97;
pub const OBJECT_ZL2: C2RustUnnamed_19 = 96;
pub const OBJECT_YUKABYUN: C2RustUnnamed_19 = 95;
pub const OBJECT_TOKI_OBJECTS: C2RustUnnamed_19 = 94;
pub const OBJECT_BB: C2RustUnnamed_19 = 93;
pub const OBJECT_MORI_HINERI1: C2RustUnnamed_19 = 92;
pub const OBJECT_OSSAN: C2RustUnnamed_19 = 91;
pub const OBJECT_FHG: C2RustUnnamed_19 = 90;
pub const OBJECT_MIZU_OBJECTS: C2RustUnnamed_19 = 89;
pub const OBJECT_OA11: C2RustUnnamed_19 = 88;
pub const OBJECT_OA10: C2RustUnnamed_19 = 87;
pub const OBJECT_VALI: C2RustUnnamed_19 = 86;
pub const OBJECT_OE12: C2RustUnnamed_19 = 85;
pub const OBJECT_OE11: C2RustUnnamed_19 = 84;
pub const OBJECT_OE10: C2RustUnnamed_19 = 83;
pub const OBJECT_OE9: C2RustUnnamed_19 = 82;
pub const OBJECT_OE8: C2RustUnnamed_19 = 81;
pub const OBJECT_OE7: C2RustUnnamed_19 = 80;
pub const OBJECT_OE6: C2RustUnnamed_19 = 79;
pub const OBJECT_OE5: C2RustUnnamed_19 = 78;
pub const OBJECT_MENKURI_OBJECTS: C2RustUnnamed_19 = 77;
pub const OBJECT_OE4: C2RustUnnamed_19 = 76;
pub const OBJECT_OE3: C2RustUnnamed_19 = 75;
pub const OBJECT_DEKUNUTS: C2RustUnnamed_19 = 74;
pub const OBJECT_B_HEART: C2RustUnnamed_19 = 73;
pub const OBJECT_WARP1: C2RustUnnamed_19 = 72;
pub const OBJECT_OPENING_DEMO1: C2RustUnnamed_19 = 71;
pub const OBJECT_HORSE_ZELDA: C2RustUnnamed_19 = 70;
pub const OBJECT_OB4: C2RustUnnamed_19 = 69;
pub const OBJECT_OB3: C2RustUnnamed_19 = 68;
pub const OBJECT_OB2: C2RustUnnamed_19 = 67;
pub const OBJECT_OA9: C2RustUnnamed_19 = 66;
pub const OBJECT_OA8: C2RustUnnamed_19 = 65;
pub const OBJECT_JJ: C2RustUnnamed_19 = 64;
pub const OBJECT_OA7: C2RustUnnamed_19 = 63;
pub const OBJECT_OA6: C2RustUnnamed_19 = 62;
pub const OBJECT_OA5: C2RustUnnamed_19 = 61;
pub const OBJECT_OA4: C2RustUnnamed_19 = 60;
pub const OBJECT_OA3: C2RustUnnamed_19 = 59;
pub const OBJECT_UNSET_3A: C2RustUnnamed_19 = 58;
pub const OBJECT_DEKUBABA: C2RustUnnamed_19 = 57;
pub const OBJECT_AM: C2RustUnnamed_19 = 56;
pub const OBJECT_GND: C2RustUnnamed_19 = 55;
pub const OBJECT_YDAN_OBJECTS: C2RustUnnamed_19 = 54;
pub const OBJECT_OE2: C2RustUnnamed_19 = 53;
pub const OBJECT_OE_ANIME: C2RustUnnamed_19 = 52;
pub const OBJECT_OE1: C2RustUnnamed_19 = 51;
pub const OBJECT_SK2: C2RustUnnamed_19 = 50;
pub const OBJECT_BOMBF: C2RustUnnamed_19 = 49;
pub const OBJECT_MB: C2RustUnnamed_19 = 48;
pub const OBJECT_SPOT00_OBJECTS: C2RustUnnamed_19 = 47;
pub const OBJECT_OA2: C2RustUnnamed_19 = 46;
pub const OBJECT_HORSE_GANON: C2RustUnnamed_19 = 45;
pub const OBJECT_HIDAN_OBJECTS: C2RustUnnamed_19 = 44;
pub const OBJECT_DDAN_OBJECTS: C2RustUnnamed_19 = 43;
pub const OBJECT_SPOT04_OBJECTS: C2RustUnnamed_19 = 42;
pub const OBJECT_O_ANIME: C2RustUnnamed_19 = 41;
pub const OBJECT_OB1: C2RustUnnamed_19 = 40;
pub const OBJECT_HORSE_NORMAL: C2RustUnnamed_19 = 39;
pub const OBJECT_EI: C2RustUnnamed_19 = 38;
pub const OBJECT_BW: C2RustUnnamed_19 = 37;
pub const OBJECT_ST: C2RustUnnamed_19 = 36;
pub const OBJECT_OA1: C2RustUnnamed_19 = 35;
pub const OBJECT_TP: C2RustUnnamed_19 = 34;
pub const OBJECT_BL: C2RustUnnamed_19 = 33;
pub const OBJECT_TORCH2: C2RustUnnamed_19 = 32;
pub const OBJECT_DODOJR: C2RustUnnamed_19 = 31;
pub const OBJECT_GOL: C2RustUnnamed_19 = 30;
pub const OBJECT_ZL1: C2RustUnnamed_19 = 29;
pub const OBJECT_GOMA: C2RustUnnamed_19 = 28;
pub const OBJECT_ZF: C2RustUnnamed_19 = 27;
pub const OBJECT_HORSE: C2RustUnnamed_19 = 26;
pub const OBJECT_KINGDODONGO: C2RustUnnamed_19 = 25;
pub const OBJECT_PEEHAT: C2RustUnnamed_19 = 24;
pub const OBJECT_REEBA: C2RustUnnamed_19 = 23;
pub const OBJECT_TITE: C2RustUnnamed_19 = 22;
pub const OBJECT_LINK_CHILD: C2RustUnnamed_19 = 21;
pub const OBJECT_LINK_BOY: C2RustUnnamed_19 = 20;
pub const OBJECT_NIW: C2RustUnnamed_19 = 19;
pub const OBJECT_BUBBLE: C2RustUnnamed_19 = 18;
pub const OBJECT_UNSET_11: C2RustUnnamed_19 = 17;
pub const OBJECT_UNSET_10: C2RustUnnamed_19 = 16;
pub const OBJECT_FIRE: C2RustUnnamed_19 = 15;
pub const OBJECT_BOX: C2RustUnnamed_19 = 14;
pub const OBJECT_FIREFLY: C2RustUnnamed_19 = 13;
pub const OBJECT_DODONGO: C2RustUnnamed_19 = 12;
pub const OBJECT_WALLMASTER: C2RustUnnamed_19 = 11;
pub const OBJECT_DY_OBJ: C2RustUnnamed_19 = 10;
pub const OBJECT_POH: C2RustUnnamed_19 = 9;
pub const OBJECT_CROW: C2RustUnnamed_19 = 8;
pub const OBJECT_OKUTA: C2RustUnnamed_19 = 7;
pub const OBJECT_HUMAN: C2RustUnnamed_19 = 6;
pub const OBJECT_UNSET_5: C2RustUnnamed_19 = 5;
pub const OBJECT_UNSET_4: C2RustUnnamed_19 = 4;
pub const OBJECT_GAMEPLAY_DANGEON_KEEP: C2RustUnnamed_19 = 3;
pub const OBJECT_GAMEPLAY_FIELD_KEEP: C2RustUnnamed_19 = 2;
pub const OBJECT_GAMEPLAY_KEEP: C2RustUnnamed_19 = 1;
pub const OBJECT_INVALID: C2RustUnnamed_19 = 0;
pub type C2RustUnnamed_20 = libc::c_uint;
pub const SCENE_ID_MAX: C2RustUnnamed_20 = 110;
pub const SCENE_TESTROOM: C2RustUnnamed_20 = 109;
pub const SCENE_SASATEST: C2RustUnnamed_20 = 108;
pub const SCENE_HAIRAL_NIWA2: C2RustUnnamed_20 = 107;
pub const SCENE_SUTARU: C2RustUnnamed_20 = 106;
pub const SCENE_SYOTES2: C2RustUnnamed_20 = 105;
pub const SCENE_SYOTES: C2RustUnnamed_20 = 104;
pub const SCENE_DEPTH_TEST: C2RustUnnamed_20 = 103;
pub const SCENE_BESITU: C2RustUnnamed_20 = 102;
pub const SCENE_TEST01: C2RustUnnamed_20 = 101;
pub const SCENE_GANON_TOU: C2RustUnnamed_20 = 100;
pub const SCENE_SPOT20: C2RustUnnamed_20 = 99;
pub const SCENE_SPOT18: C2RustUnnamed_20 = 98;
pub const SCENE_SPOT17: C2RustUnnamed_20 = 97;
pub const SCENE_SPOT16: C2RustUnnamed_20 = 96;
pub const SCENE_SPOT15: C2RustUnnamed_20 = 95;
pub const SCENE_SPOT13: C2RustUnnamed_20 = 94;
pub const SCENE_SPOT12: C2RustUnnamed_20 = 93;
pub const SCENE_SPOT11: C2RustUnnamed_20 = 92;
pub const SCENE_SPOT10: C2RustUnnamed_20 = 91;
pub const SCENE_SPOT09: C2RustUnnamed_20 = 90;
pub const SCENE_SPOT08: C2RustUnnamed_20 = 89;
pub const SCENE_SPOT07: C2RustUnnamed_20 = 88;
pub const SCENE_SPOT06: C2RustUnnamed_20 = 87;
pub const SCENE_SPOT05: C2RustUnnamed_20 = 86;
pub const SCENE_SPOT04: C2RustUnnamed_20 = 85;
pub const SCENE_SPOT03: C2RustUnnamed_20 = 84;
pub const SCENE_SPOT02: C2RustUnnamed_20 = 83;
pub const SCENE_SPOT01: C2RustUnnamed_20 = 82;
pub const SCENE_SPOT00: C2RustUnnamed_20 = 81;
pub const SCENE_KINSUTA: C2RustUnnamed_20 = 80;
pub const SCENE_GANON_DEMO: C2RustUnnamed_20 = 79;
pub const SCENE_MAHOUYA: C2RustUnnamed_20 = 78;
pub const SCENE_MIHARIGOYA: C2RustUnnamed_20 = 77;
pub const SCENE_SOUKO: C2RustUnnamed_20 = 76;
pub const SCENE_BOWLING: C2RustUnnamed_20 = 75;
pub const SCENE_NAKANIWA: C2RustUnnamed_20 = 74;
pub const SCENE_TURIBORI: C2RustUnnamed_20 = 73;
pub const SCENE_HAKASITARELAY: C2RustUnnamed_20 = 72;
pub const SCENE_HIRAL_DEMO: C2RustUnnamed_20 = 71;
pub const SCENE_HAIRAL_NIWA_N: C2RustUnnamed_20 = 70;
pub const SCENE_HAIRAL_NIWA: C2RustUnnamed_20 = 69;
pub const SCENE_KENJYANOMA: C2RustUnnamed_20 = 68;
pub const SCENE_TOKINOMA: C2RustUnnamed_20 = 67;
pub const SCENE_SYATEKIJYOU: C2RustUnnamed_20 = 66;
pub const SCENE_HAKAANA_OUKE: C2RustUnnamed_20 = 65;
pub const SCENE_HAKAANA2: C2RustUnnamed_20 = 64;
pub const SCENE_HAKAANA: C2RustUnnamed_20 = 63;
pub const SCENE_KAKUSIANA: C2RustUnnamed_20 = 62;
pub const SCENE_YOUSEI_IZUMI_YOKO: C2RustUnnamed_20 = 61;
pub const SCENE_YOUSEI_IZUMI_TATE: C2RustUnnamed_20 = 60;
pub const SCENE_DAIYOUSEI_IZUMI: C2RustUnnamed_20 = 59;
pub const SCENE_HUT: C2RustUnnamed_20 = 58;
pub const SCENE_TENT: C2RustUnnamed_20 = 57;
pub const SCENE_HYLIA_LABO: C2RustUnnamed_20 = 56;
pub const SCENE_LABO: C2RustUnnamed_20 = 55;
pub const SCENE_MALON_STABLE: C2RustUnnamed_20 = 54;
pub const SCENE_IMPA: C2RustUnnamed_20 = 53;
pub const SCENE_LINK_HOME: C2RustUnnamed_20 = 52;
pub const SCENE_FACE_SHOP: C2RustUnnamed_20 = 51;
pub const SCENE_NIGHT_SHOP: C2RustUnnamed_20 = 50;
pub const SCENE_ALLEY_SHOP: C2RustUnnamed_20 = 49;
pub const SCENE_DRAG: C2RustUnnamed_20 = 48;
pub const SCENE_ZOORA: C2RustUnnamed_20 = 47;
pub const SCENE_GOLON: C2RustUnnamed_20 = 46;
pub const SCENE_KOKIRI_SHOP: C2RustUnnamed_20 = 45;
pub const SCENE_SHOP1: C2RustUnnamed_20 = 44;
pub const SCENE_KAKARIKO3: C2RustUnnamed_20 = 43;
pub const SCENE_KAKARIKO: C2RustUnnamed_20 = 42;
pub const SCENE_KOKIRI_HOME5: C2RustUnnamed_20 = 41;
pub const SCENE_KOKIRI_HOME4: C2RustUnnamed_20 = 40;
pub const SCENE_KOKIRI_HOME3: C2RustUnnamed_20 = 39;
pub const SCENE_KOKIRI_HOME: C2RustUnnamed_20 = 38;
pub const SCENE_SHRINE_R: C2RustUnnamed_20 = 37;
pub const SCENE_SHRINE_N: C2RustUnnamed_20 = 36;
pub const SCENE_SHRINE: C2RustUnnamed_20 = 35;
pub const SCENE_MARKET_RUINS: C2RustUnnamed_20 = 34;
pub const SCENE_MARKET_NIGHT: C2RustUnnamed_20 = 33;
pub const SCENE_MARKET_DAY: C2RustUnnamed_20 = 32;
pub const SCENE_MARKET_ALLEY_N: C2RustUnnamed_20 = 31;
pub const SCENE_MARKET_ALLEY: C2RustUnnamed_20 = 30;
pub const SCENE_ENRUI: C2RustUnnamed_20 = 29;
pub const SCENE_ENTRA_N: C2RustUnnamed_20 = 28;
pub const SCENE_ENTRA: C2RustUnnamed_20 = 27;
pub const SCENE_GANON_FINAL: C2RustUnnamed_20 = 26;
pub const SCENE_GANON_BOSS: C2RustUnnamed_20 = 25;
pub const SCENE_HAKADAN_BS: C2RustUnnamed_20 = 24;
pub const SCENE_JYASINBOSS: C2RustUnnamed_20 = 23;
pub const SCENE_MIZUSIN_BS: C2RustUnnamed_20 = 22;
pub const SCENE_FIRE_BS: C2RustUnnamed_20 = 21;
pub const SCENE_MORIBOSSROOM: C2RustUnnamed_20 = 20;
pub const SCENE_BDAN_BOSS: C2RustUnnamed_20 = 19;
pub const SCENE_DDAN_BOSS: C2RustUnnamed_20 = 18;
pub const SCENE_YDAN_BOSS: C2RustUnnamed_20 = 17;
pub const SCENE_TAKARAYA: C2RustUnnamed_20 = 16;
pub const SCENE_GANONTIKA_SONOGO: C2RustUnnamed_20 = 15;
pub const SCENE_GANON_SONOGO: C2RustUnnamed_20 = 14;
pub const SCENE_GANONTIKA: C2RustUnnamed_20 = 13;
pub const SCENE_GERUDOWAY: C2RustUnnamed_20 = 12;
pub const SCENE_MEN: C2RustUnnamed_20 = 11;
pub const SCENE_GANON: C2RustUnnamed_20 = 10;
pub const SCENE_ICE_DOUKUTO: C2RustUnnamed_20 = 9;
pub const SCENE_HAKADANCH: C2RustUnnamed_20 = 8;
pub const SCENE_HAKADAN: C2RustUnnamed_20 = 7;
pub const SCENE_JYASINZOU: C2RustUnnamed_20 = 6;
pub const SCENE_MIZUSIN: C2RustUnnamed_20 = 5;
pub const SCENE_HIDAN: C2RustUnnamed_20 = 4;
pub const SCENE_BMORI1: C2RustUnnamed_20 = 3;
pub const SCENE_BDAN: C2RustUnnamed_20 = 2;
pub const SCENE_DDAN: C2RustUnnamed_20 = 1;
pub const SCENE_YDAN: C2RustUnnamed_20 = 0;
pub type C2RustUnnamed_21 = libc::c_uint;
pub const SEQ_PLAYER_BGM_SUB: C2RustUnnamed_21 = 3;
pub const SEQ_PLAYER_SFX: C2RustUnnamed_21 = 2;
pub const SEQ_PLAYER_FANFARE: C2RustUnnamed_21 = 1;
pub const SEQ_PLAYER_BGM_MAIN: C2RustUnnamed_21 = 0;
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct InitChainEntry {
    #[bitfield(name = "cont", ty = "u32_0", bits = "0..=0")]
    #[bitfield(name = "type_0", ty = "u32_0", bits = "1..=4")]
    #[bitfield(name = "offset", ty = "u32_0", bits = "5..=15")]
    #[bitfield(name = "value", ty = "s32", bits = "16..=31")]
    pub cont_type_0_offset_value: [u8; 4],
}
pub type C2RustUnnamed_22 = libc::c_uint;
pub const ICHAINTYPE_VEC3S: C2RustUnnamed_22 = 10;
pub const ICHAINTYPE_VEC3F_DIV1000: C2RustUnnamed_22 = 9;
pub const ICHAINTYPE_VEC3F: C2RustUnnamed_22 = 8;
pub const ICHAINTYPE_F32_DIV1000: C2RustUnnamed_22 = 7;
pub const ICHAINTYPE_F32: C2RustUnnamed_22 = 6;
pub const ICHAINTYPE_S32: C2RustUnnamed_22 = 5;
pub const ICHAINTYPE_U32: C2RustUnnamed_22 = 4;
pub const ICHAINTYPE_S16: C2RustUnnamed_22 = 3;
pub const ICHAINTYPE_U16: C2RustUnnamed_22 = 2;
pub const ICHAINTYPE_S8: C2RustUnnamed_22 = 1;
pub const ICHAINTYPE_U8: C2RustUnnamed_22 = 0;
pub type C2RustUnnamed_23 = libc::c_uint;
pub const TEXT_STATE_AWAITING_NEXT: C2RustUnnamed_23 = 10;
pub const TEXT_STATE_9: C2RustUnnamed_23 = 9;
pub const TEXT_STATE_8: C2RustUnnamed_23 = 8;
pub const TEXT_STATE_SONG_DEMO_DONE: C2RustUnnamed_23 = 7;
pub const TEXT_STATE_DONE: C2RustUnnamed_23 = 6;
pub const TEXT_STATE_EVENT: C2RustUnnamed_23 = 5;
pub const TEXT_STATE_CHOICE: C2RustUnnamed_23 = 4;
pub const TEXT_STATE_DONE_FADING: C2RustUnnamed_23 = 3;
pub const TEXT_STATE_CLOSING: C2RustUnnamed_23 = 2;
pub const TEXT_STATE_DONE_HAS_NEXT: C2RustUnnamed_23 = 1;
pub const TEXT_STATE_NONE: C2RustUnnamed_23 = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct struct_80034A14_arg1 {
    pub unk_00: s16,
    pub unk_02: s16,
    pub unk_04: s16,
    pub unk_06: s16,
    pub unk_08: Vec3s,
    pub unk_0E: Vec3s,
    pub unk_14: f32_0,
    pub unk_18: Vec3f,
    pub unk_24: s16,
}
pub type C2RustUnnamed_24 = libc::c_uint;
pub const MTXMODE_APPLY: C2RustUnnamed_24 = 1;
pub const MTXMODE_NEW: C2RustUnnamed_24 = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct BossGanon {
    pub actor: Actor,
    pub animBankIndex: s32,
    pub skelAnime: SkelAnime,
    pub actionFunc: BossGanonActionFunc,
    pub unk_198: u8_0,
    pub legSwayEnabled: u8_0,
    pub unk_19A: u8_0,
    pub unk_19C: s16,
    pub unk_19E: u8_0,
    pub unk_19F: u8_0,
    pub envLightMode: s8,
    pub unk_1A2: s16,
    pub unk_1A4: s16,
    pub unk_1A6: s16,
    pub unk_1A8: s16,
    pub unk_1AA: s16,
    pub unk_1AC: s16,
    pub triforceType: s16,
    pub unk_1B0: [libc::c_char; 6],
    pub timers: [s16; 5],
    pub startVolley: u8_0,
    pub unk_1C2: s16,
    pub screenFlashTimer: s16,
    pub fwork: [f32_0; 10],
    pub unk_1F0: Vec3f,
    pub unk_1FC: Vec3f,
    pub unk_208: Vec3f,
    pub unk_214: Vec3f,
    pub unk_220: Vec3f,
    pub unk_22C: Vec3f,
    pub unk_238: Vec3f,
    pub unk_244: [libc::c_char; 16],
    pub handLightBallScale: f32_0,
    pub unk_258: f32_0,
    pub unk_25C: u8_0,
    pub unk_260: Vec3f,
    pub unk_26C: s16,
    pub unk_270: f32_0,
    pub unk_274: u8_0,
    pub unk_278: Vec3f,
    pub unk_284: f32_0,
    pub unk_288: f32_0,
    pub unk_28C: f32_0,
    pub unk_290: f32_0,
    pub unk_294: [f32_0; 15],
    pub unk_2D0: f32_0,
    pub unk_2D4: s16,
    pub triforcePos: Vec3f,
    pub shockGlow: u8_0,
    pub unk_2E6: s16,
    pub unk_2E8: s16,
    pub unk_2EC: [Vec3f; 18],
    pub unk_3C4: [Vec3f; 18],
    pub unk_49C: [f32_0; 18],
    pub unk_4E4: [s16; 18],
    pub unk_508: f32_0,
    pub legRot: Vec3f,
    pub unk_518: [libc::c_char; 248],
    pub collider: ColliderCylinder,
    pub unk_65C: [libc::c_char; 16],
    pub lensFlareMode: u8_0,
    pub lensFlareTimer: s16,
    pub lensFlareScale: f32_0,
    pub csTimer: u32_0,
    pub csState: s16,
    pub csCamIndex: s16,
    pub unk_67C: [libc::c_char; 4],
    pub csCamEye: Vec3f,
    pub csCamAt: Vec3f,
    pub unk_698: [libc::c_char; 12],
    pub csCamEyeMaxStep: Vec3f,
    pub csCamAtMaxStep: Vec3f,
    pub csCamTargetEye: Vec3f,
    pub unk_6C8: [libc::c_char; 12],
    pub csCamTargetAt: Vec3f,
    pub unk_6E0: [libc::c_char; 12],
    pub csCamMaxStepScale: f32_0,
    pub csCamMovementScale: f32_0,
    pub csCamFov: f32_0,
    pub unk_6F8: [libc::c_char; 12],
    pub unk_704: f32_0,
    pub unk_708: [libc::c_char; 4],
    pub unk_70C: f32_0,
    pub unk_710: f32_0,
    pub whiteFillAlpha: f32_0,
    pub organAlpha: s16,
    pub useOpenHand: u8_0,
    pub windowShatterState: u8_0,
}
pub type BossGanonActionFunc
    =
    Option<unsafe extern "C" fn(_: *mut BossGanon, _: *mut GlobalContext)
               -> ()>;
pub type C2RustUnnamed_25 = libc::c_uint;
pub const GDF_FWORK_MAX: C2RustUnnamed_25 = 10;
pub const GDF_FWORK_UNUSED_9: C2RustUnnamed_25 = 9;
pub const GDF_VORTEX_SCALE: C2RustUnnamed_25 = 8;
pub const GDF_VORTEX_ALPHA: C2RustUnnamed_25 = 7;
pub const GDF_TRIFORCE_SCALE: C2RustUnnamed_25 = 6;
pub const GDF_TRIFORCE_ENV_G: C2RustUnnamed_25 = 5;
pub const GDF_TRIFORCE_PRIM_A: C2RustUnnamed_25 = 4;
pub const GDF_TRIFORCE_PRIM_B: C2RustUnnamed_25 = 3;
pub const GDF_CENTER_POS: C2RustUnnamed_25 = 2;
pub const GDF_FWORK_1: C2RustUnnamed_25 = 1;
pub const GDF_FWORK_0: C2RustUnnamed_25 = 0;
pub type C2RustUnnamed_26 = libc::c_uint;
pub const GDF_WINDOW_SHATTER_FULL: C2RustUnnamed_26 = 2;
pub const GDF_WINDOW_SHATTER_PARTIAL: C2RustUnnamed_26 = 1;
pub const GDF_WINDOW_SHATTER_OFF: C2RustUnnamed_26 = 0;
pub type C2RustUnnamed_27 = libc::c_uint;
pub const GDF_SHOCK_PLAYER_PURPLE: C2RustUnnamed_27 = 2;
pub const GDF_SHOCK_PLAYER_YELLOW: C2RustUnnamed_27 = 1;
pub const GDF_SHOCK_DORF_YELLOW: C2RustUnnamed_27 = 0;
pub type C2RustUnnamed_28 = libc::c_uint;
pub const GDF_EFF_WINDOW_SHARD: C2RustUnnamed_28 = 9;
pub const GDF_EFF_BLACK_DOT: C2RustUnnamed_28 = 8;
pub const GDF_EFF_SHOCKWAVE: C2RustUnnamed_28 = 7;
pub const GDF_EFF_IMPACT_DUST_LIGHT: C2RustUnnamed_28 = 6;
pub const GDF_EFF_IMPACT_DUST_DARK: C2RustUnnamed_28 = 5;
pub const GDF_EFF_LIGHTNING: C2RustUnnamed_28 = 4;
pub const GDF_EFF_SHOCK: C2RustUnnamed_28 = 3;
pub const GDF_EFF_LIGHT_RAY: C2RustUnnamed_28 = 2;
pub const GDF_EFF_SPARKLE: C2RustUnnamed_28 = 1;
pub const GDF_EFF_NONE: C2RustUnnamed_28 = 0;
pub type C2RustUnnamed_29 = libc::c_uint;
pub const GDF_TRIFORCE_DORF: C2RustUnnamed_29 = 2;
pub const GDF_TRIFORCE_ZELDA: C2RustUnnamed_29 = 1;
pub const GDF_TRIFORCE_PLAYER: C2RustUnnamed_29 = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct EnGanonMant {
    pub actor: Actor,
    pub strands: [MantStrand; 12],
    pub minY: f32_0,
    pub backPush: f32_0,
    pub backSwayMagnitude: f32_0,
    pub sideSwayMagnitude: f32_0,
    pub attachRightArmTimer: f32_0,
    pub attachLeftArmTimer: f32_0,
    pub attachShouldersTimer: f32_0,
    pub gravity: f32_0,
    pub baseYaw: f32_0,
    pub minDist: f32_0,
    pub rightForearmPos: Vec3f,
    pub leftForearmPos: Vec3f,
    pub rightShoulderPos: Vec3f,
    pub leftShoulderPos: Vec3f,
    pub tearTimer: u8_0,
    pub updateHasRun: u8_0,
    pub frameTimer: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct MantStrand {
    pub root: Vec3f,
    pub joints: [Vec3f; 12],
    pub rotations: [Vec3f; 12],
    pub velocities: [Vec3f; 12],
    pub torn: [u8_0; 12],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct BossGanon2 {
    pub actor: Actor,
    pub skelAnime: SkelAnime,
    pub actionFunc: BossGanon2ActionFunc,
    pub unk_194: f32_0,
    pub unk_198: f32_0,
    pub unk_19C: s16,
    pub unk_19E: [libc::c_char; 4],
    pub unk_1A2: [s16; 5],
    pub unk_1AC: s16,
    pub unk_1B0: f32_0,
    pub unk_1B4: f32_0,
    pub unk_1B8: Vec3f,
    pub unk_1C4: Vec3f,
    pub unk_1D0: Vec3f,
    pub unk_1DC: Vec3f,
    pub unk_1E8: Vec3f,
    pub unk_1F4: Vec3f,
    pub unk_200: Vec3f,
    pub unk_20C: Vec3f,
    pub unk_218: Vec3f,
    pub unk_224: f32_0,
    pub unk_228: f32_0,
    pub unk_22C: [libc::c_char; 8],
    pub unk_234: [Vec3f; 16],
    pub unk_2F4: [s16; 5],
    pub unk_2FE: [s16; 5],
    pub unk_308: [libc::c_char; 4],
    pub unk_30C: f32_0,
    pub unk_310: u8_0,
    pub unk_311: u8_0,
    pub unk_312: u8_0,
    pub unk_313: u8_0,
    pub unk_314: u8_0,
    pub unk_316: s16,
    pub unk_318: s16,
    pub unk_31A: s16,
    pub unk_31C: s16,
    pub unk_320: f32_0,
    pub unk_324: f32_0,
    pub unk_328: s16,
    pub unk_32C: f32_0,
    pub unk_330: s16,
    pub unk_332: s16,
    pub unk_334: u8_0,
    pub unk_335: u8_0,
    pub unk_336: u8_0,
    pub unk_337: u8_0,
    pub unk_338: u8_0,
    pub unk_339: s8,
    pub unk_33C: f32_0,
    pub unk_340: s16,
    pub unk_342: s16,
    pub unk_344: s16,
    pub unk_346: s16,
    pub unk_348: [s16; 5],
    pub unk_352: [s16; 5],
    pub unk_35C: f32_0,
    pub unk_360: Vec3f,
    pub unk_36C: f32_0,
    pub unk_370: Vec3f,
    pub unk_37C: f32_0,
    pub unk_380: f32_0,
    pub unk_384: f32_0,
    pub unk_388: f32_0,
    pub unk_38C: f32_0,
    pub unk_390: s16,
    pub unk_392: s16,
    pub unk_394: f32_0,
    pub unk_398: u32_0,
    pub unk_39C: s16,
    pub unk_39E: s16,
    pub unk_3A0: [libc::c_char; 4],
    pub unk_3A4: Vec3f,
    pub unk_3B0: Vec3f,
    pub unk_3BC: Vec3f,
    pub unk_3C8: [libc::c_char; 72],
    pub unk_410: Vec3f,
    pub unk_41C: f32_0,
    pub unk_420: f32_0,
    pub unk_424: ColliderJntSph,
    pub unk_444: ColliderJntSph,
    pub unk_464: [ColliderJntSphElement; 16],
    pub unk_864: [ColliderJntSphElement; 2],
}
pub type BossGanon2ActionFunc
    =
    Option<unsafe extern "C" fn(_: *mut BossGanon2, _: *mut GlobalContext)
               -> ()>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct EnZl3 {
    pub actor: Actor,
    pub skelAnime: SkelAnime,
    pub jointTable: [Vec3s; 15],
    pub morphTable: [Vec3s; 15],
    pub eyeTexIndex: s16,
    pub blinkTimer: s16,
    pub mouthTexIndex: s16,
    pub action: s32,
    pub drawConfig: s32,
    pub unk_254: [libc::c_char; 4],
    pub alpha: s32,
    pub unk_25C: [s16; 24],
    pub unk_28C: [s16; 24],
    pub unk_2BC: [s16; 24],
    pub unk_2EC: f32_0,
    pub unk_2F0: s32,
    pub unk_2F4: [libc::c_char; 4],
    pub unk_2F8: s32,
    pub unk_2FC: s32,
    pub unk_300: [libc::c_char; 8],
    pub unk_308: s32,
    pub unk_30C: *mut Path,
    pub unk_310: s32,
    pub unk_314: s32,
    pub unk_318: s32,
    pub unk_31C: Vec3f,
    pub unk_328: s32,
    pub unk_32C: Vec3f,
    pub unk_338: Vec3f,
    pub unk_344: u16_0,
    pub unk_346: u16_0,
    pub unk_348: Vec3f,
    pub unk_354: Vec3f,
    pub unk_360: f32_0,
    pub unk_364: f32_0,
    pub unk_368: f32_0,
    pub unk_36C: s32,
    pub unk_370: s32,
    pub unk_374: s32,
    pub collider: ColliderCylinder,
    pub unk_3C4: s32,
    pub unk_3C8: u8_0,
    pub unk_3CC: f32_0,
    pub unk_3D0: s16,
    pub ganon: *mut BossGanon2,
    pub unk_3D8: s32,
    pub unk_3DC: f32_0,
    pub unk_3E0: f32_0,
    pub unk_3E4: f32_0,
    pub unk_3E8: f32_0,
    pub unk_3EC: f32_0,
    pub unk_3F0: f32_0,
    pub unk_3F4: f32_0,
    pub unk_3F8: struct_80034A14_arg1,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct BgGanonOtyuka {
    pub dyna: DynaPolyActor,
    pub actionFunc: BgGanonOtyukaActionFunc,
    pub dropTimer: s16,
    pub isFalling: u8_0,
    pub unwalledSides: u8_0,
    pub visibleSides: u8_0,
    pub flashTimer: u8_0,
    pub flashState: u8_0,
    pub flashYScale: f32_0,
    pub flashPrimColorR: f32_0,
    pub flashPrimColorG: f32_0,
    pub flashPrimColorB: f32_0,
    pub flashEnvColorR: f32_0,
    pub flashEnvColorG: f32_0,
    pub flashEnvColorB: f32_0,
}
pub type BgGanonOtyukaActionFunc
    =
    Option<unsafe extern "C" fn(_: *mut BgGanonOtyuka, _: *mut GlobalContext)
               -> ()>;
pub type C2RustUnnamed_30 = libc::c_uint;
pub const BOMB_EXPLOSION: C2RustUnnamed_30 = 1;
pub const BOMB_BODY: C2RustUnnamed_30 = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GanondorfEffect {
    pub type_0: u8_0,
    pub timer: u8_0,
    pub pos: Vec3f,
    pub velocity: Vec3f,
    pub accel: Vec3f,
    pub color: Color_RGB8,
    pub alpha: s16,
    pub unk_2E: s16,
    pub unk_30: s16,
    pub scale: f32_0,
    pub unk_38: f32_0,
    pub unk_3C: f32_0,
    pub unk_40: f32_0,
    pub unk_44: f32_0,
    pub unk_48: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CutsceneCameraPosition {
    pub eye: Vec3s,
    pub at: Vec3s,
}
#[no_mangle]
pub static mut Boss_Ganon_InitVars: ActorInit =
    unsafe {
        {
            let mut init =
                ActorInit{id: ACTOR_BOSS_GANON as libc::c_int as s16,
                          category: ACTORCAT_BOSS as libc::c_int as u8_0,
                          flags:
                              ((1 as libc::c_int) << 0 as libc::c_int |
                                   (1 as libc::c_int) << 2 as libc::c_int |
                                   (1 as libc::c_int) << 4 as libc::c_int |
                                   (1 as libc::c_int) << 5 as libc::c_int) as
                                  u32_0,
                          objectId: OBJECT_GANON as libc::c_int as s16,
                          instanceSize:
                              ::std::mem::size_of::<BossGanon>() as
                                  libc::c_ulong,
                          init:
                              ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                      *mut Actor,
                                                                                  _:
                                                                                      *mut GlobalContext)
                                                                 -> ()>,
                                                      ActorFunc>(Some(BossGanon_Init
                                                                          as
                                                                          unsafe extern "C" fn(_:
                                                                                                   *mut Actor,
                                                                                               _:
                                                                                                   *mut GlobalContext)
                                                                              ->
                                                                                  ())),
                          destroy:
                              ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                      *mut Actor,
                                                                                  _:
                                                                                      *mut GlobalContext)
                                                                 -> ()>,
                                                      ActorFunc>(Some(BossGanon_Destroy
                                                                          as
                                                                          unsafe extern "C" fn(_:
                                                                                                   *mut Actor,
                                                                                               _:
                                                                                                   *mut GlobalContext)
                                                                              ->
                                                                                  ())),
                          update:
                              ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                      *mut Actor,
                                                                                  _:
                                                                                      *mut GlobalContext)
                                                                 -> ()>,
                                                      ActorFunc>(Some(BossGanon_Update
                                                                          as
                                                                          unsafe extern "C" fn(_:
                                                                                                   *mut Actor,
                                                                                               _:
                                                                                                   *mut GlobalContext)
                                                                              ->
                                                                                  ())),
                          draw:
                              ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                      *mut Actor,
                                                                                  _:
                                                                                      *mut GlobalContext)
                                                                 -> ()>,
                                                      ActorFunc>(Some(BossGanon_Draw
                                                                          as
                                                                          unsafe extern "C" fn(_:
                                                                                                   *mut Actor,
                                                                                               _:
                                                                                                   *mut GlobalContext)
                                                                              ->
                                                                                  ())),};
            init
        }
    };
static mut sDorfCylinderInit: ColliderCylinderInit =
    {
        let mut init =
            ColliderCylinderInit{base:
                                     {
                                         let mut init =
                                             ColliderInit{colType:
                                                              COLTYPE_HIT3 as
                                                                  libc::c_int
                                                                  as u8_0,
                                                          atFlags:
                                                              ((1 as
                                                                    libc::c_int)
                                                                   <<
                                                                   0 as
                                                                       libc::c_int
                                                                   |
                                                                   (1 as
                                                                        libc::c_int)
                                                                       <<
                                                                       4 as
                                                                           libc::c_int)
                                                                  as u8_0,
                                                          acFlags:
                                                              ((1 as
                                                                    libc::c_int)
                                                                   <<
                                                                   0 as
                                                                       libc::c_int
                                                                   |
                                                                   (1 as
                                                                        libc::c_int)
                                                                       <<
                                                                       3 as
                                                                           libc::c_int)
                                                                  as u8_0,
                                                          ocFlags1:
                                                              ((1 as
                                                                    libc::c_int)
                                                                   <<
                                                                   0 as
                                                                       libc::c_int
                                                                   |
                                                                   ((1 as
                                                                         libc::c_int)
                                                                        <<
                                                                        3 as
                                                                            libc::c_int
                                                                        |
                                                                        (1 as
                                                                             libc::c_int)
                                                                            <<
                                                                            4
                                                                                as
                                                                                libc::c_int
                                                                        |
                                                                        (1 as
                                                                             libc::c_int)
                                                                            <<
                                                                            5
                                                                                as
                                                                                libc::c_int))
                                                                  as u8_0,
                                                          ocFlags2:
                                                              ((1 as
                                                                    libc::c_int)
                                                                   <<
                                                                   4 as
                                                                       libc::c_int)
                                                                  as u8_0,
                                                          shape:
                                                              COLSHAPE_CYLINDER
                                                                  as
                                                                  libc::c_int
                                                                  as u8_0,};
                                         init
                                     },
                                 info:
                                     {
                                         let mut init =
                                             ColliderInfoInit{elemType:
                                                                  ELEMTYPE_UNK0
                                                                      as
                                                                      libc::c_int
                                                                      as u8_0,
                                                              toucher:
                                                                  {
                                                                      let mut init =
                                                                          ColliderTouch{dmgFlags:
                                                                                            0xffcfffff
                                                                                                as
                                                                                                libc::c_uint,
                                                                                        effect:
                                                                                            0
                                                                                                as
                                                                                                libc::c_int
                                                                                                as
                                                                                                u8_0,
                                                                                        damage:
                                                                                            0x10
                                                                                                as
                                                                                                libc::c_int
                                                                                                as
                                                                                                u8_0,};
                                                                      init
                                                                  },
                                                              bumper:
                                                                  {
                                                                      let mut init =
                                                                          ColliderBumpInit{dmgFlags:
                                                                                               0xffcffffe
                                                                                                   as
                                                                                                   libc::c_uint,
                                                                                           effect:
                                                                                               0
                                                                                                   as
                                                                                                   libc::c_int
                                                                                                   as
                                                                                                   u8_0,
                                                                                           defense:
                                                                                               0
                                                                                                   as
                                                                                                   libc::c_int
                                                                                                   as
                                                                                                   u8_0,};
                                                                      init
                                                                  },
                                                              toucherFlags:
                                                                  ((1 as
                                                                        libc::c_int)
                                                                       <<
                                                                       0 as
                                                                           libc::c_int
                                                                       |
                                                                       (0 as
                                                                            libc::c_int)
                                                                           <<
                                                                           3
                                                                               as
                                                                               libc::c_int)
                                                                      as u8_0,
                                                              bumperFlags:
                                                                  ((1 as
                                                                        libc::c_int)
                                                                       <<
                                                                       0 as
                                                                           libc::c_int
                                                                       |
                                                                       (1 as
                                                                            libc::c_int)
                                                                           <<
                                                                           2
                                                                               as
                                                                               libc::c_int)
                                                                      as u8_0,
                                                              ocElemFlags:
                                                                  ((1 as
                                                                        libc::c_int)
                                                                       <<
                                                                       0 as
                                                                           libc::c_int)
                                                                      as
                                                                      u8_0,};
                                         init
                                     },
                                 dim:
                                     {
                                         let mut init =
                                             Cylinder16{radius:
                                                            20 as libc::c_int
                                                                as s16,
                                                        height:
                                                            80 as libc::c_int
                                                                as s16,
                                                        yShift:
                                                            -(50 as
                                                                  libc::c_int)
                                                                as s16,
                                                        pos:
                                                            {
                                                                let mut init =
                                                                    Vec3s{x:
                                                                              0
                                                                                  as
                                                                                  libc::c_int
                                                                                  as
                                                                                  s16,
                                                                          y:
                                                                              0
                                                                                  as
                                                                                  libc::c_int
                                                                                  as
                                                                                  s16,
                                                                          z:
                                                                              0
                                                                                  as
                                                                                  libc::c_int
                                                                                  as
                                                                                  s16,};
                                                                init
                                                            },};
                                         init
                                     },};
        init
    };
static mut sLightBallCylinderInit: ColliderCylinderInit =
    {
        let mut init =
            ColliderCylinderInit{base:
                                     {
                                         let mut init =
                                             ColliderInit{colType:
                                                              COLTYPE_NONE as
                                                                  libc::c_int
                                                                  as u8_0,
                                                          atFlags:
                                                              ((1 as
                                                                    libc::c_int)
                                                                   <<
                                                                   0 as
                                                                       libc::c_int
                                                                   |
                                                                   (1 as
                                                                        libc::c_int)
                                                                       <<
                                                                       4 as
                                                                           libc::c_int)
                                                                  as u8_0,
                                                          acFlags:
                                                              ((1 as
                                                                    libc::c_int)
                                                                   <<
                                                                   0 as
                                                                       libc::c_int
                                                                   |
                                                                   (1 as
                                                                        libc::c_int)
                                                                       <<
                                                                       3 as
                                                                           libc::c_int)
                                                                  as u8_0,
                                                          ocFlags1:
                                                              ((1 as
                                                                    libc::c_int)
                                                                   <<
                                                                   0 as
                                                                       libc::c_int
                                                                   |
                                                                   ((1 as
                                                                         libc::c_int)
                                                                        <<
                                                                        3 as
                                                                            libc::c_int
                                                                        |
                                                                        (1 as
                                                                             libc::c_int)
                                                                            <<
                                                                            4
                                                                                as
                                                                                libc::c_int
                                                                        |
                                                                        (1 as
                                                                             libc::c_int)
                                                                            <<
                                                                            5
                                                                                as
                                                                                libc::c_int))
                                                                  as u8_0,
                                                          ocFlags2:
                                                              ((1 as
                                                                    libc::c_int)
                                                                   <<
                                                                   4 as
                                                                       libc::c_int)
                                                                  as u8_0,
                                                          shape:
                                                              COLSHAPE_CYLINDER
                                                                  as
                                                                  libc::c_int
                                                                  as u8_0,};
                                         init
                                     },
                                 info:
                                     {
                                         let mut init =
                                             ColliderInfoInit{elemType:
                                                                  ELEMTYPE_UNK6
                                                                      as
                                                                      libc::c_int
                                                                      as u8_0,
                                                              toucher:
                                                                  {
                                                                      let mut init =
                                                                          ColliderTouch{dmgFlags:
                                                                                            0x100700
                                                                                                as
                                                                                                libc::c_int
                                                                                                as
                                                                                                u32_0,
                                                                                        effect:
                                                                                            0
                                                                                                as
                                                                                                libc::c_int
                                                                                                as
                                                                                                u8_0,
                                                                                        damage:
                                                                                            0x8
                                                                                                as
                                                                                                libc::c_int
                                                                                                as
                                                                                                u8_0,};
                                                                      init
                                                                  },
                                                              bumper:
                                                                  {
                                                                      let mut init =
                                                                          ColliderBumpInit{dmgFlags:
                                                                                               0xd900740
                                                                                                   as
                                                                                                   libc::c_int
                                                                                                   as
                                                                                                   u32_0,
                                                                                           effect:
                                                                                               0
                                                                                                   as
                                                                                                   libc::c_int
                                                                                                   as
                                                                                                   u8_0,
                                                                                           defense:
                                                                                               0
                                                                                                   as
                                                                                                   libc::c_int
                                                                                                   as
                                                                                                   u8_0,};
                                                                      init
                                                                  },
                                                              toucherFlags:
                                                                  ((1 as
                                                                        libc::c_int)
                                                                       <<
                                                                       0 as
                                                                           libc::c_int
                                                                       |
                                                                       (0 as
                                                                            libc::c_int)
                                                                           <<
                                                                           3
                                                                               as
                                                                               libc::c_int)
                                                                      as u8_0,
                                                              bumperFlags:
                                                                  ((1 as
                                                                        libc::c_int)
                                                                       <<
                                                                       0 as
                                                                           libc::c_int)
                                                                      as u8_0,
                                                              ocElemFlags:
                                                                  ((1 as
                                                                        libc::c_int)
                                                                       <<
                                                                       0 as
                                                                           libc::c_int)
                                                                      as
                                                                      u8_0,};
                                         init
                                     },
                                 dim:
                                     {
                                         let mut init =
                                             Cylinder16{radius:
                                                            20 as libc::c_int
                                                                as s16,
                                                        height:
                                                            30 as libc::c_int
                                                                as s16,
                                                        yShift:
                                                            -(15 as
                                                                  libc::c_int)
                                                                as s16,
                                                        pos:
                                                            {
                                                                let mut init =
                                                                    Vec3s{x:
                                                                              0
                                                                                  as
                                                                                  libc::c_int
                                                                                  as
                                                                                  s16,
                                                                          y:
                                                                              0
                                                                                  as
                                                                                  libc::c_int
                                                                                  as
                                                                                  s16,
                                                                          z:
                                                                              0
                                                                                  as
                                                                                  libc::c_int
                                                                                  as
                                                                                  s16,};
                                                                init
                                                            },};
                                         init
                                     },};
        init
    };
static mut D_808E4C58: [u8_0; 18] =
    [0 as libc::c_int as u8_0, 12 as libc::c_int as u8_0,
     10 as libc::c_int as u8_0, 12 as libc::c_int as u8_0,
     14 as libc::c_int as u8_0, 16 as libc::c_int as u8_0,
     12 as libc::c_int as u8_0, 14 as libc::c_int as u8_0,
     16 as libc::c_int as u8_0, 12 as libc::c_int as u8_0,
     14 as libc::c_int as u8_0, 16 as libc::c_int as u8_0,
     12 as libc::c_int as u8_0, 14 as libc::c_int as u8_0,
     16 as libc::c_int as u8_0, 10 as libc::c_int as u8_0,
     16 as libc::c_int as u8_0, 14 as libc::c_int as u8_0];
static mut sZeroVec: Vec3f =
    { let mut init = Vec3f{x: 0.0f32, y: 0.0f32, z: 0.0f32,}; init };
static mut sCape: *mut EnGanonMant =
    0 as *const EnGanonMant as *mut EnGanonMant;
static mut sSeed1: s32 = 0;
static mut sSeed2: s32 = 0;
static mut sSeed3: s32 = 0;
static mut sGanondorf: *mut BossGanon =
    0 as *const BossGanon as *mut BossGanon;
static mut sZelda: *mut EnZl3 = 0 as *const EnZl3 as *mut EnZl3;
// size = 0x4C
#[no_mangle]
pub static mut sEffectBuf: [GanondorfEffect; 200] =
    [GanondorfEffect{type_0: 0,
                     timer: 0,
                     pos: Vec3f{x: 0., y: 0., z: 0.,},
                     velocity: Vec3f{x: 0., y: 0., z: 0.,},
                     accel: Vec3f{x: 0., y: 0., z: 0.,},
                     color: Color_RGB8{r: 0, g: 0, b: 0,},
                     alpha: 0,
                     unk_2E: 0,
                     unk_30: 0,
                     scale: 0.,
                     unk_38: 0.,
                     unk_3C: 0.,
                     unk_40: 0.,
                     unk_44: 0.,
                     unk_48: 0.,}; 200];
#[no_mangle]
pub unsafe extern "C" fn BossGanonEff_SpawnWindowShard(mut globalCtx:
                                                           *mut GlobalContext,
                                                       mut pos: *mut Vec3f,
                                                       mut velocity:
                                                           *mut Vec3f,
                                                       mut scale: f32_0) {
    static mut shardColors: [Color_RGB8; 3] =
        [{
             let mut init =
                 Color_RGB8{r: 255 as libc::c_int as u8_0,
                            g: 175 as libc::c_int as u8_0,
                            b: 85 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 Color_RGB8{r: 155 as libc::c_int as u8_0,
                            g: 205 as libc::c_int as u8_0,
                            b: 155 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 Color_RGB8{r: 155 as libc::c_int as u8_0,
                            g: 125 as libc::c_int as u8_0,
                            b: 55 as libc::c_int as u8_0,};
             init
         }];
    let mut i: s16 = 0;
    let mut eff: *mut GanondorfEffect =
        (*globalCtx).specialEffects as *mut GanondorfEffect;
    let mut color: *mut Color_RGB8 = 0 as *mut Color_RGB8;
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) < 200 as libc::c_int {
        if (*eff).type_0 as libc::c_int == GDF_EFF_NONE as libc::c_int {
            (*eff).type_0 = GDF_EFF_WINDOW_SHARD as libc::c_int as u8_0;
            (*eff).pos = *pos;
            (*eff).velocity = *velocity;
            (*eff).accel = sZeroVec;
            (*eff).scale = scale;
            (*eff).accel.y = -1.5f32;
            (*eff).unk_44 = Rand_ZeroFloat(6.28f32);
            (*eff).unk_48 = Rand_ZeroFloat(6.28f32);
            color =
                &mut *shardColors.as_mut_ptr().offset((Rand_ZeroFloat as
                                                           unsafe extern "C" fn(_:
                                                                                    f32_0)
                                                               ->
                                                                   f32_0)(2.99f32)
                                                          as s16 as isize) as
                    *mut Color_RGB8;
            (*eff).color.r = (*color).r;
            (*eff).color.g = (*color).g;
            (*eff).color.b = (*color).b;
            (*eff).timer = Rand_ZeroFloat(20.0f32) as s16 as u8_0;
            break ;
        } else { i += 1; eff = eff.offset(1) }
    };
}
#[no_mangle]
pub unsafe extern "C" fn BossGanonEff_SpawnSparkle(mut globalCtx:
                                                       *mut GlobalContext,
                                                   mut pos: *mut Vec3f,
                                                   mut velocity: *mut Vec3f,
                                                   mut accel: *mut Vec3f,
                                                   mut scale: f32_0,
                                                   mut arg6: s16) {
    let mut i: s16 = 0;
    let mut eff: *mut GanondorfEffect =
        (*globalCtx).specialEffects as *mut GanondorfEffect;
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) < 150 as libc::c_int {
        if (*eff).type_0 as libc::c_int == GDF_EFF_NONE as libc::c_int {
            (*eff).type_0 = GDF_EFF_SPARKLE as libc::c_int as u8_0;
            (*eff).pos = *pos;
            (*eff).velocity = *velocity;
            (*eff).accel = *accel;
            (*eff).scale = scale / 1000.0f32;
            (*eff).unk_2E =
                (Rand_ZeroFloat(100.0f32) as s16 as libc::c_int +
                     0xc8 as libc::c_int) as s16;
            (*eff).unk_30 = arg6;
            (*eff).timer = Rand_ZeroFloat(10.0f32) as s16 as u8_0;
            break ;
        } else { i += 1; eff = eff.offset(1) }
    };
}
#[no_mangle]
pub unsafe extern "C" fn BossGanonEff_SpawnLightRay(mut globalCtx:
                                                        *mut GlobalContext,
                                                    mut pos: *mut Vec3f,
                                                    mut velocity: *mut Vec3f,
                                                    mut accel: *mut Vec3f,
                                                    mut scale: f32_0,
                                                    mut arg5: f32_0,
                                                    mut arg6: s16) {
    let mut i: s16 = 0;
    let mut eff: *mut GanondorfEffect =
        (*globalCtx).specialEffects as *mut GanondorfEffect;
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) < 150 as libc::c_int {
        if (*eff).type_0 as libc::c_int == GDF_EFF_NONE as libc::c_int {
            (*eff).type_0 = GDF_EFF_LIGHT_RAY as libc::c_int as u8_0;
            (*eff).pos = *pos;
            (*eff).velocity = *velocity;
            (*eff).accel = *accel;
            (*eff).scale = scale / 1000.0f32;
            (*eff).unk_38 = 1.0f32;
            (*eff).unk_40 = arg5;
            (*eff).unk_2E =
                (Rand_ZeroFloat(100.0f32) as s16 as libc::c_int +
                     0xc8 as libc::c_int) as s16;
            (*eff).unk_30 = arg6;
            (*eff).timer = Rand_ZeroFloat(10.0f32) as s16 as u8_0;
            (*eff).unk_48 = Math_Atan2F((*eff).velocity.z, (*eff).velocity.x);
            (*eff).unk_44 =
                -Math_Atan2F(sqrtf((*eff).velocity.x * (*eff).velocity.x +
                                       (*eff).velocity.z * (*eff).velocity.z),
                             (*eff).velocity.y);
            break ;
        } else { i += 1; eff = eff.offset(1) }
    };
}
#[no_mangle]
pub unsafe extern "C" fn BossGanonEff_SpawnShock(mut globalCtx:
                                                     *mut GlobalContext,
                                                 mut scale: f32_0,
                                                 mut shockType: s16) {
    let mut i: s16 = 0;
    let mut eff: *mut GanondorfEffect =
        (*globalCtx).specialEffects as *mut GanondorfEffect;
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) < 75 as libc::c_int {
        if (*eff).type_0 as libc::c_int == GDF_EFF_NONE as libc::c_int {
            (*eff).type_0 = GDF_EFF_SHOCK as libc::c_int as u8_0;
            (*eff).pos = sZeroVec;
            (*eff).pos.y = -2000.0f32;
            (*eff).velocity = sZeroVec;
            (*eff).accel = sZeroVec;
            (*eff).scale = scale / 1000.0f32;
            (*eff).unk_2E = shockType;
            (*eff).timer = 0 as libc::c_int as u8_0;
            break ;
        } else { i += 1; eff = eff.offset(1) }
    };
}
#[no_mangle]
pub unsafe extern "C" fn BossGanonEff_SpawnLightning(mut globalCtx:
                                                         *mut GlobalContext,
                                                     mut scale: f32_0,
                                                     mut arg2: f32_0,
                                                     mut arg3: f32_0) {
    let mut i: s16 = 0;
    let mut eff: *mut GanondorfEffect =
        (*globalCtx).specialEffects as *mut GanondorfEffect;
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) < 150 as libc::c_int {
        if (*eff).type_0 as libc::c_int == GDF_EFF_NONE as libc::c_int {
            (*eff).type_0 = GDF_EFF_LIGHTNING as libc::c_int as u8_0;
            (*eff).velocity = sZeroVec;
            (*eff).accel = sZeroVec;
            (*eff).unk_2E = 0 as libc::c_int as s16;
            (*eff).scale = scale;
            (*eff).unk_48 = arg2;
            (*eff).unk_3C = arg3;
            (*eff).timer = 0 as libc::c_int as u8_0;
            break ;
        } else { i += 1; eff = eff.offset(1) }
    };
}
#[no_mangle]
pub unsafe extern "C" fn BossGanonEff_SpawnDustDark(mut globalCtx:
                                                        *mut GlobalContext,
                                                    mut pos: *mut Vec3f,
                                                    mut scale: f32_0,
                                                    mut arg3: f32_0) {
    let mut i: s16 = 0;
    let mut eff: *mut GanondorfEffect =
        (*globalCtx).specialEffects as *mut GanondorfEffect;
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) < 150 as libc::c_int {
        if (*eff).type_0 as libc::c_int == GDF_EFF_NONE as libc::c_int {
            (*eff).type_0 = GDF_EFF_IMPACT_DUST_DARK as libc::c_int as u8_0;
            (*eff).pos = *pos;
            (*eff).velocity = sZeroVec;
            (*eff).accel = sZeroVec;
            (*eff).scale = scale;
            (*eff).unk_40 = 1.0f32;
            (*eff).unk_38 = arg3;
            (*eff).unk_30 = Rand_ZeroFloat(100.0f32) as s16;
            (*eff).alpha = 0 as libc::c_int as s16;
            (*eff).timer = (*eff).alpha as u8_0;
            (*eff).unk_2E = (*eff).timer as s16;
            break ;
        } else { i += 1; eff = eff.offset(1) }
    };
}
#[no_mangle]
pub unsafe extern "C" fn BossGanonEff_SpawnDustLight(mut globalCtx:
                                                         *mut GlobalContext,
                                                     mut pos: *mut Vec3f,
                                                     mut scale: f32_0,
                                                     mut arg3: f32_0,
                                                     mut bufIndex: s16) {
    let mut effArr: *mut GanondorfEffect =
        (*globalCtx).specialEffects as *mut GanondorfEffect;
    (*effArr.offset(bufIndex as isize)).type_0 =
        GDF_EFF_IMPACT_DUST_LIGHT as libc::c_int as u8_0;
    (*effArr.offset(bufIndex as isize)).pos = *pos;
    (*effArr.offset(bufIndex as isize)).velocity = sZeroVec;
    (*effArr.offset(bufIndex as isize)).accel = sZeroVec;
    (*effArr.offset(bufIndex as isize)).unk_40 = 1.0f32;
    (*effArr.offset(bufIndex as isize)).scale = scale;
    (*effArr.offset(bufIndex as isize)).unk_38 = arg3;
    (*effArr.offset(bufIndex as isize)).unk_30 =
        Rand_ZeroFloat(100.0f32) as s16;
    let ref mut fresh0 = (*effArr.offset(bufIndex as isize)).alpha;
    *fresh0 = 0 as libc::c_int as s16;
    let ref mut fresh1 = (*effArr.offset(bufIndex as isize)).timer;
    *fresh1 = *fresh0 as u8_0;
    (*effArr.offset(bufIndex as isize)).unk_2E = *fresh1 as s16;
}
#[no_mangle]
pub unsafe extern "C" fn BossGanonEff_SpawnShockwave(mut globalCtx:
                                                         *mut GlobalContext,
                                                     mut pos: *mut Vec3f,
                                                     mut scale: f32_0,
                                                     mut arg3: f32_0) {
    let mut i: s16 = 0;
    let mut eff: *mut GanondorfEffect =
        (*globalCtx).specialEffects as *mut GanondorfEffect;
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) < 150 as libc::c_int {
        if (*eff).type_0 as libc::c_int == GDF_EFF_NONE as libc::c_int {
            (*eff).type_0 = GDF_EFF_SHOCKWAVE as libc::c_int as u8_0;
            (*eff).pos = *pos;
            (*eff).velocity = sZeroVec;
            (*eff).accel = sZeroVec;
            (*eff).alpha = 255 as libc::c_int as s16;
            (*eff).unk_40 = 0.6f32;
            (*eff).scale = scale;
            (*eff).unk_38 = arg3;
            (*eff).unk_30 = Rand_ZeroFloat(100.0f32) as s16;
            (*eff).timer = 0 as libc::c_int as u8_0;
            (*eff).unk_2E = (*eff).timer as s16;
            break ;
        } else { i += 1; eff = eff.offset(1) }
    };
}
#[no_mangle]
pub unsafe extern "C" fn BossGanonEff_SpawnBlackDot(mut globalCtx:
                                                        *mut GlobalContext,
                                                    mut pos: *mut Vec3f,
                                                    mut scale: f32_0) {
    let mut i: s16 = 0;
    let mut eff: *mut GanondorfEffect =
        (*globalCtx).specialEffects as *mut GanondorfEffect;
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) < 150 as libc::c_int {
        if (*eff).type_0 as libc::c_int == GDF_EFF_NONE as libc::c_int {
            (*eff).type_0 = GDF_EFF_BLACK_DOT as libc::c_int as u8_0;
            (*eff).pos = *pos;
            (*eff).velocity = sZeroVec;
            (*eff).accel = sZeroVec;
            (*eff).unk_38 = 0.0f32;
            (*eff).scale = scale / 1000.0f32;
            (*eff).timer = 0 as libc::c_int as u8_0;
            (*eff).alpha = 0 as libc::c_int as s16;
            (*eff).unk_2E = 0 as libc::c_int as s16;
            break ;
        } else { i += 1; eff = eff.offset(1) }
    };
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_SetColliderPos(mut pos: *mut Vec3f,
                                                  mut collider:
                                                      *mut ColliderCylinder) {
    (*collider).dim.pos.x = (*pos).x as s16;
    (*collider).dim.pos.y = (*pos).y as s16;
    (*collider).dim.pos.z = (*pos).z as s16;
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_SetAnimationObject(mut this:
                                                          *mut BossGanon,
                                                      mut globalCtx:
                                                          *mut GlobalContext,
                                                      mut objectId: s32) {
    (*this).animBankIndex =
        Object_GetIndex(&mut (*globalCtx).objectCtx, objectId as s16);
    gSegments[6 as libc::c_int as usize] =
        ((*globalCtx).objectCtx.status[(*this).animBankIndex as usize].segment
             as *mut u8_0).offset(-(0x80000000 as libc::c_uint as isize)) as
            u32_0;
}
// Initialized in run_static_initializers
static mut sInitChain: [InitChainEntry; 4] =
    [InitChainEntry{cont_type_0_offset_value: [0; 4],}; 4];
#[no_mangle]
pub unsafe extern "C" fn BossGanon_Init(mut thisx: *mut Actor,
                                        mut globalCtx2: *mut GlobalContext) {
    let mut i: s16 = 0;
    let mut globalCtx: *mut GlobalContext = globalCtx2;
    let mut this: *mut BossGanon = thisx as *mut BossGanon;
    let mut cond: s32 = 0;
    let mut xDistFromPlayer: f32_0 = 0.;
    let mut yDistFromPlayer: f32_0 = 0.;
    let mut zDistFromPlayer: f32_0 = 0.;
    let mut player: *mut Player =
        (*globalCtx).actorCtx.actorLists[ACTORCAT_PLAYER as libc::c_int as
                                             usize].head as *mut Player;
    if ((*thisx).params as libc::c_int) < 0x64 as libc::c_int {
        Flags_SetSwitch(globalCtx, 0x14 as libc::c_int);
        (*globalCtx).specialEffects =
            sEffectBuf.as_mut_ptr() as *mut libc::c_void;
        i = 0 as libc::c_int as s16;
        while (i as libc::c_int) <
                  (::std::mem::size_of::<[GanondorfEffect; 200]>() as
                       libc::c_ulong).wrapping_div(::std::mem::size_of::<GanondorfEffect>()
                                                       as libc::c_ulong) as
                      s32 {
            sEffectBuf[i as usize].type_0 =
                GDF_EFF_NONE as libc::c_int as u8_0;
            i += 1
        }
        sGanondorf = this;
        (*thisx).colChkInfo.health = 40 as libc::c_int as u8_0;
        Actor_ProcessInitChain(thisx, sInitChain.as_mut_ptr());
        ActorShape_Init(&mut (*thisx).shape, 0 as libc::c_int as f32_0, None,
                        0 as libc::c_int as f32_0);
        Actor_SetScale(thisx, 0.01f32);
        SkelAnime_InitFlex(globalCtx, &mut (*this).skelAnime, &mut gDorfSkel,
                           0 as *mut AnimationHeader, 0 as *mut Vec3s,
                           0 as *mut Vec3s, 0 as libc::c_int);
        Collider_InitCylinder(globalCtx, &mut (*this).collider);
        Collider_SetCylinder(globalCtx, &mut (*this).collider, thisx,
                             &mut sDorfCylinderInit);
        if (*thisx).params as libc::c_int != 1 as libc::c_int {
            BossGanon_SetupIntroCutscene(this, globalCtx);
            (*this).organAlpha = 255 as libc::c_int as s16
        } else {
            cond =
                (Flags_GetSwitch(globalCtx, 0x37 as libc::c_int) != 0 &&
                     ((*globalCtx).sceneNum as libc::c_int ==
                          SCENE_GANON_DEMO as libc::c_int ||
                          (*globalCtx).sceneNum as libc::c_int ==
                              SCENE_GANON_FINAL as libc::c_int ||
                          (*globalCtx).sceneNum as libc::c_int ==
                              SCENE_GANON_SONOGO as libc::c_int ||
                          (*globalCtx).sceneNum as libc::c_int ==
                              SCENE_GANONTIKA_SONOGO as libc::c_int)) as
                    libc::c_int;
            if cond == 0 {
                BossGanon_SetupTowerCutscene(this, globalCtx);
            } else { Actor_Kill(thisx); return }
            BossGanon_SetupTowerCutscene(this, globalCtx);
        }
        sCape =
            Actor_SpawnAsChild(&mut (*globalCtx).actorCtx, thisx, globalCtx,
                               ACTOR_EN_GANON_MANT as libc::c_int as s16,
                               0.0f32, 0.0f32, 0.0f32,
                               0 as libc::c_int as s16,
                               0 as libc::c_int as s16,
                               0 as libc::c_int as s16,
                               1 as libc::c_int as s16) as *mut EnGanonMant;
        Actor_ChangeCategory(globalCtx, &mut (*globalCtx).actorCtx, thisx,
                             ACTORCAT_BOSS as libc::c_int as u8_0);
    } else {
        (*thisx).flags &=
            !((1 as libc::c_int) << 0 as libc::c_int) as libc::c_uint;
        (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] = 255.0f32;
        if (*thisx).params as libc::c_int >= 0xc8 as libc::c_int {
            if (*thisx).params as libc::c_int == 0x12c as libc::c_int {
                (*thisx).update =
                    Some(BossGanon_LightBall_Update as
                             unsafe extern "C" fn(_: *mut Actor,
                                                  _: *mut GlobalContext)
                                 -> ());
                (*thisx).draw =
                    Some(BossGanon_LightBall_Draw as
                             unsafe extern "C" fn(_: *mut Actor,
                                                  _: *mut GlobalContext)
                                 -> ());
                (*this).unk_1A8 = 2 as libc::c_int as s16
            } else if (*thisx).params as libc::c_int == 0x190 as libc::c_int {
                (*thisx).update =
                    Some(BossGanon_LightBall_Update as
                             unsafe extern "C" fn(_: *mut Actor,
                                                  _: *mut GlobalContext)
                                 -> ());
                (*thisx).draw =
                    Some(BossGanon_LightBall_Draw as
                             unsafe extern "C" fn(_: *mut Actor,
                                                  _: *mut GlobalContext)
                                 -> ());
                (*this).unk_1A8 = 1 as libc::c_int as s16
            } else if (*thisx).params as libc::c_int >= 0x104 as libc::c_int {
                // big magic light ball thrown
                (*thisx).update =
                    Some(func_808E2544 as
                             unsafe extern "C" fn(_: *mut Actor,
                                                  _: *mut GlobalContext)
                                 -> ());
                (*thisx).draw =
                    Some(func_808E324C as
                             unsafe extern "C" fn(_: *mut Actor,
                                                  _: *mut GlobalContext)
                                 -> ());
                (*this).unk_1C2 = 10 as libc::c_int as s16;
                (*this).unk_1A2 =
                    (520 as libc::c_int +
                         -((*thisx).params as libc::c_int) * 2 as libc::c_int)
                        as s16;
                i = 0 as libc::c_int as s16;
                while (i as libc::c_int) < 15 as libc::c_int {
                    (*this).unk_2EC[i as usize] = (*thisx).world.pos;
                    i += 1
                }
                (*this).timers[1 as libc::c_int as usize] =
                    3 as libc::c_int as s16;
                Collider_InitCylinder(globalCtx, &mut (*this).collider);
                Collider_SetCylinder(globalCtx, &mut (*this).collider, thisx,
                                     &mut sLightBallCylinderInit);
            } else if (*thisx).params as libc::c_int >= 0xfa as libc::c_int {
                // big magic light ball charge
                (*thisx).update =
                    Some(func_808E2544 as
                             unsafe extern "C" fn(_: *mut Actor,
                                                  _: *mut GlobalContext)
                                 -> ());
                (*thisx).draw =
                    Some(func_808E324C as
                             unsafe extern "C" fn(_: *mut Actor,
                                                  _: *mut GlobalContext)
                                 -> ());
                (*this).unk_1A2 = Rand_ZeroFloat(10000.0f32) as s16;
                i = 0 as libc::c_int as s16;
                while (i as libc::c_int) < 15 as libc::c_int {
                    (*this).unk_2EC[i as usize] = (*thisx).world.pos;
                    i += 1
                }
                (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] =
                    0 as libc::c_int as f32_0
            } else {
                (*thisx).update =
                    Some(func_808E1EB4 as
                             unsafe extern "C" fn(_: *mut Actor,
                                                  _: *mut GlobalContext)
                                 -> ());
                (*thisx).draw =
                    Some(func_808E229C as
                             unsafe extern "C" fn(_: *mut Actor,
                                                  _: *mut GlobalContext)
                                 -> ());
                (*thisx).speedXZ = 11.0f32;
                if (*thisx).params as libc::c_int == 0xc8 as libc::c_int {
                    (*this).timers[0 as libc::c_int as usize] =
                        7 as libc::c_int as s16
                } else {
                    (*this).timers[0 as libc::c_int as usize] =
                        (Rand_ZeroFloat(3.0f32) as s16 as libc::c_int +
                             3 as libc::c_int) as s16
                }
                i = 0 as libc::c_int as s16;
                while (i as libc::c_int) < 15 as libc::c_int {
                    (*this).unk_2EC[i as usize].y = 5000.0f32;
                    i += 1
                }
            }
        } else {
            // light ball (anything from 0x64 - 0xC7)
            (*thisx).update =
                Some(BossGanon_LightBall_Update as
                         unsafe extern "C" fn(_: *mut Actor,
                                              _: *mut GlobalContext) -> ());
            (*thisx).draw =
                Some(BossGanon_LightBall_Draw as
                         unsafe extern "C" fn(_: *mut Actor,
                                              _: *mut GlobalContext) -> ());
            (*thisx).speedXZ = 12.0f32;
            xDistFromPlayer =
                (*player).actor.world.pos.x - (*thisx).world.pos.x;
            yDistFromPlayer =
                (*player).actor.world.pos.y + 30.0f32 - (*thisx).world.pos.y;
            zDistFromPlayer =
                (*player).actor.world.pos.z - (*thisx).world.pos.z;
            (*thisx).world.rot.y =
                Math_Atan2S(zDistFromPlayer, xDistFromPlayer);
            (*thisx).world.rot.x =
                Math_Atan2S(sqrtf(xDistFromPlayer * xDistFromPlayer +
                                      zDistFromPlayer * zDistFromPlayer),
                            yDistFromPlayer);
            if Rand_ZeroOne() < 0 as libc::c_int as libc::c_float {
                (*thisx).world.rot.y =
                    ((*thisx).world.rot.y as libc::c_int +
                         Rand_CenteredFloat(5000.0f32) as s16 as libc::c_int)
                        as s16;
                (*thisx).world.rot.x =
                    ((*thisx).world.rot.x as libc::c_int +
                         Rand_CenteredFloat(5000.0f32) as s16 as libc::c_int)
                        as s16
            }
            (*this).timers[1 as libc::c_int as usize] =
                3 as libc::c_int as s16;
            Collider_InitCylinder(globalCtx, &mut (*this).collider);
            Collider_SetCylinder(globalCtx, &mut (*this).collider, thisx,
                                 &mut sLightBallCylinderInit);
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_Destroy(mut thisx: *mut Actor,
                                           mut globalCtx:
                                               *mut GlobalContext) {
    let mut this: *mut BossGanon = thisx as *mut BossGanon;
    if ((*this).actor.params as libc::c_int) < 0xc8 as libc::c_int ||
           (*this).actor.params as libc::c_int >= 0x104 as libc::c_int {
        Collider_DestroyCylinder(globalCtx, &mut (*this).collider);
    }
    if ((*this).actor.params as libc::c_int) < 0x64 as libc::c_int {
        SkelAnime_Free(&mut (*this).skelAnime, globalCtx);
    };
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_SetupIntroCutscene(mut this:
                                                          *mut BossGanon,
                                                      mut globalCtx:
                                                          *mut GlobalContext) {
    let mut pad: s32 = 0;
    let mut animBankIndex: s32 =
        Object_GetIndex(&mut (*globalCtx).objectCtx,
                        OBJECT_GANON_ANIME2 as libc::c_int as s16);
    if animBankIndex < 0 as libc::c_int {
        Actor_Kill(&mut (*this).actor);
        return
    }
    if Object_IsLoaded(&mut (*globalCtx).objectCtx, animBankIndex) != 0 {
        (*this).actionFunc =
            Some(BossGanon_IntroCutscene as
                     unsafe extern "C" fn(_: *mut BossGanon,
                                          _: *mut GlobalContext) -> ());
        (*this).unk_198 = 1 as libc::c_int as u8_0;
        (*this).animBankIndex = animBankIndex;
        gSegments[6 as libc::c_int as usize] =
            ((*globalCtx).objectCtx.status[animBankIndex as usize].segment as
                 *mut u8_0).offset(-(0x80000000 as libc::c_uint as isize)) as
                u32_0;
        Animation_MorphToLoop(&mut (*this).skelAnime,
                              &mut object_ganon_anime2_Anim_005FFC, 0.0f32);
    } else {
        (*this).actionFunc =
            Some(BossGanon_SetupIntroCutscene as
                     unsafe extern "C" fn(_: *mut BossGanon,
                                          _: *mut GlobalContext) -> ())
    };
}
// size = 0x12
static mut sIntroCsCameraPositions: [CutsceneCameraPosition; 13] =
    [{
         let mut init =
             CutsceneCameraPosition{eye:
                                        {
                                            let mut init =
                                                Vec3s{x:
                                                          0 as libc::c_int as
                                                              s16,
                                                      y:
                                                          40 as libc::c_int as
                                                              s16,
                                                      z:
                                                          0 as libc::c_int as
                                                              s16,};
                                            init
                                        },
                                    at:
                                        {
                                            let mut init =
                                                Vec3s{x:
                                                          0 as libc::c_int as
                                                              s16,
                                                      y:
                                                          50 as libc::c_int as
                                                              s16,
                                                      z:
                                                          430 as libc::c_int
                                                              as s16,};
                                            init
                                        },};
         init
     },
     {
         let mut init =
             CutsceneCameraPosition{eye:
                                        {
                                            let mut init =
                                                Vec3s{x:
                                                          -(20 as libc::c_int)
                                                              as s16,
                                                      y:
                                                          30 as libc::c_int as
                                                              s16,
                                                      z:
                                                          400 as libc::c_int
                                                              as s16,};
                                            init
                                        },
                                    at:
                                        {
                                            let mut init =
                                                Vec3s{x:
                                                          10 as libc::c_int as
                                                              s16,
                                                      y:
                                                          55 as libc::c_int as
                                                              s16,
                                                      z:
                                                          440 as libc::c_int
                                                              as s16,};
                                            init
                                        },};
         init
     },
     {
         let mut init =
             CutsceneCameraPosition{eye:
                                        {
                                            let mut init =
                                                Vec3s{x:
                                                          0 as libc::c_int as
                                                              s16,
                                                      y:
                                                          60 as libc::c_int as
                                                              s16,
                                                      z:
                                                          300 as libc::c_int
                                                              as s16,};
                                            init
                                        },
                                    at:
                                        {
                                            let mut init =
                                                Vec3s{x:
                                                          0 as libc::c_int as
                                                              s16,
                                                      y:
                                                          273 as libc::c_int
                                                              as s16,
                                                      z:
                                                          -(150 as
                                                                libc::c_int)
                                                              as s16,};
                                            init
                                        },};
         init
     },
     {
         let mut init =
             CutsceneCameraPosition{eye:
                                        {
                                            let mut init =
                                                Vec3s{x:
                                                          0 as libc::c_int as
                                                              s16,
                                                      y:
                                                          180 as libc::c_int
                                                              as s16,
                                                      z:
                                                          -(260 as
                                                                libc::c_int)
                                                              as s16,};
                                            init
                                        },
                                    at:
                                        {
                                            let mut init =
                                                Vec3s{x:
                                                          0 as libc::c_int as
                                                              s16,
                                                      y:
                                                          155 as libc::c_int
                                                              as s16,
                                                      z:
                                                          -(300 as
                                                                libc::c_int)
                                                              as s16,};
                                            init
                                        },};
         init
     },
     {
         let mut init =
             CutsceneCameraPosition{eye:
                                        {
                                            let mut init =
                                                Vec3s{x:
                                                          -(30 as libc::c_int)
                                                              as s16,
                                                      y:
                                                          60 as libc::c_int as
                                                              s16,
                                                      z:
                                                          440 as libc::c_int
                                                              as s16,};
                                            init
                                        },
                                    at:
                                        {
                                            let mut init =
                                                Vec3s{x:
                                                          20 as libc::c_int as
                                                              s16,
                                                      y:
                                                          25 as libc::c_int as
                                                              s16,
                                                      z:
                                                          390 as libc::c_int
                                                              as s16,};
                                            init
                                        },};
         init
     },
     {
         let mut init =
             CutsceneCameraPosition{eye:
                                        {
                                            let mut init =
                                                Vec3s{x:
                                                          -(50 as libc::c_int)
                                                              as s16,
                                                      y:
                                                          140 as libc::c_int
                                                              as s16,
                                                      z:
                                                          -(360 as
                                                                libc::c_int)
                                                              as s16,};
                                            init
                                        },
                                    at:
                                        {
                                            let mut init =
                                                Vec3s{x:
                                                          50 as libc::c_int as
                                                              s16,
                                                      y:
                                                          92 as libc::c_int as
                                                              s16,
                                                      z:
                                                          -(390 as
                                                                libc::c_int)
                                                              as s16,};
                                            init
                                        },};
         init
     },
     {
         let mut init =
             CutsceneCameraPosition{eye:
                                        {
                                            let mut init =
                                                Vec3s{x:
                                                          -(10 as libc::c_int)
                                                              as s16,
                                                      y:
                                                          264 as libc::c_int
                                                              as s16,
                                                      z:
                                                          -(121 as
                                                                libc::c_int)
                                                              as s16,};
                                            init
                                        },
                                    at:
                                        {
                                            let mut init =
                                                Vec3s{x:
                                                          5 as libc::c_int as
                                                              s16,
                                                      y:
                                                          266 as libc::c_int
                                                              as s16,
                                                      z:
                                                          -(160 as
                                                                libc::c_int)
                                                              as s16,};
                                            init
                                        },};
         init
     },
     {
         let mut init =
             CutsceneCameraPosition{eye:
                                        {
                                            let mut init =
                                                Vec3s{x:
                                                          -(13 as libc::c_int)
                                                              as s16,
                                                      y:
                                                          200 as libc::c_int
                                                              as s16,
                                                      z:
                                                          -(310 as
                                                                libc::c_int)
                                                              as s16,};
                                            init
                                        },
                                    at:
                                        {
                                            let mut init =
                                                Vec3s{x:
                                                          0 as libc::c_int as
                                                              s16,
                                                      y:
                                                          125 as libc::c_int
                                                              as s16,
                                                      z:
                                                          -(410 as
                                                                libc::c_int)
                                                              as s16,};
                                            init
                                        },};
         init
     },
     {
         let mut init =
             CutsceneCameraPosition{eye:
                                        {
                                            let mut init =
                                                Vec3s{x:
                                                          0 as libc::c_int as
                                                              s16,
                                                      y:
                                                          40 as libc::c_int as
                                                              s16,
                                                      z:
                                                          -(50 as libc::c_int)
                                                              as s16,};
                                            init
                                        },
                                    at:
                                        {
                                            let mut init =
                                                Vec3s{x:
                                                          0 as libc::c_int as
                                                              s16,
                                                      y:
                                                          35 as libc::c_int as
                                                              s16,
                                                      z:
                                                          230 as libc::c_int
                                                              as s16,};
                                            init
                                        },};
         init
     },
     {
         let mut init =
             CutsceneCameraPosition{eye:
                                        {
                                            let mut init =
                                                Vec3s{x:
                                                          0 as libc::c_int as
                                                              s16,
                                                      y:
                                                          140 as libc::c_int
                                                              as s16,
                                                      z:
                                                          -(250 as
                                                                libc::c_int)
                                                              as s16,};
                                            init
                                        },
                                    at:
                                        {
                                            let mut init =
                                                Vec3s{x:
                                                          0 as libc::c_int as
                                                              s16,
                                                      y:
                                                          115 as libc::c_int
                                                              as s16,
                                                      z:
                                                          -(570 as
                                                                libc::c_int)
                                                              as s16,};
                                            init
                                        },};
         init
     },
     {
         let mut init =
             CutsceneCameraPosition{eye:
                                        {
                                            let mut init =
                                                Vec3s{x:
                                                          -(410 as
                                                                libc::c_int)
                                                              as s16,
                                                      y:
                                                          150 as libc::c_int
                                                              as s16,
                                                      z:
                                                          -(130 as
                                                                libc::c_int)
                                                              as s16,};
                                            init
                                        },
                                    at:
                                        {
                                            let mut init =
                                                Vec3s{x:
                                                          50 as libc::c_int as
                                                              s16,
                                                      y:
                                                          155 as libc::c_int
                                                              as s16,
                                                      z:
                                                          -(170 as
                                                                libc::c_int)
                                                              as s16,};
                                            init
                                        },};
         init
     },
     {
         let mut init =
             CutsceneCameraPosition{eye:
                                        {
                                            let mut init =
                                                Vec3s{x:
                                                          0 as libc::c_int as
                                                              s16,
                                                      y:
                                                          130 as libc::c_int
                                                              as s16,
                                                      z:
                                                          -(230 as
                                                                libc::c_int)
                                                              as s16,};
                                            init
                                        },
                                    at:
                                        {
                                            let mut init =
                                                Vec3s{x:
                                                          0 as libc::c_int as
                                                              s16,
                                                      y:
                                                          125 as libc::c_int
                                                              as s16,
                                                      z:
                                                          -(2000 as
                                                                libc::c_int)
                                                              as s16,};
                                            init
                                        },};
         init
     },
     {
         let mut init =
             CutsceneCameraPosition{eye:
                                        {
                                            let mut init =
                                                Vec3s{x:
                                                          -(2 as libc::c_int)
                                                              as s16,
                                                      y:
                                                          147 as libc::c_int
                                                              as s16,
                                                      z:
                                                          -(293 as
                                                                libc::c_int)
                                                              as s16,};
                                            init
                                        },
                                    at:
                                        {
                                            let mut init =
                                                Vec3s{x:
                                                          -(200 as
                                                                libc::c_int)
                                                              as s16,
                                                      y:
                                                          345 as libc::c_int
                                                              as s16,
                                                      z:
                                                          -(2000 as
                                                                libc::c_int)
                                                              as s16,};
                                            init
                                        },};
         init
     }];
#[no_mangle]
pub unsafe extern "C" fn BossGanon_SetIntroCsCamera(mut this: *mut BossGanon,
                                                    mut camPosIndex: u8_0) {
    let mut camPos: *mut CutsceneCameraPosition =
        &mut *sIntroCsCameraPositions.as_mut_ptr().offset(camPosIndex as
                                                              isize) as
            *mut CutsceneCameraPosition;
    (*this).csCamEye.x = (*camPos).eye.x as f32_0;
    (*this).csCamEye.y = (*camPos).eye.y as f32_0;
    (*this).csCamEye.z = (*camPos).eye.z as f32_0;
    (*this).csCamAt.x = (*camPos).at.x as f32_0;
    (*this).csCamAt.y = (*camPos).at.y as f32_0;
    (*this).csCamAt.z = (*camPos).at.z as f32_0;
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_IntroCutscene(mut this: *mut BossGanon,
                                                 mut globalCtx:
                                                     *mut GlobalContext) {
    let mut moveCam: u8_0 = 0 as libc::c_int as u8_0;
    let mut player: *mut Player =
        (*globalCtx).actorCtx.actorLists[ACTORCAT_PLAYER as libc::c_int as
                                             usize].head as *mut Player;
    let mut pad: s32 = 0;
    let mut sin: f32_0 = 0.;
    let mut cos: f32_0 = 0.;
    let mut mainCam: *mut Camera = 0 as *mut Camera;
    gSegments[6 as libc::c_int as usize] =
        ((*globalCtx).objectCtx.status[(*this).animBankIndex as usize].segment
             as *mut u8_0).offset(-(0x80000000 as libc::c_uint as isize)) as
            u32_0;
    (*sCape).backPush = -2.0f32;
    (*sCape).backSwayMagnitude = 0.25f32;
    (*sCape).sideSwayMagnitude = -1.0f32;
    (*sCape).minDist = 0.0f32;
    (*this).csTimer = (*this).csTimer.wrapping_add(1);
    SkelAnime_Update(&mut (*this).skelAnime);
    let mut current_block_423: u64;
    match (*this).csState as libc::c_int {
        0 => {
            (*player).actor.world.pos.x = 0.0f32;
            (*player).actor.world.pos.y = 0.0f32;
            (*player).actor.world.pos.z = 430.0f32;
            (*this).actor.world.pos.x = 0.0f32;
            (*this).actor.world.pos.y = 112.0f32;
            (*this).actor.world.pos.z = -333.0f32;
            (*this).actor.shape.yOffset = -7000.0f32;
            (*this).actor.shape.rot.y = 0 as libc::c_int as s16;
            func_80064520(globalCtx, &mut (*globalCtx).csCtx);
            func_8002DF54(globalCtx, &mut (*this).actor,
                          8 as libc::c_int as u8_0);
            (*this).csCamIndex = Gameplay_CreateSubCamera(globalCtx);
            Gameplay_ChangeCameraStatus(globalCtx, 0 as libc::c_int as s16,
                                        1 as libc::c_int as s16);
            Gameplay_ChangeCameraStatus(globalCtx, (*this).csCamIndex,
                                        7 as libc::c_int as s16);
            (*this).csCamFov = 60.0f32;
            if gSaveContext.eventChkInf[7 as libc::c_int as usize] as
                   libc::c_int & 0x100 as libc::c_int != 0 {
                // watched cutscene already, skip most of it
                (*this).csState = 17 as libc::c_int as s16;
                (*this).csTimer = 0 as libc::c_int as u32_0;
                (*player).actor.world.pos.z = 20.0f32;
                (*this).useOpenHand = 0 as libc::c_int as u8_0;
                Animation_MorphToLoop(&mut (*this).skelAnime,
                                      &mut object_ganon_anime2_Anim_0089F8,
                                      -5.0f32);
                (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] =
                    1000.0f32;
                BossGanon_SetIntroCsCamera(this, 11 as libc::c_int as u8_0);
                (*this).unk_198 = 2 as libc::c_int as u8_0;
                (*this).timers[2 as libc::c_int as usize] =
                    110 as libc::c_int as s16;
                gSaveContext.healthAccumulator = 0x140 as libc::c_int as s16;
                Audio_QueueSeqCmd(0x100000ff as libc::c_int as u32_0);
            } else {
                (*this).useOpenHand = 1 as libc::c_int as u8_0;
                BossGanon_SetIntroCsCamera(this, 0 as libc::c_int as u8_0);
                (*this).csState = 1 as libc::c_int as s16;
                sZelda =
                    Actor_SpawnAsChild(&mut (*globalCtx).actorCtx,
                                       &mut (*this).actor, globalCtx,
                                       ACTOR_EN_ZL3 as libc::c_int as s16,
                                       0.0f32, 220.0f32, -150.0f32,
                                       0 as libc::c_int as s16,
                                       0 as libc::c_int as s16,
                                       0 as libc::c_int as s16,
                                       0x2000 as libc::c_int as s16) as
                        *mut EnZl3
            }
            Actor_SpawnAsChild(&mut (*globalCtx).actorCtx, &mut (*this).actor,
                               globalCtx,
                               ACTOR_EN_GANON_ORGAN as libc::c_int as s16,
                               0.0f32, 0.0f32, 0.0f32,
                               0 as libc::c_int as s16,
                               0 as libc::c_int as s16,
                               0 as libc::c_int as s16,
                               1 as libc::c_int as s16);
            (*sCape).minY = 57.0f32;
            current_block_423 = 16806826537452931826;
        }
        1 => { current_block_423 = 16806826537452931826; }
        2 => {
            BossGanon_SetIntroCsCamera(this, 1 as libc::c_int as u8_0);
            if (*this).csTimer == 10 as libc::c_int as libc::c_uint {
                func_8002DF54(globalCtx, &mut (*this).actor,
                              5 as libc::c_int as u8_0);
            }
            if (*this).csTimer == 13 as libc::c_int as libc::c_uint {
                func_8002F7DC(&mut (*player).actor,
                              ((*(*player).ageProperties).unk_92 as
                                   libc::c_int + 0x6816 as libc::c_int) as
                                  u16_0);
            }
            if (*this).csTimer != 35 as libc::c_int as libc::c_uint {
                current_block_423 = 13307745568682769394;
            } else {
                (*this).csState = 3 as libc::c_int as s16;
                (*this).csTimer = 0 as libc::c_int as u32_0;
                (*this).csCamEye.x = 0.0f32;
                (*this).csCamEye.y = 60.0f32;
                (*this).csCamEye.z = 300.0f32;
                (*this).csCamAt.x = 0.0f32;
                (*this).unk_704 = 1.2566371f32;
                current_block_423 = 5598160855705335537;
            }
        }
        3 => { current_block_423 = 5598160855705335537; }
        4 => { current_block_423 = 309754945583339090; }
        5 => {
            (*this).envLightMode = 5 as libc::c_int as s8;
            if (*this).csTimer < 50 as libc::c_int as libc::c_uint {
                (*globalCtx).envCtx.unk_D8 = 1.0f32
            }
            if (*this).csTimer == 10 as libc::c_int as libc::c_uint {
                func_8002DF54(globalCtx, &mut (*this).actor,
                              0x4b as libc::c_int as u8_0);
            }
            if (*this).csTimer == 70 as libc::c_int as libc::c_uint {
                BossGanon_SetIntroCsCamera(this, 3 as libc::c_int as u8_0);
                (*this).csState = 6 as libc::c_int as s16;
                (*this).csTimer = 0 as libc::c_int as u32_0;
                (*this).envLightMode = 3 as libc::c_int as s8
            }
            current_block_423 = 13307745568682769394;
        }
        6 => {
            (*this).envLightMode = 3 as libc::c_int as s8;
            if (*this).csTimer != 30 as libc::c_int as libc::c_uint {
                current_block_423 = 13307745568682769394;
            } else {
                (*this).csState = 7 as libc::c_int as s16;
                (*this).csTimer = 0 as libc::c_int as u32_0;
                BossGanon_SetIntroCsCamera(this, 4 as libc::c_int as u8_0);
                (*this).triforceType =
                    GDF_TRIFORCE_PLAYER as libc::c_int as s16;
                (*this).fwork[GDF_TRIFORCE_SCALE as libc::c_int as usize] =
                    10.0f32;
                (*this).fwork[GDF_TRIFORCE_PRIM_A as libc::c_int as usize] =
                    0.0f32;
                (*this).fwork[GDF_TRIFORCE_PRIM_B as libc::c_int as usize] =
                    255.0f32;
                (*this).fwork[GDF_TRIFORCE_ENV_G as libc::c_int as usize] =
                    100.0f32;
                func_80078884(0x28c1 as libc::c_int as u16_0);
                (*globalCtx).envCtx.unk_D8 = 0.0f32;
                current_block_423 = 2368136515623672291;
            }
        }
        7 => { current_block_423 = 2368136515623672291; }
        8 => {
            (*this).envLightMode = 3 as libc::c_int as s8;
            BossGanon_SetIntroCsCamera(this, 5 as libc::c_int as u8_0);
            if (*this).csTimer != 30 as libc::c_int as libc::c_uint {
                current_block_423 = 13307745568682769394;
            } else {
                (*this).csState = 9 as libc::c_int as s16;
                (*this).csTimer = 0 as libc::c_int as u32_0;
                func_8002DF54(globalCtx, &mut (*this).actor,
                              8 as libc::c_int as u8_0);
                (*sZelda).unk_3C8 = 0 as libc::c_int as u8_0;
                (*this).triforceType =
                    GDF_TRIFORCE_ZELDA as libc::c_int as s16;
                (*this).fwork[GDF_TRIFORCE_SCALE as libc::c_int as usize] =
                    10.0f32;
                (*this).fwork[GDF_TRIFORCE_PRIM_A as libc::c_int as usize] =
                    0.0f32;
                (*this).fwork[GDF_TRIFORCE_PRIM_B as libc::c_int as usize] =
                    255.0f32;
                (*this).fwork[GDF_TRIFORCE_ENV_G as libc::c_int as usize] =
                    100.0f32;
                func_80078884(0x28c1 as libc::c_int as u16_0);
                (*globalCtx).envCtx.unk_D8 = 0.0f32;
                current_block_423 = 4921939709218448224;
            }
        }
        9 => { current_block_423 = 4921939709218448224; }
        10 => {
            // top view of playing the organ
            (*this).envLightMode = 3 as libc::c_int as s8;
            BossGanon_SetIntroCsCamera(this, 7 as libc::c_int as u8_0);
            if (*this).csTimer == 40 as libc::c_int as libc::c_uint {
                (*this).csState = 11 as libc::c_int as s16;
                (*this).csTimer = 0 as libc::c_int as u32_0;
                (*this).fwork[GDF_TRIFORCE_PRIM_A as libc::c_int as usize] =
                    0.0f32
            }
            current_block_423 = 13307745568682769394;
        }
        11 => {
            // link is healed
            (*this).envLightMode = 3 as libc::c_int as s8;
            BossGanon_SetIntroCsCamera(this, 8 as libc::c_int as u8_0);
            (*player).actor.world.pos.z = 20.0f32;
            if (*this).csTimer == 20 as libc::c_int as libc::c_uint {
                func_8002DF54(globalCtx, &mut (*this).actor,
                              0x17 as libc::c_int as u8_0);
                Interface_ChangeAlpha(11 as libc::c_int as u16_0);
                // show hearts only
            }
            if (*this).csTimer == 25 as libc::c_int as libc::c_uint {
                gSaveContext.healthAccumulator = 0x140 as libc::c_int as s16
            }
            if (*this).csTimer == 100 as libc::c_int as libc::c_uint {
                Interface_ChangeAlpha(1 as libc::c_int as u16_0);
            }
            if (*this).csTimer == 120 as libc::c_int as libc::c_uint {
                (*this).csState = 12 as libc::c_int as s16;
                (*this).csTimer = 0 as libc::c_int as u32_0
            }
            current_block_423 = 13307745568682769394;
        }
        12 => {
            // first dialogue, ganondorf facing away from link
            (*this).envLightMode = 3 as libc::c_int as s8;
            BossGanon_SetIntroCsCamera(this, 9 as libc::c_int as u8_0);
            if (*this).csTimer == 30 as libc::c_int as libc::c_uint {
                Audio_QueueSeqCmd(0x100100ff as libc::c_int as u32_0);
                (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] =
                    Animation_GetLastFrame(&mut object_ganon_anime2_Anim_004F64
                                               as *mut AnimationHeader as
                                               *mut libc::c_void) as f32_0;
                Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                          &mut object_ganon_anime2_Anim_004F64,
                                          -5.0f32);
            }
            if (*this).csTimer > 30 as libc::c_int as libc::c_uint &&
                   Animation_OnFrame(&mut (*this).skelAnime,
                                     (*this).fwork[GDF_FWORK_1 as libc::c_int
                                                       as usize]) != 0 {
                Animation_MorphToLoop(&mut (*this).skelAnime,
                                      &mut object_ganon_anime2_Anim_006AF4,
                                      0.0f32);
                (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] = 1000.0f32
            }
            if (*this).csTimer == 80 as libc::c_int as libc::c_uint {
                Message_StartTextbox(globalCtx,
                                     0x70c8 as libc::c_int as u16_0,
                                     0 as *mut Actor);
            }
            if (*this).csTimer > 180 as libc::c_int as libc::c_uint &&
                   Message_GetState(&mut (*globalCtx).msgCtx) as libc::c_int
                       == TEXT_STATE_NONE as libc::c_int {
                (*this).csState = 15 as libc::c_int as s16;
                (*this).csTimer = 0 as libc::c_int as u32_0;
                (*this).useOpenHand = 0 as libc::c_int as u8_0
            }
            current_block_423 = 13307745568682769394;
        }
        15 => {
            // side view of all 3 of them
            (*this).envLightMode = 0 as libc::c_int as s8;
            (*globalCtx).envCtx.unk_D8 = 0.0f32;
            BossGanon_SetIntroCsCamera(this, 10 as libc::c_int as u8_0);
            if (*this).csTimer == 30 as libc::c_int as libc::c_uint {
                Message_StartTextbox(globalCtx,
                                     0x70c9 as libc::c_int as u16_0,
                                     0 as *mut Actor);
            }
            if (*this).csTimer > 100 as libc::c_int as libc::c_uint &&
                   Message_GetState(&mut (*globalCtx).msgCtx) as libc::c_int
                       == TEXT_STATE_NONE as libc::c_int {
                (*this).csState = 16 as libc::c_int as s16;
                (*this).csTimer = 0 as libc::c_int as u32_0;
                BossGanon_SetIntroCsCamera(this, 11 as libc::c_int as u8_0);
                (*this).unk_198 = 2 as libc::c_int as u8_0;
                (*sZelda).unk_3C8 = 2 as libc::c_int as u8_0;
                (*this).timers[2 as libc::c_int as usize] =
                    110 as libc::c_int as s16;
                (*this).envLightMode = 3 as libc::c_int as s8
            }
            current_block_423 = 13307745568682769394;
        }
        16 => {
            (*this).envLightMode = 3 as libc::c_int as s8;
            if (*this).csTimer <= 20 as libc::c_int as libc::c_uint {
                if (*this).csTimer == 20 as libc::c_int as libc::c_uint {
                    Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                              &mut object_ganon_anime2_Anim_004304,
                                              -5.0f32);
                    (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] =
                        Animation_GetLastFrame(&mut object_ganon_anime2_Anim_004304
                                                   as *mut AnimationHeader as
                                                   *mut libc::c_void) as f32_0
                }
            } else if Animation_OnFrame(&mut (*this).skelAnime,
                                        (*this).fwork[GDF_FWORK_1 as
                                                          libc::c_int as
                                                          usize]) != 0 {
                Message_StartTextbox(globalCtx,
                                     0x70ca as libc::c_int as u16_0,
                                     0 as *mut Actor);
                Animation_MorphToLoop(&mut (*this).skelAnime,
                                      &mut object_ganon_anime2_Anim_0089F8,
                                      -5.0f32);
                (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] = 1000.0f32
            }
            if (*this).csTimer > 100 as libc::c_int as libc::c_uint &&
                   Message_GetState(&mut (*globalCtx).msgCtx) as libc::c_int
                       == TEXT_STATE_NONE as libc::c_int {
                (*this).csState = 17 as libc::c_int as s16;
                (*this).csTimer = 0 as libc::c_int as u32_0
            }
            current_block_423 = 13307745568682769394;
        }
        17 => {
            // turns around
            (*this).envLightMode = 3 as libc::c_int as s8;
            if (*this).csTimer == 20 as libc::c_int as libc::c_uint {
                Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                          &mut object_ganon_anime2_Anim_001F58,
                                          -5.0f32);
                (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] =
                    Animation_GetLastFrame(&mut object_ganon_anime2_Anim_001F58
                                               as *mut AnimationHeader as
                                               *mut libc::c_void) as f32_0
            }
            if (*this).csTimer > 10 as libc::c_int as libc::c_uint {
                if (*this).csTimer == 62 as libc::c_int as libc::c_uint {
                    (*sCape).attachRightArmTimer = 20.0f32
                }
                if (*this).csTimer == 57 as libc::c_int as libc::c_uint {
                    Audio_PlayActorSound2(&mut (*this).actor,
                                          0x28c7 as libc::c_int as u16_0);
                }
                Math_ApproachF(&mut (*this).csCamFov, 110.0f32, 0.1f32,
                               (*this).csCamMaxStepScale * 2.0f32);
                Math_ApproachF(&mut (*this).csCamEye.z, -290.0f32, 0.1f32,
                               (*this).csCamMaxStepScale * 2.4f32);
                Math_ApproachF(&mut (*this).csCamMaxStepScale, 0.75f32,
                               1.0f32, 0.05f32);
                if (*this).csTimer == 70 as libc::c_int as libc::c_uint {
                    (*this).csState = 18 as libc::c_int as s16;
                    (*this).csTimer = 0 as libc::c_int as u32_0;
                    (*this).csCamFov = 60.0f32;
                    BossGanon_SetIntroCsCamera(this,
                                               12 as libc::c_int as u8_0);
                    Message_StartTextbox(globalCtx,
                                         0x70cb as libc::c_int as u16_0,
                                         0 as *mut Actor);
                }
            }
            current_block_423 = 13307745568682769394;
        }
        18 => {
            // last dialog before triforce
            (*this).envLightMode = 3 as libc::c_int as s8;
            BossGanon_SetIntroCsCamera(this, 12 as libc::c_int as u8_0);
            (*this).csCamEye.y += -6.0f32;
            (*this).csCamEye.z += 6.0f32;
            if Animation_OnFrame(&mut (*this).skelAnime,
                                 (*this).fwork[GDF_FWORK_1 as libc::c_int as
                                                   usize] - 5.0f32) != 0 {
                Animation_MorphToLoop(&mut (*this).skelAnime,
                                      &mut object_ganon_anime2_Anim_003018,
                                      -5.0f32);
                (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] = 1000.0f32
            }
            if (*this).csTimer <= 50 as libc::c_int as libc::c_uint ||
                   Message_GetState(&mut (*globalCtx).msgCtx) as libc::c_int
                       != TEXT_STATE_NONE as libc::c_int {
                current_block_423 = 13307745568682769394;
            } else {
                (*this).csState = 19 as libc::c_int as s16;
                (*this).csTimer = 0 as libc::c_int as u32_0;
                Message_StartTextbox(globalCtx,
                                     0x70cc as libc::c_int as u16_0,
                                     0 as *mut Actor);
                Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                          &mut object_ganon_anime2_Anim_007268,
                                          -5.0f32);
                (*this).triforceType =
                    GDF_TRIFORCE_DORF as libc::c_int as s16;
                (*this).fwork[GDF_TRIFORCE_SCALE as libc::c_int as usize] =
                    10.0f32;
                (*this).fwork[GDF_TRIFORCE_PRIM_A as libc::c_int as usize] =
                    0.0f32;
                (*this).fwork[GDF_TRIFORCE_PRIM_B as libc::c_int as usize] =
                    255.0f32;
                (*this).fwork[GDF_TRIFORCE_ENV_G as libc::c_int as usize] =
                    100.0f32;
                (*globalCtx).envCtx.unk_D8 = 0.0f32;
                current_block_423 = 2661531827758810933;
            }
        }
        19 => { current_block_423 = 2661531827758810933; }
        20 => {
            // zoom cam out
            (*this).envLightMode = 10 as libc::c_int as s8;
            moveCam = 1 as libc::c_int as u8_0;
            Math_ApproachF(&mut (*this).csCamMaxStepScale, 0.15f32, 1.0f32,
                           0.015f32);
            if (*this).csTimer <= 40 as libc::c_int as libc::c_uint {
                Math_ApproachF(&mut *(*this).fwork.as_mut_ptr().offset(GDF_VORTEX_ALPHA
                                                                           as
                                                                           libc::c_int
                                                                           as
                                                                           isize),
                               255.0f32, 1.0f32, 6.5f32);
                Math_ApproachF(&mut *(*this).fwork.as_mut_ptr().offset(GDF_VORTEX_SCALE
                                                                           as
                                                                           libc::c_int
                                                                           as
                                                                           isize),
                               0.2f32, 1.0f32, 0.025f32);
            }
            if (*this).csTimer > 20 as libc::c_int as libc::c_uint {
                Audio_PlayActorSound2(&mut (*this).actor,
                                      (0x3857 as libc::c_int -
                                           0x800 as libc::c_int) as u16_0);
            }
            if (*this).csTimer > 20 as libc::c_int as libc::c_uint {
                BossGanonEff_SpawnShock(globalCtx, 700.0f32,
                                        GDF_SHOCK_PLAYER_PURPLE as libc::c_int
                                            as s16);
                BossGanonEff_SpawnShock(globalCtx, 700.0f32,
                                        GDF_SHOCK_PLAYER_PURPLE as libc::c_int
                                            as s16);
            }
            if (*this).csTimer == 30 as libc::c_int as libc::c_uint {
                func_8002DF54(globalCtx, &mut (*this).actor,
                              0x4a as libc::c_int as u8_0);
            }
            if (*this).csTimer <= 50 as libc::c_int as libc::c_uint {
                current_block_423 = 13307745568682769394;
            } else {
                (*this).csState = 21 as libc::c_int as s16;
                (*this).csTimer = 0 as libc::c_int as u32_0;
                (*this).fwork[GDF_TRIFORCE_PRIM_A as libc::c_int as usize] =
                    0.0f32;
                (*this).fwork[GDF_VORTEX_SCALE as libc::c_int as usize] =
                    0.16f32;
                current_block_423 = 16170055849579832422;
            }
        }
        21 => {
            // purple vortex
            (*this).envLightMode = 11 as libc::c_int as s8;
            Audio_PlayActorSound2(&mut (*this).actor,
                                  (0x3857 as libc::c_int -
                                       0x800 as libc::c_int) as u16_0);
            BossGanonEff_SpawnShock(globalCtx, 700.0f32,
                                    GDF_SHOCK_PLAYER_PURPLE as libc::c_int as
                                        s16);
            BossGanonEff_SpawnShock(globalCtx, 700.0f32,
                                    GDF_SHOCK_PLAYER_PURPLE as libc::c_int as
                                        s16);
            current_block_423 = 16170055849579832422;
        }
        22 => { current_block_423 = 17530391524231952302; }
        _ => { current_block_423 = 13307745568682769394; }
    }
    match current_block_423 {
        16170055849579832422 => {
            (*this).csCamEye.x = -30.0f32;
            (*this).csCamEye.y = 37.0f32;
            (*this).csCamEye.z = -30.0f32;
            (*this).csCamAt.x = -10.0f32;
            (*this).csCamAt.y = 45.0f32;
            (*this).csCamAt.z = 0.0f32;
            if (*this).csTimer == 13 as libc::c_int as libc::c_uint {
                Message_StartTextbox(globalCtx,
                                     0x70cd as libc::c_int as u16_0,
                                     0 as *mut Actor);
            }
            if (*this).csTimer <= 120 as libc::c_int as libc::c_uint ||
                   Message_GetState(&mut (*globalCtx).msgCtx) as libc::c_int
                       != TEXT_STATE_NONE as libc::c_int {
                current_block_423 = 13307745568682769394;
            } else {
                (*this).csState = 22 as libc::c_int as s16;
                (*this).csTimer = 0 as libc::c_int as u32_0;
                (*this).timers[2 as libc::c_int as usize] =
                    30 as libc::c_int as s16;
                (*this).organAlpha = 254 as libc::c_int as s16;
                (*this).csCamAt.x = (*this).unk_1FC.x - 10.0f32;
                (*this).csCamAt.y = (*this).unk_1FC.y + 30.0f32;
                (*this).csCamAt.z = (*this).unk_1FC.z;
                (*this).fwork[GDF_VORTEX_ALPHA as libc::c_int as usize] =
                    255.0f32;
                (*this).fwork[GDF_VORTEX_SCALE as libc::c_int as usize] =
                    0.2f32;
                current_block_423 = 17530391524231952302;
            }
        }
        2661531827758810933 =>
        // fallthrough
        // show triforce
        {
            (*this).envLightMode = 8 as libc::c_int as s8;
            if (*this).csTimer >= 60 as libc::c_int as libc::c_uint {
                (*this).envLightMode = 9 as libc::c_int as s8;
                if (*this).csTimer == 60 as libc::c_int as libc::c_uint {
                    (*globalCtx).envCtx.unk_D8 = 1.0f32
                }
            }
            BossGanon_SetIntroCsCamera(this, 12 as libc::c_int as u8_0);
            (*this).csCamEye.y += -6.0f32;
            (*this).csCamEye.z += 6.0f32;
            if (*this).csTimer >= 30 as libc::c_int as libc::c_uint {
                if (*this).csTimer == 30 as libc::c_int as libc::c_uint {
                    func_80078884(0x28c1 as libc::c_int as u16_0);
                }
                // fade in ganondorf's triforce
                Math_ApproachF(&mut *(*this).fwork.as_mut_ptr().offset(GDF_TRIFORCE_PRIM_A
                                                                           as
                                                                           libc::c_int
                                                                           as
                                                                           isize),
                               255.0f32, 1.0f32, 10.0f32);
                Math_ApproachF(&mut *(*this).fwork.as_mut_ptr().offset(GDF_TRIFORCE_SCALE
                                                                           as
                                                                           libc::c_int
                                                                           as
                                                                           isize),
                               0.6f32, 1.0f32, 0.3f32);
                Math_ApproachF(&mut *(*this).fwork.as_mut_ptr().offset(GDF_TRIFORCE_PRIM_B
                                                                           as
                                                                           libc::c_int
                                                                           as
                                                                           isize),
                               170.0f32, 1.0f32, 2.55f32);
                Math_ApproachF(&mut *(*this).fwork.as_mut_ptr().offset(GDF_TRIFORCE_ENV_G
                                                                           as
                                                                           libc::c_int
                                                                           as
                                                                           isize),
                               200.0f32, 1.0f32, 3.0f32);
            }
            if (*this).csTimer == 17 as libc::c_int as libc::c_uint {
                Animation_MorphToLoop(&mut (*this).skelAnime,
                                      &mut object_ganon_anime2_Anim_007A64,
                                      -5.0f32);
            }
            if (*this).csTimer > 80 as libc::c_int as libc::c_uint &&
                   Message_GetState(&mut (*globalCtx).msgCtx) as libc::c_int
                       == TEXT_STATE_NONE as libc::c_int {
                (*this).csState = 20 as libc::c_int as s16;
                (*this).csTimer = 0 as libc::c_int as u32_0;
                (*this).csCamTargetEye.x = (*this).csCamEye.x - 50.0f32;
                (*this).csCamTargetEye.y = (*this).csCamEye.y - 100.0f32;
                (*this).csCamTargetEye.z = (*this).csCamEye.z + 400.0f32;
                (*this).csCamEyeMaxStep.x = 50.0f32;
                (*this).csCamEyeMaxStep.y = 100.0f32;
                (*this).csCamEyeMaxStep.z = 400.0f32;
                (*this).csCamAtMaxStep.x = 400.0f32;
                (*this).csCamMaxStepScale = 0.0f32;
                (*this).csCamTargetAt.x = (*this).csCamAt.x + 400.0f32;
                (*this).csCamTargetAt.y = (*this).csCamAt.y;
                (*this).csCamTargetAt.z = (*this).csCamAt.z;
                (*this).csCamMovementScale = 0.2f32;
                (*this).fwork[GDF_VORTEX_ALPHA as libc::c_int as usize] =
                    0.0f32;
                (*this).fwork[GDF_VORTEX_SCALE as libc::c_int as usize] =
                    0.1f32;
                Audio_PlayActorSound2(&mut (*this).actor,
                                      0x39d5 as libc::c_int as u16_0);
            }
            current_block_423 = 13307745568682769394;
        }
        4921939709218448224 =>
        // fallthrough
        {
            (*this).envLightMode = 7 as libc::c_int as s8;
            BossGanon_SetIntroCsCamera(this, 6 as libc::c_int as u8_0);
            // fade in zeldas triforce
            Math_ApproachF(&mut *(*this).fwork.as_mut_ptr().offset(GDF_TRIFORCE_PRIM_A
                                                                       as
                                                                       libc::c_int
                                                                       as
                                                                       isize),
                           255.0f32, 1.0f32, 10.0f32);
            Math_ApproachF(&mut *(*this).fwork.as_mut_ptr().offset(GDF_TRIFORCE_SCALE
                                                                       as
                                                                       libc::c_int
                                                                       as
                                                                       isize),
                           0.4f32, 1.0f32, 0.3f32);
            Math_ApproachF(&mut *(*this).fwork.as_mut_ptr().offset(GDF_TRIFORCE_PRIM_B
                                                                       as
                                                                       libc::c_int
                                                                       as
                                                                       isize),
                           170.0f32, 1.0f32, 2.55f32);
            Math_ApproachF(&mut *(*this).fwork.as_mut_ptr().offset(GDF_TRIFORCE_ENV_G
                                                                       as
                                                                       libc::c_int
                                                                       as
                                                                       isize),
                           200.0f32, 1.0f32, 3.0f32);
            if (*this).csTimer == 30 as libc::c_int as libc::c_uint {
                (*sZelda).unk_3C8 = 1 as libc::c_int as u8_0
            }
            if (*this).csTimer >= 32 as libc::c_int as libc::c_uint {
                (*this).envLightMode = 75 as libc::c_int as s8
            }
            if (*this).csTimer == 32 as libc::c_int as libc::c_uint {
                (*globalCtx).envCtx.unk_D8 = 1.0f32
            }
            if (*this).csTimer == 50 as libc::c_int as libc::c_uint {
                (*this).csState = 10 as libc::c_int as s16;
                (*this).csTimer = 0 as libc::c_int as u32_0
            }
            current_block_423 = 13307745568682769394;
        }
        2368136515623672291 =>
        // fallthrough
        {
            (*this).envLightMode = 6 as libc::c_int as s8;
            // fade in links triforce
            Math_ApproachF(&mut *(*this).fwork.as_mut_ptr().offset(GDF_TRIFORCE_PRIM_A
                                                                       as
                                                                       libc::c_int
                                                                       as
                                                                       isize),
                           255.0f32, 1.0f32, 10.0f32);
            Math_ApproachF(&mut *(*this).fwork.as_mut_ptr().offset(GDF_TRIFORCE_SCALE
                                                                       as
                                                                       libc::c_int
                                                                       as
                                                                       isize),
                           0.4f32, 1.0f32, 0.3f32);
            Math_ApproachF(&mut *(*this).fwork.as_mut_ptr().offset(GDF_TRIFORCE_PRIM_B
                                                                       as
                                                                       libc::c_int
                                                                       as
                                                                       isize),
                           170.0f32, 1.0f32, 2.55f32);
            Math_ApproachF(&mut *(*this).fwork.as_mut_ptr().offset(GDF_TRIFORCE_ENV_G
                                                                       as
                                                                       libc::c_int
                                                                       as
                                                                       isize),
                           200.0f32, 1.0f32, 3.0f32);
            if (*this).csTimer >= 30 as libc::c_int as libc::c_uint {
                (*this).envLightMode = 65 as libc::c_int as s8
            }
            if (*this).csTimer == 30 as libc::c_int as libc::c_uint {
                (*globalCtx).envCtx.unk_D8 = 1.0f32
            }
            BossGanon_SetIntroCsCamera(this, 4 as libc::c_int as u8_0);
            (*this).csCamEye.x += 5.0f32;
            (*this).csCamEye.z += -10.0f32;
            (*this).csCamAt.x += 18.0f32;
            if (*this).csTimer == 60 as libc::c_int as libc::c_uint {
                (*this).csState = 8 as libc::c_int as s16;
                (*this).csTimer = 0 as libc::c_int as u32_0
            }
            current_block_423 = 13307745568682769394;
        }
        5598160855705335537 =>
        // fallthrough
        {
            (*this).envLightMode = 0 as libc::c_int as s8;
            (*globalCtx).envCtx.unk_D8 = 0.0f32;
            (*this).csCamAt.y =
                sinf((*this).unk_704) * 300.0f32 + (*this).csCamEye.y;
            (*this).csCamAt.z =
                cosf((*this).unk_704) * -300.0f32 + (*this).csCamEye.z;
            Math_ApproachF(&mut (*this).unk_704, 0.25f32, 0.05f32,
                           (*this).csCamAtMaxStep.y);
            Math_ApproachF(&mut (*this).csCamAtMaxStep.y, 0.01f32, 1.0f32,
                           0.0001f32);
            if (*this).csTimer != 200 as libc::c_int as libc::c_uint {
                current_block_423 = 13307745568682769394;
            } else {
                func_8002DF54(globalCtx, &mut (*this).actor,
                              8 as libc::c_int as u8_0);
                (*this).csState = 4 as libc::c_int as s16;
                BossGanon_SetIntroCsCamera(this, 2 as libc::c_int as u8_0);
                (*this).csTimer = 0 as libc::c_int as u32_0;
                current_block_423 = 309754945583339090;
            }
        }
        16806826537452931826 =>
        // fallthrough
        {
            (*this).envLightMode = 3 as libc::c_int as s8;
            if (*this).csTimer == 70 as libc::c_int as libc::c_uint {
                (*this).csState = 2 as libc::c_int as s16;
                (*this).csTimer = 0 as libc::c_int as u32_0
            }
            current_block_423 = 13307745568682769394;
        }
        _ => { }
    }
    match current_block_423 {
        17530391524231952302 =>
        // fallthrough
        // start floating, show title card, start fight
        {
            if (*this).csTimer > 30 as libc::c_int as libc::c_uint {
                (*this).envLightMode = 0 as libc::c_int as s8
            } else { (*this).envLightMode = 12 as libc::c_int as s8 }
            Math_ApproachZeroF(&mut *(*this).fwork.as_mut_ptr().offset(GDF_VORTEX_ALPHA
                                                                           as
                                                                           libc::c_int
                                                                           as
                                                                           isize),
                               1.0f32, 10.0f32);
            (*this).csCamEye.x = -30.0f32;
            (*this).csCamEye.y = 137.0f32;
            (*this).csCamEye.z = -110.0f32;
            Math_ApproachF(&mut (*this).csCamAt.y,
                           (*this).unk_1FC.y + 30.0f32, 0.1f32, 20.0f32);
            Math_ApproachF(&mut (*this).csCamAt.x,
                           (*this).unk_1FC.x - 10.0f32, 0.1f32, 5.0f32);
            if (*this).csTimer == 20 as libc::c_int as libc::c_uint {
                BossGanon_SetAnimationObject(this, globalCtx,
                                             OBJECT_GANON_ANIME1 as
                                                 libc::c_int);
                Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                          &mut gDorfGetUp3Anim, 0.0f32);
                SkelAnime_Update(&mut (*this).skelAnime);
                (*this).actor.shape.yOffset = 0.0f32;
                (*sCape).attachShouldersTimer = 18.0f32;
                Audio_PlayActorSound2(&mut (*this).actor,
                                      0x28c7 as libc::c_int as u16_0);
                (*this).unk_198 = 0 as libc::c_int as u8_0;
                Audio_QueueSeqCmd(((SEQ_PLAYER_BGM_MAIN as libc::c_int) <<
                                       24 as libc::c_int |
                                       0x64 as libc::c_int) as u32_0);
            }
            if (*this).csTimer == 50 as libc::c_int as libc::c_uint {
                gSegments[6 as libc::c_int as usize] =
                    ((*globalCtx).objectCtx.status[Object_GetIndex(&mut (*globalCtx).objectCtx,
                                                                   OBJECT_GANON
                                                                       as
                                                                       libc::c_int
                                                                       as s16)
                                                       as usize].segment as
                         *mut u8_0).offset(-(0x80000000 as libc::c_uint as
                                                 isize)) as u32_0;
                if gSaveContext.eventChkInf[7 as libc::c_int as usize] as
                       libc::c_int & 0x100 as libc::c_int == 0 {
                    TitleCard_InitBossName(globalCtx,
                                           &mut (*globalCtx).actorCtx.titleCtx,
                                           gSegments[((gDorfTitleCardTex.as_mut_ptr()
                                                           as u32_0) <<
                                                          4 as libc::c_int >>
                                                          28 as libc::c_int)
                                                         as
                                                         usize].wrapping_add(gDorfTitleCardTex.as_mut_ptr()
                                                                                 as
                                                                                 u32_0
                                                                                 &
                                                                                 0xffffff
                                                                                     as
                                                                                     libc::c_int
                                                                                     as
                                                                                     libc::c_uint).wrapping_add(0x80000000
                                                                                                                    as
                                                                                                                    libc::c_uint)
                                               as *mut libc::c_void,
                                           160 as libc::c_int as s16,
                                           180 as libc::c_int as s16,
                                           128 as libc::c_int as u8_0,
                                           40 as libc::c_int as u8_0);
                }
                gSaveContext.eventChkInf[7 as libc::c_int as usize] =
                    (gSaveContext.eventChkInf[7 as libc::c_int as usize] as
                         libc::c_int | 0x100 as libc::c_int) as u16_0
            }
            if (*this).csTimer >= 20 as libc::c_int as libc::c_uint {
                (*this).legSwayEnabled = 1 as libc::c_int as u8_0;
                Audio_PlayActorSound2(&mut (*this).actor,
                                      (0x3856 as libc::c_int -
                                           0x800 as libc::c_int) as u16_0);
                Math_ApproachF(&mut (*this).actor.world.pos.y, 228.0f32,
                               0.05f32, 2.0f32);
                Math_ApproachF(&mut (*this).actor.world.pos.z, -230.0f32,
                               0.05f32, 4.0f32);
                (*sCape).backPush = -3.0f32;
                (*sCape).backSwayMagnitude = 0.25f32;
                (*sCape).sideSwayMagnitude = -3.0f32;
                sin =
                    Math_SinS((*this).csTimer.wrapping_mul(1500 as libc::c_int
                                                               as
                                                               libc::c_uint)
                                  as s16);
                (*this).actor.velocity.y =
                    (*this).fwork[GDF_FWORK_0 as libc::c_int as usize] * sin *
                        0.04f32;
                (*this).actor.world.pos.y += (*this).actor.velocity.y;
                cos =
                    Math_CosS((*this).csTimer.wrapping_mul(1800 as libc::c_int
                                                               as
                                                               libc::c_uint)
                                  as s16);
                (*this).actor.world.pos.x =
                    (*this).fwork[GDF_FWORK_0 as libc::c_int as usize] * cos *
                        0.5f32;
                (*this).actor.velocity.x =
                    (*this).actor.world.pos.x - (*this).actor.prevPos.x;
                Math_ApproachF(&mut *(*this).fwork.as_mut_ptr().offset(GDF_FWORK_0
                                                                           as
                                                                           libc::c_int
                                                                           as
                                                                           isize),
                               50.0f32, 1.0f32, 1.0f32);
            }
            if (*this).csTimer > 30 as libc::c_int as libc::c_uint {
                (*this).organAlpha =
                    ((*this).organAlpha as libc::c_int - 5 as libc::c_int) as
                        s16;
                if ((*this).organAlpha as libc::c_int) < 0 as libc::c_int {
                    (*this).organAlpha = 0 as libc::c_int as s16
                }
            }
            if (*this).csTimer == 120 as libc::c_int as libc::c_uint {
                mainCam =
                    Gameplay_GetCamera(globalCtx, 0 as libc::c_int as s16);
                (*mainCam).eye = (*this).csCamEye;
                (*mainCam).eyeNext = (*this).csCamEye;
                (*mainCam).at = (*this).csCamAt;
                func_800C08AC(globalCtx, (*this).csCamIndex,
                              0 as libc::c_int as s16);
                (*this).csCamIndex = 0 as libc::c_int as s16;
                (*this).csState = (*this).csCamIndex;
                func_80064534(globalCtx, &mut (*globalCtx).csCtx);
                func_8002DF54(globalCtx, &mut (*this).actor,
                              7 as libc::c_int as u8_0);
                BossGanon_SetupWait(this, globalCtx);
            }
            if !sZelda.is_null() {
                (*sZelda).actor.world.pos.x = 0.0f32;
                (*sZelda).actor.world.pos.y = 350.0f32;
                (*sZelda).actor.world.pos.z = 0.0f32
            }
        }
        309754945583339090 =>
        // fallthrough
        {
            if (*this).csTimer == 0 as libc::c_int as libc::c_uint ||
                   (*this).csTimer == 10 as libc::c_int as libc::c_uint ||
                   (*this).csTimer == 20 as libc::c_int as libc::c_uint {
                (*this).csCamEye.y += 68.0f32;
                (*this).csCamEye.z -= 142.0f32
            }
            if (*this).csTimer >= 20 as libc::c_int as libc::c_uint {
                (*this).envLightMode = 4 as libc::c_int as s8
            } else { (*this).envLightMode = 35 as libc::c_int as s8 }
            if (*this).csTimer == 60 as libc::c_int as libc::c_uint {
                BossGanon_SetIntroCsCamera(this, 1 as libc::c_int as u8_0);
                (*this).csState = 5 as libc::c_int as s16;
                (*this).csTimer = 0 as libc::c_int as u32_0
            }
        }
        _ => { }
    }
    if (*this).csCamIndex as libc::c_int != 0 as libc::c_int {
        if moveCam != 0 {
            Math_ApproachF(&mut (*this).csCamEye.x, (*this).csCamTargetEye.x,
                           (*this).csCamMovementScale,
                           (*this).csCamEyeMaxStep.x *
                               (*this).csCamMaxStepScale);
            Math_ApproachF(&mut (*this).csCamEye.y, (*this).csCamTargetEye.y,
                           (*this).csCamMovementScale,
                           (*this).csCamEyeMaxStep.y *
                               (*this).csCamMaxStepScale);
            Math_ApproachF(&mut (*this).csCamEye.z, (*this).csCamTargetEye.z,
                           (*this).csCamMovementScale,
                           (*this).csCamEyeMaxStep.z *
                               (*this).csCamMaxStepScale);
            Math_ApproachF(&mut (*this).csCamAt.x, (*this).csCamTargetAt.x,
                           (*this).csCamMovementScale,
                           (*this).csCamAtMaxStep.x *
                               (*this).csCamMaxStepScale);
            Math_ApproachF(&mut (*this).csCamAt.y, (*this).csCamTargetAt.y,
                           (*this).csCamMovementScale,
                           (*this).csCamAtMaxStep.y *
                               (*this).csCamMaxStepScale);
            Math_ApproachF(&mut (*this).csCamAt.z, (*this).csCamTargetAt.z,
                           (*this).csCamMovementScale,
                           (*this).csCamAtMaxStep.z *
                               (*this).csCamMaxStepScale);
        }
        Gameplay_CameraSetAtEye(globalCtx, (*this).csCamIndex,
                                &mut (*this).csCamAt, &mut (*this).csCamEye);
        Gameplay_CameraSetFov(globalCtx, (*this).csCamIndex,
                              (*this).csCamFov);
    };
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_SetupDeathCutscene(mut this:
                                                          *mut BossGanon,
                                                      mut globalCtx:
                                                          *mut GlobalContext) {
    let mut pad: s32 = 0;
    let mut animBankIndex: s32 =
        Object_GetIndex(&mut (*globalCtx).objectCtx,
                        OBJECT_GANON_ANIME2 as libc::c_int as s16);
    if Object_IsLoaded(&mut (*globalCtx).objectCtx, animBankIndex) != 0 {
        (*this).actionFunc =
            Some(BossGanon_DeathAndTowerCutscene as
                     unsafe extern "C" fn(_: *mut BossGanon,
                                          _: *mut GlobalContext) -> ());
        (*this).csState = 0 as libc::c_int as s16;
        (*this).csTimer = (*this).csState as u32_0;
        (*this).unk_198 = 1 as libc::c_int as u8_0;
        (*this).animBankIndex = animBankIndex;
        gSegments[6 as libc::c_int as usize] =
            ((*globalCtx).objectCtx.status[animBankIndex as usize].segment as
                 *mut u8_0).offset(-(0x80000000 as libc::c_uint as isize)) as
                u32_0;
        Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                  &mut object_ganon_anime2_Anim_00EA00,
                                  0.0f32);
        (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] =
            Animation_GetLastFrame(&mut object_ganon_anime2_Anim_00EA00 as
                                       *mut AnimationHeader as
                                       *mut libc::c_void) as f32_0;
        (*this).unk_508 = 0.0f32
    };
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_SetupTowerCutscene(mut this:
                                                          *mut BossGanon,
                                                      mut globalCtx:
                                                          *mut GlobalContext) {
    let mut pad: s32 = 0;
    let mut animBankIndex: s32 =
        Object_GetIndex(&mut (*globalCtx).objectCtx,
                        OBJECT_GANON_ANIME2 as libc::c_int as s16);
    if Object_IsLoaded(&mut (*globalCtx).objectCtx, animBankIndex) != 0 {
        (*this).animBankIndex = animBankIndex;
        gSegments[6 as libc::c_int as usize] =
            ((*globalCtx).objectCtx.status[animBankIndex as usize].segment as
                 *mut u8_0).offset(-(0x80000000 as libc::c_uint as isize)) as
                u32_0;
        Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                  &mut object_ganon_anime2_Anim_00EA00,
                                  0.0f32);
        (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] =
            Animation_GetLastFrame(&mut object_ganon_anime2_Anim_00EA00 as
                                       *mut AnimationHeader as
                                       *mut libc::c_void) as f32_0;
        (*this).actionFunc =
            Some(BossGanon_DeathAndTowerCutscene as
                     unsafe extern "C" fn(_: *mut BossGanon,
                                          _: *mut GlobalContext) -> ());
        (*this).csTimer = 0 as libc::c_int as u32_0;
        (*this).csState = 100 as libc::c_int as s16;
        (*this).unk_198 = 1 as libc::c_int as u8_0;
        gSaveContext.magic = gSaveContext.unk_13F4 as s8;
        gSaveContext.health = gSaveContext.healthCapacity
    } else {
        (*this).actionFunc =
            Some(BossGanon_SetupTowerCutscene as
                     unsafe extern "C" fn(_: *mut BossGanon,
                                          _: *mut GlobalContext) -> ())
    };
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_ShatterWindows(mut windowShatterState:
                                                      u8_0) {
    let mut i: s16 = 0;
    let mut tex1: *mut u8_0 =
        gSegments[((ganon_boss_sceneTex_006C18.as_mut_ptr() as u32_0) <<
                       4 as libc::c_int >> 28 as libc::c_int) as
                      usize].wrapping_add(ganon_boss_sceneTex_006C18.as_mut_ptr()
                                              as u32_0 &
                                              0xffffff as libc::c_int as
                                                  libc::c_uint).wrapping_add(0x80000000
                                                                                 as
                                                                                 libc::c_uint)
            as *mut libc::c_void as *mut u8_0;
    let mut tex2: *mut u8_0 =
        gSegments[((ganon_boss_sceneTex_007418.as_mut_ptr() as u32_0) <<
                       4 as libc::c_int >> 28 as libc::c_int) as
                      usize].wrapping_add(ganon_boss_sceneTex_007418.as_mut_ptr()
                                              as u32_0 &
                                              0xffffff as libc::c_int as
                                                  libc::c_uint).wrapping_add(0x80000000
                                                                                 as
                                                                                 libc::c_uint)
            as *mut libc::c_void as *mut u8_0;
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) < 2048 as libc::c_int {
        if *tex1.offset(i as isize) as libc::c_int != 0 as libc::c_int &&
               Rand_ZeroOne() < 0.03f32 {
            if *(gDorfWindowShatterTemplateTex.as_mut_ptr() as
                     *mut u8_0).offset(i as isize) as libc::c_int ==
                   0 as libc::c_int ||
                   windowShatterState as libc::c_int ==
                       GDF_WINDOW_SHATTER_FULL as libc::c_int {
                let ref mut fresh2 = *tex2.offset(i as isize);
                *fresh2 = 1 as libc::c_int as u8_0;
                *tex1.offset(i as isize) = *fresh2
            }
        }
        i += 1
    };
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_DeathAndTowerCutscene(mut this:
                                                             *mut BossGanon,
                                                         mut globalCtx:
                                                             *mut GlobalContext) {
    static mut bloodPrimColor: Color_RGBA8 =
        {
            let mut init =
                Color_RGBA8{r: 0 as libc::c_int as u8_0,
                            g: 120 as libc::c_int as u8_0,
                            b: 0 as libc::c_int as u8_0,
                            a: 255 as libc::c_int as u8_0,};
            init
        };
    static mut bloodEnvColor: Color_RGBA8 =
        {
            let mut init =
                Color_RGBA8{r: 0 as libc::c_int as u8_0,
                            g: 120 as libc::c_int as u8_0,
                            b: 0 as libc::c_int as u8_0,
                            a: 255 as libc::c_int as u8_0,};
            init
        };
    let mut i: s16 = 0;
    let mut moveCam: u8_0 = 0 as libc::c_int as u8_0;
    let mut player: *mut Player =
        (*globalCtx).actorCtx.actorLists[ACTORCAT_PLAYER as libc::c_int as
                                             usize].head as *mut Player;
    let mut pad: s16 = 0;
    let mut sp98: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut sp8C: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut sp80: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut sp74: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut mainCam: *mut Camera = 0 as *mut Camera;
    let mut sp64: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    gSegments[6 as libc::c_int as usize] =
        ((*globalCtx).objectCtx.status[(*this).animBankIndex as usize].segment
             as *mut u8_0).offset(-(0x80000000 as libc::c_uint as isize)) as
            u32_0;
    (*this).csTimer = (*this).csTimer.wrapping_add(1);
    SkelAnime_Update(&mut (*this).skelAnime);
    let mut current_block_401: u64;
    match (*this).csState as libc::c_int {
        0 => {
            func_80064520(globalCtx, &mut (*globalCtx).csCtx);
            func_8002DF54(globalCtx, &mut (*this).actor,
                          8 as libc::c_int as u8_0);
            (*this).csCamIndex = Gameplay_CreateSubCamera(globalCtx);
            Gameplay_ChangeCameraStatus(globalCtx, 0 as libc::c_int as s16,
                                        1 as libc::c_int as s16);
            Gameplay_ChangeCameraStatus(globalCtx, (*this).csCamIndex,
                                        7 as libc::c_int as s16);
            (*this).actor.world.pos.x = 0.0f32;
            (*this).actor.world.pos.y = 70.0f32;
            (*this).actor.world.pos.z = -80.0f32;
            (*this).actor.shape.yOffset = -7000.0f32;
            (*this).actor.shape.rot.y = 0 as libc::c_int as s16;
            (*this).csState = 1 as libc::c_int as s16;
            (*this).csTimer = 0 as libc::c_int as u32_0;
            (*this).useOpenHand = 1 as libc::c_int as u8_0;
            current_block_401 = 8228048017794577669;
        }
        1 => { current_block_401 = 8228048017794577669; }
        2 => {
            (*this).csCamEye.x = -100.0f32;
            (*this).csCamEye.y = 20.0f32;
            (*this).csCamEye.z = -130.0f32;
            (*this).envLightMode = 13 as libc::c_int as s8;
            (*this).csCamAt.x = (*this).unk_1FC.x;
            (*this).csCamAt.y = (*this).unk_1FC.y;
            (*this).csCamAt.z = (*this).unk_1FC.z + 40.0f32;
            if (*this).csTimer >= 30 as libc::c_int as libc::c_uint {
                (*this).csState = 3 as libc::c_int as s16;
                (*this).csTimer = 0 as libc::c_int as u32_0;
                Message_StartTextbox(globalCtx,
                                     0x70ce as libc::c_int as u16_0,
                                     0 as *mut Actor);
                (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] = 1000.0f32
            }
            if (*this).unk_1A2 as libc::c_int % 32 as libc::c_int ==
                   0 as libc::c_int {
                Audio_PlayActorSound2(&mut (*this).actor,
                                      0x39d1 as libc::c_int as u16_0);
            }
            current_block_401 = 11060486315799977401;
        }
        3 => {
            (*this).envLightMode = 14 as libc::c_int as s8;
            if (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] > 100.0f32
                   &&
                   (*this).unk_1A2 as libc::c_int % 32 as libc::c_int ==
                       0 as libc::c_int {
                Audio_PlayActorSound2(&mut (*this).actor,
                                      0x39d1 as libc::c_int as u16_0);
            }
            (*this).csCamEye.x = 7.0f32;
            (*this).csCamEye.y = 52.0f32;
            (*this).csCamEye.z = -15.0f32;
            (*this).csCamAt.x = (*this).unk_1FC.x - 5.0f32;
            (*this).csCamAt.y = (*this).unk_1FC.y + 30.0f32 - 10.0f32;
            (*this).csCamAt.z = (*this).unk_1FC.z;
            if (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] > 100.0f32
                   && (*this).csTimer > 100 as libc::c_int as libc::c_uint &&
                   Message_GetState(&mut (*globalCtx).msgCtx) as libc::c_int
                       == TEXT_STATE_NONE as libc::c_int {
                Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                          &mut object_ganon_anime2_Anim_00B668,
                                          0.0f32);
                (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] =
                    Animation_GetLastFrame(&mut object_ganon_anime2_Anim_00B668
                                               as *mut AnimationHeader as
                                               *mut libc::c_void) as f32_0;
                Audio_PlayActorSound2(&mut (*this).actor,
                                      0x39d2 as libc::c_int as u16_0);
            } else {
                if Animation_OnFrame(&mut (*this).skelAnime,
                                     (*this).fwork[GDF_FWORK_1 as libc::c_int
                                                       as usize] - 16.0f32) !=
                       0 {
                    i = 0 as libc::c_int as s16;
                    while (i as libc::c_int) < 40 as libc::c_int {
                        sp98.x = Rand_CenteredFloat(5.0f32);
                        sp98.y = Rand_CenteredFloat(1.5f32) + 1.0f32;
                        sp98.z = Rand_ZeroFloat(5.0f32) + 2.0f32;
                        sp8C.x = 0.0f32;
                        sp8C.y = -1.0f32;
                        sp8C.z = 0.0f32;
                        sp80.x = (*this).unk_208.x;
                        sp80.y = (*this).unk_208.y - 10.0f32;
                        sp80.z = (*this).unk_208.z;
                        func_8002836C(globalCtx, &mut sp80, &mut sp98,
                                      &mut sp8C, &mut bloodPrimColor,
                                      &mut bloodEnvColor,
                                      (Rand_ZeroFloat(50.0f32) as s16 as
                                           libc::c_int + 50 as libc::c_int) as
                                          s16, 0 as libc::c_int as s16,
                                      17 as libc::c_int as s16);
                        i += 1
                    }
                }
                if Animation_OnFrame(&mut (*this).skelAnime,
                                     (*this).fwork[GDF_FWORK_1 as libc::c_int
                                                       as usize]) != 0 {
                    Animation_MorphToLoop(&mut (*this).skelAnime,
                                          &mut object_ganon_anime2_Anim_00BE38,
                                          0.0f32);
                    (*this).csState = 4 as libc::c_int as s16;
                    (*this).csTimer = 0 as libc::c_int as u32_0
                }
            }
            current_block_401 = 11060486315799977401;
        }
        4 => {
            (*this).envLightMode = 14 as libc::c_int as s8;
            if (*this).csTimer == 30 as libc::c_int as libc::c_uint {
                Message_StartTextbox(globalCtx,
                                     0x70cf as libc::c_int as u16_0,
                                     0 as *mut Actor);
                (*this).csState = 5 as libc::c_int as s16;
                (*this).csTimer = 0 as libc::c_int as u32_0
            }
            current_block_401 = 11060486315799977401;
        }
        5 => {
            (*this).envLightMode = 14 as libc::c_int as s8;
            if (*this).csTimer > 70 as libc::c_int as libc::c_uint &&
                   Message_GetState(&mut (*globalCtx).msgCtx) as libc::c_int
                       == TEXT_STATE_NONE as libc::c_int {
                (*this).csState = 6 as libc::c_int as s16;
                (*this).csTimer = 0 as libc::c_int as u32_0;
                Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                          &mut object_ganon_anime2_Anim_010298,
                                          0.0f32);
                (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] =
                    Animation_GetLastFrame(&mut object_ganon_anime2_Anim_010298
                                               as *mut AnimationHeader as
                                               *mut libc::c_void) as f32_0;
                (*this).csCamMovementScale = 0.05f32;
                (*this).csCamMaxStepScale = 0.0f32;
                (*this).csCamTargetEye.x = 7.0f32;
                (*this).csCamTargetEye.y = 12.0f32;
                (*this).csCamTargetEye.z = 70.0f32;
                (*this).csCamTargetAt.x = (*this).unk_1FC.x - 5.0f32;
                (*this).csCamTargetAt.y =
                    (*this).unk_1FC.y + 30.0f32 - 10.0f32;
                (*this).csCamTargetAt.z = (*this).unk_1FC.z;
                (*this).csCamEyeMaxStep.x =
                    fabsf((*this).csCamEye.x - (*this).csCamTargetEye.x);
                (*this).csCamEyeMaxStep.y =
                    fabsf((*this).csCamEye.y - (*this).csCamTargetEye.y);
                (*this).csCamEyeMaxStep.z =
                    fabsf((*this).csCamEye.z - (*this).csCamTargetEye.z);
                (*this).csCamAtMaxStep.x =
                    fabsf((*this).csCamAt.x - (*this).csCamTargetAt.x);
                (*this).csCamAtMaxStep.y =
                    fabsf((*this).csCamAt.y - (*this).csCamTargetAt.y);
                (*this).csCamAtMaxStep.z =
                    fabsf((*this).csCamAt.z - (*this).csCamTargetAt.z);
                Audio_PlayActorSound2(&mut (*this).actor,
                                      0x39d3 as libc::c_int as u16_0);
            }
            current_block_401 = 11060486315799977401;
        }
        6 => {
            (*this).envLightMode = 14 as libc::c_int as s8;
            moveCam = 1 as libc::c_int as u8_0;
            Math_ApproachF(&mut (*this).csCamMaxStepScale, 0.2f32, 1.0f32,
                           0.01f32);
            if Animation_OnFrame(&mut (*this).skelAnime,
                                 (*this).fwork[GDF_FWORK_1 as libc::c_int as
                                                   usize]) != 0 {
                Animation_MorphToLoop(&mut (*this).skelAnime,
                                      &mut object_ganon_anime2_Anim_010514,
                                      0.0f32);
                (*this).csState = 7 as libc::c_int as s16;
                (*this).csTimer = 0 as libc::c_int as u32_0;
                (*this).unk_2E8 = 0 as libc::c_int as s16;
                (*this).envLightMode = 15 as libc::c_int as s8;
                (*this).unk_508 = 0.0f32;
                (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] =
                    1000.0f32;
                (*globalCtx).envCtx.unk_D8 = 0.0f32
            }
            current_block_401 = 11060486315799977401;
        }
        7 => {
            if (*this).csTimer < 10 as libc::c_int as libc::c_uint {
                (*globalCtx).envCtx.unk_D8 = 0.0f32
            }
            if (*this).csTimer == 30 as libc::c_int as libc::c_uint {
                (*this).csState = 8 as libc::c_int as s16;
                (*this).csTimer = 0 as libc::c_int as u32_0;
                (*this).unk_70C = 0.0f32
            }
            current_block_401 = 8342648439710254828;
        }
        8 => {
            (*this).csCamEye.x = -60.0f32;
            (*this).csCamEye.y = 80.0f32;
            (*this).csCamEye.z = -130.0f32;
            (*this).csCamAt.x = 0.0f32;
            (*this).csCamAt.y = 0.0f32;
            (*this).csCamAt.z = 70.0f32;
            (*this).unk_70C =
                Math_SinS((*this).csTimer.wrapping_mul(0x6300 as libc::c_int
                                                           as libc::c_uint) as
                              s16) * 0.2f32;
            func_80078884((0x2898 as libc::c_int - 0x800 as libc::c_int) as
                              u16_0);
            current_block_401 = 8342648439710254828;
        }
        9 => {
            Audio_PlayActorSound2(&mut (*this).actor,
                                  (0x3963 as libc::c_int -
                                       0x800 as libc::c_int) as u16_0);
            if (*this).csTimer == 2 as libc::c_int as libc::c_uint {
                func_8002DF54(globalCtx, &mut (*this).actor,
                              0x39 as libc::c_int as u8_0);
            }
            if (*this).csTimer > 50 as libc::c_int as libc::c_uint {
                Math_ApproachZeroF(&mut (*this).unk_710, 1.0f32, 0.2f32);
                Math_ApproachF(&mut (*this).csCamEye.x, 270.0f32, 0.05f32,
                               (*this).csCamMaxStepScale * 30.0f32);
                Math_ApproachF(&mut (*this).csCamEye.z, 260.0f32, 0.05f32,
                               (*this).csCamMaxStepScale * 20.0f32);
                Math_ApproachF(&mut (*this).csCamAt.y, 103.0f32, 0.05f32,
                               (*this).csCamMaxStepScale * 6.0f32);
                Math_ApproachF(&mut (*this).csCamAt.z, 280.0f32, 0.05f32,
                               (*this).csCamMaxStepScale * 20.0f32);
                Math_ApproachF(&mut (*this).csCamMaxStepScale, 1.0f32, 1.0f32,
                               0.01f32);
            }
            (*this).unk_70C =
                Math_SinS((*this).csTimer.wrapping_mul(0x6300 as libc::c_int
                                                           as libc::c_uint) as
                              s16) * (*this).unk_710;
            func_80078884((0x2898 as libc::c_int - 0x800 as libc::c_int) as
                              u16_0);
            if (*this).csTimer < 100 as libc::c_int as libc::c_uint {
                (*this).windowShatterState =
                    GDF_WINDOW_SHATTER_PARTIAL as libc::c_int as u8_0;
                (*this).envLightMode = 15 as libc::c_int as s8
            } else {
                (*this).envLightMode = 16 as libc::c_int as s8;
                (*this).windowShatterState =
                    GDF_WINDOW_SHATTER_FULL as libc::c_int as u8_0
            }
            if (*this).csTimer >= 130 as libc::c_int as libc::c_uint {
                Math_ApproachF(&mut (*this).whiteFillAlpha, 255.0f32, 1.0f32,
                               5.0f32);
            }
            if (*this).csTimer == 180 as libc::c_int as libc::c_uint {
                (*globalCtx).sceneLoadFlag = 0x14 as libc::c_int as s8;
                (*globalCtx).nextEntranceIndex = 0x43f as libc::c_int as s16;
                (*globalCtx).fadeTransition = 5 as libc::c_int as u8_0
            }
            current_block_401 = 11060486315799977401;
        }
        100 => {
            func_80064520(globalCtx, &mut (*globalCtx).csCtx);
            func_8002DF54(globalCtx, &mut (*this).actor,
                          8 as libc::c_int as u8_0);
            (*this).csCamIndex = Gameplay_CreateSubCamera(globalCtx);
            Gameplay_ChangeCameraStatus(globalCtx, 0 as libc::c_int as s16,
                                        1 as libc::c_int as s16);
            Gameplay_ChangeCameraStatus(globalCtx, (*this).csCamIndex,
                                        7 as libc::c_int as s16);
            Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                      &mut object_ganon_anime2_Anim_00ADDC,
                                      0.0f32);
            (*this).fwork[1 as libc::c_int as usize] =
                Animation_GetLastFrame(&mut object_ganon_anime2_Anim_00EA00 as
                                           *mut AnimationHeader as
                                           *mut libc::c_void) as f32_0;
            (*this).csState = 101 as libc::c_int as s16;
            (*this).skelAnime.playSpeed = 0.0f32;
            sZelda =
                Actor_SpawnAsChild(&mut (*globalCtx).actorCtx,
                                   &mut (*this).actor, globalCtx,
                                   ACTOR_EN_ZL3 as libc::c_int as s16, 0.0f32,
                                   6000.0f32, 0.0f32, 0 as libc::c_int as s16,
                                   0 as libc::c_int as s16,
                                   0 as libc::c_int as s16,
                                   0x2000 as libc::c_int as s16) as
                    *mut EnZl3;
            (*player).actor.world.pos.x = -472.0f32;
            (*player).actor.world.pos.y = 4102.0f32;
            (*player).actor.world.pos.z = -130.0f32;
            (*player).actor.shape.rot.y = -(0x8000 as libc::c_int) as s16;
            (*this).actor.world.pos.x = -472.0f32;
            (*this).actor.world.pos.y = 4172.0f32;
            (*this).actor.world.pos.z = -400.0f32;
            (*this).actor.shape.yOffset = -7000.0f32;
            (*this).actor.shape.rot.y = 0 as libc::c_int as s16;
            (*this).csCamAt.x = -472.0f32;
            (*this).csCamEye.x = (*this).csCamAt.x;
            (*this).csCamAt.y = 4152.0f32;
            (*this).csCamEye.y = (*this).csCamAt.y;
            (*this).csCamEye.z = -160.0f32;
            (*this).csCamAt.z = -100.0f32;
            (*sCape).backPush = -2.0f32;
            (*sCape).backSwayMagnitude = 0.25f32;
            (*sCape).sideSwayMagnitude = -1.0f32;
            (*sCape).minDist = 0.0f32;
            (*sCape).minY = 4104.0f32;
            (*sCape).tearTimer = 20 as libc::c_int as u8_0;
            (*this).whiteFillAlpha = 255.0f32;
            (*globalCtx).envCtx.unk_D8 = 1.0f32;
            current_block_401 = 10890856634585485755;
        }
        101 => { current_block_401 = 10890856634585485755; }
        102 => {
            (*player).actor.world.pos.y = 4102.0f32;
            (*this).csCamEye.x = -442.0f32;
            (*this).csCamEye.y = 4152.0f32;
            (*this).csCamEye.z = -135.0f32;
            (*this).csCamAt.x = -472.0f32;
            (*this).csCamAt.y = 4152.0f32;
            (*this).csCamAt.z = -135.0f32;
            if (*this).csTimer == 5 as libc::c_int as libc::c_uint {
                func_8002DF54(globalCtx, &mut (*this).actor,
                              0x4c as libc::c_int as u8_0);
            }
            if (*this).csTimer == 70 as libc::c_int as libc::c_uint {
                func_8002DF54(globalCtx, &mut (*this).actor,
                              0x4d as libc::c_int as u8_0);
            }
            if (*this).csTimer == 90 as libc::c_int as libc::c_uint {
                (*this).csState = 103 as libc::c_int as s16;
                (*this).csTimer = 0 as libc::c_int as u32_0;
                (*sZelda).actor.world.pos.x = -472.0f32;
                (*sZelda).actor.world.pos.y = 4352.0f32;
                (*sZelda).actor.world.pos.z = -200.0f32;
                (*sZelda).unk_3C8 = 3 as libc::c_int as u8_0
            }
            current_block_401 = 11060486315799977401;
        }
        103 => {
            Audio_PlayActorSound2(&mut (*sZelda).actor,
                                  (0x28d5 as libc::c_int -
                                       0x800 as libc::c_int) as u16_0);
            Math_ApproachF(&mut (*sZelda).actor.world.pos.y, 4102.0f32,
                           0.05f32, 1.5f32);
            (*this).csCamEye.x = -242.0f32;
            (*this).csCamEye.y = 4122.0f32;
            (*this).csCamEye.z = -190.0f32;
            (*this).csCamAt.x = (*sZelda).actor.world.pos.x;
            (*this).csCamAt.y =
                (*sZelda).actor.world.pos.y + 40.0f32 + 5.0f32;
            (*this).csCamAt.z = (*sZelda).actor.world.pos.z;
            if (*this).csTimer == 200 as libc::c_int as libc::c_uint {
                (*sZelda).actor.world.pos.y = 4102.0f32;
                (*this).csState = 104 as libc::c_int as s16;
                (*this).csTimer = 0 as libc::c_int as u32_0;
                current_block_401 = 2523184695205123125;
            } else { current_block_401 = 11060486315799977401; }
        }
        104 => { current_block_401 = 2523184695205123125; }
        105 => {
            (*this).csCamEye.x = -450.0f32;
            (*this).csCamEye.y = 4154.0f32;
            (*this).csCamEye.z = -182.0f32;
            (*this).csCamAt.x = (*sZelda).actor.world.pos.x - 5.0f32;
            (*this).csCamAt.y =
                (*sZelda).actor.world.pos.y + 40.0f32 + 5.0f32;
            (*this).csCamAt.z = (*sZelda).actor.world.pos.z - 25.0f32;
            if (*this).csTimer == 10 as libc::c_int as libc::c_uint {
                Message_StartTextbox(globalCtx,
                                     0x70d0 as libc::c_int as u16_0,
                                     0 as *mut Actor);
            }
            if (*this).csTimer > 100 as libc::c_int as libc::c_uint &&
                   Message_GetState(&mut (*globalCtx).msgCtx) as libc::c_int
                       == TEXT_STATE_NONE as libc::c_int {
                (*this).csState = 1055 as libc::c_int as s16;
                (*this).csTimer = 0 as libc::c_int as u32_0
            }
            current_block_401 = 11060486315799977401;
        }
        1055 => {
            (*this).unk_70C =
                Math_SinS((*this).csTimer.wrapping_mul(0x6300 as libc::c_int
                                                           as libc::c_uint) as
                              s16) * 0.3f32;
            func_80078884((0x2898 as libc::c_int - 0x800 as libc::c_int) as
                              u16_0);
            if (*this).csTimer == 20 as libc::c_int as libc::c_uint {
                (*sZelda).unk_3C8 = 5 as libc::c_int as u8_0;
                func_8002DF54(globalCtx, &mut (*this).actor,
                              0x39 as libc::c_int as u8_0);
            }
            if (*this).csTimer == 40 as libc::c_int as libc::c_uint {
                (*this).csState = 1056 as libc::c_int as s16;
                (*this).csTimer = 0 as libc::c_int as u32_0
            }
            current_block_401 = 11060486315799977401;
        }
        1056 => {
            (*this).unk_70C =
                Math_SinS((*this).csTimer.wrapping_mul(0x6300 as libc::c_int
                                                           as libc::c_uint) as
                              s16) * 0.3f32;
            func_80078884((0x2898 as libc::c_int - 0x800 as libc::c_int) as
                              u16_0);
            (*this).csCamEye.x = -503.0f32;
            (*this).csCamEye.y = 4128.0f32;
            (*this).csCamEye.z = -162.0f32;
            (*this).csCamAt.x = -416.0f32;
            (*this).csCamAt.y = 4181.0f32;
            (*this).csCamAt.z = -75.0f32;
            if (*this).csTimer > 40 as libc::c_int as libc::c_uint {
                (*this).csState = 1057 as libc::c_int as s16;
                (*this).csTimer = 0 as libc::c_int as u32_0
            }
            current_block_401 = 11060486315799977401;
        }
        1057 => {
            (*this).unk_70C =
                Math_SinS((*this).csTimer.wrapping_mul(0x6300 as libc::c_int
                                                           as libc::c_uint) as
                              s16) * (50.0f32 * (*this).csCamMovementScale);
            func_80078884((0x2898 as libc::c_int - 0x800 as libc::c_int) as
                              u16_0);
            Math_ApproachF(&mut (*this).csCamEye.x, -1200.0f32, 0.1f32,
                           (*this).csCamMovementScale * 697.0f32);
            Math_ApproachF(&mut (*this).csCamEye.y, 4241.0f32, 0.1f32,
                           (*this).csCamMovementScale * 113.0f32);
            Math_ApproachF(&mut (*this).csCamEye.z, -1048.0f32, 0.1f32,
                           (*this).csCamMovementScale * 886.0f32);
            Math_ApproachF(&mut (*this).csCamMovementScale, 0.05f32, 1.0f32,
                           0.001f32);
            if (*this).csTimer > 80 as libc::c_int as libc::c_uint {
                (*this).csState = 106 as libc::c_int as s16;
                (*this).csTimer = 60 as libc::c_int as u32_0
            }
            current_block_401 = 11060486315799977401;
        }
        106 => {
            (*this).csCamEye.x = -450.0f32;
            (*this).csCamEye.y = 4154.0f32;
            (*this).csCamEye.z = -182.0f32;
            (*this).csCamAt.x = (*sZelda).actor.world.pos.x - 5.0f32;
            (*this).csCamAt.y =
                (*sZelda).actor.world.pos.y + 40.0f32 + 5.0f32;
            (*this).csCamAt.z = (*sZelda).actor.world.pos.z - 25.0f32;
            (*this).unk_70C =
                Math_SinS((*this).csTimer.wrapping_mul(0x6300 as libc::c_int
                                                           as libc::c_uint) as
                              s16) * 0.3f32;
            func_80078884((0x2898 as libc::c_int - 0x800 as libc::c_int) as
                              u16_0);
            if (*this).csTimer == 70 as libc::c_int as libc::c_uint {
                (*sZelda).unk_3C8 = 6 as libc::c_int as u8_0
            }
            if (*this).csTimer == 90 as libc::c_int as libc::c_uint {
                Message_StartTextbox(globalCtx,
                                     0x70d1 as libc::c_int as u16_0,
                                     0 as *mut Actor);
            }
            if (*this).csTimer > 150 as libc::c_int as libc::c_uint &&
                   Message_GetState(&mut (*globalCtx).msgCtx) as libc::c_int
                       == TEXT_STATE_NONE as libc::c_int {
                (*this).csState = 107 as libc::c_int as s16;
                (*this).csTimer = 0 as libc::c_int as u32_0;
                Message_StartTextbox(globalCtx,
                                     0x70d2 as libc::c_int as u16_0,
                                     0 as *mut Actor);
                func_8002DF54(globalCtx, &mut (*this).actor,
                              0x39 as libc::c_int as u8_0);
            }
            current_block_401 = 11060486315799977401;
        }
        107 => {
            (*this).unk_70C =
                Math_SinS((*this).csTimer.wrapping_mul(0x6300 as libc::c_int
                                                           as libc::c_uint) as
                              s16) * 0.8f32;
            func_80078884((0x2898 as libc::c_int - 0x800 as libc::c_int) as
                              u16_0);
            (*this).csCamEye.x = -380.0f32;
            (*this).csCamEye.y = 4154.0f32;
            (*this).csCamEye.z = -242.0f32;
            (*this).csCamAt.x =
                (*sZelda).actor.world.pos.x - 5.0f32 - 30.0f32;
            (*this).csCamAt.y =
                (*sZelda).actor.world.pos.y + 40.0f32 + 5.0f32 - 20.0f32;
            (*this).csCamAt.z =
                (*sZelda).actor.world.pos.z - 25.0f32 + 80.0f32;
            if (*this).csTimer > 50 as libc::c_int as libc::c_uint &&
                   Message_GetState(&mut (*globalCtx).msgCtx) as libc::c_int
                       == TEXT_STATE_NONE as libc::c_int {
                (*sZelda).unk_3C8 = 7 as libc::c_int as u8_0;
                (*this).csState = 108 as libc::c_int as s16;
                (*this).csTimer = 0 as libc::c_int as u32_0
            }
            current_block_401 = 11060486315799977401;
        }
        108 => {
            (*this).unk_70C =
                Math_SinS((*this).csTimer.wrapping_mul(0x6300 as libc::c_int
                                                           as libc::c_uint) as
                              s16) * 0.8f32;
            func_80078884((0x2898 as libc::c_int - 0x800 as libc::c_int) as
                              u16_0);
            (*this).csCamAt.x =
                (*sZelda).actor.world.pos.x - 5.0f32 - 30.0f32;
            (*this).csCamAt.y =
                (*sZelda).actor.world.pos.y + 40.0f32 + 5.0f32 - 20.0f32;
            (*this).csCamAt.z =
                (*sZelda).actor.world.pos.z - 25.0f32 + 80.0f32;
            if (*this).csTimer > 50 as libc::c_int as libc::c_uint {
                mainCam =
                    Gameplay_GetCamera(globalCtx, 0 as libc::c_int as s16);
                (*mainCam).eye = (*this).csCamEye;
                (*mainCam).eyeNext = (*this).csCamEye;
                (*mainCam).at = (*this).csCamAt;
                func_800C08AC(globalCtx, (*this).csCamIndex,
                              0 as libc::c_int as s16);
                (*this).csState = 109 as libc::c_int as s16;
                (*this).csCamIndex = 0 as libc::c_int as s16;
                func_80064534(globalCtx, &mut (*globalCtx).csCtx);
                func_8002DF54(globalCtx, &mut (*this).actor,
                              7 as libc::c_int as u8_0);
                Flags_SetSwitch(globalCtx, 0x37 as libc::c_int);
            }
            current_block_401 = 11060486315799977401;
        }
        109 => {
            func_80078884((0x2898 as libc::c_int - 0x800 as libc::c_int) as
                              u16_0);
            current_block_401 = 11060486315799977401;
        }
        _ => { current_block_401 = 11060486315799977401; }
    }
    match current_block_401 {
        2523184695205123125 =>
        // fallthrough
        {
            (*this).csCamEye.x = -432.0f32;
            (*this).csCamEye.y = 4147.0f32;
            (*this).csCamEye.z = -200.0f32;
            (*this).csCamAt.x = (*sZelda).actor.world.pos.x;
            (*this).csCamAt.y =
                (*sZelda).actor.world.pos.y + 40.0f32 + 5.0f32;
            (*this).csCamAt.z = (*sZelda).actor.world.pos.z;
            if (*this).csTimer >= 10 as libc::c_int as libc::c_uint {
                Math_ApproachZeroF(&mut (*globalCtx).envCtx.unk_D8, 1.0f32,
                                   0.05f32);
            }
            if (*this).csTimer == 10 as libc::c_int as libc::c_uint {
                (*sZelda).unk_3C8 = 8 as libc::c_int as u8_0
            }
            if (*this).csTimer == 50 as libc::c_int as libc::c_uint {
                (*sZelda).unk_3C8 = 4 as libc::c_int as u8_0
            }
            if (*this).csTimer == 100 as libc::c_int as libc::c_uint {
                (*this).csState = 105 as libc::c_int as s16;
                (*this).csTimer = 0 as libc::c_int as u32_0
            }
        }
        10890856634585485755 =>
        // fallthrough
        {
            (*player).actor.world.pos.y = 4102.0f32;
            Math_ApproachZeroF(&mut (*this).whiteFillAlpha, 1.0f32, 5.0f32);
            if (*this).csTimer > 40 as libc::c_int as libc::c_uint {
                Math_ApproachF(&mut (*this).csCamEye.z, -520.0f32, 0.1f32,
                               (*this).csCamMaxStepScale);
                Math_ApproachF(&mut (*this).csCamMaxStepScale, 5.0f32, 1.0f32,
                               0.1f32);
                if (*this).csTimer == 150 as libc::c_int as libc::c_uint {
                    (*this).skelAnime.playSpeed = 1.0f32
                }
                if (*this).csTimer == 160 as libc::c_int as libc::c_uint {
                    Audio_PlayActorSound2(&mut (*this).actor,
                                          0x8c5 as libc::c_int as u16_0);
                }
                if (*this).csTimer == 187 as libc::c_int as libc::c_uint {
                    Audio_PlayActorSound2(&mut (*this).actor,
                                          0x83e as libc::c_int as u16_0);
                }
                if (*this).csTimer == 180 as libc::c_int as libc::c_uint {
                    Audio_PlayActorSound2(&mut (*this).actor,
                                          0x28c7 as libc::c_int as u16_0);
                }
                if (*this).csTimer == 190 as libc::c_int as libc::c_uint {
                    sp74 = (*this).actor.world.pos;
                    sp74.y = 4102.0f32;
                    BossGanonEff_SpawnDustDark(globalCtx, &mut sp74, 0.2f32,
                                               0.7f32);
                }
                if (*this).csTimer == 230 as libc::c_int as libc::c_uint {
                    (*this).csState = 102 as libc::c_int as s16;
                    (*this).csTimer = 0 as libc::c_int as u32_0
                }
            }
        }
        8342648439710254828 => {
            (*this).envLightMode = 15 as libc::c_int as s8;
            Audio_PlayActorSound2(&mut (*this).actor,
                                  (0x3963 as libc::c_int -
                                       0x800 as libc::c_int) as u16_0);
            i = 1 as libc::c_int as s16;
            while (i as libc::c_int) < 15 as libc::c_int {
                (*this).unk_4E4[i as usize] = 0xa as libc::c_int as s16;
                i += 1
            }
            (*this).unk_2E6 = 20000 as libc::c_int as s16;
            Math_ApproachF(&mut (*this).unk_508, 5.0f32, 0.05f32, 0.1f32);
            if (*this).csTimer == 30 as libc::c_int as libc::c_uint {
                (*this).csState = 9 as libc::c_int as s16;
                (*this).csTimer = 0 as libc::c_int as u32_0;
                (*this).csCamEye.x = -30.0f32;
                (*this).csCamEye.y = 40.0f32;
                (*this).csCamEye.z = 60.0f32;
                (*this).csCamAt.x = 492.0f32;
                (*this).csCamAt.y = 43.0f32;
                (*this).csCamAt.z = 580.0f32;
                (*this).csCamMaxStepScale = 0.0f32;
                (*this).unk_710 = 10.0f32
            }
        }
        8228048017794577669 =>
        // fallthrough
        {
            (*player).actor.shape.rot.y =
                -(0x8000 as libc::c_int) as s16; // rumble
            (*player).actor.world.pos.x = -10.0f32;
            (*player).actor.world.pos.y = 0.0f32;
            (*player).actor.world.pos.z = 115.0f32;
            (*this).envLightMode = 13 as libc::c_int as s8;
            if (*this).csTimer < 30 as libc::c_int as libc::c_uint {
                (*globalCtx).envCtx.unk_D8 = 0.0f32
            }
            if (*this).csTimer >= 2 as libc::c_int as libc::c_uint {
                (*globalCtx).envCtx.fillScreen = 0 as libc::c_int as u8_0
            }
            (*this).csCamEye.x = -50.0f32;
            (*this).csCamEye.z = -50.0f32;
            (*this).csCamEye.y = 50.0f32;
            (*this).csCamAt.x = (*this).unk_1FC.x;
            (*this).csCamAt.y = (*this).unk_1FC.y + 30.0f32;
            (*this).csCamAt.z = (*this).unk_1FC.z;
            if Animation_OnFrame(&mut (*this).skelAnime,
                                 (*this).fwork[GDF_FWORK_1 as libc::c_int as
                                                   usize]) != 0 {
                Animation_MorphToLoop(&mut (*this).skelAnime,
                                      &mut object_ganon_anime2_Anim_00F19C,
                                      0.0f32);
                (*this).csState = 2 as libc::c_int as s16;
                (*this).csTimer = 0 as libc::c_int as u32_0
            }
        }
        _ => { }
    }
    if (*this).csState as libc::c_int >= 100 as libc::c_int {
        (*this).envLightMode = 20 as libc::c_int as s8
    }
    if (*this).csCamIndex as libc::c_int != 0 as libc::c_int {
        if moveCam != 0 {
            Math_ApproachF(&mut (*this).csCamEye.x, (*this).csCamTargetEye.x,
                           (*this).csCamMovementScale,
                           (*this).csCamEyeMaxStep.x *
                               (*this).csCamMaxStepScale);
            Math_ApproachF(&mut (*this).csCamEye.y, (*this).csCamTargetEye.y,
                           (*this).csCamMovementScale,
                           (*this).csCamEyeMaxStep.y *
                               (*this).csCamMaxStepScale);
            Math_ApproachF(&mut (*this).csCamEye.z, (*this).csCamTargetEye.z,
                           (*this).csCamMovementScale,
                           (*this).csCamEyeMaxStep.z *
                               (*this).csCamMaxStepScale);
            Math_ApproachF(&mut (*this).csCamAt.x, (*this).csCamTargetAt.x,
                           (*this).csCamMovementScale,
                           (*this).csCamAtMaxStep.x *
                               (*this).csCamMaxStepScale);
            Math_ApproachF(&mut (*this).csCamAt.y, (*this).csCamTargetAt.y,
                           (*this).csCamMovementScale,
                           (*this).csCamAtMaxStep.y *
                               (*this).csCamMaxStepScale);
            Math_ApproachF(&mut (*this).csCamAt.z, (*this).csCamTargetAt.z,
                           (*this).csCamMovementScale,
                           (*this).csCamAtMaxStep.z *
                               (*this).csCamMaxStepScale);
        }
        sp64 = (*this).csCamAt;
        sp64.y += (*this).unk_70C;
        Gameplay_CameraSetAtEye(globalCtx, (*this).csCamIndex, &mut sp64,
                                &mut (*this).csCamEye);
    };
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_SetupPoundFloor(mut this: *mut BossGanon,
                                                   mut globalCtx:
                                                       *mut GlobalContext) {
    (*this).unk_1C2 = 0 as libc::c_int as s16;
    (*this).timers[0 as libc::c_int as usize] = 40 as libc::c_int as s16;
    (*this).actionFunc =
        Some(BossGanon_PoundFloor as
                 unsafe extern "C" fn(_: *mut BossGanon,
                                      _: *mut GlobalContext) -> ());
    (*this).actor.velocity.x = 0.0f32;
    (*this).actor.velocity.y = 0.0f32;
    (*this).fwork[GDF_CENTER_POS as libc::c_int as usize] = 100.0f32;
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_PoundFloor(mut this: *mut BossGanon,
                                              mut globalCtx:
                                                  *mut GlobalContext) {
    let mut i: s16 = 0;
    let mut heightTarget: f32_0 = 0.;
    let mut targetPosX: f32_0 = 0.;
    let mut targetPosZ: f32_0 = 0.;
    let mut sp6C: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut sp60: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut sp54: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut sp48: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    SkelAnime_Update(&mut (*this).skelAnime);
    match (*this).unk_1C2 as libc::c_int {
        0 => {
            targetPosX =
                Math_SinS(((*this).unk_1A2 as libc::c_int *
                               1280 as libc::c_int) as s16);
            targetPosX =
                targetPosX *
                    (*this).fwork[GDF_CENTER_POS as libc::c_int as usize];
            targetPosZ =
                Math_CosS(((*this).unk_1A2 as libc::c_int *
                               1792 as libc::c_int) as s16);
            targetPosZ =
                targetPosZ *
                    (*this).fwork[GDF_CENTER_POS as libc::c_int as usize];
            Math_ApproachF(&mut (*this).actor.world.pos.x, targetPosX,
                           0.05f32,
                           (*this).fwork[GDF_FWORK_0 as libc::c_int as
                                             usize]);
            Math_ApproachF(&mut (*this).actor.world.pos.z, targetPosZ,
                           0.05f32,
                           (*this).fwork[GDF_FWORK_0 as libc::c_int as
                                             usize]);
            Math_ApproachF(&mut *(*this).fwork.as_mut_ptr().offset(GDF_CENTER_POS
                                                                       as
                                                                       libc::c_int
                                                                       as
                                                                       isize),
                           0.0f32, 1 as libc::c_int as f32_0, 1.5f32);
            if (*this).timers[0 as libc::c_int as usize] as libc::c_int ==
                   5 as libc::c_int {
                Audio_PlayActorSound2(&mut (*this).actor,
                                      0x39cb as libc::c_int as u16_0);
            }
            if ((*this).timers[0 as libc::c_int as usize] as libc::c_int) <
                   14 as libc::c_int {
                heightTarget = 250.0f32;
                (*this).unk_258 +=
                    Rand_ZeroFloat(3.14159265358979323846f32 /
                                       2 as libc::c_int as libc::c_float) +
                        3.14159265358979323846f32 /
                            2 as libc::c_int as libc::c_float;
                Math_ApproachF(&mut (*this).handLightBallScale, 7.0f32,
                               0.5f32, 1.0f32);
                (*this).envLightMode = 1 as libc::c_int as s8
            } else { heightTarget = 200.0f32 }
            Math_ApproachF(&mut (*this).actor.world.pos.y, heightTarget,
                           0.1f32, (*this).actor.velocity.y);
            Math_ApproachF(&mut (*this).actor.velocity.y, 20.0f32, 1.0f32,
                           1.0f32);
            if (*this).timers[0 as libc::c_int as usize] as libc::c_int ==
                   14 as libc::c_int {
                (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] =
                    Animation_GetLastFrame(&mut gDorfPoundAnim as
                                               *mut AnimationHeader as
                                               *mut libc::c_void) as f32_0;
                Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                          &mut gDorfPoundAnim, 0.0f32);
                (*this).actor.velocity.y = 0.0f32
            }
            if (*this).timers[0 as libc::c_int as usize] as libc::c_int ==
                   0 as libc::c_int {
                (*this).unk_1C2 = 1 as libc::c_int as s16;
                (*this).actor.velocity.y = 0.0f32
            }
        }
        1 => {
            (*sCape).gravity = -1.0f32;
            (*this).envLightMode = 1 as libc::c_int as s8;
            Math_ApproachF(&mut (*this).actor.velocity.y, -50.0f32, 1.0f32,
                           10.0f32);
            (*this).actor.world.pos.y += (*this).actor.velocity.y;
            if (*this).actor.world.pos.y < 60.0f32 {
                (*this).actor.world.pos.y = 60.0f32;
                (*this).unk_1C2 = 2 as libc::c_int as s16;
                (*this).timers[0 as libc::c_int as usize] =
                    10 as libc::c_int as s16;
                func_80033E88(&mut (*this).actor, globalCtx,
                              0xa as libc::c_int as s16,
                              0x14 as libc::c_int as s16);
                (*this).unk_19C = 35 as libc::c_int as s16;
                (*this).unk_19E = 0 as libc::c_int as u8_0;
                Audio_PlayActorSound2(&mut (*this).actor,
                                      0x3915 as libc::c_int as u16_0);
                (*this).handLightBallScale = 0.0f32;
                sp60 = (*this).unk_260;
                sp60.y = 0.0f32;
                i = 0 as libc::c_int as s16;
                while (i as libc::c_int) < 80 as libc::c_int {
                    sp6C.x = Rand_CenteredFloat(25.0f32);
                    sp6C.y = Rand_ZeroFloat(17.0f32);
                    sp6C.z = Rand_CenteredFloat(25.0f32);
                    BossGanonEff_SpawnLightRay(globalCtx, &mut sp60,
                                               &mut sp6C, &mut sZeroVec,
                                               Rand_ZeroFloat(300.0f32) +
                                                   500.0f32, 13.0f32,
                                               0x1e as libc::c_int as s16);
                    i += 1
                }
            }
        }
        2 => {
            (*this).envLightMode = 1 as libc::c_int as s8;
            if (*this).timers[0 as libc::c_int as usize] as libc::c_int ==
                   0 as libc::c_int {
                (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] =
                    Animation_GetLastFrame(&mut gDorfPoundEndAnim as
                                               *mut AnimationHeader as
                                               *mut libc::c_void) as f32_0;
                Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                          &mut gDorfPoundEndAnim, 0.0f32);
                (*this).unk_1C2 = 3 as libc::c_int as s16;
                (*this).unk_19F = 1 as libc::c_int as u8_0;
                (*this).actor.velocity.y = 0.0f32
            }
        }
        3 => {
            Math_ApproachF(&mut (*this).actor.world.pos.y, 150.0f32, 0.1f32,
                           (*this).actor.velocity.y);
            Math_ApproachF(&mut (*this).actor.velocity.y, 20.0f32, 1.0f32,
                           1.0f32);
            if Animation_OnFrame(&mut (*this).skelAnime,
                                 (*this).fwork[GDF_FWORK_1 as libc::c_int as
                                                   usize]) != 0 {
                (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] =
                    Animation_GetLastFrame(&mut gDorfGetUp3Anim as
                                               *mut AnimationHeader as
                                               *mut libc::c_void) as f32_0;
                Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                          &mut gDorfGetUp3Anim, 0.0f32);
                SkelAnime_Update(&mut (*this).skelAnime);
                (*sCape).attachShouldersTimer = 18.0f32;
                Audio_PlayActorSound2(&mut (*this).actor,
                                      0x28c7 as libc::c_int as u16_0);
                (*this).unk_1C2 = 4 as libc::c_int as s16
            }
        }
        4 => {
            Math_ApproachF(&mut (*this).actor.world.pos.y, 150.0f32, 0.1f32,
                           (*this).actor.velocity.y);
            Math_ApproachF(&mut (*this).actor.velocity.y, 20.0f32, 1.0f32,
                           1.0f32);
            if Animation_OnFrame(&mut (*this).skelAnime,
                                 (*this).fwork[GDF_FWORK_1 as libc::c_int as
                                                   usize]) != 0 {
                BossGanon_SetupWait(this, globalCtx);
            }
        }
        _ => { }
    }
    if (*this).unk_19C as libc::c_int == 35 as libc::c_int ||
           (*this).unk_19C as libc::c_int == 30 as libc::c_int ||
           (*this).unk_19C as libc::c_int == 25 as libc::c_int {
        sp54 = (*this).actor.world.pos;
        sp54.y = 0.0f32;
        BossGanonEff_SpawnDustLight(globalCtx, &mut sp54,
                                    0 as libc::c_int as f32_0, 3.0f32,
                                    ((*this).unk_19C as libc::c_int -
                                         25 as libc::c_int) as s16);
    }
    if (*this).unk_19C as libc::c_int == 35 as libc::c_int {
        sp48 = (*this).actor.world.pos;
        sp48.y = 0.0f32;
        BossGanonEff_SpawnShockwave(globalCtx, &mut sp48,
                                    0 as libc::c_int as f32_0, 3.0f32);
    };
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_SetupChargeBigMagic(mut this:
                                                           *mut BossGanon,
                                                       mut globalCtx:
                                                           *mut GlobalContext) {
    (*this).unk_1C2 = 0 as libc::c_int as s16;
    (*this).timers[0 as libc::c_int as usize] = 30 as libc::c_int as s16;
    (*this).actor.velocity.x = 0.0f32;
    (*this).actor.velocity.y = 0.0f32;
    (*this).fwork[GDF_CENTER_POS as libc::c_int as usize] = 100.0f32;
    (*this).unk_1AA = Rand_ZeroFloat(20000.0f32) as s16;
    (*this).unk_1AC = 0 as libc::c_int as s16;
    (*this).actionFunc =
        Some(BossGanon_ChargeBigMagic as
                 unsafe extern "C" fn(_: *mut BossGanon,
                                      _: *mut GlobalContext) -> ());
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_ChargeBigMagic(mut this: *mut BossGanon,
                                                  mut globalCtx:
                                                      *mut GlobalContext) {
    let mut pad: s32 = 0;
    let mut targetPosX: f32_0 = 0.;
    let mut targetPosZ: f32_0 = 0.;
    let mut sp80: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut sp74: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut sp68: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut i: s16 = 0;
    SkelAnime_Update(&mut (*this).skelAnime);
    targetPosX =
        Math_SinS(((*this).unk_1A2 as libc::c_int * 1280 as libc::c_int) as
                      s16);
    targetPosX =
        targetPosX * (*this).fwork[GDF_CENTER_POS as libc::c_int as usize];
    targetPosZ =
        Math_CosS(((*this).unk_1A2 as libc::c_int * 1792 as libc::c_int) as
                      s16);
    targetPosZ =
        targetPosZ * (*this).fwork[GDF_CENTER_POS as libc::c_int as usize];
    Math_ApproachF(&mut (*this).actor.world.pos.x, targetPosX, 0.05f32,
                   (*this).fwork[GDF_FWORK_0 as libc::c_int as usize]);
    Math_ApproachF(&mut (*this).actor.world.pos.z, targetPosZ,
                   0.05f64 as f32_0,
                   (*this).fwork[GDF_FWORK_0 as libc::c_int as usize]);
    Math_ApproachF(&mut *(*this).fwork.as_mut_ptr().offset(GDF_CENTER_POS as
                                                               libc::c_int as
                                                               isize), 0.0f32,
                   1.0f32, 1.5f32);
    Math_ApproachF(&mut (*this).actor.world.pos.y, 200.0f32, 0.05f32,
                   (*this).actor.velocity.y);
    Math_ApproachF(&mut (*this).actor.velocity.y, 20.0f32, 1.0f32, 1.0f32);
    match (*this).unk_1C2 as libc::c_int {
        0 => {
            if (*this).timers[0 as libc::c_int as usize] as libc::c_int ==
                   0 as libc::c_int {
                (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] =
                    Animation_GetLastFrame(&mut gDorfBigMagicChargeStartAnim
                                               as *mut AnimationHeader as
                                               *mut libc::c_void) as f32_0;
                Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                          &mut gDorfBigMagicChargeStartAnim,
                                          0.0f32);
                (*this).unk_1C2 = 1 as libc::c_int as s16
            }
        }
        1 => {
            if Animation_OnFrame(&mut (*this).skelAnime,
                                 (*this).fwork[GDF_FWORK_1 as libc::c_int as
                                                   usize]) != 0 {
                (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] =
                    Animation_GetLastFrame(&mut gDorfBigMagicChargeHoldAnim as
                                               *mut AnimationHeader as
                                               *mut libc::c_void) as f32_0;
                Animation_MorphToLoop(&mut (*this).skelAnime,
                                      &mut gDorfBigMagicChargeHoldAnim,
                                      0.0f32);
                (*this).unk_1C2 = 2 as libc::c_int as s16;
                (*this).timers[0 as libc::c_int as usize] =
                    100 as libc::c_int as s16
            }
        }
        2 => {
            (*this).envLightMode = 2 as libc::c_int as s8;
            Audio_PlayActorSound2(&mut (*this).actor,
                                  (0x396c as libc::c_int -
                                       0x800 as libc::c_int) as u16_0);
            (*this).unk_278.x = (*this).unk_2EC[0 as libc::c_int as usize].x;
            (*this).unk_278.y =
                (*this).unk_2EC[0 as libc::c_int as usize].y + 50.0f32 +
                    30.0f32;
            (*this).unk_278.z = (*this).unk_2EC[0 as libc::c_int as usize].z;
            Math_ApproachF(&mut (*this).unk_284, 0.25f32, 0.1f32, 0.006f32);
            Math_ApproachF(&mut (*this).unk_288, 255.0f32, 1.0f32, 255.0f32);
            Math_ApproachF(&mut (*this).unk_28C, 0.25f32, 0.1f32, 0.006f32);
            if (*this).timers[0 as libc::c_int as usize] as libc::c_int >
                   20 as libc::c_int &&
                   ((*this).timers[0 as libc::c_int as usize] as libc::c_int)
                       < 60 as libc::c_int {
                Math_ApproachF(&mut (*this).unk_290, 255.0f32, 1.0f32,
                               15.0f32);
            }
            if (*this).timers[0 as libc::c_int as usize] as libc::c_int ==
                   0 as libc::c_int {
                (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] =
                    Animation_GetLastFrame(&mut gDorfBigMagicWindupAnim as
                                               *mut AnimationHeader as
                                               *mut libc::c_void) as f32_0;
                Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                          &mut gDorfBigMagicWindupAnim,
                                          0.0f32);
                (*this).unk_1C2 = 3 as libc::c_int as s16;
                (*this).timers[0 as libc::c_int as usize] =
                    6 as libc::c_int as s16;
                (*this).timers[1 as libc::c_int as usize] =
                    15 as libc::c_int as s16;
                Audio_PlayActorSound2(&mut (*this).actor,
                                      0x39d5 as libc::c_int as u16_0);
            } else {
                Math_ApproachS(&mut (*this).actor.shape.rot.y,
                               (*this).actor.yawTowardsPlayer,
                               5 as libc::c_int as s16,
                               0x3e8 as libc::c_int as s16);
                if ((*this).timers[0 as libc::c_int as usize] as libc::c_int)
                       < -(4 as libc::c_int) {
                    i = 0 as libc::c_int as s16;
                    while (i as libc::c_int) <
                              (::std::mem::size_of::<[f32_0; 15]>() as
                                   libc::c_ulong).wrapping_div(::std::mem::size_of::<f32_0>()
                                                                   as
                                                                   libc::c_ulong)
                                  as s32 {
                        Math_ApproachF(&mut *(*this).unk_294.as_mut_ptr().offset(i
                                                                                     as
                                                                                     isize),
                                       0.0f32, 1.0f32, 40.0f32);
                        i += 1
                    }
                } else if (*this).timers[0 as libc::c_int as usize] as
                              libc::c_int >= 7 as libc::c_int &&
                              ((*this).timers[0 as libc::c_int as usize] as
                                   libc::c_int) < 26 as libc::c_int {
                    if ((*this).unk_1AC as libc::c_int) <
                           (::std::mem::size_of::<[f32_0; 15]>() as
                                libc::c_ulong).wrapping_div(::std::mem::size_of::<f32_0>()
                                                                as
                                                                libc::c_ulong)
                               as s32 {
                        (*this).unk_1AC += 1
                    }
                    i = 0 as libc::c_int as s16;
                    while (i as libc::c_int) < (*this).unk_1AC as libc::c_int
                          {
                        Math_ApproachF(&mut *(*this).unk_294.as_mut_ptr().offset(i
                                                                                     as
                                                                                     isize),
                                       200.0f32, 1.0f32, 40.0f32);
                        i += 1
                    }
                }
                if (*this).timers[0 as libc::c_int as usize] as libc::c_int <=
                       30 as libc::c_int {
                    Math_ApproachF(&mut (*this).unk_284, 0.4f32, 0.5f32,
                                   0.017f32);
                    (*this).unk_28C = (*this).unk_284
                }
                if (*this).timers[0 as libc::c_int as usize] as libc::c_int <=
                       30 as libc::c_int {
                    Math_ApproachF(&mut (*this).unk_2D0, 45.0f32, 0.1f32,
                                   10.0f32);
                    (*this).lensFlareTimer = 1 as libc::c_int as s16;
                    (*this).lensFlareMode = 2 as libc::c_int as u8_0;
                    gCustomLensFlarePos = (*this).unk_278
                }
                if (*this).timers[0 as libc::c_int as usize] as libc::c_int ==
                       47 as libc::c_int {
                    (*this).unk_274 = 1 as libc::c_int as u8_0
                }
                if (*this).timers[0 as libc::c_int as usize] as libc::c_int ==
                       46 as libc::c_int {
                    (*this).unk_274 = 2 as libc::c_int as u8_0
                }
                if (*this).timers[0 as libc::c_int as usize] as libc::c_int ==
                       45 as libc::c_int {
                    (*this).unk_274 = 3 as libc::c_int as u8_0
                }
                if (*this).timers[0 as libc::c_int as usize] as libc::c_int ==
                       44 as libc::c_int {
                    (*this).unk_274 = 4 as libc::c_int as u8_0
                }
                if (*this).timers[0 as libc::c_int as usize] as libc::c_int ==
                       43 as libc::c_int {
                    (*this).unk_274 = 5 as libc::c_int as u8_0
                }
                if (*this).timers[0 as libc::c_int as usize] as libc::c_int ==
                       42 as libc::c_int {
                    (*this).unk_274 = 6 as libc::c_int as u8_0
                }
                if (*this).timers[0 as libc::c_int as usize] as libc::c_int >
                       30 as libc::c_int {
                    sp74.x = 0.0f32;
                    sp74.y = Rand_ZeroFloat(10.0f32) + 150.0f32;
                    sp74.z = 0.0f32;
                    Matrix_RotateY((*this).actor.yawTowardsPlayer as f32_0 /
                                       32768.0f32 * 3.14159265358979323846f32,
                                   MTXMODE_NEW as libc::c_int as u8_0);
                    Matrix_RotateZ(Rand_ZeroFloat(65536.0f32),
                                   MTXMODE_APPLY as libc::c_int as u8_0);
                    Matrix_MultVec3f(&mut sp74, &mut sp68);
                    sp80.x = (*this).unk_278.x + sp68.x;
                    sp80.y = (*this).unk_278.y + sp68.y;
                    sp80.z = (*this).unk_278.z + sp68.z;
                    BossGanonEff_SpawnBlackDot(globalCtx, &mut sp80, 20.0f32);
                }
            }
        }
        3 => {
            (*this).envLightMode = 2 as libc::c_int as s8;
            i = 0 as libc::c_int as s16;
            while (i as libc::c_int) <
                      (::std::mem::size_of::<[f32_0; 15]>() as
                           libc::c_ulong).wrapping_div(::std::mem::size_of::<f32_0>()
                                                           as libc::c_ulong)
                          as s32 {
                Math_ApproachF(&mut *(*this).unk_294.as_mut_ptr().offset(i as
                                                                             isize),
                               0.0f32, 1.0f32, 40.0f32);
                i += 1
            }
            if (*this).timers[0 as libc::c_int as usize] as libc::c_int ==
                   1 as libc::c_int {
                (*sCape).attachLeftArmTimer = 15.0f32;
                Audio_PlayActorSound2(&mut (*this).actor,
                                      0x28c7 as libc::c_int as u16_0);
            }
            if (*this).timers[0 as libc::c_int as usize] as libc::c_int ==
                   0 as libc::c_int {
                Math_ApproachZeroF(&mut (*this).unk_284, 1.0f32, 0.08f32);
                (*this).unk_28C = (*this).unk_284;
                Math_ApproachZeroF(&mut (*this).unk_2D0, 1.0f32, 10.0f32);
                Math_ApproachF(&mut (*this).unk_278.x, (*this).unk_1FC.x,
                               0.5f32, 30.0f32);
                Math_ApproachF(&mut (*this).unk_278.y, (*this).unk_1FC.y,
                               0.5f32, 30.0f32);
                Math_ApproachF(&mut (*this).unk_278.z, (*this).unk_1FC.z,
                               0.5f32, 30.0f32);
            }
            if (*this).timers[1 as libc::c_int as usize] as libc::c_int ==
                   0 as libc::c_int {
                (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] =
                    Animation_GetLastFrame(&mut gDorfBigMagicThrowAnim as
                                               *mut AnimationHeader as
                                               *mut libc::c_void) as f32_0;
                Animation_MorphToLoop(&mut (*this).skelAnime,
                                      &mut gDorfBigMagicThrowAnim, 0.0f32);
                (*this).unk_1C2 = 4 as libc::c_int as s16;
                (*this).unk_288 = 0.0f32;
                (*this).unk_290 = 0.0f32;
                (*this).unk_284 = 0.0f32;
                (*this).unk_28C = 0.0f32
            }
        }
        4 => {
            (*this).envLightMode = 2 as libc::c_int as s8;
            if Animation_OnFrame(&mut (*this).skelAnime, 5.0f32) != 0 {
                i = 0 as libc::c_int as s16;
                while (i as libc::c_int) < 5 as libc::c_int {
                    Actor_SpawnAsChild(&mut (*globalCtx).actorCtx,
                                       &mut (*this).actor, globalCtx,
                                       ACTOR_BOSS_GANON as libc::c_int as s16,
                                       (*this).unk_1FC.x, (*this).unk_1FC.y,
                                       (*this).unk_1FC.z,
                                       0 as libc::c_int as s16,
                                       (*this).actor.yawTowardsPlayer,
                                       0 as libc::c_int as s16,
                                       (0x104 as libc::c_int +
                                            i as libc::c_int) as s16);
                    i += 1
                }
                Audio_PlayActorSound2(&mut (*this).actor,
                                      0x39d4 as libc::c_int as u16_0);
                Audio_PlayActorSound2(&mut (*this).actor,
                                      0x396d as libc::c_int as u16_0);
            }
            if Animation_OnFrame(&mut (*this).skelAnime, 3.0f32) != 0 {
                (*sCape).attachShouldersTimer = 26.0f32;
                Audio_PlayActorSound2(&mut (*this).actor,
                                      0x28c7 as libc::c_int as u16_0);
            }
            if Animation_OnFrame(&mut (*this).skelAnime,
                                 (*this).fwork[GDF_FWORK_1 as libc::c_int as
                                                   usize]) != 0 {
                (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] =
                    Animation_GetLastFrame(&mut gDorfBigMagicThrowEndAnim as
                                               *mut AnimationHeader as
                                               *mut libc::c_void) as f32_0;
                Animation_MorphToLoop(&mut (*this).skelAnime,
                                      &mut gDorfBigMagicThrowEndAnim, 0.0f32);
                (*this).unk_1C2 = 5 as libc::c_int as s16
            }
        }
        5 => {
            (*this).envLightMode = 2 as libc::c_int as s8;
            if Animation_OnFrame(&mut (*this).skelAnime,
                                 (*this).fwork[GDF_FWORK_1 as libc::c_int as
                                                   usize]) != 0 {
                BossGanon_SetupWait(this, globalCtx);
            }
        }
        _ => { }
    };
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_SetupWait(mut this: *mut BossGanon,
                                             mut globalCtx:
                                                 *mut GlobalContext) {
    BossGanon_SetAnimationObject(this, globalCtx,
                                 OBJECT_GANON_ANIME1 as libc::c_int);
    Animation_MorphToLoop(&mut (*this).skelAnime, &mut gDorfFloatAnim,
                          -10.0f32);
    (*this).actionFunc =
        Some(BossGanon_Wait as
                 unsafe extern "C" fn(_: *mut BossGanon,
                                      _: *mut GlobalContext) -> ());
    (*this).fwork[GDF_FWORK_0 as libc::c_int as usize] = 0.0f32;
    (*this).timers[0 as libc::c_int as usize] =
        (Rand_ZeroFloat(64.0f32) as s16 as libc::c_int + 30 as libc::c_int) as
            s16;
    (*this).unk_1C2 = 0 as libc::c_int as s16;
    (*sCape).minY = 2.0f32;
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_Wait(mut this: *mut BossGanon,
                                        mut globalCtx: *mut GlobalContext) {
    let mut sin: f32_0 = 0.;
    let mut pad: s32 = 0;
    let mut cos: f32_0 = 0.;
    let mut player: *mut Player =
        (*globalCtx).actorCtx.actorLists[ACTORCAT_PLAYER as libc::c_int as
                                             usize].head as *mut Player;
    (*this).legSwayEnabled = 1 as libc::c_int as u8_0;
    (*sCape).backPush = -3.0f32;
    (*sCape).backSwayMagnitude = 0.25f32;
    (*sCape).sideSwayMagnitude = -3.0f32;
    (*sCape).minDist = 20.0f32;
    SkelAnime_Update(&mut (*this).skelAnime);
    if (*this).unk_1C2 as libc::c_int == 0 as libc::c_int &&
           !((*player).actor.world.pos.y < 0.0f32) {
        if (*player).stateFlags1 & 0x2000 as libc::c_int as libc::c_uint == 0
               && fabsf((*player).actor.world.pos.x) < 110.0f32 &&
               fabsf((*player).actor.world.pos.z) < 110.0f32 {
            BossGanon_SetupPoundFloor(this, globalCtx);
        } else if (*this).timers[0 as libc::c_int as usize] as libc::c_int ==
                      0 as libc::c_int &&
                      (*player).stateFlags1 &
                          0x2000 as libc::c_int as libc::c_uint == 0 {
            (*this).timers[0 as libc::c_int as usize] =
                (Rand_ZeroFloat(30.0f32) as s16 as libc::c_int +
                     30 as libc::c_int) as s16;
            if (*this).actor.colChkInfo.health as s8 as libc::c_int >=
                   20 as libc::c_int {
                BossGanon_SetupChargeLightBall(this, globalCtx);
            } else if Rand_ZeroOne() >= 0.5f32 {
                if Rand_ZeroOne() >= 0.5f32 ||
                       (*this).actor.xzDistToPlayer > 350.0f32 {
                    BossGanon_SetupChargeBigMagic(this, globalCtx);
                } else { BossGanon_SetupPoundFloor(this, globalCtx); }
            } else { BossGanon_SetupChargeLightBall(this, globalCtx); }
        }
    }
    sin =
        Math_SinS(((*this).unk_1A2 as libc::c_int * 1280 as libc::c_int) as
                      s16) * 100.0f32;
    cos =
        Math_CosS(((*this).unk_1A2 as libc::c_int * 1792 as libc::c_int) as
                      s16) * 100.0f32;
    Math_ApproachF(&mut (*this).actor.world.pos.x, sin, 0.05f32,
                   (*this).fwork[GDF_FWORK_0 as libc::c_int as usize]);
    Math_ApproachF(&mut (*this).actor.world.pos.y, 150.0f32, 0.05f32,
                   (*this).fwork[GDF_FWORK_0 as libc::c_int as usize] *
                       0.2f32);
    Math_ApproachF(&mut (*this).actor.world.pos.z, cos, 0.05f32,
                   (*this).fwork[GDF_FWORK_0 as libc::c_int as usize]);
    Math_ApproachF(&mut *(*this).fwork.as_mut_ptr().offset(GDF_FWORK_0 as
                                                               libc::c_int as
                                                               isize),
                   50.0f32, 1.0f32, 0.5f32);
    (*this).actor.velocity.x =
        (*this).actor.world.pos.x - (*this).actor.prevPos.x;
    (*this).actor.velocity.z =
        (*this).actor.world.pos.z - (*this).actor.prevPos.z;
    sin =
        Math_SinS(((*this).unk_1A2 as libc::c_int * 1500 as libc::c_int) as
                      s16);
    (*this).actor.velocity.y =
        (*this).fwork[GDF_FWORK_0 as libc::c_int as usize] * sin * 0.04f32;
    (*this).actor.world.pos.y += (*this).actor.velocity.y;
    Math_ApproachS(&mut (*this).actor.shape.rot.y,
                   (*this).actor.yawTowardsPlayer, 5 as libc::c_int as s16,
                   0xbb8 as libc::c_int as s16);
    func_80078914(&mut (*this).actor.projectedPos,
                  (0x38a4 as libc::c_int - 0x800 as libc::c_int) as u16_0);
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_SetupChargeLightBall(mut this:
                                                            *mut BossGanon,
                                                        mut globalCtx:
                                                            *mut GlobalContext) {
    BossGanon_SetAnimationObject(this, globalCtx,
                                 OBJECT_GANON_ANIME1 as libc::c_int);
    (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] =
        Animation_GetLastFrame(&mut gDorfChargeLightBallAnim as
                                   *mut AnimationHeader as *mut libc::c_void)
            as f32_0;
    Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                              &mut gDorfChargeLightBallAnim, -3.0f32);
    (*this).actionFunc =
        Some(BossGanon_ChargeLightBall as
                 unsafe extern "C" fn(_: *mut BossGanon,
                                      _: *mut GlobalContext) -> ());
    (*this).timers[0 as libc::c_int as usize] = 25 as libc::c_int as s16;
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_ChargeLightBall(mut this: *mut BossGanon,
                                                   mut globalCtx:
                                                       *mut GlobalContext) {
    SkelAnime_Update(&mut (*this).skelAnime);
    (*sCape).backPush = -3.0f32;
    (*sCape).backSwayMagnitude = 1.25f32;
    (*sCape).sideSwayMagnitude = -2.0f32;
    (*sCape).minDist = 10.0f32;
    if ((*this).timers[0 as libc::c_int as usize] as libc::c_int) <
           17 as libc::c_int {
        (*this).envLightMode = 1 as libc::c_int as s8
    }
    if (*this).timers[0 as libc::c_int as usize] as libc::c_int ==
           17 as libc::c_int {
        (*this).unk_26C = 10 as libc::c_int as s16;
        (*this).unk_270 = Rand_ZeroFloat(3.14159265358979323846f32);
        Audio_PlayActorSound2(&mut (*this).actor,
                              0x3867 as libc::c_int as u16_0);
    }
    if ((*this).timers[0 as libc::c_int as usize] as libc::c_int) <
           10 as libc::c_int {
        (*this).unk_258 +=
            Rand_ZeroFloat(3.14159265358979323846f32 /
                               2 as libc::c_int as libc::c_float) +
                3.14159265358979323846f32 / 2 as libc::c_int as libc::c_float;
        Math_ApproachF(&mut (*this).handLightBallScale, 10.0f32, 0.5f32,
                       1.25f32);
        if (*this).timers[0 as libc::c_int as usize] as libc::c_int ==
               0 as libc::c_int {
            BossGanon_SetupPlayTennis(this, globalCtx);
        }
    }
    Math_ApproachS(&mut (*this).actor.shape.rot.y,
                   (*this).actor.yawTowardsPlayer, 5 as libc::c_int as s16,
                   0x7d0 as libc::c_int as s16);
    (*this).actor.world.pos.x += (*this).actor.velocity.x;
    (*this).actor.world.pos.z += (*this).actor.velocity.z;
    Math_ApproachZeroF(&mut (*this).actor.velocity.x, 1.0f32, 0.5f32);
    Math_ApproachZeroF(&mut (*this).actor.velocity.z, 1.0f32, 0.5f32);
    (*this).actor.velocity.y =
        Math_SinS(((*this).unk_1A2 as libc::c_int * 1500 as libc::c_int) as
                      s16) * 2.0f32;
    (*this).actor.world.pos.y += (*this).actor.velocity.y;
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_SetupPlayTennis(mut this: *mut BossGanon,
                                                   mut globalCtx:
                                                       *mut GlobalContext) {
    BossGanon_SetAnimationObject(this, globalCtx,
                                 OBJECT_GANON_ANIME1 as libc::c_int);
    (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] =
        Animation_GetLastFrame(&mut gDorfThrowAnim as *mut AnimationHeader as
                                   *mut libc::c_void) as f32_0;
    Animation_MorphToPlayOnce(&mut (*this).skelAnime, &mut gDorfThrowAnim,
                              0.0f32);
    (*this).actionFunc =
        Some(BossGanon_PlayTennis as
                 unsafe extern "C" fn(_: *mut BossGanon,
                                      _: *mut GlobalContext) -> ());
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_PlayTennis(mut this: *mut BossGanon,
                                              mut globalCtx:
                                                  *mut GlobalContext) {
    static mut volleyAnims: [*mut AnimationHeader; 2] =
        unsafe {
            [&gDorfVolleyLeftAnim as *const AnimationHeader as
                 *mut AnimationHeader,
             &gDorfVolleyRightAnim as *const AnimationHeader as
                 *mut AnimationHeader]
        };
    static mut capeRightArmDurations: [s16; 2] =
        [26 as libc::c_int as s16, 20 as libc::c_int as s16];
    let mut rand: s16 = 0;
    SkelAnime_Update(&mut (*this).skelAnime);
    Math_ApproachZeroF(&mut (*this).handLightBallScale, 1.0f32, 0.2f32);
    match (*this).unk_1C2 as libc::c_int {
        0 => {
            (*this).envLightMode = 1 as libc::c_int as s8;
            if Animation_OnFrame(&mut (*this).skelAnime,
                                 (*this).fwork[GDF_FWORK_1 as libc::c_int as
                                                   usize]) != 0 {
                (*this).unk_1C2 = 1 as libc::c_int as s16;
                Animation_MorphToLoop(&mut (*this).skelAnime,
                                      &mut gDorfFloatAnim, 0.0f32);
            }
            if (*this).skelAnime.curFrame <= 12.0f32 {
                (*this).lensFlareTimer = 2 as libc::c_int as s16;
                (*this).lensFlareMode = 2 as libc::c_int as u8_0;
                gCustomLensFlarePos = (*this).unk_260
            }
            if Animation_OnFrame(&mut (*this).skelAnime, 12.0f32) != 0 {
                (*this).handLightBallScale = 0.0f32
            }
            if Animation_OnFrame(&mut (*this).skelAnime, 11.0f32) != 0 {
                (*this).unk_25C = 1 as libc::c_int as u8_0;
                Audio_PlayActorSound2(&mut (*this).actor,
                                      0x39c9 as libc::c_int as u16_0);
                Audio_PlayActorSound2(&mut (*this).actor,
                                      0x3825 as libc::c_int as u16_0);
                Actor_SpawnAsChild(&mut (*globalCtx).actorCtx,
                                   &mut (*this).actor, globalCtx,
                                   ACTOR_BOSS_GANON as libc::c_int as s16,
                                   (*this).unk_260.x, (*this).unk_260.y,
                                   (*this).unk_260.z, 0 as libc::c_int as s16,
                                   0 as libc::c_int as s16,
                                   0 as libc::c_int as s16,
                                   0x64 as libc::c_int as s16);
            }
        }
        1 => {
            if (*this).startVolley != 0 {
                rand = (Rand_ZeroOne() * 1.99f32) as s16;
                (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] =
                    Animation_GetLastFrame(volleyAnims[rand as usize] as
                                               *mut libc::c_void) as f32_0;
                Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                          volleyAnims[rand as usize], 0.0f32);
                (*sCape).attachRightArmTimer =
                    capeRightArmDurations[rand as usize] as f32_0;
                Audio_PlayActorSound2(&mut (*this).actor,
                                      0x28c7 as libc::c_int as u16_0);
                (*this).startVolley = 0 as libc::c_int as u8_0
            }
        }
        _ => { }
    }
    Math_ApproachS(&mut (*this).actor.shape.rot.y,
                   (*this).actor.yawTowardsPlayer, 5 as libc::c_int as s16,
                   0x7d0 as libc::c_int as s16);
    (*this).actor.world.pos.x += (*this).actor.velocity.x;
    (*this).actor.world.pos.z += (*this).actor.velocity.z;
    Math_SmoothStepToF(&mut (*this).actor.velocity.x, 0.0f32, 1.0f32, 0.5f32,
                       0.0f32);
    Math_SmoothStepToF(&mut (*this).actor.velocity.z, 0.0f32, 1.0f32, 0.5f32,
                       0.0f32);
    (*this).actor.velocity.y =
        Math_SinS(((*this).unk_1A2 as libc::c_int * 1500 as libc::c_int) as
                      s16) * 2.0f32;
    (*this).actor.world.pos.y += (*this).actor.velocity.y;
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_SetupBlock(mut this: *mut BossGanon,
                                              mut globalCtx:
                                                  *mut GlobalContext) {
    if (*this).actionFunc !=
           Some(BossGanon_Block as
                    unsafe extern "C" fn(_: *mut BossGanon,
                                         _: *mut GlobalContext) -> ()) ||
           (*this).unk_1C2 as libc::c_int != 0 as libc::c_int {
        BossGanon_SetAnimationObject(this, globalCtx,
                                     OBJECT_GANON_ANIME1 as libc::c_int);
        (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] =
            Animation_GetLastFrame(&mut gDorfBlockAnim as *mut AnimationHeader
                                       as *mut libc::c_void) as f32_0;
        Animation_MorphToPlayOnce(&mut (*this).skelAnime, &mut gDorfBlockAnim,
                                  0.0f32);
        (*this).actionFunc =
            Some(BossGanon_Block as
                     unsafe extern "C" fn(_: *mut BossGanon,
                                          _: *mut GlobalContext) -> ())
    }
    (*this).unk_1C2 = 0 as libc::c_int as s16;
    (*this).timers[0 as libc::c_int as usize] = 10 as libc::c_int as s16;
    (*sCape).attachLeftArmTimer =
        (*this).timers[0 as libc::c_int as usize] as f32_0;
    Audio_PlayActorSound2(&mut (*this).actor, 0x28c7 as libc::c_int as u16_0);
    (*this).handLightBallScale = 0.0f32;
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_Block(mut this: *mut BossGanon,
                                         mut globalCtx: *mut GlobalContext) {
    (*this).collider.base.colType = 9 as libc::c_int as u8_0;
    SkelAnime_Update(&mut (*this).skelAnime);
    (*sCape).backPush = -9.0f32;
    (*sCape).backSwayMagnitude = 0.25f32;
    (*sCape).sideSwayMagnitude = -2.0f32;
    (*sCape).minDist = 13.0f32;
    if (*this).unk_1C2 as libc::c_int == 0 as libc::c_int {
        if (*this).timers[0 as libc::c_int as usize] as libc::c_int ==
               0 as libc::c_int {
            (*this).unk_1C2 = 1 as libc::c_int as s16;
            Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                      &mut gDorfBlockReleaseAnim, 0.0f32);
            (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] =
                Animation_GetLastFrame(&mut gDorfBlockReleaseAnim as
                                           *mut AnimationHeader as
                                           *mut libc::c_void) as f32_0;
            SkelAnime_Update(&mut (*this).skelAnime);
            (*sCape).attachShouldersTimer = 15.0f32;
            Audio_PlayActorSound2(&mut (*this).actor,
                                  0x28c7 as libc::c_int as u16_0);
        }
    } else {
        (*sCape).sideSwayMagnitude = -13.0f32;
        if Animation_OnFrame(&mut (*this).skelAnime,
                             (*this).fwork[GDF_FWORK_1 as libc::c_int as
                                               usize]) != 0 {
            BossGanon_SetupWait(this, globalCtx);
        }
    }
    (*this).actor.world.pos.x += (*this).actor.velocity.x;
    (*this).actor.world.pos.y += (*this).actor.velocity.y;
    (*this).actor.world.pos.z += (*this).actor.velocity.z;
    Math_ApproachZeroF(&mut (*this).actor.velocity.x, 1.0f32, 0.5f32);
    Math_ApproachZeroF(&mut (*this).actor.velocity.y, 1.0f32, 0.5f32);
    Math_ApproachZeroF(&mut (*this).actor.velocity.z, 1.0f32, 0.5f32);
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_SetupHitByLightBall(mut this:
                                                           *mut BossGanon,
                                                       mut globalCtx:
                                                           *mut GlobalContext) {
    let mut i: s16 = 0;
    BossGanon_SetAnimationObject(this, globalCtx,
                                 OBJECT_GANON_ANIME1 as libc::c_int);
    (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] =
        Animation_GetLastFrame(&mut gDorfBigMagicHitAnim as
                                   *mut AnimationHeader as *mut libc::c_void)
            as f32_0;
    Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                              &mut gDorfBigMagicHitAnim,
                              0 as libc::c_int as f32_0);
    (*this).timers[0 as libc::c_int as usize] = 70 as libc::c_int as s16;
    (*sCape).attachLeftArmTimer = 0 as libc::c_int as f32_0;
    (*sCape).attachRightArmTimer = (*sCape).attachLeftArmTimer;
    i = 1 as libc::c_int as s16;
    while (i as libc::c_int) < 15 as libc::c_int {
        (*this).unk_4E4[i as usize] = D_808E4C58[i as usize] as s16;
        i += 1
    }
    (*this).unk_2E6 = 80 as libc::c_int as s16;
    (*this).unk_2E8 = 0 as libc::c_int as s16;
    (*this).actionFunc =
        Some(BossGanon_HitByLightBall as
                 unsafe extern "C" fn(_: *mut BossGanon,
                                      _: *mut GlobalContext) -> ());
    (*this).actor.velocity.z = 0.0f32;
    (*this).actor.velocity.x = (*this).actor.velocity.z;
    (*this).unk_1C2 = 0 as libc::c_int as s16;
    (*this).unk_1A6 = 15 as libc::c_int as s16;
    (*this).unk_508 = 6.0f32;
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_HitByLightBall(mut this: *mut BossGanon,
                                                  mut globalCtx:
                                                      *mut GlobalContext) {
    let mut i: s16 = 0;
    let mut sp50: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    SkelAnime_Update(&mut (*this).skelAnime);
    if (*this).unk_1C2 as libc::c_int == 0 as libc::c_int {
        BossGanonEff_SpawnShock(globalCtx, 1500.0f32,
                                GDF_SHOCK_DORF_YELLOW as libc::c_int as s16);
        if Animation_OnFrame(&mut (*this).skelAnime,
                             (*this).fwork[GDF_FWORK_1 as libc::c_int as
                                               usize]) != 0 {
            (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] =
                Animation_GetLastFrame(&mut gDorfLightArrowWaitAnim as
                                           *mut AnimationHeader as
                                           *mut libc::c_void) as f32_0;
            Animation_MorphToLoop(&mut (*this).skelAnime,
                                  &mut gDorfLightArrowWaitAnim, 0.0f32);
            (*this).unk_1C2 = 1 as libc::c_int as s16
        }
    } else if (*this).unk_1C2 as libc::c_int == 1 as libc::c_int {
        BossGanonEff_SpawnShock(globalCtx, 1000.0f32,
                                GDF_SHOCK_DORF_YELLOW as libc::c_int as s16);
        if (*this).timers[0 as libc::c_int as usize] as libc::c_int ==
               0 as libc::c_int {
            (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] =
                Animation_GetLastFrame(&mut gDorfGetUp3Anim as
                                           *mut AnimationHeader as
                                           *mut libc::c_void) as f32_0;
            Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                      &mut gDorfGetUp3Anim, 0.0f32);
            (*this).unk_1C2 = 2 as libc::c_int as s16;
            SkelAnime_Update(&mut (*this).skelAnime);
            (*sCape).attachShouldersTimer = 18.0f32;
            Audio_PlayActorSound2(&mut (*this).actor,
                                  0x28c7 as libc::c_int as u16_0);
            Audio_PlayActorSound2(&mut (*this).actor,
                                  0x39cf as libc::c_int as u16_0);
            (*this).timers[2 as libc::c_int as usize] =
                130 as libc::c_int as s16
        }
    } else {
        if Animation_OnFrame(&mut (*this).skelAnime, 7.0f32) != 0 {
            i = 0 as libc::c_int as s16;
            while (i as libc::c_int) < 100 as libc::c_int {
                sp50.x = Rand_CenteredFloat(25.0f32);
                sp50.y = Rand_CenteredFloat(25.0f32);
                sp50.z = Rand_CenteredFloat(25.0f32);
                BossGanonEff_SpawnSparkle(globalCtx, &mut (*this).unk_1FC,
                                          &mut sp50, &mut sZeroVec,
                                          Rand_ZeroFloat(200.0f32) + 500.0f32,
                                          0x14 as libc::c_int as s16);
                i += 1
            }
            Audio_PlayActorSound2(&mut (*this).actor,
                                  0x806 as libc::c_int as u16_0);
        }
        if Animation_OnFrame(&mut (*this).skelAnime,
                             (*this).fwork[GDF_FWORK_1 as libc::c_int as
                                               usize]) != 0 {
            BossGanon_SetupWait(this, globalCtx);
        }
    }
    (*this).actor.velocity.y =
        Math_SinS(((*this).unk_1A2 as libc::c_int * 1500 as libc::c_int) as
                      s16) * 2.0f32;
    (*this).actor.world.pos.y += (*this).actor.velocity.y;
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_SetupVulnerable(mut this: *mut BossGanon,
                                                   mut globalCtx:
                                                       *mut GlobalContext) {
    let mut i: s16 = 0;
    if (*this).actionFunc !=
           Some(BossGanon_Vulnerable as
                    unsafe extern "C" fn(_: *mut BossGanon,
                                         _: *mut GlobalContext) -> ()) {
        BossGanon_SetAnimationObject(this, globalCtx,
                                     OBJECT_GANON_ANIME1 as libc::c_int);
        (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] =
            Animation_GetLastFrame(&mut gDorfLightArrowHitAnim as
                                       *mut AnimationHeader as
                                       *mut libc::c_void) as f32_0;
        Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                  &mut gDorfLightArrowHitAnim, 0.0f32);
        (*sCape).attachLeftArmTimer = 0 as libc::c_int as f32_0;
        (*sCape).attachRightArmTimer = (*sCape).attachLeftArmTimer;
        (*this).actionFunc =
            Some(BossGanon_Vulnerable as
                     unsafe extern "C" fn(_: *mut BossGanon,
                                          _: *mut GlobalContext) -> ());
        (*this).actor.velocity.x = 0.0f32;
        (*this).actor.velocity.y = 0.0f32;
        (*this).actor.velocity.z = 0.0f32;
        (*this).unk_1C2 = 0 as libc::c_int as s16;
        (*sCape).backPush = -4.0f32;
        (*sCape).backSwayMagnitude = 0.75f32;
        (*sCape).sideSwayMagnitude = -3.0f32;
        (*sCape).minDist = 20.0f32;
        i = 0 as libc::c_int as s16;
        while (i as libc::c_int) < 10 as libc::c_int {
            Actor_SpawnAsChild(&mut (*globalCtx).actorCtx, &mut (*this).actor,
                               globalCtx,
                               ACTOR_BOSS_GANON as libc::c_int as s16,
                               (*this).unk_1FC.x, (*this).unk_1FC.y,
                               (*this).unk_1FC.z,
                               Rand_CenteredFloat(0x8000 as libc::c_int as
                                                      f32_0) as s16,
                               (Rand_CenteredFloat(0x8000 as libc::c_int as
                                                       f32_0) as s16 as
                                    libc::c_int +
                                    (*this).actor.yawTowardsPlayer as
                                        libc::c_int) as s16,
                               0 as libc::c_int as s16,
                               (0xc8 as libc::c_int + i as libc::c_int) as
                                   s16);
            i += 1
        }
        (*this).unk_1A4 = 0 as libc::c_int as s16;
        (*this).unk_288 = 0.0f32;
        (*this).unk_290 = 0.0f32;
        (*this).unk_284 = 0.0f32;
        (*this).unk_28C = 0.0f32
    };
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_Vulnerable(mut this: *mut BossGanon,
                                              mut globalCtx:
                                                  *mut GlobalContext) {
    let mut i: s16 = 0;
    let mut sp40: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    if (*this).timers[3 as libc::c_int as usize] as libc::c_int ==
           0 as libc::c_int {
        (*this).actor.flags |=
            ((1 as libc::c_int) << 0 as libc::c_int) as libc::c_uint
    }
    SkelAnime_Update(&mut (*this).skelAnime);
    (*this).envLightMode = 1 as libc::c_int as s8;
    (*this).actor.world.pos.y += (*this).actor.velocity.y;
    if ((*this).unk_1A4 as libc::c_int) < 0x28 as libc::c_int {
        Math_ApproachF(&mut (*this).unk_508, 4.0f32, 0.1f32, 0.1f32);
    }
    if (*this).unk_1A4 as libc::c_int >= 0x28 as libc::c_int &&
           ((*this).unk_1A4 as libc::c_int) < 0x37 as libc::c_int {
        Math_ApproachF(&mut (*this).unk_508, 0.0f32, 1.0f32, 0.5f32);
    }
    if (*this).unk_1A4 as libc::c_int >= 0x37 as libc::c_int {
        Math_ApproachF(&mut (*this).unk_508, 5.0f32, 0.1f32, 0.15f32);
        (*this).shockGlow = 1 as libc::c_int as u8_0
    }
    match (*this).unk_1C2 as libc::c_int {
        0 => {
            if Animation_OnFrame(&mut (*this).skelAnime,
                                 (*this).fwork[GDF_FWORK_1 as libc::c_int as
                                                   usize]) != 0 {
                (*this).unk_1C2 = 1 as libc::c_int as s16;
                (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] =
                    Animation_GetLastFrame(&mut gDorfLightEnergyHitAnim as
                                               *mut AnimationHeader as
                                               *mut libc::c_void) as f32_0;
                Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                          &mut gDorfLightEnergyHitAnim,
                                          0.0f32);
            }
        }
        1 => {
            if Animation_OnFrame(&mut (*this).skelAnime,
                                 (*this).fwork[GDF_FWORK_1 as libc::c_int as
                                                   usize]) != 0 {
                (*this).unk_1C2 = 2 as libc::c_int as s16;
                (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] =
                    Animation_GetLastFrame(&mut gDorfKneelVulnerableAnim as
                                               *mut AnimationHeader as
                                               *mut libc::c_void) as f32_0;
                Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                          &mut gDorfKneelVulnerableAnim,
                                          0.0f32);
            }
        }
        2 => {
            (*sCape).minDist = 0.0f32;
            (*this).actor.velocity.y = (*this).actor.velocity.y - 0.5f32;
            if (*this).actor.world.pos.y < 40.0f32 {
                (*this).actor.world.pos.y = 40.0f32;
                (*this).actor.velocity.y = 0.0f32;
                (*this).unk_1C2 = 3 as libc::c_int as s16;
                (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] =
                    Animation_GetLastFrame(&mut gDorfLandAnim as
                                               *mut AnimationHeader as
                                               *mut libc::c_void) as f32_0;
                Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                          &mut gDorfLandAnim, 0.0f32);
                (*this).timers[0 as libc::c_int as usize] =
                    70 as libc::c_int as s16;
                (*this).actor.flags |=
                    ((1 as libc::c_int) << 10 as libc::c_int) as libc::c_uint
            }
        }
        3 => {
            if (*this).timers[0 as libc::c_int as usize] as libc::c_int ==
                   68 as libc::c_int {
                (*this).unk_19F = 1 as libc::c_int as u8_0
            }
            if Animation_OnFrame(&mut (*this).skelAnime,
                                 (*this).fwork[GDF_FWORK_1 as libc::c_int as
                                                   usize]) != 0 {
                (*this).unk_1C2 = 4 as libc::c_int as s16;
                (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] =
                    Animation_GetLastFrame(&mut gDorfVulnerableAnim as
                                               *mut AnimationHeader as
                                               *mut libc::c_void) as f32_0;
                Animation_MorphToLoop(&mut (*this).skelAnime,
                                      &mut gDorfVulnerableAnim, 0.0f32);
            }
        }
        4 => {
            if Animation_OnFrame(&mut (*this).skelAnime, 5.0f32) != 0 {
                Audio_PlayActorSound2(&mut (*this).actor,
                                      0x39ce as libc::c_int as u16_0);
            }
            if (*this).timers[0 as libc::c_int as usize] as libc::c_int ==
                   0 as libc::c_int {
                (*this).unk_1C2 = 5 as libc::c_int as s16;
                (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] =
                    Animation_GetLastFrame(&mut gDorfGetUp1Anim as
                                               *mut AnimationHeader as
                                               *mut libc::c_void) as f32_0;
                Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                          &mut gDorfGetUp1Anim, 0.0f32);
                (*this).unk_2D4 = 80 as libc::c_int as s16;
                i = 1 as libc::c_int as s16;
                while (i as libc::c_int) < 15 as libc::c_int {
                    (*this).unk_4E4[i as usize] =
                        Rand_ZeroFloat(10.0f32) as s16;
                    i += 1
                }
                (*this).unk_2E6 = 80 as libc::c_int as s16;
                (*this).unk_2E8 = 0 as libc::c_int as s16;
                (*this).actor.flags &=
                    !((1 as libc::c_int) << 10 as libc::c_int) as libc::c_uint
            }
        }
        5 => {
            BossGanonEff_SpawnShock(globalCtx, 1000.0f32,
                                    GDF_SHOCK_DORF_YELLOW as libc::c_int as
                                        s16);
            if Animation_OnFrame(&mut (*this).skelAnime,
                                 (*this).fwork[GDF_FWORK_1 as libc::c_int as
                                                   usize]) != 0 {
                (*this).unk_1C2 = 6 as libc::c_int as s16;
                (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] =
                    Animation_GetLastFrame(&mut gDorfGetUp2Anim as
                                               *mut AnimationHeader as
                                               *mut libc::c_void) as f32_0;
                Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                          &mut gDorfGetUp2Anim, 0.0f32);
                (*sCape).minDist = 20.0f32;
                (*this).unk_19F = 1 as libc::c_int as u8_0
            }
        }
        6 => {
            (*this).envLightMode = 0 as libc::c_int as s8;
            Math_ApproachF(&mut (*this).actor.world.pos.y, 200.0f32, 0.1f32,
                           1000.0f32);
            if Animation_OnFrame(&mut (*this).skelAnime,
                                 (*this).fwork[GDF_FWORK_1 as libc::c_int as
                                                   usize]) != 0 {
                (*this).unk_1C2 = 7 as libc::c_int as s16
            }
        }
        7 => {
            (*this).envLightMode = 0 as libc::c_int as s8;
            Math_ApproachF(&mut (*this).actor.world.pos.y, 150.0f32, 0.05f32,
                           30.0f32);
            (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] =
                Animation_GetLastFrame(&mut gDorfGetUp3Anim as
                                           *mut AnimationHeader as
                                           *mut libc::c_void) as f32_0;
            Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                      &mut gDorfGetUp3Anim, 0.0f32);
            (*this).unk_1C2 = 8 as libc::c_int as s16;
            SkelAnime_Update(&mut (*this).skelAnime);
            (*sCape).attachShouldersTimer = 18.0f32;
            Audio_PlayActorSound2(&mut (*this).actor,
                                  0x28c7 as libc::c_int as u16_0);
            Audio_PlayActorSound2(&mut (*this).actor,
                                  0x39cf as libc::c_int as u16_0);
        }
        8 => {
            (*this).envLightMode = 0 as libc::c_int as s8;
            if Animation_OnFrame(&mut (*this).skelAnime, 7.0f32) != 0 {
                i = 0 as libc::c_int as s16;
                while (i as libc::c_int) < 100 as libc::c_int {
                    sp40.x = Rand_CenteredFloat(25.0f32);
                    sp40.y = Rand_CenteredFloat(25.0f32);
                    sp40.z = Rand_CenteredFloat(25.0f32);
                    BossGanonEff_SpawnSparkle(globalCtx, &mut (*this).unk_1FC,
                                              &mut sp40, &mut sZeroVec,
                                              Rand_ZeroFloat(200.0f32) +
                                                  500.0f32,
                                              0x14 as libc::c_int as s16);
                    i += 1
                }
                Audio_PlayActorSound2(&mut (*this).actor,
                                      0x806 as libc::c_int as u16_0);
                (*this).timers[3 as libc::c_int as usize] =
                    50 as libc::c_int as s16
            }
            if Animation_OnFrame(&mut (*this).skelAnime,
                                 (*this).fwork[GDF_FWORK_1 as libc::c_int as
                                                   usize]) != 0 {
                BossGanon_SetupWait(this, globalCtx);
            }
        }
        _ => { }
    };
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_SetupDamaged(mut this: *mut BossGanon,
                                                mut globalCtx:
                                                    *mut GlobalContext) {
    BossGanon_SetAnimationObject(this, globalCtx,
                                 OBJECT_GANON_ANIME1 as libc::c_int);
    (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] =
        Animation_GetLastFrame(&mut gDorfDamageAnim as *mut AnimationHeader as
                                   *mut libc::c_void) as f32_0;
    Animation_MorphToPlayOnce(&mut (*this).skelAnime, &mut gDorfDamageAnim,
                              0.0f32);
    (*this).actionFunc =
        Some(BossGanon_Damaged as
                 unsafe extern "C" fn(_: *mut BossGanon,
                                      _: *mut GlobalContext) -> ());
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_Damaged(mut this: *mut BossGanon,
                                           mut globalCtx:
                                               *mut GlobalContext) {
    (*this).actor.flags |=
        ((1 as libc::c_int) << 0 as libc::c_int) as libc::c_uint;
    SkelAnime_Update(&mut (*this).skelAnime);
    if (*this).unk_1A4 as libc::c_int >= 0x37 as libc::c_int {
        Math_ApproachF(&mut (*this).unk_508, 5.0f32, 0.1f32, 0.15f32);
        (*this).shockGlow = 1 as libc::c_int as u8_0
    }
    if Animation_OnFrame(&mut (*this).skelAnime,
                         (*this).fwork[GDF_FWORK_1 as libc::c_int as usize])
           != 0 {
        (*this).actionFunc =
            Some(BossGanon_Vulnerable as
                     unsafe extern "C" fn(_: *mut BossGanon,
                                          _: *mut GlobalContext) -> ());
        (*this).unk_1C2 = 4 as libc::c_int as s16;
        (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] =
            Animation_GetLastFrame(&mut gDorfVulnerableAnim as
                                       *mut AnimationHeader as
                                       *mut libc::c_void) as f32_0;
        Animation_MorphToLoop(&mut (*this).skelAnime,
                              &mut gDorfVulnerableAnim, 0.0f32);
    };
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_UpdateDamage(mut this: *mut BossGanon,
                                                mut globalCtx:
                                                    *mut GlobalContext) {
    let mut i: s16 = 0;
    let mut j: s16 = 0;
    let mut acHitInfo: *mut ColliderInfo = 0 as *mut ColliderInfo;
    if (*this).collider.base.acFlags as libc::c_int & 2 as libc::c_int != 0 {
        (*this).unk_2D4 = 2 as libc::c_int as s16;
        (*this).collider.base.acFlags =
            ((*this).collider.base.acFlags as libc::c_int &
                 !(2 as libc::c_int)) as u8_0;
        acHitInfo = (*this).collider.info.acHitInfo;
        if (*this).actionFunc ==
               Some(BossGanon_HitByLightBall as
                        unsafe extern "C" fn(_: *mut BossGanon,
                                             _: *mut GlobalContext) -> ()) ||
               (*this).actionFunc ==
                   Some(BossGanon_ChargeBigMagic as
                            unsafe extern "C" fn(_: *mut BossGanon,
                                                 _: *mut GlobalContext) -> ())
           {
            if (*acHitInfo).toucher.dmgFlags &
                   0x2000 as libc::c_int as libc::c_uint != 0 {
                BossGanon_SetupVulnerable(this, globalCtx);
                (*this).timers[2 as libc::c_int as usize] =
                    0 as libc::c_int as s16;
                Audio_PlayActorSound2(&mut (*this).actor,
                                      0x39cc as libc::c_int as u16_0);
                (*this).unk_1A6 = 15 as libc::c_int as s16
            }
        } else if (*this).actionFunc ==
                      Some(BossGanon_Vulnerable as
                               unsafe extern "C" fn(_: *mut BossGanon,
                                                    _: *mut GlobalContext)
                                   -> ()) &&
                      (*this).unk_1C2 as libc::c_int >= 3 as libc::c_int {
            if (*acHitInfo).toucher.dmgFlags &
                   0x80 as libc::c_int as libc::c_uint == 0 {
                let mut hitWithSword: u8_0 = 0 as libc::c_int as u8_0;
                let mut damage: u8_0 = 0;
                let mut sp50: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
                let mut flags: u32_0 = 0;
                i = 0 as libc::c_int as s16;
                while (i as libc::c_int) < 30 as libc::c_int {
                    sp50.x = Rand_CenteredFloat(20.0f32);
                    sp50.y = Rand_CenteredFloat(20.0f32);
                    sp50.z = Rand_CenteredFloat(20.0f32);
                    BossGanonEff_SpawnSparkle(globalCtx, &mut (*this).unk_1FC,
                                              &mut sp50, &mut sZeroVec,
                                              Rand_ZeroFloat(200.0f32) +
                                                  500.0f32,
                                              0x1e as libc::c_int as s16);
                    i += 1
                }
                flags =
                    CollisionCheck_GetSwordDamage((*acHitInfo).toucher.dmgFlags
                                                      as s32) as u32_0;
                damage = flags as u8_0;
                if flags == 0 as libc::c_int as libc::c_uint {
                    damage = 2 as libc::c_int as u8_0
                } else { hitWithSword = 1 as libc::c_int as u8_0 }
                if (*this).actor.colChkInfo.health as s8 as libc::c_int >=
                       3 as libc::c_int || hitWithSword as libc::c_int != 0 {
                    (*this).actor.colChkInfo.health =
                        ((*this).actor.colChkInfo.health as libc::c_int -
                             damage as libc::c_int) as u8_0
                }
                i = 0 as libc::c_int as s16;
                while (i as libc::c_int) <
                          (::std::mem::size_of::<[MantStrand; 12]>() as
                               libc::c_ulong).wrapping_div(::std::mem::size_of::<MantStrand>()
                                                               as
                                                               libc::c_ulong)
                              as s32 {
                    j = 1 as libc::c_int as s16;
                    while (j as libc::c_int) < 12 as libc::c_int {
                        (*sCape).strands[i as usize].velocities[j as usize].x
                            = Rand_CenteredFloat(15.0f32);
                        (*sCape).strands[i as usize].velocities[j as usize].z
                            = Rand_CenteredFloat(15.0f32);
                        j += 1
                    }
                    i += 1
                }
                if (*this).actor.colChkInfo.health as s8 as libc::c_int <=
                       0 as libc::c_int {
                    BossGanon_SetupDeathCutscene(this, globalCtx);
                    Audio_PlayActorSound2(&mut (*this).actor,
                                          0x39d0 as libc::c_int as u16_0);
                    Audio_PlayActorSound2(&mut (*this).actor,
                                          0x3827 as libc::c_int as u16_0);
                    func_80078914(&mut sZeroVec,
                                  0x388b as libc::c_int as u16_0);
                    Audio_QueueSeqCmd(0x100100ff as libc::c_int as u32_0);
                    (*this).screenFlashTimer = 4 as libc::c_int as s16
                } else {
                    Audio_PlayActorSound2(&mut (*this).actor,
                                          0x39cd as libc::c_int as u16_0);
                    Audio_PlayActorSound2(&mut (*this).actor,
                                          0x3919 as libc::c_int as u16_0);
                    BossGanon_SetupDamaged(this, globalCtx);
                    (*this).unk_1A6 = 15 as libc::c_int as s16;
                    (*sCape).tearTimer = 1 as libc::c_int as u8_0
                }
            }
        } else if (*acHitInfo).toucher.dmgFlags &
                      0x1f8a4 as libc::c_int as libc::c_uint != 0 {
            Audio_PlayActorSound2(&mut (*this).actor,
                                  0 as libc::c_int as u16_0);
            i = 0 as libc::c_int as s16;
            while (i as libc::c_int) <
                      (::std::mem::size_of::<[MantStrand; 12]>() as
                           libc::c_ulong).wrapping_div(::std::mem::size_of::<MantStrand>()
                                                           as libc::c_ulong)
                          as s32 {
                j = 1 as libc::c_int as s16;
                while (j as libc::c_int) < 12 as libc::c_int {
                    (*sCape).strands[i as usize].velocities[j as usize].x =
                        Rand_CenteredFloat(15.0f32);
                    (*sCape).strands[i as usize].velocities[j as usize].z =
                        Rand_CenteredFloat(15.0f32);
                    j += 1
                }
                i += 1
            }
        }
    };
}
static mut D_808E4D44: [f32_0; 15] =
    [1.0f32, 3.0f32, 0.0f32, 7.0f32, 13.0f32, 4.0f32, 6.0f32, 11.0f32, 5.0f32,
     2.0f32, 8.0f32, 14.0f32, 10.0f32, 12.0f32, 9.0f32];
#[no_mangle]
pub unsafe extern "C" fn BossGanon_Update(mut thisx: *mut Actor,
                                          mut globalCtx2:
                                              *mut GlobalContext) {
    let mut this: *mut BossGanon = thisx as *mut BossGanon;
    let mut globalCtx: *mut GlobalContext = globalCtx2;
    let mut legRotX: f32_0 = 0.;
    let mut legRotY: f32_0 = 0.;
    let mut legRotZ: f32_0 = 0.;
    let mut player: *mut Player =
        (*globalCtx).actorCtx.actorLists[ACTORCAT_PLAYER as libc::c_int as
                                             usize].head as *mut Player;
    let mut i: s16 = 0;
    let mut sin: f32_0 = 0.;
    let mut cos: f32_0 = 0.;
    let mut shardPos: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut shardVel: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut spE8: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut i2: s16 = 0;
    let mut j: s16 = 0;
    let mut spD8: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut platformCheckPos: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut explosive: *mut Actor = 0 as *mut Actor;
    let mut spBC: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut spB0: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut platCheckPosBomb: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut prop: *mut Actor = 0 as *mut Actor;
    let mut platform: *mut BgGanonOtyuka = 0 as *mut BgGanonOtyuka;
    let mut targetLensFlareScale: f32_0 = 0.;
    let mut xOffset: f32_0 = 0.;
    let mut zOffset: f32_0 = 0.;
    if (*this).actionFunc !=
           Some(BossGanon_IntroCutscene as
                    unsafe extern "C" fn(_: *mut BossGanon,
                                         _: *mut GlobalContext) -> ()) &&
           (*this).actionFunc !=
               Some(BossGanon_DeathAndTowerCutscene as
                        unsafe extern "C" fn(_: *mut BossGanon,
                                             _: *mut GlobalContext) -> ()) {
        BossGanon_SetAnimationObject(this, globalCtx,
                                     OBJECT_GANON_ANIME1 as libc::c_int);
    } else {
        gSegments[6 as libc::c_int as usize] =
            ((*globalCtx).objectCtx.status[(*this).animBankIndex as
                                               usize].segment as
                 *mut u8_0).offset(-(0x80000000 as libc::c_uint as isize)) as
                u32_0
    }
    if (*this).windowShatterState as libc::c_int !=
           GDF_WINDOW_SHATTER_OFF as libc::c_int {
        BossGanon_ShatterWindows((*this).windowShatterState);
        shardVel.y = 0.0f32;
        i = 0 as libc::c_int as s16;
        while (i as libc::c_int) < 10 as libc::c_int {
            shardPos.y = Rand_ZeroFloat(240.0f32) + 20.0f32;
            if Rand_ZeroOne() < 0.5f32 {
                shardPos.x = 463 as libc::c_int as f32_0;
                shardPos.z = Rand_ZeroFloat(463.0f32);
                shardVel.x = Rand_ZeroFloat(2.0f32);
                shardVel.z = Rand_ZeroFloat(1.0f32)
            } else {
                shardPos.z = 463 as libc::c_int as f32_0;
                shardPos.x = Rand_ZeroFloat(463.0f32);
                shardVel.z = Rand_ZeroFloat(2.0f32);
                shardVel.x = Rand_ZeroFloat(1.0f32)
            }
            BossGanonEff_SpawnWindowShard(globalCtx, &mut shardPos,
                                          &mut shardVel,
                                          Rand_ZeroFloat(0.075f32) + 0.08f32);
            i += 1
        }
    }
    (*this).collider.base.colType = 3 as libc::c_int as u8_0;
    (*sCape).gravity = -3.0f32;
    (*this).shockGlow = 0 as libc::c_int as u8_0;
    (*this).actor.flags &=
        !((1 as libc::c_int) << 0 as libc::c_int) as libc::c_uint;
    (*this).unk_1A2 += 1;
    (*this).unk_1A4 += 1;
    // block players attack if hes shooting something
    if (*this).actionFunc ==
           Some(BossGanon_Wait as
                    unsafe extern "C" fn(_: *mut BossGanon,
                                         _: *mut GlobalContext) -> ()) ||
           (*this).actionFunc ==
               Some(BossGanon_Block as
                        unsafe extern "C" fn(_: *mut BossGanon,
                                             _: *mut GlobalContext) -> ()) {
        if (*player).unk_A73 as libc::c_int != 0 as libc::c_int {
            BossGanon_SetupBlock(this, globalCtx);
        }
    }
    (*this).actionFunc.expect("non-null function pointer")(this, globalCtx);
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) <
              (::std::mem::size_of::<[s16; 5]>() as
                   libc::c_ulong).wrapping_div(::std::mem::size_of::<s16>() as
                                                   libc::c_ulong) as s32 {
        if (*this).timers[i as usize] as libc::c_int != 0 as libc::c_int {
            (*this).timers[i as usize] -= 1
        }
        i += 1
    }
    if (*this).unk_1A6 as libc::c_int != 0 as libc::c_int {
        (*this).unk_1A6 -= 1
    }
    if (*this).unk_2D4 as libc::c_int != 0 as libc::c_int {
        (*this).unk_2D4 -= 1
    }
    if (*this).unk_2E8 as libc::c_int != 0 as libc::c_int {
        (*this).unk_2E8 -= 1
    }
    if (*this).unk_2E6 as libc::c_int != 0 as libc::c_int {
        (*this).unk_2E6 -= 1
    }
    if (*this).unk_19C as libc::c_int != 0 as libc::c_int {
        (*this).unk_19C -= 1
    }
    if (*this).csState as libc::c_int == 0 as libc::c_int {
        BossGanon_UpdateDamage(this, globalCtx);
        BossGanon_SetColliderPos(&mut (*this).unk_1FC, &mut (*this).collider);
        CollisionCheck_SetOC(globalCtx, &mut (*globalCtx).colChkCtx,
                             &mut (*this).collider.base);
        if (*this).unk_2D4 as libc::c_int == 0 as libc::c_int {
            CollisionCheck_SetAC(globalCtx, &mut (*globalCtx).colChkCtx,
                                 &mut (*this).collider.base);
            if (*this).actionFunc !=
                   Some(BossGanon_HitByLightBall as
                            unsafe extern "C" fn(_: *mut BossGanon,
                                                 _: *mut GlobalContext) -> ())
                   &&
                   (*this).actionFunc !=
                       Some(BossGanon_Vulnerable as
                                unsafe extern "C" fn(_: *mut BossGanon,
                                                     _: *mut GlobalContext)
                                    -> ()) &&
                   (*this).actionFunc !=
                       Some(BossGanon_Damaged as
                                unsafe extern "C" fn(_: *mut BossGanon,
                                                     _: *mut GlobalContext)
                                    -> ()) {
                CollisionCheck_SetAT(globalCtx, &mut (*globalCtx).colChkCtx,
                                     &mut (*this).collider.base);
            }
        }
    }
    if (*this).legSwayEnabled != 0 {
        sin = Math_SinS(-((*this).actor.shape.rot.y as libc::c_int) as s16);
        cos = Math_CosS(-((*this).actor.shape.rot.y as libc::c_int) as s16);
        legRotX =
            ((*this).actor.velocity.z * sin + cos * (*this).actor.velocity.x)
                * 300.0f32;
        legRotY =
            (-sin * (*this).actor.velocity.x + cos * (*this).actor.velocity.z)
                * 300.0f32;
        legRotZ =
            Math_SinS(((*this).unk_1A2 as libc::c_int * 2268 as libc::c_int)
                          as s16) * -500.0f32 - 500.0f32
    } else { legRotZ = 0.0f32; legRotX = legRotZ; legRotY = legRotX }
    (*this).legSwayEnabled = 0 as libc::c_int as u8_0;
    Math_SmoothStepToF(&mut (*this).legRot.x, legRotX, 1.0f32, 600.0f32,
                       0.0f32);
    Math_SmoothStepToF(&mut (*this).legRot.y, legRotY, 1.0f32, 600.0f32,
                       0.0f32);
    Math_SmoothStepToF(&mut (*this).legRot.z, legRotZ, 1.0f32, 100.0f32,
                       0.0f32);
    if (*this).timers[2 as libc::c_int as usize] as libc::c_int ==
           1 as libc::c_int {
        Audio_PlayActorSound2(&mut (*this).actor,
                              0x39c7 as libc::c_int as u16_0);
    }
    if (*this).timers[2 as libc::c_int as usize] as libc::c_int ==
           100 as libc::c_int {
        Audio_PlayActorSound2(&mut (*this).actor,
                              0x39d6 as libc::c_int as u16_0);
        (*this).timers[2 as libc::c_int as usize] = 0 as libc::c_int as s16
    }
    if (*this).unk_2E6 as libc::c_int != 0 as libc::c_int ||
           (*this).unk_2E8 as libc::c_int != 0 as libc::c_int {
        i = 1 as libc::c_int as s16;
        while (i as libc::c_int) <
                  (::std::mem::size_of::<[f32_0; 18]>() as
                       libc::c_ulong).wrapping_div(::std::mem::size_of::<f32_0>()
                                                       as libc::c_ulong) as
                      s32 {
            if (*this).unk_4E4[i as usize] as libc::c_int != 0 as libc::c_int
               {
                (*this).unk_4E4[i as usize] -= 1;
                Math_ApproachF(&mut *(*this).unk_49C.as_mut_ptr().offset(i as
                                                                             isize),
                               (*this).unk_508, 1.0f32, 2.0f32);
            } else {
                Math_ApproachZeroF(&mut *(*this).unk_49C.as_mut_ptr().offset(i
                                                                                 as
                                                                                 isize),
                                   1.0f32, 0.2f32);
            }
            i += 1
        }
        // player hit, spawn shock and play sound
        if (*this).unk_2E8 as libc::c_int != 0 as libc::c_int {
            func_80078914(&mut (*player).actor.projectedPos,
                          (0x868 as libc::c_int - 0x800 as libc::c_int) as
                              u16_0);
            BossGanonEff_SpawnShock(globalCtx, 700.0f32,
                                    GDF_SHOCK_PLAYER_YELLOW as libc::c_int as
                                        s16);
        }
    }
    if (*this).unk_19F as libc::c_int != 0 as libc::c_int {
        (*this).unk_19F = 0 as libc::c_int as u8_0;
        spE8 = (*this).actor.world.pos;
        spE8.y = 0.0f32;
        BossGanonEff_SpawnDustDark(globalCtx, &mut spE8, 0.2f64 as f32_0,
                                   0.7f32);
        BossGanonEff_SpawnDustDark(globalCtx, &mut spE8, 0.3f32, 0.8f32);
    }
    if (*this).unk_26C as libc::c_int != 0 as libc::c_int {
        (*this).unk_26C -= 1;
        if (*this).unk_26C as libc::c_int == 0 as libc::c_int {
            BossGanonEff_SpawnLightning(globalCtx, 1.0f32, 0.0f32, 0.0f32);
        }
        BossGanonEff_SpawnLightning(globalCtx, 1.0f32,
                                    D_808E4D44[(*this).unk_26C as usize] *
                                        (3.14159265358979323846f32 /
                                             5 as libc::c_int as
                                                 libc::c_float) +
                                        (*this).unk_270,
                                    Rand_CenteredFloat(3.14159265358979323846f32
                                                           /
                                                           5 as libc::c_int as
                                                               libc::c_float)
                                        +
                                        3.14159265358979323846f32 /
                                            2 as libc::c_int as
                                                libc::c_float);
    }
    // see if light ball hit and should knock platform down?
    if (*this).unk_19C as libc::c_int != 0 as libc::c_int &&
           ((*this).unk_19E as libc::c_int) < 4 as libc::c_int {
        if (*this).unk_19A as libc::c_int == 0 as libc::c_int &&
               (*this).unk_19C as libc::c_int == 20 as libc::c_int {
            (*this).unk_19A = 1 as libc::c_int as u8_0;
            platformCheckPos.x = -180.0f32;
            platformCheckPos.y = 0.0f32;
            i2 = 0 as libc::c_int as s16;
            while (i2 as libc::c_int) < 4 as libc::c_int {
                j = 0 as libc::c_int as s16;
                platformCheckPos.z = -180.0f32;
                while (j as libc::c_int) < 4 as libc::c_int {
                    BossGanon_CheckFallingPlatforms(this, globalCtx,
                                                    &mut platformCheckPos);
                    platformCheckPos.z += 120.0f32;
                    j += 1
                }
                platformCheckPos.x += 120.0f32;
                i2 += 1
            }
        } else if ((*this).unk_19C as libc::c_int) < 30 as libc::c_int {
            spD8.x = 0.0f32;
            spD8.y = 0.0f32;
            spD8.z =
                15.0f32 *
                    (30.0f32 -
                         (*this).unk_19C as libc::c_int as libc::c_float);
            Matrix_RotateY(Rand_ZeroFloat(6.2831855f32),
                           MTXMODE_NEW as libc::c_int as u8_0);
            Matrix_MultVec3f(&mut spD8, &mut platformCheckPos);
            (*this).unk_19E =
                ((*this).unk_19E as libc::c_int +
                     BossGanon_CheckFallingPlatforms(this, globalCtx,
                                                     &mut platformCheckPos))
                    as u8_0
        }
    }
    // see if a bomb exploded near a group of platforms and if they should fall
    explosive =
        (*globalCtx).actorCtx.actorLists[ACTORCAT_EXPLOSIVE as libc::c_int as
                                             usize].head;
    while !explosive.is_null() {
        if (*explosive).params as libc::c_int != BOMB_EXPLOSION as libc::c_int
           {
            explosive = (*explosive).next
        } else {
            i = 0 as libc::c_int as s16;
            while (i as libc::c_int) < 8 as libc::c_int {
                spBC.x = 0.0f32;
                spBC.y = 0.0f32;
                spBC.z = 60.0f32;
                Matrix_RotateY(i as libc::c_int as libc::c_float *
                                   (3.14159265358979323846f32 /
                                        4 as libc::c_int as libc::c_float),
                               MTXMODE_NEW as libc::c_int as u8_0);
                Matrix_MultVec3f(&mut spBC, &mut spB0);
                platCheckPosBomb.x = (*explosive).world.pos.x + spB0.x;
                platCheckPosBomb.y = (*explosive).world.pos.y;
                platCheckPosBomb.z = (*explosive).world.pos.z + spB0.z;
                BossGanon_CheckFallingPlatforms(this, globalCtx,
                                                &mut platCheckPosBomb);
                i += 1
            }
            explosive = (*explosive).next
        }
    }
    BossGanon_UpdateEffects(globalCtx);
    prop =
        (*globalCtx).actorCtx.actorLists[ACTORCAT_PROP as libc::c_int as
                                             usize].head;
    // if a platform is lit up, change the room lighting
    while !prop.is_null() {
        if (*prop).id as libc::c_int != ACTOR_BG_GANON_OTYUKA as libc::c_int {
            prop = (*prop).next
        } else {
            platform = prop as *mut BgGanonOtyuka;
            if (*platform).flashState as libc::c_int != 0 as libc::c_int {
                (*this).envLightMode = 1 as libc::c_int as s8;
                break ;
            } else { prop = (*prop).next }
        }
    }
    (*globalCtx).envCtx.unk_BF = 0 as libc::c_int as u8_0;
    (*globalCtx).envCtx.unk_BE = 0 as libc::c_int as u8_0;
    (*globalCtx).envCtx.unk_DC = 2 as libc::c_int as u8_0;
    match (*this).envLightMode as libc::c_int {
        0 => {
            Math_ApproachF(&mut (*globalCtx).envCtx.unk_D8, 0.0f32, 1.0f32,
                           0.02f32);
        }
        1 => {
            (*globalCtx).envCtx.unk_BD = 1 as libc::c_int as u8_0;
            Math_ApproachF(&mut (*globalCtx).envCtx.unk_D8, 1.0f32, 1.0f32,
                           0.1f32);
        }
        2 => {
            (*globalCtx).envCtx.unk_BD = 1 as libc::c_int as u8_0;
            Math_ApproachF(&mut (*globalCtx).envCtx.unk_D8, 1.0f32, 1.0f32,
                           0.02f32);
        }
        3 => {
            (*globalCtx).envCtx.unk_BD = 3 as libc::c_int as u8_0;
            (*globalCtx).envCtx.unk_D8 = 1.0f32
        }
        35 => {
            (*globalCtx).envCtx.unk_BD = 0 as libc::c_int as u8_0;
            (*globalCtx).envCtx.unk_D8 = 1.0f32
        }
        4 => {
            (*globalCtx).envCtx.unk_BD = 4 as libc::c_int as u8_0;
            (*globalCtx).envCtx.unk_D8 = 1.0f32
        }
        5 => {
            (*globalCtx).envCtx.unk_BE = 5 as libc::c_int as u8_0;
            (*globalCtx).envCtx.unk_BD = 3 as libc::c_int as u8_0;
            Math_ApproachZeroF(&mut (*globalCtx).envCtx.unk_D8, 1.0f32,
                               0.075f32);
        }
        6 => {
            (*globalCtx).envCtx.unk_BE = 5 as libc::c_int as u8_0;
            (*globalCtx).envCtx.unk_D8 = 0.0f32
        }
        65 => {
            (*globalCtx).envCtx.unk_BE = 3 as libc::c_int as u8_0;
            (*globalCtx).envCtx.unk_BD = 6 as libc::c_int as u8_0;
            Math_ApproachZeroF(&mut (*globalCtx).envCtx.unk_D8, 1.0f32,
                               0.05f32);
        }
        7 => {
            (*globalCtx).envCtx.unk_BE = 7 as libc::c_int as u8_0;
            (*globalCtx).envCtx.unk_D8 = 0.0f32
        }
        75 => {
            (*globalCtx).envCtx.unk_BE = 4 as libc::c_int as u8_0;
            (*globalCtx).envCtx.unk_BD = 8 as libc::c_int as u8_0;
            Math_ApproachZeroF(&mut (*globalCtx).envCtx.unk_D8, 1.0f32,
                               0.05f32);
        }
        8 => {
            (*globalCtx).envCtx.unk_BE = 3 as libc::c_int as u8_0;
            (*globalCtx).envCtx.unk_BD = 9 as libc::c_int as u8_0;
            Math_ApproachF(&mut (*globalCtx).envCtx.unk_D8, 1.0f32, 1.0f32,
                           0.05f32);
        }
        9 => {
            (*globalCtx).envCtx.unk_BE = 3 as libc::c_int as u8_0;
            (*globalCtx).envCtx.unk_BD = 0xa as libc::c_int as u8_0;
            Math_ApproachZeroF(&mut (*globalCtx).envCtx.unk_D8, 1.0f32,
                               0.05f32);
        }
        10 => {
            (*globalCtx).envCtx.unk_BE = 3 as libc::c_int as u8_0;
            (*globalCtx).envCtx.unk_BD = 0xb as libc::c_int as u8_0;
            Math_ApproachF(&mut (*globalCtx).envCtx.unk_D8, 1.0f32, 1.0f32,
                           0.05f32);
            (*this).unk_1A4 = 0 as libc::c_int as s16
        }
        11 => {
            (*globalCtx).envCtx.unk_BE = 0xc as libc::c_int as u8_0;
            (*globalCtx).envCtx.unk_BD = 0xb as libc::c_int as u8_0;
            Math_ApproachF(&mut (*globalCtx).envCtx.unk_D8,
                           Math_CosS(((*this).unk_1A4 as libc::c_int *
                                          0x1800 as libc::c_int) as s16) *
                               0.5f32 + 0.5f32, 1.0f32, 1.0f32);
        }
        12 => {
            (*globalCtx).envCtx.unk_BE = 0xc as libc::c_int as u8_0;
            (*globalCtx).envCtx.unk_BD = 3 as libc::c_int as u8_0;
            Math_ApproachF(&mut (*globalCtx).envCtx.unk_D8, 1.0f32, 1.0f32,
                           0.05f32);
        }
        13 => {
            (*globalCtx).envCtx.unk_BD = 0xd as libc::c_int as u8_0;
            Math_ApproachF(&mut (*globalCtx).envCtx.unk_D8, 1.0f32, 1.0f32,
                           0.025f32);
        }
        14 => {
            (*globalCtx).envCtx.unk_BD = 0xe as libc::c_int as u8_0;
            (*globalCtx).envCtx.unk_D8 = 1.0f32
        }
        15 => {
            (*globalCtx).envCtx.unk_BE = 0xe as libc::c_int as u8_0;
            (*globalCtx).envCtx.unk_BD = 0xf as libc::c_int as u8_0;
            Math_ApproachF(&mut (*globalCtx).envCtx.unk_D8, 1.0f32, 1.0f32,
                           0.01f32);
        }
        16 => {
            (*globalCtx).envCtx.unk_BE = 0x10 as libc::c_int as u8_0;
            (*globalCtx).envCtx.unk_BD = 0xf as libc::c_int as u8_0;
            Math_ApproachZeroF(&mut (*globalCtx).envCtx.unk_D8, 1.0f32,
                               0.05f32);
        }
        20 => {
            (*globalCtx).envCtx.unk_BE = 2 as libc::c_int as u8_0;
            (*globalCtx).envCtx.unk_BD = 1 as libc::c_int as u8_0
        }
        -1 | _ => { }
    }
    (*this).envLightMode = 0 as libc::c_int as s8;
    if (*this).whiteFillAlpha != 0 as libc::c_int as libc::c_float {
        (*globalCtx).envCtx.screenFillColor[3 as libc::c_int as usize] =
            (*this).whiteFillAlpha as u8_0 as s8 as u8_0;
        (*globalCtx).envCtx.screenFillColor[2 as libc::c_int as usize] =
            255 as libc::c_int as u8_0;
        (*globalCtx).envCtx.screenFillColor[1 as libc::c_int as usize] =
            (*globalCtx).envCtx.screenFillColor[2 as libc::c_int as usize];
        (*globalCtx).envCtx.screenFillColor[0 as libc::c_int as usize] =
            (*globalCtx).envCtx.screenFillColor[1 as libc::c_int as usize];
        (*globalCtx).envCtx.fillScreen = 1 as libc::c_int as u8_0
    } else if (*this).screenFlashTimer as libc::c_int != 0 as libc::c_int {
        (*globalCtx).envCtx.fillScreen = 1 as libc::c_int as u8_0;
        (*globalCtx).envCtx.screenFillColor[2 as libc::c_int as usize] =
            255 as libc::c_int as u8_0;
        (*globalCtx).envCtx.screenFillColor[1 as libc::c_int as usize] =
            (*globalCtx).envCtx.screenFillColor[2 as libc::c_int as usize];
        (*globalCtx).envCtx.screenFillColor[0 as libc::c_int as usize] =
            (*globalCtx).envCtx.screenFillColor[1 as libc::c_int as usize];
        (*globalCtx).envCtx.screenFillColor[3 as libc::c_int as usize] =
            if (*this).screenFlashTimer as libc::c_int % 2 as libc::c_int !=
                   0 as libc::c_int {
                100 as libc::c_int
            } else { 0 as libc::c_int } as u8_0;
        (*this).screenFlashTimer -= 1
    } else {
        (*globalCtx).envCtx.screenFillColor[3 as libc::c_int as usize] =
            0 as libc::c_int as u8_0;
        (*globalCtx).envCtx.fillScreen =
            (*globalCtx).envCtx.screenFillColor[3 as libc::c_int as usize]
    }
    if (*this).lensFlareTimer as libc::c_int != 0 as libc::c_int {
        (*this).lensFlareTimer -= 1;
        if (*this).lensFlareMode as libc::c_int == 1 as libc::c_int {
            targetLensFlareScale = 40.0f32
        } else if (*this).lensFlareMode as libc::c_int == 4 as libc::c_int {
            targetLensFlareScale = 25.0f32
        } else { targetLensFlareScale = 10.0f32 }
        Math_ApproachF(&mut (*this).lensFlareScale, targetLensFlareScale,
                       0.3f32, 10.0f32);
    } else {
        Math_ApproachZeroF(&mut (*this).lensFlareScale, 1.0f32, 5.0f32);
        if (*this).lensFlareScale == 0.0f32 {
            (*this).lensFlareMode = 0 as libc::c_int as u8_0
        }
    }
    if (*this).lensFlareMode as libc::c_int != 0 as libc::c_int {
        gCustomLensFlareOn = 1 as libc::c_int as u8_0;
        if (*this).lensFlareMode as libc::c_int == 1 as libc::c_int {
            gCustomLensFlarePos = (*this).actor.world.pos
        }
        gLensFlareScale = (*this).lensFlareScale as s16;
        gLensFlareColorIntensity = 10.0f32;
        gLensFlareScreenFillAlpha = 0 as libc::c_int as s16
    } else { gCustomLensFlareOn = 0 as libc::c_int as u8_0 }
    if (*this).unk_274 as libc::c_int != 0 as libc::c_int {
        i = ((*this).unk_274 as libc::c_int - 1 as libc::c_int) as s16;
        (*this).unk_278.x = (*this).unk_2EC[0 as libc::c_int as usize].x;
        (*this).unk_278.y =
            (*this).unk_2EC[0 as libc::c_int as usize].y + 50.0f32 + 30.0f32;
        (*this).unk_278.z = (*this).unk_2EC[0 as libc::c_int as usize].z;
        xOffset =
            sinf(i as libc::c_int as libc::c_float * 1.2566371f32) * 600.0f32;
        zOffset =
            cosf(i as libc::c_int as libc::c_float * 1.2566371f32) * 600.0f32;
        // 5 or 6 light balls that go into the charge. not the same as the ones that he throws
        Actor_SpawnAsChild(&mut (*globalCtx).actorCtx, &mut (*this).actor,
                           globalCtx, ACTOR_BOSS_GANON as libc::c_int as s16,
                           (*this).unk_1FC.x + xOffset, (*this).unk_1FC.y,
                           (*this).unk_1FC.z + zOffset,
                           0 as libc::c_int as s16,
                           ((i as libc::c_int as libc::c_float * 13107.2f32)
                                as s16 as libc::c_int + 0x6000 as libc::c_int)
                               as s16, 0 as libc::c_int as s16,
                           (0xfa as libc::c_int + i as libc::c_int) as s16);
        (*this).unk_274 = 0 as libc::c_int as u8_0
    };
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_OverrideLimbDraw(mut globalCtx:
                                                        *mut GlobalContext,
                                                    mut limbIndex: s32,
                                                    mut dList: *mut *mut Gfx,
                                                    mut pos: *mut Vec3f,
                                                    mut rot: *mut Vec3s,
                                                    mut thisx:
                                                        *mut libc::c_void)
 -> s32 {
    let mut this: *mut BossGanon = thisx as *mut BossGanon;
    match limbIndex {
        10 => {
            if (*this).useOpenHand != 0 {
                *dList = gDorfOpenHandDL.as_mut_ptr()
            }
        }
        20 => {
            (*rot).y =
                ((*rot).y as libc::c_float +
                     ((*this).legRot.x + (*this).legRot.z)) as s16;
            (*rot).z = ((*rot).z as libc::c_float + (*this).legRot.y) as s16
        }
        21 => {
            if (*this).legRot.y > 0.0f32 {
                (*rot).z =
                    ((*rot).z as libc::c_float + (*this).legRot.y) as s16
            }
        }
        22 => {
            (*rot).y =
                ((*rot).y as libc::c_float +
                     ((*this).legRot.x + (*this).legRot.z)) as s16;
            (*rot).z = ((*rot).z as libc::c_float + (*this).legRot.y) as s16
        }
        23 => {
            (*rot).y =
                ((*rot).y as libc::c_float +
                     ((*this).legRot.x - (*this).legRot.z)) as s16;
            (*rot).z = ((*rot).z as libc::c_float + (*this).legRot.y) as s16
        }
        24 => {
            if (*this).legRot.y > 0.0f32 {
                (*rot).z =
                    ((*rot).z as libc::c_float + (*this).legRot.y) as s16
            }
        }
        25 => {
            (*rot).y =
                ((*rot).y as libc::c_float +
                     ((*this).legRot.x - (*this).legRot.z)) as s16;
            (*rot).z = ((*rot).z as libc::c_float + (*this).legRot.y) as s16
        }
        _ => { }
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_PostLimbDraw(mut globalCtx:
                                                    *mut GlobalContext,
                                                mut limbIndex: s32,
                                                mut dList: *mut *mut Gfx,
                                                mut rot: *mut Vec3s,
                                                mut thisx:
                                                    *mut libc::c_void) {
    static mut bodyPartLimbMap: [s8; 30] =
        [-(1 as libc::c_int) as s8, -(1 as libc::c_int) as s8,
         1 as libc::c_int as s8, -(1 as libc::c_int) as s8,
         3 as libc::c_int as s8, 4 as libc::c_int as s8,
         5 as libc::c_int as s8, -(1 as libc::c_int) as s8,
         6 as libc::c_int as s8, 7 as libc::c_int as s8,
         8 as libc::c_int as s8, -(1 as libc::c_int) as s8,
         -(1 as libc::c_int) as s8, -(1 as libc::c_int) as s8,
         -(1 as libc::c_int) as s8, -(1 as libc::c_int) as s8,
         -(1 as libc::c_int) as s8, -(1 as libc::c_int) as s8,
         -(1 as libc::c_int) as s8, 2 as libc::c_int as s8,
         12 as libc::c_int as s8, 13 as libc::c_int as s8,
         14 as libc::c_int as s8, 9 as libc::c_int as s8,
         10 as libc::c_int as s8, 11 as libc::c_int as s8,
         -(1 as libc::c_int) as s8, -(1 as libc::c_int) as s8,
         -(1 as libc::c_int) as s8, -(1 as libc::c_int) as s8];
    static mut D_808E4DA0: Vec3f =
        {
            let mut init = Vec3f{x: -500.0f32, y: 200.0f32, z: -300.0f32,};
            init
        };
    static mut D_808E4DAC: Vec3f =
        {
            let mut init = Vec3f{x: -500.0f32, y: 200.0f32, z: 300.0f32,};
            init
        };
    static mut D_808E4DB8: Vec3f =
        { let mut init = Vec3f{x: 0.0f32, y: 0.0f32, z: 0.0f32,}; init };
    static mut D_808E4DC4: Vec3f =
        { let mut init = Vec3f{x: 0.0f32, y: 0.0f32, z: 0.0f32,}; init };
    static mut D_808E4DD0: Vec3f =
        { let mut init = Vec3f{x: 0.0f32, y: 0.0f32, z: 0.0f32,}; init };
    static mut D_808E4DDC: Vec3f =
        { let mut init = Vec3f{x: 1300.0f32, y: 0.0f32, z: 0.0f32,}; init };
    static mut D_808E4DE8: Vec3f =
        {
            let mut init = Vec3f{x: 600.0f32, y: 420.0f32, z: 100.0f32,};
            init
        };
    let mut bodyPart: s8 = 0;
    let mut this: *mut BossGanon = thisx as *mut BossGanon;
    bodyPart = bodyPartLimbMap[limbIndex as usize];
    if bodyPart as libc::c_int >= 0 as libc::c_int {
        Matrix_MultVec3f(&mut D_808E4DB8,
                         &mut *(*this).unk_2EC.as_mut_ptr().offset(bodyPart as
                                                                       isize));
    }
    if limbIndex == 2 as libc::c_int {
        Matrix_MultVec3f(&mut D_808E4DB8, &mut (*this).unk_1FC);
    } else if limbIndex == 19 as libc::c_int {
        Matrix_MultVec3f(&mut D_808E4DB8, &mut (*this).actor.focus.pos);
    } else if limbIndex == 11 as libc::c_int {
        let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
        let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
        __gfxCtx = (*globalCtx).state.gfxCtx;
        Graph_OpenDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                        b"../z_boss_ganon.c\x00" as *const u8 as
                            *const libc::c_char, 7191 as libc::c_int);
        Matrix_MultVec3f(&mut D_808E4DB8, &mut (*this).unk_208);
        let fresh3 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g: *mut Gfx = fresh3;
        (*_g).words.w0 =
            (0xda as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((::std::mem::size_of::<Mtx>() as
                      libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                      libc::c_uint).wrapping_div(8
                                                                                     as
                                                                                     libc::c_int
                                                                                     as
                                                                                     libc::c_uint)
                     &
                     (((0x1 as libc::c_int) << 5 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (((0 as libc::c_int | 0x2 as libc::c_int | 0 as libc::c_int) ^
                      0x1 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g).words.w1 =
            Matrix_NewMtx((*globalCtx).state.gfxCtx,
                          b"../z_boss_ganon.c\x00" as *const u8 as
                              *const libc::c_char as *mut libc::c_char,
                          7196 as libc::c_int) as libc::c_uint;
        let fresh4 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_0: *mut Gfx = fresh4;
        (*_g_0).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_0).words.w1 =
            gSegments[((object_ganon_DL_00BE90.as_mut_ptr() as u32_0) <<
                           4 as libc::c_int >> 28 as libc::c_int) as
                          usize].wrapping_add(object_ganon_DL_00BE90.as_mut_ptr()
                                                  as u32_0 &
                                                  0xffffff as libc::c_int as
                                                      libc::c_uint).wrapping_add(0x80000000
                                                                                     as
                                                                                     libc::c_uint)
                as *mut libc::c_void as libc::c_uint;
        Graph_CloseDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                         b"../z_boss_ganon.c\x00" as *const u8 as
                             *const libc::c_char, 7198 as libc::c_int);
    } else if limbIndex == 6 as libc::c_int {
        Matrix_MultVec3f(&mut D_808E4DC4, &mut (*this).unk_238);
    } else if limbIndex == 10 as libc::c_int {
        Matrix_MultVec3f(&mut D_808E4DD0, &mut (*this).unk_22C);
        if (*this).unk_25C as libc::c_int == 0 as libc::c_int {
            Matrix_MultVec3f(&mut D_808E4DDC, &mut (*this).unk_260);
        }
        (*this).unk_25C = 0 as libc::c_int as u8_0;
        if (*this).triforceType as libc::c_int ==
               GDF_TRIFORCE_DORF as libc::c_int {
            Matrix_MultVec3f(&mut D_808E4DE8, &mut (*this).triforcePos);
        }
    } else if limbIndex == 4 as libc::c_int {
        let mut sp28: Vec3f = D_808E4DA0;
        if (*this).unk_198 as libc::c_int == 1 as libc::c_int {
            sp28.x += -300.0f32;
            sp28.y += -300.0f32;
            sp28.z += 700.0f32
        } else if (*this).unk_198 as libc::c_int == 2 as libc::c_int {
            sp28.x += -300.0f32;
            sp28.z += 700.0f32
        }
        Matrix_MultVec3f(&mut sp28, &mut (*this).unk_220);
    } else if limbIndex == 8 as libc::c_int {
        let mut sp1C: Vec3f = D_808E4DAC;
        if (*this).unk_198 as libc::c_int == 1 as libc::c_int {
            sp1C.x += -300.0f32;
            sp1C.y += -300.0f32;
            sp1C.z += -700.0f32
        } else if (*this).unk_198 as libc::c_int == 2 as libc::c_int {
            sp1C.x += -300.0f32;
            sp1C.y += 100.0f32;
            sp1C.z += -700.0f32
        }
        Matrix_MultVec3f(&mut sp1C, &mut (*this).unk_214);
    };
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_InitRand(mut seedInit0: s32,
                                            mut seedInit1: s32,
                                            mut seedInit2: s32) {
    sSeed1 = seedInit0;
    sSeed2 = seedInit1;
    sSeed3 = seedInit2;
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_RandZeroOne() -> f32_0 {
    // Wichmann-Hill algorithm
    let mut randFloat: f32_0 = 0.;
    sSeed1 = sSeed1 * 171 as libc::c_int % 30269 as libc::c_int;
    sSeed2 = sSeed2 * 172 as libc::c_int % 30307 as libc::c_int;
    sSeed3 = sSeed3 * 170 as libc::c_int % 30323 as libc::c_int;
    randFloat =
        sSeed1 as libc::c_float / 30269.0f32 +
            sSeed2 as libc::c_float / 30307.0f32 +
            sSeed3 as libc::c_float / 30323.0f32;
    while randFloat >= 1.0f32 { randFloat -= 1.0f32 }
    return fabsf(randFloat);
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_DrawShock(mut this: *mut BossGanon,
                                             mut globalCtx:
                                                 *mut GlobalContext) {
    let mut pad: s32 = 0;
    let mut gfxCtx: *mut GraphicsContext = (*globalCtx).state.gfxCtx;
    let mut i: s16 = 0;
    let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
    let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
    __gfxCtx = gfxCtx;
    Graph_OpenDisps(dispRefs.as_mut_ptr(), gfxCtx,
                    b"../z_boss_ganon.c\x00" as *const u8 as
                        *const libc::c_char, 7350 as libc::c_int);
    if (*this).unk_2E8 as libc::c_int != 0 as libc::c_int ||
           (*this).unk_2E6 as libc::c_int != 0 as libc::c_int {
        func_80093D84((*globalCtx).state.gfxCtx);
        let fresh5 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g: *mut Gfx = fresh5;
        (*_g).words.w0 =
            (0xfa as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g).words.w1 =
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh6 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_0: *mut Gfx = fresh6;
        (*_g_0).words.w0 =
            (0xfb as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_0).words.w1 =
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh7 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_1: *mut Gfx = fresh7;
        (*_g_1).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_1).words.w1 =
            gDorfLightBallMaterialDL.as_mut_ptr() as libc::c_uint;
        if (*this).unk_2E8 as libc::c_int != 0 as libc::c_int {
            let mut player: *mut Player =
                (*globalCtx).actorCtx.actorLists[ACTORCAT_PLAYER as
                                                     libc::c_int as
                                                     usize].head as
                    *mut Player;
            i = 0 as libc::c_int as s16;
            while (i as libc::c_int) <
                      (::std::mem::size_of::<[Vec3f; 18]>() as
                           libc::c_ulong).wrapping_div(::std::mem::size_of::<Vec3f>()
                                                           as libc::c_ulong)
                          as s32 {
                Matrix_Translate((*player).bodyPartsPos[i as usize].x,
                                 (*player).bodyPartsPos[i as usize].y,
                                 (*player).bodyPartsPos[i as usize].z,
                                 MTXMODE_NEW as libc::c_int as u8_0);
                func_800D1FD4(&mut (*globalCtx).billboardMtxF);
                Matrix_Scale((*this).unk_49C[i as usize],
                             (*this).unk_49C[i as usize],
                             (*this).unk_49C[i as usize],
                             MTXMODE_APPLY as libc::c_int as u8_0);
                Matrix_RotateZ(Rand_CenteredFloat(3.14159265358979323846f32),
                               MTXMODE_APPLY as libc::c_int as u8_0);
                let fresh8 = (*__gfxCtx).polyXlu.p;
                (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
                let mut _g_2: *mut Gfx = fresh8;
                (*_g_2).words.w0 =
                    (0xda as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        ((::std::mem::size_of::<Mtx>() as
                              libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                              libc::c_uint).wrapping_div(8
                                                                                             as
                                                                                             libc::c_int
                                                                                             as
                                                                                             libc::c_uint)
                             &
                             (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            19 as libc::c_int |
                        ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            8 as libc::c_int |
                        (((0 as libc::c_int | 0x2 as libc::c_int |
                               0 as libc::c_int) ^ 0x1 as libc::c_int) as
                             u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                (*_g_2).words.w1 =
                    Matrix_NewMtx(gfxCtx,
                                  b"../z_boss_ganon.c\x00" as *const u8 as
                                      *const libc::c_char as
                                      *mut libc::c_char, 7384 as libc::c_int)
                        as libc::c_uint;
                let fresh9 = (*__gfxCtx).polyXlu.p;
                (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
                let mut _g_3: *mut Gfx = fresh9;
                (*_g_3).words.w0 =
                    (0xde as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            16 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 16 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                (*_g_3).words.w1 = gDorfSquareDL.as_mut_ptr() as libc::c_uint;
                i += 1
            }
        } else {
            i = 1 as libc::c_int as s16;
            while (i as libc::c_int) < 15 as libc::c_int {
                Matrix_Translate((*this).unk_2EC[i as usize].x,
                                 (*this).unk_2EC[i as usize].y,
                                 (*this).unk_2EC[i as usize].z,
                                 MTXMODE_NEW as libc::c_int as u8_0);
                func_800D1FD4(&mut (*globalCtx).billboardMtxF);
                Matrix_Scale((*this).unk_49C[i as usize],
                             (*this).unk_49C[i as usize],
                             (*this).unk_49C[i as usize],
                             MTXMODE_APPLY as libc::c_int as u8_0);
                if (*this).shockGlow == 0 {
                    Matrix_RotateZ(Rand_CenteredFloat(3.14159265358979323846f32),
                                   MTXMODE_APPLY as libc::c_int as u8_0);
                }
                let fresh10 = (*__gfxCtx).polyXlu.p;
                (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
                let mut _g_4: *mut Gfx = fresh10;
                (*_g_4).words.w0 =
                    (0xda as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        ((::std::mem::size_of::<Mtx>() as
                              libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                              libc::c_uint).wrapping_div(8
                                                                                             as
                                                                                             libc::c_int
                                                                                             as
                                                                                             libc::c_uint)
                             &
                             (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            19 as libc::c_int |
                        ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            8 as libc::c_int |
                        (((0 as libc::c_int | 0x2 as libc::c_int |
                               0 as libc::c_int) ^ 0x1 as libc::c_int) as
                             u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                (*_g_4).words.w1 =
                    Matrix_NewMtx(gfxCtx,
                                  b"../z_boss_ganon.c\x00" as *const u8 as
                                      *const libc::c_char as
                                      *mut libc::c_char, 7401 as libc::c_int)
                        as libc::c_uint;
                if (*this).shockGlow != 0 {
                    let fresh11 = (*__gfxCtx).polyXlu.p;
                    (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
                    let mut _g_5: *mut Gfx = fresh11;
                    (*_g_5).words.w0 =
                        (0xdb as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (0x6 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                16 as libc::c_int |
                            ((0x8 as libc::c_int * 4 as libc::c_int) as u32_0
                                 &
                                 (((0x1 as libc::c_int) << 16 as libc::c_int)
                                      - 1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int;
                    (*_g_5).words.w1 =
                        Gfx_TwoTexScroll((*globalCtx).state.gfxCtx,
                                         0 as libc::c_int,
                                         0 as libc::c_int as u32_0,
                                         0 as libc::c_int as u32_0,
                                         32 as libc::c_int, 64 as libc::c_int,
                                         1 as libc::c_int,
                                         0 as libc::c_int as u32_0,
                                         (((*this).unk_1A2 as libc::c_int +
                                               i as libc::c_int) *
                                              -(15 as libc::c_int)) as u32_0,
                                         32 as libc::c_int, 64 as libc::c_int)
                            as libc::c_uint;
                    let fresh12 = (*__gfxCtx).polyXlu.p;
                    (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
                    let mut _g_6: *mut Gfx = fresh12;
                    (*_g_6).words.w0 =
                        (0xfa as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                8 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int;
                    (*_g_6).words.w1 =
                        (200 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (255 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                16 as libc::c_int |
                            (170 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                8 as libc::c_int |
                            (255 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int;
                    let fresh13 = (*__gfxCtx).polyXlu.p;
                    (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
                    let mut _g_7: *mut Gfx = fresh13;
                    (*_g_7).words.w0 =
                        (0xfb as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int;
                    (*_g_7).words.w1 =
                        (255 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (255 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                16 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                8 as libc::c_int |
                            (128 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int;
                    let fresh14 = (*__gfxCtx).polyXlu.p;
                    (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
                    let mut _g_8: *mut Gfx = fresh14;
                    (*_g_8).words.w0 =
                        (0xde as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                16 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 16 as libc::c_int)
                                      - 1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int;
                    (*_g_8).words.w1 =
                        gDorfShockGlowDL.as_mut_ptr() as libc::c_uint
                } else {
                    let fresh15 = (*__gfxCtx).polyXlu.p;
                    (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
                    let mut _g_9: *mut Gfx = fresh15;
                    (*_g_9).words.w0 =
                        (0xde as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                16 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 16 as libc::c_int)
                                      - 1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int;
                    (*_g_9).words.w1 =
                        gDorfSquareDL.as_mut_ptr() as libc::c_uint
                }
                i += 1
            }
        }
    }
    Graph_CloseDisps(dispRefs.as_mut_ptr(), gfxCtx,
                     b"../z_boss_ganon.c\x00" as *const u8 as
                         *const libc::c_char, 7465 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_DrawHandLightBall(mut this: *mut BossGanon,
                                                     mut globalCtx:
                                                         *mut GlobalContext) {
    let mut pad: s32 = 0;
    let mut gfxCtx: *mut GraphicsContext = (*globalCtx).state.gfxCtx;
    let mut alpha: s32 = 0;
    let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
    let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
    __gfxCtx = gfxCtx;
    Graph_OpenDisps(dispRefs.as_mut_ptr(), gfxCtx,
                    b"../z_boss_ganon.c\x00" as *const u8 as
                        *const libc::c_char, 7476 as libc::c_int);
    if (*this).handLightBallScale > 0.0f32 {
        func_80093D84((*globalCtx).state.gfxCtx);
        let fresh16 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g: *mut Gfx = fresh16;
        (*_g).words.w0 =
            (0xfa as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g).words.w1 =
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        if (*this).unk_1A2 as libc::c_int % 2 as libc::c_int !=
               0 as libc::c_int {
            let fresh17 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_0: *mut Gfx = fresh17;
            (*_g_0).words.w0 =
                (0xfb as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_0).words.w1 =
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
        } else {
            let fresh18 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_1: *mut Gfx = fresh18;
            (*_g_1).words.w0 =
                (0xfb as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_1).words.w1 =
                (100 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
        }
        let fresh19 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_2: *mut Gfx = fresh19;
        (*_g_2).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_2).words.w1 =
            gDorfLightBallMaterialDL.as_mut_ptr() as libc::c_uint;
        Matrix_Translate((*this).unk_260.x, (*this).unk_260.y,
                         (*this).unk_260.z,
                         MTXMODE_NEW as libc::c_int as u8_0);
        func_800D1FD4(&mut (*globalCtx).billboardMtxF);
        Matrix_Scale((*this).handLightBallScale, (*this).handLightBallScale,
                     (*this).handLightBallScale,
                     MTXMODE_APPLY as libc::c_int as u8_0);
        Matrix_RotateZ((*this).unk_258, 1 as libc::c_int as u8_0);
        let fresh20 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_3: *mut Gfx = fresh20;
        (*_g_3).words.w0 =
            (0xda as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((::std::mem::size_of::<Mtx>() as
                      libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                      libc::c_uint).wrapping_div(8
                                                                                     as
                                                                                     libc::c_int
                                                                                     as
                                                                                     libc::c_uint)
                     &
                     (((0x1 as libc::c_int) << 5 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (((0 as libc::c_int | 0x2 as libc::c_int | 0 as libc::c_int) ^
                      0x1 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_3).words.w1 =
            Matrix_NewMtx(gfxCtx,
                          b"../z_boss_ganon.c\x00" as *const u8 as
                              *const libc::c_char as *mut libc::c_char,
                          7510 as libc::c_int) as libc::c_uint;
        let fresh21 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_4: *mut Gfx = fresh21;
        (*_g_4).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_4).words.w1 = gDorfSquareDL.as_mut_ptr() as libc::c_uint;
        alpha =
            if (*this).unk_1A2 as libc::c_int % 2 as libc::c_int !=
                   0 as libc::c_int {
                100 as libc::c_int
            } else { 80 as libc::c_int };
        let fresh22 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_5: *mut Gfx = fresh22;
        (*_g_5).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_5).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh23 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_6: *mut Gfx = fresh23;
        (*_g_6).words.w0 =
            (0xfa as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_6).words.w1 =
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (155 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (alpha as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        Matrix_Translate((*this).unk_260.x, 0.0f32, (*this).unk_260.z,
                         MTXMODE_NEW as libc::c_int as u8_0);
        Matrix_Scale((*this).handLightBallScale * 0.75f32, 1.0f32,
                     (*this).handLightBallScale * 0.75f32,
                     MTXMODE_APPLY as libc::c_int as u8_0);
        let fresh24 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_7: *mut Gfx = fresh24;
        (*_g_7).words.w0 =
            (0xda as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((::std::mem::size_of::<Mtx>() as
                      libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                      libc::c_uint).wrapping_div(8
                                                                                     as
                                                                                     libc::c_int
                                                                                     as
                                                                                     libc::c_uint)
                     &
                     (((0x1 as libc::c_int) << 5 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (((0 as libc::c_int | 0x2 as libc::c_int | 0 as libc::c_int) ^
                      0x1 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_7).words.w1 =
            Matrix_NewMtx((*globalCtx).state.gfxCtx,
                          b"../z_boss_ganon.c\x00" as *const u8 as
                              *const libc::c_char as *mut libc::c_char,
                          7531 as libc::c_int) as libc::c_uint;
        let fresh25 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_8: *mut Gfx = fresh25;
        (*_g_8).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_8).words.w1 = gDorfLightCoreDL.as_mut_ptr() as libc::c_uint;
        Graph_CloseDisps(dispRefs.as_mut_ptr(), gfxCtx,
                         b"../z_boss_ganon.c\x00" as *const u8 as
                             *const libc::c_char, 7534 as libc::c_int);
    };
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_DrawBigMagicCharge(mut this:
                                                          *mut BossGanon,
                                                      mut globalCtx:
                                                          *mut GlobalContext) {
    let mut pad: s32 = 0;
    let mut yRot: f32_0 = 0.;
    let mut gfxCtx: *mut GraphicsContext = (*globalCtx).state.gfxCtx;
    let mut i: s16 = 0;
    let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
    let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
    __gfxCtx = gfxCtx;
    Graph_OpenDisps(dispRefs.as_mut_ptr(), gfxCtx,
                    b"../z_boss_ganon.c\x00" as *const u8 as
                        *const libc::c_char, 7548 as libc::c_int);
    if (*this).unk_284 > 0.0f32 {
        func_80093D84((*globalCtx).state.gfxCtx);
        // light flecks
        let fresh26 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g: *mut Gfx = fresh26;
        (*_g).words.w0 =
            (0xfa as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g).words.w1 =
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (170 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                ((*this).unk_290 as s8 as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh27 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_0: *mut Gfx = fresh27;
        (*_g_0).words.w0 =
            (0xfb as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_0).words.w1 =
            (200 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (128 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh28 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_1: *mut Gfx = fresh28;
        (*_g_1).words.w0 =
            (0xdb as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0x6 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                ((0x8 as libc::c_int * 4 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_1).words.w1 =
            Gfx_TwoTexScroll((*globalCtx).state.gfxCtx, 0 as libc::c_int,
                             ((*this).unk_1A2 as libc::c_int *
                                  -(2 as libc::c_int)) as u32_0,
                             0 as libc::c_int as u32_0, 0x40 as libc::c_int,
                             0x40 as libc::c_int, 1 as libc::c_int,
                             0 as libc::c_int as u32_0,
                             ((*this).unk_1A2 as libc::c_int *
                                  0xa as libc::c_int) as u32_0,
                             0x40 as libc::c_int, 0x40 as libc::c_int) as
                libc::c_uint;
        Matrix_Translate((*this).unk_278.x, (*this).unk_278.y,
                         (*this).unk_278.z,
                         MTXMODE_NEW as libc::c_int as u8_0);
        func_800D1FD4(&mut (*globalCtx).billboardMtxF);
        Matrix_Scale((*this).unk_28C, (*this).unk_28C, (*this).unk_28C,
                     MTXMODE_APPLY as libc::c_int as u8_0);
        let fresh29 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_2: *mut Gfx = fresh29;
        (*_g_2).words.w0 =
            (0xda as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((::std::mem::size_of::<Mtx>() as
                      libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                      libc::c_uint).wrapping_div(8
                                                                                     as
                                                                                     libc::c_int
                                                                                     as
                                                                                     libc::c_uint)
                     &
                     (((0x1 as libc::c_int) << 5 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (((0 as libc::c_int | 0x2 as libc::c_int | 0 as libc::c_int) ^
                      0x1 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_2).words.w1 =
            Matrix_NewMtx(gfxCtx,
                          b"../z_boss_ganon.c\x00" as *const u8 as
                              *const libc::c_char as *mut libc::c_char,
                          7588 as libc::c_int) as libc::c_uint;
        let fresh30 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_3: *mut Gfx = fresh30;
        (*_g_3).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_3).words.w1 = gDorfLightFlecksDL.as_mut_ptr() as libc::c_uint;
        // background circle texture
        Matrix_Translate((*this).unk_278.x, (*this).unk_278.y,
                         (*this).unk_278.z,
                         MTXMODE_NEW as libc::c_int as u8_0);
        func_800D1FD4(&mut (*globalCtx).billboardMtxF);
        Matrix_Scale((*this).unk_284, (*this).unk_284, (*this).unk_284,
                     MTXMODE_APPLY as libc::c_int as u8_0);
        let fresh31 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_4: *mut Gfx = fresh31;
        (*_g_4).words.w0 =
            (0xda as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((::std::mem::size_of::<Mtx>() as
                      libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                      libc::c_uint).wrapping_div(8
                                                                                     as
                                                                                     libc::c_int
                                                                                     as
                                                                                     libc::c_uint)
                     &
                     (((0x1 as libc::c_int) << 5 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (((0 as libc::c_int | 0x2 as libc::c_int | 0 as libc::c_int) ^
                      0x1 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_4).words.w1 =
            Matrix_NewMtx(gfxCtx,
                          b"../z_boss_ganon.c\x00" as *const u8 as
                              *const libc::c_char as *mut libc::c_char,
                          7601 as libc::c_int) as libc::c_uint;
        let fresh32 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_5: *mut Gfx = fresh32;
        (*_g_5).words.w0 =
            (0xfa as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_5).words.w1 =
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (100 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                ((*this).unk_288 as s8 as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh33 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_6: *mut Gfx = fresh33;
        (*_g_6).words.w0 =
            (0xdb as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0x6 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                ((0x9 as libc::c_int * 4 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_6).words.w1 =
            Gfx_TwoTexScroll((*globalCtx).state.gfxCtx, 0 as libc::c_int,
                             0 as libc::c_int as u32_0,
                             0 as libc::c_int as u32_0, 0x20 as libc::c_int,
                             0x20 as libc::c_int, 1 as libc::c_int,
                             0 as libc::c_int as u32_0,
                             ((*this).unk_1A2 as libc::c_int *
                                  -(4 as libc::c_int)) as u32_0,
                             0x20 as libc::c_int, 0x20 as libc::c_int) as
                libc::c_uint;
        let fresh34 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_7: *mut Gfx = fresh34;
        (*_g_7).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_7).words.w1 =
            gDorfBigMagicBGCircleDL.as_mut_ptr() as libc::c_uint;
        // yellow background dot
        let fresh35 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_8: *mut Gfx = fresh35;
        (*_g_8).words.w0 =
            (0xfa as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_8).words.w1 =
            (150 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (170 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                ((*this).unk_288 as s8 as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh36 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_9: *mut Gfx = fresh36;
        (*_g_9).words.w0 =
            (0xdb as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0x6 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                ((0xa as libc::c_int * 4 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_9).words.w1 =
            Gfx_TwoTexScroll((*globalCtx).state.gfxCtx, 0 as libc::c_int,
                             0 as libc::c_int as u32_0,
                             0 as libc::c_int as u32_0, 0x20 as libc::c_int,
                             0x20 as libc::c_int, 1 as libc::c_int,
                             ((*this).unk_1A2 as libc::c_int *
                                  2 as libc::c_int) as u32_0,
                             ((*this).unk_1A2 as libc::c_int *
                                  -(0x14 as libc::c_int)) as u32_0,
                             0x40 as libc::c_int, 0x40 as libc::c_int) as
                libc::c_uint;
        let fresh37 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_10: *mut Gfx = fresh37;
        (*_g_10).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_10).words.w1 = gDorfDotDL.as_mut_ptr() as libc::c_uint;
        // light ball material
        let fresh38 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_11: *mut Gfx = fresh38;
        (*_g_11).words.w0 =
            (0xfa as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_11).words.w1 =
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh39 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_12: *mut Gfx = fresh39;
        (*_g_12).words.w0 =
            (0xfb as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_12).words.w1 =
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (100 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh40 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_13: *mut Gfx = fresh40;
        (*_g_13).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_13).words.w1 =
            gDorfLightBallMaterialDL.as_mut_ptr() as libc::c_uint;
        // light ball geometry
        Matrix_Translate((*this).unk_278.x, (*this).unk_278.y,
                         (*this).unk_278.z,
                         MTXMODE_NEW as libc::c_int as u8_0);
        func_800D1FD4(&mut (*globalCtx).billboardMtxF);
        Matrix_Scale((*this).unk_2D0, (*this).unk_2D0, (*this).unk_2D0,
                     MTXMODE_APPLY as libc::c_int as u8_0);
        Matrix_RotateZ((*this).unk_1A2 as libc::c_int as libc::c_float *
                           10.0f32 / 1000.0f32,
                       MTXMODE_APPLY as libc::c_int as u8_0);
        let fresh41 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_14: *mut Gfx = fresh41;
        (*_g_14).words.w0 =
            (0xda as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((::std::mem::size_of::<Mtx>() as
                      libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                      libc::c_uint).wrapping_div(8
                                                                                     as
                                                                                     libc::c_int
                                                                                     as
                                                                                     libc::c_uint)
                     &
                     (((0x1 as libc::c_int) << 5 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (((0 as libc::c_int | 0x2 as libc::c_int | 0 as libc::c_int) ^
                      0x1 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_14).words.w1 =
            Matrix_NewMtx(gfxCtx,
                          b"../z_boss_ganon.c\x00" as *const u8 as
                              *const libc::c_char as *mut libc::c_char,
                          7673 as libc::c_int) as libc::c_uint;
        let fresh42 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_15: *mut Gfx = fresh42;
        (*_g_15).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_15).words.w1 = gDorfSquareDL.as_mut_ptr() as libc::c_uint;
        BossGanon_InitRand((*this).unk_1AA as libc::c_int + 1 as libc::c_int,
                           0x71ac as libc::c_int, 0x263a as libc::c_int);
        Matrix_Translate((*this).unk_278.x, (*this).unk_278.y,
                         (*this).unk_278.z,
                         MTXMODE_NEW as libc::c_int as u8_0);
        Matrix_RotateY((*this).unk_1A2 as libc::c_int as libc::c_float *
                           10.0f32 / 1000.0f32,
                       MTXMODE_APPLY as libc::c_int as u8_0);
        let fresh43 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_16: *mut Gfx = fresh43;
        (*_g_16).words.w0 =
            (0xfb as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_16).words.w1 =
            (200 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        yRot =
            (*this).actor.yawTowardsPlayer as f32_0 / 32768.0f32 *
                3.14159265358979323846f32;
        i = 0 as libc::c_int as s16;
        while (i as libc::c_int) < (*this).unk_1AC as libc::c_int {
            let mut xzRot: f32_0 =
                (BossGanon_RandZeroOne() - 0.5f32) * 3.14159265358979323846f32
                    * 1.5f32;
            let fresh44 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_17: *mut Gfx = fresh44;
            (*_g_17).words.w0 =
                (0xfa as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_17).words.w1 =
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    ((*this).unk_294[i as usize] as s8 as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            Matrix_Push();
            Matrix_RotateY(xzRot + yRot,
                           MTXMODE_APPLY as libc::c_int as u8_0);
            Matrix_RotateX((BossGanon_RandZeroOne() - 0.5f32) *
                               3.14159265358979323846f32,
                           MTXMODE_APPLY as libc::c_int as u8_0);
            Matrix_RotateZ(xzRot, MTXMODE_APPLY as libc::c_int as u8_0);
            Matrix_Translate(0.0f32, 0.0f32, 50.0f32,
                             MTXMODE_APPLY as libc::c_int as u8_0);
            Matrix_Scale(4.0f32, 4.0f32, 1.0f32,
                         MTXMODE_APPLY as libc::c_int as u8_0);
            let fresh45 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_18: *mut Gfx = fresh45;
            (*_g_18).words.w0 =
                (0xda as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((::std::mem::size_of::<Mtx>() as
                          libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                          libc::c_uint).wrapping_div(8
                                                                                         as
                                                                                         libc::c_int
                                                                                         as
                                                                                         libc::c_uint)
                         &
                         (((0x1 as libc::c_int) << 5 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (((0 as libc::c_int | 0x2 as libc::c_int |
                           0 as libc::c_int) ^ 0x1 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_18).words.w1 =
                Matrix_NewMtx(gfxCtx,
                              b"../z_boss_ganon.c\x00" as *const u8 as
                                  *const libc::c_char as *mut libc::c_char,
                              7713 as libc::c_int) as libc::c_uint;
            let fresh46 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_19: *mut Gfx = fresh46;
            (*_g_19).words.w0 =
                (0xde as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_19).words.w1 =
                gDorfLightRayTriDL.as_mut_ptr() as libc::c_uint;
            Matrix_Pop();
            i += 1
        }
        Graph_CloseDisps(dispRefs.as_mut_ptr(), gfxCtx,
                         b"../z_boss_ganon.c\x00" as *const u8 as
                             *const libc::c_char, 7721 as libc::c_int);
    };
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_DrawTriforce(mut this: *mut BossGanon,
                                                mut globalCtx:
                                                    *mut GlobalContext) {
    let mut pad: s32 = 0;
    if (*this).fwork[GDF_TRIFORCE_PRIM_A as libc::c_int as usize] > 0.0f32 {
        let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
        let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
        __gfxCtx = (*globalCtx).state.gfxCtx;
        Graph_OpenDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                        b"../z_boss_ganon.c\x00" as *const u8 as
                            *const libc::c_char, 7732 as libc::c_int);
        Matrix_Push();
        let fresh47 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g: *mut Gfx = fresh47;
        (*_g).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh48 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_0: *mut Gfx = fresh48;
        (*_g_0).words.w0 =
            (0xfa as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_0).words.w1 =
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                ((*this).fwork[GDF_TRIFORCE_PRIM_B as libc::c_int as usize] as
                     u8_0 as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                ((*this).fwork[GDF_TRIFORCE_PRIM_A as libc::c_int as usize] as
                     s8 as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh49 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_1: *mut Gfx = fresh49;
        (*_g_1).words.w0 =
            (0xfb as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_1).words.w1 =
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((*this).fwork[GDF_TRIFORCE_ENV_G as libc::c_int as usize] as
                     u8_0 as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (128 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        if (*this).triforceType as libc::c_int ==
               GDF_TRIFORCE_PLAYER as libc::c_int {
            let mut player: *mut Player =
                (*globalCtx).actorCtx.actorLists[ACTORCAT_PLAYER as
                                                     libc::c_int as
                                                     usize].head as
                    *mut Player;
            (*this).triforcePos =
                (*player).bodyPartsPos[12 as libc::c_int as usize];
            (*this).triforcePos.x += -0.6f32;
            (*this).triforcePos.y += 3.0f32;
            (*this).triforcePos.z += -2.0f32
        } else if (*this).triforceType as libc::c_int ==
                      GDF_TRIFORCE_ZELDA as libc::c_int {
            (*this).triforcePos = (*sZelda).unk_31C;
            (*this).triforcePos.y += 1.8f32;
            (*this).triforcePos.z += 4.0f32
        }
        Matrix_Translate((*this).triforcePos.x, (*this).triforcePos.y,
                         (*this).triforcePos.z,
                         MTXMODE_NEW as libc::c_int as u8_0);
        if (*this).triforceType as libc::c_int ==
               GDF_TRIFORCE_PLAYER as libc::c_int {
            Matrix_RotateX(-1.4f32, MTXMODE_APPLY as libc::c_int as u8_0);
            Matrix_RotateZ(4.0f32, MTXMODE_APPLY as libc::c_int as u8_0);
        } else if (*this).triforceType as libc::c_int ==
                      GDF_TRIFORCE_ZELDA as libc::c_int {
            Matrix_RotateY(1.5f32, 1 as libc::c_int as u8_0);
            Matrix_RotateX(1.1f32, 1 as libc::c_int as u8_0);
            Matrix_RotateZ(-0.99999994f32,
                           MTXMODE_APPLY as libc::c_int as u8_0);
        } else { func_800D1FD4(&mut (*globalCtx).billboardMtxF); }
        Matrix_Scale((*this).fwork[GDF_TRIFORCE_SCALE as libc::c_int as
                                       usize],
                     (*this).fwork[GDF_TRIFORCE_SCALE as libc::c_int as
                                       usize], 1.0f32,
                     MTXMODE_APPLY as libc::c_int as u8_0);
        let fresh50 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_2: *mut Gfx = fresh50;
        (*_g_2).words.w0 =
            (0xda as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((::std::mem::size_of::<Mtx>() as
                      libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                      libc::c_uint).wrapping_div(8
                                                                                     as
                                                                                     libc::c_int
                                                                                     as
                                                                                     libc::c_uint)
                     &
                     (((0x1 as libc::c_int) << 5 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (((0 as libc::c_int | 0x2 as libc::c_int | 0 as libc::c_int) ^
                      0x1 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_2).words.w1 =
            Matrix_NewMtx((*globalCtx).state.gfxCtx,
                          b"../z_boss_ganon.c\x00" as *const u8 as
                              *const libc::c_char as *mut libc::c_char,
                          7779 as libc::c_int) as libc::c_uint;
        let fresh51 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_3: *mut Gfx = fresh51;
        (*_g_3).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_3).words.w1 =
            gSegments[((gDorfTriforceDL.as_mut_ptr() as u32_0) <<
                           4 as libc::c_int >> 28 as libc::c_int) as
                          usize].wrapping_add(gDorfTriforceDL.as_mut_ptr() as
                                                  u32_0 &
                                                  0xffffff as libc::c_int as
                                                      libc::c_uint).wrapping_add(0x80000000
                                                                                     as
                                                                                     libc::c_uint)
                as *mut libc::c_void as libc::c_uint;
        Matrix_Pop();
        Graph_CloseDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                         b"../z_boss_ganon.c\x00" as *const u8 as
                             *const libc::c_char, 7782 as libc::c_int);
    };
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_DrawDarkVortex(mut this: *mut BossGanon,
                                                  mut globalCtx:
                                                      *mut GlobalContext) {
    let mut pad: s32 = 0;
    if (*this).fwork[GDF_VORTEX_ALPHA as libc::c_int as usize] > 0.0f32 {
        let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
        let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
        __gfxCtx = (*globalCtx).state.gfxCtx;
        Graph_OpenDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                        b"../z_boss_ganon.c\x00" as *const u8 as
                            *const libc::c_char, 7792 as libc::c_int);
        Matrix_Push();
        let fresh52 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g: *mut Gfx = fresh52;
        (*_g).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh53 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_0: *mut Gfx = fresh53;
        (*_g_0).words.w0 =
            (0xdb as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0x6 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                ((0x8 as libc::c_int * 4 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_0).words.w1 =
            Gfx_TwoTexScroll((*globalCtx).state.gfxCtx, 0 as libc::c_int,
                             ((*this).unk_1A2 as libc::c_int *
                                  -(8 as libc::c_int)) as u32_0,
                             0 as libc::c_int as u32_0, 0x20 as libc::c_int,
                             0x40 as libc::c_int, 1 as libc::c_int,
                             ((*this).unk_1A2 as libc::c_int *
                                  -(4 as libc::c_int)) as u32_0,
                             ((*this).unk_1A2 as libc::c_int *
                                  -(8 as libc::c_int)) as u32_0,
                             0x20 as libc::c_int, 0x20 as libc::c_int) as
                libc::c_uint;
        let fresh54 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_1: *mut Gfx = fresh54;
        (*_g_1).words.w0 =
            (0xfa as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_1).words.w1 =
            (100 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (200 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                ((*this).fwork[GDF_VORTEX_ALPHA as libc::c_int as usize] as s8
                     as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh55 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_2: *mut Gfx = fresh55;
        (*_g_2).words.w0 =
            (0xfb as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_2).words.w1 =
            (130 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (128 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        if (*this).csState as libc::c_int != 21 as libc::c_int {
            Matrix_Translate(0.0f32, 105.0f32, -400.0f32,
                             MTXMODE_NEW as libc::c_int as u8_0);
            Matrix_RotateX(3.14159265358979323846f32 /
                               2 as libc::c_int as libc::c_float,
                           MTXMODE_APPLY as libc::c_int as u8_0);
        } else {
            Matrix_Translate(-50.0f32, 50.0f32, -150.0f32,
                             MTXMODE_NEW as libc::c_int as u8_0);
            Matrix_RotateY(3.14159265358979323846f32 /
                               10 as libc::c_int as libc::c_float,
                           MTXMODE_APPLY as libc::c_int as u8_0);
            Matrix_RotateX(3.14159265358979323846f32 /
                               2 as libc::c_int as libc::c_float,
                           MTXMODE_APPLY as libc::c_int as u8_0);
        }
        Matrix_Scale((*this).fwork[GDF_VORTEX_SCALE as libc::c_int as usize],
                     (*this).fwork[GDF_VORTEX_SCALE as libc::c_int as usize],
                     (*this).fwork[GDF_VORTEX_SCALE as libc::c_int as usize],
                     MTXMODE_APPLY as libc::c_int as u8_0);
        let fresh56 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_3: *mut Gfx = fresh56;
        (*_g_3).words.w0 =
            (0xda as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((::std::mem::size_of::<Mtx>() as
                      libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                      libc::c_uint).wrapping_div(8
                                                                                     as
                                                                                     libc::c_int
                                                                                     as
                                                                                     libc::c_uint)
                     &
                     (((0x1 as libc::c_int) << 5 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (((0 as libc::c_int | 0x2 as libc::c_int | 0 as libc::c_int) ^
                      0x1 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_3).words.w1 =
            Matrix_NewMtx((*globalCtx).state.gfxCtx,
                          b"../z_boss_ganon.c\x00" as *const u8 as
                              *const libc::c_char as *mut libc::c_char,
                          7841 as libc::c_int) as libc::c_uint;
        let fresh57 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_4: *mut Gfx = fresh57;
        (*_g_4).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_4).words.w1 =
            gSegments[((gDorfVortexDL.as_mut_ptr() as u32_0) <<
                           4 as libc::c_int >> 28 as libc::c_int) as
                          usize].wrapping_add(gDorfVortexDL.as_mut_ptr() as
                                                  u32_0 &
                                                  0xffffff as libc::c_int as
                                                      libc::c_uint).wrapping_add(0x80000000
                                                                                     as
                                                                                     libc::c_uint)
                as *mut libc::c_void as libc::c_uint;
        Matrix_Pop();
        Graph_CloseDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                         b"../z_boss_ganon.c\x00" as *const u8 as
                             *const libc::c_char, 7844 as libc::c_int);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_808E0254(mut this: *mut BossGanon,
                                       mut tex: *mut u8_0, mut arg2: f32_0) {
    static mut D_808E4DF4: [s16; 6] =
        [1 as libc::c_int as s16, 2 as libc::c_int as s16,
         3 as libc::c_int as s16, 3 as libc::c_int as s16,
         2 as libc::c_int as s16, 1 as libc::c_int as s16];
    static mut D_808E4E00: [s16; 7] =
        [2 as libc::c_int as s16, 3 as libc::c_int as s16,
         4 as libc::c_int as s16, 4 as libc::c_int as s16,
         4 as libc::c_int as s16, 3 as libc::c_int as s16,
         2 as libc::c_int as s16];
    static mut D_808E4E10: [s16; 8] =
        [2 as libc::c_int as s16, 3 as libc::c_int as s16,
         4 as libc::c_int as s16, 4 as libc::c_int as s16,
         4 as libc::c_int as s16, 4 as libc::c_int as s16,
         3 as libc::c_int as s16, 2 as libc::c_int as s16];
    static mut D_808E4E20: [s16; 12] =
        [2 as libc::c_int as s16, 4 as libc::c_int as s16,
         5 as libc::c_int as s16, 5 as libc::c_int as s16,
         6 as libc::c_int as s16, 6 as libc::c_int as s16,
         6 as libc::c_int as s16, 6 as libc::c_int as s16,
         5 as libc::c_int as s16, 5 as libc::c_int as s16,
         4 as libc::c_int as s16, 2 as libc::c_int as s16];
    static mut D_808E4E38: [s16; 15] =
        [1 as libc::c_int as s16, -(1 as libc::c_int) as s16,
         1 as libc::c_int as s16, 1 as libc::c_int as s16,
         3 as libc::c_int as s16, 4 as libc::c_int as s16,
         1 as libc::c_int as s16, 6 as libc::c_int as s16,
         7 as libc::c_int as s16, 2 as libc::c_int as s16,
         9 as libc::c_int as s16, 10 as libc::c_int as s16,
         2 as libc::c_int as s16, 12 as libc::c_int as s16,
         13 as libc::c_int as s16];
    static mut D_808E4E58: [u8_0; 15] =
        [3 as libc::c_int as u8_0, 2 as libc::c_int as u8_0,
         2 as libc::c_int as u8_0, 1 as libc::c_int as u8_0,
         3 as libc::c_int as u8_0, 3 as libc::c_int as u8_0,
         1 as libc::c_int as u8_0, 3 as libc::c_int as u8_0,
         3 as libc::c_int as u8_0, 1 as libc::c_int as u8_0,
         0 as libc::c_int as u8_0, 3 as libc::c_int as u8_0,
         1 as libc::c_int as u8_0, 0 as libc::c_int as u8_0,
         3 as libc::c_int as u8_0];
    let mut baseX: s16 = 0;
    let mut index: s16 = 0;
    let mut i: s16 = 0;
    let mut baseY: s16 = 0;
    let mut x: s16 = 0;
    let mut addY: s16 = 0;
    let mut lerpX: f32_0 = 0.;
    let mut y: s16 = 0;
    let mut lerpY: f32_0 = 0.;
    let mut lerpZ: f32_0 = 0.;
    let mut sp68: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut sp5C: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) < 15 as libc::c_int {
        if arg2 == 0.0f32 ||
               {
                   y = D_808E4E38[i as usize];
                   (y as libc::c_int) >= 0 as libc::c_int
               } {
            if arg2 > 0.0f32 {
                lerpX =
                    (*this).unk_2EC[i as usize].x +
                        ((*this).unk_2EC[y as usize].x -
                             (*this).unk_2EC[i as usize].x) * arg2;
                lerpY =
                    (*this).unk_2EC[i as usize].y +
                        ((*this).unk_2EC[y as usize].y -
                             (*this).unk_2EC[i as usize].y) * arg2;
                lerpZ =
                    (*this).unk_2EC[i as usize].z +
                        ((*this).unk_2EC[y as usize].z -
                             (*this).unk_2EC[i as usize].z) * arg2;
                sp68.x = lerpX - (*this).actor.world.pos.x;
                sp68.y =
                    lerpY - (*this).actor.world.pos.y +
                        76 as libc::c_int as libc::c_float +
                        30 as libc::c_int as libc::c_float +
                        30 as libc::c_int as libc::c_float;
                sp68.z = lerpZ - (*this).actor.world.pos.z
            } else {
                sp68.x =
                    (*this).unk_2EC[i as usize].x - (*this).actor.world.pos.x;
                sp68.y =
                    (*this).unk_2EC[i as usize].y - (*this).actor.world.pos.y
                        + 76 as libc::c_int as libc::c_float +
                        30 as libc::c_int as libc::c_float +
                        30 as libc::c_int as libc::c_float;
                sp68.z =
                    (*this).unk_2EC[i as usize].z - (*this).actor.world.pos.z
            }
            Matrix_MultVec3f(&mut sp68, &mut sp5C);
            sp5C.x *= 0.4f32;
            sp5C.y *= 0.4f32;
            baseX = (sp5C.x + 32.0f32) as s16;
            baseY = (sp5C.y as s16 as libc::c_int * 64 as libc::c_int) as s16;
            if D_808E4E58[i as usize] as libc::c_int == 2 as libc::c_int {
                y = 0 as libc::c_int as s16;
                addY = -(0x180 as libc::c_int) as s16;
                while (y as libc::c_int) < 12 as libc::c_int {
                    x = -(D_808E4E20[y as usize] as libc::c_int) as s16;
                    while (x as libc::c_int) <
                              D_808E4E20[y as usize] as libc::c_int {
                        index =
                            (baseX as libc::c_int + x as libc::c_int +
                                 baseY as libc::c_int + addY as libc::c_int)
                                as s16;
                        if index as libc::c_int >= 0 as libc::c_int &&
                               (index as libc::c_int) < 0x1000 as libc::c_int
                           {
                            *tex.offset(index as isize) =
                                255 as libc::c_int as u8_0
                        }
                        x += 1
                    }
                    y += 1;
                    addY = (addY as libc::c_int + 0x40 as libc::c_int) as s16
                }
            } else if D_808E4E58[i as usize] as libc::c_int ==
                          1 as libc::c_int {
                y = 0 as libc::c_int as s16;
                addY = -(0x100 as libc::c_int) as s16;
                while (y as libc::c_int) < 8 as libc::c_int {
                    x = -(D_808E4E10[y as usize] as libc::c_int) as s16;
                    while (x as libc::c_int) <
                              D_808E4E10[y as usize] as libc::c_int {
                        index =
                            (baseX as libc::c_int + x as libc::c_int +
                                 baseY as libc::c_int + addY as libc::c_int)
                                as s16;
                        if index as libc::c_int >= 0 as libc::c_int &&
                               (index as libc::c_int) < 0x1000 as libc::c_int
                           {
                            *tex.offset(index as isize) =
                                255 as libc::c_int as u8_0
                        }
                        x += 1
                    }
                    y += 1;
                    addY = (addY as libc::c_int + 0x40 as libc::c_int) as s16
                }
            } else if D_808E4E58[i as usize] as libc::c_int ==
                          0 as libc::c_int {
                y = 0 as libc::c_int as s16;
                addY = -(0xc0 as libc::c_int) as s16;
                while (y as libc::c_int) < 7 as libc::c_int {
                    x = -(D_808E4E00[y as usize] as libc::c_int) as s16;
                    while (x as libc::c_int) <
                              D_808E4E00[y as usize] as libc::c_int -
                                  1 as libc::c_int {
                        index =
                            (baseX as libc::c_int + x as libc::c_int +
                                 baseY as libc::c_int + addY as libc::c_int)
                                as s16;
                        if index as libc::c_int >= 0 as libc::c_int &&
                               (index as libc::c_int) < 0x1000 as libc::c_int
                           {
                            *tex.offset(index as isize) =
                                255 as libc::c_int as u8_0
                        }
                        x += 1
                    }
                    y += 1;
                    addY = (addY as libc::c_int + 0x40 as libc::c_int) as s16
                }
            } else {
                y = 0 as libc::c_int as s16;
                addY = -(0x80 as libc::c_int) as s16;
                while (y as libc::c_int) < 6 as libc::c_int {
                    x = -(D_808E4DF4[y as usize] as libc::c_int) as s16;
                    while (x as libc::c_int) <
                              D_808E4DF4[y as usize] as libc::c_int -
                                  1 as libc::c_int {
                        index =
                            (baseX as libc::c_int + x as libc::c_int +
                                 baseY as libc::c_int + addY as libc::c_int)
                                as s16;
                        if index as libc::c_int >= 0 as libc::c_int &&
                               (index as libc::c_int) < 0x1000 as libc::c_int
                           {
                            *tex.offset(index as isize) =
                                255 as libc::c_int as u8_0
                        }
                        x += 1
                    }
                    y += 1;
                    addY = (addY as libc::c_int + 0x40 as libc::c_int) as s16
                }
            }
        }
        i += 1
    };
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_GenShadowTexture(mut tex: *mut u8_0,
                                                    mut this: *mut BossGanon,
                                                    mut globalCtx:
                                                        *mut GlobalContext) {
    let mut addY: s16 = 0;
    let mut baseX: s16 = 0;
    let mut baseY: s16 = 0;
    let mut i: s16 = 0;
    let mut j: s16 = 0;
    let mut y: s16 = 0;
    let mut x: s16 = 0;
    let mut index: s16 = 0;
    let mut sp7C: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut sp70: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut ptr: *mut s32 = tex as *mut s32;
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) <
              64 as libc::c_int * 64 as libc::c_int / 4 as libc::c_int {
        *ptr = 0 as libc::c_int;
        i += 1;
        ptr = ptr.offset(1)
    }
    Matrix_RotateX(1.0f32, MTXMODE_NEW as libc::c_int as u8_0);
    i = 0 as libc::c_int as s16;
    while i as libc::c_int <= 5 as libc::c_int {
        func_808E0254(this, tex, i as libc::c_int as libc::c_float / 5.0f32);
        i += 1
    }
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) < 12 as libc::c_int {
        j = 0 as libc::c_int as s16;
        while (j as libc::c_int) < 12 as libc::c_int {
            sp7C.x =
                (*sCape).strands[i as usize].joints[j as usize].x -
                    (*this).actor.world.pos.x;
            sp7C.y =
                (*sCape).strands[i as usize].joints[j as usize].y -
                    (*this).actor.world.pos.y + 76.0f32 + 100.0f32 + 30.0f32;
            sp7C.z =
                (*sCape).strands[i as usize].joints[j as usize].z -
                    (*this).actor.world.pos.z;
            Matrix_MultVec3f(&mut sp7C, &mut sp70);
            sp70.x = sp70.x * 0.28f32;
            sp70.y = sp70.y * 0.28f32;
            baseX = (sp70.x + 32.0f32) as s32 as s16;
            baseY =
                (sp70.y as s16 as libc::c_int * 0x40 as libc::c_int) as s16;
            if (*sCape).strands[i as usize].torn[j as usize] == 0 {
                y = -(1 as libc::c_int) as s16;
                addY = -(0x40 as libc::c_int) as s16;
                while y as libc::c_int <= 1 as libc::c_int {
                    x = -(3 as libc::c_int) as s16;
                    while x as libc::c_int <= 3 as libc::c_int {
                        index =
                            (baseX as libc::c_int + x as libc::c_int +
                                 baseY as libc::c_int + addY as libc::c_int)
                                as s16;
                        if 0 as libc::c_int <= index as libc::c_int &&
                               (index as libc::c_int) < 0x1000 as libc::c_int
                           {
                            *tex.offset(index as isize) =
                                255 as libc::c_int as u8_0
                        }
                        x += 1
                    }
                    y += 1;
                    addY = (addY as libc::c_int + 0x40 as libc::c_int) as s16
                }
            } else {
                y = -(1 as libc::c_int) as s16;
                addY = -(0x40 as libc::c_int) as s16;
                while y as libc::c_int <= 1 as libc::c_int {
                    x = -(1 as libc::c_int) as s16;
                    while x as libc::c_int <= 1 as libc::c_int {
                        index =
                            (baseX as libc::c_int + x as libc::c_int +
                                 baseY as libc::c_int + addY as libc::c_int)
                                as s16;
                        if 0 as libc::c_int <= index as libc::c_int &&
                               (index as libc::c_int) < 0x1000 as libc::c_int
                           {
                            *tex.offset(index as isize) =
                                255 as libc::c_int as u8_0
                        }
                        x += 1
                    }
                    y += 1;
                    addY = (addY as libc::c_int + 0x40 as libc::c_int) as s16
                }
            }
            j += 1
        }
        i += 1
    };
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_DrawShadowTexture(mut tex:
                                                         *mut libc::c_void,
                                                     mut this: *mut BossGanon,
                                                     mut globalCtx:
                                                         *mut GlobalContext) {
    let mut pad: s32 = 0;
    let mut zOffset: f32_0 = 0.;
    let mut gfxCtx: *mut GraphicsContext = (*globalCtx).state.gfxCtx;
    let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
    let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
    __gfxCtx = gfxCtx;
    Graph_OpenDisps(dispRefs.as_mut_ptr(), gfxCtx,
                    b"../z_boss_ganon.c\x00" as *const u8 as
                        *const libc::c_char, 8372 as libc::c_int);
    func_80093D18((*globalCtx).state.gfxCtx);
    let fresh58 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g: *mut Gfx = fresh58;
    (*_g).words.w0 =
        (0xfa as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (50 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh59 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_0: *mut Gfx = fresh59;
    (*_g_0).words.w0 =
        (0xfb as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_0).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    if ((*this).csState as libc::c_int) < 100 as libc::c_int {
        zOffset =
            ((*this).actor.world.pos.y - 10 as libc::c_int as libc::c_float +
                 70.0f32) * -5.0f32 / 10.0f32 + 10.0f32;
        Matrix_Translate((*this).actor.world.pos.x, 0.0f32,
                         (*this).actor.world.pos.z + zOffset,
                         MTXMODE_NEW as libc::c_int as u8_0);
    } else {
        Matrix_Translate((*this).actor.world.pos.x, 4102.0f32,
                         (*this).actor.world.pos.z - 20.0f32,
                         MTXMODE_NEW as libc::c_int as u8_0);
    }
    Matrix_Scale(0.95000005f32, 1.0f32, 0.95000005f32,
                 MTXMODE_APPLY as libc::c_int as u8_0);
    let fresh60 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_1: *mut Gfx = fresh60;
    (*_g_1).words.w0 =
        (0xda as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            ((::std::mem::size_of::<Mtx>() as
                  libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                  libc::c_uint).wrapping_div(8
                                                                                 as
                                                                                 libc::c_int
                                                                                 as
                                                                                 libc::c_uint)
                 &
                 (((0x1 as libc::c_int) << 5 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (((0 as libc::c_int | 0x2 as libc::c_int | 0 as libc::c_int) ^
                  0x1 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_1).words.w1 =
        Matrix_NewMtx((*globalCtx).state.gfxCtx,
                      b"../z_boss_ganon.c\x00" as *const u8 as
                          *const libc::c_char as *mut libc::c_char,
                      8396 as libc::c_int) as libc::c_uint;
    let fresh61 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_2: *mut Gfx = fresh61;
    (*_g_2).words.w0 =
        (0xde as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_2).words.w1 = gDorfShadowSetupDL.as_mut_ptr() as libc::c_uint;
    let fresh62 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_3: *mut Gfx = fresh62;
    (*_g_3).words.w0 =
        (0xfd as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (4 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 21 as libc::c_int
            |
            (2 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            ((1 as libc::c_int - 1 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_3).words.w1 = tex as libc::c_uint;
    let fresh63 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_4: *mut Gfx = fresh63;
    (*_g_4).words.w0 =
        (0xf5 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (4 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 21 as libc::c_int
            |
            (2 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 9 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_4).words.w1 =
        (7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 20 as libc::c_int
            |
            ((0 as libc::c_int | 0x2 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 18 as libc::c_int
            |
            (6 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 14 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 10 as libc::c_int
            |
            ((0 as libc::c_int | 0x2 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (6 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 4 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh64 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_5: *mut Gfx = fresh64;
    (*_g_5).words.w0 =
        (0xe6 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_5).words.w1 = 0 as libc::c_int as libc::c_uint;
    let fresh65 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_6: *mut Gfx = fresh65;
    (*_g_6).words.w0 =
        (0xf3 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_6).words.w1 =
        (7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            ((if ((64 as libc::c_int * 64 as libc::c_int + 1 as libc::c_int >>
                       1 as libc::c_int) - 1 as libc::c_int) <
                     2047 as libc::c_int {
                  (64 as libc::c_int * 64 as libc::c_int + 1 as libc::c_int >>
                       1 as libc::c_int) - 1 as libc::c_int
              } else { 2047 as libc::c_int }) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (((((1 as libc::c_int) << 11 as libc::c_int) +
                   (if 1 as libc::c_int >
                           64 as libc::c_int * 1 as libc::c_int /
                               8 as libc::c_int {
                        1 as libc::c_int
                    } else {
                        (64 as libc::c_int * 1 as libc::c_int) /
                            8 as libc::c_int
                    }) - 1 as libc::c_int) /
                  (if 1 as libc::c_int >
                          64 as libc::c_int * 1 as libc::c_int /
                              8 as libc::c_int {
                       1 as libc::c_int
                   } else {
                       (64 as libc::c_int * 1 as libc::c_int) /
                           8 as libc::c_int
                   })) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh66 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_7: *mut Gfx = fresh66;
    (*_g_7).words.w0 =
        (0xe7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_7).words.w1 = 0 as libc::c_int as libc::c_uint;
    let fresh67 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_8: *mut Gfx = fresh67;
    (*_g_8).words.w0 =
        (0xf5 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (4 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 21 as libc::c_int
            |
            (1 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            ((64 as libc::c_int * 1 as libc::c_int + 7 as libc::c_int >>
                  3 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 9 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_8).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 20 as libc::c_int
            |
            ((0 as libc::c_int | 0x2 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 18 as libc::c_int
            |
            (6 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 14 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 10 as libc::c_int
            |
            ((0 as libc::c_int | 0x2 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (6 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 4 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh68 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_9: *mut Gfx = fresh68;
    (*_g_9).words.w0 =
        (0xf2 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_9).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (((64 as libc::c_int - 1 as libc::c_int) << 2 as libc::c_int) as
                 u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (((64 as libc::c_int - 1 as libc::c_int) << 2 as libc::c_int) as
                 u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh69 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_10: *mut Gfx = fresh69;
    (*_g_10).words.w0 =
        (0xde as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_10).words.w1 = gDorfShadowModelDL.as_mut_ptr() as libc::c_uint;
    Graph_CloseDisps(dispRefs.as_mut_ptr(), gfxCtx,
                     b"../z_boss_ganon.c\x00" as *const u8 as
                         *const libc::c_char, 8426 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_Draw(mut thisx: *mut Actor,
                                        mut globalCtx: *mut GlobalContext) {
    let mut i: s32 = 0;
    let mut this: *mut BossGanon = thisx as *mut BossGanon;
    let mut shadowTex: *mut libc::c_void = 0 as *mut libc::c_void;
    shadowTex =
        Graph_Alloc((*globalCtx).state.gfxCtx,
                    (64 as libc::c_int * 64 as libc::c_int) as size_t);
    let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
    let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
    __gfxCtx = (*globalCtx).state.gfxCtx;
    Graph_OpenDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                    b"../z_boss_ganon.c\x00" as *const u8 as
                        *const libc::c_char, 9138 as libc::c_int);
    func_80093D18((*globalCtx).state.gfxCtx);
    func_80093D84((*globalCtx).state.gfxCtx);
    if (*this).unk_1A6 as libc::c_int & 2 as libc::c_int != 0 as libc::c_int {
        (*__gfxCtx).polyOpa.p =
            Gfx_SetFog((*__gfxCtx).polyOpa.p, 255 as libc::c_int,
                       50 as libc::c_int, 0 as libc::c_int, 0 as libc::c_int,
                       900 as libc::c_int, 1099 as libc::c_int)
    }
    let fresh70 = (*__gfxCtx).polyXlu.p;
    (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
    let mut _g: *mut Gfx = fresh70;
    (*_g).words.w0 =
        (0xdb as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0x6 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            ((0x8 as libc::c_int * 4 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g).words.w1 =
        gSegments[((gDorfEyeTex.as_mut_ptr() as u32_0) << 4 as libc::c_int >>
                       28 as libc::c_int) as
                      usize].wrapping_add(gDorfEyeTex.as_mut_ptr() as u32_0 &
                                              0xffffff as libc::c_int as
                                                  libc::c_uint).wrapping_add(0x80000000
                                                                                 as
                                                                                 libc::c_uint)
            as *mut libc::c_void as libc::c_uint;
    SkelAnime_DrawFlexOpa(globalCtx, (*this).skelAnime.skeleton,
                          (*this).skelAnime.jointTable,
                          (*this).skelAnime.dListCount as s32,
                          Some(BossGanon_OverrideLimbDraw as
                                   unsafe extern "C" fn(_: *mut GlobalContext,
                                                        _: s32,
                                                        _: *mut *mut Gfx,
                                                        _: *mut Vec3f,
                                                        _: *mut Vec3s,
                                                        _: *mut libc::c_void)
                                       -> s32),
                          Some(BossGanon_PostLimbDraw as
                                   unsafe extern "C" fn(_: *mut GlobalContext,
                                                        _: s32,
                                                        _: *mut *mut Gfx,
                                                        _: *mut Vec3s,
                                                        _: *mut libc::c_void)
                                       -> ()),
                          &mut (*this).actor as *mut Actor as
                              *mut libc::c_void);
    (*this).unk_2EC[0 as libc::c_int as usize].x =
        (*this).unk_2EC[1 as libc::c_int as usize].x;
    (*this).unk_2EC[0 as libc::c_int as usize].y =
        (*this).unk_2EC[1 as libc::c_int as usize].y + 30.0f32;
    (*this).unk_2EC[0 as libc::c_int as usize].z =
        (*this).unk_2EC[1 as libc::c_int as usize].z;
    (*__gfxCtx).polyOpa.p = Gameplay_SetFog(globalCtx, (*__gfxCtx).polyOpa.p);
    BossGanon_DrawEffects(globalCtx);
    (*sCape).actor.world.pos = (*this).actor.world.pos;
    (*sCape).rightForearmPos = (*this).unk_214;
    (*sCape).leftForearmPos = (*this).unk_220;
    (*sCape).rightShoulderPos = (*this).unk_22C;
    (*sCape).leftShoulderPos = (*this).unk_238;
    BossGanon_DrawShock(this, globalCtx);
    BossGanon_DrawHandLightBall(this, globalCtx);
    BossGanon_DrawBigMagicCharge(this, globalCtx);
    BossGanon_DrawTriforce(this, globalCtx);
    BossGanon_DrawDarkVortex(this, globalCtx);
    BossGanon_GenShadowTexture(shadowTex as *mut u8_0, this, globalCtx);
    BossGanon_DrawShadowTexture(shadowTex, this, globalCtx);
    Graph_CloseDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                     b"../z_boss_ganon.c\x00" as *const u8 as
                         *const libc::c_char, 9393 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_CheckFallingPlatforms(mut this:
                                                             *mut BossGanon,
                                                         mut globalCtx:
                                                             *mut GlobalContext,
                                                         mut checkPos:
                                                             *mut Vec3f)
 -> s32 {
    let mut prop: *mut Actor =
        (*globalCtx).actorCtx.actorLists[ACTORCAT_PROP as libc::c_int as
                                             usize].head;
    while !prop.is_null() {
        if prop as *mut BossGanon == this ||
               (*prop).id as libc::c_int !=
                   ACTOR_BG_GANON_OTYUKA as libc::c_int {
            prop = (*prop).next
        } else {
            let mut platform: *mut BgGanonOtyuka = prop as *mut BgGanonOtyuka;
            let mut xDiff: f32_0 =
                (*platform).dyna.actor.world.pos.x - (*checkPos).x;
            let mut yDiff: f32_0 =
                (*platform).dyna.actor.world.pos.y - (*checkPos).y;
            let mut zDiff: f32_0 =
                (*platform).dyna.actor.world.pos.z - (*checkPos).z;
            if fabsf(xDiff) < 60.0f32 && yDiff < 20.0f32 && yDiff > -20.0f32
                   && fabsf(zDiff) < 60.0f32 {
                (*platform).isFalling = 1 as libc::c_int as u8_0;
                (*platform).visibleSides =
                    ((1 as libc::c_int) << 0 as libc::c_int |
                         (1 as libc::c_int) << 1 as libc::c_int |
                         (1 as libc::c_int) << 2 as libc::c_int |
                         (1 as libc::c_int) << 3 as libc::c_int) as u8_0;
                return 1 as libc::c_int
            } else { prop = (*prop).next }
        }
    }
    return 0 as libc::c_int;
}
// update
#[no_mangle]
pub unsafe extern "C" fn BossGanon_LightBall_Update(mut thisx: *mut Actor,
                                                    mut globalCtx2:
                                                        *mut GlobalContext) {
    let mut hitWithBottle: u8_0 = 0;
    let mut i: s16 = 0;
    let mut spBA: s16 = 0 as libc::c_int as s16;
    let mut spAC: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut spA0: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut sp94: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut this: *mut BossGanon = thisx as *mut BossGanon;
    let mut globalCtx: *mut GlobalContext = globalCtx2;
    let mut xDistFromLink: f32_0 = 0.;
    let mut yDistFromLink: f32_0 = 0.;
    let mut zDistFromLink: f32_0 = 0.;
    let mut minReflectDist: f32_0 = 0.;
    let mut xDistFromGanondorf: f32_0 = 0.;
    let mut yDistFromGanondorf: f32_0 = 0.;
    let mut zDistFromGanondorf: f32_0 = 0.;
    let mut player: *mut Player =
        (*globalCtx).actorCtx.actorLists[ACTORCAT_PLAYER as libc::c_int as
                                             usize].head as *mut Player;
    let mut pad: s32 = 0;
    let mut ganondorf: *mut BossGanon =
        (*this).actor.parent as *mut BossGanon;
    let mut pad1: s32 = 0;
    (*this).unk_1A2 += 1;
    (*ganondorf).envLightMode = 1 as libc::c_int as s8;
    if (*this).unk_1A8 as libc::c_int != 0 as libc::c_int {
        if (*this).unk_1A8 as libc::c_int == 2 as libc::c_int {
            Math_ApproachZeroF(&mut *(*this).fwork.as_mut_ptr().offset(GDF_FWORK_1
                                                                           as
                                                                           libc::c_int
                                                                           as
                                                                           isize),
                               1.0f32, 10.0f32);
            Math_ApproachF(&mut (*this).actor.scale.x, 30.0f32, 0.5f32,
                           100.0f32);
        } else {
            (*this).actor.shape.rot.y =
                ((*this).actor.shape.rot.y as libc::c_int +
                     0x1000 as libc::c_int) as s16;
            (*ganondorf).lensFlareTimer = 1 as libc::c_int as s16;
            gCustomLensFlarePos = (*this).actor.world.pos;
            Math_ApproachZeroF(&mut *(*this).fwork.as_mut_ptr().offset(GDF_FWORK_1
                                                                           as
                                                                           libc::c_int
                                                                           as
                                                                           isize),
                               1.0f32, 30.0f32);
            Math_ApproachF(&mut (*this).actor.scale.x, 20.0f32, 0.5f32,
                           100.0f32);
            (*this).fwork[GDF_FWORK_0 as libc::c_int as usize] +=
                3.14159265358979323846f32 / 2 as libc::c_int as libc::c_float
                    +
                    Rand_ZeroFloat(3.14159265358979323846f32 /
                                       4 as libc::c_int as libc::c_float)
        }
        Actor_SetScale(&mut (*this).actor, (*this).actor.scale.x);
        if (*this).fwork[GDF_FWORK_1 as libc::c_int as usize] == 0.0f32 {
            Actor_Kill(&mut (*this).actor);
        }
    } else {
        Audio_PlayActorSound2(&mut (*this).actor,
                              (0x38a0 as libc::c_int - 0x800 as libc::c_int)
                                  as u16_0);
        if (*this).unk_1A2 as libc::c_int % 2 as libc::c_int !=
               0 as libc::c_int {
            Actor_SetScale(&mut (*this).actor, 6.0f32);
        } else { Actor_SetScale(&mut (*this).actor, 5.25f32); }
        (*this).actor.shape.rot.z =
            ((*this).actor.shape.rot.z as libc::c_int +
                 ((Rand_ZeroOne() * 20000.0f32) as s16 as libc::c_int +
                      0x4000 as libc::c_int)) as s16;
        i = 0 as libc::c_int as s16;
        while (i as libc::c_int) <
                  (::std::mem::size_of::<[s16; 5]>() as
                       libc::c_ulong).wrapping_div(::std::mem::size_of::<s16>()
                                                       as libc::c_ulong) as
                      s32 {
            if (*this).timers[i as usize] as libc::c_int != 0 as libc::c_int {
                (*this).timers[i as usize] -= 1
            }
            i += 1
        }
        xDistFromGanondorf =
            (*ganondorf).unk_1FC.x - (*this).actor.world.pos.x;
        yDistFromGanondorf =
            (*ganondorf).unk_1FC.y - (*this).actor.world.pos.y;
        zDistFromGanondorf =
            (*ganondorf).unk_1FC.z - (*this).actor.world.pos.z;
        xDistFromLink =
            (*player).actor.world.pos.x - (*this).actor.world.pos.x;
        yDistFromLink =
            (*player).actor.world.pos.y + 40.0f32 - (*this).actor.world.pos.y;
        zDistFromLink =
            (*player).actor.world.pos.z - (*this).actor.world.pos.z;
        func_8002D908(&mut (*this).actor);
        func_8002D7EC(&mut (*this).actor);
        let mut current_block_110: u64;
        match (*this).unk_1C2 as libc::c_int {
            0 => {
                if (*player).stateFlags1 & 2 as libc::c_int as libc::c_uint !=
                       0 &&
                       (if ((*player).actor.shape.rot.y as libc::c_int -
                                ((*ganondorf).actor.yawTowardsPlayer as
                                     libc::c_int + 0x8000 as libc::c_int) as
                                    s16 as libc::c_int) as s16 as libc::c_int
                               >= 0 as libc::c_int {
                            ((*player).actor.shape.rot.y as libc::c_int -
                                 ((*ganondorf).actor.yawTowardsPlayer as
                                      libc::c_int + 0x8000 as libc::c_int) as
                                     s16 as libc::c_int) as s16 as libc::c_int
                        } else {
                            -(((*player).actor.shape.rot.y as libc::c_int -
                                   ((*ganondorf).actor.yawTowardsPlayer as
                                        libc::c_int + 0x8000 as libc::c_int)
                                       as s16 as libc::c_int) as s16 as
                                  libc::c_int)
                        }) < 0x2000 as libc::c_int &&
                       sqrtf(xDistFromLink * xDistFromLink +
                                 yDistFromLink * yDistFromLink +
                                 zDistFromLink * zDistFromLink) <= 25.0f32 {
                    hitWithBottle = 1 as libc::c_int as u8_0
                } else { hitWithBottle = 0 as libc::c_int as u8_0 }
                if (*this).collider.base.acFlags as libc::c_int &
                       2 as libc::c_int != 0 ||
                       hitWithBottle as libc::c_int != 0 {
                    let mut acHitInfo: *mut ColliderInfo =
                        (*this).collider.info.acHitInfo;
                    (*this).collider.base.acFlags =
                        ((*this).collider.base.acFlags as libc::c_int &
                             !(2 as libc::c_int)) as u8_0;
                    if hitWithBottle as libc::c_int == 0 as libc::c_int &&
                           (*acHitInfo).toucher.dmgFlags &
                               0x100000 as libc::c_int as libc::c_uint != 0 {
                        spBA = 2 as libc::c_int as s16;
                        Audio_PlaySoundGeneral(0x180c as libc::c_int as u16_0,
                                               &mut (*player).actor.projectedPos,
                                               4 as libc::c_int as u8_0,
                                               &mut D_801333E0,
                                               &mut D_801333E0,
                                               &mut D_801333E8);
                        func_800AA000((*this).actor.xyzDistToPlayerSq,
                                      0xff as libc::c_int as u8_0,
                                      0x14 as libc::c_int as u8_0,
                                      0x96 as libc::c_int as u8_0);
                    } else {
                        spBA = 1 as libc::c_int as s16;
                        (*this).actor.world.rot.y =
                            Math_Atan2S(zDistFromGanondorf,
                                        xDistFromGanondorf);
                        (*this).actor.world.rot.x =
                            Math_Atan2S(sqrtf(xDistFromGanondorf *
                                                  xDistFromGanondorf +
                                                  zDistFromGanondorf *
                                                      zDistFromGanondorf),
                                        yDistFromGanondorf);
                        (*this).unk_1A4 += 1;
                        (*this).timers[1 as libc::c_int as usize] =
                            2 as libc::c_int as s16;
                        Audio_PlaySoundGeneral(0x182a as libc::c_int as u16_0,
                                               &mut (*player).actor.projectedPos,
                                               4 as libc::c_int as u8_0,
                                               &mut D_801333E0,
                                               &mut D_801333E0,
                                               &mut D_801333E8);
                        func_800AA000((*this).actor.xyzDistToPlayerSq,
                                      0xb4 as libc::c_int as u8_0,
                                      0x14 as libc::c_int as u8_0,
                                      0x64 as libc::c_int as u8_0);
                        if hitWithBottle as libc::c_int == 0 as libc::c_int {
                            // if ganondorf is 250 units away from link, at least 3 volleys are required
                            if (*ganondorf).actor.xyzDistToPlayerSq >
                                   62500.0f32 &&
                                   ((*this).unk_1A4 as libc::c_int) <
                                       3 as libc::c_int {
                                (*this).unk_1C2 = 1 as libc::c_int as s16
                            } else if Rand_ZeroOne() < 0.7f32 {
                                (*this).unk_1C2 = 1 as libc::c_int as s16
                            } else {
                                (*this).unk_1C2 = 3 as libc::c_int as s16
                            }
                            // if a spin attack is used
                            if (*player).swordAnimation as libc::c_int >=
                                   0x18 as libc::c_int {
                                (*this).actor.speedXZ = 20.0f32
                            }
                        } else if Rand_ZeroOne() < 0.9f32 {
                            (*this).unk_1C2 = 1 as libc::c_int as s16
                        } else { (*this).unk_1C2 = 3 as libc::c_int as s16 }
                    }
                } else if sqrtf(xDistFromLink * xDistFromLink +
                                    yDistFromLink * yDistFromLink +
                                    zDistFromLink * zDistFromLink) <= 25.0f32
                 {
                    spBA = 5 as libc::c_int as s16;
                    func_8002F6D4(globalCtx, &mut (*this).actor, 3.0f32,
                                  (*this).actor.world.rot.y, 0.0f32,
                                  0x30 as libc::c_int as u32_0);
                    Audio_PlaySoundAtPosition(globalCtx,
                                              &mut (*this).actor.world.pos,
                                              40 as libc::c_int,
                                              0x390b as libc::c_int as u16_0);
                    (*ganondorf).timers[2 as libc::c_int as usize] =
                        20 as libc::c_int as s16;
                    i = 0 as libc::c_int as s16;
                    while (i as libc::c_int) <
                              (::std::mem::size_of::<[s16; 18]>() as
                                   libc::c_ulong).wrapping_div(::std::mem::size_of::<s16>()
                                                                   as
                                                                   libc::c_ulong)
                                  as s32 {
                        (*ganondorf).unk_4E4[i as usize] =
                            D_808E4C58[i as usize] as s16;
                        i += 1
                    }
                    (*ganondorf).unk_2E6 = 0 as libc::c_int as s16;
                    (*ganondorf).unk_2E8 = 60 as libc::c_int as s16;
                    (*ganondorf).unk_508 = 4.0f32
                }
                current_block_110 = 16314074004867283505;
            }
            1 => {
                if (*ganondorf).actionFunc ==
                       Some(BossGanon_PlayTennis as
                                unsafe extern "C" fn(_: *mut BossGanon,
                                                     _: *mut GlobalContext)
                                    -> ()) &&
                       (*ganondorf).unk_1C2 as libc::c_int == 1 as libc::c_int
                   {
                    minReflectDist =
                        if (*this).actor.speedXZ >= 19.0f32 {
                            250.0f32
                        } else { 170.0f32 };
                    if sqrtf(xDistFromGanondorf * xDistFromGanondorf +
                                 yDistFromGanondorf * yDistFromGanondorf +
                                 zDistFromGanondorf * zDistFromGanondorf) <
                           minReflectDist {
                        (*ganondorf).startVolley = 1 as libc::c_int as u8_0;
                        (*this).timers[0 as libc::c_int as usize] =
                            8 as libc::c_int as s16;
                        (*this).unk_1C2 = 2 as libc::c_int as s16
                    }
                }
                current_block_110 = 16314074004867283505;
            }
            2 => {
                if (*this).timers[0 as libc::c_int as usize] as libc::c_int ==
                       1 as libc::c_int {
                    spBA = 1 as libc::c_int as s16;
                    (*this).actor.world.rot.y =
                        Math_Atan2S(zDistFromLink, xDistFromLink);
                    (*this).actor.world.rot.x =
                        Math_Atan2S(sqrtf(xDistFromLink * xDistFromLink +
                                              zDistFromLink * zDistFromLink),
                                    yDistFromLink);
                    (*this).timers[1 as libc::c_int as usize] =
                        2 as libc::c_int as s16;
                    Audio_PlayActorSound2(&mut (*this).actor,
                                          0x182a as libc::c_int as u16_0);
                    Audio_PlayActorSound2(&mut (*this).actor,
                                          0x39ca as libc::c_int as u16_0);
                    (*this).unk_1C2 = 0 as libc::c_int as s16;
                    current_block_110 = 16314074004867283505;
                } else { current_block_110 = 7198837672929764564; }
            }
            4 => { current_block_110 = 7198837672929764564; }
            3 => {
                if sqrtf(xDistFromGanondorf * xDistFromGanondorf +
                             yDistFromGanondorf * yDistFromGanondorf +
                             zDistFromGanondorf * zDistFromGanondorf) <
                       100.0f32 {
                    (*ganondorf).startVolley = 1 as libc::c_int as u8_0;
                    (*this).unk_1C2 = 4 as libc::c_int as s16
                }
                current_block_110 = 16314074004867283505;
            }
            _ => { current_block_110 = 16314074004867283505; }
        }
        match current_block_110 {
            7198837672929764564 =>
            // fallthrough
            {
                if sqrtf(xDistFromGanondorf * xDistFromGanondorf +
                             yDistFromGanondorf * yDistFromGanondorf +
                             zDistFromGanondorf * zDistFromGanondorf) <
                       30.0f32 {
                    spBA = 3 as libc::c_int as s16;
                    Audio_PlaySoundAtPosition(globalCtx,
                                              &mut (*this).actor.world.pos,
                                              40 as libc::c_int,
                                              0x39cc as libc::c_int as u16_0);
                    Audio_PlaySoundAtPosition(globalCtx,
                                              &mut (*this).actor.world.pos,
                                              40 as libc::c_int,
                                              0x390b as libc::c_int as u16_0);
                }
            }
            _ => { }
        }
        Collider_UpdateCylinder(&mut (*this).actor, &mut (*this).collider);
        if (*this).timers[1 as libc::c_int as usize] as libc::c_int ==
               0 as libc::c_int {
            CollisionCheck_SetAC(globalCtx, &mut (*globalCtx).colChkCtx,
                                 &mut (*this).collider.base);
        }
        i = 0 as libc::c_int as s16;
        while (i as libc::c_int) < 2 as libc::c_int {
            spA0.z = 0.0f32;
            spA0.x = spA0.z;
            spA0.y = 0.2f32;
            spAC.z = 0.0f32;
            spAC.y = spAC.z;
            spAC.x = spAC.y;
            sp94.x = Rand_CenteredFloat(30.0f32) + (*this).actor.world.pos.x;
            sp94.y = Rand_CenteredFloat(30.0f32) + (*this).actor.world.pos.y;
            sp94.z = Rand_CenteredFloat(30.0f32) + (*this).actor.world.pos.z;
            BossGanonEff_SpawnSparkle(globalCtx, &mut sp94, &mut spAC,
                                      &mut spA0,
                                      Rand_ZeroFloat(500.0f32) + 700.0f32,
                                      0x1e as libc::c_int as s16);
            i += 1
        }
        if (*this).actor.world.pos.y < 10.0f32 {
            Actor_UpdateBgCheckInfo(globalCtx, &mut (*this).actor, 0.0f32,
                                    20.0f32, 20.0f32, 4 as libc::c_int);
        }
        if fabsf((*this).actor.world.pos.x) > 465.0f32 ||
               (*this).actor.world.pos.y > 500.0f32 ||
               fabsf((*this).actor.world.pos.z) > 465.0f32 {
            spBA = 4 as libc::c_int as s16
        }
        if spBA as libc::c_int != 0 as libc::c_int ||
               (*this).actor.bgCheckFlags as libc::c_int & 1 as libc::c_int !=
                   0 {
            let mut sp58: f32_0 = 0.;
            let mut sp54: f32_0 = 0.;
            let mut phi_f20: f32_0 = 0.;
            let mut sp4E: s16 = 0;
            if spBA as libc::c_int == 1 as libc::c_int {
                sp58 = Rand_ZeroFloat(100.0f32) + 300.0f32;
                sp54 = 10.0f32;
                phi_f20 = 25.0f32;
                sp4E = 40 as libc::c_int as s16
            } else {
                sp58 = Rand_ZeroFloat(200.0f32) + 500.0f32;
                sp54 = 15.0f32;
                phi_f20 = 30.0f32;
                sp4E = 70 as libc::c_int as s16;
                Audio_PlaySoundAtPosition(globalCtx,
                                          &mut (*this).actor.world.pos,
                                          80 as libc::c_int,
                                          0x390b as libc::c_int as u16_0);
            }
            i = 0 as libc::c_int as s16;
            while (i as libc::c_int) < sp4E as libc::c_int {
                if spBA as libc::c_int != 0 as libc::c_int {
                    spAC.x = Rand_CenteredFloat(phi_f20);
                    spAC.y = Rand_CenteredFloat(phi_f20);
                    spAC.z = Rand_CenteredFloat(phi_f20)
                } else {
                    spAC.x = Rand_CenteredFloat(phi_f20);
                    spAC.y = Rand_ZeroFloat(25.0f32);
                    spAC.z = Rand_CenteredFloat(phi_f20)
                }
                BossGanonEff_SpawnLightRay(globalCtx,
                                           &mut (*this).actor.world.pos,
                                           &mut spAC, &mut sZeroVec, sp58,
                                           sp54, 0x1e as libc::c_int as s16);
                i += 1
            }
            if spBA as libc::c_int != 1 as libc::c_int {
                (*this).unk_1A8 = 1 as libc::c_int as s16;
                if spBA as libc::c_int == 0 as libc::c_int {
                    BossGanon_CheckFallingPlatforms(this, globalCtx,
                                                    &mut (*this).actor.world.pos);
                }
                if spBA as libc::c_int == 3 as libc::c_int {
                    BossGanon_SetupHitByLightBall(ganondorf, globalCtx);
                } else if (*ganondorf).actionFunc ==
                              Some(BossGanon_PlayTennis as
                                       unsafe extern "C" fn(_: *mut BossGanon,
                                                            _:
                                                                *mut GlobalContext)
                                           -> ()) {
                    BossGanon_SetupWait(ganondorf, globalCtx);
                    if spBA as libc::c_int == 5 as libc::c_int {
                        (*ganondorf).timers[0 as libc::c_int as usize] =
                            125 as libc::c_int as s16
                    }
                }
            }
        }
    };
}
// draw
#[no_mangle]
pub unsafe extern "C" fn BossGanon_LightBall_Draw(mut thisx: *mut Actor,
                                                  mut globalCtx:
                                                      *mut GlobalContext) {
    let mut this: *mut BossGanon = thisx as *mut BossGanon;
    let mut i: s16 = 0;
    let mut alpha: f32_0 = 0.;
    let mut pad: s32 = 0;
    let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
    let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
    __gfxCtx = (*globalCtx).state.gfxCtx;
    Graph_OpenDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                    b"../z_boss_ganon.c\x00" as *const u8 as
                        *const libc::c_char, 9849 as libc::c_int);
    func_80093D84((*globalCtx).state.gfxCtx);
    alpha =
        if (*this).unk_1A2 as libc::c_int % 2 as libc::c_int !=
               0 as libc::c_int {
            ((*this).fwork[GDF_FWORK_1 as libc::c_int as usize]) * 0.4f32
        } else {
            ((*this).fwork[GDF_FWORK_1 as libc::c_int as usize]) * 0.35f32
        };
    let fresh71 = (*__gfxCtx).polyXlu.p;
    (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
    let mut _g: *mut Gfx = fresh71;
    (*_g).words.w0 =
        (0xfa as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g).words.w1 =
        (255 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            (155 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (alpha as s8 as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    Matrix_Push();
    Matrix_Translate((*this).actor.world.pos.x, (*this).actor.floorHeight,
                     (*this).actor.world.pos.z,
                     MTXMODE_NEW as libc::c_int as u8_0);
    Matrix_Scale((*this).actor.scale.x * 0.75f32, 1.0f32,
                 (*this).actor.scale.z * 0.75f32,
                 MTXMODE_APPLY as libc::c_int as u8_0);
    let fresh72 = (*__gfxCtx).polyXlu.p;
    (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
    let mut _g_0: *mut Gfx = fresh72;
    (*_g_0).words.w0 =
        (0xda as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            ((::std::mem::size_of::<Mtx>() as
                  libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                  libc::c_uint).wrapping_div(8
                                                                                 as
                                                                                 libc::c_int
                                                                                 as
                                                                                 libc::c_uint)
                 &
                 (((0x1 as libc::c_int) << 5 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (((0 as libc::c_int | 0x2 as libc::c_int | 0 as libc::c_int) ^
                  0x1 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_0).words.w1 =
        Matrix_NewMtx((*globalCtx).state.gfxCtx,
                      b"../z_boss_ganon.c\x00" as *const u8 as
                          *const libc::c_char as *mut libc::c_char,
                      9875 as libc::c_int) as libc::c_uint;
    let fresh73 = (*__gfxCtx).polyXlu.p;
    (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
    let mut _g_1: *mut Gfx = fresh73;
    (*_g_1).words.w0 =
        (0xde as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_1).words.w1 = gDorfLightCoreDL.as_mut_ptr() as libc::c_uint;
    Matrix_Pop();
    let fresh74 = (*__gfxCtx).polyXlu.p;
    (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
    let mut _g_2: *mut Gfx = fresh74;
    (*_g_2).words.w0 =
        (0xde as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_2).words.w1 = gDorfLightBallMaterialDL.as_mut_ptr() as libc::c_uint;
    let fresh75 = (*__gfxCtx).polyXlu.p;
    (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
    let mut _g_3: *mut Gfx = fresh75;
    (*_g_3).words.w0 =
        (0xe7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_3).words.w1 = 0 as libc::c_int as libc::c_uint;
    let fresh76 = (*__gfxCtx).polyXlu.p;
    (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
    let mut _g_4: *mut Gfx = fresh76;
    (*_g_4).words.w0 =
        (0xfa as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_4).words.w1 =
        (255 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            ((*this).fwork[GDF_FWORK_1 as libc::c_int as usize] as s8 as u32_0
                 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh77 = (*__gfxCtx).polyXlu.p;
    (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
    let mut _g_5: *mut Gfx = fresh77;
    (*_g_5).words.w0 =
        (0xfb as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_5).words.w1 =
        (255 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    if (*this).unk_1A8 as libc::c_int == 1 as libc::c_int {
        i = 0 as libc::c_int as s16;
        while (i as libc::c_int) < 8 as libc::c_int {
            Matrix_Push();
            Matrix_RotateY(i as libc::c_int as libc::c_float *
                               (3.14159265358979323846f32 /
                                    8 as libc::c_int as libc::c_float),
                           MTXMODE_APPLY as libc::c_int as u8_0);
            Matrix_RotateZ((*this).fwork[GDF_FWORK_0 as libc::c_int as usize],
                           MTXMODE_APPLY as libc::c_int as u8_0);
            let fresh78 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_6: *mut Gfx = fresh78;
            (*_g_6).words.w0 =
                (0xda as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((::std::mem::size_of::<Mtx>() as
                          libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                          libc::c_uint).wrapping_div(8
                                                                                         as
                                                                                         libc::c_int
                                                                                         as
                                                                                         libc::c_uint)
                         &
                         (((0x1 as libc::c_int) << 5 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (((0 as libc::c_int | 0x2 as libc::c_int |
                           0 as libc::c_int) ^ 0x1 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_6).words.w1 =
                Matrix_NewMtx((*globalCtx).state.gfxCtx,
                              b"../z_boss_ganon.c\x00" as *const u8 as
                                  *const libc::c_char as *mut libc::c_char,
                              9899 as libc::c_int) as libc::c_uint;
            let fresh79 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_7: *mut Gfx = fresh79;
            (*_g_7).words.w0 =
                (0xde as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_7).words.w1 = gDorfSquareDL.as_mut_ptr() as libc::c_uint;
            Matrix_Pop();
            i += 1
        }
    } else if (*this).unk_1A8 as libc::c_int == 0 as libc::c_int {
        func_800D1FD4(&mut (*globalCtx).billboardMtxF);
        Matrix_RotateZ((*this).actor.shape.rot.z as libc::c_int as
                           libc::c_float / 32768.0f32 * 3.1416f32,
                       MTXMODE_APPLY as libc::c_int as u8_0);
        let fresh80 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_8: *mut Gfx = fresh80;
        (*_g_8).words.w0 =
            (0xda as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((::std::mem::size_of::<Mtx>() as
                      libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                      libc::c_uint).wrapping_div(8
                                                                                     as
                                                                                     libc::c_int
                                                                                     as
                                                                                     libc::c_uint)
                     &
                     (((0x1 as libc::c_int) << 5 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (((0 as libc::c_int | 0x2 as libc::c_int | 0 as libc::c_int) ^
                      0x1 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_8).words.w1 =
            Matrix_NewMtx((*globalCtx).state.gfxCtx,
                          b"../z_boss_ganon.c\x00" as *const u8 as
                              *const libc::c_char as *mut libc::c_char,
                          9907 as libc::c_int) as libc::c_uint;
        let fresh81 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_9: *mut Gfx = fresh81;
        (*_g_9).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_9).words.w1 = gDorfSquareDL.as_mut_ptr() as libc::c_uint
    }
    Graph_CloseDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                     b"../z_boss_ganon.c\x00" as *const u8 as
                         *const libc::c_char, 9911 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn func_808E1EB4(mut thisx: *mut Actor,
                                       mut globalCtx2: *mut GlobalContext) {
    let mut i: s16 = 0;
    let mut this: *mut BossGanon = thisx as *mut BossGanon;
    let mut globalCtx: *mut GlobalContext = globalCtx2;
    let mut dorf: *mut BossGanon = (*this).actor.parent as *mut BossGanon;
    let mut xDiff: f32_0 = 0.;
    let mut yDiff: f32_0 = 0.;
    let mut zDiff: f32_0 = 0.;
    let mut xzDist: f32_0 = 0.;
    let mut xRotTarget: s16 = 0;
    let mut yRotTarget: s16 = 0;
    let mut vel: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut accel: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    (*this).unk_1A2 += 1;
    (*dorf).envLightMode = 1 as libc::c_int as s8;
    Actor_SetScale(&mut (*this).actor, 6.0f32);
    (*this).actor.shape.rot.z =
        ((*this).actor.shape.rot.z as libc::c_int +
             ((Rand_ZeroOne() * 20000.0f32) as s16 as libc::c_int +
                  0x4000 as libc::c_int)) as s16;
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) <
              (::std::mem::size_of::<[s16; 5]>() as
                   libc::c_ulong).wrapping_div(::std::mem::size_of::<s16>() as
                                                   libc::c_ulong) as s32 {
        if (*this).timers[i as usize] as libc::c_int != 0 as libc::c_int {
            (*this).timers[i as usize] -= 1
        }
        i += 1
    }
    func_8002D908(&mut (*this).actor);
    func_8002D7EC(&mut (*this).actor);
    (*this).unk_1A6 += 1;
    if (*this).unk_1A6 as libc::c_int >= 15 as libc::c_int {
        (*this).unk_1A6 = 0 as libc::c_int as s16
    }
    (*this).unk_2EC[(*this).unk_1A6 as usize] = (*this).actor.world.pos;
    if (*this).unk_1C2 as libc::c_int == 0 as libc::c_int {
        if (*this).timers[0 as libc::c_int as usize] as libc::c_int ==
               0 as libc::c_int {
            (*this).unk_1C2 = 1 as libc::c_int as s16
        }
    } else if (*this).unk_1C2 as libc::c_int == 1 as libc::c_int {
        xDiff = (*dorf).unk_1FC.x - (*this).actor.world.pos.x;
        yDiff = (*dorf).unk_1FC.y - (*this).actor.world.pos.y;
        zDiff = (*dorf).unk_1FC.z - (*this).actor.world.pos.z;
        yRotTarget =
            (Math_FAtan2F(xDiff, zDiff) *
                 (32768.0f32 / 3.14159265358979323846f32)) as s16;
        xzDist = sqrtf(xDiff * xDiff + zDiff * zDiff);
        xRotTarget =
            (Math_FAtan2F(yDiff, xzDist) *
                 (32768.0f32 / 3.14159265358979323846f32)) as s16;
        Math_ApproachS(&mut (*this).actor.world.rot.x, xRotTarget,
                       1 as libc::c_int as s16, 0x1000 as libc::c_int as s16);
        Math_ApproachS(&mut (*this).actor.world.rot.y, yRotTarget,
                       1 as libc::c_int as s16, 0x1000 as libc::c_int as s16);
        if sqrtf(xDiff * xDiff + zDiff * zDiff + yDiff * yDiff) < 40.0f32 {
            (*this).unk_1C2 = 2 as libc::c_int as s16;
            (*this).timers[0 as libc::c_int as usize] =
                30 as libc::c_int as s16;
            (*this).actor.speedXZ = 0.0f32;
            if (*this).actor.params as libc::c_int == 0xc8 as libc::c_int {
                func_80078884(0x39cd as libc::c_int as u16_0);
                func_80078884(0x3827 as libc::c_int as u16_0);
                i = 0 as libc::c_int as s16;
                while (i as libc::c_int) < 150 as libc::c_int {
                    vel.x = Rand_CenteredFloat(25.0f32);
                    vel.y = Rand_CenteredFloat(25.0f32);
                    vel.z = Rand_CenteredFloat(25.0f32);
                    accel.x = vel.x * -0.03f32;
                    accel.y = vel.y * -0.03f32;
                    accel.z = vel.z * -0.03f32;
                    BossGanonEff_SpawnLightRay(globalCtx,
                                               &mut (*dorf).unk_1FC, &mut vel,
                                               &mut accel,
                                               Rand_ZeroFloat(500.0f32) +
                                                   1000.0f32, 15.0f32,
                                               0x14 as libc::c_int as s16);
                    i += 1
                }
                i = 1 as libc::c_int as s16;
                while (i as libc::c_int) < 15 as libc::c_int {
                    (*dorf).unk_4E4[i as usize] = 1000 as libc::c_int as s16;
                    i += 1
                }
                (*dorf).unk_2E6 = 1000 as libc::c_int as s16;
                (*dorf).unk_2E8 = 0 as libc::c_int as s16;
                (*dorf).screenFlashTimer = 4 as libc::c_int as s16;
                (*dorf).lensFlareTimer = 10 as libc::c_int as s16;
                (*dorf).lensFlareMode = 1 as libc::c_int as u8_0;
                (*dorf).unk_508 = 10.0f32;
                Actor_SpawnAsChild(&mut (*globalCtx).actorCtx,
                                   &mut (*dorf).actor, globalCtx,
                                   ACTOR_BOSS_GANON as libc::c_int as s16,
                                   (*dorf).unk_1FC.x, (*dorf).unk_1FC.y,
                                   (*dorf).unk_1FC.z, 0 as libc::c_int as s16,
                                   0 as libc::c_int as s16,
                                   0 as libc::c_int as s16,
                                   0x12c as libc::c_int as s16);
            }
            (*this).actor.world.pos.y = 5000.0f32
        }
    } else if (*this).timers[0 as libc::c_int as usize] as libc::c_int ==
                  0 as libc::c_int {
        Actor_Kill(&mut (*this).actor);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_808E229C(mut thisx: *mut Actor,
                                       mut globalCtx2: *mut GlobalContext) {
    let mut this: *mut BossGanon = thisx as *mut BossGanon;
    let mut globalCtx: *mut GlobalContext = globalCtx2;
    let mut i: s16 = 0;
    let mut temp: s32 = 0;
    let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
    let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
    __gfxCtx = (*globalCtx).state.gfxCtx;
    Graph_OpenDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                    b"../z_boss_ganon.c\x00" as *const u8 as
                        *const libc::c_char, 10081 as libc::c_int);
    func_80093D84((*globalCtx).state.gfxCtx);
    let fresh82 = (*__gfxCtx).polyXlu.p;
    (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
    let mut _g: *mut Gfx = fresh82;
    (*_g).words.w0 =
        (0xfa as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g).words.w1 =
        (255 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh83 = (*__gfxCtx).polyXlu.p;
    (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
    let mut _g_0: *mut Gfx = fresh83;
    (*_g_0).words.w0 =
        (0xfb as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_0).words.w1 =
        (255 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh84 = (*__gfxCtx).polyXlu.p;
    (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
    let mut _g_1: *mut Gfx = fresh84;
    (*_g_1).words.w0 =
        (0xde as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_1).words.w1 = gDorfLightBallMaterialDL.as_mut_ptr() as libc::c_uint;
    i = 9 as libc::c_int as s16;
    while i as libc::c_int >= 0 as libc::c_int {
        temp =
            (((*this).unk_1A6 as libc::c_int - i as libc::c_int +
                  0xf as libc::c_int) % 15 as libc::c_int) as s16 as s32;
        Matrix_Translate((*this).unk_2EC[temp as usize].x,
                         (*this).unk_2EC[temp as usize].y,
                         (*this).unk_2EC[temp as usize].z,
                         MTXMODE_NEW as libc::c_int as u8_0);
        Matrix_Scale((*this).actor.scale.x *
                         (1.0f32 -
                              i as libc::c_int as libc::c_float *
                                  0.07000001f32),
                     (*this).actor.scale.y *
                         (1.0f32 -
                              i as libc::c_int as libc::c_float *
                                  0.07000001f32),
                     (*this).actor.scale.z *
                         (1.0f32 -
                              i as libc::c_int as libc::c_float *
                                  0.07000001f32),
                     MTXMODE_APPLY as libc::c_int as u8_0);
        func_800D1FD4(&mut (*globalCtx).billboardMtxF);
        Matrix_RotateZ(2.0f32 *
                           (i as libc::c_int as libc::c_float *
                                3.14159265358979323846f32) / 10.0f32 +
                           (*this).actor.shape.rot.z as f32_0 / 32768.0f32 *
                               3.14159265358979323846f32,
                       MTXMODE_APPLY as libc::c_int as u8_0);
        let fresh85 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_2: *mut Gfx = fresh85;
        (*_g_2).words.w0 =
            (0xda as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((::std::mem::size_of::<Mtx>() as
                      libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                      libc::c_uint).wrapping_div(8
                                                                                     as
                                                                                     libc::c_int
                                                                                     as
                                                                                     libc::c_uint)
                     &
                     (((0x1 as libc::c_int) << 5 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (((0 as libc::c_int | 0x2 as libc::c_int | 0 as libc::c_int) ^
                      0x1 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_2).words.w1 =
            Matrix_NewMtx((*globalCtx).state.gfxCtx,
                          b"../z_boss_ganon.c\x00" as *const u8 as
                              *const libc::c_char as *mut libc::c_char,
                          10109 as libc::c_int) as libc::c_uint;
        let fresh86 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_3: *mut Gfx = fresh86;
        (*_g_3).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_3).words.w1 = gDorfSquareDL.as_mut_ptr() as libc::c_uint;
        i -= 1
    }
    Graph_CloseDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                     b"../z_boss_ganon.c\x00" as *const u8 as
                         *const libc::c_char, 10113 as libc::c_int);
}
// update
#[no_mangle]
pub unsafe extern "C" fn func_808E2544(mut thisx: *mut Actor,
                                       mut globalCtx: *mut GlobalContext) {
    let mut numEffects: u8_0 = 0 as libc::c_int as u8_0;
    let mut xRot: s16 = 0;
    let mut xDiff: f32_0 = 0.;
    let mut yDiff: f32_0 = 0.;
    let mut zDiff: f32_0 = 0.;
    let mut xzDist: f32_0 = 0.;
    let mut new_var: f32_0 = 0.;
    let mut sp84: f32_0 = 0.;
    let mut i: s16 = 0;
    let mut sp80: s16 = 0;
    let mut this: *mut BossGanon = thisx as *mut BossGanon;
    let mut dorf: *mut BossGanon = (*this).actor.parent as *mut BossGanon;
    let mut pad: s32 = 0;
    let mut player: *mut Player =
        (*globalCtx).actorCtx.actorLists[ACTORCAT_PLAYER as libc::c_int as
                                             usize].head as *mut Player;
    let mut acHitInfo: *mut ColliderInfo = 0 as *mut ColliderInfo;
    let mut sp60: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    (*this).unk_1A2 += 1;
    Actor_SetScale(&mut (*this).actor, 0.01f32);
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) <
              (::std::mem::size_of::<[s16; 5]>() as
                   libc::c_ulong).wrapping_div(::std::mem::size_of::<s16>() as
                                                   libc::c_ulong) as s32 {
        if (*this).timers[i as usize] as libc::c_int != 0 as libc::c_int {
            (*this).timers[i as usize] -= 1
        }
        i += 1
    }
    func_8002D908(&mut (*this).actor);
    func_8002D7EC(&mut (*this).actor);
    (*this).unk_1A6 += 1;
    if (*this).unk_1A6 as libc::c_int >= 15 as libc::c_int {
        (*this).unk_1A6 = 0 as libc::c_int as s16
    }
    (*this).unk_2EC[(*this).unk_1A6 as usize] = (*this).actor.world.pos;
    (*this).unk_3C4[(*this).unk_1A6 as usize].x =
        (*this).actor.world.rot.x as f32_0 / 32768.0f32 *
            3.14159265358979323846f32;
    (*this).unk_3C4[(*this).unk_1A6 as usize].y =
        (*this).actor.world.rot.y as f32_0 / 32768.0f32 *
            3.14159265358979323846f32;
    let mut current_block_138: u64;
    match (*this).unk_1C2 as libc::c_int {
        0 => {
            (*this).actor.speedXZ = 40.0f32;
            Math_ApproachF(&mut *(*this).fwork.as_mut_ptr().offset(1 as
                                                                       libc::c_int
                                                                       as
                                                                       isize),
                           255.0f32, 1.0f32, 40.0f32);
            xDiff = (*dorf).unk_278.x - (*this).actor.world.pos.x;
            yDiff = (*dorf).unk_278.y - (*this).actor.world.pos.y;
            zDiff = (*dorf).unk_278.z - (*this).actor.world.pos.z;
            sp80 =
                (Math_FAtan2F(xDiff, zDiff) *
                     (32768.0f32 / 3.14159265358979323846f32)) as s16;
            xzDist = sqrtf(xDiff * xDiff + zDiff * zDiff);
            xRot =
                (Math_FAtan2F(yDiff, xzDist) *
                     (32768.0f32 / 3.14159265358979323846f32)) as s16;
            sp84 = xzDist * 700.0f32 / 10.0f32;
            if sp84 > 6144.0f32 { sp84 = 6144.0f32 }
            xRot =
                (xRot as libc::c_float +
                     Math_CosS(((*this).unk_1A2 as libc::c_int *
                                    0x2200 as libc::c_int) as s16) * sp84) as
                    s16;
            (*this).actor.world.rot.x = xRot;
            Math_ApproachS(&mut (*this).actor.shape.rot.y, sp80,
                           1 as libc::c_int as s16,
                           (*this).csCamMaxStepScale as s16);
            Math_ApproachF(&mut (*this).csCamMaxStepScale, 4096.0f32, 1.0f32,
                           256.0f32);
            (*this).actor.world.rot.y =
                (Math_SinS(((*this).unk_1A2 as libc::c_int *
                                0x1a00 as libc::c_int) as s16) * sp84 +
                     (*this).actor.shape.rot.y as libc::c_int as
                         libc::c_float) as s16;
            if sqrtf(xDiff * xDiff + zDiff * zDiff + yDiff * yDiff) < 45.0f32
               {
                (*this).unk_1C2 = 1 as libc::c_int as s16;
                (*this).actor.speedXZ = 0.0f32
            }
            current_block_138 = 7293850626974290116;
        }
        1 => {
            Math_ApproachZeroF(&mut *(*this).fwork.as_mut_ptr().offset(1 as
                                                                           libc::c_int
                                                                           as
                                                                           isize),
                               1.0f32, 40.0f32);
            if (*this).fwork[1 as libc::c_int as usize] == 0.0f32 {
                Actor_Kill(&mut (*this).actor);
            }
            current_block_138 = 7293850626974290116;
        }
        10 => {
            (*this).unk_1C2 = 0xb as libc::c_int as s16;
            (*this).timers[0 as libc::c_int as usize] =
                14 as libc::c_int as s16;
            (*this).collider.dim.radius = 15 as libc::c_int as s16;
            (*this).collider.dim.height = 20 as libc::c_int as s16;
            (*this).collider.dim.yShift = -(10 as libc::c_int) as s16;
            (*this).actor.speedXZ = 20.0f32;
            (*this).fwork[1 as libc::c_int as usize] = 255.0f32;
            (*this).unk_1F0 = (*player).actor.world.pos;
            new_var = (*this).unk_1F0.x - (*this).actor.world.pos.x;
            (*this).actor.shape.rot.y =
                ((Math_FAtan2F(new_var,
                               (*this).unk_1F0.z - (*this).actor.world.pos.z)
                      * (32768.0f32 / 3.14159265358979323846f32)) as s16 as
                     libc::c_int +
                     (((*this).actor.params as libc::c_int) <<
                          0xd as libc::c_int) - 0x20c000 as libc::c_int) as
                    s16;
            current_block_138 = 979846035894801205;
        }
        11 => { current_block_138 = 979846035894801205; }
        12 => {
            (*this).actor.speedXZ = 20.0f32;
            xDiff = (*this).unk_1F0.x - (*this).actor.world.pos.x;
            yDiff = (*this).unk_1F0.y - (*this).actor.world.pos.y;
            zDiff = (*this).unk_1F0.z - (*this).actor.world.pos.z;
            sp80 =
                (Math_FAtan2F(xDiff, zDiff) *
                     (32768.0f32 / 3.14159265358979323846f32)) as s16;
            xzDist = sqrtf(xDiff * xDiff + zDiff * zDiff);
            xRot =
                (Math_FAtan2F(yDiff, xzDist) *
                     (32768.0f32 / 3.14159265358979323846f32)) as s16;
            sp84 = xzDist * 700.0f32 / 10.0f32;
            if sp84 > 6144.0f32 { sp84 = 6144.0f32 }
            sp80 =
                (sp80 as libc::c_float +
                     Math_SinS(((*this).unk_1A2 as libc::c_int *
                                    0x2200 as libc::c_int) as s16) * sp84) as
                    s16;
            xRot =
                (xRot as libc::c_float +
                     Math_CosS(((*this).unk_1A2 as libc::c_int *
                                    0x1800 as libc::c_int) as s16) * sp84) as
                    s16;
            (*this).actor.world.rot.x = xRot;
            (*this).actor.world.rot.y = sp80;
            xDiff = (*dorf).unk_1FC.x - (*this).actor.world.pos.x;
            yDiff = (*dorf).unk_1FC.y - (*this).actor.world.pos.y;
            zDiff = (*dorf).unk_1FC.z - (*this).actor.world.pos.z;
            if sqrtf(xDiff * xDiff + zDiff * zDiff + yDiff * yDiff) < 45.0f32
               {
                BossGanon_SetupHitByLightBall(dorf, globalCtx);
                (*this).timers[0 as libc::c_int as usize] =
                    150 as libc::c_int as s16;
                numEffects = 40 as libc::c_int as u8_0;
                (*this).unk_1C2 = 1 as libc::c_int as s16;
                (*this).actor.speedXZ = 0.0f32
            }
            current_block_138 = 7293850626974290116;
        }
        _ => { current_block_138 = 7293850626974290116; }
    }
    match current_block_138 {
        979846035894801205 =>
        // fallthrough
        {
            if (*this).timers[0 as libc::c_int as usize] as libc::c_int !=
                   0 as libc::c_int {
                (*this).unk_1F0 = (*player).actor.world.pos;
                xDiff = (*this).unk_1F0.x - (*this).actor.world.pos.x;
                yDiff =
                    (*this).unk_1F0.y + 30.0f32 - (*this).actor.world.pos.y;
                zDiff = (*this).unk_1F0.z - (*this).actor.world.pos.z;
                sp80 =
                    (Math_FAtan2F(xDiff, zDiff) *
                         (32768.0f32 / 3.14159265358979323846f32)) as s16;
                (*this).actor.shape.rot.x =
                    (Math_FAtan2F(yDiff, sqrtf(xDiff * xDiff + zDiff * zDiff))
                         * (32768.0f32 / 3.14159265358979323846f32)) as s16;
                Math_ApproachS(&mut (*this).actor.shape.rot.y, sp80,
                               1 as libc::c_int as s16,
                               (*this).csCamMaxStepScale as s16);
                Math_ApproachF(&mut (*this).csCamMaxStepScale, 4096.0f32,
                               1.0f32, 256.0f32);
            }
            sp84 =
                sqrtf((*this).actor.xyzDistToPlayerSq) * 200.0f32 / 10.0f32;
            if sp84 > 13824.0f32 { sp84 = 13824.0f32 }
            (*this).actor.world.rot.x =
                (Math_CosS(((*this).unk_1A2 as libc::c_int *
                                0x3400 as libc::c_int) as s16) * sp84 * 0.1f32
                     +
                     (*this).actor.shape.rot.x as libc::c_int as
                         libc::c_float) as s16;
            (*this).actor.world.rot.y =
                (Math_SinS(((*this).unk_1A2 as libc::c_int *
                                0x1a00 as libc::c_int) as s16) * sp84 +
                     (*this).actor.shape.rot.y as libc::c_int as
                         libc::c_float) as s16;
            if (*player).swordState as libc::c_int != 0 as libc::c_int &&
                   (*player).swordAnimation as libc::c_int >=
                       0x18 as libc::c_int &&
                   (*this).actor.xzDistToPlayer < 80.0f32 {
                (*this).unk_1C2 = 0xc as libc::c_int as s16;
                (*this).actor.speedXZ = -30.0f32;
                func_8002D908(&mut (*this).actor);
                func_8002D7EC(&mut (*this).actor);
                (*this).unk_1F0 = (*dorf).unk_1FC;
                numEffects = 10 as libc::c_int as u8_0
            } else {
                if (*this).collider.base.acFlags as libc::c_int &
                       2 as libc::c_int != 0 {
                    acHitInfo = (*this).collider.info.acHitInfo;
                    (*this).collider.base.acFlags =
                        ((*this).collider.base.acFlags as libc::c_int &
                             !(2 as libc::c_int)) as u8_0;
                    if (*acHitInfo).toucher.dmgFlags &
                           0x100000 as libc::c_int as libc::c_uint == 0 ||
                           Player_HasMirrorShieldEquipped(globalCtx) != 0 {
                        func_800AA000((*this).actor.xyzDistToPlayerSq,
                                      0xb4 as libc::c_int as u8_0,
                                      0x14 as libc::c_int as u8_0,
                                      0x64 as libc::c_int as u8_0);
                        (*this).unk_1C2 = 0xc as libc::c_int as s16;
                        (*this).actor.speedXZ = -30.0f32;
                        func_8002D908(&mut (*this).actor);
                        func_8002D7EC(&mut (*this).actor);
                        (*this).unk_1F0.x =
                            Rand_CenteredFloat(700.0f32) + (*dorf).unk_1FC.x;
                        (*this).unk_1F0.y =
                            Rand_CenteredFloat(200.0f32) + (*dorf).unk_1FC.y;
                        (*this).unk_1F0.z =
                            Rand_CenteredFloat(700.0f32) + (*dorf).unk_1FC.z;
                        (*this).unk_1F0.x =
                            (*this).unk_1F0.x +
                                ((*this).unk_1F0.x -
                                     (*this).actor.world.pos.x) * 100.0f32;
                        (*this).unk_1F0.y =
                            (*this).unk_1F0.y +
                                ((*this).unk_1F0.y -
                                     (*this).actor.world.pos.y) * 100.0f32;
                        (*this).unk_1F0.z =
                            (*this).unk_1F0.z +
                                ((*this).unk_1F0.z -
                                     (*this).actor.world.pos.z) * 100.0f32;
                        numEffects = 10 as libc::c_int as u8_0;
                        current_block_138 = 7293850626974290116;
                    } else { current_block_138 = 5023038348526654800; }
                } else { current_block_138 = 5023038348526654800; }
                match current_block_138 {
                    7293850626974290116 => { }
                    _ => {
                        Collider_UpdateCylinder(&mut (*this).actor,
                                                &mut (*this).collider);
                        if (*this).timers[1 as libc::c_int as usize] as
                               libc::c_int == 0 as libc::c_int {
                            CollisionCheck_SetAC(globalCtx,
                                                 &mut (*globalCtx).colChkCtx,
                                                 &mut (*this).collider.base);
                        }
                        xDiff =
                            (*player).actor.world.pos.x -
                                (*this).actor.world.pos.x;
                        yDiff =
                            (*player).actor.world.pos.y + 30.0f32 -
                                (*this).actor.world.pos.y;
                        zDiff =
                            (*player).actor.world.pos.z -
                                (*this).actor.world.pos.z;
                        if sqrtf(xDiff * xDiff + zDiff * zDiff +
                                     yDiff * yDiff) < 30.0f32 {
                            (*this).unk_1C2 = 1 as libc::c_int as s16;
                            (*this).actor.speedXZ = 0.0f32;
                            if (*dorf).timers[2 as libc::c_int as usize] as
                                   libc::c_int == 0 as libc::c_int {
                                func_8002F6D4(globalCtx, &mut (*this).actor,
                                              3.0f32,
                                              (*this).actor.world.rot.y,
                                              0.0f32,
                                              0x50 as libc::c_int as u32_0);
                                Audio_PlaySoundAtPosition(globalCtx,
                                                          &mut (*this).actor.world.pos,
                                                          40 as libc::c_int,
                                                          0x390b as
                                                              libc::c_int as
                                                              u16_0);
                                (*dorf).timers[2 as libc::c_int as usize] =
                                    20 as libc::c_int as s16;
                                i = 0 as libc::c_int as s16;
                                while (i as libc::c_int) <
                                          (::std::mem::size_of::<[s16; 18]>()
                                               as
                                               libc::c_ulong).wrapping_div(::std::mem::size_of::<s16>()
                                                                               as
                                                                               libc::c_ulong)
                                              as s32 {
                                    (*dorf).unk_4E4[i as usize] =
                                        D_808E4C58[i as usize] as s16;
                                    i += 1
                                }
                                (*dorf).unk_2E6 = 0 as libc::c_int as s16;
                                (*dorf).unk_2E8 = 60 as libc::c_int as s16;
                                (*dorf).unk_508 = 4.0f32;
                                numEffects = 40 as libc::c_int as u8_0
                            }
                        }
                    }
                }
            }
        }
        _ => { }
    }
    if (*this).unk_1C2 as libc::c_int >= 0xb as libc::c_int {
        xzDist =
            if (*this).unk_1C2 as libc::c_int == 0xc as libc::c_int {
                -65.0f32
            } else { 0.0f32 };
        if fabsf((*this).actor.world.pos.x) > 465.0f32 + xzDist ||
               fabsf((*this).actor.world.pos.z) > 465.0f32 + xzDist ||
               (*this).actor.world.pos.y < 0.0f32 ||
               (*this).actor.world.pos.y > 450.0f32 {
            (*this).unk_1C2 = 1 as libc::c_int as s16;
            (*this).actor.speedXZ = 0.0f32;
            numEffects = 10 as libc::c_int as u8_0;
            BossGanon_CheckFallingPlatforms(this, globalCtx,
                                            &mut (*this).actor.world.pos);
            Actor_SpawnAsChild(&mut (*globalCtx).actorCtx, &mut (*dorf).actor,
                               globalCtx,
                               ACTOR_BOSS_GANON as libc::c_int as s16,
                               (*this).actor.world.pos.x,
                               (*this).actor.world.pos.y,
                               (*this).actor.world.pos.z,
                               0 as libc::c_int as s16,
                               0 as libc::c_int as s16,
                               0 as libc::c_int as s16,
                               0x190 as libc::c_int as s16);
        }
    }
    if numEffects != 0 {
        Audio_PlaySoundAtPosition(globalCtx, &mut (*this).actor.world.pos,
                                  80 as libc::c_int,
                                  0x38a2 as libc::c_int as u16_0);
        i = 0 as libc::c_int as s16;
        while (i as libc::c_int) < numEffects as libc::c_int {
            sp60.x = Rand_CenteredFloat(30.0f32);
            sp60.y = Rand_CenteredFloat(30.0f32);
            sp60.z = Rand_CenteredFloat(30.0f64 as f32_0);
            BossGanonEff_SpawnLightRay(globalCtx,
                                       &mut (*this).actor.world.pos,
                                       &mut sp60, &mut sZeroVec,
                                       Rand_ZeroFloat(200.0f32) + 500.0f32,
                                       15.0f32, 0x1e as libc::c_int as s16);
            i += 1
        }
    };
}
static mut sBigMagicLightStreakDLists: [*mut Gfx; 12] =
    unsafe {
        [gDorfLightStreak12DL.as_ptr() as *mut _,
         gDorfLightStreak11DL.as_ptr() as *mut _,
         gDorfLightStreak10DL.as_ptr() as *mut _,
         gDorfLightStreak9DL.as_ptr() as *mut _,
         gDorfLightStreak8DL.as_ptr() as *mut _,
         gDorfLightStreak7DL.as_ptr() as *mut _,
         gDorfLightStreak6DL.as_ptr() as *mut _,
         gDorfLightStreak5DL.as_ptr() as *mut _,
         gDorfLightStreak4DL.as_ptr() as *mut _,
         gDorfLightStreak3DL.as_ptr() as *mut _,
         gDorfLightStreak2DL.as_ptr() as *mut _,
         gDorfLightStreak1DL.as_ptr() as *mut _]
    };
// draw
#[no_mangle]
pub unsafe extern "C" fn func_808E324C(mut thisx: *mut Actor,
                                       mut globalCtx: *mut GlobalContext) {
    let mut this: *mut BossGanon = thisx as *mut BossGanon; // unused
    let mut mtx: *mut Mtx = 0 as *mut Mtx; // unused
    let mut i: s16 = 0; // unused
    let mut temp: s32 = 0; // GDF_SHOCK_DORF_YELLOW or GDF_SHOCK_PLAYER_YELLOW
    mtx =
        Graph_Alloc((*globalCtx).state.gfxCtx,
                    (12 as libc::c_int as
                         libc::c_uint).wrapping_mul(::std::mem::size_of::<Mtx>()
                                                        as libc::c_ulong) as
                        size_t) as *mut Mtx;
    let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
    let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
    __gfxCtx = (*globalCtx).state.gfxCtx;
    Graph_OpenDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                    b"../z_boss_ganon.c\x00" as *const u8 as
                        *const libc::c_char, 10489 as libc::c_int);
    func_80093D84((*globalCtx).state.gfxCtx);
    let fresh87 = (*__gfxCtx).polyXlu.p;
    (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
    let mut _g: *mut Gfx = fresh87;
    (*_g).words.w0 =
        (0xfa as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0x80 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g).words.w1 =
        (255 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            ((*this).fwork[GDF_FWORK_1 as libc::c_int as usize] as s8 as u32_0
                 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh88 = (*__gfxCtx).polyXlu.p;
    (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
    let mut _g_0: *mut Gfx = fresh88;
    (*_g_0).words.w0 =
        (0xfb as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_0).words.w1 =
        (150 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (128 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh89 = (*__gfxCtx).polyXlu.p;
    (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
    let mut _g_1: *mut Gfx = fresh89;
    (*_g_1).words.w0 =
        (0xdb as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0x6 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            ((0xd as libc::c_int * 4 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_1).words.w1 = mtx as libc::c_uint;
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) < 12 as libc::c_int {
        temp =
            (((*this).unk_1A6 as libc::c_int - i as libc::c_int +
                  0xf as libc::c_int) % 15 as libc::c_int) as s16 as s32;
        Matrix_Translate((*this).unk_2EC[temp as usize].x,
                         (*this).unk_2EC[temp as usize].y,
                         (*this).unk_2EC[temp as usize].z,
                         MTXMODE_NEW as libc::c_int as u8_0);
        Matrix_RotateY((*this).unk_3C4[temp as usize].y,
                       MTXMODE_APPLY as libc::c_int as u8_0);
        Matrix_RotateX(-(*this).unk_3C4[temp as usize].x,
                       MTXMODE_APPLY as libc::c_int as u8_0);
        Matrix_Scale((*this).actor.scale.x, (*this).actor.scale.y,
                     (*this).actor.scale.z,
                     MTXMODE_APPLY as libc::c_int as u8_0);
        Matrix_RotateY(3.14159265358979323846f32 /
                           2 as libc::c_int as libc::c_float,
                       MTXMODE_APPLY as libc::c_int as u8_0);
        Matrix_ToMtx(mtx,
                     b"../z_boss_ganon.c\x00" as *const u8 as
                         *const libc::c_char as *mut libc::c_char,
                     10520 as libc::c_int);
        let fresh90 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_2: *mut Gfx = fresh90;
        (*_g_2).words.w0 =
            (0xda as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((::std::mem::size_of::<Mtx>() as
                      libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                      libc::c_uint).wrapping_div(8
                                                                                     as
                                                                                     libc::c_int
                                                                                     as
                                                                                     libc::c_uint)
                     &
                     (((0x1 as libc::c_int) << 5 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (((0 as libc::c_int | 0x2 as libc::c_int | 0 as libc::c_int) ^
                      0x1 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_2).words.w1 = mtx as libc::c_uint;
        let fresh91 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_3: *mut Gfx = fresh91;
        (*_g_3).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_3).words.w1 =
            sBigMagicLightStreakDLists[i as usize] as libc::c_uint;
        mtx = mtx.offset(1);
        i += 1
    }
    Matrix_Translate((*this).actor.world.pos.x, (*this).actor.world.pos.y,
                     (*this).actor.world.pos.z,
                     MTXMODE_NEW as libc::c_int as u8_0);
    func_800D1FD4(&mut (*globalCtx).billboardMtxF);
    Matrix_Scale(10.0f32, 10.0f32, 10.0f32,
                 MTXMODE_APPLY as libc::c_int as u8_0);
    Matrix_RotateZ(Rand_CenteredFloat(3.14159265358979323846f32),
                   MTXMODE_APPLY as libc::c_int as u8_0);
    let fresh92 = (*__gfxCtx).polyXlu.p;
    (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
    let mut _g_4: *mut Gfx = fresh92;
    (*_g_4).words.w0 =
        (0xda as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            ((::std::mem::size_of::<Mtx>() as
                  libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                  libc::c_uint).wrapping_div(8
                                                                                 as
                                                                                 libc::c_int
                                                                                 as
                                                                                 libc::c_uint)
                 &
                 (((0x1 as libc::c_int) << 5 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (((0 as libc::c_int | 0x2 as libc::c_int | 0 as libc::c_int) ^
                  0x1 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_4).words.w1 =
        Matrix_NewMtx((*globalCtx).state.gfxCtx,
                      b"../z_boss_ganon.c\x00" as *const u8 as
                          *const libc::c_char as *mut libc::c_char,
                      10534 as libc::c_int) as libc::c_uint;
    let fresh93 = (*__gfxCtx).polyXlu.p;
    (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
    let mut _g_5: *mut Gfx = fresh93;
    (*_g_5).words.w0 =
        (0xde as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_5).words.w1 = gDorfLightBallMaterialDL.as_mut_ptr() as libc::c_uint;
    let fresh94 = (*__gfxCtx).polyXlu.p;
    (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
    let mut _g_6: *mut Gfx = fresh94;
    (*_g_6).words.w0 =
        (0xde as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_6).words.w1 = gDorfSquareDL.as_mut_ptr() as libc::c_uint;
    Graph_CloseDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                     b"../z_boss_ganon.c\x00" as *const u8 as
                         *const libc::c_char, 10541 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon_UpdateEffects(mut globalCtx:
                                                     *mut GlobalContext) {
    let mut player: *mut Player =
        (*globalCtx).actorCtx.actorLists[ACTORCAT_PLAYER as libc::c_int as
                                             usize].head as *mut Player;
    let mut eff: *mut GanondorfEffect =
        (*globalCtx).specialEffects as *mut GanondorfEffect;
    let mut i: s16 = 0;
    let mut pad: s32 = 0;
    let mut xDiff: f32_0 = 0.;
    let mut yDiff: f32_0 = 0.;
    let mut zDiff: f32_0 = 0.;
    let mut yRot: f32_0 = 0.;
    let mut xRot: f32_0 = 0.;
    let mut spA0: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut bodyPart: s16 = 0;
    let mut distToPlayer: f32_0 = 0.;
    let mut pad2: s32 = 0;
    let mut pad3: s32 = 0;
    spA0.x = 0.0f32;
    spA0.y = 0.0f32;
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) <
              (::std::mem::size_of::<[GanondorfEffect; 200]>() as
                   libc::c_ulong).wrapping_div(::std::mem::size_of::<GanondorfEffect>()
                                                   as libc::c_ulong) as s32 {
        if (*eff).type_0 as libc::c_int != GDF_EFF_NONE as libc::c_int {
            (*eff).pos.x += (*eff).velocity.x;
            (*eff).pos.y += (*eff).velocity.y;
            (*eff).pos.z += (*eff).velocity.z;
            (*eff).timer = (*eff).timer.wrapping_add(1);
            (*eff).velocity.x += (*eff).accel.x;
            (*eff).velocity.y += (*eff).accel.y;
            (*eff).velocity.z += (*eff).accel.z;
            if (*eff).type_0 as libc::c_int ==
                   GDF_EFF_WINDOW_SHARD as libc::c_int {
                (*eff).unk_44 += 0.3f32;
                (*eff).unk_48 += 0.5f32;
                if (*eff).pos.y < 0.0f32 {
                    (*eff).type_0 = GDF_EFF_NONE as libc::c_int as u8_0
                }
            } else if (*eff).type_0 as libc::c_int ==
                          GDF_EFF_SPARKLE as libc::c_int {
                (*eff).unk_3C +=
                    Rand_ZeroFloat(3.14159265358979323846f32 /
                                       2 as libc::c_int as libc::c_float) +
                        3.14159265358979323846f32 /
                            2 as libc::c_int as libc::c_float;
                (*eff).unk_2E =
                    ((*eff).unk_2E as libc::c_int -
                         (*eff).unk_30 as libc::c_int) as s16;
                if (*eff).unk_2E as libc::c_int <= 0 as libc::c_int {
                    (*eff).unk_2E = 0 as libc::c_int as s16;
                    (*eff).type_0 = GDF_EFF_NONE as libc::c_int as u8_0
                }
                (*eff).alpha = (*eff).unk_2E;
                if (*eff).alpha as libc::c_int > 255 as libc::c_int {
                    (*eff).alpha = 255 as libc::c_int as s16
                }
            } else if (*eff).type_0 as libc::c_int ==
                          GDF_EFF_BLACK_DOT as libc::c_int {
                xDiff = (*sGanondorf).unk_278.x - (*eff).pos.x;
                yDiff = (*sGanondorf).unk_278.y - (*eff).pos.y;
                zDiff = (*sGanondorf).unk_278.z - (*eff).pos.z;
                yRot = Math_FAtan2F(xDiff, zDiff);
                xRot =
                    -Math_FAtan2F(yDiff,
                                  sqrtf(xDiff * xDiff + zDiff * zDiff));
                spA0.z = (*eff).unk_38;
                Matrix_RotateY(yRot, MTXMODE_NEW as libc::c_int as u8_0);
                Matrix_RotateX(xRot, MTXMODE_APPLY as libc::c_int as u8_0);
                Matrix_MultVec3f(&mut spA0, &mut (*eff).velocity);
                Math_ApproachF(&mut (*eff).unk_38, 10.0f32, 1.0f32, 0.5f32);
                (*eff).alpha =
                    ((*eff).alpha as libc::c_int + 10 as libc::c_int) as s16;
                if (*eff).alpha as libc::c_int > 255 as libc::c_int {
                    (*eff).alpha = 255 as libc::c_int as s16
                }
                if sqrtf(xDiff * xDiff + yDiff * yDiff + zDiff * zDiff) <
                       20.0f32 ||
                       (*eff).timer as libc::c_int > 70 as libc::c_int {
                    (*eff).type_0 = GDF_EFF_NONE as libc::c_int as u8_0
                }
            } else if (*eff).type_0 as libc::c_int ==
                          GDF_EFF_LIGHT_RAY as libc::c_int {
                (*eff).unk_3C +=
                    Rand_ZeroFloat(3.14159265358979323846f32 /
                                       2 as libc::c_int as libc::c_float) +
                        3.14159265358979323846f32 /
                            2 as libc::c_int as libc::c_float;
                (*eff).unk_2E =
                    ((*eff).unk_2E as libc::c_int -
                         (*eff).unk_30 as libc::c_int) as s16;
                if (*eff).unk_2E as libc::c_int <= 0 as libc::c_int {
                    (*eff).unk_2E = 0 as libc::c_int as s16;
                    (*eff).type_0 = GDF_EFF_NONE as libc::c_int as u8_0
                }
                (*eff).alpha = (*eff).unk_2E;
                if (*eff).alpha as libc::c_int > 255 as libc::c_int {
                    (*eff).alpha = 255 as libc::c_int as s16
                }
                Math_ApproachF(&mut (*eff).unk_38, (*eff).unk_40, 1.0f32,
                               (*eff).unk_40 / 15.0f32 * 4.0f32);
            } else if (*eff).type_0 as libc::c_int ==
                          GDF_EFF_SHOCK as libc::c_int {
                if (*eff).unk_2E as libc::c_int ==
                       GDF_SHOCK_DORF_YELLOW as libc::c_int {
                    bodyPart =
                        (Rand_ZeroFloat(13.9f32) as s16 as libc::c_int +
                             1 as libc::c_int) as s16;
                    (*eff).pos.x =
                        (*sGanondorf).unk_2EC[bodyPart as usize].x +
                            Rand_CenteredFloat(20.0f32);
                    (*eff).pos.y =
                        (*sGanondorf).unk_2EC[bodyPart as usize].y +
                            Rand_CenteredFloat(20.0f32);
                    (*eff).pos.z =
                        (*sGanondorf).unk_2EC[bodyPart as usize].z +
                            Rand_CenteredFloat(20.0f32)
                } else {
                    bodyPart = Rand_ZeroFloat(17.9f32) as s16;
                    (*eff).pos.x =
                        (*player).bodyPartsPos[bodyPart as usize].x +
                            Rand_CenteredFloat(10.0f32);
                    (*eff).pos.y =
                        (*player).bodyPartsPos[bodyPart as usize].y +
                            Rand_CenteredFloat(15.0f32);
                    (*eff).pos.z =
                        (*player).bodyPartsPos[bodyPart as usize].z +
                            Rand_CenteredFloat(10.0f32)
                }
                (*eff).unk_3C +=
                    Rand_ZeroFloat(3.14159265358979323846f32 /
                                       2 as libc::c_int as libc::c_float) +
                        3.14159265358979323846f32 /
                            2 as libc::c_int as libc::c_float;
                if (*eff).timer as libc::c_int > 20 as libc::c_int {
                    (*eff).type_0 = GDF_EFF_NONE as libc::c_int as u8_0
                }
            } else if (*eff).type_0 as libc::c_int ==
                          GDF_EFF_LIGHTNING as libc::c_int {
                if (*eff).unk_3C == 0.0f32 {
                    (*eff).unk_44 =
                        Camera_GetInputDirYaw(Gameplay_GetCamera(globalCtx,
                                                                 0 as
                                                                     libc::c_int
                                                                     as s16))
                            as f32_0 / 32768.0f32 * 3.14159265358979323846f32
                } else {
                    (*eff).unk_44 =
                        3.14159265358979323846f32 /
                            2 as libc::c_int as libc::c_float
                }
                if (*eff).timer as libc::c_int > 12 as libc::c_int {
                    (*eff).type_0 = GDF_EFF_NONE as libc::c_int as u8_0
                }
            } else if (*eff).type_0 as libc::c_int ==
                          GDF_EFF_IMPACT_DUST_DARK as libc::c_int {
                (*eff).unk_30 += 1;
                if (*eff).unk_2E as libc::c_int == 0 as libc::c_int {
                    (*eff).alpha =
                        ((*eff).alpha as libc::c_int + 26 as libc::c_int) as
                            s16;
                    if (*eff).alpha as libc::c_int > 255 as libc::c_int {
                        (*eff).alpha = 255 as libc::c_int as s16;
                        (*eff).unk_2E = 1 as libc::c_int as s16
                    }
                } else if (*eff).unk_2E as libc::c_int == 1 as libc::c_int {
                    (*eff).unk_2E = 2 as libc::c_int as s16
                } else if (*eff).unk_2E as libc::c_int == 2 as libc::c_int {
                    (*eff).alpha =
                        ((*eff).alpha as libc::c_int - 26 as libc::c_int) as
                            s16;
                    if ((*eff).alpha as libc::c_int) < 0 as libc::c_int {
                        (*eff).alpha = 0 as libc::c_int as s16;
                        (*eff).type_0 = GDF_EFF_NONE as libc::c_int as u8_0
                    }
                }
                Math_ApproachF(&mut (*eff).scale, (*eff).unk_38, 1.0f32,
                               0.01f32);
                Math_ApproachF(&mut (*eff).unk_40, 4.0f32, 1.0f32, 0.15f32);
            } else if (*eff).type_0 as libc::c_int ==
                          GDF_EFF_IMPACT_DUST_LIGHT as libc::c_int {
                if i as libc::c_int == 0 as libc::c_int {
                    func_80078884((0x3947 as libc::c_int -
                                       0x800 as libc::c_int) as u16_0);
                }
                (*eff).unk_30 += 1;
                if (*eff).unk_2E as libc::c_int == 0 as libc::c_int {
                    (*eff).alpha =
                        ((*eff).alpha as libc::c_int + 100 as libc::c_int) as
                            s16;
                    if (*eff).alpha as libc::c_int > 255 as libc::c_int {
                        (*eff).alpha = 255 as libc::c_int as s16;
                        (*eff).unk_2E = 1 as libc::c_int as s16
                    }
                } else if (*eff).unk_2E as libc::c_int == 1 as libc::c_int {
                    if (*eff).timer as libc::c_int >= 20 as libc::c_int {
                        (*eff).unk_2E = 2 as libc::c_int as s16
                    }
                } else if (*eff).unk_2E as libc::c_int == 2 as libc::c_int {
                    (*eff).alpha =
                        ((*eff).alpha as libc::c_int - 30 as libc::c_int) as
                            s16;
                    if ((*eff).alpha as libc::c_int) < 0 as libc::c_int {
                        (*eff).alpha = 0 as libc::c_int as s16;
                        (*eff).type_0 = GDF_EFF_NONE as libc::c_int as u8_0
                    }
                }
                Math_ApproachF(&mut (*eff).scale, (*eff).unk_38, 1.0f32,
                               0.1f32);
                Math_ApproachF(&mut (*eff).unk_40, 1.0f32, 1.0f32, 0.15f32);
            } else if (*eff).type_0 as libc::c_int ==
                          GDF_EFF_SHOCKWAVE as libc::c_int {
                (*eff).unk_30 += 1;
                (*eff).alpha =
                    ((*eff).alpha as libc::c_int - 30 as libc::c_int) as s16;
                if ((*eff).alpha as libc::c_int) < 0 as libc::c_int {
                    (*eff).alpha = 0 as libc::c_int as s16;
                    (*eff).type_0 = GDF_EFF_NONE as libc::c_int as u8_0
                }
                Math_ApproachF(&mut (*eff).scale, (*eff).unk_38, 1.0f32,
                               0.13f32);
                if ((*eff).timer as libc::c_int) < 150 as libc::c_int &&
                       fabsf((*player).actor.world.pos.y) < 5.0f32 {
                    distToPlayer =
                        sqrtf(((*eff).pos.x - (*player).actor.world.pos.x) *
                                  ((*eff).pos.x - (*player).actor.world.pos.x)
                                  +
                                  ((*eff).pos.z - (*player).actor.world.pos.z)
                                      *
                                      ((*eff).pos.z -
                                           (*player).actor.world.pos.z));
                    if (*eff).scale * 150.0f32 < distToPlayer &&
                           distToPlayer < (*eff).scale * 300.0f32 {
                        (*eff).timer = 150 as libc::c_int as u8_0;
                        func_8002F6D4(globalCtx, &mut (*sGanondorf).actor,
                                      7.0f32,
                                      (*sGanondorf).actor.yawTowardsPlayer,
                                      0.0f32, 0x20 as libc::c_int as u32_0);
                    }
                }
            }
        }
        i += 1;
        eff = eff.offset(1)
    };
}
static mut sLightningTextures: [*mut libc::c_void; 13] =
    unsafe {
        [gDorfLightning1Tex.as_ptr() as *mut _ as *mut libc::c_void,
         gDorfLightning1Tex.as_ptr() as *mut _ as *mut libc::c_void,
         gDorfLightning2Tex.as_ptr() as *mut _ as *mut libc::c_void,
         gDorfLightning3Tex.as_ptr() as *mut _ as *mut libc::c_void,
         gDorfLightning4Tex.as_ptr() as *mut _ as *mut libc::c_void,
         gDorfLightning5Tex.as_ptr() as *mut _ as *mut libc::c_void,
         gDorfLightning6Tex.as_ptr() as *mut _ as *mut libc::c_void,
         gDorfLightning7Tex.as_ptr() as *mut _ as *mut libc::c_void,
         gDorfLightning8Tex.as_ptr() as *mut _ as *mut libc::c_void,
         gDorfLightning9Tex.as_ptr() as *mut _ as *mut libc::c_void,
         gDorfLightning10Tex.as_ptr() as *mut _ as *mut libc::c_void,
         gDorfLightning11Tex.as_ptr() as *mut _ as *mut libc::c_void,
         gDorfLightning12Tex.as_ptr() as *mut _ as *mut libc::c_void]
    };
static mut sLightningPrimColors: [u8_0; 39] =
    [0 as libc::c_int as u8_0, 0 as libc::c_int as u8_0,
     0 as libc::c_int as u8_0, 255 as libc::c_int as u8_0,
     255 as libc::c_int as u8_0, 255 as libc::c_int as u8_0,
     231 as libc::c_int as u8_0, 250 as libc::c_int as u8_0,
     231 as libc::c_int as u8_0, 208 as libc::c_int as u8_0,
     245 as libc::c_int as u8_0, 208 as libc::c_int as u8_0,
     185 as libc::c_int as u8_0, 240 as libc::c_int as u8_0,
     185 as libc::c_int as u8_0, 162 as libc::c_int as u8_0,
     235 as libc::c_int as u8_0, 162 as libc::c_int as u8_0,
     139 as libc::c_int as u8_0, 230 as libc::c_int as u8_0,
     139 as libc::c_int as u8_0, 115 as libc::c_int as u8_0,
     225 as libc::c_int as u8_0, 115 as libc::c_int as u8_0,
     92 as libc::c_int as u8_0, 220 as libc::c_int as u8_0,
     92 as libc::c_int as u8_0, 69 as libc::c_int as u8_0,
     215 as libc::c_int as u8_0, 69 as libc::c_int as u8_0,
     46 as libc::c_int as u8_0, 210 as libc::c_int as u8_0,
     46 as libc::c_int as u8_0, 23 as libc::c_int as u8_0,
     205 as libc::c_int as u8_0, 23 as libc::c_int as u8_0,
     0 as libc::c_int as u8_0, 200 as libc::c_int as u8_0,
     0 as libc::c_int as u8_0];
static mut sLightningEnvColors: [u8_0; 52] =
    [0 as libc::c_int as u8_0, 0 as libc::c_int as u8_0,
     0 as libc::c_int as u8_0, 255 as libc::c_int as u8_0,
     255 as libc::c_int as u8_0, 0 as libc::c_int as u8_0,
     240 as libc::c_int as u8_0, 231 as libc::c_int as u8_0,
     23 as libc::c_int as u8_0, 226 as libc::c_int as u8_0,
     208 as libc::c_int as u8_0, 46 as libc::c_int as u8_0,
     212 as libc::c_int as u8_0, 185 as libc::c_int as u8_0,
     69 as libc::c_int as u8_0, 198 as libc::c_int as u8_0,
     162 as libc::c_int as u8_0, 92 as libc::c_int as u8_0,
     184 as libc::c_int as u8_0, 139 as libc::c_int as u8_0,
     115 as libc::c_int as u8_0, 170 as libc::c_int as u8_0,
     115 as libc::c_int as u8_0, 139 as libc::c_int as u8_0,
     156 as libc::c_int as u8_0, 92 as libc::c_int as u8_0,
     162 as libc::c_int as u8_0, 142 as libc::c_int as u8_0,
     69 as libc::c_int as u8_0, 185 as libc::c_int as u8_0,
     128 as libc::c_int as u8_0, 46 as libc::c_int as u8_0,
     208 as libc::c_int as u8_0, 114 as libc::c_int as u8_0,
     23 as libc::c_int as u8_0, 231 as libc::c_int as u8_0,
     100 as libc::c_int as u8_0, 0 as libc::c_int as u8_0,
     255 as libc::c_int as u8_0, 0 as libc::c_int as u8_0,
     0 as libc::c_int as u8_0, 0 as libc::c_int as u8_0,
     0 as libc::c_int as u8_0, 0 as libc::c_int as u8_0,
     0 as libc::c_int as u8_0, 0 as libc::c_int as u8_0,
     0 as libc::c_int as u8_0, 0 as libc::c_int as u8_0,
     0 as libc::c_int as u8_0, 0 as libc::c_int as u8_0,
     0 as libc::c_int as u8_0, 0 as libc::c_int as u8_0];
#[no_mangle]
pub unsafe extern "C" fn BossGanon_DrawEffects(mut globalCtx:
                                                   *mut GlobalContext) {
    let mut flag: u8_0 = 0 as libc::c_int as u8_0;
    let mut i: s16 = 0;
    let mut pad: s32 = 0;
    let mut gfxCtx: *mut GraphicsContext = (*globalCtx).state.gfxCtx;
    let mut eff: *mut GanondorfEffect =
        (*globalCtx).specialEffects as *mut GanondorfEffect;
    let mut effFirst: *mut GanondorfEffect = eff;
    let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
    let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
    __gfxCtx = gfxCtx;
    Graph_OpenDisps(dispRefs.as_mut_ptr(), gfxCtx,
                    b"../z_boss_ganon.c\x00" as *const u8 as
                        *const libc::c_char, 10865 as libc::c_int);
    func_80093D84((*globalCtx).state.gfxCtx);
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) < 200 as libc::c_int {
        if (*eff).type_0 as libc::c_int == GDF_EFF_WINDOW_SHARD as libc::c_int
           {
            let fresh95 = (*__gfxCtx).polyOpa.p;
            (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
            let mut _g: *mut Gfx = fresh95;
            (*_g).words.w0 =
                (0xe7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g).words.w1 = 0 as libc::c_int as libc::c_uint;
            if flag as libc::c_int == 0 as libc::c_int {
                let fresh96 = (*__gfxCtx).polyOpa.p;
                (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
                let mut _g_0: *mut Gfx = fresh96;
                (*_g_0).words.w0 =
                    (0xde as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            16 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 16 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                (*_g_0).words.w1 =
                    gDorfWindowShardMaterialDL.as_mut_ptr() as libc::c_uint;
                flag = flag.wrapping_add(1)
            }
            if (*eff).timer as libc::c_int & 7 as libc::c_int !=
                   0 as libc::c_int {
                let fresh97 = (*__gfxCtx).polyOpa.p;
                (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
                let mut _g_1: *mut Gfx = fresh97;
                (*_g_1).words.w0 =
                    (0xfa as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            8 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                (*_g_1).words.w1 =
                    ((*eff).color.r as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        ((*eff).color.g as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            16 as libc::c_int |
                        ((*eff).color.b as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            8 as libc::c_int |
                        (255 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int
            } else {
                let fresh98 = (*__gfxCtx).polyOpa.p;
                (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
                let mut _g_2: *mut Gfx = fresh98;
                (*_g_2).words.w0 =
                    (0xfa as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            8 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                (*_g_2).words.w1 =
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (255 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            16 as libc::c_int |
                        (255 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            8 as libc::c_int |
                        (255 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int
            }
            Matrix_Translate((*eff).pos.x, (*eff).pos.y, (*eff).pos.z,
                             MTXMODE_NEW as libc::c_int as u8_0);
            Matrix_Scale((*eff).scale, (*eff).scale, (*eff).scale,
                         MTXMODE_APPLY as libc::c_int as u8_0);
            Matrix_RotateY((*eff).unk_48,
                           MTXMODE_APPLY as libc::c_int as u8_0);
            Matrix_RotateX((*eff).unk_44,
                           MTXMODE_APPLY as libc::c_int as u8_0);
            let fresh99 = (*__gfxCtx).polyOpa.p;
            (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
            let mut _g_3: *mut Gfx = fresh99;
            (*_g_3).words.w0 =
                (0xda as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((::std::mem::size_of::<Mtx>() as
                          libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                          libc::c_uint).wrapping_div(8
                                                                                         as
                                                                                         libc::c_int
                                                                                         as
                                                                                         libc::c_uint)
                         &
                         (((0x1 as libc::c_int) << 5 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (((0 as libc::c_int | 0x2 as libc::c_int |
                           0 as libc::c_int) ^ 0x1 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_3).words.w1 =
                Matrix_NewMtx(gfxCtx,
                              b"../z_boss_ganon.c\x00" as *const u8 as
                                  *const libc::c_char as *mut libc::c_char,
                              10898 as libc::c_int) as libc::c_uint;
            let fresh100 = (*__gfxCtx).polyOpa.p;
            (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
            let mut _g_4: *mut Gfx = fresh100;
            (*_g_4).words.w0 =
                (0xde as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_4).words.w1 =
                gDorfWindowShardModelDL.as_mut_ptr() as libc::c_uint
        }
        i += 1;
        eff = eff.offset(1)
    }
    eff = effFirst;
    flag = 0 as libc::c_int as u8_0;
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) < 150 as libc::c_int {
        if (*eff).type_0 as libc::c_int == GDF_EFF_SPARKLE as libc::c_int {
            let fresh101 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_5: *mut Gfx = fresh101;
            (*_g_5).words.w0 =
                (0xe7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_5).words.w1 = 0 as libc::c_int as libc::c_uint;
            if flag as libc::c_int == 0 as libc::c_int {
                let fresh102 = (*__gfxCtx).polyXlu.p;
                (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
                let mut _g_6: *mut Gfx = fresh102;
                (*_g_6).words.w0 =
                    (0xfb as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int;
                (*_g_6).words.w1 =
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (255 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            16 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            8 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                let fresh103 = (*__gfxCtx).polyXlu.p;
                (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
                let mut _g_7: *mut Gfx = fresh103;
                (*_g_7).words.w0 =
                    (0xde as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            16 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 16 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                (*_g_7).words.w1 =
                    gDorfLightBallMaterialDL.as_mut_ptr() as libc::c_uint;
                flag = flag.wrapping_add(1)
            }
            let fresh104 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_8: *mut Gfx = fresh104;
            (*_g_8).words.w0 =
                (0xfa as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_8).words.w1 =
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    ((*eff).alpha as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            Matrix_Translate((*eff).pos.x, (*eff).pos.y, (*eff).pos.z,
                             MTXMODE_NEW as libc::c_int as u8_0);
            func_800D1FD4(&mut (*globalCtx).billboardMtxF);
            Matrix_Scale((*eff).scale, (*eff).scale, 1.0f32,
                         MTXMODE_APPLY as libc::c_int as u8_0);
            Matrix_RotateZ((*eff).unk_3C,
                           MTXMODE_APPLY as libc::c_int as u8_0);
            let fresh105 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_9: *mut Gfx = fresh105;
            (*_g_9).words.w0 =
                (0xda as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((::std::mem::size_of::<Mtx>() as
                          libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                          libc::c_uint).wrapping_div(8
                                                                                         as
                                                                                         libc::c_int
                                                                                         as
                                                                                         libc::c_uint)
                         &
                         (((0x1 as libc::c_int) << 5 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (((0 as libc::c_int | 0x2 as libc::c_int |
                           0 as libc::c_int) ^ 0x1 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_9).words.w1 =
                Matrix_NewMtx(gfxCtx,
                              b"../z_boss_ganon.c\x00" as *const u8 as
                                  *const libc::c_char as *mut libc::c_char,
                              10932 as libc::c_int) as libc::c_uint;
            let fresh106 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_10: *mut Gfx = fresh106;
            (*_g_10).words.w0 =
                (0xde as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_10).words.w1 = gDorfSquareDL.as_mut_ptr() as libc::c_uint
        }
        i += 1;
        eff = eff.offset(1)
    }
    eff = effFirst;
    flag = 0 as libc::c_int as u8_0;
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) < 150 as libc::c_int {
        if (*eff).type_0 as libc::c_int == GDF_EFF_LIGHT_RAY as libc::c_int {
            let fresh107 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_11: *mut Gfx = fresh107;
            (*_g_11).words.w0 =
                (0xe7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_11).words.w1 = 0 as libc::c_int as libc::c_uint;
            if flag as libc::c_int == 0 as libc::c_int {
                let fresh108 = (*__gfxCtx).polyXlu.p;
                (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
                let mut _g_12: *mut Gfx = fresh108;
                (*_g_12).words.w0 =
                    (0xfb as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int;
                (*_g_12).words.w1 =
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (255 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            16 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            8 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                let fresh109 = (*__gfxCtx).polyXlu.p;
                (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
                let mut _g_13: *mut Gfx = fresh109;
                (*_g_13).words.w0 =
                    (0xde as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            16 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 16 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                (*_g_13).words.w1 =
                    gDorfLightBallMaterialDL.as_mut_ptr() as libc::c_uint;
                flag = flag.wrapping_add(1)
            }
            let fresh110 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_14: *mut Gfx = fresh110;
            (*_g_14).words.w0 =
                (0xfa as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_14).words.w1 =
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    ((*eff).alpha as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            Matrix_Translate((*eff).pos.x, (*eff).pos.y, (*eff).pos.z,
                             MTXMODE_NEW as libc::c_int as u8_0);
            Matrix_RotateY((*eff).unk_48,
                           MTXMODE_APPLY as libc::c_int as u8_0);
            Matrix_RotateX((*eff).unk_44,
                           MTXMODE_APPLY as libc::c_int as u8_0);
            Matrix_RotateZ((*eff).unk_3C,
                           MTXMODE_APPLY as libc::c_int as u8_0);
            Matrix_Scale((*eff).scale, (*eff).scale,
                         (*eff).unk_38 * (*eff).scale,
                         MTXMODE_APPLY as libc::c_int as u8_0);
            Matrix_RotateX(3.14159265358979323846f32 /
                               2 as libc::c_int as libc::c_float,
                           MTXMODE_APPLY as libc::c_int as u8_0);
            let fresh111 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_15: *mut Gfx = fresh111;
            (*_g_15).words.w0 =
                (0xda as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((::std::mem::size_of::<Mtx>() as
                          libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                          libc::c_uint).wrapping_div(8
                                                                                         as
                                                                                         libc::c_int
                                                                                         as
                                                                                         libc::c_uint)
                         &
                         (((0x1 as libc::c_int) << 5 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (((0 as libc::c_int | 0x2 as libc::c_int |
                           0 as libc::c_int) ^ 0x1 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_15).words.w1 =
                Matrix_NewMtx(gfxCtx,
                              b"../z_boss_ganon.c\x00" as *const u8 as
                                  *const libc::c_char as *mut libc::c_char,
                              10971 as libc::c_int) as libc::c_uint;
            let fresh112 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_16: *mut Gfx = fresh112;
            (*_g_16).words.w0 =
                (0xde as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_16).words.w1 = gDorfSquareDL.as_mut_ptr() as libc::c_uint
        }
        i += 1;
        eff = eff.offset(1)
    }
    eff = effFirst;
    flag = 0 as libc::c_int as u8_0;
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) < 150 as libc::c_int {
        if (*eff).type_0 as libc::c_int == GDF_EFF_SHOCK as libc::c_int {
            if flag as libc::c_int == 0 as libc::c_int {
                let fresh113 = (*__gfxCtx).polyXlu.p;
                (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
                let mut _g_17: *mut Gfx = fresh113;
                (*_g_17).words.w0 =
                    (0xe7 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int;
                (*_g_17).words.w1 = 0 as libc::c_int as libc::c_uint;
                if (*eff).unk_2E as libc::c_int ==
                       GDF_SHOCK_PLAYER_PURPLE as libc::c_int {
                    let fresh114 = (*__gfxCtx).polyXlu.p;
                    (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
                    let mut _g_18: *mut Gfx = fresh114;
                    (*_g_18).words.w0 =
                        (0xfa as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                8 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int;
                    (*_g_18).words.w1 =
                        (100 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                16 as libc::c_int |
                            (200 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                8 as libc::c_int |
                            (255 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int;
                    let fresh115 = (*__gfxCtx).polyXlu.p;
                    (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
                    let mut _g_19: *mut Gfx = fresh115;
                    (*_g_19).words.w0 =
                        (0xfb as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int;
                    (*_g_19).words.w1 =
                        (130 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                16 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                8 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int
                } else {
                    let fresh116 = (*__gfxCtx).polyXlu.p;
                    (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
                    let mut _g_20: *mut Gfx = fresh116;
                    (*_g_20).words.w0 =
                        (0xfa as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                8 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int;
                    (*_g_20).words.w1 =
                        (255 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (255 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                16 as libc::c_int |
                            (255 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                8 as libc::c_int |
                            (255 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int;
                    let fresh117 = (*__gfxCtx).polyXlu.p;
                    (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
                    let mut _g_21: *mut Gfx = fresh117;
                    (*_g_21).words.w0 =
                        (0xfb as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int;
                    (*_g_21).words.w1 =
                        (255 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (255 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                16 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                8 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int
                }
                flag = flag.wrapping_add(1)
            }
            Matrix_Translate((*eff).pos.x, (*eff).pos.y, (*eff).pos.z,
                             MTXMODE_NEW as libc::c_int as u8_0);
            Matrix_Scale((*eff).scale, (*eff).scale, 1.0f32,
                         MTXMODE_APPLY as libc::c_int as u8_0);
            Matrix_RotateX((*eff).unk_3C * 1.3f32,
                           MTXMODE_APPLY as libc::c_int as u8_0);
            Matrix_RotateZ((*eff).unk_3C,
                           MTXMODE_APPLY as libc::c_int as u8_0);
            let fresh118 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_22: *mut Gfx = fresh118;
            (*_g_22).words.w0 =
                (0xda as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((::std::mem::size_of::<Mtx>() as
                          libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                          libc::c_uint).wrapping_div(8
                                                                                         as
                                                                                         libc::c_int
                                                                                         as
                                                                                         libc::c_uint)
                         &
                         (((0x1 as libc::c_int) << 5 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (((0 as libc::c_int | 0x2 as libc::c_int |
                           0 as libc::c_int) ^ 0x1 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_22).words.w1 =
                Matrix_NewMtx(gfxCtx,
                              b"../z_boss_ganon.c\x00" as *const u8 as
                                  *const libc::c_char as *mut libc::c_char,
                              11023 as libc::c_int) as libc::c_uint;
            let fresh119 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_23: *mut Gfx = fresh119;
            (*_g_23).words.w0 =
                (0xde as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_23).words.w1 = gDorfShockDL.as_mut_ptr() as libc::c_uint
        }
        i += 1;
        eff = eff.offset(1)
    }
    eff = effFirst;
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) < 150 as libc::c_int {
        if (*eff).type_0 as libc::c_int == GDF_EFF_LIGHTNING as libc::c_int {
            let fresh120 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_24: *mut Gfx = fresh120;
            (*_g_24).words.w0 =
                (0xe7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_24).words.w1 = 0 as libc::c_int as libc::c_uint;
            let fresh121 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_25: *mut Gfx = fresh121;
            (*_g_25).words.w0 =
                (0xfa as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_25).words.w1 =
                (sLightningPrimColors[((*eff).timer as libc::c_int *
                                           3 as libc::c_int +
                                           0 as libc::c_int) as usize] as
                     u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (sLightningPrimColors[((*eff).timer as libc::c_int *
                                               3 as libc::c_int +
                                               1 as libc::c_int) as usize] as
                         u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (sLightningPrimColors[((*eff).timer as libc::c_int *
                                               3 as libc::c_int +
                                               2 as libc::c_int) as usize] as
                         u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh122 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_26: *mut Gfx = fresh122;
            (*_g_26).words.w0 =
                (0xfb as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_26).words.w1 =
                (sLightningEnvColors[((*eff).timer as libc::c_int *
                                          3 as libc::c_int + 0 as libc::c_int)
                                         as usize] as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (sLightningEnvColors[((*eff).timer as libc::c_int *
                                              3 as libc::c_int +
                                              1 as libc::c_int) as usize] as
                         u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (sLightningEnvColors[((*eff).timer as libc::c_int *
                                              3 as libc::c_int +
                                              2 as libc::c_int) as usize] as
                         u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            Matrix_Translate((*sGanondorf).unk_260.x, (*sGanondorf).unk_260.y,
                             (*sGanondorf).unk_260.z,
                             MTXMODE_NEW as libc::c_int as u8_0);
            Matrix_RotateY((*eff).unk_48,
                           MTXMODE_APPLY as libc::c_int as u8_0);
            Matrix_RotateZ((*eff).unk_3C,
                           MTXMODE_APPLY as libc::c_int as u8_0);
            Matrix_Scale((*eff).scale, (*eff).scale, (*eff).scale,
                         MTXMODE_APPLY as libc::c_int as u8_0);
            Matrix_RotateY((*eff).unk_44,
                           MTXMODE_APPLY as libc::c_int as u8_0);
            let fresh123 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_27: *mut Gfx = fresh123;
            (*_g_27).words.w0 =
                (0xda as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((::std::mem::size_of::<Mtx>() as
                          libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                          libc::c_uint).wrapping_div(8
                                                                                         as
                                                                                         libc::c_int
                                                                                         as
                                                                                         libc::c_uint)
                         &
                         (((0x1 as libc::c_int) << 5 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (((0 as libc::c_int | 0x2 as libc::c_int |
                           0 as libc::c_int) ^ 0x1 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_27).words.w1 =
                Matrix_NewMtx(gfxCtx,
                              b"../z_boss_ganon.c\x00" as *const u8 as
                                  *const libc::c_char as *mut libc::c_char,
                              11074 as libc::c_int) as libc::c_uint;
            let fresh124 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_28: *mut Gfx = fresh124;
            (*_g_28).words.w0 =
                (0xdb as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0x6 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    ((0x8 as libc::c_int * 4 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_28).words.w1 =
                gSegments[((sLightningTextures[(*eff).timer as usize] as
                                u32_0) << 4 as libc::c_int >>
                               28 as libc::c_int) as
                              usize].wrapping_add(sLightningTextures[(*eff).timer
                                                                         as
                                                                         usize]
                                                      as u32_0 &
                                                      0xffffff as libc::c_int
                                                          as
                                                          libc::c_uint).wrapping_add(0x80000000
                                                                                         as
                                                                                         libc::c_uint)
                    as *mut libc::c_void as libc::c_uint;
            let fresh125 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_29: *mut Gfx = fresh125;
            (*_g_29).words.w0 =
                (0xde as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_29).words.w1 = gDorfLightningDL.as_mut_ptr() as libc::c_uint
        }
        i += 1;
        eff = eff.offset(1)
    }
    eff = effFirst;
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) < 150 as libc::c_int {
        if (*eff).type_0 as libc::c_int ==
               GDF_EFF_IMPACT_DUST_DARK as libc::c_int {
            let fresh126 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_30: *mut Gfx = fresh126;
            (*_g_30).words.w0 =
                (0xe7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_30).words.w1 = 0 as libc::c_int as libc::c_uint;
            let fresh127 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_31: *mut Gfx = fresh127;
            (*_g_31).words.w0 =
                (0xfa as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_31).words.w1 =
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    ((*eff).alpha as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh128 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_32: *mut Gfx = fresh128;
            (*_g_32).words.w0 =
                (0xfb as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_32).words.w1 =
                (100 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (70 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (128 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh129 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_33: *mut Gfx = fresh129;
            (*_g_33).words.w0 =
                (0xdb as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0x6 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    ((0x8 as libc::c_int * 4 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_33).words.w1 =
                Gfx_TwoTexScroll((*globalCtx).state.gfxCtx, 0 as libc::c_int,
                                 ((*eff).timer as libc::c_int *
                                      4 as libc::c_int) as u32_0,
                                 0 as libc::c_int as u32_0, 32 as libc::c_int,
                                 64 as libc::c_int, 1 as libc::c_int,
                                 ((*eff).timer as libc::c_int *
                                      2 as libc::c_int) as u32_0,
                                 ((*eff).timer as libc::c_int *
                                      -(20 as libc::c_int)) as u32_0,
                                 32 as libc::c_int, 32 as libc::c_int) as
                    libc::c_uint;
            Matrix_Translate((*eff).pos.x, (*eff).pos.y, (*eff).pos.z,
                             MTXMODE_NEW as libc::c_int as u8_0);
            Matrix_Scale((*eff).scale, (*eff).unk_40 * (*eff).scale,
                         (*eff).scale, MTXMODE_APPLY as libc::c_int as u8_0);
            let fresh130 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_34: *mut Gfx = fresh130;
            (*_g_34).words.w0 =
                (0xda as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((::std::mem::size_of::<Mtx>() as
                          libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                          libc::c_uint).wrapping_div(8
                                                                                         as
                                                                                         libc::c_int
                                                                                         as
                                                                                         libc::c_uint)
                         &
                         (((0x1 as libc::c_int) << 5 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (((0 as libc::c_int | 0x2 as libc::c_int |
                           0 as libc::c_int) ^ 0x1 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_34).words.w1 =
                Matrix_NewMtx(gfxCtx,
                              b"../z_boss_ganon.c\x00" as *const u8 as
                                  *const libc::c_char as *mut libc::c_char,
                              11121 as libc::c_int) as libc::c_uint;
            let fresh131 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_35: *mut Gfx = fresh131;
            (*_g_35).words.w0 =
                (0xde as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_35).words.w1 = gDorfImpactDarkDL.as_mut_ptr() as libc::c_uint
        }
        i += 1;
        eff = eff.offset(1)
    }
    eff = effFirst;
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) < 150 as libc::c_int {
        if (*eff).type_0 as libc::c_int ==
               GDF_EFF_IMPACT_DUST_LIGHT as libc::c_int {
            let fresh132 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_36: *mut Gfx = fresh132;
            (*_g_36).words.w0 =
                (0xe7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_36).words.w1 = 0 as libc::c_int as libc::c_uint;
            let fresh133 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_37: *mut Gfx = fresh133;
            (*_g_37).words.w0 =
                (0xfa as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_37).words.w1 =
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    ((*eff).alpha as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh134 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_38: *mut Gfx = fresh134;
            (*_g_38).words.w0 =
                (0xfb as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_38).words.w1 =
                (200 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (100 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (128 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh135 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_39: *mut Gfx = fresh135;
            (*_g_39).words.w0 =
                (0xdb as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0x6 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    ((0x8 as libc::c_int * 4 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_39).words.w1 =
                Gfx_TwoTexScroll((*globalCtx).state.gfxCtx, 0 as libc::c_int,
                                 ((*eff).timer as libc::c_int *
                                      4 as libc::c_int) as u32_0,
                                 0 as libc::c_int as u32_0, 32 as libc::c_int,
                                 64 as libc::c_int, 1 as libc::c_int,
                                 ((*eff).timer as libc::c_int *
                                      2 as libc::c_int) as u32_0,
                                 ((*eff).timer as libc::c_int *
                                      -(20 as libc::c_int)) as u32_0,
                                 32 as libc::c_int, 32 as libc::c_int) as
                    libc::c_uint;
            Matrix_Translate((*eff).pos.x, (*eff).pos.y, (*eff).pos.z,
                             MTXMODE_NEW as libc::c_int as u8_0);
            Matrix_Scale((*eff).scale, (*eff).unk_40 * (*eff).scale,
                         (*eff).scale, MTXMODE_APPLY as libc::c_int as u8_0);
            let fresh136 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_40: *mut Gfx = fresh136;
            (*_g_40).words.w0 =
                (0xda as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((::std::mem::size_of::<Mtx>() as
                          libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                          libc::c_uint).wrapping_div(8
                                                                                         as
                                                                                         libc::c_int
                                                                                         as
                                                                                         libc::c_uint)
                         &
                         (((0x1 as libc::c_int) << 5 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (((0 as libc::c_int | 0x2 as libc::c_int |
                           0 as libc::c_int) ^ 0x1 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_40).words.w1 =
                Matrix_NewMtx(gfxCtx,
                              b"../z_boss_ganon.c\x00" as *const u8 as
                                  *const libc::c_char as *mut libc::c_char,
                              11165 as libc::c_int) as libc::c_uint;
            let fresh137 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_41: *mut Gfx = fresh137;
            (*_g_41).words.w0 =
                (0xde as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_41).words.w1 =
                gDorfImpactLightDL.as_mut_ptr() as libc::c_uint
        }
        i += 1;
        eff = eff.offset(1)
    }
    eff = effFirst;
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) < 150 as libc::c_int {
        if (*eff).type_0 as libc::c_int == GDF_EFF_SHOCKWAVE as libc::c_int {
            let fresh138 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_42: *mut Gfx = fresh138;
            (*_g_42).words.w0 =
                (0xe7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_42).words.w1 = 0 as libc::c_int as libc::c_uint;
            let fresh139 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_43: *mut Gfx = fresh139;
            (*_g_43).words.w0 =
                (0xfa as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_43).words.w1 =
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (170 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    ((*eff).alpha as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh140 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_44: *mut Gfx = fresh140;
            (*_g_44).words.w0 =
                (0xfb as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_44).words.w1 =
                (150 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (128 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh141 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_45: *mut Gfx = fresh141;
            (*_g_45).words.w0 =
                (0xdb as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0x6 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    ((0x8 as libc::c_int * 4 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_45).words.w1 =
                Gfx_TwoTexScroll((*globalCtx).state.gfxCtx, 0 as libc::c_int,
                                 ((*eff).timer as libc::c_int *
                                      100 as libc::c_int) as u32_0,
                                 0 as libc::c_int as u32_0, 64 as libc::c_int,
                                 32 as libc::c_int, 1 as libc::c_int,
                                 ((*eff).timer as libc::c_int *
                                      100 as libc::c_int) as u32_0,
                                 0 as libc::c_int as u32_0, 64 as libc::c_int,
                                 32 as libc::c_int) as libc::c_uint;
            Matrix_Translate((*eff).pos.x, (*eff).pos.y, (*eff).pos.z,
                             MTXMODE_NEW as libc::c_int as u8_0);
            Matrix_Scale((*eff).scale * 200.0f32 / 1500.0f32,
                         (*eff).unk_40 * 200.0f32 / 1500.0f32,
                         (*eff).scale * 200.0f32 / 1500.0f32,
                         MTXMODE_APPLY as libc::c_int as u8_0);
            let fresh142 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_46: *mut Gfx = fresh142;
            (*_g_46).words.w0 =
                (0xda as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((::std::mem::size_of::<Mtx>() as
                          libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                          libc::c_uint).wrapping_div(8
                                                                                         as
                                                                                         libc::c_int
                                                                                         as
                                                                                         libc::c_uint)
                         &
                         (((0x1 as libc::c_int) << 5 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (((0 as libc::c_int | 0x2 as libc::c_int |
                           0 as libc::c_int) ^ 0x1 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_46).words.w1 =
                Matrix_NewMtx(gfxCtx,
                              b"../z_boss_ganon.c\x00" as *const u8 as
                                  *const libc::c_char as *mut libc::c_char,
                              11209 as libc::c_int) as libc::c_uint;
            let fresh143 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_47: *mut Gfx = fresh143;
            (*_g_47).words.w0 =
                (0xde as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_47).words.w1 = gDorfShockwaveDL.as_mut_ptr() as libc::c_uint
        }
        i += 1;
        eff = eff.offset(1)
    }
    eff = effFirst;
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) < 150 as libc::c_int {
        if (*eff).type_0 as libc::c_int == GDF_EFF_BLACK_DOT as libc::c_int {
            let fresh144 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_48: *mut Gfx = fresh144;
            (*_g_48).words.w0 =
                (0xe7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_48).words.w1 = 0 as libc::c_int as libc::c_uint;
            let fresh145 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_49: *mut Gfx = fresh145;
            (*_g_49).words.w0 =
                (0xfa as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_49).words.w1 =
                (150 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (170 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    ((*eff).alpha as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh146 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_50: *mut Gfx = fresh146;
            (*_g_50).words.w0 =
                (0xfb as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_50).words.w1 =
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (128 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh147 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_51: *mut Gfx = fresh147;
            (*_g_51).words.w0 =
                (0xdb as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0x6 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    ((0xa as libc::c_int * 4 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_51).words.w1 =
                Gfx_TwoTexScroll((*globalCtx).state.gfxCtx, 0 as libc::c_int,
                                 0 as libc::c_int as u32_0,
                                 0 as libc::c_int as u32_0, 32 as libc::c_int,
                                 32 as libc::c_int, 1 as libc::c_int,
                                 ((*eff).timer as libc::c_int *
                                      2 as libc::c_int) as u32_0,
                                 ((*eff).timer as libc::c_int *
                                      -(20 as libc::c_int)) as u32_0,
                                 64 as libc::c_int, 64 as libc::c_int) as
                    libc::c_uint;
            Matrix_Translate((*eff).pos.x, (*eff).pos.y, (*eff).pos.z,
                             MTXMODE_NEW as libc::c_int as u8_0);
            func_800D1FD4(&mut (*globalCtx).billboardMtxF);
            Matrix_Scale((*eff).scale, (*eff).scale, 1.0f32,
                         MTXMODE_APPLY as libc::c_int as u8_0);
            let fresh148 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_52: *mut Gfx = fresh148;
            (*_g_52).words.w0 =
                (0xda as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((::std::mem::size_of::<Mtx>() as
                          libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                          libc::c_uint).wrapping_div(8
                                                                                         as
                                                                                         libc::c_int
                                                                                         as
                                                                                         libc::c_uint)
                         &
                         (((0x1 as libc::c_int) << 5 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (((0 as libc::c_int | 0x2 as libc::c_int |
                           0 as libc::c_int) ^ 0x1 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_52).words.w1 =
                Matrix_NewMtx(gfxCtx,
                              b"../z_boss_ganon.c\x00" as *const u8 as
                                  *const libc::c_char as *mut libc::c_char,
                              11250 as libc::c_int) as libc::c_uint;
            let fresh149 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_53: *mut Gfx = fresh149;
            (*_g_53).words.w0 =
                (0xde as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_53).words.w1 = gDorfDotDL.as_mut_ptr() as libc::c_uint
        }
        i += 1;
        eff = eff.offset(1)
    }
    Graph_CloseDisps(dispRefs.as_mut_ptr(), gfxCtx,
                     b"../z_boss_ganon.c\x00" as *const u8 as
                         *const libc::c_char, 11255 as libc::c_int);
}
static mut ovl_Boss_GanonVtx_01DAB8: [Vtx; 26] =
    [Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(100 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(173 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [3413 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(100 as libc::c_int) as libc::c_short,
                                100 as libc::c_int as libc::c_short,
                                -(173 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [3413 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                100 as libc::c_int as libc::c_short,
                                -(200 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [3072 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(200 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [3072 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(173 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(100 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [3755 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(173 as libc::c_int) as libc::c_short,
                                100 as libc::c_int as libc::c_short,
                                -(100 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [3755 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(200 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [4096 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(200 as libc::c_int) as libc::c_short,
                                100 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [4096 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(173 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                100 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [341 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(173 as libc::c_int) as libc::c_short,
                                100 as libc::c_int as libc::c_short,
                                100 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [341 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(200 as libc::c_int) as libc::c_short,
                                100 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(200 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(100 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                173 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [683 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(100 as libc::c_int) as libc::c_short,
                                100 as libc::c_int as libc::c_short,
                                173 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [683 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                200 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1024 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                100 as libc::c_int as libc::c_short,
                                200 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1024 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [100 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                173 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1365 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [100 as libc::c_int as libc::c_short,
                                100 as libc::c_int as libc::c_short,
                                173 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1365 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [173 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                100 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1707 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [173 as libc::c_int as libc::c_short,
                                100 as libc::c_int as libc::c_short,
                                100 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1707 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [200 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2048 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [200 as libc::c_int as libc::c_short,
                                100 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2048 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [173 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(100 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2389 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [173 as libc::c_int as libc::c_short,
                                100 as libc::c_int as libc::c_short,
                                -(100 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2389 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [100 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(173 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2731 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [100 as libc::c_int as libc::c_short,
                                100 as libc::c_int as libc::c_short,
                                -(173 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2731 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },}];
// Initialized in run_static_initializers
#[no_mangle]
pub static mut gDorfImpactDarkDL: [Gfx; 35] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 35];
static mut ovl_Boss_GanonTex_01C420: [u64_0; 256] =
    [0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x408090805020204 as libc::c_longlong as u64_0,
     0x505040201000104 as libc::c_longlong as u64_0,
     0x403020103050706 as libc::c_longlong as u64_0,
     0x404070805020306 as libc::c_longlong as u64_0,
     0x909060204060704 as libc::c_longlong as u64_0,
     0x302020304030100 as libc::c_longlong as u64_0,
     0x1020407080707 as libc::c_longlong as u64_0,
     0x605030202030201 as libc::c_longlong as u64_0,
     0x609080605060705 as libc::c_longlong as u64_0,
     0x40301000206090a as libc::c_longlong as u64_0,
     0x704010105050202 as libc::c_longlong as u64_0,
     0x91013140e08080c as libc::c_longlong as u64_0,
     0xb08050506050505 as libc::c_longlong as u64_0,
     0x405070a09040404 as libc::c_longlong as u64_0,
     0x70807050507090c as libc::c_longlong as u64_0,
     0xb09060605020001 as libc::c_longlong as u64_0,
     0x1050a0e13120a03 as libc::c_longlong as u64_0,
     0x10204060604 as libc::c_longlong as u64_0,
     0x201040504060c12 as libc::c_longlong as u64_0,
     0x1b2322160a03080b as libc::c_longlong as u64_0,
     0x8040101060a0a08 as libc::c_longlong as u64_0,
     0x7090c0a05050a10 as libc::c_longlong as u64_0,
     0x12100c080401050a as libc::c_longlong as u64_0,
     0x8090b0b07050401 as libc::c_longlong as u64_0,
     0x1414171815110a06 as libc::c_longlong as u64_0,
     0x403010202010103 as libc::c_longlong as u64_0,
     0x90c0f1111101215 as libc::c_longlong as u64_0,
     0x151008060c141d1b as libc::c_longlong as u64_0,
     0xf0509110f0b0908 as libc::c_longlong as u64_0,
     0xd0f12150d03080e as libc::c_longlong as u64_0,
     0x101212100b050303 as libc::c_longlong as u64_0,
     0x506070a0c0b1012 as libc::c_longlong as u64_0,
     0x211a120c0b0b1115 as libc::c_longlong as u64_0,
     0x15130f0d0a0a0804 as libc::c_longlong as u64_0,
     0xb1a110909070500 as libc::c_longlong as u64_0,
     0x2091721170a as libc::c_longlong as u64_0,
     0xa13141411090300 as libc::c_longlong as u64_0,
     0x7150f0300000002 as libc::c_longlong as u64_0,
     0xa110f0a07050202 as libc::c_longlong as u64_0,
     0x202060b10192227 as libc::c_longlong as u64_0,
     0xe0600030a11171b as libc::c_longlong as u64_0,
     0x1c1a17110b020d19 as libc::c_longlong as u64_0,
     0x2e3e442614090106 as libc::c_longlong as u64_0,
     0x50305090a08060d as libc::c_longlong as u64_0,
     0x16202727211e1d1a as libc::c_longlong as u64_0,
     0x1e20130b06020609 as libc::c_longlong as u64_0,
     0xe100b0302080808 as libc::c_longlong as u64_0,
     0xe0f0e1210111615 as libc::c_longlong as u64_0,
     0x103020104070a0b as libc::c_longlong as u64_0,
     0xc0d0c0d031f54ac as libc::c_longlong as u64_0,
     0xcfb189715a452e1c as libc::c_ulonglong,
     0x500010100000207 as libc::c_longlong as u64_0,
     0xd0d1b38464e6260 as libc::c_longlong as u64_0,
     0x564f42321e0a070b as libc::c_longlong as u64_0,
     0x60609111c272a2d as libc::c_longlong as u64_0,
     0x3938322a1e120602 as libc::c_longlong as u64_0,
     0x10001040403 as libc::c_longlong as u64_0,
     0x400082b70b6cca2 as libc::c_longlong as u64_0,
     0x7e71879196855d35 as libc::c_longlong as u64_0,
     0x190a030004060504 as libc::c_longlong as u64_0,
     0x132f527c93a0aeb2 as libc::c_longlong as u64_0,
     0xaca27b5139231410 as libc::c_ulonglong,
     0xe111e293b566573 as libc::c_longlong as u64_0,
     0x827f7360371b0c00 as libc::c_ulonglong,
     0x1404090d0f100708 as libc::c_longlong as u64_0,
     0x28588eb099681f08 as libc::c_longlong as u64_0,
     0x182c476c7c867f68 as libc::c_longlong as u64_0,
     0x45302828262f3245 as libc::c_longlong as u64_0,
     0x77a1bcd3e5f0f5e7 as libc::c_longlong as u64_0,
     0xd7c7a98876655246 as libc::c_ulonglong,
     0x2f2b3c506d97b1b7 as libc::c_longlong as u64_0,
     0xc0b197805e38291e as libc::c_ulonglong,
     0x4c312d1b17325378 as libc::c_longlong as u64_0,
     0x9ba5966420080000 as libc::c_ulonglong,
     0x300122a41474e4e as libc::c_longlong as u64_0,
     0x6166725e48536b99 as libc::c_longlong as u64_0,
     0xcfeef9fffeeee8e9 as libc::c_ulonglong,
     0xe8e5ddcec6a78579 as libc::c_ulonglong,
     0x7a8196b1d4eeebe1 as libc::c_longlong as u64_0,
     0xe0dfd9ceb7a48c69 as libc::c_ulonglong,
     0x7b514d52627c8e84 as libc::c_longlong as u64_0,
     0x733e13000113252a as libc::c_longlong as u64_0,
     0x2720110b00071d47 as libc::c_longlong as u64_0,
     0x5a565b626082b7de as libc::c_longlong as u64_0,
     0xf8fffff0ddd7e0f2 as libc::c_ulonglong,
     0xfafefef6e2d0d2df as libc::c_ulonglong,
     0xd9d8e9f0f2f3f5f6 as libc::c_ulonglong,
     0xfefffbfaefdbbf9c as libc::c_ulonglong,
     0xbdaba4a39d84512e as libc::c_ulonglong,
     0x140c142f5267756a as libc::c_longlong as u64_0,
     0x523b1d0a0d1b2b36 as libc::c_longlong as u64_0,
     0x43547097c3ecf9fa as libc::c_longlong as u64_0,
     0xf4e4d0c5cedae7f6 as libc::c_ulonglong,
     0xfdfef9edeceff4fb as libc::c_ulonglong,
     0xf7eee8e6dcd1d3de as libc::c_ulonglong,
     0xe9fbfff6f1eedecf as libc::c_ulonglong,
     0xeededab07b5a5049 as libc::c_ulonglong,
     0x4c557599a0a3a08d as libc::c_longlong as u64_0,
     0x725a473d50574e57 as libc::c_longlong as u64_0,
     0x739dcae1f2fffceb as libc::c_longlong as u64_0,
     0xcdbdc1c3c3cad2de as libc::c_ulonglong,
     0xedf4f6f7f6fefcf7 as libc::c_ulonglong,
     0xf3e9d8c7ab97a1b6 as libc::c_ulonglong,
     0xbcc1d0e1f5fdfcf4 as libc::c_ulonglong,
     0xf5f2dcc8bab09078 as libc::c_ulonglong,
     0x8899989ba4a28f7d as libc::c_ulonglong,
     0x7882878c92919cb8 as libc::c_longlong as u64_0,
     0xc8d6e7f1f8f1d5b1 as libc::c_ulonglong,
     0xa0a19f9fa0a2adc4 as libc::c_ulonglong,
     0xd7dfecf0ece9eeea as libc::c_ulonglong,
     0xe9dabba089766b6a as libc::c_ulonglong,
     0x6d8bb3cfebf7f4f4 as libc::c_longlong as u64_0,
     0xe0e9eff1e6d9d8d7 as libc::c_ulonglong,
     0xd1bdb4a78e726367 as libc::c_ulonglong,
     0x7890a4abbdcad8ed as libc::c_longlong as u64_0,
     0xf3f5f7f5eed2af93 as libc::c_ulonglong,
     0x86888f8f9cabaaa8 as libc::c_ulonglong,
     0xaea8989098b7c4b5 as libc::c_ulonglong,
     0xa696827666565158 as libc::c_ulonglong,
     0x5e72899db1c8d1da as libc::c_longlong as u64_0,
     0xc9edeff8fafef7ed as libc::c_ulonglong,
     0xe5d7c3a5735b647e as libc::c_ulonglong,
     0x90a3b8d6eaf1f7fc as libc::c_ulonglong,
     0xf9f1ebe6cea88678 as libc::c_ulonglong,
     0x7a858e9892888d93 as libc::c_longlong as u64_0,
     0x79524f6671716044 as libc::c_longlong as u64_0,
     0x42494a4f5350514b as libc::c_longlong as u64_0,
     0x433c42578098a2b0 as libc::c_longlong as u64_0,
     0xc0dee7ede7e2eaea as libc::c_ulonglong,
     0xeadab39697a0a8a1 as libc::c_ulonglong,
     0xa4c2e6f9fffefdf7 as libc::c_ulonglong,
     0xefe3d4bb9579808c as libc::c_ulonglong,
     0x959990818a9f9570 as libc::c_ulonglong,
     0x534344483727180a as libc::c_longlong as u64_0,
     0x10212b3a3f39322f as libc::c_longlong as u64_0,
     0x2432546a655c779e as libc::c_longlong as u64_0,
     0x9db2c2dbeae9f3fb as libc::c_ulonglong,
     0xe6d3d1e0e6e1d6d4 as libc::c_ulonglong,
     0xe7fefffdf8f4eee5 as libc::c_ulonglong,
     0xddccac9c999ca8af as libc::c_ulonglong,
     0xa48d7674827f6757 as libc::c_ulonglong,
     0x4e4938220f030306 as libc::c_longlong as u64_0,
     0x111c211f170b0b19 as libc::c_longlong as u64_0,
     0x33424a4a494d6f8a as libc::c_longlong as u64_0,
     0x7a8e9eadb3b6bfc0 as libc::c_longlong as u64_0,
     0xc3cfe8fdf9edf6fd as libc::c_ulonglong,
     0xfffdf8ebdcd9d2bc as libc::c_ulonglong,
     0xae9f8d878d949180 as libc::c_ulonglong,
     0x6660656365696260 as libc::c_longlong as u64_0,
     0x5f4b260d1814121c as libc::c_longlong as u64_0,
     0x130c04000010212d as libc::c_longlong as u64_0,
     0x3634343e5c737571 as libc::c_longlong as u64_0,
     0x5f6e656468636d83 as libc::c_longlong as u64_0,
     0xa8d8eaebe7e4edfe as libc::c_ulonglong,
     0xfae6cdb7a0978973 as libc::c_ulonglong,
     0x6b645e676d605041 as libc::c_longlong as u64_0,
     0x31303639302b384b as libc::c_longlong as u64_0,
     0x433e4a526b50341b as libc::c_longlong as u64_0,
     0x200123148677e6c as libc::c_longlong as u64_0,
     0x4a28334f61665b59 as libc::c_longlong as u64_0,
     0x2e332b2629305486 as libc::c_longlong as u64_0,
     0xacc3cecae3f9f4df as libc::c_ulonglong,
     0xc2997c674f484437 as libc::c_ulonglong,
     0x343a4146412d1e12 as libc::c_longlong as u64_0,
     0x90a09000009141a as libc::c_longlong as u64_0,
     0x1443555f616c5c4c as libc::c_longlong as u64_0,
     0x60788ba3a19f6633 as libc::c_longlong as u64_0,
     0x1c2630302d282427 as libc::c_longlong as u64_0,
     0x50803070f1f3246 as libc::c_longlong as u64_0,
     0x5164829fbdc0ad95 as libc::c_longlong as u64_0,
     0x774d312217191512 as libc::c_longlong as u64_0,
     0x171f1e1e190d0502 as libc::c_longlong as u64_0,
     0x203030103 as libc::c_longlong as u64_0,
     0x7041a3a4c556f96 as libc::c_longlong as u64_0,
     0xc9ceaa743f100d13 as libc::c_ulonglong,
     0x17140e0805060103 as libc::c_longlong as u64_0,
     0x30709080804080e as libc::c_longlong as u64_0,
     0xe24455c6364554a as libc::c_longlong as u64_0,
     0x3113080b0805070a as libc::c_longlong as u64_0,
     0x1017130b06010001 as libc::c_longlong as u64_0,
     0x3080a0905040404 as libc::c_longlong as u64_0,
     0x40402080b275572 as libc::c_longlong as u64_0,
     0x6f521c0d0803040a as libc::c_longlong as u64_0,
     0x90908070b0b0701 as libc::c_longlong as u64_0,
     0x10090b0d0e0e0905 as libc::c_longlong as u64_0,
     0xa121e1f3039290f as libc::c_longlong as u64_0,
     0x301080c06010715 as libc::c_longlong as u64_0,
     0x18140f0b090a0a07 as libc::c_longlong as u64_0,
     0xa0a050303040606 as libc::c_longlong as u64_0,
     0x6090b0b080b1b0f as libc::c_longlong as u64_0,
     0xb09020005102025 as libc::c_longlong as u64_0,
     0x201b1a170a02060e as libc::c_longlong as u64_0,
     0xf090b0e11110a05 as libc::c_longlong as u64_0,
     0x1030e190f040009 as libc::c_longlong as u64_0,
     0x13181b1814131e23 as libc::c_longlong as u64_0,
     0x190e0d1419180d06 as libc::c_longlong as u64_0,
     0x10001070a0a0806 as libc::c_longlong as u64_0,
     0xb121a1e19171b14 as libc::c_longlong as u64_0,
     0x50105122631271d as libc::c_longlong as u64_0,
     0x1a1409020b181b15 as libc::c_longlong as u64_0,
     0x7050d160f060505 as libc::c_longlong as u64_0,
     0x70806020a191d1e as libc::c_longlong as u64_0,
     0x2327190d1829271c as libc::c_longlong as u64_0,
     0xd030d140d050100 as libc::c_longlong as u64_0,
     0x40d12110b040106 as libc::c_longlong as u64_0,
     0xc120f0b11120908 as libc::c_longlong as u64_0,
     0xb0a11130e090a0b as libc::c_longlong as u64_0,
     0xb100f0e0d0f0c0b as libc::c_longlong as u64_0,
     0xe1c1f1a1208070d as libc::c_longlong as u64_0,
     0x101114191e222320 as libc::c_longlong as u64_0,
     0x1d171d22241e140b as libc::c_longlong as u64_0,
     0x90b0a0904020913 as libc::c_longlong as u64_0,
     0x1a1b140a06080807 as libc::c_longlong as u64_0,
     0x503060603071015 as libc::c_longlong as u64_0,
     0x16140c0403030910 as libc::c_longlong as u64_0,
     0x14120a0301010306 as libc::c_longlong as u64_0,
     0xe11110e06050909 as libc::c_longlong as u64_0,
     0x90b101a1d1c1919 as libc::c_longlong as u64_0,
     0x1c1e170f08060709 as libc::c_longlong as u64_0,
     0x10130d05080e171b as libc::c_longlong as u64_0,
     0x160a040203050608 as libc::c_longlong as u64_0,
     0xf12110f0d0b0d10 as libc::c_longlong as u64_0,
     0xc09070b0d0c0b09 as libc::c_longlong as u64_0,
     0x605060704000004 as libc::c_longlong as u64_0,
     0x60b0b0b0b080402 as libc::c_longlong as u64_0,
     0x40a12130d080705 as libc::c_longlong as u64_0,
     0x40100000107090a as libc::c_longlong as u64_0,
     0x7040102060a0603 as libc::c_longlong as u64_0,
     0x1010103040405 as libc::c_longlong as u64_0,
     0x70b0d0a09050505 as libc::c_longlong as u64_0,
     0x907070907060302 as libc::c_longlong as u64_0,
     0x4070a0a07060404 as libc::c_longlong as u64_0,
     0x504050503010102 as libc::c_longlong as u64_0,
     0x70b090705040200 as libc::c_longlong as u64_0,
     0x206090b0a0804 as libc::c_longlong as u64_0,
     0x10101010203070a as libc::c_longlong as u64_0,
     0x804050609090501 as libc::c_longlong as u64_0,
     0x3040709080b1111 as libc::c_longlong as u64_0,
     0xb06040202020202 as libc::c_longlong as u64_0,
     0x405060708080705 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0];
static mut ovl_Boss_GanonVtx_01CC20: [Vtx; 26] =
    [Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1299 as libc::c_int as libc::c_short,
                                -(125 as libc::c_int) as libc::c_short,
                                -(750 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [7168 as libc::c_int as libc::c_short,
                                1024 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1299 as libc::c_int as libc::c_short,
                                375 as libc::c_int as libc::c_short,
                                -(750 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [7168 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                375 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [6144 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                -(125 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [6144 as libc::c_int as libc::c_short,
                                1024 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [750 as libc::c_int as libc::c_short,
                                -(125 as libc::c_int) as libc::c_short,
                                -(1299 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [8192 as libc::c_int as libc::c_short,
                                1024 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [750 as libc::c_int as libc::c_short,
                                375 as libc::c_int as libc::c_short,
                                -(1299 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [8192 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                -(125 as libc::c_int) as libc::c_short,
                                -(1500 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [9216 as libc::c_int as libc::c_short,
                                1024 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                375 as libc::c_int as libc::c_short,
                                -(1500 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [9216 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(750 as libc::c_int) as libc::c_short,
                                -(125 as libc::c_int) as libc::c_short,
                                -(1299 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [10240 as libc::c_int as libc::c_short,
                                1024 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(750 as libc::c_int) as libc::c_short,
                                375 as libc::c_int as libc::c_short,
                                -(1299 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [10240 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(1299 as libc::c_int) as libc::c_short,
                                -(125 as libc::c_int) as libc::c_short,
                                -(750 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [11264 as libc::c_int as libc::c_short,
                                1024 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(1299 as libc::c_int) as libc::c_short,
                                375 as libc::c_int as libc::c_short,
                                -(750 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [11264 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(1500 as libc::c_int) as libc::c_short,
                                -(125 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [12288 as libc::c_int as libc::c_short,
                                1024 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(1500 as libc::c_int) as libc::c_short,
                                375 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [12288 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(1299 as libc::c_int) as libc::c_short,
                                -(125 as libc::c_int) as libc::c_short,
                                750 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1024 as libc::c_int as libc::c_short,
                                1024 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(1299 as libc::c_int) as libc::c_short,
                                375 as libc::c_int as libc::c_short,
                                750 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1024 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(1500 as libc::c_int) as libc::c_short,
                                375 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(1500 as libc::c_int) as libc::c_short,
                                -(125 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                1024 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(750 as libc::c_int) as libc::c_short,
                                -(125 as libc::c_int) as libc::c_short,
                                1299 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2048 as libc::c_int as libc::c_short,
                                1024 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(750 as libc::c_int) as libc::c_short,
                                375 as libc::c_int as libc::c_short,
                                1299 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2048 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                -(125 as libc::c_int) as libc::c_short,
                                1500 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [3072 as libc::c_int as libc::c_short,
                                1024 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                375 as libc::c_int as libc::c_short,
                                1500 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [3072 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [750 as libc::c_int as libc::c_short,
                                -(125 as libc::c_int) as libc::c_short,
                                1299 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [4096 as libc::c_int as libc::c_short,
                                1024 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [750 as libc::c_int as libc::c_short,
                                375 as libc::c_int as libc::c_short,
                                1299 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [4096 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1299 as libc::c_int as libc::c_short,
                                -(125 as libc::c_int) as libc::c_short,
                                750 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [5120 as libc::c_int as libc::c_short,
                                1024 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1299 as libc::c_int as libc::c_short,
                                375 as libc::c_int as libc::c_short,
                                750 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [5120 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },}];
// Initialized in run_static_initializers
#[no_mangle]
pub static mut gDorfShockwaveDL: [Gfx; 31] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 31];
static mut ovl_Boss_GanonTex_01AFB0: [u64_0; 256] =
    [0xabbacdffedca9877 as libc::c_ulonglong,
     0x8abcdefedccbaaa9 as libc::c_ulonglong,
     0xababcfffedcba977 as libc::c_ulonglong,
     0x89acdefdcdddb988 as libc::c_ulonglong,
     0xaccbceffedca9777 as libc::c_ulonglong,
     0x8abceffecccbaaa9 as libc::c_ulonglong,
     0xabbbdfffedcba977 as libc::c_ulonglong,
     0x8abdeffedeeda888 as libc::c_ulonglong,
     0xaddcdefffeca8778 as libc::c_ulonglong,
     0x9acdfffdbbba9ab9 as libc::c_ulonglong,
     0xabbcdfffdcba9878 as libc::c_ulonglong,
     0x9acdffffeefeb988 as libc::c_ulonglong,
     0xadeddefffeca8778 as libc::c_ulonglong,
     0xabcefffdbaa99aa9 as libc::c_ulonglong,
     0xabbcdffedcba8878 as libc::c_ulonglong,
     0xabdefffffffec999 as libc::c_ulonglong,
     0xadeeeeffffdb9889 as libc::c_ulonglong,
     0xacdffffcbaa989a9 as libc::c_ulonglong,
     0xabbcdffecbb98789 as libc::c_ulonglong,
     0xacdffffffffec999 as libc::c_ulonglong,
     0xadefeffeffdba889 as libc::c_ulonglong,
     0xbceffffdbaa99aaa as libc::c_ulonglong,
     0xabcdeffdccb9778a as libc::c_ulonglong,
     0xbdefffffffeeda99 as libc::c_ulonglong,
     0xbdefffeeedcba99a as libc::c_ulonglong,
     0xcdfffffecbbbbbcc as libc::c_ulonglong,
     0xccdeefedccb9789a as libc::c_ulonglong,
     0xcdfffffffededa9a as libc::c_ulonglong,
     0xbcefffedccbaa9ab as libc::c_ulonglong,
     0xceffffffedcccccc as libc::c_ulonglong,
     0xdddeffedddc988ab as libc::c_ulonglong,
     0xdefffffedddeeb9a as libc::c_ulonglong,
     0xbcdfffecba99aabc as libc::c_ulonglong,
     0xdffffffffeeedddd as libc::c_ulonglong,
     0xdeeeffddeeda89ac as libc::c_ulonglong,
     0xdfffffedccdfebaa as libc::c_ulonglong,
     0xbcefffeca889abcd as libc::c_ulonglong,
     0xeffffffffffedddd as libc::c_ulonglong,
     0xeffffeddffdb9abd as libc::c_ulonglong,
     0xeffffffdddeeecbb as libc::c_ulonglong,
     0xcdefffeba889bcdd as libc::c_ulonglong,
     0xfffffffffffeccdd as libc::c_ulonglong,
     0xeffffeddffecbbcd as libc::c_ulonglong,
     0xfffffffeedeeedcc as libc::c_ulonglong,
     0xdeefffdba99acdee as libc::c_ulonglong,
     0xfffffffffffeccde as libc::c_ulonglong,
     0xfffffeddfffeccde as libc::c_ulonglong,
     0xfffffffffeeeeddd as libc::c_ulonglong,
     0xeefffecbbbabdeff as libc::c_ulonglong,
     0xfffffffffffdccee as libc::c_ulonglong,
     0xfffffeddefffdcde as libc::c_ulonglong,
     0xfffffffffeeeeddd as libc::c_ulonglong,
     0xfffffecbccbcefff as libc::c_ulonglong,
     0xffffffffffedcdef as libc::c_ulonglong,
     0xffffeddcdfffedef as libc::c_ulonglong,
     0xeffffffffedddccd as libc::c_ulonglong,
     0xfffffecbcccdffff as libc::c_ulonglong,
     0xffeefffffeeddeff as libc::c_ulonglong,
     0xffffedccceffeeff as libc::c_ulonglong,
     0xedeffffffecccbbd as libc::c_ulonglong,
     0xffffffdcccceffff as libc::c_ulonglong,
     0xffedeffffeddeeff as libc::c_ulonglong,
     0xffffecbbcefffeff as libc::c_ulonglong,
     0xdddefffffdcbbaac as libc::c_ulonglong,
     0xffffffecccdfffff as libc::c_ulonglong,
     0xffdddffffedeefff as libc::c_ulonglong,
     0xffffdbbbceffffff as libc::c_ulonglong,
     0xdcceffffedbbbaac as libc::c_ulonglong,
     0xfffffffdccdfffff as libc::c_ulonglong,
     0xfedcdffffddefeef as libc::c_ulonglong,
     0xffffebaacefffffe as libc::c_ulonglong,
     0xcccefffeedbbbaac as libc::c_ulonglong,
     0xfffffffecdefffff as libc::c_ulonglong,
     0xedccdffffddeedce as libc::c_ulonglong,
     0xffffecbbcefffffd as libc::c_ulonglong,
     0xccdfffeeedcbbaad as libc::c_ulonglong,
     0xfffeffffddfffffe as libc::c_ulonglong,
     0xdbbcefffedcddcbd as libc::c_ulonglong,
     0xfffffdcbcfffffed as libc::c_ulonglong,
     0xcdffffeeeedcb9ae as libc::c_ulonglong,
     0xfffddfffeefffeed as libc::c_ulonglong,
     0xbaacefffecbcca9c as libc::c_ulonglong,
     0xfffffedcdffffedc as libc::c_ulonglong,
     0xcefffeddeedcb9bf as libc::c_ulonglong,
     0xffecdefffffffedc as libc::c_ulonglong,
     0xaaadfffedbaaa99b as libc::c_ulonglong,
     0xeffffffeefffedcb as libc::c_ulonglong,
     0xceffeeddeedca9cf as libc::c_ulonglong,
     0xffdcddfffffffedc as libc::c_ulonglong,
     0xbabdfeedcb99999a as libc::c_ulonglong,
     0xdfffffffffffecba as libc::c_ulonglong,
     0xbeffedccdddca9cf as libc::c_ulonglong,
     0xffcceeeffffeeecb as libc::c_ulonglong,
     0xcbceeddcba9999aa as libc::c_ulonglong,
     0xcffffffffffedcba as libc::c_ulonglong,
     0xaeffedcccccba9df as libc::c_ulonglong,
     0xfdabeeefffeeedbb as libc::c_ulonglong,
     0xccdeedcbba9999ba as libc::c_ulonglong,
     0xbeffffffffeedba9 as libc::c_ulonglong,
     0xadffeddbbbbba9cf as libc::c_ulonglong,
     0xec9beeefffeddcab as libc::c_ulonglong,
     0xcddeedcbaa9999ab as libc::c_ulonglong,
     0xadffffffffedcba9 as libc::c_ulonglong,
     0x9beedddcaabcbabe as libc::c_ulonglong,
     0xca8adeffffedcbaa as libc::c_ulonglong,
     0xbccdddcbaaab99aa as libc::c_ulonglong,
     0xadfffeefffddca98 as libc::c_ulonglong,
     0x8adddddcbabdcbac as libc::c_ulonglong,
     0xba89ceffffedcba9 as libc::c_ulonglong,
     0xaabccddbaacdb99a as libc::c_ulonglong,
     0x9cfffdddfedcba98 as libc::c_ulonglong,
     0x79bcccddccceecaa as libc::c_longlong as u64_0,
     0xaa88adffffeddcb9 as libc::c_ulonglong,
     0x99abcddcabefc989 as libc::c_ulonglong,
     0x9cfffdbceecba987 as libc::c_ulonglong,
     0x78acccceeddffeb9 as libc::c_longlong as u64_0,
     0x9a879dfffffeedba as libc::c_ulonglong,
     0x889aacedbdffea89 as libc::c_ulonglong,
     0x9cfffdaadedbb987 as libc::c_ulonglong,
     0x78accccefedeffc9 as libc::c_longlong as u64_0,
     0xaa878cfffffeeeca as libc::c_ulonglong,
     0x889aaceedffffb99 as libc::c_ulonglong,
     0x9bfffdaacedcca98 as libc::c_ulonglong,
     0x78acdddefdcdeec9 as libc::c_longlong as u64_0,
     0xaa888cfffffeffdb as libc::c_ulonglong,
     0x99baaceefffffb99 as libc::c_ulonglong,
     0x9beffd99ceeddca8 as libc::c_ulonglong,
     0x78acddeedcbbccb9 as libc::c_longlong as u64_0,
     0xba888cffeeeeffdb as libc::c_ulonglong,
     0x9accbdeffffffc99 as libc::c_ulonglong,
     0x9adffc9aceeeedc9 as libc::c_ulonglong,
     0x88aceefeca999aa9 as libc::c_ulonglong,
     0xba889cffeeeeffeb as libc::c_ulonglong,
     0x9bddceeffffffc89 as libc::c_ulonglong,
     0x99cffc9adefffeca as libc::c_ulonglong,
     0x99bceffea8778889 as libc::c_ulonglong,
     0xba888cffeeeeffeb as libc::c_ulonglong,
     0x9beedefffffffc88 as libc::c_ulonglong,
     0x88bddbabdffffedb as libc::c_ulonglong,
     0x9abceffea778878a as libc::c_ulonglong,
     0xa9888bffdeeefffc as libc::c_ulonglong,
     0xacefeffffffffc98 as libc::c_ulonglong,
     0x88abcbbbdeffedcb as libc::c_ulonglong,
     0xbbbceffea889a889 as libc::c_ulonglong,
     0x99889befeeeefffd as libc::c_ulonglong,
     0xbceffffffffffc98 as libc::c_ulonglong,
     0x789abccceeffeccc as libc::c_longlong as u64_0,
     0xccccefffb99bc989 as libc::c_ulonglong,
     0x88999befeefffffd as libc::c_ulonglong,
     0xbceffffffffffc88 as libc::c_ulonglong,
     0x7889adccdefedccd as libc::c_longlong as u64_0,
     0xddcdefffcabeda88 as libc::c_ulonglong,
     0x8899abefeefffffe as libc::c_ulonglong,
     0xcceffffffffffc88 as libc::c_ulonglong,
     0x8889adddeefeccde as libc::c_ulonglong,
     0xfeddefffdbdffb88 as libc::c_ulonglong,
     0x998abcdeeeeffffe as libc::c_ulonglong,
     0xccdffffffffffb88 as libc::c_ulonglong,
     0x8989acddeefeccef as libc::c_ulonglong,
     0xfedeeeffedfffcaa as libc::c_ulonglong,
     0xb99accdeeeeffffe as libc::c_ulonglong,
     0xdcdffffffffffb89 as libc::c_ulonglong,
     0x9a99acddeffecdff as libc::c_ulonglong,
     0xffeeeeeffefffecb as libc::c_ulonglong,
     0xca9bccdeeeeffffe as libc::c_ulonglong,
     0xddeffffffffffcaa as libc::c_ulonglong,
     0xbbaaacddeffecdff as libc::c_ulonglong,
     0xffefedefffffffed as libc::c_ulonglong,
     0xdbacccdeeffffffe as libc::c_ulonglong,
     0xddeffffffffffedd as libc::c_ulonglong,
     0xcbaabcedefffcdff as libc::c_ulonglong,
     0xfffffeffffffffff as libc::c_ulonglong,
     0xeccccceefffffffe as libc::c_ulonglong,
     0xdeffffeffffffffe as libc::c_ulonglong,
     0xdcaabceeefffccff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xedddcceffffffffe as libc::c_ulonglong,
     0xdeffffdeffffffff as libc::c_ulonglong,
     0xebaabdeeffffdcef as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xfeeedceffffffffe as libc::c_ulonglong,
     0xeefffeceffffffff as libc::c_ulonglong,
     0xebabceeeffffddef as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffeeddefffffffff as libc::c_ulonglong,
     0xefffecbcffffffff as libc::c_ulonglong,
     0xdbbcdeefffffedef as libc::c_ulonglong,
     0xfffeefffffffffff as libc::c_ulonglong,
     0xfeedddefffffffff as libc::c_ulonglong,
     0xfeedcb9befffffff as libc::c_ulonglong,
     0xdbcdddefffffffff as libc::c_ulonglong,
     0xfffedeffeeffffff as libc::c_ulonglong,
     0xeddcccdfffffffff as libc::c_ulonglong,
     0xfedca98adfffffee as libc::c_ulonglong,
     0xcbdedddfffffffff as libc::c_ulonglong,
     0xfffdbcffddefffff as libc::c_ulonglong,
     0xdcbbbbceffffffff as libc::c_ulonglong,
     0xedca9889cfffffee as libc::c_ulonglong,
     0xcbdedcdfffffffff as libc::c_ulonglong,
     0xfffcabdedcdffffe as libc::c_ulonglong,
     0xcba999beffffffff as libc::c_ulonglong,
     0xedba8778beffffee as libc::c_ulonglong,
     0xccdedcdfffffffff as libc::c_ulonglong,
     0xfffc9acdccdffffd as libc::c_ulonglong,
     0xba9999adfffffffe as libc::c_ulonglong,
     0xdcb98779befffeee as libc::c_ulonglong,
     0xdcdeddeffffffffe as libc::c_ulonglong,
     0xfffb89cdddeffeec as libc::c_ulonglong,
     0xba988abcfffffffe as libc::c_ulonglong,
     0xdca98789befffede as libc::c_ulonglong,
     0xecdeeefffffffffe as libc::c_ulonglong,
     0xefeb89bddeefeddb as libc::c_ulonglong,
     0xaa889abdffffffed as libc::c_ulonglong,
     0xcba9878abefffede as libc::c_ulonglong,
     0xeddeffffffffffed as libc::c_ulonglong,
     0xdeda89bdeeffedcb as libc::c_ulonglong,
     0xa9879bceffffffed as libc::c_ulonglong,
     0xcba9989aceffeede as libc::c_ulonglong,
     0xeedfffffffffffdc as libc::c_ulonglong,
     0xbcb989cefffedcba as libc::c_ulonglong,
     0x99879beffffffedc as libc::c_ulonglong,
     0xcbaaa9abdefeddde as libc::c_ulonglong,
     0xeeeffffffffffedb as libc::c_ulonglong,
     0xaaa889cffffedbba as libc::c_ulonglong,
     0x98779cfffffffecb as libc::c_ulonglong,
     0xbbaabaacdfeddcde as libc::c_ulonglong,
     0xeffffffffffffdca as libc::c_ulonglong,
     0x98888acffffecbaa as libc::c_ulonglong,
     0x87779cffffffedba as libc::c_ulonglong,
     0xbaabbbbdefedcccd as libc::c_ulonglong,
     0xefffffffffffedba as libc::c_ulonglong,
     0x88889adfffedcbba as libc::c_ulonglong,
     0x87789dffffffdcba as libc::c_ulonglong,
     0xaaabcbcdffedbbbc as libc::c_ulonglong,
     0xefffffffffffdcb9 as libc::c_ulonglong,
     0x8788abdffeedccb9 as libc::c_ulonglong,
     0x8788adfffffedba9 as libc::c_ulonglong,
     0x9abbccdeffecbaab as libc::c_ulonglong,
     0xeedefffffffedba8 as libc::c_ulonglong,
     0x7789aceffeeddcb9 as libc::c_longlong as u64_0,
     0x8789adfffffdcb98 as libc::c_ulonglong,
     0x9abbccdfffdcba9a as libc::c_ulonglong,
     0xddccfffffffeca98 as libc::c_ulonglong,
     0x778abdefeddeedb8 as libc::c_longlong as u64_0,
     0x8889adffffedba88 as libc::c_ulonglong,
     0x89bbcceffedcba9a as libc::c_ulonglong,
     0xccabdffffffdba88 as libc::c_ulonglong,
     0x779acdeedddeeda8 as libc::c_longlong as u64_0,
     0x8999bdffffdcb987 as libc::c_ulonglong,
     0x89bbcdeffecbaa99 as libc::c_ulonglong,
     0xbbaadffffeedb987 as libc::c_ulonglong,
     0x789acdeedccddc98 as libc::c_longlong as u64_0,
     0x9aaabdfffecba877 as libc::c_ulonglong,
     0x89bbceffedcbaa99 as libc::c_ulonglong,
     0xbbaacffffedcb987 as libc::c_ulonglong,
     0x78abceedccddca88 as libc::c_longlong as u64_0];
// Initialized in run_static_initializers
#[no_mangle]
pub static mut gDorfDotDL: [Gfx; 25] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 25];
static mut ovl_Boss_GanonTex_01A7B0: [u64_0; 256] =
    [0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x1 as libc::c_int as u64_0,
     0x1000000000000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x2 as libc::c_int as u64_0,
     0x500070009000a as libc::c_longlong as u64_0,
     0xa000900070006 as libc::c_longlong as u64_0,
     0x3000000000000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x20007000b as libc::c_longlong as u64_0,
     0x10001400170019 as libc::c_longlong as u64_0,
     0x19001700140011 as libc::c_longlong as u64_0,
     0xc000800030000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1 as libc::c_int as u64_0,
     0x5000b0012001a as libc::c_longlong as u64_0,
     0x210028002e0030 as libc::c_longlong as u64_0,
     0x30002e00290022 as libc::c_longlong as u64_0,
     0x1b0013000c0007 as libc::c_longlong as u64_0,
     0x1000000000000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x10006 as libc::c_int as u64_0,
     0xd00160021002e as libc::c_longlong as u64_0,
     0x3a06440c4a104f as libc::c_longlong as u64_0,
     0x10500d4c0745003b as libc::c_longlong as u64_0,
     0x30002400190010 as libc::c_longlong as u64_0,
     0x8000200000000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x6000d as libc::c_int as u64_0,
     0x1a002700380748 as libc::c_longlong as u64_0,
     0x1a584265676f7c75 as libc::c_longlong as u64_0,
     0x7d756b7049671d5a as libc::c_longlong as u64_0,
     0xa4c003b002b001d as libc::c_longlong as u64_0,
     0x12000900030000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x5000d0019 as libc::c_longlong as u64_0,
     0x29003c13514d67 as libc::c_longlong as u64_0,
     0x977bd38bea96ef9b as libc::c_ulonglong,
     0xef9cec97dc8da17d as libc::c_ulonglong,
     0x5e6c1b5701430030 as libc::c_longlong as u64_0,
     0x1f001200090002 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x2000b00160027 as libc::c_longlong as u64_0,
     0x3c18546c6fc387 as libc::c_longlong as u64_0,
     0xf09efdafffbcffc1 as libc::c_ulonglong,
     0xffc2ffbdffb2f5a1 as libc::c_ulonglong,
     0xda8d8376265d0146 as libc::c_ulonglong,
     0x30001e00110007 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x7001200210038 as libc::c_longlong as u64_0,
     0x1251696ed48cfaa6 as libc::c_longlong as u64_0,
     0xffbeffcfffdbffe0 as libc::c_ulonglong,
     0xffe1ffdcffd2ffc2 as libc::c_ulonglong,
     0xffade3958d79255d as libc::c_ulonglong,
     0x143002b001a000c as libc::c_longlong as u64_0,
     0x3000000000000 as libc::c_longlong as u64_0,
     0x3 as libc::c_int as u64_0,
     0xb001a002e0648 as libc::c_longlong as u64_0,
     0x4a66c287faa6ffc2 as libc::c_longlong as u64_0,
     0xffd8ffe8fff2fff7 as libc::c_ulonglong,
     0xfff7fff4ffebffdd as libc::c_ulonglong,
     0xffcaffb0e2947e75 as libc::c_ulonglong,
     0x1756003a00240012 as libc::c_longlong as u64_0,
     0x7000000000000 as libc::c_longlong as u64_0,
     0x6 as libc::c_int as u64_0,
     0x110021003a1b58 as libc::c_longlong as u64_0,
     0x967bf09effbeffd8 as libc::c_ulonglong,
     0xffecfffbffffffff as libc::c_ulonglong,
     0xfffffffffffdfff2 as libc::c_ulonglong,
     0xffe0ffc8fdabcd8a as libc::c_ulonglong,
     0x4b670747002c0017 as libc::c_longlong as u64_0,
     0xa000100000000 as libc::c_longlong as u64_0,
     0x8 as libc::c_int as u64_0,
     0x15002906444566 as libc::c_longlong as u64_0,
     0xd48bfdafffcfffe8 as libc::c_ulonglong,
     0xfffbffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xfff0ffd9ffbded99 as libc::c_ulonglong,
     0x807611520033001c as libc::c_ulonglong,
     0xc000200000000 as libc::c_longlong as u64_0,
     0x10009 as libc::c_int as u64_0,
     0x17002f0d4c6b70 as libc::c_longlong as u64_0,
     0xeb97ffbcffdbfff3 as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xfff8ffe5ffc8f6a5 as libc::c_ulonglong,
     0xa47f17590039001f as libc::c_ulonglong,
     0xd000300000000 as libc::c_longlong as u64_0,
     0x1000a as libc::c_int as u64_0,
     0x1a003111518176 as libc::c_longlong as u64_0,
     0xf09cffc2ffe1fff8 as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xfffeffeaffcef9ab as libc::c_ulonglong,
     0xb8841d5d013b0020 as libc::c_ulonglong,
     0xf000300000000 as libc::c_longlong as u64_0,
     0x1000a as libc::c_int as u64_0,
     0x1a003211518577 as libc::c_longlong as u64_0,
     0xf19effc3ffe2fff8 as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffebffcef9ab as libc::c_ulonglong,
     0xba841d5d013b0020 as libc::c_ulonglong,
     0xf000300000000 as libc::c_longlong as u64_0,
     0x10009 as libc::c_int as u64_0,
     0x19002f0f4e7572 as libc::c_longlong as u64_0,
     0xee99ffbfffdefff6 as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xfffdffe8ffcbf7a8 as libc::c_ulonglong,
     0xad81195a0039001e as libc::c_ulonglong,
     0xd000300000000 as libc::c_longlong as u64_0,
     0x8 as libc::c_int as u64_0,
     0x15002a0947556b as libc::c_longlong as u64_0,
     0xe290ffb6ffd6ffef as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xfff6ffe1ffc3f2a0 as libc::c_ulonglong,
     0x8f7913530033001b as libc::c_ulonglong,
     0xb000200000000 as libc::c_longlong as u64_0,
     0x6 as libc::c_int as u64_0,
     0x120025013e285e as libc::c_longlong as u64_0,
     0xb683f9a8ffc8ffe2 as libc::c_ulonglong,
     0xfff5ffffffffffff as libc::c_ulonglong,
     0xfffffffffffffffc as libc::c_ulonglong,
     0xffecffd5ffb7e494 as libc::c_ulonglong,
     0x636e0c4a002e0017 as libc::c_longlong as u64_0,
     0x9000100000000 as libc::c_longlong as u64_0,
     0x3 as libc::c_int as u64_0,
     0xd001d00331051 as libc::c_longlong as u64_0,
     0x7472e495ffb5ffd1 as libc::c_longlong as u64_0,
     0xffe5fff4fffcffff as libc::c_ulonglong,
     0xfffffffffff8ffec as libc::c_ulonglong,
     0xffdcffc3f9a5b483 as libc::c_ulonglong,
     0x2d5f023f00260012 as libc::c_longlong as u64_0,
     0x7000000000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x9001500280140 as libc::c_longlong as u64_0,
     0x275d9d7ded9cffb8 as libc::c_longlong as u64_0,
     0xffceffdeffe9ffef as libc::c_ulonglong,
     0xffefffebffe3ffd6 as libc::c_ulonglong,
     0xffc4ffacdc8e6a6f as libc::c_ulonglong,
     0xe4f0033001d000d as libc::c_longlong as u64_0,
     0x3000000000000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0x5000f001d0031 as libc::c_longlong as u64_0,
     0x6494264a981ec9a as libc::c_longlong as u64_0,
     0xffb2ffc2ffcdffd3 as libc::c_ulonglong,
     0xffd4ffcfffc7ffb9 as libc::c_ulonglong,
     0xf9a6dc8f80751c58 as libc::c_ulonglong,
     0x3d002700150009 as libc::c_longlong as u64_0,
     0x1000000000000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0x1000800130021 as libc::c_longlong as u64_0,
     0x34094c3d63967b as libc::c_longlong as u64_0,
     0xdf8ff4a0faabfdb0 as libc::c_ulonglong,
     0xfdb2faadf5a3e796 as libc::c_ulonglong,
     0xb7846b6f1c580042 as libc::c_ulonglong,
     0x2c001b000d0005 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x3000a0015 as libc::c_longlong as u64_0,
     0x22003404471f5a as libc::c_longlong as u64_0,
     0x606d977bbe85d38a as libc::c_longlong as u64_0,
     0xd68bc286a07d7071 as libc::c_ulonglong,
     0x36621050003e002c as libc::c_longlong as u64_0,
     0x1d001100070001 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x3000b as libc::c_int as u64_0,
     0x140020002f003d as libc::c_longlong as u64_0,
     0xb4a1657245e3463 as libc::c_longlong as u64_0,
     0x3563255e17580e4e as libc::c_longlong as u64_0,
     0x44200340027001b as libc::c_longlong as u64_0,
     0x10000800020000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x3 as libc::c_int as u64_0,
     0xa0012001b0025 as libc::c_longlong as u64_0,
     0x2f0036013d043f as libc::c_longlong as u64_0,
     0x43f013d00380030 as libc::c_longlong as u64_0,
     0x27001e0015000d as libc::c_longlong as u64_0,
     0x7000100000000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x20007000c0013 as libc::c_longlong as u64_0,
     0x19001e00220024 as libc::c_longlong as u64_0,
     0x240021001e001a as libc::c_longlong as u64_0,
     0x14000f00090005 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x30007 as libc::c_int as u64_0,
     0xa000d00100011 as libc::c_longlong as u64_0,
     0x110010000d000b as libc::c_longlong as u64_0,
     0x8000500010000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x2000300050006 as libc::c_longlong as u64_0,
     0x5000500030002 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0];
// Initialized in run_static_initializers
#[no_mangle]
pub static mut gDorfBigMagicBGCircleDL: [Gfx; 21] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 21];
static mut ovl_Boss_GanonTex_01B7B0: [u64_0; 256] =
    [0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x1000 as libc::c_int as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1000 as libc::c_int as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1000 as libc::c_int as u64_0,
     0x1200000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x2001 as libc::c_int as u64_0,
     0x2300000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x12001 as libc::c_int as u64_0,
     0x2410000000000010 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x13012 as libc::c_int as u64_0,
     0x3410000000000010 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x13123 as libc::c_int as u64_0,
     0x4521100000010011 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x10 as libc::c_int as u64_0, 0x14134 as libc::c_int as u64_0,
     0x5631100000010021 as libc::c_longlong as u64_0,
     0x200000000000000 as libc::c_longlong as u64_0,
     0x10 as libc::c_int as u64_0,
     0x100000010024235 as libc::c_longlong as u64_0,
     0x6632200000020032 as libc::c_longlong as u64_0,
     0x1310000000000000 as libc::c_longlong as u64_0,
     0x20 as libc::c_int as u64_0,
     0x100000010025345 as libc::c_longlong as u64_0,
     0x6742200000020132 as libc::c_longlong as u64_0,
     0x2310000000000000 as libc::c_longlong as u64_0,
     0x110000000000030 as libc::c_longlong as u64_0,
     0x1200100010036456 as libc::c_longlong as u64_0,
     0x7753300100131242 as libc::c_longlong as u64_0,
     0x2420100000000010 as libc::c_longlong as u64_0,
     0x110000000000131 as libc::c_longlong as u64_0,
     0x1300110010036467 as libc::c_longlong as u64_0,
     0x7754410100141253 as libc::c_longlong as u64_0,
     0x3520100000000010 as libc::c_longlong as u64_0,
     0x110000000000241 as libc::c_longlong as u64_0,
     0x2411210020147567 as libc::c_longlong as u64_0,
     0x7764511200242353 as libc::c_longlong as u64_0,
     0x4630100000000020 as libc::c_longlong as u64_0,
     0x110000000000252 as libc::c_longlong as u64_0,
     0x3411310120157677 as libc::c_longlong as u64_0,
     0x8765521300253464 as libc::c_ulonglong,
     0x5631200000000131 as libc::c_longlong as u64_0,
     0x210000000100352 as libc::c_longlong as u64_0,
     0x3522410221267777 as libc::c_longlong as u64_0,
     0x8775621311363565 as libc::c_ulonglong,
     0x5741300010000131 as libc::c_longlong as u64_0,
     0x1210100000100462 as libc::c_longlong as u64_0,
     0x4623510221367778 as libc::c_longlong as u64_0,
     0x8876632411464675 as libc::c_ulonglong,
     0x6752400110000242 as libc::c_longlong as u64_0,
     0x1310200100211563 as libc::c_longlong as u64_0,
     0x5634511331478878 as libc::c_longlong as u64_0,
     0x8877642422565676 as libc::c_ulonglong,
     0x7753410210100353 as libc::c_longlong as u64_0,
     0x2321310101311674 as libc::c_longlong as u64_0,
     0x6635621432478888 as libc::c_longlong as u64_0,
     0x8887753422575776 as libc::c_ulonglong,
     0x7754510310110463 as libc::c_longlong as u64_0,
     0x3422310201422674 as libc::c_longlong as u64_0,
     0x6746622542578988 as libc::c_longlong as u64_0,
     0x8898753533676777 as libc::c_ulonglong,
     0x7765510310211464 as libc::c_longlong as u64_0,
     0x4533411212523775 as libc::c_longlong as u64_0,
     0x7756723653678988 as libc::c_longlong as u64_0,
     0x89a8764544676787 as libc::c_ulonglong,
     0x7776621421321575 as libc::c_longlong as u64_0,
     0x5543521313634775 as libc::c_longlong as u64_0,
     0x7757734654788a88 as libc::c_longlong as u64_0,
     0x9aa8775655776788 as libc::c_ulonglong,
     0x8876722521422675 as libc::c_ulonglong,
     0x6654622423645776 as libc::c_longlong as u64_0,
     0x7767745765789b89 as libc::c_longlong as u64_0,
     0x9bb8875655777888 as libc::c_ulonglong,
     0x8887732521433676 as libc::c_ulonglong,
     0x6765633524755777 as libc::c_longlong as u64_0,
     0x7777756765789b89 as libc::c_longlong as u64_0,
     0xabc8876766777898 as libc::c_ulonglong,
     0x8898743632543776 as libc::c_ulonglong,
     0x7766734535756777 as libc::c_longlong as u64_0,
     0x887775676678ac9a as libc::c_ulonglong,
     0xbcc88767667778a9 as libc::c_ulonglong,
     0x8898754633654777 as libc::c_ulonglong,
     0x7777745646767787 as libc::c_longlong as u64_0,
     0x898876777678bd9b as libc::c_ulonglong,
     0xcdd89877767878aa as libc::c_ulonglong,
     0x8998765644665777 as libc::c_ulonglong,
     0x7777756746777888 as libc::c_longlong as u64_0,
     0x898887788778cd9c as libc::c_ulonglong,
     0xded99877777888ba as libc::c_ulonglong,
     0x99a8766644766788 as libc::c_ulonglong,
     0x8888757756777899 as libc::c_ulonglong,
     0x898888888788cd9d as libc::c_ulonglong,
     0xeed9a888878888cb as libc::c_ulonglong,
     0x9aa8776755777788 as libc::c_ulonglong,
     0x88887677677888aa as libc::c_ulonglong,
     0x8a9889889888ddad as libc::c_ulonglong,
     0xfedab988988988dc as libc::c_ulonglong,
     0xabb8887756777789 as libc::c_ulonglong,
     0x88987677678888aa as libc::c_ulonglong,
     0x8aa89a88a889ddae as libc::c_ulonglong,
     0xffdac988988988dd as libc::c_ulonglong,
     0xacb8887766787899 as libc::c_ulonglong,
     0x88987777778988bb as libc::c_ulonglong,
     0x9ba89b88b88aedbe as libc::c_ulonglong,
     0xffdbda88a88a89ed as libc::c_ulonglong,
     0xbdc889876789889a as libc::c_ulonglong,
     0x88a88777778a88cb as libc::c_ulonglong,
     0x9cb8ac88c98afdcf as libc::c_ulonglong,
     0xffeceb89b89b89ed as libc::c_ulonglong,
     0xcec89a87778988ab as libc::c_ulonglong,
     0x89a88788788b89dc as libc::c_ulonglong,
     0x9cc9bc88da8bfecf as libc::c_ulonglong,
     0xffeceb8ac9ac9aee as libc::c_ulonglong,
     0xced89a87778a88bc as libc::c_ulonglong,
     0x9ab89888788b8aed as libc::c_ulonglong,
     0x9dc9cd89eb8cfedf as libc::c_ulonglong,
     0xfffdfc9bd9bd9afe as libc::c_ulonglong,
     0xdfe9ab88778a88cd as libc::c_ulonglong,
     0x9bc8a988889c9aed as libc::c_ulonglong,
     0xadd9de89eb9cfeef as libc::c_ulonglong,
     0xfffefd9bd9bdabfe as libc::c_ulonglong,
     0xdfe9bc88888b98dd as libc::c_ulonglong,
     0xabc9aa8888ad9bed as libc::c_ulonglong,
     0xbee9de99ec9dfeff as libc::c_ulonglong,
     0xfffffdace9ceacfe as libc::c_ulonglong,
     0xdfe9cc89888c99ee as libc::c_ulonglong,
     0xacc9bb8888ae9bfd as libc::c_ulonglong,
     0xbfe9ee99ec9dffff as libc::c_ulonglong,
     0xfffffdade9debdfe as libc::c_ulonglong,
     0xefeadd99889da9ee as libc::c_ulonglong,
     0xaddacc8988beacfe as libc::c_ulonglong,
     0xcfeaeeaaed9effff as libc::c_ulonglong,
     0xfffffebeeadfcefe as libc::c_ulonglong,
     0xefebed9a88adaafe as libc::c_ulonglong,
     0xbedadc9998cebdfe as libc::c_ulonglong,
     0xdfeaffabfdaeffff as libc::c_ulonglong,
     0xfffffecedaefcefe as libc::c_ulonglong,
     0xfffced9a88bebbfe as libc::c_ulonglong,
     0xbedbedaaa9dfbdfd as libc::c_ulonglong,
     0xefebffbcfebeffff as libc::c_ulonglong,
     0xfffffedfebefdfff as libc::c_ulonglong,
     0xfffdfc9b99cebcfe as libc::c_ulonglong,
     0xcfecfebbb9efcefd as libc::c_ulonglong,
     0xefecffcdfecefeff as libc::c_ulonglong,
     0xfffffedfecefdfff as libc::c_ulonglong,
     0xfffdfcacaacecdfe as libc::c_ulonglong,
     0xdfecfeccbaefdeed as libc::c_ulonglong,
     0xffedffddeecfeeff as libc::c_ulonglong,
     0xfffffeefecefefff as libc::c_ulonglong,
     0xfffefcbcabddddfe as libc::c_ulonglong,
     0xdfedfecdcbffeeec as libc::c_ulonglong,
     0xffddffeeeedfeeff as libc::c_ulonglong,
     0xfffffeefedffefff as libc::c_ulonglong,
     0xfffffccdaceddefe as libc::c_ulonglong,
     0xeffefededcffefec as libc::c_ulonglong,
     0xffdeffffeeefeeff as libc::c_ulonglong,
     0xffffffffeeffffff as libc::c_ulonglong,
     0xfffffccdadfddffe as libc::c_ulonglong,
     0xeffffeeeedffffec as libc::c_ulonglong,
     0xffdffeffefffefff as libc::c_ulonglong,
     0xffffffffeefeffff as libc::c_ulonglong,
     0xfffffcddbefdefff as libc::c_ulonglong,
     0xfffffeefedffffeb as libc::c_ulonglong,
     0xffdffeffefffefff as libc::c_ulonglong,
     0xffffeffffffeffff as libc::c_ulonglong,
     0xfffffdeebefdefff as libc::c_ulonglong,
     0xfffffeffeeffffeb as libc::c_ulonglong,
     0xffdffeffefffefff as libc::c_ulonglong,
     0xffffeffffffdffff as libc::c_ulonglong,
     0xfffffdfebffdffff as libc::c_ulonglong,
     0xfffffeefeefffffc as libc::c_ulonglong,
     0xffeffeffefffefff as libc::c_ulonglong,
     0xffffeffffffdffff as libc::c_ulonglong,
     0xfffffeffaffeffff as libc::c_ulonglong,
     0xffeffeefeefffffc as libc::c_ulonglong,
     0xffeffeffefffefff as libc::c_ulonglong,
     0xffffdffffffcffff as libc::c_ulonglong,
     0xffffffffaffeffff as libc::c_ulonglong,
     0xffeffeefeefffffc as libc::c_ulonglong,
     0xffeffeffffffffff as libc::c_ulonglong,
     0xffffdffffffcffff as libc::c_ulonglong,
     0xfffffffeaefeffff as libc::c_ulonglong,
     0xffefffefedfffffc as libc::c_ulonglong,
     0xfffffeffffffffff as libc::c_ulonglong];
static mut ovl_Boss_GanonVtx_01BFB0: [Vtx; 33] =
    [Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [520 as libc::c_int as libc::c_short,
                                300 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [4096 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [300 as libc::c_int as libc::c_short,
                                520 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [5120 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(200 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [4608 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                600 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [6144 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(200 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [5632 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(300 as libc::c_int) as libc::c_short,
                                520 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [7168 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(200 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [6656 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(520 as libc::c_int) as libc::c_short,
                                300 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [8192 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(200 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [7680 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(600 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [9216 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(200 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [8704 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(520 as libc::c_int) as libc::c_short,
                                -(300 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [10240 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(200 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [9728 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(300 as libc::c_int) as libc::c_short,
                                -(520 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [11264 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(200 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [10752 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                -(600 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [12288 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(200 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [11776 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                -(600 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [300 as libc::c_int as libc::c_short,
                                -(520 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1024 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(200 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [512 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [520 as libc::c_int as libc::c_short,
                                -(300 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2048 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(200 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1536 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [600 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [3072 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(200 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2560 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(200 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [3584 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(297 as libc::c_int) as libc::c_short,
                                -(297 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                1024 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [297 as libc::c_int as libc::c_short,
                                -(297 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1024 as libc::c_int as libc::c_short,
                                1024 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [297 as libc::c_int as libc::c_short,
                                297 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1024 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(297 as libc::c_int) as libc::c_short,
                                297 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(300 as libc::c_int) as libc::c_short,
                                -(300 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                1024 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [300 as libc::c_int as libc::c_short,
                                -(300 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1024 as libc::c_int as libc::c_short,
                                1024 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [300 as libc::c_int as libc::c_short,
                                300 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1024 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(300 as libc::c_int) as libc::c_short,
                                300 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },}];
// Initialized in run_static_initializers
#[no_mangle]
pub static mut gDorfLightFlecksDL: [Gfx; 30] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 30];
static mut ovl_Boss_GanonVtx_01A738: [Vtx; 3] =
    [Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [5 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                500 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(5 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                500 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar],};
                 init
             },}];
// Initialized in run_static_initializers
#[no_mangle]
pub static mut gDorfLightRayTriDL: [Gfx; 9] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 9];
static mut ovl_Boss_GanonVtx_01A6C0: [Vtx; 3] =
    [Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                500 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [5 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(5 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },}];
// Initialized in run_static_initializers
#[no_mangle]
pub static mut gDorfUnusedDL: [Gfx; 9] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 9];
static mut ovl_Boss_GanonVtx_01A600: [Vtx; 4] =
    [Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(30 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                3072 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [30 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1024 as libc::c_int as libc::c_short,
                                3072 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [30 as libc::c_int as libc::c_short,
                                240 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1024 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(30 as libc::c_int) as libc::c_short,
                                240 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },}];
// Initialized in run_static_initializers
#[no_mangle]
pub static mut gDorfLightningDL: [Gfx; 16] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 16];
#[no_mangle]
pub static mut gDorfLightning12Tex: [u64_0; 384] =
    [0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x20100000000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x10200000000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x2000000 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x2 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x100000000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x20101 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x1000101 as libc::c_int as u64_0,
     0x1030003070501 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x10102020102 as libc::c_longlong as u64_0,
     0x5060f0606030100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x103050a0b0b09 as libc::c_longlong as u64_0,
     0x1106060202000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10202 as libc::c_int as u64_0,
     0x3040b142025220d as libc::c_longlong as u64_0,
     0x802010101000100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x2060c as libc::c_int as u64_0,
     0x11111b1b110d0c05 as libc::c_longlong as u64_0,
     0x301010103030501 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1051027 as libc::c_int as u64_0,
     0x2e1f100a06080503 as libc::c_longlong as u64_0,
     0x302010103010100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10102091a2e as libc::c_longlong as u64_0,
     0x1f0c090504050403 as libc::c_longlong as u64_0,
     0x202010101000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1010207111e as libc::c_longlong as u64_0,
     0x1c11110804040303 as libc::c_longlong as u64_0,
     0x201010100000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10103060a0f as libc::c_longlong as u64_0,
     0x1b170c0403030302 as libc::c_longlong as u64_0,
     0x201000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1030509100f as libc::c_longlong as u64_0,
     0x1711070302020201 as libc::c_longlong as u64_0,
     0x104000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x30709111b0e as libc::c_longlong as u64_0,
     0x1119170603030404 as libc::c_longlong as u64_0,
     0x70c030000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1050b0e190e08 as libc::c_longlong as u64_0,
     0xa14200c04040507 as libc::c_longlong as u64_0,
     0x905000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1030711230c06 as libc::c_longlong as u64_0,
     0x80a100e07090404 as libc::c_longlong as u64_0,
     0x401010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x102050e161006 as libc::c_longlong as u64_0,
     0x70b0e150f170702 as libc::c_longlong as u64_0,
     0x201010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x102040e19280f as libc::c_longlong as u64_0,
     0x81015241a150502 as libc::c_longlong as u64_0,
     0x201010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x102040d17261c as libc::c_longlong as u64_0,
     0x90b1325201d0802 as libc::c_longlong as u64_0,
     0x202010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x102040a101c2e as libc::c_longlong as u64_0,
     0xe080c1519180703 as libc::c_longlong as u64_0,
     0x301000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10102050c1a2c as libc::c_longlong as u64_0,
     0x180c080a0d0a0604 as libc::c_longlong as u64_0,
     0x302010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10203081225 as libc::c_longlong as u64_0,
     0x3f32120d140c0a05 as libc::c_longlong as u64_0,
     0x302010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10203050b17 as libc::c_longlong as u64_0,
     0x31412d1720140b08 as libc::c_longlong as u64_0,
     0x302010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10102030711 as libc::c_longlong as u64_0,
     0x1b30452620190f12 as libc::c_longlong as u64_0,
     0x603020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10203050a as libc::c_longlong as u64_0,
     0x12192828261e0d0a as libc::c_longlong as u64_0,
     0x504020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x101020305 as libc::c_longlong as u64_0,
     0x80e1f413f1c0a07 as libc::c_longlong as u64_0,
     0x709040100000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10304 as libc::c_int as u64_0,
     0x50a16313b1b0a08 as libc::c_longlong as u64_0,
     0x706040201000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10202 as libc::c_int as u64_0,
     0x407121f2b2e1e0f as libc::c_longlong as u64_0,
     0x806040201010000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10102 as libc::c_int as u64_0,
     0x3050b152a514e34 as libc::c_longlong as u64_0,
     0x1207050303010100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x101 as libc::c_int as u64_0,
     0x204080f254d3e45 as libc::c_longlong as u64_0,
     0x331207060a040200 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1 as libc::c_int as u64_0,
     0x103060b1e422734 as libc::c_longlong as u64_0,
     0x4d300e080b050301 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x10204081b391b2c as libc::c_longlong as u64_0,
     0x4d42120909050301 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x203071a391929 as libc::c_longlong as u64_0,
     0x3e4e180b09060401 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x203071c3d272a as libc::c_longlong as u64_0,
     0x3958290e0a060401 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x20206162d332d as libc::c_longlong as u64_0,
     0x33463e140b070502 as libc::c_longlong as u64_0,
     0x101010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x102040d121623 as libc::c_longlong as u64_0,
     0x3e4b531b0c090603 as libc::c_longlong as u64_0,
     0x201010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1020306080c1b as libc::c_longlong as u64_0,
     0x3455602610090704 as libc::c_longlong as u64_0,
     0x301010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1020204060a16 as libc::c_longlong as u64_0,
     0x28525f36220c0705 as libc::c_longlong as u64_0,
     0x302010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1010204070c19 as libc::c_longlong as u64_0,
     0x3c51352939170e07 as libc::c_longlong as u64_0,
     0x403010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10202050a132a as libc::c_longlong as u64_0,
     0x3f261319201e2417 as libc::c_longlong as u64_0,
     0x603010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x102050d1a2f3b as libc::c_longlong as u64_0,
     0x220b0c0f131e1f1e as libc::c_longlong as u64_0,
     0x803010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x1020408183a361e as libc::c_longlong as u64_0,
     0xa0808080a121923 as libc::c_longlong as u64_0,
     0x803020000000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x20308102c3e1c09 as libc::c_longlong as u64_0,
     0x8070606070d1827 as libc::c_longlong as u64_0,
     0xd03010000000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x2040e2a42220908 as libc::c_longlong as u64_0,
     0x7060503040b1624 as libc::c_longlong as u64_0,
     0x1b05020000000000 as libc::c_longlong as u64_0,
     0x202 as libc::c_int as u64_0,
     0x40c1a3621090706 as libc::c_longlong as u64_0,
     0x5050403040a111a as libc::c_longlong as u64_0,
     0x2108010000000000 as libc::c_longlong as u64_0,
     0x10204 as libc::c_int as u64_0,
     0xa1623250d060505 as libc::c_longlong as u64_0,
     0x403030203080d0f as libc::c_longlong as u64_0,
     0x1002010000000000 as libc::c_longlong as u64_0,
     0x10409 as libc::c_int as u64_0,
     0x1124341607060504 as libc::c_longlong as u64_0,
     0x302020203050911 as libc::c_longlong as u64_0,
     0x1d06010000000000 as libc::c_longlong as u64_0,
     0x20710 as libc::c_int as u64_0,
     0x212a1a0706050302 as libc::c_longlong as u64_0,
     0x201020506030612 as libc::c_longlong as u64_0,
     0x2608010000000000 as libc::c_longlong as u64_0,
     0x1050d19 as libc::c_int as u64_0,
     0x3118080606050402 as libc::c_longlong as u64_0,
     0x201030805030609 as libc::c_longlong as u64_0,
     0x1103010000000000 as libc::c_longlong as u64_0,
     0x1050e1d as libc::c_int as u64_0,
     0x3e19070606040302 as libc::c_longlong as u64_0,
     0x101010402030503 as libc::c_longlong as u64_0,
     0x301000000000000 as libc::c_longlong as u64_0,
     0x101040b12 as libc::c_longlong as u64_0,
     0x28250b0505040302 as libc::c_longlong as u64_0,
     0x102020201020202 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x10103070f as libc::c_longlong as u64_0,
     0x1e2e140805040302 as libc::c_longlong as u64_0,
     0x202040508010101 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x10102040a as libc::c_longlong as u64_0,
     0x111b201a0a040403 as libc::c_longlong as u64_0,
     0x203061119070101 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x20303 as libc::c_int as u64_0,
     0x70d19271d0a0504 as libc::c_longlong as u64_0,
     0x3050b180e020201 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10202 as libc::c_int as u64_0,
     0x409122a311f0805 as libc::c_longlong as u64_0,
     0x509070a04020201 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10102 as libc::c_int as u64_0,
     0x2050c171f29100c as libc::c_longlong as u64_0,
     0x709040403020201 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x10305090b141220 as libc::c_longlong as u64_0,
     0x1c16090504040202 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x1020306090c1c as libc::c_longlong as u64_0,
     0x2c1d0a0706050302 as libc::c_longlong as u64_0,
     0x201000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x101020305091d as libc::c_longlong as u64_0,
     0x4345280d07060402 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10102050a16 as libc::c_longlong as u64_0,
     0x293c44280a060503 as libc::c_longlong as u64_0,
     0x202010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x204070f as libc::c_int as u64_0,
     0x1c2f445015070504 as libc::c_longlong as u64_0,
     0x302010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1030408 as libc::c_int as u64_0,
     0x152e4b5b1d080604 as libc::c_longlong as u64_0,
     0x302010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1020407 as libc::c_int as u64_0,
     0x122e4e2f1b0d0705 as libc::c_longlong as u64_0,
     0x303010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1020409 as libc::c_int as u64_0,
     0x13284219130c0b08 as libc::c_longlong as u64_0,
     0x403010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x103050d as libc::c_int as u64_0,
     0x182e2e1411131c1c as libc::c_longlong as u64_0,
     0x603010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1030718 as libc::c_int as u64_0,
     0x2a491e0e0f15273a as libc::c_longlong as u64_0,
     0x1003010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x103081e as libc::c_int as u64_0,
     0x33581d1318131918 as libc::c_longlong as u64_0,
     0x503010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x204091d as libc::c_int as u64_0,
     0x3254272534140b06 as libc::c_longlong as u64_0,
     0x403010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10102050a21 as libc::c_longlong as u64_0,
     0x414b2e1a16090604 as libc::c_longlong as u64_0,
     0x302000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10203060d32 as libc::c_longlong as u64_0,
     0x69421b0e0a080603 as libc::c_longlong as u64_0,
     0x201000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10102040b1a45 as libc::c_longlong as u64_0,
     0x75290f0c0a070502 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x102020611233c as libc::c_longlong as u64_0,
     0x6921130c09070502 as libc::c_longlong as u64_0,
     0x201000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1020308193747 as libc::c_longlong as u64_0,
     0x581c120b08060402 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1020308193a52 as libc::c_longlong as u64_0,
     0x3b110c0908060402 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x20304081a3e62 as libc::c_longlong as u64_0,
     0x36170b0908050301 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10304091d4b69 as libc::c_longlong as u64_0,
     0x2f2a110908050301 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x203050f214f55 as libc::c_longlong as u64_0,
     0x2f3d1c0c08050301 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x2030817295237 as libc::c_longlong as u64_0,
     0x26341c0c08060401 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x203081a294b36 as libc::c_longlong as u64_0,
     0x232e1d0c08050401 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1030613234759 as libc::c_longlong as u64_0,
     0x2a291b0c07050301 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x103040b1c4171 as libc::c_longlong as u64_0,
     0x3e2c180b07050300 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x102030718375a as libc::c_longlong as u64_0,
     0x5334110807040200 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x10202040f203a as libc::c_longlong as u64_0,
     0x64390f0806040200 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1010103060e22 as libc::c_longlong as u64_0,
     0x4621090604030200 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1010103060b as libc::c_longlong as u64_0,
     0x1409040403020100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x10203 as libc::c_int as u64_0,
     0x403020202020100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x101 as libc::c_int as u64_0,
     0x202010201010000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x101 as libc::c_int as u64_0,
     0x101010201010000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x1010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0];
#[no_mangle]
pub static mut gDorfLightning11Tex: [u64_0; 384] =
    [0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x100 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1 as libc::c_int as u64_0,
     0x201000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x10000000001 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x200 as libc::c_int as u64_0,
     0x103 as libc::c_int as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1010102000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x103 as libc::c_int as u64_0,
     0x104020101000000 as libc::c_longlong as u64_0,
     0x200 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x103070d as libc::c_int as u64_0,
     0x302010001000000 as libc::c_longlong as u64_0,
     0x1020602 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x103060d14 as libc::c_longlong as u64_0,
     0x601010101010000 as libc::c_longlong as u64_0,
     0x3000200 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x102061220 as libc::c_longlong as u64_0,
     0x1605020202010100 as libc::c_longlong as u64_0,
     0x1040b030000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0x106101c as libc::c_int as u64_0,
     0x260c030302020100 as libc::c_longlong as u64_0,
     0x10103000000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0x10102050d1b as libc::c_longlong as u64_0,
     0x3723080403030201 as libc::c_longlong as u64_0,
     0x300000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10102040a12 as libc::c_longlong as u64_0,
     0x252d100504040405 as libc::c_longlong as u64_0,
     0xb03000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10101030613 as libc::c_longlong as u64_0,
     0x233b2e0a06060503 as libc::c_longlong as u64_0,
     0x400000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10101030613 as libc::c_longlong as u64_0,
     0x24435a1a07060402 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1010205060d as libc::c_longlong as u64_0,
     0x1932542b0c070503 as libc::c_longlong as u64_0,
     0x202000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10001040608 as libc::c_longlong as u64_0,
     0x11273a3d150c0604 as libc::c_longlong as u64_0,
     0x302010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x102070d11 as libc::c_longlong as u64_0,
     0x1022314f2d1a0b06 as libc::c_longlong as u64_0,
     0x402020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x102040d223a as libc::c_longlong as u64_0,
     0x1a1a233a3c190e07 as libc::c_longlong as u64_0,
     0x503020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10105133865 as libc::c_longlong as u64_0,
     0x3b151e364f201f0f as libc::c_longlong as u64_0,
     0x604020100000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10205122d49 as libc::c_longlong as u64_0,
     0x58241e344d20231c as libc::c_longlong as u64_0,
     0xa05030100000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10103050e2039 as libc::c_longlong as u64_0,
     0x6e532631471d1a1f as libc::c_longlong as u64_0,
     0xb06040201000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1010203071130 as libc::c_longlong as u64_0,
     0x6984452d3e1a171e as libc::c_longlong as u64_0,
     0x120a050302010000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1010202060c26 as libc::c_longlong as u64_0,
     0x49787747401b151c as libc::c_longlong as u64_0,
     0x251f0a0302020000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x102050a1a as libc::c_longlong as u64_0,
     0x2e538d835d1f1417 as libc::c_longlong as u64_0,
     0x1f29170703020100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1010205080e as libc::c_longlong as u64_0,
     0x1c376ca08d3a1714 as libc::c_longlong as u64_0,
     0x141d210f05020100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x102040609 as libc::c_longlong as u64_0,
     0x102239658c783b19 as libc::c_longlong as u64_0,
     0x1314160a05040201 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1020407 as libc::c_int as u64_0,
     0x911253f649e8543 as libc::c_longlong as u64_0,
     0x19110e0906040301 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0x20304 as libc::c_int as u64_0,
     0x70c192d4b94ac91 as libc::c_longlong as u64_0,
     0x44160f0b0b060402 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0x10103 as libc::c_int as u64_0,
     0x509111e3c727a98 as libc::c_longlong as u64_0,
     0x8e311413160a0503 as libc::c_ulonglong,
     0x201000000000000 as libc::c_longlong as u64_0,
     0x10202 as libc::c_int as u64_0,
     0x4070b132d5e6272 as libc::c_longlong as u64_0,
     0xad5d1f16120a0703 as libc::c_ulonglong,
     0x201000000000000 as libc::c_longlong as u64_0,
     0x10101 as libc::c_int as u64_0,
     0x30609102a4c6363 as libc::c_longlong as u64_0,
     0xa1842916100b0804 as libc::c_ulonglong,
     0x201000000000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x305070e243f6f70 as libc::c_longlong as u64_0,
     0x839e441c120e0904 as libc::c_ulonglong,
     0x201010000000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x204060b1d315e86 as libc::c_longlong as u64_0,
     0x8db2742e17100b06 as libc::c_ulonglong,
     0x302010000000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x1030508121e3262 as libc::c_longlong as u64_0,
     0x8db7a03717110c08 as libc::c_ulonglong,
     0x503020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x204060a121e3a as libc::c_longlong as u64_0,
     0x62a1c7612b160f0a as libc::c_longlong as u64_0,
     0x705020101010101 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x20406090e182c as libc::c_longlong as u64_0,
     0x53a3d08f6132160c as libc::c_longlong as u64_0,
     0x806030101010101 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x204060b152749 as libc::c_longlong as u64_0,
     0x86a279556c5f3915 as libc::c_ulonglong,
     0xa06040101010101 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x103050811224783 as libc::c_longlong as u64_0,
     0x95582e30475c6436 as libc::c_ulonglong,
     0xf07040100010101 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x204070e2048838d as libc::c_longlong as u64_0,
     0x491c1a1e263b6157 as libc::c_longlong as u64_0,
     0x1808040101010101 as libc::c_longlong as u64_0,
     0x102 as libc::c_int as u64_0,
     0x3060f1c41848446 as libc::c_longlong as u64_0,
     0x18141414192e576f as libc::c_longlong as u64_0,
     0x270a040101010100 as libc::c_longlong as u64_0,
     0x20203 as libc::c_int as u64_0,
     0x50b1b3a717f3b15 as libc::c_longlong as u64_0,
     0x1211110f12284c71 as libc::c_longlong as u64_0,
     0x3a16060101010101 as libc::c_longlong as u64_0,
     0x1020305 as libc::c_int as u64_0,
     0x916306d783b1211 as libc::c_longlong as u64_0,
     0x100f0d0c0f213d59 as libc::c_longlong as u64_0,
     0x431f080101010101 as libc::c_longlong as u64_0,
     0x101020408 as libc::c_longlong as u64_0,
     0x112c608149150e0e as libc::c_longlong as u64_0,
     0xc0b0a090b1a304a as libc::c_longlong as u64_0,
     0x5016040101010101 as libc::c_longlong as u64_0,
     0x10204060e as libc::c_longlong as u64_0,
     0x20608848170f0d0b as libc::c_longlong as u64_0,
     0x9080706091a2441 as libc::c_longlong as u64_0,
     0x5714030101010100 as libc::c_longlong as u64_0,
     0x10103050c20 as libc::c_longlong as u64_0,
     0x4c8b651c110e0b09 as libc::c_longlong as u64_0,
     0x8070607142c1e33 as libc::c_longlong as u64_0,
     0x5d1b060101010101 as libc::c_longlong as u64_0,
     0x102040a1a36 as libc::c_longlong as u64_0,
     0x645926100f0c0a08 as libc::c_longlong as u64_0,
     0x7090b070d1a1a39 as libc::c_longlong as u64_0,
     0x5115030101010101 as libc::c_longlong as u64_0,
     0x1020205123059 as libc::c_longlong as u64_0,
     0x6b2b100e0c0b0908 as libc::c_longlong as u64_0,
     0xc181a0909162e40 as libc::c_longlong as u64_0,
     0x2707030101010101 as libc::c_longlong as u64_0,
     0x1020305133961 as libc::c_longlong as u64_0,
     0x43120e0d0b09080c as libc::c_longlong as u64_0,
     0x181c0f0609193227 as libc::c_longlong as u64_0,
     0xc05020101010101 as libc::c_longlong as u64_0,
     0x1020305122e4d as libc::c_longlong as u64_0,
     0x4e230e0e0c0a090f as libc::c_longlong as u64_0,
     0x1a0e070a0e1b190e as libc::c_longlong as u64_0,
     0x704020100010001 as libc::c_longlong as u64_0,
     0x10203050d2036 as libc::c_longlong as u64_0,
     0x5e531d0e0d0b0a0c as libc::c_longlong as u64_0,
     0x180a0b1025341408 as libc::c_longlong as u64_0,
     0x503020000000000 as libc::c_longlong as u64_0,
     0x10204091528 as libc::c_longlong as u64_0,
     0x4b6841160e0e0e12 as libc::c_longlong as u64_0,
     0x200f1127371e0706 as libc::c_longlong as u64_0,
     0x403010000000000 as libc::c_longlong as u64_0,
     0x10103050b21 as libc::c_longlong as u64_0,
     0x3652693c15101113 as libc::c_longlong as u64_0,
     0x1f12213b26090605 as libc::c_longlong as u64_0,
     0x403010000000000 as libc::c_longlong as u64_0,
     0x10102040711 as libc::c_longlong as u64_0,
     0x22437774411d1213 as libc::c_longlong as u64_0,
     0x1d18201b0b070505 as libc::c_longlong as u64_0,
     0x302010000000000 as libc::c_longlong as u64_0,
     0x101030408 as libc::c_longlong as u64_0,
     0x11283e5f76592c1f as libc::c_longlong as u64_0,
     0x2e1c140c09080504 as libc::c_longlong as u64_0,
     0x302010000000000 as libc::c_longlong as u64_0,
     0x1020305 as libc::c_int as u64_0,
     0x70f1e3454756b4e as libc::c_longlong as u64_0,
     0x4727120c0a080503 as libc::c_longlong as u64_0,
     0x202010000000000 as libc::c_longlong as u64_0,
     0x10203 as libc::c_int as u64_0,
     0x508101b27466f88 as libc::c_longlong as u64_0,
     0x692a130d0b090604 as libc::c_longlong as u64_0,
     0x302010000000000 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x305080c15284e80 as libc::c_longlong as u64_0,
     0x86593b180e0b0805 as libc::c_ulonglong,
     0x403010000000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x20405070a122144 as libc::c_longlong as u64_0,
     0x6e7b7e49140d0906 as libc::c_longlong as u64_0,
     0x503020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x1020304060b121e as libc::c_longlong as u64_0,
     0x354e7382290f0b08 as libc::c_longlong as u64_0,
     0x603010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1020305070b10 as libc::c_longlong as u64_0,
     0x20406b893b120c09 as libc::c_longlong as u64_0,
     0x704020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1010204060a0f as libc::c_longlong as u64_0,
     0x1e447a63461a0f0a as libc::c_longlong as u64_0,
     0x805020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1010203060a15 as libc::c_longlong as u64_0,
     0x275a8a3a23171a14 as libc::c_longlong as u64_0,
     0xa05020000000100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10203050b1e as libc::c_longlong as u64_0,
     0x3e877a27181a232d as libc::c_longlong as u64_0,
     0x2308030101010101 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1010203070f2b as libc::c_longlong as u64_0,
     0x538e4c1d181f323a as libc::c_longlong as u64_0,
     0x4012040101010000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10203050a153c as libc::c_longlong as u64_0,
     0x777b35262c33533a as libc::c_longlong as u64_0,
     0x1f06030101000101 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x20304070f1f4a as libc::c_longlong as u64_0,
     0x9358344354302313 as libc::c_ulonglong,
     0x805020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x10304060b1a3364 as libc::c_longlong as u64_0,
     0xa85b483929160e09 as libc::c_ulonglong,
     0x604020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x1030509152c5b8e as libc::c_longlong as u64_0,
     0x9347281b120e0a07 as libc::c_ulonglong,
     0x503010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x104060d24539ca5 as libc::c_longlong as u64_0,
     0x451c14110e0b0805 as libc::c_longlong as u64_0,
     0x302010000000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x20409133874a47e as libc::c_longlong as u64_0,
     0x2815110e0b080503 as libc::c_longlong as u64_0,
     0x202010000000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x2050a153967a34f as libc::c_longlong as u64_0,
     0x1d14100c09060402 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x2060a153d62aa47 as libc::c_longlong as u64_0,
     0x1b14120c09060301 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x3060a15477eb466 as libc::c_longlong as u64_0,
     0x2417190e09060301 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x3060a16509bad7a as libc::c_longlong as u64_0,
     0x361c1e0f09060401 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x101 as libc::c_int as u64_0,
     0x2060a1754ad9358 as libc::c_longlong as u64_0,
     0x431e150d09070401 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1 as libc::c_int as u64_0,
     0x2060a1652a88147 as libc::c_longlong as u64_0,
     0x5d2b150f0b080502 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x2060a164f9a9056 as libc::c_longlong as u64_0,
     0x6d441b110d090602 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x20609164882ad87 as libc::c_longlong as u64_0,
     0x6e5520130f0b0702 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x205081133589bc0 as libc::c_longlong as u64_0,
     0x86692516110c0702 as libc::c_ulonglong,
     0x201000000000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x205070b1b3d80d2 as libc::c_longlong as u64_0,
     0xab772919130d0803 as libc::c_ulonglong,
     0x201010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x204050811316abb as libc::c_longlong as u64_0,
     0xd39a361c15100903 as libc::c_ulonglong,
     0x202010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x10203060d254a89 as libc::c_longlong as u64_0,
     0xd2b6401f17110a04 as libc::c_ulonglong,
     0x202010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x203050a173588 as libc::c_longlong as u64_0,
     0xdfc3452018120b04 as libc::c_ulonglong,
     0x302010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x103050a153084 as libc::c_longlong as u64_0,
     0xe3c34a2118110a04 as libc::c_ulonglong,
     0x202010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1020408152e79 as libc::c_longlong as u64_0,
     0xe4c1451f17110a04 as libc::c_ulonglong,
     0x302010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x2030408163177 as libc::c_longlong as u64_0,
     0xe5c34a1f160f0a04 as libc::c_ulonglong,
     0x202010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1020308193977 as libc::c_longlong as u64_0,
     0xe0b5451c130e0803 as libc::c_ulonglong,
     0x202010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1010307163460 as libc::c_longlong as u64_0,
     0xa3722b150e0b0603 as libc::c_ulonglong,
     0x101000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10102030a1621 as libc::c_longlong as u64_0,
     0x301e100d0a070502 as libc::c_longlong as u64_0,
     0x201000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x102040709 as libc::c_longlong as u64_0,
     0xa08080706040301 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x2030304 as libc::c_int as u64_0,
     0x505050504030201 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1010202 as libc::c_int as u64_0,
     0x303030303020201 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x10101 as libc::c_int as u64_0,
     0x201020101010000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0];
#[no_mangle]
pub static mut gDorfLightning10Tex: [u64_0; 384] =
    [0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x10200 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1030100 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x10000010000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0x1 as libc::c_int as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x1040100000000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0x1 as libc::c_int as u64_0,
     0x201000000000001 as libc::c_longlong as u64_0,
     0x10000000000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0x1 as libc::c_int as u64_0,
     0x205020000000104 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x104 as libc::c_int as u64_0,
     0x70f0d0302010202 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10207 as libc::c_int as u64_0,
     0xe1c260b06050202 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10204 as libc::c_int as u64_0,
     0xc223f1e08080402 as libc::c_longlong as u64_0,
     0x201010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10204 as libc::c_int as u64_0,
     0xc223c3b12070503 as libc::c_longlong as u64_0,
     0x201010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x20204 as libc::c_int as u64_0,
     0xb1f30542e0a0604 as libc::c_longlong as u64_0,
     0x302020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10304 as libc::c_int as u64_0,
     0x9172a5c5c190707 as libc::c_longlong as u64_0,
     0x503020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x20408 as libc::c_int as u64_0,
     0x810295a812e0e0c as libc::c_longlong as u64_0,
     0x704030000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1030b14 as libc::c_int as u64_0,
     0x120f28558833100b as libc::c_longlong as u64_0,
     0x705030100000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1040d15 as libc::c_int as u64_0,
     0x1e132853802c0f0b as libc::c_longlong as u64_0,
     0x806040100010000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x101050c17 as libc::c_longlong as u64_0,
     0x2c212a527d2d100c as libc::c_longlong as u64_0,
     0x907050201010101 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x101040812 as libc::c_longlong as u64_0,
     0x2435344f7734130d as libc::c_longlong as u64_0,
     0xc0a0b0502020101 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x101030716 as libc::c_longlong as u64_0,
     0x346e71617236150f as libc::c_longlong as u64_0,
     0xe131d1508030201 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0x1030718 as libc::c_int as u64_0,
     0x30639da6943e1712 as libc::c_longlong as u64_0,
     0x11121a231b080303 as libc::c_longlong as u64_0,
     0x201010000000000 as libc::c_longlong as u64_0,
     0x103050e as libc::c_int as u64_0,
     0x1d356dbac1622115 as libc::c_longlong as u64_0,
     0x131216242a160703 as libc::c_longlong as u64_0,
     0x302010000000000 as libc::c_longlong as u64_0,
     0x1030509 as libc::c_int as u64_0,
     0x10224175a6a65623 as libc::c_longlong as u64_0,
     0x1512151921260f05 as libc::c_longlong as u64_0,
     0x302010000000000 as libc::c_longlong as u64_0,
     0x20506 as libc::c_int as u64_0,
     0xa11213c76c2a55a as libc::c_longlong as u64_0,
     0x211413151f321005 as libc::c_longlong as u64_0,
     0x302010000000000 as libc::c_longlong as u64_0,
     0x20405 as libc::c_int as u64_0,
     0x80c1526549ccaad as libc::c_longlong as u64_0,
     0x521c1a1f2e290d05 as libc::c_longlong as u64_0,
     0x303010000000000 as libc::c_longlong as u64_0,
     0x20203 as libc::c_int as u64_0,
     0x60a0e193d6da7a4 as libc::c_longlong as u64_0,
     0x872e202e3d1b0906 as libc::c_ulonglong,
     0x402010000000000 as libc::c_longlong as u64_0,
     0x102 as libc::c_int as u64_0,
     0x4070b132b509196 as libc::c_longlong as u64_0,
     0xc051293a29100a06 as libc::c_ulonglong,
     0x403020000000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x3060a0e1f3c7896 as libc::c_longlong as u64_0,
     0xd88c3f3c1f110c07 as libc::c_ulonglong,
     0x504020000000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x204080b15264b8a as libc::c_longlong as u64_0,
     0xddd06d311b140f09 as libc::c_ulonglong,
     0x705020101010101 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x10406080f192c66 as libc::c_longlong as u64_0,
     0xb0eab5512518110b as libc::c_ulonglong,
     0x806030101010101 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x10304070b132252 as libc::c_longlong as u64_0,
     0x8eeeea8e4922140d as libc::c_ulonglong,
     0x906040101010101 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x10305070c142553 as libc::c_longlong as u64_0,
     0x9cf0e3a37a491f0f as libc::c_ulonglong,
     0xb07040101010101 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x1040609101f3d85 as libc::c_longlong as u64_0,
     0xdeda896073774e1c as libc::c_ulonglong,
     0xd09050201010101 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x205070d1e3e83d7 as libc::c_longlong as u64_0,
     0xd67d443f526a7e3f as libc::c_ulonglong,
     0x130a050201010101 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x3060b173b84d6d1 as libc::c_longlong as u64_0,
     0x7433282f41558e60 as libc::c_longlong as u64_0,
     0x1e0c060201010101 as libc::c_longlong as u64_0,
     0x1020304 as libc::c_int as u64_0,
     0x60c1c3980d3c16a as libc::c_longlong as u64_0,
     0x2f212025354b846f as libc::c_longlong as u64_0,
     0x1e0b060201020102 as libc::c_longlong as u64_0,
     0x1030406 as libc::c_int as u64_0,
     0xa17347ec7bc602a as libc::c_longlong as u64_0,
     0x1f1c1a1b26417c7c as libc::c_longlong as u64_0,
     0x200b060202020202 as libc::c_longlong as u64_0,
     0x104060a as libc::c_int as u64_0,
     0x132c6cceb757241d as libc::c_longlong as u64_0,
     0x1a17141218366f8b as libc::c_longlong as u64_0,
     0x2e0c050202020202 as libc::c_longlong as u64_0,
     0x1010203060a17 as libc::c_longlong as u64_0,
     0x2d6abfc96a261a19 as libc::c_longlong as u64_0,
     0x1614110e1330648b as libc::c_longlong as u64_0,
     0x4210050202020202 as libc::c_longlong as u64_0,
     0x102030509132b as libc::c_longlong as u64_0,
     0x5dbecd702d1a1714 as libc::c_longlong as u64_0,
     0x121010101a36698e as libc::c_longlong as u64_0,
     0x5f15060202020202 as libc::c_longlong as u64_0,
     0x2030407112651 as libc::c_longlong as u64_0,
     0xa2c97e2e1c171310 as libc::c_ulonglong,
     0xe0e111d323d5888 as libc::c_longlong as u64_0,
     0x711b070302020202 as libc::c_longlong as u64_0,
     0x204060c214f91 as libc::c_longlong as u64_0,
     0xc37f351d1914100c as libc::c_ulonglong,
     0xb10121f27396d99 as libc::c_longlong as u64_0,
     0x5f16070302020201 as libc::c_longlong as u64_0,
     0x20508173a91cb as libc::c_longlong as u64_0,
     0x90381d1a17130f0c as libc::c_ulonglong,
     0x111c111321459585 as libc::c_longlong as u64_0,
     0x2d0b060202010102 as libc::c_longlong as u64_0,
     0x3050b2654acbc as libc::c_longlong as u64_0,
     0x481f1a1815110d0f as libc::c_longlong as u64_0,
     0x17110c152e578c46 as libc::c_longlong as u64_0,
     0x130a060202010202 as libc::c_longlong as u64_0,
     0x3050b224999be as libc::c_longlong as u64_0,
     0x5d23191613100e13 as libc::c_longlong as u64_0,
     0x21100f1b41746523 as libc::c_longlong as u64_0,
     0xf0a050201010202 as libc::c_longlong as u64_0,
     0x3060914306da3 as libc::c_longlong as u64_0,
     0x9b461a1512101017 as libc::c_ulonglong,
     0x2812142760803713 as libc::c_longlong as u64_0,
     0xd08050201010101 as libc::c_longlong as u64_0,
     0x205070d1f426e as libc::c_longlong as u64_0,
     0xb48b2f1614151b21 as libc::c_ulonglong,
     0x2b192a5b7d56190f as libc::c_longlong as u64_0,
     0xb07040101010101 as libc::c_longlong as u64_0,
     0x2030508122746 as libc::c_longlong as u64_0,
     0x83ab6829171a2431 as libc::c_ulonglong,
     0x333153734f1f0f0d as libc::c_longlong as u64_0,
     0xa07030101000001 as libc::c_longlong as u64_0,
     0x10304060a132e as libc::c_longlong as u64_0,
     0x528e9f6a36262a40 as libc::c_longlong as u64_0,
     0x4269704019100d0a as libc::c_longlong as u64_0,
     0x806030100000000 as libc::c_longlong as u64_0,
     0x1020304070c1a as libc::c_longlong as u64_0,
     0x2d4d7fa59d704c61 as libc::c_longlong as u64_0,
     0x686d3d18120f0c09 as libc::c_longlong as u64_0,
     0x604020000000000 as libc::c_longlong as u64_0,
     0x1020306080d as libc::c_longlong as u64_0,
     0x162c476c9eb5a79b as libc::c_longlong as u64_0,
     0x743a1b1714100c08 as libc::c_longlong as u64_0,
     0x604020000000000 as libc::c_longlong as u64_0,
     0x102040609 as libc::c_longlong as u64_0,
     0xc151e2e5a97d9cf as libc::c_longlong as u64_0,
     0x8738201a16120c08 as libc::c_ulonglong,
     0x604020000000000 as libc::c_longlong as u64_0,
     0x101020405 as libc::c_longlong as u64_0,
     0x70b0f19355ea5c0 as libc::c_longlong as u64_0,
     0xbe8c502718130d09 as libc::c_ulonglong,
     0x604020000000000 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x4070b101e335878 as libc::c_longlong as u64_0,
     0xabcbaa6927140f0a as libc::c_ulonglong,
     0x704020000000000 as libc::c_longlong as u64_0,
     0x10101 as libc::c_int as u64_0,
     0x305080b111b2c48 as libc::c_longlong as u64_0,
     0x76afb7b34a1a100b as libc::c_longlong as u64_0,
     0x805030100000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x20406080c11192d as libc::c_longlong as u64_0,
     0x4e84aab44b1d140d as libc::c_longlong as u64_0,
     0xa06030100010101 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x1020405090d121d as libc::c_longlong as u64_0,
     0x3877bb9054382916 as libc::c_longlong as u64_0,
     0xb07040101010101 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x20304070b1120 as libc::c_longlong as u64_0,
     0x3f90bd5536424934 as libc::c_longlong as u64_0,
     0x1809040101010101 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10304070c1330 as libc::c_longlong as u64_0,
     0x61b592402a2d374b as libc::c_longlong as u64_0,
     0x4518050101010101 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x20305080d1a49 as libc::c_longlong as u64_0,
     0x96a44c3222263149 as libc::c_ulonglong,
     0x541e050101010101 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x203050a162c62 as libc::c_longlong as u64_0,
     0xbb7138453841432d as libc::c_ulonglong,
     0x200a040101010101 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x10305080f244e8e as libc::c_longlong as u64_0,
     0xaf554c6556342112 as libc::c_ulonglong,
     0xb07030101010100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x204080c1a3a89ce as libc::c_longlong as u64_0,
     0x9d6f563628170f0a as libc::c_ulonglong,
     0x805020101000001 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x3070e1c3a60bebc as libc::c_longlong as u64_0,
     0x5c362719140e0b07 as libc::c_longlong as u64_0,
     0x504020000000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x309193f83a7c967 as libc::c_longlong as u64_0,
     0x271b16120e0b0805 as libc::c_longlong as u64_0,
     0x402010000000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x40b2458accd9435 as libc::c_longlong as u64_0,
     0x1d18140f0b090603 as libc::c_longlong as u64_0,
     0x302010000000000 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x40d2857a4d15e24 as libc::c_longlong as u64_0,
     0x1c17120c09070502 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x50e2d5c9cb84b20 as libc::c_longlong as u64_0,
     0x1b16100a07050301 as libc::c_longlong as u64_0,
     0x1000000000000 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x610336ab2c16d2d as libc::c_longlong as u64_0,
     0x1a150f0805040200 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10203 as libc::c_int as u64_0,
     0x6113978c6aa6b44 as libc::c_longlong as u64_0,
     0x2017130906040300 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10203 as libc::c_int as u64_0,
     0x6123e8ad98a6064 as libc::c_longlong as u64_0,
     0x2a17110a07050301 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x20204 as libc::c_int as u64_0,
     0x81647a4dc755670 as libc::c_longlong as u64_0,
     0x3b1a120c08060301 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x10304 as libc::c_int as u64_0,
     0x8164bb0e69e5c5f as libc::c_longlong as u64_0,
     0x5625140e0a070401 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x10203 as libc::c_int as u64_0,
     0x611377bc6d98c5d as libc::c_longlong as u64_0,
     0x6f3b1a120e0a0602 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0x10202 as libc::c_int as u64_0,
     0x50c21407fd2da9f as libc::c_longlong as u64_0,
     0x8c5f2417110c0702 as libc::c_ulonglong,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x3080f204d89d8e4 as libc::c_longlong as u64_0,
     0xbd90341b150f0803 as libc::c_ulonglong,
     0x101000000000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x2060b122b55a7e7 as libc::c_longlong as u64_0,
     0xeebe492318110903 as libc::c_ulonglong,
     0x201000000000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x206090e193668ab as libc::c_longlong as u64_0,
     0xeecb49241b130b04 as libc::c_ulonglong,
     0x202010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x104080b12244795 as libc::c_longlong as u64_0,
     0xe6c340241c140c05 as libc::c_ulonglong,
     0x301000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x10406090f20439b as libc::c_longlong as u64_0,
     0xefd74e271e160d05 as libc::c_ulonglong,
     0x402010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x10305080e244eaa as libc::c_longlong as u64_0,
     0xf2e3632b20170e06 as libc::c_ulonglong,
     0x403010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x1030507102c67d2 as libc::c_longlong as u64_0,
     0xf0ed813221180f06 as libc::c_ulonglong,
     0x503010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x103050814337ad8 as libc::c_longlong as u64_0,
     0xc3e8993721190f07 as libc::c_ulonglong,
     0x503010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x1030508143a87d0 as libc::c_longlong as u64_0,
     0xaee7a73b22191008 as libc::c_ulonglong,
     0x503010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x103050712357cce as libc::c_longlong as u64_0,
     0xcfec9f3722190f08 as libc::c_ulonglong,
     0x503020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x10204060f2c65c1 as libc::c_longlong as u64_0,
     0xf1f2903520180e07 as libc::c_ulonglong,
     0x503010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x10203050d2653a6 as libc::c_longlong as u64_0,
     0xf4e8682b1e160e06 as libc::c_ulonglong,
     0x402010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x203050c21468f as libc::c_longlong as u64_0,
     0xedd648221b140c05 as libc::c_ulonglong,
     0x302010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x203040a1e458e as libc::c_longlong as u64_0,
     0xecc8472017110b04 as libc::c_ulonglong,
     0x201000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1020308193b7b as libc::c_longlong as u64_0,
     0xcb9b3718120d0803 as libc::c_ulonglong,
     0x201000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10203050e1c32 as libc::c_longlong as u64_0,
     0x452c15100d090603 as libc::c_longlong as u64_0,
     0x201000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1010203070b13 as libc::c_longlong as u64_0,
     0x140d0a0908060401 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1010102040508 as libc::c_longlong as u64_0,
     0x807070606040201 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10102020304 as libc::c_longlong as u64_0,
     0x504040404030201 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1010102 as libc::c_int as u64_0,
     0x202020201010100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0];
#[no_mangle]
pub static mut gDorfLightning9Tex: [u64_0; 384] =
    [0 as libc::c_int as u64_0, 0x10201000100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x20202010301 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x10406010100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x1020404010000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x1010101040100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x10201040300 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x10402020402 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x30a09010203 as libc::c_longlong as u64_0,
     0x200000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x107151f070203 as libc::c_longlong as u64_0,
     0x502010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1030d20340c0404 as libc::c_longlong as u64_0,
     0x803020100000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1 as libc::c_int as u64_0,
     0x104132c4b130609 as libc::c_longlong as u64_0,
     0xc06020101000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x101 as libc::c_int as u64_0,
     0x206193b601e0909 as libc::c_longlong as u64_0,
     0xb0a040201000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x101 as libc::c_int as u64_0,
     0x30721496f2b0c09 as libc::c_longlong as u64_0,
     0x807040303010000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x101 as libc::c_int as u64_0,
     0x308234d733e110b as libc::c_longlong as u64_0,
     0xa0708090b030100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x101 as libc::c_int as u64_0,
     0x30b265181641b0e as libc::c_longlong as u64_0,
     0xc090a0b11050100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10102 as libc::c_int as u64_0,
     0x40d2a57918f3012 as libc::c_longlong as u64_0,
     0xd0b090606030400 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10102 as libc::c_int as u64_0,
     0x40b2145799c4918 as libc::c_longlong as u64_0,
     0x100d0907070d0c03 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10102 as libc::c_int as u64_0,
     0x40918315d966c24 as libc::c_longlong as u64_0,
     0x130f0b090e180a02 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x30810214e879652 as libc::c_longlong as u64_0,
     0x1c120e0c0d0b0402 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x10101 as libc::c_int as u64_0,
     0x3070c173e6db2a6 as libc::c_longlong as u64_0,
     0x461a1824200d0604 as libc::c_longlong as u64_0,
     0x301010000000000 as libc::c_longlong as u64_0,
     0x102 as libc::c_int as u64_0,
     0x3060a112c5ab2d3 as libc::c_longlong as u64_0,
     0x8a312c42240e0805 as libc::c_ulonglong,
     0x302010000000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x306090d1d428ac8 as libc::c_longlong as u64_0,
     0xc7624c411d100b07 as libc::c_ulonglong,
     0x403020000000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x205070b1431629e as libc::c_longlong as u64_0,
     0xe2a9783d1d140e09 as libc::c_ulonglong,
     0x603010000000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x205070a10244684 as libc::c_longlong as u64_0,
     0xe6e8ad61361b110b as libc::c_ulonglong,
     0x805020000000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x20406090f1c346d as libc::c_longlong as u64_0,
     0xc5f4d89b7138180f as libc::c_ulonglong,
     0xa07030100000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x20406090f1d367a as libc::c_longlong as u64_0,
     0xccf0c7a39f6f3315 as libc::c_ulonglong,
     0xc08040101010100 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x2040609132c68bc as libc::c_longlong as u64_0,
     0xeec77c6d8c8b5c2a as libc::c_ulonglong,
     0x150a050101010101 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x4080c132b68bef3 as libc::c_longlong as u64_0,
     0xd06f41465e7b6d42 as libc::c_ulonglong,
     0x3013060202020102 as libc::c_longlong as u64_0,
     0x1020304 as libc::c_int as u64_0,
     0x60c172b6bc7f5d0 as libc::c_longlong as u64_0,
     0x6b302930465e6d3b as libc::c_longlong as u64_0,
     0x3826120302020202 as libc::c_longlong as u64_0,
     0x101020406 as libc::c_longlong as u64_0,
     0xa143177cff9cb6f as libc::c_longlong as u64_0,
     0x3025232a404b7339 as libc::c_longlong as u64_0,
     0x2b36311403010202 as libc::c_longlong as u64_0,
     0x102040609 as libc::c_longlong as u64_0,
     0x132d70d5fdd06c33 as libc::c_longlong as u64_0,
     0x26221e243b498049 as libc::c_longlong as u64_0,
     0x2327261d07020202 as libc::c_longlong as u64_0,
     0x1010204070a13 as libc::c_longlong as u64_0,
     0x2762befad4732e24 as libc::c_longlong as u64_0,
     0x201d1a1e33467e61 as libc::c_longlong as u64_0,
     0x2c28160a02020202 as libc::c_longlong as u64_0,
     0x10203050a1229 as libc::c_longlong as u64_0,
     0x59acf0d87331211e as libc::c_longlong as u64_0,
     0x1b181515233c7784 as libc::c_longlong as u64_0,
     0x2f15090202020202 as libc::c_longlong as u64_0,
     0x2030407112557 as libc::c_longlong as u64_0,
     0xa8ebdd863b251f19 as libc::c_ulonglong,
     0x151311111b377092 as libc::c_longlong as u64_0,
     0x320f070202020202 as libc::c_longlong as u64_0,
     0x204060c1f499e as libc::c_longlong as u64_0,
     0xe8e2873d29211b15 as libc::c_ulonglong,
     0x11101215233b7390 as libc::c_longlong as u64_0,
     0x3410070202020202 as libc::c_longlong as u64_0,
     0x103060b1d4290e3 as libc::c_longlong as u64_0,
     0xea9c4427231e1712 as libc::c_ulonglong,
     0x1013161a294fa393 as libc::c_longlong as u64_0,
     0x270c070302020201 as libc::c_longlong as u64_0,
     0x10509113782deef as libc::c_longlong as u64_0,
     0xa64c26221e19130f as libc::c_ulonglong,
     0xf1512183363b98a as libc::c_longlong as u64_0,
     0x240d070302020202 as libc::c_longlong as u64_0,
     0x2060b175ac4f5cc as libc::c_longlong as u64_0,
     0x582a231e1914100c as libc::c_longlong as u64_0,
     0xe13111b407ba85b as libc::c_longlong as u64_0,
     0x1a0d070302020202 as libc::c_longlong as u64_0,
     0x2060c1859bcf5e2 as libc::c_longlong as u64_0,
     0x6f2f231d18141211 as libc::c_longlong as u64_0,
     0x1812172a66a99b36 as libc::c_longlong as u64_0,
     0x140d080302020202 as libc::c_longlong as u64_0,
     0x2060b15407fcef5 as libc::c_longlong as u64_0,
     0xb84b24201b191919 as libc::c_ulonglong,
     0x2d1f2d5ba3bc7a28 as libc::c_longlong as u64_0,
     0x130d070302020202 as libc::c_longlong as u64_0,
     0x205090f254a92e4 as libc::c_longlong as u64_0,
     0xe98a36221f1e2023 as libc::c_ulonglong,
     0x3e3b6fb6c695411a as libc::c_longlong as u64_0,
     0x120d070302020202 as libc::c_longlong as u64_0,
     0x205090d173060ab as libc::c_longlong as u64_0,
     0xeeda6f3723242a3b as libc::c_ulonglong,
     0x6081bcc48a431c15 as libc::c_longlong as u64_0,
     0x110b060302020202 as libc::c_longlong as u64_0,
     0x104070a0f1d3a72 as libc::c_longlong as u64_0,
     0xc1e9c88a45313f6e as libc::c_ulonglong,
     0xa4cabe803d1e1813 as libc::c_ulonglong,
     0xf0b060201020202 as libc::c_longlong as u64_0,
     0x10305080b13203f as libc::c_longlong as u64_0,
     0x6eace0e1a7707cbd as libc::c_longlong as u64_0,
     0xcaa15f37221a1611 as libc::c_ulonglong,
     0xc08050201010102 as libc::c_longlong as u64_0,
     0x20405070c1322 as libc::c_longlong as u64_0,
     0x396090c8e7e9eae8 as libc::c_longlong as u64_0,
     0xaa5430261f19130e as libc::c_ulonglong,
     0xa07040201010101 as libc::c_longlong as u64_0,
     0x1020204080c12 as libc::c_longlong as u64_0,
     0x192a497dbbf2fff1 as libc::c_longlong as u64_0,
     0xac5531261f18120b as libc::c_ulonglong,
     0x806030101010101 as libc::c_longlong as u64_0,
     0x1010205090c as libc::c_longlong as u64_0,
     0x10192b4579c6eefc as libc::c_longlong as u64_0,
     0xe9a66337251a130c as libc::c_ulonglong,
     0x906030101010100 as libc::c_longlong as u64_0,
     0x1040608 as libc::c_int as u64_0,
     0xb111825416c9ed3 as libc::c_longlong as u64_0,
     0xeef4d48d4a21170f as libc::c_ulonglong,
     0xc08040101010101 as libc::c_longlong as u64_0,
     0x20405 as libc::c_int as u64_0,
     0x70b0f131e2c446b as libc::c_longlong as u64_0,
     0x9de4fce491321a12 as libc::c_ulonglong,
     0xe09050201010101 as libc::c_longlong as u64_0,
     0x102 as libc::c_int as u64_0,
     0x306090b111b273c as libc::c_longlong as u64_0,
     0x60a6eaf0a74c2315 as libc::c_longlong as u64_0,
     0x100a050101010101 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x20406090e151d2e as libc::c_longlong as u64_0,
     0x4d97ead7a27b4f23 as libc::c_longlong as u64_0,
     0x130c060202010202 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x10306080c121c36 as libc::c_longlong as u64_0,
     0x66cbe0915e64744d as libc::c_longlong as u64_0,
     0x2c12070302020202 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x204070b122049 as libc::c_longlong as u64_0,
     0x8fdaa96d473e5061 as libc::c_ulonglong,
     0x5e2a0b0302020201 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x204070c172d6a as libc::c_longlong as u64_0,
     0xcabb645f56475875 as libc::c_ulonglong,
     0x5b23090302020202 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x104070a1228529d as libc::c_longlong as u64_0,
     0xcb7d537585745d46 as libc::c_ulonglong,
     0x240e060202010202 as libc::c_longlong as u64_0,
     0x10101 as libc::c_int as u64_0,
     0x3070a10224692d4 as libc::c_longlong as u64_0,
     0xa5696a7866412e1e as libc::c_ulonglong,
     0x100a050202010101 as libc::c_longlong as u64_0,
     0x10202 as libc::c_int as u64_0,
     0x409101d4382dddc as libc::c_longlong as u64_0,
     0x895a454243231711 as libc::c_ulonglong,
     0xc08040101010101 as libc::c_longlong as u64_0,
     0x10203 as libc::c_int as u64_0,
     0x711264a8bced678 as libc::c_longlong as u64_0,
     0x3c2f2e34421c100c as libc::c_longlong as u64_0,
     0x906040101010101 as libc::c_longlong as u64_0,
     0x10305 as libc::c_int as u64_0,
     0xb2254a0d0d98537 as libc::c_longlong as u64_0,
     0x231f242f36160d09 as libc::c_longlong as u64_0,
     0x705020101000100 as libc::c_longlong as u64_0,
     0x20407 as libc::c_int as u64_0,
     0x113064cee59d3d22 as libc::c_longlong as u64_0,
     0x1f1c2231210e0907 as libc::c_longlong as u64_0,
     0x503020000000000 as libc::c_longlong as u64_0,
     0x20508 as libc::c_int as u64_0,
     0x163e74e5da622520 as libc::c_longlong as u64_0,
     0x1d1a1a2410080504 as libc::c_longlong as u64_0,
     0x201000000000000 as libc::c_longlong as u64_0,
     0x3060a as libc::c_int as u64_0,
     0x194377e8ce6d2b1f as libc::c_longlong as u64_0,
     0x1b1714180a050302 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x1040609 as libc::c_int as u64_0,
     0x184070e2bc824622 as libc::c_longlong as u64_0,
     0x1a140e0c07050302 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0x30609 as libc::c_int as u64_0,
     0x184071dc9b67663a as libc::c_longlong as u64_0,
     0x1c160e0906040201 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x3060a as libc::c_int as u64_0,
     0x194988db8147554e as libc::c_longlong as u64_0,
     0x251e110906040200 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x30609 as libc::c_int as u64_0,
     0x1a4f92d3713d5776 as libc::c_longlong as u64_0,
     0x341a100b07050301 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x30508 as libc::c_int as u64_0,
     0x194d94e29c515a79 as libc::c_longlong as u64_0,
     0x471d140e0a070401 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x20507 as libc::c_int as u64_0,
     0x143d7cd9e0a17a70 as libc::c_longlong as u64_0,
     0x632a18110d090502 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0x10306 as libc::c_int as u64_0,
     0xd214583cae4c091 as libc::c_longlong as u64_0,
     0x8c3f1d15100b0703 as libc::c_ulonglong,
     0x101000000000000 as libc::c_longlong as u64_0,
     0x20304 as libc::c_int as u64_0,
     0x81127477fcef5e8 as libc::c_longlong as u64_0,
     0xca622619140e0803 as libc::c_ulonglong,
     0x201000000000000 as libc::c_longlong as u64_0,
     0x10203 as libc::c_int as u64_0,
     0x60b12214587dcfa as libc::c_longlong as u64_0,
     0xec92331f19120b05 as libc::c_ulonglong,
     0x201010000000000 as libc::c_longlong as u64_0,
     0x102 as libc::c_int as u64_0,
     0x4080c13294b8ad0 as libc::c_longlong as u64_0,
     0xf6ca4f271e150d06 as libc::c_ulonglong,
     0x402010000000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x3060a0e193566b6 as libc::c_longlong as u64_0,
     0xf5e76a2f22180f06 as libc::c_ulonglong,
     0x402010000000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x205090d18346ec3 as libc::c_longlong as u64_0,
     0xf7f08836241a1107 as libc::c_ulonglong,
     0x503010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x204080c17387be6 as libc::c_longlong as u64_0,
     0xfff4a53c261c1209 as libc::c_ulonglong,
     0x604020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x204070c193c82ee as libc::c_longlong as u64_0,
     0xf1fccd49281d130a as libc::c_ulonglong,
     0x705020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x104070d204798e1 as libc::c_longlong as u64_0,
     0xb9f1e4562c1f150b as libc::c_ulonglong,
     0x805020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x104080e254ca1d4 as libc::c_longlong as u64_0,
     0x9fefe85b2d21160c as libc::c_ulonglong,
     0x805020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x104080f294ea2cd as libc::c_longlong as u64_0,
     0x9feeea692f21160c as libc::c_ulonglong,
     0x906030000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x10408112e59bae0 as libc::c_longlong as u64_0,
     0xb0f2ef7e3522180d as libc::c_ulonglong,
     0xa06030000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x1050912335cbadd as libc::c_longlong as u64_0,
     0xbef5ef823623180e as libc::c_ulonglong,
     0xa06030000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x10509133660bdd1 as libc::c_longlong as u64_0,
     0xbff5ed7c3523180e as libc::c_ulonglong,
     0xa07030000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x10509123362cad6 as libc::c_longlong as u64_0,
     0xc2f6ef843824190e as libc::c_ulonglong,
     0xa06030000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x10508113165d1e5 as libc::c_longlong as u64_0,
     0xd1f7ef843925180e as libc::c_ulonglong,
     0xa07030000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x104080f2a5abbf6 as libc::c_longlong as u64_0,
     0xf7ffed743624180e as libc::c_ulonglong,
     0x906030000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x104070c20448fee as libc::c_longlong as u64_0,
     0xffffe3552e22160c as libc::c_ulonglong,
     0x806030000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x1040609163674da as libc::c_longlong as u64_0,
     0xfefcd14a2b20140b as libc::c_ulonglong,
     0x704020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x1030508102b5bb4 as libc::c_longlong as u64_0,
     0xf3f5ab3f281e1309 as libc::c_ulonglong,
     0x604020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x10305070e285dbf as libc::c_longlong as u64_0,
     0xfaf29537231a1008 as libc::c_ulonglong,
     0x503020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x203050b2250a5 as libc::c_longlong as u64_0,
     0xe7d97b2d1b140c06 as libc::c_ulonglong,
     0x302010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x2030408162e53 as libc::c_longlong as u64_0,
     0x7d602f18130e0904 as libc::c_longlong as u64_0,
     0x301010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10202050c1720 as libc::c_longlong as u64_0,
     0x291c120f0c090502 as libc::c_longlong as u64_0,
     0x201000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1010306080b as libc::c_longlong as u64_0,
     0xd0c0b0a08070402 as libc::c_longlong as u64_0,
     0x201000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10102040507 as libc::c_longlong as u64_0,
     0x707070705040301 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1010204 as libc::c_int as u64_0,
     0x404030403020101 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1 as libc::c_int as u64_0,
     0x101000100000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0];
#[no_mangle]
pub static mut gDorfLightning8Tex: [u64_0; 384] =
    [0 as libc::c_int as u64_0, 0x10302 as libc::c_int as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x102 as libc::c_int as u64_0,
     0x300000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1 as libc::c_int as u64_0,
     0x301000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1000000 as libc::c_int as u64_0,
     0x103010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1000000 as libc::c_int as u64_0,
     0x1000100000000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x204010000 as libc::c_longlong as u64_0,
     0x10301000000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x305030000 as libc::c_longlong as u64_0,
     0x10302000000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x204090100 as libc::c_longlong as u64_0,
     0x101010000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x2040b1c0703 as libc::c_longlong as u64_0,
     0x302020101010001 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x105091a3c1a07 as libc::c_longlong as u64_0,
     0x403020102020405 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x2040a244e370e as libc::c_longlong as u64_0,
     0x6050303060c0e05 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x2040a264a5b25 as libc::c_longlong as u64_0,
     0xa0705050d1a0e02 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x2040b24416f47 as libc::c_longlong as u64_0,
     0x140a08070c110602 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x2050a1f3a7775 as libc::c_longlong as u64_0,
     0x280e0b0a0a090403 as libc::c_longlong as u64_0,
     0x202000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x103050918347397 as libc::c_longlong as u64_0,
     0x4e1c10110b080503 as libc::c_longlong as u64_0,
     0x202010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x1030407102b66ab as libc::c_longlong as u64_0,
     0x9d531e120d0b0805 as libc::c_ulonglong,
     0x302010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x10204060c214a89 as libc::c_longlong as u64_0,
     0xbb9d5322150f0a07 as libc::c_ulonglong,
     0x504020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x10304060a18305f as libc::c_longlong as u64_0,
     0xa7b696572f190f09 as libc::c_ulonglong,
     0x704020001010101 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x10304060a132249 as libc::c_longlong as u64_0,
     0x8eaaac995f311e0f as libc::c_ulonglong,
     0x806030101010101 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x20406080d1b3066 as libc::c_longlong as u64_0,
     0xaca886ab95573422 as libc::c_ulonglong,
     0x1007040202010101 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x306090c182f6cbe as libc::c_longlong as u64_0,
     0xd28a5e859d8b4538 as libc::c_ulonglong,
     0x2713060202020202 as libc::c_longlong as u64_0,
     0x10203 as libc::c_int as u64_0,
     0x5080d193878d3e1 as libc::c_longlong as u64_0,
     0x8e443e577d963e34 as libc::c_ulonglong,
     0x3d351c0702020202 as libc::c_longlong as u64_0,
     0x10204 as libc::c_int as u64_0,
     0x70e1e3e84d8eea5 as libc::c_longlong as u64_0,
     0x4628324371a24a2a as libc::c_longlong as u64_0,
     0x2f43402208020202 as libc::c_longlong as u64_0,
     0x102030507 as libc::c_longlong as u64_0,
     0xc1c4593dff3a94c as libc::c_longlong as u64_0,
     0x262427335f975223 as libc::c_longlong as u64_0,
     0x243c474219050202 as libc::c_longlong as u64_0,
     0x1020305090e as libc::c_longlong as u64_0,
     0x1d4795e3f4b85124 as libc::c_longlong as u64_0,
     0x221f1f2a507e682e as libc::c_longlong as u64_0,
     0x3857554516040202 as libc::c_longlong as u64_0,
     0x1020304080e1f as libc::c_longlong as u64_0,
     0x418de0f4b3562521 as libc::c_longlong as u64_0,
     0x1e1c1a23466d824c as libc::c_longlong as u64_0,
     0x5a5c341605020202 as libc::c_longlong as u64_0,
     0x10304060b1944 as libc::c_longlong as u64_0,
     0x90dff9b95a29231e as libc::c_ulonglong,
     0x1b19182145709b6f as libc::c_longlong as u64_0,
     0x46220d0402020202 as libc::c_longlong as u64_0,
     0x10406080d1d418c as libc::c_longlong as u64_0,
     0xdffece652e241f1a as libc::c_ulonglong,
     0x191b233357778e57 as libc::c_longlong as u64_0,
     0x230d070302020202 as libc::c_longlong as u64_0,
     0x205090e1e418bde as libc::c_longlong as u64_0,
     0xffd46f2e25201a17 as libc::c_ulonglong,
     0x19253e4d504d7441 as libc::c_longlong as u64_0,
     0x170c070302020102 as libc::c_longlong as u64_0,
     0x3080e1b4590dfff as libc::c_longlong as u64_0,
     0xd97d3625211b1515 as libc::c_ulonglong,
     0x1c30322a34488d42 as libc::c_longlong as u64_0,
     0x150b070302010101 as libc::c_longlong as u64_0,
     0x40b1c3e8ddfffe1 as libc::c_longlong as u64_0,
     0x84402a231e181316 as libc::c_ulonglong,
     0x24321e1d395b8f32 as libc::c_longlong as u64_0,
     0x110c070302010202 as libc::c_longlong as u64_0,
     0x40e2b6cdbfff3aa as libc::c_longlong as u64_0,
     0x4a3129211c17131e as libc::c_longlong as u64_0,
     0x322a18244e858d2b as libc::c_longlong as u64_0,
     0x120c070302010201 as libc::c_longlong as u64_0,
     0x40e2e71dcfff5b0 as libc::c_longlong as u64_0,
     0x503028201a16141b as libc::c_longlong as u64_0,
     0x2b1c1d336ba37a25 as libc::c_longlong as u64_0,
     0x120c070302020202 as libc::c_longlong as u64_0,
     0x50e264d94e4ffe6 as libc::c_longlong as u64_0,
     0x9244281f1917181d as libc::c_ulonglong,
     0x28263d6ba3af5f20 as libc::c_longlong as u64_0,
     0x120c070302020202 as libc::c_longlong as u64_0,
     0x50c16295caaecfe as libc::c_longlong as u64_0,
     0xd98139221d1e242e as libc::c_ulonglong,
     0x2e4f90cac28b3818 as libc::c_longlong as u64_0,
     0x120c070302020202 as libc::c_longlong as u64_0,
     0x40a111b3b6dbaee as libc::c_longlong as u64_0,
     0xfedb83402b2b385e as libc::c_ulonglong,
     0x77b3d1bc773b1b15 as libc::c_longlong as u64_0,
     0x100b060302020101 as libc::c_longlong as u64_0,
     0x3080d13224177b8 as libc::c_longlong as u64_0,
     0xf4ffe2a16b516dac as libc::c_ulonglong,
     0xd5dfb364331e1612 as libc::c_ulonglong,
     0xe09050202020201 as libc::c_longlong as u64_0,
     0x205090d1323427d as libc::c_longlong as u64_0,
     0xd2f3fff4dfbedbf3 as libc::c_ulonglong,
     0xdca66031241d1610 as libc::c_ulonglong,
     0xc08040201020101 as libc::c_longlong as u64_0,
     0x10306090d162745 as libc::c_longlong as u64_0,
     0x75aee5f9fff5feee as libc::c_longlong as u64_0,
     0x9c58392d261e1610 as libc::c_ulonglong,
     0xb08040101010101 as libc::c_longlong as u64_0,
     0x205060a101824 as libc::c_longlong as u64_0,
     0x375b8dc6f8fffffa as libc::c_longlong as u64_0,
     0xc77a49322a211811 as libc::c_ulonglong,
     0xd09050101020102 as libc::c_longlong as u64_0,
     0x20404060b1016 as libc::c_longlong as u64_0,
     0x1e2f4e86d7f3ffff as libc::c_longlong as u64_0,
     0xfade995636251b13 as libc::c_ulonglong,
     0xe0a060202020202 as libc::c_longlong as u64_0,
     0x1020304060a0d as libc::c_longlong as u64_0,
     0x111b2e4978ace5fa as libc::c_longlong as u64_0,
     0xffffeec37f351e15 as libc::c_ulonglong,
     0x100b060202020202 as libc::c_longlong as u64_0,
     0x10102040609 as libc::c_longlong as u64_0,
     0xc131b263c5e90c9 as libc::c_longlong as u64_0,
     0xedfcfffbd8662c1b as libc::c_ulonglong,
     0x140e080303030302 as libc::c_longlong as u64_0,
     0x10001030506 as libc::c_longlong as u64_0,
     0x90e131a2534496f as libc::c_longlong as u64_0,
     0xa0dffcfff1995631 as libc::c_ulonglong,
     0x1d120a0403030302 as libc::c_longlong as u64_0,
     0x1020304 as libc::c_int as u64_0,
     0x60a0d1118202c4b as libc::c_longlong as u64_0,
     0x7acaf7fff5dcb782 as libc::c_longlong as u64_0,
     0x481d0c0503030304 as libc::c_longlong as u64_0,
     0x102 as libc::c_int as u64_0,
     0x305070a10172349 as libc::c_longlong as u64_0,
     0x88e5ffe9d2d9e3d6 as libc::c_ulonglong,
     0x9c49120504040404 as libc::c_ulonglong, 0x1 as libc::c_int as u64_0,
     0x205070a0f192b62 as libc::c_longlong as u64_0,
     0xb9f7e2a6a29fc4eb as libc::c_ulonglong,
     0xcd771d0503040304 as libc::c_ulonglong, 0x10101 as libc::c_int as u64_0,
     0x205080b1224428d as libc::c_longlong as u64_0,
     0xe6e8ab92c1d1e3e3 as libc::c_ulonglong,
     0xae5a160503030303 as libc::c_ulonglong, 0x10202 as libc::c_int as u64_0,
     0x306090c173781db as libc::c_longlong as u64_0,
     0xf6cdbcd9e7deab7a as libc::c_ulonglong,
     0x47210d0503030304 as libc::c_longlong as u64_0,
     0x10203 as libc::c_int as u64_0,
     0x5090d132b6bd2fe as libc::c_longlong as u64_0,
     0xf2d0c7b69492593a as libc::c_ulonglong,
     0x24150b0403030303 as libc::c_longlong as u64_0,
     0x20305 as libc::c_int as u64_0,
     0x9111c3566b4f3e2 as libc::c_longlong as u64_0,
     0xb98d6a5b5e623122 as libc::c_ulonglong,
     0x1910090403020202 as libc::c_longlong as u64_0,
     0x1030507 as libc::c_int as u64_0,
     0xe235098d9f0c673 as libc::c_longlong as u64_0,
     0x473c3a4253422119 as libc::c_longlong as u64_0,
     0x130d070302020201 as libc::c_longlong as u64_0,
     0x10204060b as libc::c_longlong as u64_0,
     0x1749a7e8f9c36232 as libc::c_longlong as u64_0,
     0x2826314756271410 as libc::c_longlong as u64_0,
     0xc09050201010201 as libc::c_longlong as u64_0,
     0x10102050810 as libc::c_longlong as u64_0,
     0x255fc0f5d2682d26 as libc::c_longlong as u64_0,
     0x22212e483e160d0a as libc::c_longlong as u64_0,
     0x805030101010101 as libc::c_longlong as u64_0,
     0x10102060b1b as libc::c_longlong as u64_0,
     0x3b87e6df8a362522 as libc::c_longlong as u64_0,
     0x21232b3d1e0d0a08 as libc::c_longlong as u64_0,
     0x504020101010101 as libc::c_longlong as u64_0,
     0x10103070f27 as libc::c_longlong as u64_0,
     0x50a4e7a4713f241f as libc::c_longlong as u64_0,
     0x20273533140a0705 as libc::c_longlong as u64_0,
     0x403020000000000 as libc::c_longlong as u64_0,
     0x103081131 as libc::c_longlong as u64_0,
     0x5dade07360582b1d as libc::c_longlong as u64_0,
     0x20323c200b070603 as libc::c_longlong as u64_0,
     0x302010000000000 as libc::c_longlong as u64_0,
     0x1010203091235 as libc::c_longlong as u64_0,
     0x65badb544d6a4824 as libc::c_longlong as u64_0,
     0x2c3c270d08060402 as libc::c_longlong as u64_0,
     0x201000000000000 as libc::c_longlong as u64_0,
     0x1010203091339 as libc::c_longlong as u64_0,
     0x70ced84a4256683d as libc::c_longlong as u64_0,
     0x372e150b08060402 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0x1020409133c as libc::c_longlong as u64_0,
     0x73d0d64d4353805d as libc::c_longlong as u64_0,
     0x371c100b08060402 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0x101020409143d as libc::c_longlong as u64_0,
     0x78dee57751507a6a as libc::c_longlong as u64_0,
     0x2a17110b08060402 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0x204081233 as libc::c_longlong as u64_0,
     0x69c9f4d9a3757d83 as libc::c_longlong as u64_0,
     0x311a140d0a070401 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0x103070d1f as libc::c_longlong as u64_0,
     0x3c7ac2ebeec49594 as libc::c_longlong as u64_0,
     0x462118120d090602 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0x10102050a12 as libc::c_longlong as u64_0,
     0x203c689fe2f6e8d2 as libc::c_longlong as u64_0,
     0x80311d16100c0702 as libc::c_ulonglong,
     0x101000000000000 as libc::c_longlong as u64_0,
     0x1010103060a as libc::c_longlong as u64_0,
     0xf1b33588fcdf3f4 as libc::c_longlong as u64_0,
     0xbe57241a140e0803 as libc::c_ulonglong,
     0x201000000000000 as libc::c_longlong as u64_0,
     0x101030507 as libc::c_longlong as u64_0,
     0xa111d2e497abdf3 as libc::c_longlong as u64_0,
     0xefa4391f19110a04 as libc::c_ulonglong,
     0x302000000000000 as libc::c_longlong as u64_0,
     0x1020305 as libc::c_int as u64_0,
     0x80d131a2b4f8edf as libc::c_longlong as u64_0,
     0xfada57271d150d06 as libc::c_ulonglong,
     0x403010000000000 as libc::c_longlong as u64_0,
     0x10203 as libc::c_int as u64_0,
     0x5090d121c3d7fea as libc::c_longlong as u64_0,
     0xffee843422191008 as libc::c_ulonglong,
     0x503010000000000 as libc::c_longlong as u64_0,
     0x102 as libc::c_int as u64_0,
     0x306090d16367aed as libc::c_longlong as u64_0,
     0xf8f6b041271d1209 as libc::c_ulonglong,
     0x604010000000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x205070c183981e7 as libc::c_longlong as u64_0,
     0xd6f7d9562b1f140b as libc::c_ulonglong,
     0x705020000000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x205080d1e4196e2 as libc::c_longlong as u64_0,
     0xb8f3e96a2f20150c as libc::c_ulonglong,
     0x805020000000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x20508102951b4d7 as libc::c_longlong as u64_0,
     0xacf1f18c3822170e as libc::c_ulonglong,
     0x906030000000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x2060911305abab7 as libc::c_longlong as u64_0,
     0xa9f2f39c3b23180f as libc::c_ulonglong,
     0xa07030000000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x2060a143867ae90 as libc::c_longlong as u64_0,
     0xa0f2f39f3c241a10 as libc::c_ulonglong,
     0xb07040100000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x3070c184889a479 as libc::c_longlong as u64_0,
     0x9bf1f4a33e261b11 as libc::c_ulonglong,
     0xb07040101010101 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x3080f2058a89472 as libc::c_longlong as u64_0,
     0x9ef2f6ae41271b10 as libc::c_ulonglong,
     0xc07040101010101 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x308162c6bb88573 as libc::c_longlong as u64_0,
     0xa4f3f7b543271c11 as libc::c_ulonglong,
     0xc08050201010101 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x309183780c18e7f as libc::c_longlong as u64_0,
     0xa9f3f8ba45281c11 as libc::c_ulonglong,
     0xc08040100010101 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x308172f69afbbb6 as libc::c_longlong as u64_0,
     0xc5f6f8b447281b10 as libc::c_ulonglong,
     0xb08040100000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x308101e447ec6f1 as libc::c_longlong as u64_0,
     0xf6ffeb8d3e281c10 as libc::c_ulonglong,
     0xa06030000000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x3070c152f5ba7f3 as libc::c_longlong as u64_0,
     0xfffacb5d36291b0f as libc::c_ulonglong,
     0xa06030000000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x3070c112554aaf3 as libc::c_longlong as u64_0,
     0xfff7c05f38291b0f as libc::c_ulonglong,
     0xa07030000000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x3080c153373e0ff as libc::c_longlong as u64_0,
     0xfffcdb873f291b0f as libc::c_ulonglong,
     0xa07030000000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x3070c163d7feeff as libc::c_longlong as u64_0,
     0xfffeeb9d44291b0e as libc::c_ulonglong,
     0xa06030000000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x3070c153a7deeff as libc::c_longlong as u64_0,
     0xfffeea9541291b0e as libc::c_ulonglong,
     0x905030000000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x3070a133577eaff as libc::c_longlong as u64_0,
     0xfffde3883e271a0d as libc::c_ulonglong,
     0x905030000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x20609112c6bdafd as libc::c_longlong as u64_0,
     0xfffcd9743825180c as libc::c_ulonglong,
     0x805020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x205090d1f58bcf7 as libc::c_longlong as u64_0,
     0xfffcd8693523160c as libc::c_ulonglong,
     0x705020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x103070b17489ff3 as libc::c_longlong as u64_0,
     0xfffac84c291f140a as libc::c_ulonglong,
     0x705020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x1030609123a84e1 as libc::c_longlong as u64_0,
     0xfaeca93b21191008 as libc::c_ulonglong,
     0x603010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x10205060d265391 as libc::c_longlong as u64_0,
     0xb6954f2119130c06 as libc::c_ulonglong,
     0x503020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1020408142839 as libc::c_longlong as u64_0,
     0x42311c15110d0904 as libc::c_longlong as u64_0,
     0x303010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10305080d11 as libc::c_longlong as u64_0,
     0x12110f0e0c090603 as libc::c_longlong as u64_0,
     0x302010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1010203050708 as libc::c_longlong as u64_0,
     0x90a0a0a08060402 as libc::c_longlong as u64_0,
     0x201000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10102030404 as libc::c_longlong as u64_0,
     0x606060605040201 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x101 as libc::c_int as u64_0,
     0x202020201010000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0];
#[no_mangle]
pub static mut gDorfLightning7Tex: [u64_0; 384] =
    [0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x10101 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x103 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1010405 as libc::c_int as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x101 as libc::c_int as u64_0,
     0x103070803 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x203 as libc::c_int as u64_0,
     0x2060a0400 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x205 as libc::c_int as u64_0,
     0x200000207040000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x307 as libc::c_int as u64_0,
     0x702010102000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1030a as libc::c_int as u64_0,
     0x15120c0503020201 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10513 as libc::c_int as u64_0,
     0x2c3c301509050303 as libc::c_longlong as u64_0,
     0x201000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1020617 as libc::c_int as u64_0,
     0x33574f29180a0504 as libc::c_longlong as u64_0,
     0x302010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1020614 as libc::c_int as u64_0,
     0x285471491e0c0706 as libc::c_longlong as u64_0,
     0x403010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10203040a as libc::c_longlong as u64_0,
     0x1b42737741190d0d as libc::c_longlong as u64_0,
     0x705030100000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10202030508 as libc::c_longlong as u64_0,
     0x163260998341191b as libc::c_longlong as u64_0,
     0x1109040100000001 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1010204060a0d as libc::c_longlong as u64_0,
     0x16264e92ae7b271b as libc::c_longlong as u64_0,
     0x1b12060201010001 as libc::c_longlong as u64_0,
     0x10101 as libc::c_int as u64_0,
     0x102040609141d17 as libc::c_longlong as u64_0,
     0x11194485be9e331a as libc::c_longlong as u64_0,
     0x1711080201010101 as libc::c_longlong as u64_0,
     0x1020303 as libc::c_int as u64_0,
     0x4060b1220342812 as libc::c_longlong as u64_0,
     0xc14396cb2a23819 as libc::c_longlong as u64_0,
     0x130e0e0702010101 as libc::c_longlong as u64_0,
     0x10102030405 as libc::c_longlong as u64_0,
     0x91220354641190a as libc::c_longlong as u64_0,
     0xc14315aa0a64b1e as libc::c_longlong as u64_0,
     0x1513100b04020102 as libc::c_longlong as u64_0,
     0x1020304060a as libc::c_longlong as u64_0,
     0x1637688254240d0b as libc::c_longlong as u64_0,
     0xd13294a88ad642f as libc::c_longlong as u64_0,
     0x24200d0402020202 as libc::c_longlong as u64_0,
     0x2030405080d21 as libc::c_longlong as u64_0,
     0x488acfab3c120d0c as libc::c_longlong as u64_0,
     0xe12213d7db9814c as libc::c_longlong as u64_0,
     0x2c16080302020202 as libc::c_longlong as u64_0,
     0x1020507090f1f50 as libc::c_longlong as u64_0,
     0xa3e3d3621c120f0c as libc::c_ulonglong,
     0xe141f3a7bb9923e as libc::c_longlong as u64_0,
     0x1b0e080302020201 as libc::c_longlong as u64_0,
     0x2040709102352a3 as libc::c_longlong as u64_0,
     0xe8d77c2a18141010 as libc::c_ulonglong,
     0x15243c5f8ba39a3a as libc::c_longlong as u64_0,
     0x180e080302020202 as libc::c_longlong as u64_0,
     0x305090f26509de7 as libc::c_longlong as u64_0,
     0xe183371f1a161216 as libc::c_ulonglong,
     0x234b64616b829133 as libc::c_longlong as u64_0,
     0x160f080302020202 as libc::c_longlong as u64_0,
     0x509101f58a1e6ea as libc::c_longlong as u64_0,
     0x9a41231d1915131c as libc::c_ulonglong,
     0x336553375482882c as libc::c_longlong as u64_0,
     0x150e080302020101 as libc::c_longlong as u64_0,
     0x7122a61b5ecf0ab as libc::c_longlong as u64_0,
     0x5029211b16131321 as libc::c_longlong as u64_0,
     0x3d522a254e7b7d28 as libc::c_longlong as u64_0,
     0x130d070302020202 as libc::c_longlong as u64_0,
     0xa1f50b5f1f9c45d as libc::c_longlong as u64_0,
     0x30271f1914141628 as libc::c_longlong as u64_0,
     0x4f3e1c244c746822 as libc::c_longlong as u64_0,
     0x110c070302020202 as libc::c_longlong as u64_0,
     0xe2b64ccfdf5b95c as libc::c_longlong as u64_0,
     0x3529201813171e2d as libc::c_longlong as u64_0,
     0x4a25192a587c551d as libc::c_longlong as u64_0,
     0x100b070302020201 as libc::c_longlong as u64_0,
     0xb214892e3ffecac as libc::c_longlong as u64_0,
     0x6032251d19202f42 as libc::c_longlong as u64_0,
     0x3f2a3e62928d3f16 as libc::c_longlong as u64_0,
     0xe0a060201010102 as libc::c_longlong as u64_0,
     0x9142c58a5e8fff1 as libc::c_longlong as u64_0,
     0xbd653224222a415e as libc::c_ulonglong,
     0x4a558cab95501b11 as libc::c_longlong as u64_0,
     0xd09050202020101 as libc::c_longlong as u64_0,
     0x70f1c3368adecff as libc::c_longlong as u64_0,
     0xf6c2723c30385583 as libc::c_ulonglong,
     0x96b5aa743f1f1410 as libc::c_ulonglong,
     0xc08050201010101 as libc::c_longlong as u64_0,
     0x70d15204173bdf0 as libc::c_longlong as u64_0,
     0xfffbdc976d628cc6 as libc::c_ulonglong,
     0xc6a560332019130f as libc::c_ulonglong,
     0xb07040101010101 as libc::c_longlong as u64_0,
     0x50a101624437bbd as libc::c_longlong as u64_0,
     0xebfffff1e2cfe5da as libc::c_ulonglong,
     0x95502e261f19130e as libc::c_ulonglong,
     0xa07040100000101 as libc::c_longlong as u64_0,
     0x4080c101726406b as libc::c_longlong as u64_0,
     0xa7e3f8fffff9f6c2 as libc::c_ulonglong,
     0x7a493028221a130e as libc::c_longlong as u64_0,
     0xa07040101000101 as libc::c_longlong as u64_0,
     0x205080b0f16223b as libc::c_longlong as u64_0,
     0x5e8dc1f2fffffff0 as libc::c_longlong as u64_0,
     0xc9934b2f241c150e as libc::c_ulonglong,
     0x907040101010101 as libc::c_longlong as u64_0,
     0x1030506090f1620 as libc::c_longlong as u64_0,
     0x2f4b7fc4ebfdffff as libc::c_longlong as u64_0,
     0xfae3965e35211911 as libc::c_ulonglong,
     0xc09050202010201 as libc::c_longlong as u64_0,
     0x20304070c1116 as libc::c_longlong as u64_0,
     0x1e2e476a98d6f2ff as libc::c_longlong as u64_0,
     0xfffff1d88c3d2219 as libc::c_ulonglong,
     0x130d070302020202 as libc::c_longlong as u64_0,
     0x2020305080c0f as libc::c_longlong as u64_0,
     0x131b2635547eabe4 as libc::c_longlong as u64_0,
     0xf9ffffffde813d25 as libc::c_ulonglong,
     0x1a120a0402030303 as libc::c_longlong as u64_0,
     0x10203040608 as libc::c_longlong as u64_0,
     0xc11161d2b3e5b91 as libc::c_longlong as u64_0,
     0xccf9fffffbce8350 as libc::c_ulonglong,
     0x2c190d0403040404 as libc::c_longlong as u64_0,
     0x101020304 as libc::c_longlong as u64_0,
     0x70b10151d2a406f as libc::c_longlong as u64_0,
     0xb1f3fffffefae2bb as libc::c_ulonglong,
     0x7337110505050504 as libc::c_longlong as u64_0,
     0x10303 as libc::c_int as u64_0,
     0x5090d121a263a75 as libc::c_longlong as u64_0,
     0xc6f8fff4f4fefcee as libc::c_ulonglong,
     0xbe6f1d0604050404 as libc::c_ulonglong, 0x10203 as libc::c_int as u64_0,
     0x4080c1018284494 as libc::c_longlong as u64_0,
     0xe9fff5d2dffafffb as libc::c_ulonglong,
     0xd7791c0604050505 as libc::c_ulonglong, 0x102 as libc::c_int as u64_0,
     0x4070b0f19356cc6 as libc::c_longlong as u64_0,
     0xf9fffff5fafffef1 as libc::c_ulonglong,
     0xca6e1d0705050505 as libc::c_ulonglong, 0x10304 as libc::c_int as u64_0,
     0x70b10192c61adf0 as libc::c_longlong as u64_0,
     0xfffffffef7eedfa9 as libc::c_ulonglong,
     0x7132110605050505 as libc::c_longlong as u64_0,
     0x20509 as libc::c_int as u64_0,
     0xd14224073bef0ff as libc::c_longlong as u64_0,
     0xfff7efe0bb957d4f as libc::c_ulonglong,
     0x331b0e0504040404 as libc::c_longlong as u64_0,
     0x101050912 as libc::c_longlong as u64_0,
     0x1f3f6caee2fafff1 as libc::c_longlong as u64_0,
     0xe2b78c716866462b as libc::c_ulonglong,
     0x1f150b0404040404 as libc::c_longlong as u64_0,
     0x102060c1f as libc::c_longlong as u64_0,
     0x46a4e0f7ffffe09b as libc::c_longlong as u64_0,
     0x6f5144425761301d as libc::c_longlong as u64_0,
     0x160f090403030303 as libc::c_longlong as u64_0,
     0x10203081130 as libc::c_longlong as u64_0,
     0x6ad5fdffffda8b54 as libc::c_longlong as u64_0,
     0x42393c475e482117 as libc::c_longlong as u64_0,
     0x110c070302030203 as libc::c_longlong as u64_0,
     0x10102040a153a as libc::c_longlong as u64_0,
     0x75d3f9ffdf804537 as libc::c_longlong as u64_0,
     0x33323a5058291611 as libc::c_longlong as u64_0,
     0xd09050201010201 as libc::c_longlong as u64_0,
     0x10202050c1946 as libc::c_longlong as u64_0,
     0x99ebffeeab4a332e as libc::c_ulonglong,
     0x2b2d3a5a4419100c as libc::c_longlong as u64_0,
     0x906030101010101 as libc::c_longlong as u64_0,
     0x10202050e2063 as libc::c_longlong as u64_0,
     0xd5fdf2deb4552f28 as libc::c_ulonglong,
     0x2831424e260e0a08 as libc::c_longlong as u64_0,
     0x604020000000000 as libc::c_longlong as u64_0,
     0x1020306102670 as libc::c_longlong as u64_0,
     0xeaf6c0a8af73352b as libc::c_ulonglong,
     0x304d5333120a0806 as libc::c_longlong as u64_0,
     0x403010000000000 as libc::c_longlong as u64_0,
     0x1020407122b75 as libc::c_longlong as u64_0,
     0xecf29f74878a4736 as libc::c_ulonglong,
     0x495634140b080604 as libc::c_longlong as u64_0,
     0x302010000000000 as libc::c_longlong as u64_0,
     0x102040816357b as libc::c_longlong as u64_0,
     0xedf08a556385614a as libc::c_ulonglong,
     0x5236170d09070503 as libc::c_longlong as u64_0,
     0x201010000000000 as libc::c_longlong as u64_0,
     0x1020408193c7f as libc::c_longlong as u64_0,
     0xeeea70405a839960 as libc::c_ulonglong,
     0x371b110c09060401 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x1030407173879 as libc::c_longlong as u64_0,
     0xeced87525b7a9e5c as libc::c_ulonglong,
     0x2619120d09070401 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x1020306122c68 as libc::c_longlong as u64_0,
     0xd5fae5b592909a6f as libc::c_ulonglong,
     0x2b1b140e0a070402 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x10203050d1c41 as libc::c_longlong as u64_0,
     0x82c8f0f7e0a89295 as libc::c_ulonglong,
     0x381e160f0b070502 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1010204091224 as libc::c_longlong as u64_0,
     0x3e6eabe5f9e8c7bc as libc::c_longlong as u64_0,
     0x4b2319120d090502 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x1010103070c12 as libc::c_longlong as u64_0,
     0x1e385e8fc9f8f7e6 as libc::c_longlong as u64_0,
     0x7c311e16110c0703 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0x1010205080b as libc::c_longlong as u64_0,
     0x101a2b4786dbf8fd as libc::c_longlong as u64_0,
     0xcb59251b150f0904 as libc::c_ulonglong,
     0x201000000000000 as libc::c_longlong as u64_0,
     0x20407 as libc::c_int as u64_0,
     0xa101a294f97d0f9 as libc::c_longlong as u64_0,
     0xef91352019120b04 as libc::c_ulonglong,
     0x202010000000000 as libc::c_longlong as u64_0,
     0x10204 as libc::c_int as u64_0,
     0x60b121a3369baf6 as libc::c_longlong as u64_0,
     0xfccc53271e150d06 as libc::c_ulonglong,
     0x403010000000000 as libc::c_longlong as u64_0,
     0x10202 as libc::c_int as u64_0,
     0x5090e162b59b2f2 as libc::c_longlong as u64_0,
     0xffe97a3021180f08 as libc::c_ulonglong,
     0x503010000000000 as libc::c_longlong as u64_0,
     0x102 as libc::c_int as u64_0,
     0x4070c132a4b97d4 as libc::c_longlong as u64_0,
     0xf2f5ab3d241a1109 as libc::c_ulonglong,
     0x604020000000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x3060b122c4c95b6 as libc::c_longlong as u64_0,
     0xcdf8d95a281d130b as libc::c_ulonglong,
     0x705030000000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x3060a143663a99e as libc::c_longlong as u64_0,
     0xa0f0ef8a3520160d as libc::c_ulonglong,
     0x906030000000000 as libc::c_longlong as u64_0,
     0x102 as libc::c_int as u64_0,
     0x3070c18417c9073 as libc::c_longlong as u64_0,
     0x8beff6ad3d22180f as libc::c_ulonglong,
     0xb07040100000000 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x408102154a4775b as libc::c_longlong as u64_0,
     0x87effac645251b11 as libc::c_ulonglong,
     0xd09040101010001 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x40a19346aa85852 as libc::c_longlong as u64_0,
     0x86eefdda4c271d14 as libc::c_ulonglong,
     0xf0a050201010101 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x40c24508c9b4553 as libc::c_longlong as u64_0,
     0x8aefffe552291e15 as libc::c_ulonglong,
     0x100a050201010100 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x40d3279ad843e59 as libc::c_longlong as u64_0,
     0x90f0ffe7572b1f16 as libc::c_ulonglong,
     0x100b050201010101 as libc::c_longlong as u64_0,
     0x10202 as libc::c_int as u64_0,
     0x40e3784baa36468 as libc::c_longlong as u64_0,
     0x95f0ffe95e2f2016 as libc::c_ulonglong,
     0x100b050201010101 as libc::c_longlong as u64_0,
     0x102 as libc::c_int as u64_0,
     0x50e295687b1b1ac as libc::c_longlong as u64_0,
     0xbaf4ffe4572e2115 as libc::c_ulonglong,
     0x100a050201010101 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x40b182d538eccf1 as libc::c_longlong as u64_0,
     0xf4fffcc6502e2116 as libc::c_ulonglong,
     0x100a060201010102 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x50a121e3761a9f1 as libc::c_longlong as u64_0,
     0xffffeb86412e2117 as libc::c_ulonglong,
     0x100b060202020101 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x50a1019356dc0f8 as libc::c_longlong as u64_0,
     0xfffff09f5d302217 as libc::c_ulonglong,
     0x100b060201020202 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x50a111f55aceeff as libc::c_longlong as u64_0,
     0xfff2ede2a3402317 as libc::c_ulonglong,
     0x110c060201010202 as libc::c_longlong as u64_0,
     0x102 as libc::c_int as u64_0,
     0x50c132573e2ffff as libc::c_longlong as u64_0,
     0xecbac4ecbd4d251a as libc::c_ulonglong,
     0x130d070302020202 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x60d172d80eefff7 as libc::c_longlong as u64_0,
     0xc288a8e7c8642a1c as libc::c_ulonglong,
     0x140e070302020202 as libc::c_longlong as u64_0,
     0x10203 as libc::c_int as u64_0,
     0x60f1e3b8cf0fff2 as libc::c_longlong as u64_0,
     0xa16e9bdfd582301e as libc::c_ulonglong,
     0x160f080302020202 as libc::c_longlong as u64_0,
     0x10203 as libc::c_int as u64_0,
     0x71024479af1ffef as libc::c_longlong as u64_0,
     0x8b6599d4df9e361f as libc::c_ulonglong,
     0x1810080302020202 as libc::c_longlong as u64_0,
     0x10203 as libc::c_int as u64_0,
     0x7122a58bdf8ffeb as libc::c_longlong as u64_0,
     0x746098cde6b13b20 as libc::c_longlong as u64_0,
     0x1810090202020202 as libc::c_longlong as u64_0,
     0x20203 as libc::c_int as u64_0,
     0x8133166d5fcffe9 as libc::c_longlong as u64_0,
     0x69608dbfe8bf4a22 as libc::c_longlong as u64_0,
     0x1910090302020202 as libc::c_longlong as u64_0,
     0x10203 as libc::c_int as u64_0,
     0x7143570e4feffe9 as libc::c_longlong as u64_0,
     0x6d628db7ebcb6228 as libc::c_longlong as u64_0,
     0x1911090302020202 as libc::c_longlong as u64_0,
     0x20204 as libc::c_int as u64_0,
     0x713346fdffeffee as libc::c_longlong as u64_0,
     0x9073a9cdf0ca6128 as libc::c_ulonglong,
     0x1911080202020202 as libc::c_longlong as u64_0,
     0x10202 as libc::c_int as u64_0,
     0x6112a58b6f6ffff as libc::c_longlong as u64_0,
     0xe1b6daf2eda6401e as libc::c_ulonglong,
     0x160f070202010101 as libc::c_longlong as u64_0,
     0x10203 as libc::c_int as u64_0,
     0x50e1f3e8ce8ffff as libc::c_longlong as u64_0,
     0xfff3fbfbcd65291b as libc::c_ulonglong,
     0x140d070202020101 as libc::c_longlong as u64_0,
     0x10202 as libc::c_int as u64_0,
     0x50b142868bdf7ff as libc::c_longlong as u64_0,
     0xffffffec9b402318 as libc::c_ulonglong,
     0x110b060201010101 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x4090f1b468ae8ff as libc::c_longlong as u64_0,
     0xfffff8b5562b1e13 as libc::c_ulonglong,
     0xe09050101010101 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x3070b122b61bff8 as libc::c_longlong as u64_0,
     0xffffd2642e211810 as libc::c_ulonglong,
     0xb07040100010101 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x205080c183d85d6 as libc::c_longlong as u64_0,
     0xe8d0762e2019120b as libc::c_ulonglong,
     0x704020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x10305080d21405a as libc::c_longlong as u64_0,
     0x5848291b16110c07 as libc::c_longlong as u64_0,
     0x403010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x20305070d1419 as libc::c_longlong as u64_0,
     0x1a161412100c0805 as libc::c_longlong as u64_0,
     0x302010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1030405080b0d as libc::c_longlong as u64_0,
     0xe0e0e0d0b080503 as libc::c_longlong as u64_0,
     0x201010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1010103040507 as libc::c_longlong as u64_0,
     0x707070706050302 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10102 as libc::c_int as u64_0,
     0x202020202010100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0];
#[no_mangle]
pub static mut gDorfLightning6Tex: [u64_0; 384] =
    [0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1010204010000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1030602000000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x2050401000000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1030505010000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1030406050200 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1050505080601 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1030704040201 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x20a0a020102 as libc::c_longlong as u64_0,
     0x201000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x207111c080304 as libc::c_longlong as u64_0,
     0x606040100000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x10411243f1b0605 as libc::c_longlong as u64_0,
     0x506080a01010101 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10000 as libc::c_int as u64_0,
     0x2061b345b380d08 as libc::c_longlong as u64_0,
     0x90d151a06010001 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x208213e6c5d170c as libc::c_longlong as u64_0,
     0xc11161003010101 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x101020100000101 as libc::c_longlong as u64_0,
     0x3092141757d2a10 as libc::c_longlong as u64_0,
     0xd0e090302010101 as libc::c_longlong as u64_0,
     0x1010101 as libc::c_int as u64_0,
     0x206060200010101 as libc::c_longlong as u64_0,
     0x40a1f3e77914015 as libc::c_longlong as u64_0,
     0xd0a050202020201 as libc::c_longlong as u64_0,
     0x101020405 as libc::c_longlong as u64_0,
     0x1011060101020202 as libc::c_longlong as u64_0,
     0x50b1e407ba35c1e as libc::c_longlong as u64_0,
     0x100a060202020201 as libc::c_longlong as u64_0,
     0x1020203060815 as libc::c_longlong as u64_0,
     0x1d0e030202020303 as libc::c_longlong as u64_0,
     0x60b224881b47f2e as libc::c_longlong as u64_0,
     0x140c070302010102 as libc::c_longlong as u64_0,
     0x10203050b111f2b as libc::c_longlong as u64_0,
     0x1706040303030408 as libc::c_longlong as u64_0,
     0xc1220458ac09336 as libc::c_longlong as u64_0,
     0x150d070302020202 as libc::c_longlong as u64_0,
     0x103060b17313b23 as libc::c_longlong as u64_0,
     0xa0504030304050c as libc::c_longlong as u64_0,
     0x152624438fc69a36 as libc::c_longlong as u64_0,
     0x170e080302020302 as libc::c_longlong as u64_0,
     0x2050c1b3b533111 as libc::c_longlong as u64_0,
     0x907060404050810 as libc::c_longlong as u64_0,
     0x222d253f86c89f33 as libc::c_longlong as u64_0,
     0x1710090403030202 as libc::c_longlong as u64_0,
     0x40a1e5085682110 as libc::c_longlong as u64_0,
     0xe0c0a08080b1322 as libc::c_longlong as u64_0,
     0x4128203977bf9e32 as libc::c_longlong as u64_0,
     0x1810090302030303 as libc::c_longlong as u64_0,
     0x50e3488d9a9481b as libc::c_longlong as u64_0,
     0x15120e0c0c13243b as libc::c_longlong as u64_0,
     0x4323264b90c69a30 as libc::c_longlong as u64_0,
     0x1710090303030303 as libc::c_longlong as u64_0,
     0x5103586e3edaa51 as libc::c_longlong as u64_0,
     0x23181310111c3c58 as libc::c_longlong as u64_0,
     0x3530579bcdba7d2b as libc::c_longlong as u64_0,
     0x160f080302030203 as libc::c_longlong as u64_0,
     0x7102a5aa7eff1b6 as libc::c_longlong as u64_0,
     0x5e2619151b2e5f75 as libc::c_longlong as u64_0,
     0x5276aabca75f331c as libc::c_longlong as u64_0,
     0x140e080302020202 as libc::c_longlong as u64_0,
     0x60c172f6ec9f7f2 as libc::c_longlong as u64_0,
     0xb25d33242d4481a8 as libc::c_ulonglong,
     0xb0c0a6633b221a17 as libc::c_ulonglong,
     0x120c070302020102 as libc::c_longlong as u64_0,
     0x50a111e427eccfb as libc::c_longlong as u64_0,
     0xf7d89c645c75b8cc as libc::c_ulonglong,
     0xb27b492b201b1612 as libc::c_ulonglong,
     0xe0a060201020102 as libc::c_longlong as u64_0,
     0x4080d15284a8ddf as libc::c_longlong as u64_0,
     0xfffff2e1d7dbd3af as libc::c_ulonglong,
     0x8c562d221d18140f as libc::c_ulonglong,
     0xb08040101010201 as libc::c_longlong as u64_0,
     0x2070b10182d5092 as libc::c_longlong as u64_0,
     0xdcf3fffefceeb18c as libc::c_ulonglong,
     0x7e703f251d17110c as libc::c_longlong as u64_0,
     0x806030101010101 as libc::c_longlong as u64_0,
     0x205080c111c2f4c as libc::c_longlong as u64_0,
     0x79a7e3fbfffff1e1 as libc::c_longlong as u64_0,
     0xb19a6636251d160f as libc::c_ulonglong,
     0xb07040101010102 as libc::c_longlong as u64_0,
     0x10406090c121a26 as libc::c_longlong as u64_0,
     0x3a5b8ecaebfaffff as libc::c_longlong as u64_0,
     0xf3e7ae6839241b13 as libc::c_ulonglong,
     0xe0a060201020202 as libc::c_longlong as u64_0,
     0x1030405080c1016 as libc::c_longlong as u64_0,
     0x1f2f43648fcbefff as libc::c_longlong as u64_0,
     0xfffff3d083352118 as libc::c_ulonglong,
     0x110c070202020202 as libc::c_longlong as u64_0,
     0x1020304070b0f as libc::c_longlong as u64_0,
     0x141c2737537cade6 as libc::c_longlong as u64_0,
     0xfbfffffdd761301d as libc::c_ulonglong,
     0x160f080303020202 as libc::c_longlong as u64_0,
     0x1020305080b as libc::c_longlong as u64_0,
     0xf151c243042619f as libc::c_longlong as u64_0,
     0xdefbfffff3a26839 as libc::c_ulonglong,
     0x20130a0403020302 as libc::c_longlong as u64_0,
     0x10102030608 as libc::c_longlong as u64_0,
     0xb10161b23304784 as libc::c_longlong as u64_0,
     0xd6fafffff8edcb8f as libc::c_ulonglong,
     0x4f1e0d0403030304 as libc::c_longlong as u64_0,
     0x1020406 as libc::c_int as u64_0,
     0x80c10141c2f4e9c as libc::c_longlong as u64_0,
     0xebfffff2e1f8f6d8 as libc::c_ulonglong,
     0xa13f130504040404 as libc::c_ulonglong,
     0x1020305 as libc::c_int as u64_0,
     0x70b0e131d3b7adc as libc::c_longlong as u64_0,
     0xfffff9e4ecfefee8 as libc::c_ulonglong,
     0xad3c120504040404 as libc::c_ulonglong,
     0x101030508 as libc::c_longlong as u64_0,
     0xb11171e3364b6f7 as libc::c_longlong as u64_0,
     0xfffffff9fefbe7bf as libc::c_ulonglong,
     0x74270f0504040404 as libc::c_longlong as u64_0,
     0x1010205080b as libc::c_longlong as u64_0,
     0x111f30456ca7ebff as libc::c_longlong as u64_0,
     0xfffffef4e6c48661 as libc::c_ulonglong,
     0x36190d0404030304 as libc::c_longlong as u64_0,
     0x10103070b12 as libc::c_longlong as u64_0,
     0x204778ade0f4ffff as libc::c_longlong as u64_0,
     0xfdf0dca6725a4732 as libc::c_ulonglong,
     0x20150b0403030303 as libc::c_longlong as u64_0,
     0x10102050b1632 as libc::c_longlong as u64_0,
     0x6cb6e6f5fffffff0 as libc::c_longlong as u64_0,
     0xd498715849483f26 as libc::c_ulonglong,
     0x1911090303030302 as libc::c_longlong as u64_0,
     0x1030307112865 as libc::c_longlong as u64_0,
     0xcef6ffffffffe19f as libc::c_ulonglong,
     0x6c4d413c3f462b1a as libc::c_longlong as u64_0,
     0x140e080302030202 as libc::c_longlong as u64_0,
     0x203040918397b as libc::c_longlong as u64_0,
     0xe7ffffffffdd8f58 as libc::c_ulonglong,
     0x423835343e391d13 as libc::c_longlong as u64_0,
     0xe0a060202020201 as libc::c_longlong as u64_0,
     0x203050a1d4281 as libc::c_longlong as u64_0,
     0xdbfaffffe98e523f as libc::c_ulonglong,
     0x362f303a4924110c as libc::c_longlong as u64_0,
     0x906030101010101 as libc::c_longlong as u64_0,
     0x204060c2255ab as libc::c_longlong as u64_0,
     0xeffffffad671453a as libc::c_ulonglong,
     0x33303a4b3e160c08 as libc::c_longlong as u64_0,
     0x605020101010101 as libc::c_longlong as u64_0,
     0x305070e2e77e3 as libc::c_longlong as u64_0,
     0xfffff5fee8954c38 as libc::c_ulonglong,
     0x37455b572a0f0a07 as libc::c_longlong as u64_0,
     0x503020101000101 as libc::c_longlong as u64_0,
     0x205080f3281ef as libc::c_longlong as u64_0,
     0xfff5c7ecf7bf623f as libc::c_ulonglong,
     0x4b655d2e120b0805 as libc::c_longlong as u64_0,
     0x402020000000000 as libc::c_longlong as u64_0,
     0x2050810307ce7 as libc::c_longlong as u64_0,
     0xffee95baeeda8059 as libc::c_ulonglong,
     0x6e5f31120c090603 as libc::c_longlong as u64_0,
     0x201010000000000 as libc::c_longlong as u64_0,
     0x306080f2d6cc8 as libc::c_longlong as u64_0,
     0xf8ed8390d0ebb17d as libc::c_ulonglong,
     0x6033190f0b080603 as libc::c_longlong as u64_0,
     0x201010000000000 as libc::c_longlong as u64_0,
     0x205070e2861b9 as libc::c_longlong as u64_0,
     0xf7ec7f74afedc576 as libc::c_ulonglong,
     0x391e160d09070502 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0x204070c2354a6 as libc::c_longlong as u64_0,
     0xf4f2a177a0dfbb58 as libc::c_ulonglong,
     0x281c140c08050402 as libc::c_longlong as u64_0,
     0x201000000000000 as libc::c_longlong as u64_0,
     0x203050b1d4287 as libc::c_longlong as u64_0,
     0xe6ffe9c2c5c8b95f as libc::c_ulonglong,
     0x2b1c140c08050301 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x1030408142e61 as libc::c_longlong as u64_0,
     0xb1e7fff6eabeb465 as libc::c_ulonglong,
     0x2d1f160e09060301 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10304070e1931 as libc::c_longlong as u64_0,
     0x5896dffeffeed683 as libc::c_longlong as u64_0,
     0x372319100a070401 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x101030509101b as libc::c_longlong as u64_0,
     0x2e5390dbf7ffeda3 as libc::c_longlong as u64_0,
     0x43261c120c090501 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x203070b10 as libc::c_longlong as u64_0,
     0x182d4f89c4f6ffe0 as libc::c_longlong as u64_0,
     0x73301f140e0a0602 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0x10205080b as libc::c_longlong as u64_0,
     0x111c2f4c8bdbfcf2 as libc::c_longlong as u64_0,
     0x9d3e2319130d0803 as libc::c_ulonglong,
     0x201000000000000 as libc::c_longlong as u64_0,
     0x102040608 as libc::c_longlong as u64_0,
     0xc141e3066b4f6fe as libc::c_longlong as u64_0,
     0xd8672b1e17100a04 as libc::c_ulonglong,
     0x302000000000000 as libc::c_longlong as u64_0,
     0x1020305 as libc::c_int as u64_0,
     0x80e15234f93f0ff as libc::c_longlong as u64_0,
     0xf09a39231b140c05 as libc::c_ulonglong,
     0x302010000000000 as libc::c_longlong as u64_0,
     0x10203 as libc::c_int as u64_0,
     0x60b111d4a91ecf9 as libc::c_longlong as u64_0,
     0xffd860291f170e07 as libc::c_ulonglong,
     0x403010000000000 as libc::c_longlong as u64_0,
     0x10202 as libc::c_int as u64_0,
     0x50a0f1b4991c8d8 as libc::c_longlong as u64_0,
     0xf9f4a13a22191108 as libc::c_ulonglong,
     0x504020000000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x4090e1b4b9496b1 as libc::c_longlong as u64_0,
     0xeefdd148261c130b as libc::c_ulonglong,
     0x705020000000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x308101f4ea17688 as libc::c_longlong as u64_0,
     0xc7f8e7632d1f150c as libc::c_ulonglong,
     0x905020000000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x308162b56935369 as libc::c_longlong as u64_0,
     0xa9f4ee813421170f as libc::c_ulonglong,
     0xa07030000000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x30a204069793d5d as libc::c_longlong as u64_0,
     0x9af1f39f3b231911 as libc::c_ulonglong,
     0xc08030100000000 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x30b285382663759 as libc::c_longlong as u64_0,
     0x91f0fac447261b12 as libc::c_ulonglong,
     0xd09040100010101 as libc::c_longlong as u64_0,
     0x102 as libc::c_int as u64_0,
     0x40d2c6197653a53 as libc::c_longlong as u64_0,
     0x89edffe35b2a1d14 as libc::c_ulonglong,
     0xf0a050201010101 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x40c295a969f7460 as libc::c_longlong as u64_0,
     0x82e5fdeb712f1f16 as libc::c_ulonglong,
     0x100b060202020101 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x40a1a35609cb6b1 as libc::c_longlong as u64_0,
     0xb2edfef28c382117 as libc::c_ulonglong,
     0x100b060201020102 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x3080e1a37649dda as libc::c_longlong as u64_0,
     0xf1feffe175342218 as libc::c_ulonglong,
     0x120c070301020202 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x3070c12274883d3 as libc::c_longlong as u64_0,
     0xf9fff4b65a332419 as libc::c_ulonglong,
     0x120d070302020202 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x3080d162e5dafef as libc::c_longlong as u64_0,
     0xfffff0d08e4d261a as libc::c_ulonglong,
     0x130d070302020202 as libc::c_longlong as u64_0,
     0x102 as libc::c_int as u64_0,
     0x40a101b4796e6ff as libc::c_longlong as u64_0,
     0xffe3c3d4c7802f1a as libc::c_ulonglong,
     0x140e070201020202 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x50b13236bd8feff as libc::c_longlong as u64_0,
     0xe28d738fbcaa421d as libc::c_ulonglong,
     0x150e080302020202 as libc::c_longlong as u64_0,
     0x10203 as libc::c_int as u64_0,
     0x60d193083edfff4 as libc::c_longlong as u64_0,
     0xa4585873a7b95e22 as libc::c_ulonglong,
     0x160f080302020202 as libc::c_longlong as u64_0,
     0x20204 as libc::c_int as u64_0,
     0x8112448a6f3ffe6 as libc::c_longlong as u64_0,
     0x68434f6d9ec7892f as libc::c_longlong as u64_0,
     0x170f080302020302 as libc::c_longlong as u64_0,
     0x20305 as libc::c_int as u64_0,
     0xa173875e0fffdd7 as libc::c_longlong as u64_0,
     0x583f42558ac0983c as libc::c_longlong as u64_0,
     0x1a10090403020303 as libc::c_longlong as u64_0,
     0x20406 as libc::c_int as u64_0,
     0xc1e4d9cf1fff6ac as libc::c_longlong as u64_0,
     0x4e3937467eb7a855 as libc::c_longlong as u64_0,
     0x1e11090402020302 as libc::c_longlong as u64_0,
     0x20507 as libc::c_int as u64_0,
     0xf2967cffbffea78 as libc::c_longlong as u64_0,
     0x4338323966a0b774 as libc::c_longlong as u64_0,
     0x25110a0302030303 as libc::c_longlong as u64_0,
     0x30508 as libc::c_int as u64_0,
     0x153b7deafffee367 as libc::c_longlong as u64_0,
     0x433c384371a1c998 as libc::c_longlong as u64_0,
     0x32140a0403030303 as libc::c_longlong as u64_0,
     0x30508 as libc::c_int as u64_0,
     0x184486effffee883 as libc::c_longlong as u64_0,
     0x4b434766a0d0da9b as libc::c_longlong as u64_0,
     0x2e120a0403030303 as libc::c_longlong as u64_0,
     0x30507 as libc::c_int as u64_0,
     0x123374defffff8be as libc::c_longlong as u64_0,
     0x65536eb6e2eab967 as libc::c_longlong as u64_0,
     0x22130b0403030303 as libc::c_longlong as u64_0,
     0x20407 as libc::c_int as u64_0,
     0xd2454a3eeffffec as libc::c_longlong as u64_0,
     0xa17b9fe9f7c96d32 as libc::c_ulonglong,
     0x1b120a0403030303 as libc::c_longlong as u64_0,
     0x10306 as libc::c_int as u64_0,
     0xb193b73cdfbffff as libc::c_longlong as u64_0,
     0xeacee9fbd67d3520 as libc::c_ulonglong,
     0x170f090302020203 as libc::c_longlong as u64_0,
     0x20305 as libc::c_int as u64_0,
     0x913274b9ceeffff as libc::c_longlong as u64_0,
     0xfff8fee09646261a as libc::c_ulonglong,
     0x140d070202010202 as libc::c_longlong as u64_0,
     0x10204 as libc::c_int as u64_0,
     0x80f1b337cd5fcff as libc::c_longlong as u64_0,
     0xfffff3a456312216 as libc::c_ulonglong,
     0x100a060201010102 as libc::c_longlong as u64_0,
     0x103 as libc::c_int as u64_0,
     0x60d15255da5f2ff as libc::c_longlong as u64_0,
     0xffffeb7b412e2013 as libc::c_ulonglong,
     0xd08040101010000 as libc::c_longlong as u64_0,
     0x102 as libc::c_int as u64_0,
     0x50b12205496f1ff as libc::c_longlong as u64_0,
     0xffffea733e2c1e11 as libc::c_ulonglong,
     0xc08040100010101 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x4090f1c4c8ef0ff as libc::c_longlong as u64_0,
     0xfffee8753d2a1c0f as libc::c_ulonglong,
     0xa07040100000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x3080d174082eeff as libc::c_longlong as u64_0,
     0xffffea6e39281a0d as libc::c_ulonglong,
     0x906030000000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x3070b123072e4ff as libc::c_longlong as u64_0,
     0xffffea633223160b as libc::c_ulonglong,
     0x705020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x205080d2158bcf8 as libc::c_longlong as u64_0,
     0xffffd24c271d1209 as libc::c_ulonglong,
     0x604020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x1030609143a84d9 as libc::c_longlong as u64_0,
     0xecd7812d1d160e07 as libc::c_ulonglong,
     0x503010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x10203050b1f3f61 as libc::c_longlong as u64_0,
     0x6959301b15100a05 as libc::c_longlong as u64_0,
     0x302010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10204070c141a as libc::c_longlong as u64_0,
     0x1e1a15120f0c0804 as libc::c_longlong as u64_0,
     0x301000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1020204070a0d as libc::c_longlong as u64_0,
     0xe0d0e0d0a080502 as libc::c_longlong as u64_0,
     0x201000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10103030507 as libc::c_longlong as u64_0,
     0x707070706040201 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x10101 as libc::c_int as u64_0,
     0x202020202010000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0];
#[no_mangle]
pub static mut gDorfLightning5Tex: [u64_0; 384] =
    [0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x1010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x1020200000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x1030301000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1010100 as libc::c_int as u64_0,
     0x204070300000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x102020405 as libc::c_longlong as u64_0,
     0x606030000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1020506090b as libc::c_longlong as u64_0,
     0x602000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x102040b0b0703 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x2040a0a130e0403 as libc::c_longlong as u64_0,
     0x201010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x101 as libc::c_int as u64_0,
     0x40c1a121b1f0805 as libc::c_longlong as u64_0,
     0x302010101010001 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10204 as libc::c_int as u64_0,
     0x9141a1d37491708 as libc::c_longlong as u64_0,
     0x504020101010101 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10308 as libc::c_int as u64_0,
     0x131f19244c73320d as libc::c_longlong as u64_0,
     0x706030101010001 as libc::c_longlong as u64_0,
     0x101000000 as libc::c_longlong as u64_0,
     0x10101000103060f as libc::c_longlong as u64_0,
     0x211b1b3063975619 as libc::c_longlong as u64_0,
     0xb08040101010101 as libc::c_longlong as u64_0,
     0x10102010101 as libc::c_longlong as u64_0,
     0x101010103060b13 as libc::c_longlong as u64_0,
     0x241b264b83b07927 as libc::c_longlong as u64_0,
     0x100a060201020202 as libc::c_longlong as u64_0,
     0x20609040202 as libc::c_longlong as u64_0,
     0x20203030509101a as libc::c_longlong as u64_0,
     0x1e2c58a1d1cb872f as libc::c_longlong as u64_0,
     0x140d070302020202 as libc::c_longlong as u64_0,
     0x1050d17140704 as libc::c_longlong as u64_0,
     0x5050606080e1a33 as libc::c_longlong as u64_0,
     0x4278bee9eac2762a as libc::c_longlong as u64_0,
     0x140d070302020202 as libc::c_longlong as u64_0,
     0x1040a1c2e1f0d as libc::c_longlong as u64_0,
     0x90a0b0d12203d6e as libc::c_longlong as u64_0,
     0xa4d6e6d9b87f3d1b as libc::c_ulonglong,
     0x120c060202010201 as libc::c_longlong as u64_0,
     0x2030818344434 as libc::c_longlong as u64_0,
     0x201513182a5190d0 as libc::c_longlong as u64_0,
     0xe9e2bd8756331d16 as libc::c_ulonglong,
     0x110b060201010101 as libc::c_longlong as u64_0,
     0x10307132a5378 as libc::c_longlong as u64_0,
     0x7653354478bedfe0 as libc::c_longlong as u64_0,
     0xc38e533b2c221a15 as libc::c_ulonglong,
     0x100a050101010102 as libc::c_longlong as u64_0,
     0x103060e1f4491 as libc::c_longlong as u64_0,
     0xdcdebcc3d8ddc096 as libc::c_ulonglong,
     0x6e5e372b251f1913 as libc::c_longlong as u64_0,
     0xe0a050101010101 as libc::c_longlong as u64_0,
     0x1030407142e6a as libc::c_longlong as u64_0,
     0xc2eef7f9f3c37d59 as libc::c_ulonglong,
     0x51604b31241e1811 as libc::c_longlong as u64_0,
     0xd08050101010101 as libc::c_longlong as u64_0,
     0x10203060d1b39 as libc::c_longlong as u64_0,
     0x6aa7e5fafff4cf93 as libc::c_longlong as u64_0,
     0x706b704d2a1c150f as libc::c_longlong as u64_0,
     0xb07040101010101 as libc::c_longlong as u64_0,
     0x10203050a1222 as libc::c_longlong as u64_0,
     0x3a5f95caebfdfcef as libc::c_longlong as u64_0,
     0xdbaf9d78421f150f as libc::c_ulonglong,
     0xa07040101010101 as libc::c_longlong as u64_0,
     0x1020304090d13 as libc::c_longlong as u64_0,
     0x1b28416795d5eefc as libc::c_longlong as u64_0,
     0xfef4ecc57d2f1b13 as libc::c_ulonglong,
     0xe0a050202020102 as libc::c_longlong as u64_0,
     0x10103070a0d as libc::c_longlong as u64_0,
     0x121a26384d7197d5 as libc::c_longlong as u64_0,
     0xf2fffff8d25d291a as libc::c_ulonglong,
     0x140e070302020202 as libc::c_longlong as u64_0,
     0x101040609 as libc::c_longlong as u64_0,
     0xd12181f293c588d as libc::c_longlong as u64_0,
     0xbff5fffff095512a as libc::c_ulonglong,
     0x1911090402020302 as libc::c_longlong as u64_0,
     0x20305 as libc::c_int as u64_0,
     0x80c11161d2a3f7a as libc::c_longlong as u64_0,
     0xc3f7ffffefd8a964 as libc::c_ulonglong,
     0x2e140b0403030202 as libc::c_longlong as u64_0,
     0x20405 as libc::c_int as u64_0,
     0x80c111620355eaf as libc::c_longlong as u64_0,
     0xedffffe5b7cbd8b0 as libc::c_ulonglong,
     0x5d1e0b0403030303 as libc::c_longlong as u64_0,
     0x1030406 as libc::c_int as u64_0,
     0x80d13192a509ce7 as libc::c_longlong as u64_0,
     0xfffff4cbc9e4eab7 as libc::c_ulonglong,
     0x521a0b0403030303 as libc::c_longlong as u64_0,
     0x1020406 as libc::c_int as u64_0,
     0x90f1622458ce0ff as libc::c_longlong as u64_0,
     0xffffffefe1c6ac7a as libc::c_ulonglong,
     0x2e160c0403030303 as libc::c_longlong as u64_0,
     0x10102030609 as libc::c_longlong as u64_0,
     0xd16264884dbffff as libc::c_longlong as u64_0,
     0xfff5e6c68c6c6f5e as libc::c_ulonglong,
     0x28150b0403030303 as libc::c_longlong as u64_0,
     0x1010203070d16 as libc::c_longlong as u64_0,
     0x263f62a9e3ffffff as libc::c_longlong as u64_0,
     0xe2aa7459494c603d as libc::c_ulonglong,
     0x1b11090303030202 as libc::c_longlong as u64_0,
     0x10203050d1b3a as libc::c_longlong as u64_0,
     0x83c5e4f6ffffffda as libc::c_ulonglong,
     0x8758423a3c434622 as libc::c_ulonglong,
     0x130d070302020202 as libc::c_longlong as u64_0,
     0x1020408152f6b as libc::c_longlong as u64_0,
     0xdafbffffffffd686 as libc::c_ulonglong,
     0x493a312c30372312 as libc::c_longlong as u64_0,
     0xd09050201010201 as libc::c_longlong as u64_0,
     0x204060c1f4589 as libc::c_longlong as u64_0,
     0xeefffffffcd37547 as libc::c_ulonglong,
     0x3b312922211c110c as libc::c_longlong as u64_0,
     0x906030101010101 as libc::c_longlong as u64_0,
     0x103070a143170c1 as libc::c_longlong as u64_0,
     0xf9fffffcd57a443b as libc::c_ulonglong,
     0x332b262627150d09 as libc::c_longlong as u64_0,
     0x704020101000000 as libc::c_longlong as u64_0,
     0x105090f2757b4f0 as libc::c_longlong as u64_0,
     0xfffffff7c4603e34 as libc::c_ulonglong,
     0x2c262826190c0906 as libc::c_longlong as u64_0,
     0x503010000000000 as libc::c_longlong as u64_0,
     0x2060b164182e7ff as libc::c_longlong as u64_0,
     0xfffffffde18c4530 as libc::c_ulonglong,
     0x2a2e2d1d0c080604 as libc::c_longlong as u64_0,
     0x302010000000000 as libc::c_longlong as u64_0,
     0x2060c17478af0ff as libc::c_longlong as u64_0,
     0xfffdf7fff9c7633a as libc::c_ulonglong,
     0x3f40260f08060402 as libc::c_longlong as u64_0,
     0x201000000000000 as libc::c_longlong as u64_0,
     0x1070d174486eeff as libc::c_longlong as u64_0,
     0xfdeccff7fde28655 as libc::c_ulonglong,
     0x4f31160b07050302 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0x1070d173d7ce7fe as libc::c_longlong as u64_0,
     0xfde3aee9fff6ba6c as libc::c_ulonglong,
     0x3d1f130b07050301 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x2070d14316bd0fb as libc::c_longlong as u64_0,
     0xfde396bff6f9c153 as libc::c_ulonglong,
     0x291d130a06040200 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x2060b112451a9f4 as libc::c_longlong as u64_0,
     0xffeda4aff3f8c254 as libc::c_ulonglong,
     0x2a1e140b07050300 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x105090d19408fe8 as libc::c_longlong as u64_0,
     0xffffe8d6f8facc6b as libc::c_ulonglong,
     0x3121160c07050200 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x103070a122d64b2 as libc::c_longlong as u64_0,
     0xebfffff8fffcda83 as libc::c_ulonglong,
     0x3622170c08050300 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x305080d1a3568 as libc::c_longlong as u64_0,
     0xaae5fffffffeec9f as libc::c_ulonglong,
     0x3f24190d09060300 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x2040609121f39 as libc::c_longlong as u64_0,
     0x5d97e0fbfffff09d as libc::c_longlong as u64_0,
     0x3d261b100a060300 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10304070d141f as libc::c_longlong as u64_0,
     0x32548ecff3fff6b2 as libc::c_longlong as u64_0,
     0x45281c120c080401 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1010204090e13 as libc::c_longlong as u64_0,
     0x1b2a487bbbf4fdd5 as libc::c_longlong as u64_0,
     0x5f2d1f150f0b0602 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0x10205080b as libc::c_longlong as u64_0,
     0x101a2c498adefdf0 as libc::c_longlong as u64_0,
     0x9b3e2218120c0703 as libc::c_ulonglong,
     0x101000000000000 as libc::c_longlong as u64_0,
     0x101030608 as libc::c_longlong as u64_0,
     0xc141e316cc2f7ff as libc::c_longlong as u64_0,
     0xdd682a1c160f0904 as libc::c_ulonglong,
     0x301010000000000 as libc::c_longlong as u64_0,
     0x1030406 as libc::c_int as u64_0,
     0xa10172761b3f4ff as libc::c_longlong as u64_0,
     0xf19638211a130b05 as libc::c_ulonglong,
     0x302010000000000 as libc::c_longlong as u64_0,
     0x10204 as libc::c_int as u64_0,
     0x70c122054a4e2f4 as libc::c_longlong as u64_0,
     0xfdd15f291f160e06 as libc::c_ulonglong,
     0x402020000000000 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x5090f1c4b9dafc1 as libc::c_longlong as u64_0,
     0xf6f2a43c22191008 as libc::c_ulonglong,
     0x503010000000000 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x40911204da07b97 as libc::c_longlong as u64_0,
     0xe7ffdd55271c130a as libc::c_ulonglong,
     0x704010000000000 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x409162b56924f74 as libc::c_longlong as u64_0,
     0xbcf6ec732f1f150c as libc::c_ulonglong,
     0x805020100000101 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x40a1d3b66753d61 as libc::c_longlong as u64_0,
     0x9cf1f3993921170f as libc::c_ulonglong,
     0xa07030100000101 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x40b234c7e523054 as libc::c_longlong as u64_0,
     0x8aedf7b942241a11 as libc::c_ulonglong,
     0xc08040201000101 as libc::c_longlong as u64_0,
     0x102 as libc::c_int as u64_0,
     0x30a255494603d51 as libc::c_longlong as u64_0,
     0x7fe3fde05f2a1d13 as libc::c_longlong as u64_0,
     0xe09050202010201 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x30a224a8a958577 as libc::c_longlong as u64_0,
     0x85dcfcf087342016 as libc::c_ulonglong,
     0x100b060201020202 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x3081427436ba6c7 as libc::c_longlong as u64_0,
     0xc4edfef6a23c2218 as libc::c_ulonglong,
     0x120d070202020202 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x3070d15274476bc as libc::c_longlong as u64_0,
     0xedfeffed9139241a as libc::c_ulonglong,
     0x130d070201020202 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x4080d13203864b3 as libc::c_longlong as u64_0,
     0xf4fff8d6843f251a as libc::c_ulonglong,
     0x140e070302020202 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x5090f182e5da8e9 as libc::c_longlong as u64_0,
     0xfff7decdb884421c as libc::c_ulonglong,
     0x140e070302020202 as libc::c_longlong as u64_0,
     0x10203 as libc::c_int as u64_0,
     0x60b13224fa1e8ff as libc::c_longlong as u64_0,
     0xf3c58f8598a87c2b as libc::c_ulonglong,
     0x140e080302020202 as libc::c_longlong as u64_0,
     0x20304 as libc::c_int as u64_0,
     0x70f1e3a88e2fff4 as libc::c_longlong as u64_0,
     0xb56a4e5b6f90973e as libc::c_ulonglong,
     0x160e080301020202 as libc::c_longlong as u64_0,
     0x20406 as libc::c_int as u64_0,
     0xa143064c9fbfbbe as libc::c_longlong as u64_0,
     0x623a343b4f6ca15d as libc::c_longlong as u64_0,
     0x1c0d070201020101 as libc::c_longlong as u64_0,
     0x20407 as libc::c_int as u64_0,
     0xd1d4795ebffdd69 as libc::c_longlong as u64_0,
     0x352e28283b559f78 as libc::c_longlong as u64_0,
     0x220e070302020202 as libc::c_longlong as u64_0,
     0x3060a as libc::c_int as u64_0,
     0x122d6cdafff5ae45 as libc::c_longlong as u64_0,
     0x2f2821223656a79a as libc::c_longlong as u64_0,
     0x350f070302020202 as libc::c_longlong as u64_0,
     0x104080c as libc::c_int as u64_0,
     0x1b458feefff18c3f as libc::c_longlong as u64_0,
     0x2e261e1c2a5096ab as libc::c_longlong as u64_0,
     0x5716070302020202 as libc::c_longlong as u64_0,
     0x205090f as libc::c_int as u64_0,
     0x256cd5fdffda5b34 as libc::c_longlong as u64_0,
     0x2d261d171d4382b8 as libc::c_longlong as u64_0,
     0x7c1e080403020303 as libc::c_longlong as u64_0,
     0x102060b15 as libc::c_longlong as u64_0,
     0x3288eefff3aa4533 as libc::c_longlong as u64_0,
     0x2d251d171f4081c1 as libc::c_longlong as u64_0,
     0x9b2c0a0403030303 as libc::c_ulonglong,
     0x10103070c19 as libc::c_longlong as u64_0,
     0x40a2f6fff2a64c34 as libc::c_longlong as u64_0,
     0x2d2621223665afc6 as libc::c_longlong as u64_0,
     0x8c2a0a0403030303 as libc::c_ulonglong,
     0x102060c18 as libc::c_longlong as u64_0,
     0x3a92ecffffe18846 as libc::c_longlong as u64_0,
     0x352f303f6cb6d4a1 as libc::c_longlong as u64_0,
     0x4e16090303020303 as libc::c_longlong as u64_0,
     0x1050912 as libc::c_int as u64_0,
     0x2b71c7fafffed984 as libc::c_longlong as u64_0,
     0x4843578dc2d5a358 as libc::c_longlong as u64_0,
     0x2210080302020303 as libc::c_longlong as u64_0,
     0x104070c as libc::c_int as u64_0,
     0x1d498de4fffffdd3 as libc::c_longlong as u64_0,
     0x846a97dce9b25225 as libc::c_ulonglong,
     0x1710080302020203 as libc::c_longlong as u64_0,
     0x1040609 as libc::c_int as u64_0,
     0x112959aaecfffffe as libc::c_longlong as u64_0,
     0xdfb8dff7c66c2d1d as libc::c_ulonglong,
     0x160f070302020201 as libc::c_longlong as u64_0,
     0x30507 as libc::c_int as u64_0,
     0xd1a396dbcf6ffff as libc::c_longlong as u64_0,
     0xfff3fde78a3e251b as libc::c_ulonglong,
     0x150e070201010101 as libc::c_longlong as u64_0,
     0x20405 as libc::c_int as u64_0,
     0x912234189e1feff as libc::c_longlong as u64_0,
     0xfffffbd35c312419 as libc::c_ulonglong,
     0x130d070302010101 as libc::c_longlong as u64_0,
     0x10203 as libc::c_int as u64_0,
     0x60d182a63b1f5ff as libc::c_longlong as u64_0,
     0xfffffbcc55322417 as libc::c_ulonglong,
     0x100b060201020101 as libc::c_longlong as u64_0,
     0x102 as libc::c_int as u64_0,
     0x40a111d4688e5ff as libc::c_longlong as u64_0,
     0xfffff9c453332416 as libc::c_ulonglong,
     0x100b060201010100 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x3080e152f62b4f5 as libc::c_longlong as u64_0,
     0xfffffacb5a342517 as libc::c_ulonglong,
     0x100b060201010001 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x2060b1120478ae4 as libc::c_longlong as u64_0,
     0xffffffe77b3a2618 as libc::c_ulonglong,
     0x110b060200010001 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x205080c183667b9 as libc::c_longlong as u64_0,
     0xf6fffff498412618 as libc::c_ulonglong,
     0x110b060200000100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x104070b15305dac as libc::c_longlong as u64_0,
     0xf3fffff0873c2517 as libc::c_ulonglong,
     0x110b060201010101 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x104080b163775d7 as libc::c_longlong as u64_0,
     0xfdffffe362332316 as libc::c_ulonglong,
     0x100a060201010101 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x104080c18418eed as libc::c_longlong as u64_0,
     0xfffffac752302114 as libc::c_ulonglong,
     0xe09050101010101 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x104080b1b50aff6 as libc::c_longlong as u64_0,
     0xfffff4a5472d1f12 as libc::c_ulonglong,
     0xd09050201010101 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x104070b1e5bcdfb as libc::c_longlong as u64_0,
     0xfffff0863c271a0f as libc::c_ulonglong,
     0xa07040101010101 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x104060a1e5bd0fd as libc::c_longlong as u64_0,
     0xffffdc602d20150c as libc::c_ulonglong,
     0x906030101010100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x10305091a49a3e4 as libc::c_longlong as u64_0,
     0xf1df993921181109 as libc::c_ulonglong,
     0x604020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x1020407112b5781 as libc::c_longlong as u64_0,
     0x886a3b1e17110c06 as libc::c_ulonglong,
     0x403010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10304080f1822 as libc::c_longlong as u64_0,
     0x251e1715110d0905 as libc::c_longlong as u64_0,
     0x302000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1020305080c0f as libc::c_longlong as u64_0,
     0x100f0f0f0c090603 as libc::c_longlong as u64_0,
     0x201000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1010103040608 as libc::c_longlong as u64_0,
     0x809090806040302 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1010203 as libc::c_int as u64_0,
     0x303030302020100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0];
#[no_mangle]
pub static mut gDorfLightning4Tex: [u64_0; 384] =
    [0 as libc::c_int as u64_0, 0x100 as libc::c_int as u64_0,
     0x1000102020301 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x101 as libc::c_int as u64_0,
     0x101010204020100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x1040302000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x101 as libc::c_int as u64_0,
     0x104080301000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x102 as libc::c_int as u64_0,
     0x407040102010000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x103 as libc::c_int as u64_0,
     0x705010102020000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x104 as libc::c_int as u64_0,
     0x803010103070300 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x101010304 as libc::c_longlong as u64_0,
     0x40304060a0f0802 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1 as libc::c_int as u64_0,
     0x10202030305090f as libc::c_longlong as u64_0,
     0xa111c252d260f03 as libc::c_longlong as u64_0,
     0x201000000000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x2020304060a1628 as libc::c_longlong as u64_0,
     0x253b5c644b220904 as libc::c_longlong as u64_0,
     0x202010000000000 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x30406090e1d3862 as libc::c_longlong as u64_0,
     0x78867045220f0705 as libc::c_longlong as u64_0,
     0x302010000000000 as libc::c_longlong as u64_0,
     0x10203 as libc::c_int as u64_0,
     0x50c1624385f87a2 as libc::c_longlong as u64_0,
     0x98713b1b0f0c0805 as libc::c_ulonglong,
     0x402010000000000 as libc::c_longlong as u64_0,
     0x1020408 as libc::c_int as u64_0,
     0xf244776a0b8b08d as libc::c_longlong as u64_0,
     0x5b3319110e0c0805 as libc::c_longlong as u64_0,
     0x403010000000000 as libc::c_longlong as u64_0,
     0x1040b1c as libc::c_int as u64_0,
     0x397ab4cbbf966542 as libc::c_longlong as u64_0,
     0x2e2618110e0b0804 as libc::c_longlong as u64_0,
     0x302010000000000 as libc::c_longlong as u64_0,
     0x2060e29 as libc::c_int as u64_0,
     0x5fc5f0e8b56a3d2c as libc::c_longlong as u64_0,
     0x241f18120e0b0704 as libc::c_longlong as u64_0,
     0x302010000000000 as libc::c_longlong as u64_0,
     0x102050d29 as libc::c_longlong as u64_0,
     0x62cef7f9e1ad7b4c as libc::c_longlong as u64_0,
     0x32252017110d0906 as libc::c_longlong as u64_0,
     0x403020000000000 as libc::c_longlong as u64_0,
     0x2050b1c as libc::c_int as u64_0,
     0x3d89c4e3f4f1d8ac as libc::c_longlong as u64_0,
     0x7b4e342318120d09 as libc::c_longlong as u64_0,
     0x704030100010101 as libc::c_longlong as u64_0,
     0x205080e as libc::c_int as u64_0,
     0x1d40648bbee2f2f2 as libc::c_longlong as u64_0,
     0xdbb08658311b130d as libc::c_ulonglong,
     0xa06040201020102 as libc::c_longlong as u64_0,
     0x104070b as libc::c_int as u64_0,
     0x122130425b7bb2e1 as libc::c_longlong as u64_0,
     0xf3f5e7bf81442314 as libc::c_ulonglong,
     0xd09050202020102 as libc::c_longlong as u64_0,
     0x1030609 as libc::c_int as u64_0,
     0xd141d273446638a as libc::c_longlong as u64_0,
     0xc1f7fff4d3a76f3a as libc::c_ulonglong,
     0x180c070202020202 as libc::c_longlong as u64_0,
     0x30507 as libc::c_int as u64_0,
     0xb10161c232d3b64 as libc::c_longlong as u64_0,
     0xaff2ffedebe6ca8d as libc::c_ulonglong,
     0x4714090302020202 as libc::c_longlong as u64_0,
     0x20305 as libc::c_int as u64_0,
     0x80d11161e2d458e as libc::c_longlong as u64_0,
     0xe1ffeca8bbe3f1d0 as libc::c_ulonglong,
     0x89270c0403020303 as libc::c_ulonglong, 0x20305 as libc::c_int as u64_0,
     0x70a0e121e3b7ada as libc::c_longlong as u64_0,
     0xfffef5d6e9f1efcf as libc::c_ulonglong,
     0x81260d0403030303 as libc::c_ulonglong,
     0x1030507 as libc::c_int as u64_0,
     0xa0e141b316ac0fa as libc::c_longlong as u64_0,
     0xfffff9e9d9b9aa8e as libc::c_ulonglong,
     0x4a1b0d0403030302 as libc::c_longlong as u64_0,
     0x20305080b as libc::c_longlong as u64_0,
     0x1118284172b5f1ff as libc::c_longlong as u64_0,
     0xfde7c59473718f71 as libc::c_ulonglong,
     0x32170c0403030303 as libc::c_longlong as u64_0,
     0x10204070d18 as libc::c_longlong as u64_0,
     0x2a486ca4e0f7fffd as libc::c_longlong as u64_0,
     0xcd845f4c51687f4e as libc::c_ulonglong,
     0x21120a0403030303 as libc::c_longlong as u64_0,
     0x10203050b1735 as libc::c_longlong as u64_0,
     0x77c4e7f4fffffcd3 as libc::c_longlong as u64_0,
     0x73473e3d52715e2c as libc::c_longlong as u64_0,
     0x160f090403030303 as libc::c_longlong as u64_0,
     0x10305070b162c63 as libc::c_longlong as u64_0,
     0xd1fafffffff2c775 as libc::c_ulonglong,
     0x403834374f683619 as libc::c_longlong as u64_0,
     0x120d070303020203 as libc::c_longlong as u64_0,
     0x104070a12264a90 as libc::c_longlong as u64_0,
     0xedffffffe8a7623c as libc::c_ulonglong,
     0x35313038544a1e12 as libc::c_longlong as u64_0,
     0xd09050202020202 as libc::c_longlong as u64_0,
     0x205090f214689dd as libc::c_longlong as u64_0,
     0xffffffeca55e3c33 as libc::c_ulonglong,
     0x2e2c31404824100c as libc::c_longlong as u64_0,
     0x906040202020201 as libc::c_longlong as u64_0,
     0x2070f1d4699e0ff as libc::c_longlong as u64_0,
     0xfffff9cf7c48392f as libc::c_ulonglong,
     0x2c334342240d0b08 as libc::c_longlong as u64_0,
     0x604030101010101 as libc::c_longlong as u64_0,
     0x309152d70dfffff as libc::c_longlong as u64_0,
     0xfff2f8dd934e362f as libc::c_ulonglong,
     0x344a48220c0a0806 as libc::c_longlong as u64_0,
     0x504020100010000 as libc::c_longlong as u64_0,
     0x30b19357eeeffff as libc::c_longlong as u64_0,
     0xf2bad6f4ca703b37 as libc::c_ulonglong,
     0x464c290e0a080604 as libc::c_longlong as u64_0,
     0x302010000000000 as libc::c_longlong as u64_0,
     0x30c18327ceaffff as libc::c_longlong as u64_0,
     0xf2a5aaefe18c4333 as libc::c_ulonglong,
     0x3727120b08060402 as libc::c_longlong as u64_0,
     0x201000000000000 as libc::c_longlong as u64_0,
     0x40d162970d5fcff as libc::c_longlong as u64_0,
     0xf5b39ef0f1b25c2d as libc::c_ulonglong,
     0x22170f0a06050301 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x30c142564b6f6ff as libc::c_longlong as u64_0,
     0xf9cba2effacf6e2e as libc::c_ulonglong,
     0x1f18100906040200 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x30a1221569bf2ff as libc::c_longlong as u64_0,
     0xfee8bceffce08335 as libc::c_ulonglong,
     0x2219100905030200 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x409101c4383e4ff as libc::c_longlong as u64_0,
     0xfffef2fcfef0a143 as libc::c_ulonglong,
     0x261b110905030100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x3080e162e5badea as libc::c_longlong as u64_0,
     0xfffffffffff9c364 as libc::c_ulonglong,
     0x301f140a05040200 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x2060b101c396db1 as libc::c_longlong as u64_0,
     0xebfffffffffbd274 as libc::c_ulonglong,
     0x3422160c07040200 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x104080b12203a6b as libc::c_longlong as u64_0,
     0xb1eafffffffcdf80 as libc::c_ulonglong,
     0x3a25180e08060301 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x205070c15213e as libc::c_longlong as u64_0,
     0x6aace7ffffffeb83 as libc::c_longlong as u64_0,
     0x3d291b0f09070401 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x20305080f1722 as libc::c_longlong as u64_0,
     0x3765a4e7ffffef94 as libc::c_longlong as u64_0,
     0x432d1f120c090502 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10203060c1218 as libc::c_longlong as u64_0,
     0x223c6aaff2fffdd0 as libc::c_longlong as u64_0,
     0x69332317110c0702 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0x1020304080c10 as libc::c_longlong as u64_0,
     0x17264982defdfff4 as libc::c_longlong as u64_0,
     0xad4c281c150f0803 as libc::c_ulonglong,
     0x201000000000000 as libc::c_longlong as u64_0,
     0x10102040709 as libc::c_longlong as u64_0,
     0xf1a335db5f5ffff as libc::c_longlong as u64_0,
     0xe582362019110a04 as libc::c_ulonglong,
     0x302010000000000 as libc::c_longlong as u64_0,
     0x1030406 as libc::c_int as u64_0,
     0xb162d53a4f3ffff as libc::c_longlong as u64_0,
     0xfbc65f281d150d06 as libc::c_ulonglong,
     0x303010000000000 as libc::c_longlong as u64_0,
     0x1020405 as libc::c_int as u64_0,
     0x9132a51a2f2f6f2 as libc::c_longlong as u64_0,
     0xfff1a63e21180f08 as libc::c_ulonglong,
     0x504020000000000 as libc::c_longlong as u64_0,
     0x10304 as libc::c_int as u64_0,
     0x7112952a1dfb8b3 as libc::c_longlong as u64_0,
     0xebffe05f291b120a as libc::c_ulonglong,
     0x704020000000000 as libc::c_longlong as u64_0,
     0x10203 as libc::c_int as u64_0,
     0x60f2a549cc27883 as libc::c_longlong as u64_0,
     0xc3f8ec77301f160c as libc::c_ulonglong,
     0x805030000000000 as libc::c_longlong as u64_0,
     0x10203 as libc::c_int as u64_0,
     0x50f2b5897ad5167 as libc::c_longlong as u64_0,
     0x9ef1f4a03b22190f as libc::c_ulonglong,
     0xb07040100000000 as libc::c_longlong as u64_0,
     0x10202 as libc::c_int as u64_0,
     0x50e2d5d9da24a5a as libc::c_longlong as u64_0,
     0x8feffac648251b12 as libc::c_ulonglong,
     0xd08040101010100 as libc::c_longlong as u64_0,
     0x10202 as libc::c_int as u64_0,
     0x40c28589a9d625a as libc::c_longlong as u64_0,
     0x84e5fee3642b1e15 as libc::c_ulonglong,
     0xf0a050201010100 as libc::c_longlong as u64_0,
     0x202 as libc::c_int as u64_0,
     0x40b1f3c607f8f89 as libc::c_longlong as u64_0,
     0x9adbfaf294372118 as libc::c_ulonglong,
     0x110c060201010101 as libc::c_longlong as u64_0,
     0x202 as libc::c_int as u64_0,
     0x409131f2c4776aa as libc::c_longlong as u64_0,
     0xd9f8fff8b13e221a as libc::c_ulonglong,
     0x130c060202010201 as libc::c_longlong as u64_0,
     0x10202 as libc::c_int as u64_0,
     0x4080d131d33568e as libc::c_longlong as u64_0,
     0xd5f9fff6b040241b as libc::c_ulonglong,
     0x140e070201020202 as libc::c_longlong as u64_0,
     0x102 as libc::c_int as u64_0,
     0x4080c111d325bac as libc::c_longlong as u64_0,
     0xeffffbeaae57311f as libc::c_ulonglong,
     0x150f080302020202 as libc::c_longlong as u64_0,
     0x10203 as libc::c_int as u64_0,
     0x5090e173061a5e9 as libc::c_longlong as u64_0,
     0xffeed0b5a38d6937 as libc::c_ulonglong,
     0x180f080302020202 as libc::c_longlong as u64_0,
     0x10304 as libc::c_int as u64_0,
     0x70d192e67b7ecff as libc::c_longlong as u64_0,
     0xe1a27d8477708c65 as libc::c_ulonglong,
     0x1f0e080302020202 as libc::c_longlong as u64_0,
     0x20305 as libc::c_int as u64_0,
     0x9122a58b7f0ffd9 as libc::c_longlong as u64_0,
     0x884e475b5d5b8a7f as libc::c_ulonglong,
     0x230d070202020202 as libc::c_longlong as u64_0,
     0x20407 as libc::c_int as u64_0,
     0xc1c438ce7ffd97e as libc::c_longlong as u64_0,
     0x4533343942577681 as libc::c_longlong as u64_0,
     0x260d070302020202 as libc::c_longlong as u64_0,
     0x1040609 as libc::c_int as u64_0,
     0x112b6acefce98440 as libc::c_longlong as u64_0,
     0x312b28262e5c7e93 as libc::c_longlong as u64_0,
     0x3910070302020202 as libc::c_longlong as u64_0,
     0x10205090e as libc::c_longlong as u64_0,
     0x1c489ef0fbc64e2f as libc::c_longlong as u64_0,
     0x2a241f1c24486d8d as libc::c_longlong as u64_0,
     0x4412070202020202 as libc::c_longlong as u64_0,
     0x10102070b14 as libc::c_longlong as u64_0,
     0x2b6fd6fdf2923b2a as libc::c_longlong as u64_0,
     0x241e19151c3b698d as libc::c_longlong as u64_0,
     0x5414070302020201 as libc::c_longlong as u64_0,
     0x10103080f1f as libc::c_longlong as u64_0,
     0x439bf0ffd8582c25 as libc::c_longlong as u64_0,
     0x1f1a141015315d90 as libc::c_longlong as u64_0,
     0x6d19070302020201 as libc::c_longlong as u64_0,
     0x1010103091230 as libc::c_longlong as u64_0,
     0x68cefbf29c3e2b24 as libc::c_longlong as u64_0,
     0x1f19141119315f92 as libc::c_longlong as u64_0,
     0x731c070302020201 as libc::c_longlong as u64_0,
     0x10102040a1540 as libc::c_longlong as u64_0,
     0x87ecffea7d392d26 as libc::c_ulonglong,
     0x211c191f314c8b9e as libc::c_longlong as u64_0,
     0x5916070302020202 as libc::c_longlong as u64_0,
     0x102040a1643 as libc::c_longlong as u64_0,
     0x87eafff6ae543029 as libc::c_ulonglong,
     0x242023304d80ae7e as libc::c_longlong as u64_0,
     0x2c0e070302020201 as libc::c_longlong as u64_0,
     0x102040a1435 as libc::c_longlong as u64_0,
     0x6ac6faffea9c442b as libc::c_longlong as u64_0,
     0x26252f4a85af893b as libc::c_longlong as u64_0,
     0x160e070302020202 as libc::c_longlong as u64_0,
     0x10204091022 as libc::c_longlong as u64_0,
     0x428ae0ffffdf793d as libc::c_longlong as u64_0,
     0x31364e85ba9d481d as libc::c_longlong as u64_0,
     0x130d070202020202 as libc::c_longlong as u64_0,
     0x102060b13 as libc::c_longlong as u64_0,
     0x24519febfffccd7a as libc::c_longlong as u64_0,
     0x495184ceb45b2418 as libc::c_longlong as u64_0,
     0x120c070302020202 as libc::c_longlong as u64_0,
     0x105080c as libc::c_int as u64_0,
     0x153069c1f7fffad0 as libc::c_longlong as u64_0,
     0x8b7ab1ce7a341e16 as libc::c_ulonglong,
     0x110c060202020202 as libc::c_longlong as u64_0,
     0x1030508 as libc::c_int as u64_0,
     0xe1d4285d7fdfffd as libc::c_longlong as u64_0,
     0xe4c4e1c451291f16 as libc::c_ulonglong,
     0x100b060202020202 as libc::c_longlong as u64_0,
     0x20406 as libc::c_int as u64_0,
     0xb13254692e3ffff as libc::c_longlong as u64_0,
     0xfff5f7b94c2d2218 as libc::c_ulonglong,
     0x120d060202020202 as libc::c_longlong as u64_0,
     0x10204 as libc::c_int as u64_0,
     0x80e182a58a3e9ff as libc::c_longlong as u64_0,
     0xfffff3b05032261b as libc::c_ulonglong,
     0x140d070302020202 as libc::c_longlong as u64_0,
     0x10203 as libc::c_int as u64_0,
     0x50a0f183265b3ef as libc::c_longlong as u64_0,
     0xfffffede803e2a1e as libc::c_ulonglong,
     0x160f080302020202 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x2060a0e1c3b70c0 as libc::c_longlong as u64_0,
     0xf5fffff9c3603021 as libc::c_ulonglong,
     0x1810090302020203 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x205080b1427458a as libc::c_longlong as u64_0,
     0xd7fcffffec883b25 as libc::c_ulonglong,
     0x1b120a0402030202 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x1040609101b2e64 as libc::c_longlong as u64_0,
     0xaaf2fffff08b3d28 as libc::c_ulonglong,
     0x1e150c0503030303 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x10305070d17275e as libc::c_longlong as u64_0,
     0xa9f3ffffef823f2c as libc::c_ulonglong,
     0x21170d0504040403 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x203050b152767 as libc::c_longlong as u64_0,
     0xc8f9ffffea763d2f as libc::c_ulonglong,
     0x23180d0504040404 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x203050c172c78 as libc::c_longlong as u64_0,
     0xe7fffffff29b492f as libc::c_ulonglong,
     0x24180d0504040404 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x204060e1d3987 as libc::c_longlong as u64_0,
     0xeffffffffcce6734 as libc::c_ulonglong,
     0x25190e0504040404 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x103050710244899 as libc::c_longlong as u64_0,
     0xf1fffffffde37e3a as libc::c_ulonglong,
     0x251a0e0504040404 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x1030508122c5dbc as libc::c_longlong as u64_0,
     0xf7fffffffdde6f34 as libc::c_ulonglong,
     0x24190d0504040404 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x1040608143678e5 as libc::c_longlong as u64_0,
     0xfffffffff9be4f2a as libc::c_ulonglong,
     0x20160c0403030303 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x104060a174290f0 as libc::c_longlong as u64_0,
     0xffffffffe6873b26 as libc::c_ulonglong,
     0x1c130a0403030202 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x104070c1c51b1f6 as libc::c_longlong as u64_0,
     0xfffffff8b3552f21 as libc::c_ulonglong,
     0x1811090303020203 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x104070c225ecffb as libc::c_longlong as u64_0,
     0xffffffdb6c36281b as libc::c_ulonglong,
     0x130d070201010201 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x104060b215ed1fd as libc::c_longlong as u64_0,
     0xffffeb98432b1f15 as libc::c_ulonglong,
     0xf0a050201010101 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x10305081644a0e2 as libc::c_longlong as u64_0,
     0xf1e3b14e2a20170f as libc::c_ulonglong,
     0xb07030100000101 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x204060e285479 as libc::c_longlong as u64_0,
     0x856743231c160f0a as libc::c_ulonglong,
     0x704020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x2030408101c23 as libc::c_longlong as u64_0,
     0x261f1a18130f0a06 as libc::c_longlong as u64_0,
     0x402010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1020305090d11 as libc::c_longlong as u64_0,
     0x111111100d0a0704 as libc::c_longlong as u64_0,
     0x302010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1010103050709 as libc::c_longlong as u64_0,
     0xa09090908050402 as libc::c_longlong as u64_0,
     0x201000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1020203 as libc::c_int as u64_0,
     0x303020302020100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0];
#[no_mangle]
pub static mut gDorfLightning3Tex: [u64_0; 384] =
    [0 as libc::c_int as u64_0, 0x10100010102 as libc::c_longlong as u64_0,
     0x301000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x10101010104 as libc::c_longlong as u64_0,
     0x201000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1010206 as libc::c_int as u64_0,
     0x200000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x10101010103 as libc::c_longlong as u64_0,
     0x201000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x101010203 as libc::c_longlong as u64_0,
     0x704010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x10204030507 as libc::c_longlong as u64_0,
     0xa06010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x10205070a060304 as libc::c_longlong as u64_0,
     0x505020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x2 as libc::c_int as u64_0,
     0x710120c06030203 as libc::c_longlong as u64_0,
     0x204070300000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x108 as libc::c_int as u64_0,
     0x1829241a0e080505 as libc::c_longlong as u64_0,
     0x60a0e0b03030202 as libc::c_longlong as u64_0,
     0x100010000000000 as libc::c_longlong as u64_0,
     0x1020a as libc::c_int as u64_0,
     0x1a32444d3c29180d as libc::c_longlong as u64_0,
     0xc0d10130b050403 as libc::c_longlong as u64_0,
     0x302010001010001 as libc::c_longlong as u64_0,
     0x10206 as libc::c_int as u64_0,
     0xc182d4f69735e38 as libc::c_longlong as u64_0,
     0x23171314180a0604 as libc::c_longlong as u64_0,
     0x302010101010100 as libc::c_longlong as u64_0,
     0x10203 as libc::c_int as u64_0,
     0x50d192b3e5d7a81 as libc::c_longlong as u64_0,
     0x75583d2929140a08 as libc::c_longlong as u64_0,
     0x604030101010101 as libc::c_longlong as u64_0,
     0x10202 as libc::c_int as u64_0,
     0x3060a0f172b4b76 as libc::c_longlong as u64_0,
     0x9ca4967256371e11 as libc::c_ulonglong,
     0xb07040201010202 as libc::c_longlong as u64_0,
     0x10101 as libc::c_int as u64_0,
     0x20407090e18263b as libc::c_longlong as u64_0,
     0x5880a4b7b08e633a as libc::c_longlong as u64_0,
     0x170b060302020202 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x20406080b0f1623 as libc::c_longlong as u64_0,
     0x365271a3ccceb987 as libc::c_longlong as u64_0,
     0x3912080302020202 as libc::c_longlong as u64_0,
     0x10202 as libc::c_int as u64_0,
     0x305080a0e131b29 as libc::c_longlong as u64_0,
     0x43576aa1e3f4e2a9 as libc::c_longlong as u64_0,
     0x4415080302020203 as libc::c_longlong as u64_0,
     0x1020304 as libc::c_int as u64_0,
     0x6090c1118254061 as libc::c_longlong as u64_0,
     0x8facccebf8e8cc90 as libc::c_ulonglong,
     0x3212090403030203 as libc::c_longlong as u64_0,
     0x10102030406 as libc::c_longlong as u64_0,
     0x90e1727415d9ed4 as libc::c_longlong as u64_0,
     0xeeefefead1a07148 as libc::c_ulonglong,
     0x1e120a0303030302 as libc::c_longlong as u64_0,
     0x1020305080b as libc::c_longlong as u64_0,
     0x10224079bedaf2f6 as libc::c_longlong as u64_0,
     0xe0c59f7759494e3c as libc::c_ulonglong,
     0x20130b0403030303 as libc::c_longlong as u64_0,
     0x10203060c1b30 as libc::c_longlong as u64_0,
     0x4b7eb4e4fafdf5c0 as libc::c_longlong as u64_0,
     0x7857463c38415930 as libc::c_longlong as u64_0,
     0x1911090403030303 as libc::c_longlong as u64_0,
     0x2040509173e8d as libc::c_longlong as u64_0,
     0xcbeaf7fffff6bf68 as libc::c_ulonglong,
     0x372e2b2e3d504720 as libc::c_longlong as u64_0,
     0x140e080302020202 as libc::c_longlong as u64_0,
     0x10305070c225ab8 as libc::c_longlong as u64_0,
     0xf3f9fefff3be6235 as libc::c_ulonglong,
     0x2c28272e4b633316 as libc::c_longlong as u64_0,
     0xf0a060202020202 as libc::c_longlong as u64_0,
     0x204070a122e66b7 as libc::c_longlong as u64_0,
     0xf3feffe9b467382f as libc::c_ulonglong,
     0x2a272c3e5b551d0e as libc::c_longlong as u64_0,
     0xb07040101020101 as libc::c_longlong as u64_0,
     0x2060b11214893e3 as libc::c_longlong as u64_0,
     0xffffec985c3c322c as libc::c_ulonglong,
     0x292e496a5e32110c as libc::c_longlong as u64_0,
     0x906030101010101 as libc::c_longlong as u64_0,
     0x3091324509be2ff as libc::c_longlong as u64_0,
     0xfff1d16b40352e2b as libc::c_ulonglong,
     0x314a696437150c0a as libc::c_longlong as u64_0,
     0x805030101000101 as libc::c_longlong as u64_0,
     0x40b1c3e90e4ffff as libc::c_longlong as u64_0,
     0xe3c6c1763e302c31 as libc::c_ulonglong,
     0x48675c2f150d0a08 as libc::c_longlong as u64_0,
     0x604020000000000 as libc::c_longlong as u64_0,
     0x50e2555aff7ffec as libc::c_longlong as u64_0,
     0x918fb5a151313149 as libc::c_ulonglong,
     0x63552a120e0b0906 as libc::c_longlong as u64_0,
     0x503020000000000 as libc::c_longlong as u64_0,
     0x50f2551a0f3ffec as libc::c_longlong as u64_0,
     0x85758fb777404b5a as libc::c_ulonglong,
     0x4d27130e0b090605 as libc::c_longlong as u64_0,
     0x303010000000000 as libc::c_longlong as u64_0,
     0x50e21448ceffff5 as libc::c_longlong as u64_0,
     0xad707bc4ac666240 as libc::c_ulonglong,
     0x21130f0b09070403 as libc::c_longlong as u64_0,
     0x202000000000000 as libc::c_longlong as u64_0,
     0x50d19317be5fffc as libc::c_longlong as u64_0,
     0xd57677c8cf7f4222 as libc::c_ulonglong,
     0x18120d0907050302 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0x50d162867c0f8ff as libc::c_longlong as u64_0,
     0xefa180c0d690351f as libc::c_ulonglong,
     0x18120d0705030201 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x40b13215094f0ff as libc::c_longlong as u64_0,
     0xffe4b3cee8b24823 as libc::c_ulonglong,
     0x1a140d0704030200 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x409101b417edfff as libc::c_longlong as u64_0,
     0xffffebdeefc9602b as libc::c_ulonglong,
     0x1d150e0704030100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x2070d152d549ae3 as libc::c_longlong as u64_0,
     0xfffffff8fbd66d2e as libc::c_ulonglong,
     0x20170f0804030200 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x2060b0f192f569e as libc::c_longlong as u64_0,
     0xe4fffffffee88838 as libc::c_ulonglong,
     0x241b110805030200 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x105080b111f3662 as libc::c_longlong as u64_0,
     0xa4e5fffffff3a747 as libc::c_ulonglong,
     0x2b20150b07040301 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x10306080c15213d as libc::c_longlong as u64_0,
     0x64a4e8fffff9c459 as libc::c_longlong as u64_0,
     0x3225190f0a060401 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x20405080e1521 as libc::c_longlong as u64_0,
     0x3766b0f0ffffeb99 as libc::c_longlong as u64_0,
     0x4b2c1d120c080402 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x10203050a0f16 as libc::c_longlong as u64_0,
     0x22427fd2fbffffdf as libc::c_longlong as u64_0,
     0x813b2317100b0702 as libc::c_ulonglong,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x20204070c11 as libc::c_longlong as u64_0,
     0x182c5da9f4fffffd as libc::c_longlong as u64_0,
     0xcf6d321e16100903 as libc::c_ulonglong,
     0x202010000000000 as libc::c_longlong as u64_0,
     0x1010205080c as libc::c_longlong as u64_0,
     0x13224c90f0ffffff as libc::c_longlong as u64_0,
     0xf2a9552a1d150c05 as libc::c_ulonglong,
     0x302010000000000 as libc::c_longlong as u64_0,
     0x1030508 as libc::c_int as u64_0,
     0xe1d498ff0ffffff as libc::c_longlong as u64_0,
     0xffe6963e24190f07 as libc::c_ulonglong,
     0x402010000000000 as libc::c_longlong as u64_0,
     0x20406 as libc::c_int as u64_0,
     0xb1a4a95f2fff8f8 as libc::c_longlong as u64_0,
     0xffffda5b2a1d1209 as libc::c_ulonglong,
     0x503010000000000 as libc::c_longlong as u64_0,
     0x10305 as libc::c_int as u64_0,
     0xa184187eef7d2cf as libc::c_longlong as u64_0,
     0xf8ffeb6c3121160b as libc::c_ulonglong,
     0x705030100000000 as libc::c_longlong as u64_0,
     0x20304 as libc::c_int as u64_0,
     0x9163f86eceab1b0 as libc::c_longlong as u64_0,
     0xecffee833824190e as libc::c_ulonglong,
     0xa07030101010001 as libc::c_longlong as u64_0,
     0x10304 as libc::c_int as u64_0,
     0x8143c81e6e3a9a6 as libc::c_longlong as u64_0,
     0xcff8f5a843281c11 as libc::c_ulonglong,
     0xc08040201010001 as libc::c_longlong as u64_0,
     0x10203 as libc::c_int as u64_0,
     0x7123679d5f0e0d3 as libc::c_longlong as u64_0,
     0xd2f7fbcd542c2014 as libc::c_ulonglong,
     0xe09050201010101 as libc::c_longlong as u64_0,
     0x10202 as libc::c_int as u64_0,
     0x50f264c85bee6fa as libc::c_longlong as u64_0,
     0xf7ffffe874352317 as libc::c_ulonglong,
     0x110b060201020201 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x50b131f37619de3 as libc::c_longlong as u64_0,
     0xfffffff2933f261b as libc::c_ulonglong,
     0x140d070302020201 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x5090e14223b61a8 as libc::c_longlong as u64_0,
     0xf1fffff5b05c2f1e as libc::c_ulonglong,
     0x160f070202010202 as libc::c_longlong as u64_0,
     0x10202 as libc::c_int as u64_0,
     0x50a0f15243d6bb7 as libc::c_longlong as u64_0,
     0xf6fff8f4d8a35b28 as libc::c_ulonglong,
     0x1710080303020302 as libc::c_longlong as u64_0,
     0x10203 as libc::c_int as u64_0,
     0x50b121c356bb7ee as libc::c_longlong as u64_0,
     0xffe8c7c3cab69551 as libc::c_ulonglong,
     0x1c10090303030303 as libc::c_longlong as u64_0,
     0x10203 as libc::c_int as u64_0,
     0x60d1a306abaf1fe as libc::c_longlong as u64_0,
     0xda93728099889787 as libc::c_ulonglong,
     0x2b110a0403030303 as libc::c_longlong as u64_0,
     0x10304 as libc::c_int as u64_0,
     0x710295db8f1facd as libc::c_longlong as u64_0,
     0x774446546d879298 as libc::c_longlong as u64_0,
     0x3812090403030302 as libc::c_longlong as u64_0,
     0x1030507 as libc::c_int as u64_0,
     0xc1946a2edf8bd67 as libc::c_longlong as u64_0,
     0x382f31384d7e8d8f as libc::c_longlong as u64_0,
     0x4214080302020203 as libc::c_longlong as u64_0,
     0x104070b as libc::c_int as u64_0,
     0x153172e0fcc45d30 as libc::c_longlong as u64_0,
     0x2b272325335c878e as libc::c_longlong as u64_0,
     0x4913080303020303 as libc::c_longlong as u64_0,
     0x205090f as libc::c_int as u64_0,
     0x2256a9f4e2743027 as libc::c_longlong as u64_0,
     0x231f1a171e3d6c85 as libc::c_longlong as u64_0,
     0x5716070302030302 as libc::c_longlong as u64_0,
     0x10103070d1b as libc::c_longlong as u64_0,
     0x398be3f6af442722 as libc::c_longlong as u64_0,
     0x1e19141218356682 as libc::c_longlong as u64_0,
     0x6618070302020202 as libc::c_longlong as u64_0,
     0x20409122e as libc::c_longlong as u64_0,
     0x65cffde07532251f as libc::c_longlong as u64_0,
     0x1a1614151e426770 as libc::c_longlong as u64_0,
     0x6a18070202020202 as libc::c_longlong as u64_0,
     0x10103050d1c4a as libc::c_longlong as u64_0,
     0x9aeff19d482b221c as libc::c_ulonglong,
     0x1715171b314b526e as libc::c_longlong as u64_0,
     0x701d070202020202 as libc::c_longlong as u64_0,
     0x1020306163775 as libc::c_longlong as u64_0,
     0xdffdde6033292019 as libc::c_ulonglong,
     0x161519253640647e as libc::c_longlong as u64_0,
     0x4510070302020202 as libc::c_longlong as u64_0,
     0x1020307183b7b as libc::c_longlong as u64_0,
     0xe2ffe7783b2b221b as libc::c_ulonglong,
     0x18192031375a8f6d as libc::c_longlong as u64_0,
     0x200b060202020202 as libc::c_longlong as u64_0,
     0x10203060e2256 as libc::c_longlong as u64_0,
     0xa8f0fbc76a332622 as libc::c_ulonglong,
     0x2126263361937831 as libc::c_longlong as u64_0,
     0x100a060202020201 as libc::c_longlong as u64_0,
     0x10202050b173c as libc::c_longlong as u64_0,
     0x78d0fcf8c263322b as libc::c_longlong as u64_0,
     0x2d37395893863816 as libc::c_longlong as u64_0,
     0xf0b060201020201 as libc::c_longlong as u64_0,
     0x102040a1228 as libc::c_longlong as u64_0,
     0x4d93e1fff4b35f38 as libc::c_longlong as u64_0,
     0x3748589392431814 as libc::c_longlong as u64_0,
     0xf0a050202020102 as libc::c_longlong as u64_0,
     0x10203080d17 as libc::c_longlong as u64_0,
     0x2b5397e7ffefb065 as libc::c_longlong as u64_0,
     0x475f82ad6c271713 as libc::c_longlong as u64_0,
     0xe0a050101010101 as libc::c_longlong as u64_0,
     0x10102060a0f as libc::c_longlong as u64_0,
     0x183161b5eefff1bf as libc::c_longlong as u64_0,
     0x8189b49441201812 as libc::c_ulonglong,
     0xe09050201010100 as libc::c_longlong as u64_0,
     0x1040609 as libc::c_int as u64_0,
     0xf1b3b73bbeffff9 as libc::c_longlong as u64_0,
     0xe7dfc85e2e221911 as libc::c_ulonglong,
     0xd09050101010101 as libc::c_longlong as u64_0,
     0x20305 as libc::c_int as u64_0,
     0xa11213d76bbf0ff as libc::c_longlong as u64_0,
     0xfff6ca5331261b12 as libc::c_ulonglong,
     0xc09050201010101 as libc::c_longlong as u64_0,
     0x10203 as libc::c_int as u64_0,
     0x70c14214379c2f4 as libc::c_longlong as u64_0,
     0xffffe585452b2015 as libc::c_ulonglong,
     0xf0a060201020101 as libc::c_longlong as u64_0,
     0x10202 as libc::c_int as u64_0,
     0x5090e14224482cf as libc::c_longlong as u64_0,
     0xfaffffdc84392419 as libc::c_ulonglong,
     0x130d070302020202 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x3060a0e162b529b as libc::c_longlong as u64_0,
     0xe7fffffbc7512b1e as libc::c_ulonglong,
     0x1710080302020202 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x10305080f1c3266 as libc::c_longlong as u64_0,
     0xaef4ffffe3532e23 as libc::c_ulonglong,
     0x1a120a0303030303 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x10204060c152448 as libc::c_longlong as u64_0,
     0x86eeffffe75a3329 as libc::c_ulonglong,
     0x1f150c0504030404 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x203050b142146 as libc::c_longlong as u64_0,
     0x84eeffffec80442f as libc::c_ulonglong,
     0x24180d0504040403 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x2020409121f4d as libc::c_longlong as u64_0,
     0x92f1fffffcce7f44 as libc::c_ulonglong,
     0x281c0f0605050504 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1020308112054 as libc::c_longlong as u64_0,
     0xa1f3fffffff8cf80 as libc::c_ulonglong,
     0x371e110605050505 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x102040912225d as libc::c_longlong as u64_0,
     0xb5f6fffffffff5b8 as libc::c_ulonglong,
     0x4b21100605050505 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x202040a142567 as libc::c_longlong as u64_0,
     0xcaf9fffffffff1af as libc::c_ulonglong,
     0x401c0f0604040405 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x103050c162a74 as libc::c_longlong as u64_0,
     0xe1fdfffffff0b464 as libc::c_ulonglong,
     0x2b1c0f0604040404 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x204070e1c3687 as libc::c_longlong as u64_0,
     0xedffffffefb26237 as libc::c_ulonglong,
     0x261a0e0504040304 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x1040509132856af as libc::c_longlong as u64_0,
     0xf5fffff7b9643a2c as libc::c_ulonglong,
     0x21170c0404030303 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x104070c1f4aa5eb as libc::c_longlong as u64_0,
     0xfffffff29a4b3325 as libc::c_ulonglong,
     0x1c130a0403030303 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x205080f2a64d6fe as libc::c_longlong as u64_0,
     0xfffffff088442d1f as libc::c_ulonglong,
     0x1710090302020203 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x20509112f66cbfa as libc::c_longlong as u64_0,
     0xffffffe56839281a as libc::c_ulonglong,
     0x130d070202020101 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x205090e2355acf4 as libc::c_longlong as u64_0,
     0xfffffbcc58352516 as libc::c_ulonglong,
     0x100b050202020101 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x105080c1a4a9ef2 as libc::c_longlong as u64_0,
     0xfffff4aa4b302113 as libc::c_ulonglong,
     0xe09040100000101 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x104080c1a4ba1f3 as libc::c_longlong as u64_0,
     0xfffff18e432c1e10 as libc::c_ulonglong,
     0xb08030100000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x104070b1d52b4f6 as libc::c_longlong as u64_0,
     0xffffea6d3526190d as libc::c_ulonglong,
     0x906030000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x103060b1d57c3fc as libc::c_longlong as u64_0,
     0xffffd95b2c1f140a as libc::c_ulonglong,
     0x705020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x1030508153a88d9 as libc::c_longlong as u64_0,
     0xf1db8a351f180f08 as libc::c_ulonglong,
     0x504020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x204060d214168 as libc::c_longlong as u64_0,
     0x8067351c16100a06 as libc::c_ulonglong,
     0x403010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x20304070d151b as libc::c_longlong as u64_0,
     0x231c1614100b0704 as libc::c_longlong as u64_0,
     0x302010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1020305080a0e as libc::c_longlong as u64_0,
     0xf0e0e0e0b080503 as libc::c_longlong as u64_0,
     0x201000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10103040508 as libc::c_longlong as u64_0,
     0x808080706050301 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1010203 as libc::c_int as u64_0,
     0x202020201010000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0];
#[no_mangle]
pub static mut gDorfLightning2Tex: [u64_0; 384] =
    [0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1010101000000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1020201010000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x10201000000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x10304010000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x1010101 as libc::c_int as u64_0,
     0x10205020000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x102 as libc::c_int as u64_0,
     0x201010102020100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1 as libc::c_int as u64_0,
     0x305040504060501 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1 as libc::c_int as u64_0,
     0x103040a0a090903 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1 as libc::c_int as u64_0,
     0x101020202020303 as libc::c_longlong as u64_0,
     0x404060a1117190d as libc::c_longlong as u64_0,
     0x301000000000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x102030304050709 as libc::c_longlong as u64_0,
     0xc1217202c332e16 as libc::c_longlong as u64_0,
     0x502010000000000 as libc::c_longlong as u64_0,
     0x102 as libc::c_int as u64_0,
     0x2030507090f1925 as libc::c_longlong as u64_0,
     0x354e5a57381e130d as libc::c_longlong as u64_0,
     0x403010000000000 as libc::c_longlong as u64_0,
     0x1020304 as libc::c_int as u64_0,
     0x509121f2d425b6e as libc::c_longlong as u64_0,
     0x746a4b2e160c1119 as libc::c_longlong as u64_0,
     0x902010000000000 as libc::c_longlong as u64_0,
     0x10203050a0f as libc::c_longlong as u64_0,
     0x192541698ea1956f as libc::c_longlong as u64_0,
     0x4022150e0a0c1412 as libc::c_longlong as u64_0,
     0x502010000000000 as libc::c_longlong as u64_0,
     0x102030710254c as libc::c_longlong as u64_0,
     0x748d9e9e8b6a452c as libc::c_longlong as u64_0,
     0x190f0c0a090a0f08 as libc::c_longlong as u64_0,
     0x302010000000000 as libc::c_longlong as u64_0,
     0x103050d225ba8 as libc::c_longlong as u64_0,
     0xc0a67f5942331e15 as libc::c_ulonglong,
     0x110e0c0909080704 as libc::c_longlong as u64_0,
     0x302010000000000 as libc::c_longlong as u64_0,
     0x20407153783c8 as libc::c_longlong as u64_0,
     0xb25e3c3532211512 as libc::c_ulonglong,
     0xf0d0b0907060402 as libc::c_longlong as u64_0,
     0x202000000000000 as libc::c_longlong as u64_0,
     0x20508132f6fbd as libc::c_longlong as u64_0,
     0xbc6c463324181410 as libc::c_ulonglong,
     0xe0c0a0b07050402 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0x3060911295ca6 as libc::c_longlong as u64_0,
     0xd0a74f251b16120e as libc::c_ulonglong,
     0xc0c131308040302 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0x104080d1832649e as libc::c_longlong as u64_0,
     0xc0b25a221915120e as libc::c_ulonglong,
     0xf1e220f04030201 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0x2060d1b33667476 as libc::c_longlong as u64_0,
     0x88af90341b191a1f as libc::c_ulonglong,
     0x2732180504030100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x308153169b66c48 as libc::c_longlong as u64_0,
     0x6498ad542623344a as libc::c_longlong as u64_0,
     0x3b1c070403020100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x309173470db9a4a as libc::c_longlong as u64_0,
     0x4c7cad7c3d46574e as libc::c_longlong as u64_0,
     0x220b070504030100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x40a16306dded872 as libc::c_longlong as u64_0,
     0x466697a569674324 as libc::c_longlong as u64_0,
     0x100b080503020100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x409122768c7ec9f as libc::c_longlong as u64_0,
     0x485985c4946b2915 as libc::c_longlong as u64_0,
     0x100c080503020100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x4080f1d5199f1db as libc::c_longlong as u64_0,
     0x6a4f6cb5a16c3018 as libc::c_longlong as u64_0,
     0x110d090503020100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x3080e19417ee8f7 as libc::c_longlong as u64_0,
     0xb36c5d96ae713e1c as libc::c_ulonglong,
     0x120e090503020100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x3080d16386dcafa as libc::c_longlong as u64_0,
     0xedab687aae724c20 as libc::c_ulonglong,
     0x140f090503020100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x2060b11254c94e5 as libc::c_longlong as u64_0,
     0xffeaab8fb07a5a2d as libc::c_ulonglong,
     0x18110b0604030100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x105080d153063ad as libc::c_longlong as u64_0,
     0xedffebc6c696603b as libc::c_ulonglong,
     0x1d130d0704030200 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x10306090f20437b as libc::c_longlong as u64_0,
     0xc5f9fff2dda65d4d as libc::c_ulonglong,
     0x2a160f0805040200 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x304070c182e57 as libc::c_longlong as u64_0,
     0x95e7fffff4c05e52 as libc::c_ulonglong,
     0x4721120a06040200 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1030509121d39 as libc::c_longlong as u64_0,
     0x64b0ebffffe3784e as libc::c_longlong as u64_0,
     0x5431190e0a060401 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x10304070e1522 as libc::c_longlong as u64_0,
     0x3a6cb0edfff8bb73 as libc::c_longlong as u64_0,
     0x4e3c26130c090502 as libc::c_longlong as u64_0,
     0x201000000000000 as libc::c_longlong as u64_0,
     0x203050a0f15 as libc::c_longlong as u64_0,
     0x234177c0f7fff6cb as libc::c_longlong as u64_0,
     0x6e3a28180f0b0603 as libc::c_longlong as u64_0,
     0x201000000000000 as libc::c_longlong as u64_0,
     0x10203070a0e as libc::c_longlong as u64_0,
     0x16285296eefffff6 as libc::c_longlong as u64_0,
     0xb65f2e23170e0904 as libc::c_ulonglong,
     0x202010000000000 as libc::c_longlong as u64_0,
     0x10205080b as libc::c_longlong as u64_0,
     0x12204581e1fcffff as libc::c_longlong as u64_0,
     0xeea94b3327150d06 as libc::c_ulonglong,
     0x403010000000000 as libc::c_longlong as u64_0,
     0x101030609 as libc::c_longlong as u64_0,
     0xe1b3c76d7fcfcfd as libc::c_longlong as u64_0,
     0xffe47f3f351d1008 as libc::c_ulonglong,
     0x503010000000000 as libc::c_longlong as u64_0,
     0x20406 as libc::c_int as u64_0,
     0xb17366ccbf6eceb as libc::c_longlong as u64_0,
     0xfdf7b5502f1d1209 as libc::c_ulonglong,
     0x604020000000000 as libc::c_longlong as u64_0,
     0x20305 as libc::c_int as u64_0,
     0x9143368c8f6dfce as libc::c_longlong as u64_0,
     0xf5fede6c3322160b as libc::c_ulonglong,
     0x805020000000000 as libc::c_longlong as u64_0,
     0x10203 as libc::c_int as u64_0,
     0x7122f61bef5ebe3 as libc::c_longlong as u64_0,
     0xfbffed813a26190e as libc::c_ulonglong,
     0x907030100000000 as libc::c_longlong as u64_0,
     0x10203 as libc::c_int as u64_0,
     0x6102751a5ecfcfb as libc::c_longlong as u64_0,
     0xfffff0913f2a1d11 as libc::c_ulonglong,
     0xb08040100010001 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x50d1b3266b1ebff as libc::c_longlong as u64_0,
     0xfffff6af4e2e2014 as libc::c_ulonglong,
     0xe0a050201010101 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x50b121e3b6aaae6 as libc::c_longlong as u64_0,
     0xfefffcd87d3b2617 as libc::c_ulonglong,
     0x110c060201010102 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x50a1016263d62a8 as libc::c_longlong as u64_0,
     0xeefefff7c46e4122 as libc::c_ulonglong,
     0x150f080302020202 as libc::c_longlong as u64_0,
     0x102 as libc::c_int as u64_0,
     0x4090e14203b6dba as libc::c_longlong as u64_0,
     0xf6fff1f1eec99751 as libc::c_ulonglong,
     0x1f11090403030303 as libc::c_longlong as u64_0,
     0x102 as libc::c_int as u64_0,
     0x4080d152959adec as libc::c_longlong as u64_0,
     0xfedaa3a8d7e9d494 as libc::c_ulonglong,
     0x35150a0403030303 as libc::c_longlong as u64_0,
     0x10203 as libc::c_int as u64_0,
     0x60b1527549fe8f9 as libc::c_longlong as u64_0,
     0xcc75566790c1deae as libc::c_ulonglong,
     0x3d150b0403030303 as libc::c_longlong as u64_0,
     0x10305 as libc::c_int as u64_0,
     0x80f254c9ce5f2bc as libc::c_longlong as u64_0,
     0x673838435c8dc9b5 as libc::c_longlong as u64_0,
     0x51180a0403030303 as libc::c_longlong as u64_0,
     0x101020507 as libc::c_longlong as u64_0,
     0xa163c8be1f1ac5a as libc::c_longlong as u64_0,
     0x312b292b3a5f9db1 as libc::c_longlong as u64_0,
     0x6d1d0a0403030303 as libc::c_longlong as u64_0,
     0x10102040609 as libc::c_longlong as u64_0,
     0x112869d9f8b8552d as libc::c_longlong as u64_0,
     0x29241f1d25406b9b as libc::c_longlong as u64_0,
     0x87280b0403030303 as libc::c_ulonglong,
     0x10102060a11 as libc::c_longlong as u64_0,
     0x2151a4f2d0652b25 as libc::c_longlong as u64_0,
     0x221e1b181e345d8e as libc::c_longlong as u64_0,
     0x932a0a0403030303 as libc::c_ulonglong,
     0x1020204090f1e as libc::c_longlong as u64_0,
     0x4297e6dc7930211e as libc::c_longlong as u64_0,
     0x1b18161620406c84 as libc::c_longlong as u64_0,
     0x912f090303020203 as libc::c_ulonglong,
     0x10202050c193b as libc::c_longlong as u64_0,
     0x87e0e88e3d231d18 as libc::c_ulonglong,
     0x1514171f3b585e5f as libc::c_longlong as u64_0,
     0x80350c0302020202 as libc::c_ulonglong,
     0x1020307122c6d as libc::c_longlong as u64_0,
     0xd9f5ad4727201a14 as libc::c_ulonglong,
     0x12141e365347365a as libc::c_longlong as u64_0,
     0x752b080202020202 as libc::c_longlong as u64_0,
     0x20304081e4fa5 as libc::c_longlong as u64_0,
     0xf2d6612c261f1916 as libc::c_ulonglong,
     0x1725373f342e4d6a as libc::c_longlong as u64_0,
     0x3c0f060202020202 as libc::c_longlong as u64_0,
     0x2020409205dc0 as libc::c_longlong as u64_0,
     0xf4c54f29261f1a1a as libc::c_ulonglong,
     0x2240402e263b775c as libc::c_longlong as u64_0,
     0x1b09060202020202 as libc::c_longlong as u64_0,
     0x10204091d458b as libc::c_longlong as u64_0,
     0xe4ea923a26201b1f as libc::c_ulonglong,
     0x2840241e304d5f2b as libc::c_longlong as u64_0,
     0xe08050201010101 as libc::c_longlong as u64_0,
     0x1030407142e60 as libc::c_longlong as u64_0,
     0xb1eeda6b30211d21 as libc::c_ulonglong,
     0x283c212851613713 as libc::c_longlong as u64_0,
     0xc08040101010101 as libc::c_longlong as u64_0,
     0x10203060d1c3f as libc::c_longlong as u64_0,
     0x74c1f1c3662e2228 as libc::c_longlong as u64_0,
     0x314433526b40160e as libc::c_longlong as u64_0,
     0xb07040101010101 as libc::c_longlong as u64_0,
     0x102040a1020 as libc::c_longlong as u64_0,
     0x4085d0efb2613032 as libc::c_longlong as u64_0,
     0x42575f7745190f0c as libc::c_longlong as u64_0,
     0x906030101010101 as libc::c_longlong as u64_0,
     0x10103070c14 as libc::c_longlong as u64_0,
     0x275494e3f2c16f4b as libc::c_longlong as u64_0,
     0x537c89682714100b as libc::c_longlong as u64_0,
     0x806030101010101 as libc::c_longlong as u64_0,
     0x10205080d as libc::c_longlong as u64_0,
     0x1732599de2f9d7a0 as libc::c_longlong as u64_0,
     0x87a882391c16110c as libc::c_ulonglong,
     0x906030101010100 as libc::c_longlong as u64_0,
     0x104070a as libc::c_int as u64_0,
     0xe192d4e93defbef as libc::c_longlong as u64_0,
     0xd5b45929211a130d as libc::c_ulonglong,
     0x907040101010101 as libc::c_longlong as u64_0,
     0x30507 as libc::c_int as u64_0,
     0xa10192a4f8bd6fc as libc::c_longlong as u64_0,
     0xf3c16b35261e160e as libc::c_ulonglong,
     0xa07040101010100 as libc::c_longlong as u64_0,
     0x10204 as libc::c_int as u64_0,
     0x60a0f15284d93dd as libc::c_longlong as u64_0,
     0xfef6d17a3f221810 as libc::c_ulonglong,
     0xc08050100010101 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x4070a0e182f5498 as libc::c_longlong as u64_0,
     0xe0fffede8b331c14 as libc::c_ulonglong,
     0xe09050101010101 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x305080b111f3358 as libc::c_longlong as u64_0,
     0x96e8fff5a43a2118 as libc::c_ulonglong,
     0x120c060201010100 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x20305080c15203b as libc::c_longlong as u64_0,
     0x6ccef8f3a741261d as libc::c_longlong as u64_0,
     0x160f080302020202 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x102030509111b3e as libc::c_longlong as u64_0,
     0x78e5fff8bf6a3621 as libc::c_longlong as u64_0,
     0x1911090302020202 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1020409111e4a as libc::c_longlong as u64_0,
     0x8eeffee8c3af7232 as libc::c_ulonglong,
     0x1b120a0402020202 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x203050a122261 as libc::c_longlong as u64_0,
     0xbdf8f4ae93abac62 as libc::c_ulonglong,
     0x28120a0402020303 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x203050b152a77 as libc::c_longlong as u64_0,
     0xe5ffea7a7598cfa3 as libc::c_ulonglong,
     0x4b1b0b0403030303 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x203060d1c3989 as libc::c_longlong as u64_0,
     0xefffec91a4cad093 as libc::c_ulonglong,
     0x34140b0403030303 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x1040508112751a5 as libc::c_longlong as u64_0,
     0xf4ffffeadcb3703c as libc::c_ulonglong,
     0x1a11090402030302 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x205080c163268c9 as libc::c_longlong as u64_0,
     0xf9fffad79658331f as libc::c_ulonglong,
     0x150e080302020202 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x3060c15265091e9 as libc::c_longlong as u64_0,
     0xfffbcd7d49302216 as libc::c_ulonglong,
     0x100b060202020202 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x308122249a2e3ff as libc::c_longlong as u64_0,
     0xffef904c36291c11 as libc::c_ulonglong,
     0xc08040201010101 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x30911235dc9fcff as libc::c_longlong as u64_0,
     0xffec76423226190e as libc::c_ulonglong,
     0xa07030101010101 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x40910205ab1f5ff as libc::c_longlong as u64_0,
     0xfee26a3d2f23170c as libc::c_ulonglong,
     0x906020000000000 as libc::c_longlong as u64_0,
     0x102 as libc::c_int as u64_0,
     0x40a11215aa3f2ff as libc::c_longlong as u64_0,
     0xf9cc5b392d21150a as libc::c_ulonglong,
     0x605020000000000 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x50c132465bff7ff as libc::c_longlong as u64_0,
     0xfac95d372c201409 as libc::c_ulonglong,
     0x503010000000000 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x50c152775e5ffff as libc::c_longlong as u64_0,
     0xfcdb85412c201409 as libc::c_ulonglong,
     0x604020000000000 as libc::c_longlong as u64_0,
     0x102 as libc::c_int as u64_0,
     0x50d182f82efffff as libc::c_longlong as u64_0,
     0xfff3b8542f21150a as libc::c_ulonglong,
     0x604020000000000 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x50e1d3a90f1ffff as libc::c_longlong as u64_0,
     0xffface5e3222150a as libc::c_ulonglong,
     0x704020000000000 as libc::c_longlong as u64_0,
     0x10101 as libc::c_int as u64_0,
     0x50e214499f3ffff as libc::c_longlong as u64_0,
     0xfffbcf593022160a as libc::c_ulonglong,
     0x705020000000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x50c193382e7ffff as libc::c_longlong as u64_0,
     0xfffacc563022150a as libc::c_ulonglong,
     0x604020000000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x40a122466bef7ff as libc::c_longlong as u64_0,
     0xfffacc563023160a as libc::c_ulonglong,
     0x604020000000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x4090f1d5096f1ff as libc::c_longlong as u64_0,
     0xfffcd3563022160b as libc::c_ulonglong,
     0x704020000000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x3070c163b7be4ff as libc::c_longlong as u64_0,
     0xfffcd14b2a1f1309 as libc::c_ulonglong,
     0x604020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x2050a102659b1ee as libc::c_longlong as u64_0,
     0xfff3b13e221a1008 as libc::c_ulonglong,
     0x503020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x204070b163873b8 as libc::c_longlong as u64_0,
     0xdbb55d251a130c07 as libc::c_ulonglong,
     0x503010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x10304060c1d3851 as libc::c_longlong as u64_0,
     0x583f2218140f0905 as libc::c_longlong as u64_0,
     0x302010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10304070c1318 as libc::c_longlong as u64_0,
     0x191513110e0b0703 as libc::c_longlong as u64_0,
     0x201010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1020304070a0c as libc::c_longlong as u64_0,
     0xd0d0d0c0a080502 as libc::c_longlong as u64_0,
     0x201000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1010102030506 as libc::c_longlong as u64_0,
     0x707070605040201 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10102 as libc::c_int as u64_0,
     0x202020202010000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0];
#[no_mangle]
pub static mut gDorfLightning1Tex: [u64_0; 384] =
    [0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x101 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1 as libc::c_int as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1000000000001 as libc::c_longlong as u64_0,
     0x301000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x100 as libc::c_int as u64_0,
     0x102010000000001 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x101010401 as libc::c_longlong as u64_0,
     0x1000000010205 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x2010304010100 as libc::c_longlong as u64_0,
     0x10306 as libc::c_int as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x204 as libc::c_int as u64_0,
     0x408040101000000 as libc::c_longlong as u64_0,
     0x1010301 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1040d15 as libc::c_int as u64_0,
     0x704020101010000 as libc::c_longlong as u64_0,
     0x1030a02 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x10104091829 as libc::c_longlong as u64_0,
     0xb03020102010100 as libc::c_longlong as u64_0,
     0x10105000200 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0x101040a1d35 as libc::c_longlong as u64_0,
     0x1d07030303020100 as libc::c_longlong as u64_0,
     0x1040c12040000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0x10101040b1c33 as libc::c_longlong as u64_0,
     0x411b060504030200 as libc::c_longlong as u64_0,
     0x1070f09000000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0x101040b1a2e as libc::c_longlong as u64_0,
     0x573f100706050301 as libc::c_longlong as u64_0,
     0x203020400000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x101010308132a as libc::c_longlong as u64_0,
     0x586c300d08070604 as libc::c_longlong as u64_0,
     0x808030000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10204070d27 as libc::c_longlong as u64_0,
     0x4d7b611a0b0a0b05 as libc::c_longlong as u64_0,
     0x403010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10103050c0e22 as libc::c_longlong as u64_0,
     0x3f6f8430100b0905 as libc::c_longlong as u64_0,
     0x302020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x101030a1a161c as libc::c_longlong as u64_0,
     0x2f567e4f1a0c0906 as libc::c_longlong as u64_0,
     0x403020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x102040e1e2117 as libc::c_longlong as u64_0,
     0x2342607233110b08 as libc::c_longlong as u64_0,
     0x504020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1020511223827 as libc::c_longlong as u64_0,
     0x1c31477b50170c09 as libc::c_longlong as u64_0,
     0x604030100000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x2030511234759 as libc::c_longlong as u64_0,
     0x27253d777b26130b as libc::c_longlong as u64_0,
     0x806030100000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x203050d235a9e as libc::c_longlong as u64_0,
     0x5e27366282372914 as libc::c_longlong as u64_0,
     0xa07040201010000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x103050b21518e as libc::c_longlong as u64_0,
     0x954a375b7f443729 as libc::c_ulonglong,
     0x1009050302010100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x2040509193963 as libc::c_longlong as u64_0,
     0xaf8e4853703f333c as libc::c_ulonglong,
     0x1e0b060402020100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10305070d2053 as libc::c_longlong as u64_0,
     0xb0c875586f3c2f39 as libc::c_ulonglong,
     0x2b12080503020100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10204060a153c as libc::c_longlong as u64_0,
     0x78c0c182713b262b as libc::c_longlong as u64_0,
     0x3326100704030200 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x102030509112b as libc::c_longlong as u64_0,
     0x4c8cddd7a24e2623 as libc::c_longlong as u64_0,
     0x2d39260c05040201 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x1020204080d1a as libc::c_longlong as u64_0,
     0x3263ace7d9772d21 as libc::c_longlong as u64_0,
     0x212d321a09040201 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x10103060a10 as libc::c_longlong as u64_0,
     0x1d3c69ade0c96b31 as libc::c_longlong as u64_0,
     0x2121292a19080402 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0x10205080b as libc::c_longlong as u64_0,
     0x111e3e70a9edcb78 as libc::c_longlong as u64_0,
     0x311e212d280f0503 as libc::c_longlong as u64_0,
     0x202010000000000 as libc::c_longlong as u64_0,
     0x1030608 as libc::c_int as u64_0,
     0xc14284881ecf3d1 as libc::c_longlong as u64_0,
     0x743023272c150804 as libc::c_longlong as u64_0,
     0x301000000000000 as libc::c_longlong as u64_0,
     0x20305 as libc::c_int as u64_0,
     0x9101d336cd5d7ea as libc::c_longlong as u64_0,
     0xcb662d2529120905 as libc::c_ulonglong,
     0x302010000000000 as libc::c_longlong as u64_0,
     0x20204 as libc::c_int as u64_0,
     0x70d172657afb8ca as libc::c_longlong as u64_0,
     0xe79436292c160b06 as libc::c_ulonglong,
     0x403020000000000 as libc::c_longlong as u64_0,
     0x10203 as libc::c_int as u64_0,
     0x50a111e4b8da2a7 as libc::c_longlong as u64_0,
     0xeccf553423150d07 as libc::c_ulonglong,
     0x403010000000000 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x4080d194176b0c1 as libc::c_longlong as u64_0,
     0xeee97f4726180f08 as libc::c_ulonglong,
     0x503010000000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x3070b14345fafde as libc::c_longlong as u64_0,
     0xf7f5b151271b120a as libc::c_ulonglong,
     0x705020000000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x306090f21355a98 as libc::c_longlong as u64_0,
     0xddfee16e2f1f160e as libc::c_ulonglong,
     0xa07040101000001 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x205080b13213664 as libc::c_longlong as u64_0,
     0xa5f2f6ae56291b12 as libc::c_ulonglong,
     0xd0a050202010101 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x205070a0e192952 as libc::c_longlong as u64_0,
     0x96eeffe1a35b3218 as libc::c_ulonglong,
     0x110b060202010202 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x205080a1123448c as libc::c_longlong as u64_0,
     0xddf2ddb5b9b68d3f as libc::c_ulonglong,
     0x150c070302020202 as libc::c_longlong as u64_0,
     0x10101 as libc::c_int as u64_0,
     0x306090e1f3e88dd as libc::c_longlong as u64_0,
     0xe39d6b5f7faab470 as libc::c_ulonglong,
     0x200d070302020202 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x4080e1a3c7edadd as libc::c_longlong as u64_0,
     0x8d4832394b6da88a as libc::c_ulonglong,
     0x280e080302020202 as libc::c_longlong as u64_0,
     0x10203 as libc::c_int as u64_0,
     0x50c1c3983d6d380 as libc::c_longlong as u64_0,
     0x412a2628355498a0 as libc::c_longlong as u64_0,
     0x4516080302010102 as libc::c_longlong as u64_0,
     0x1020405 as libc::c_int as u64_0,
     0x815337ad7cc662f as libc::c_longlong as u64_0,
     0x24211f1e274885ab as libc::c_longlong as u64_0,
     0x692a0b0302020201 as libc::c_longlong as u64_0,
     0x102030509 as libc::c_longlong as u64_0,
     0x112a63d1d266271f as libc::c_longlong as u64_0,
     0x1d1b19181e3a6a9b as libc::c_longlong as u64_0,
     0x7e370d0302020202 as libc::c_longlong as u64_0,
     0x10102050810 as libc::c_longlong as u64_0,
     0x22529bcd7c291b1a as libc::c_longlong as u64_0,
     0x1815131216315e90 as libc::c_longlong as u64_0,
     0x90340a0302020202 as libc::c_ulonglong,
     0x10203060c1e as libc::c_longlong as u64_0,
     0x459fc985361c1815 as libc::c_longlong as u64_0,
     0x12100f0e1337628b as libc::c_longlong as u64_0,
     0x9c370a0202020202 as libc::c_ulonglong,
     0x102030509153a as libc::c_longlong as u64_0,
     0x88d09a3c1f191612 as libc::c_ulonglong,
     0x100f1019274b5067 as libc::c_longlong as u64_0,
     0x963d0c0202020202 as libc::c_ulonglong,
     0x1030408142e6d as libc::c_longlong as u64_0,
     0xc9ab451c1a161310 as libc::c_ulonglong,
     0x1017233332344069 as libc::c_longlong as u64_0,
     0x84330a0302020202 as libc::c_ulonglong,
     0x203060c2662bb as libc::c_longlong as u64_0,
     0xbc4f1c1817141010 as libc::c_ulonglong,
     0x1833402c1e2d6480 as libc::c_longlong as u64_0,
     0x4c14060202020202 as libc::c_longlong as u64_0,
     0x204070f2f7bcd as libc::c_longlong as u64_0,
     0x922f1a1715120f18 as libc::c_ulonglong,
     0x2d422a1923468b69 as libc::c_longlong as u64_0,
     0x230b060302020201 as libc::c_longlong as u64_0,
     0x204060d2865b0 as libc::c_longlong as u64_0,
     0xb2591f1815131120 as libc::c_ulonglong,
     0x3932171a34627131 as libc::c_longlong as u64_0,
     0xf09050202020202 as libc::c_longlong as u64_0,
     0x20305091b3e71 as libc::c_longlong as u64_0,
     0xba96361a1815131e as libc::c_ulonglong,
     0x361c16234e693310 as libc::c_longlong as u64_0,
     0xb08040202020101 as libc::c_longlong as u64_0,
     0x203040711264c as libc::c_longlong as u64_0,
     0x8fab722a19191921 as libc::c_ulonglong,
     0x371d1e3a523b110c as libc::c_longlong as u64_0,
     0x906040201020201 as libc::c_longlong as u64_0,
     0x10203050a1535 as libc::c_longlong as u64_0,
     0x5d8fab61291c1f24 as libc::c_longlong as u64_0,
     0x3b2739522e120c0a as libc::c_longlong as u64_0,
     0x806030101010101 as libc::c_longlong as u64_0,
     0x1010304080d1d as libc::c_longlong as u64_0,
     0x3766aaaf6c37272a as libc::c_longlong as u64_0,
     0x4445503d160e0b09 as libc::c_longlong as u64_0,
     0x604020101000001 as libc::c_longlong as u64_0,
     0x1020306090f as libc::c_longlong as u64_0,
     0x1e3b6099af945c45 as libc::c_longlong as u64_0,
     0x5b593b1d120e0a08 as libc::c_longlong as u64_0,
     0x504020000000000 as libc::c_longlong as u64_0,
     0x102040709 as libc::c_longlong as u64_0,
     0xd18305b8ebdba99 as libc::c_longlong as u64_0,
     0x844a2217130e0a07 as libc::c_ulonglong,
     0x403020000000000 as libc::c_longlong as u64_0,
     0x1030406 as libc::c_int as u64_0,
     0x90e1a2d4c82c2dc as libc::c_longlong as u64_0,
     0xb455261a16100b07 as libc::c_ulonglong,
     0x503010000000000 as libc::c_longlong as u64_0,
     0x1020304 as libc::c_int as u64_0,
     0x60a0e162a4a7ec4 as libc::c_longlong as u64_0,
     0xe5b1682d1a140f0a as libc::c_ulonglong,
     0x705020000000000 as libc::c_longlong as u64_0,
     0x1010203 as libc::c_int as u64_0,
     0x4070a0c14243f7b as libc::c_longlong as u64_0,
     0xccecd47b2e18120c as libc::c_ulonglong,
     0x806030101000001 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x30406080c152442 as libc::c_longlong as u64_0,
     0x75b8e3ce5d23140f as libc::c_longlong as u64_0,
     0xa08040100010101 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x2030406090f1629 as libc::c_longlong as u64_0,
     0x4986cdd5662a1711 as libc::c_longlong as u64_0,
     0xc09040100010101 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x1020304080d1320 as libc::c_longlong as u64_0,
     0x4089ddb7784b2c16 as libc::c_longlong as u64_0,
     0xe09050201010101 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x20203070c1326 as libc::c_longlong as u64_0,
     0x4ba1d76a49526038 as libc::c_longlong as u64_0,
     0x140b060201010100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10203060b1434 as libc::c_longlong as u64_0,
     0x67c6be463644635f as libc::c_longlong as u64_0,
     0x340d060101010100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x20304070d1a4e as libc::c_longlong as u64_0,
     0x98d787342c3a5061 as libc::c_ulonglong,
     0x5719050101010101 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x10203050a11215f as libc::c_longlong as u64_0,
     0xbebb58424c5d6953 as libc::c_ulonglong,
     0x320c050101010100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x10305070c1a3276 as libc::c_longlong as u64_0,
     0xd79c5e778965371e as libc::c_ulonglong,
     0x1008050201010101 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x103060a132c5fb2 as libc::c_longlong as u64_0,
     0xeaa68969442a180f as libc::c_ulonglong,
     0xa07040101010101 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x1050a1228579ce8 as libc::c_longlong as u64_0,
     0xd97e492f1f17110b as libc::c_ulonglong,
     0x805030101010101 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x2070f1f52b0eae9 as libc::c_longlong as u64_0,
     0x7636221d17120d08 as libc::c_longlong as u64_0,
     0x604030101010000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x309132765d2fbd3 as libc::c_longlong as u64_0,
     0x49241d18130e0905 as libc::c_longlong as u64_0,
     0x402010000000000 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x40a132969c7eca2 as libc::c_longlong as u64_0,
     0x38221b14100b0704 as libc::c_longlong as u64_0,
     0x302010000000000 as libc::c_longlong as u64_0,
     0x102 as libc::c_int as u64_0,
     0x40a112468c3e584 as libc::c_longlong as u64_0,
     0x32221b140f0b0703 as libc::c_longlong as u64_0,
     0x201000000000000 as libc::c_longlong as u64_0,
     0x202 as libc::c_int as u64_0,
     0x40b122574def093 as libc::c_longlong as u64_0,
     0x3b241c140f0a0603 as libc::c_longlong as u64_0,
     0x201000000000000 as libc::c_longlong as u64_0,
     0x102 as libc::c_int as u64_0,
     0x50c162d7decf3a7 as libc::c_longlong as u64_0,
     0x5d2d1c140f0a0602 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x50d1d3a86ede39d as libc::c_longlong as u64_0,
     0x964e21150f0a0502 as libc::c_ulonglong,
     0x101000000000000 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x50c214491ebcf80 as libc::c_longlong as u64_0,
     0xa25e2718120c0702 as libc::c_ulonglong,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x102 as libc::c_int as u64_0,
     0x50c1f4395f0e39c as libc::c_longlong as u64_0,
     0xa262291c150f0803 as libc::c_ulonglong,
     0x201000000000000 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x50b17317ddcf9d9 as libc::c_longlong as u64_0,
     0xbd7d322018110a03 as libc::c_ulonglong,
     0x201010000000000 as libc::c_longlong as u64_0,
     0x10102 as libc::c_int as u64_0,
     0x40a12235aa2f1f8 as libc::c_longlong as u64_0,
     0xe0a944241b130c05 as libc::c_ulonglong,
     0x202010000000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x3080d183d79deff as libc::c_longlong as u64_0,
     0xf5c04e281e160d05 as libc::c_ulonglong,
     0x302000000000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x2060a112551a2ec as libc::c_longlong as u64_0,
     0xfcd96a3021180f06 as libc::c_ulonglong,
     0x402000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x205080c173c7bd0 as libc::c_longlong as u64_0,
     0xf9ed823623191006 as libc::c_ulonglong,
     0x403010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x104070a133067c5 as libc::c_longlong as u64_0,
     0xf9ee8036241a1007 as libc::c_ulonglong,
     0x403010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x1030609112d63c6 as libc::c_longlong as u64_0,
     0xf9ee7e34241a1007 as libc::c_ulonglong,
     0x503010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x10305070f2b5fc0 as libc::c_longlong as u64_0,
     0xf8ef863322191007 as libc::c_ulonglong,
     0x403020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x10304060d2657b5 as libc::c_longlong as u64_0,
     0xf7f28e3421170f07 as libc::c_ulonglong,
     0x503010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x204050b234fa4 as libc::c_longlong as u64_0,
     0xf4ec822d1c140d06 as libc::c_ulonglong,
     0x403020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10204091c428b as libc::c_longlong as u64_0,
     0xdbc7662416100a05 as libc::c_ulonglong,
     0x302010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x102030711213f as libc::c_longlong as u64_0,
     0x5d402214100c0804 as libc::c_longlong as u64_0,
     0x202010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1010204090f17 as libc::c_longlong as u64_0,
     0x1d120e0c0a070503 as libc::c_longlong as u64_0,
     0x201000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1010103050709 as libc::c_longlong as u64_0,
     0xa08080807050302 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10102030405 as libc::c_longlong as u64_0,
     0x505050505030202 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1020203 as libc::c_int as u64_0,
     0x302020203020101 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0];
static mut ovl_Boss_GanonVtx_011538: [Vtx; 4] =
    [Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(7 as libc::c_int) as libc::c_short,
                                -(7 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [7 as libc::c_int as libc::c_short,
                                -(7 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2048 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [7 as libc::c_int as libc::c_short,
                                7 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2048 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(7 as libc::c_int) as libc::c_short,
                                7 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },}];
// Initialized in run_static_initializers
#[no_mangle]
pub static mut gDorfSquareDL: [Gfx; 3] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 3];
static mut ovl_Boss_GanonTex_010538: [u64_0; 512] =
    [0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1000000 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1 as libc::c_int as u64_0,
     0x200000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x2010000 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1 as libc::c_int as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x103040200 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0x100000104 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x104070401 as libc::c_longlong as u64_0,
     0x100010101 as libc::c_longlong as u64_0,
     0x1010201000105 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x10204080703 as libc::c_longlong as u64_0,
     0x101010101030303 as libc::c_longlong as u64_0,
     0x303030401010305 as libc::c_longlong as u64_0,
     0x100010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x10305080a06 as libc::c_longlong as u64_0,
     0x303030303040404 as libc::c_longlong as u64_0,
     0x404040503020604 as libc::c_longlong as u64_0,
     0x101010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x10405080c0b as libc::c_longlong as u64_0,
     0x604040405060606 as libc::c_longlong as u64_0,
     0x506070705060904 as libc::c_longlong as u64_0,
     0x202020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x101 as libc::c_int as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x20407090e11 as libc::c_longlong as u64_0,
     0xa06060708080908 as libc::c_longlong as u64_0,
     0x8080a09060a0c05 as libc::c_longlong as u64_0,
     0x405030100000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x10407 as libc::c_int as u64_0,
     0x704020000010101 as libc::c_longlong as u64_0,
     0x101030407090e13 as libc::c_longlong as u64_0,
     0x100a08090b0c0d0b as libc::c_longlong as u64_0,
     0xb0c0d0c0a100d07 as libc::c_longlong as u64_0,
     0x707040100000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1060c as libc::c_int as u64_0,
     0xf0e0a0401010303 as libc::c_longlong as u64_0,
     0x4030405080c0f15 as libc::c_longlong as u64_0,
     0x17110d0d0f101110 as libc::c_longlong as u64_0,
     0xf11120f0e150c09 as libc::c_longlong as u64_0,
     0xa08040301010000 as libc::c_longlong as u64_0,
     0x101010201010000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1040b as libc::c_int as u64_0,
     0x1317160f09040404 as libc::c_longlong as u64_0,
     0x5050607090c1016 as libc::c_longlong as u64_0,
     0x1d19141214171816 as libc::c_longlong as u64_0,
     0x1517191515190f0d as libc::c_longlong as u64_0,
     0xc08050403030201 as libc::c_longlong as u64_0,
     0x204040401000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x106 as libc::c_int as u64_0,
     0x101a201e170d0805 as libc::c_longlong as u64_0,
     0x708090a0c0e1318 as libc::c_longlong as u64_0,
     0x22241c1a1a1e1f1d as libc::c_longlong as u64_0,
     0x1c1e201b201b1513 as libc::c_longlong as u64_0,
     0xf0b080605050505 as libc::c_longlong as u64_0,
     0x607070401000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x2 as libc::c_int as u64_0,
     0x8121e27281f140a as libc::c_longlong as u64_0,
     0x8090b0c0e11171d as libc::c_longlong as u64_0,
     0x2630282324282927 as libc::c_longlong as u64_0,
     0x26292a2632211c1a as libc::c_longlong as u64_0,
     0x130e0b0807070809 as libc::c_longlong as u64_0,
     0xa0a060200010203 as libc::c_longlong as u64_0,
     0x301000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x208121f2c2f281b as libc::c_longlong as u64_0,
     0x100d0f1112151a22 as libc::c_longlong as u64_0,
     0x2b38393030333635 as libc::c_longlong as u64_0,
     0x343836333d2a261f as libc::c_longlong as u64_0,
     0x19130f0d0c0c0e0f as libc::c_longlong as u64_0,
     0xc08040203040606 as libc::c_longlong as u64_0,
     0x301000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x2070f1d2d3734 as libc::c_longlong as u64_0,
     0x27181316191c2028 as libc::c_longlong as u64_0,
     0x33404c413e424646 as libc::c_longlong as u64_0,
     0x4548444340353126 as libc::c_longlong as u64_0,
     0x1f19151312141411 as libc::c_longlong as u64_0,
     0xa0605070a0a0804 as libc::c_longlong as u64_0,
     0x200000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x103060e1c3140 as libc::c_longlong as u64_0,
     0x4133221c1f25282f as libc::c_longlong as u64_0,
     0x3a495a585154595a as libc::c_longlong as u64_0,
     0x595c575d4c433a2e as libc::c_longlong as u64_0,
     0x26211d1d1d1d160e as libc::c_longlong as u64_0,
     0xa0a0c0e0d090502 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x10304070d1b2e as libc::c_longlong as u64_0,
     0x445047332a2e343a as libc::c_longlong as u64_0,
     0x455568756b6b7172 as libc::c_longlong as u64_0,
     0x72746d705e55473b as libc::c_longlong as u64_0,
     0x312c2a2b281f1510 as libc::c_longlong as u64_0,
     0x1114130e09050200 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x102030407090e19 as libc::c_longlong as u64_0,
     0x2f4c615d4a3e4149 as libc::c_longlong as u64_0,
     0x5362778e89868c90 as libc::c_longlong as u64_0,
     0x8f91888175665649 as libc::c_ulonglong,
     0x413d3c372b1f1a1c as libc::c_longlong as u64_0,
     0x1d18110a06030100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x103040507090c11 as libc::c_longlong as u64_0,
     0x1b2f51737865575b as libc::c_longlong as u64_0,
     0x667489a1aba6abb0 as libc::c_longlong as u64_0,
     0xafb0a99b8f7b695c as libc::c_ulonglong,
     0x57544b3a2e2b2b26 as libc::c_longlong as u64_0,
     0x1c120a0603010000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1030505080b0e12 as libc::c_longlong as u64_0,
     0x1720335680948a79 as libc::c_longlong as u64_0,
     0x7c8b9eb7cccacfd5 as libc::c_longlong as u64_0,
     0xd3d1ccbba8928278 as libc::c_ulonglong,
     0x72655145423d3020 as libc::c_longlong as u64_0,
     0x140d070401000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x2040506080c1014 as libc::c_longlong as u64_0,
     0x19202b3c5d8cb3b0 as libc::c_longlong as u64_0,
     0xa2a6b8d0e9eef1f6 as libc::c_ulonglong,
     0xf5f4f2dfc5b0a398 as libc::c_ulonglong,
     0x856f625d4d382619 as libc::c_ulonglong,
     0x100a060301000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x101 as libc::c_int as u64_0,
     0x3040708090c1117 as libc::c_longlong as u64_0,
     0x1d242f3c4d6b9aca as libc::c_longlong as u64_0,
     0xdbcfd8e9fafdfeff as libc::c_ulonglong,
     0xfefefef6e3d4c7b0 as libc::c_ulonglong,
     0x9888775e422e2015 as libc::c_ulonglong,
     0xf09050301010000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1010304 as libc::c_int as u64_0,
     0x50608090c0f1319 as libc::c_longlong as u64_0,
     0x20293442526783ae as libc::c_longlong as u64_0,
     0xe0f5fafcffffffff as libc::c_ulonglong,
     0xfffffffffbf5e1ca as libc::c_ulonglong,
     0xb3926f523a2a1e15 as libc::c_ulonglong,
     0xf0a060403010000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x103040507 as libc::c_longlong as u64_0,
     0x8080b0c0f12161c as libc::c_longlong as u64_0,
     0x232d3a485b708aa8 as libc::c_longlong as u64_0,
     0xd0f7ffffffffffff as libc::c_ulonglong,
     0xfffffffffffff7d9 as libc::c_ulonglong,
     0xaf88684f3c2c2118 as libc::c_ulonglong,
     0x110c080504010100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x103040708 as libc::c_longlong as u64_0,
     0xa0b0d1014181d24 as libc::c_longlong as u64_0,
     0x2c364250647a95b3 as libc::c_longlong as u64_0,
     0xd5f6feffffffffff as libc::c_ulonglong,
     0xfffffffffffff7d2 as libc::c_ulonglong,
     0xa9886c554131251c as libc::c_ulonglong,
     0x15100c0907050403 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0x103040608 as libc::c_longlong as u64_0,
     0xa0c0f12161b222a as libc::c_longlong as u64_0,
     0x33404e5f7389a3c1 as libc::c_longlong as u64_0,
     0xe3fbffffffffffff as libc::c_ulonglong,
     0xfffffffffffff8d8 as libc::c_ulonglong,
     0xb49377604c3c3027 as libc::c_ulonglong,
     0x1e18130f0c0a0806 as libc::c_longlong as u64_0,
     0x403020100000000 as libc::c_longlong as u64_0,
     0x1030405 as libc::c_int as u64_0,
     0x8090d1014192029 as libc::c_longlong as u64_0,
     0x334050647a94b3d3 as libc::c_longlong as u64_0,
     0xf3feffffffffffff as libc::c_ulonglong,
     0xfffffffffffffce8 as libc::c_ulonglong,
     0xc7a88b725c4a3b2f as libc::c_ulonglong,
     0x241c15100c090705 as libc::c_longlong as u64_0,
     0x301010000000000 as libc::c_longlong as u64_0,
     0x102030405 as libc::c_longlong as u64_0,
     0x80a0d1014191f28 as libc::c_longlong as u64_0,
     0x323e4e617892b1d2 as libc::c_longlong as u64_0,
     0xf2feffffffffffff as libc::c_ulonglong,
     0xfffffffffffffce8 as libc::c_ulonglong,
     0xc5a2846952403125 as libc::c_ulonglong,
     0x1b140e0a07040302 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x1030407080a as libc::c_longlong as u64_0,
     0xe1014171c222931 as libc::c_longlong as u64_0,
     0x3c49596c819ab6d5 as libc::c_longlong as u64_0,
     0xf2feffffffffffff as libc::c_ulonglong,
     0xfffffffffffffde8 as libc::c_ulonglong,
     0xc6a4866b55423327 as libc::c_ulonglong,
     0x1c150e0b08050301 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x20506080a0c as libc::c_longlong as u64_0,
     0xf1214171a1f242b as libc::c_longlong as u64_0,
     0x333d4a5a6d85a1c1 as libc::c_longlong as u64_0,
     0xe3fbffffffffffff as libc::c_ulonglong,
     0xfffffffffffff6d8 as libc::c_ulonglong,
     0xb5967c6451403227 as libc::c_ulonglong,
     0x1d16100c09060403 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x10304050708 as libc::c_longlong as u64_0,
     0x90b0c0e11141921 as libc::c_longlong as u64_0,
     0x28323e4e627a96b7 as libc::c_longlong as u64_0,
     0xdefbffffffffffff as libc::c_ulonglong,
     0xfffffffffffdedca as libc::c_ulonglong,
     0xa6876d5643352920 as libc::c_ulonglong,
     0x19130e0b08050403 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x101030304 as libc::c_longlong as u64_0,
     0x507080a0c10151b as libc::c_longlong as u64_0,
     0x222d3a495d7798bf as libc::c_longlong as u64_0,
     0xe4fbffffffffffff as libc::c_ulonglong,
     0xfffffffffffceac1 as libc::c_ulonglong,
     0x9a7d644e3b2d2119 as libc::c_ulonglong,
     0x120d090605040201 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10102 as libc::c_int as u64_0,
     0x30507080b0e1319 as libc::c_longlong as u64_0,
     0x202b384a6180a3c0 as libc::c_longlong as u64_0,
     0xd4eaf7fcffffffff as libc::c_ulonglong,
     0xfffffffffbf9efd2 as libc::c_ulonglong,
     0x9e755a4635281d15 as libc::c_ulonglong,
     0xf0a060403020000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1 as libc::c_int as u64_0,
     0x30407080a0c1118 as libc::c_longlong as u64_0,
     0x212d3c526e8694a7 as libc::c_longlong as u64_0,
     0xc4d5dae8fafffffe as libc::c_ulonglong,
     0xfffdfef8e3d0c8d5 as libc::c_ulonglong,
     0xbe87593f2f231a13 as libc::c_ulonglong,
     0xd09050301010000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x20405070a0d131b as libc::c_longlong as u64_0,
     0x2635485b666d7e9a as libc::c_longlong as u64_0,
     0xabadb7cdeef7f7f6 as libc::c_ulonglong,
     0xf7f1eee3c7b09ea1 as libc::c_ulonglong,
     0xaea273472d1f1610 as libc::c_ulonglong,
     0xb08050301000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x10305080c101722 as libc::c_longlong as u64_0,
     0x303e48494e627a84 as libc::c_longlong as u64_0,
     0x838a9bb6e2d7d6d4 as libc::c_ulonglong,
     0xd5cecacaaf958274 as libc::c_ulonglong,
     0x758485653c22150e as libc::c_longlong as u64_0,
     0x907040301000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1 as libc::c_int as u64_0,
     0x304070a0e16202c as libc::c_longlong as u64_0,
     0x3434333b4d606461 as libc::c_longlong as u64_0,
     0x657285a5d3b0b0af as libc::c_longlong as u64_0,
     0xb1aaa5ad997f6b5d as libc::c_ulonglong,
     0x514f616b5a371d0f as libc::c_longlong as u64_0,
     0x805030100000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1 as libc::c_int as u64_0,
     0x3060a0e161e2527 as libc::c_longlong as u64_0,
     0x25242c3e4b4c4749 as libc::c_longlong as u64_0,
     0x525e7299b390908f as libc::c_longlong as u64_0,
     0x908a8387846e584a as libc::c_ulonglong,
     0x40363646554d341c as libc::c_longlong as u64_0,
     0xc05020100000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x103 as libc::c_int as u64_0,
     0x60a10161c1d1b17 as libc::c_longlong as u64_0,
     0x1a24333b39333339 as libc::c_longlong as u64_0,
     0x4350699a8d737472 as libc::c_longlong as u64_0,
     0x736e67676e5e4c3d as libc::c_longlong as u64_0,
     0x322b242432424331 as libc::c_longlong as u64_0,
     0x1a0b040100000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x206 as libc::c_int as u64_0,
     0xb0f151715121013 as libc::c_longlong as u64_0,
     0x1d292e2a2423282f as libc::c_longlong as u64_0,
     0x37456790665a5a59 as libc::c_longlong as u64_0,
     0x5a58514f56504032 as libc::c_longlong as u64_0,
     0x27211d1817233135 as libc::c_longlong as u64_0,
     0x2b1a0b0301000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10409 as libc::c_int as u64_0,
     0xf11110e0b0c0f18 as libc::c_longlong as u64_0,
     0x2123201a171b1f26 as libc::c_longlong as u64_0,
     0x2e3f69754a474645 as libc::c_longlong as u64_0,
     0x46443e3c3f433529 as libc::c_longlong as u64_0,
     0x201915120e0f1824 as libc::c_longlong as u64_0,
     0x2b26190c04010000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x3070a as libc::c_int as u64_0,
     0xc0b0907080e151b as libc::c_longlong as u64_0,
     0x1c1713111115191e as libc::c_longlong as u64_0,
     0x27406a5336393534 as libc::c_longlong as u64_0,
     0x3534302d2e352d23 as libc::c_longlong as u64_0,
     0x1b140f0d0b09090f as libc::c_longlong as u64_0,
     0x1b2120170c040100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1030606 as libc::c_int as u64_0,
     0x60505060c121615 as libc::c_longlong as u64_0,
     0x120d0b0b0d111519 as libc::c_longlong as u64_0,
     0x24445c36282d2827 as libc::c_longlong as u64_0,
     0x282824222127271d as libc::c_longlong as u64_0,
     0x15100b0908070505 as libc::c_longlong as u64_0,
     0xa121a1a150c0501 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10201 as libc::c_int as u64_0,
     0x10204090f12110d as libc::c_longlong as u64_0,
     0xa0808090c0d1116 as libc::c_longlong as u64_0,
     0x264944221e221d1d as libc::c_longlong as u64_0,
     0x1e1e1a18171b2119 as libc::c_longlong as u64_0,
     0x120d090605050402 as libc::c_longlong as u64_0,
     0x2060d1315110b04 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x3080d0e0c0a07 as libc::c_longlong as u64_0,
     0x5050507090a0e16 as libc::c_longlong as u64_0,
     0x2e482a15181a1615 as libc::c_longlong as u64_0,
     0x1717141110121a17 as libc::c_longlong as u64_0,
     0x100b070403030301 as libc::c_longlong as u64_0,
     0x103080d0f0d07 as libc::c_longlong as u64_0,
     0x200000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x105080a09070503 as libc::c_longlong as u64_0,
     0x303040506080d19 as libc::c_longlong as u64_0,
     0x353e180e1212100f as libc::c_longlong as u64_0,
     0x10110f0d0c0c1114 as libc::c_longlong as u64_0,
     0xe09060301010000 as libc::c_longlong as u64_0,
     0x104080a08 as libc::c_longlong as u64_0,
     0x401000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x205060504030101 as libc::c_longlong as u64_0,
     0x101030405070d1e as libc::c_longlong as u64_0,
     0x392d0e0b0e0d0b0b as libc::c_longlong as u64_0,
     0xc0d0b0908080a11 as libc::c_longlong as u64_0,
     0xd08050301000000 as libc::c_longlong as u64_0,
     0x1020405 as libc::c_int as u64_0,
     0x301000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x102030201000000 as libc::c_longlong as u64_0,
     0x10304070e23 as libc::c_longlong as u64_0,
     0x341b08090b090808 as libc::c_longlong as u64_0,
     0x80907050505060c as libc::c_longlong as u64_0,
     0xc07050300000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x103071227 as libc::c_longlong as u64_0,
     0x280f060809070605 as libc::c_longlong as u64_0,
     0x607050403030407 as libc::c_longlong as u64_0,
     0xa07040100000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x103091827 as libc::c_longlong as u64_0,
     0x1907040707050404 as libc::c_longlong as u64_0,
     0x405040301010104 as libc::c_longlong as u64_0,
     0x707030100000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1030b1d23 as libc::c_longlong as u64_0,
     0xd02020404030303 as libc::c_longlong as u64_0,
     0x304030100000001 as libc::c_longlong as u64_0,
     0x406030100000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x40f1e1c as libc::c_int as u64_0,
     0x701010302010001 as libc::c_longlong as u64_0,
     0x101010000000000 as libc::c_longlong as u64_0,
     0x204030000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x106121b11 as libc::c_longlong as u64_0,
     0x300000101000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x108131409 as libc::c_longlong as u64_0,
     0x100000100000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x108110d03 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1080d0601 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x106080200 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x2020000 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0];
// Initialized in run_static_initializers
#[no_mangle]
pub static mut gDorfLightBallMaterialDL: [Gfx; 14] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 14];
#[no_mangle]
pub static mut gDorfWindowShatterTemplateTex: [u64_0; 256] =
    [0xaaa7916161163b00 as libc::c_ulonglong,
     0x905000000 as libc::c_longlong as u64_0,
     0x7b7300 as libc::c_int as u64_0, 0x8b as libc::c_int as u64_0,
     0x70aa3c41a9855000 as libc::c_longlong as u64_0,
     0x3b82000000 as libc::c_longlong as u64_0,
     0x9e7300 as libc::c_int as u64_0, 0x9e8b as libc::c_int as u64_0,
     0xa7a7a7614311193b as libc::c_ulonglong,
     0x500f700000 as libc::c_longlong as u64_0,
     0x9ef100 as libc::c_int as u64_0, 0xf98b as libc::c_int as u64_0,
     0xfc20916143112222 as libc::c_ulonglong,
     0x35050037912c500 as libc::c_longlong as u64_0,
     0x4e73f1 as libc::c_int as u64_0, 0xfff9 as libc::c_int as u64_0,
     0x203c9161606a0308 as libc::c_longlong as u64_0,
     0x3003791b1b122eb4 as libc::c_longlong as u64_0,
     0x1f00000005013cf1 as libc::c_longlong as u64_0,
     0xf100000000fb8b73 as libc::c_ulonglong,
     0x203ccc4043111e03 as libc::c_longlong as u64_0,
     0x4279000000000000 as libc::c_longlong as u64_0,
     0x20071b1f7083cbe0 as libc::c_longlong as u64_0,
     0x7b73fbdff1736f7b as libc::c_longlong as u64_0,
     0x4e264049071d1e03 as libc::c_longlong as u64_0,
     0x350000000000000 as libc::c_longlong as u64_0,
     0x7d07e000000000 as libc::c_longlong as u64_0,
     0x4eaa1caae0000000 as libc::c_longlong as u64_0,
     0x1c010111012d0303 as libc::c_longlong as u64_0,
     0x324000000000000 as libc::c_longlong as u64_0,
     0xcf727400000000 as libc::c_longlong as u64_0,
     0x96a2e100000000 as libc::c_longlong as u64_0,
     0x15604f140b0c3403 as libc::c_longlong as u64_0,
     0x334000000000000 as libc::c_longlong as u64_0,
     0xcffc7000000000 as libc::c_longlong as u64_0,
     0xe07d9600000000 as libc::c_longlong as u64_0,
     0x659b40404f1d1e08 as libc::c_longlong as u64_0,
     0x300000000000000 as libc::c_longlong as u64_0,
     0xd9727000000000 as libc::c_longlong as u64_0,
     0xaacb9600000000 as libc::c_longlong as u64_0,
     0x6545659b15111e08 as libc::c_longlong as u64_0,
     0x300000000000000 as libc::c_longlong as u64_0,
     0xd9727000000000 as libc::c_longlong as u64_0,
     0x707d9500000000 as libc::c_longlong as u64_0,
     0x605f154f4f5b3408 as libc::c_longlong as u64_0,
     0x300000000000000 as libc::c_longlong as u64_0,
     0xe0b4c700000000 as libc::c_longlong as u64_0,
     0xa8707500000000 as libc::c_longlong as u64_0,
     0x4f8c264915160308 as libc::c_longlong as u64_0,
     0x3400000000000000 as libc::c_longlong as u64_0,
     0xb47282c700000000 as libc::c_ulonglong,
     0x705400000000 as libc::c_longlong as u64_0,
     0x4fd34015143a0330 as libc::c_longlong as u64_0,
     0x303000000000000 as libc::c_longlong as u64_0,
     0xc53d501f00000000 as libc::c_ulonglong,
     0xc574b8000000 as libc::c_longlong as u64_0,
     0x1c161515393a1a6e as libc::c_longlong as u64_0,
     0x87c00000000ba3d as libc::c_longlong as u64_0,
     0x30031695c000000 as libc::c_longlong as u64_0,
     0x712c774070000 as libc::c_longlong as u64_0,
     0x3a16141414e61a6e as libc::c_longlong as u64_0,
     0x30032f79c3c31e00 as libc::c_longlong as u64_0,
     0xed5c121f12 as libc::c_longlong as u64_0,
     0x390b090b4e7070b8 as libc::c_longlong as u64_0,
     0x1d110e1c14682210 as libc::c_longlong as u64_0,
     0x83424800000 as libc::c_longlong as u64_0,
     0xf5011 as libc::c_int as u64_0,
     0x6838000000263938 as libc::c_longlong as u64_0,
     0x4f5968761c3a1900 as libc::c_longlong as u64_0,
     0x8002000000 as libc::c_longlong as u64_0,
     0xe93800 as libc::c_int as u64_0, 0x710e as libc::c_int as u64_0,
     0x2e650c01163e9300 as libc::c_longlong as u64_0,
     0xd1e000000 as libc::c_longlong as u64_0,
     0x333800 as libc::c_int as u64_0, 0x7158 as libc::c_int as u64_0,
     0xd5d4593a1cac1900 as libc::c_ulonglong,
     0xdbe000000 as libc::c_longlong as u64_0,
     0xe1900 as libc::c_int as u64_0, 0x8758 as libc::c_int as u64_0,
     0x8cf059110e3e0300 as libc::c_ulonglong,
     0x40d000000 as libc::c_longlong as u64_0,
     0xfa0f4600 as libc::c_uint as u64_0, 0x2658 as libc::c_int as u64_0,
     0xae235911763e1900 as libc::c_ulonglong,
     0x44d000000 as libc::c_longlong as u64_0,
     0xfa77310e00 as libc::c_longlong as u64_0,
     0x2626 as libc::c_int as u64_0, 0xda5638ac1159221a as libc::c_ulonglong,
     0x42804d000d00 as libc::c_longlong as u64_0,
     0xd84180d224600 as libc::c_longlong as u64_0,
     0xdd26 as libc::c_int as u64_0,
     0x70b32d2d3f931a4c as libc::c_longlong as u64_0,
     0x22100d0d0d21 as libc::c_longlong as u64_0,
     0x2121bd0d0dbee505 as libc::c_longlong as u64_0,
     0x7826 as libc::c_int as u64_0, 0x8cee2d0cc43f2203 as libc::c_ulonglong,
     0x34c221008100835 as libc::c_longlong as u64_0,
     0x2100000000000246 as libc::c_longlong as u64_0,
     0xb3da39 as libc::c_int as u64_0,
     0x268e091d01091a10 as libc::c_longlong as u64_0,
     0x10031e0202240d4d as libc::c_longlong as u64_0,
     0x84 as libc::c_int as u64_0,
     0x46000039c1390e06 as libc::c_longlong as u64_0,
     0x28ee3f1d853e1a00 as libc::c_longlong as u64_0,
     0x6e04240000002fbd as libc::c_longlong as u64_0,
     0x2b as libc::c_int as u64_0,
     0x4a313b460fed3d3d as libc::c_longlong as u64_0,
     0x4f670c1d160c2500 as libc::c_longlong as u64_0,
     0x7c000000000221 as libc::c_longlong as u64_0,
     0x4000000000000b6 as libc::c_longlong as u64_0,
     0x3508031e00000000 as libc::c_longlong as u64_0,
     0xd3650c5b010c1900 as libc::c_ulonglong,
     0x2000000000051 as libc::c_longlong as u64_0,
     0x210000000000004d as libc::c_longlong as u64_0,
     0x211eed0000000000 as libc::c_longlong as u64_0,
     0x8fd41b01161b1900 as libc::c_ulonglong,
     0x301e000000000002 as libc::c_longlong as u64_0,
     0x18210000000000b6 as libc::c_longlong as u64_0,
     0x2118000000000000 as libc::c_longlong as u64_0,
     0xd78d593a16ac2500 as libc::c_ulonglong,
     0x804000000000000 as libc::c_longlong as u64_0,
     0x51bd0d000000004d as libc::c_longlong as u64_0,
     0x202000000000000 as libc::c_longlong as u64_0,
     0x8645593a165a2500 as libc::c_ulonglong,
     0x8004000000000000 as libc::c_ulonglong,
     0x5151bd0000002121 as libc::c_longlong as u64_0,
     0x2f00000000000000 as libc::c_longlong as u64_0,
     0x8f450911161b2500 as libc::c_ulonglong,
     0x8004000000000000 as libc::c_ulonglong,
     0xf877210d00004d35 as libc::c_ulonglong,
     0xad00000000000000 as libc::c_ulonglong,
     0x5263e3a161b2500 as libc::c_longlong as u64_0,
     0x8340000002f512b as libc::c_longlong as u64_0,
     0x7f1824043535040d as libc::c_longlong as u64_0,
     0xad00000000000000 as libc::c_ulonglong,
     0x138d0cc4011b2210 as libc::c_longlong as u64_0,
     0x300424022f625151 as libc::c_longlong as u64_0,
     0x6262622f7c083008 as libc::c_longlong as u64_0,
     0x2402187c00000000 as libc::c_longlong as u64_0,
     0x908d3fc4011b106e as libc::c_ulonglong,
     0x6e08242f7c000000 as libc::c_longlong as u64_0,
     0x7f040d24 as libc::c_int as u64_0,
     0xd0d244a4a020202 as libc::c_longlong as u64_0,
     0x5560985850c0808 as libc::c_longlong as u64_0,
     0x1004620000000000 as libc::c_longlong as u64_0,
     0x29020200 as libc::c_int as u64_0, 0xd022436 as libc::c_int as u64_0,
     0x40bf091d010c0400 as libc::c_longlong as u64_0,
     0x36180000000000 as libc::c_longlong as u64_0,
     0x7f020000 as libc::c_int as u64_0, 0x5184 as libc::c_int as u64_0,
     0xf0f42d09113e0400 as libc::c_ulonglong,
     0x47c0000000000 as libc::c_longlong as u64_0,
     0x18020000 as libc::c_int as u64_0, 0x2b as libc::c_int as u64_0,
     0x23bf9393389a0800 as libc::c_longlong as u64_0,
     0x362f00000000 as libc::c_longlong as u64_0,
     0x2f020000 as libc::c_int as u64_0, 0x2b as libc::c_int as u64_0,
     0x45450906010e7908 as libc::c_longlong as u64_0,
     0x4042f000000 as libc::c_longlong as u64_0,
     0x2020000 as libc::c_int as u64_0, 0x2b as libc::c_int as u64_0,
     0xccee1b116d070f36 as libc::c_ulonglong,
     0x8083004240000 as libc::c_longlong as u64_0,
     0x2934020200 as libc::c_longlong as u64_0, 0x2b as libc::c_int as u64_0,
     0x26cc1d1105070f36 as libc::c_longlong as u64_0,
     0x830300436247c as libc::c_longlong as u64_0,
     0x2f2f790310031802 as libc::c_longlong as u64_0,
     0x18a4 as libc::c_int as u64_0,
     0x288d1b5b0e070f04 as libc::c_longlong as u64_0,
     0x830000000000004 as libc::c_longlong as u64_0,
     0x410572525254c4a as libc::c_longlong as u64_0,
     0x84a4000000002f18 as libc::c_ulonglong,
     0xae671b0105050f22 as libc::c_ulonglong,
     0x3000000000000004 as libc::c_longlong as u64_0,
     0x361a4b0000000025 as libc::c_longlong as u64_0,
     0x4c4a020000362104 as libc::c_longlong as u64_0,
     0x5c4e1b010e050b1b as libc::c_longlong as u64_0,
     0x800000000000004 as libc::c_longlong as u64_0,
     0x3422250000000000 as libc::c_longlong as u64_0,
     0x2557030404040404 as libc::c_longlong as u64_0,
     0x5bf5a46690b130f as libc::c_longlong as u64_0,
     0x800000000000008 as libc::c_longlong as u64_0,
     0x322000000000000 as libc::c_longlong as u64_0,
     0x1a1a6e10100000 as libc::c_longlong as u64_0,
     0x86561b060e0b0701 as libc::c_ulonglong,
     0x300000000000000 as libc::c_longlong as u64_0,
     0x421a000000000000 as libc::c_longlong as u64_0,
     0x571000000000 as libc::c_longlong as u64_0,
     0xdc87799d0e0b0713 as libc::c_ulonglong,
     0x103000000000000 as libc::c_longlong as u64_0,
     0x1a1a000000000000 as libc::c_longlong as u64_0,
     0x571000000000 as libc::c_longlong as u64_0,
     0x33233b460f05072e as libc::c_longlong as u64_0,
     0x4301030000000000 as libc::c_longlong as u64_0,
     0x6e1a000000000000 as libc::c_longlong as u64_0,
     0x1a3000000000 as libc::c_longlong as u64_0,
     0x2e3c3b460f01122e as libc::c_longlong as u64_0,
     0xa9a90e0fe5423010 as libc::c_ulonglong,
     0x301a6e0000000000 as libc::c_longlong as u64_0,
     0x101000000000 as libc::c_longlong as u64_0,
     0xaea23b065b016d12 as libc::c_ulonglong,
     0x7ea4913120e5b01 as libc::c_longlong as u64_0,
     0x1111a0000000000 as libc::c_longlong as u64_0,
     0x1a100800000000 as libc::c_longlong as u64_0,
     0xf3b83c3c06110e0b as libc::c_ulonglong,
     0x39394928831f2e83 as libc::c_longlong as u64_0,
     0x83490e0f0f010e01 as libc::c_ulonglong,
     0x2d1b1d1d111d164f as libc::c_longlong as u64_0,
     0xd88113561b060f05 as libc::c_ulonglong,
     0x513282828132e2e as libc::c_longlong as u64_0,
     0x5813071f07070707 as libc::c_longlong as u64_0,
     0xc0b4f1514606060 as libc::c_longlong as u64_0,
     0x86411367381b0f05 as libc::c_ulonglong,
     0xe0b129213050707 as libc::c_longlong as u64_0,
     0x13070b0712120707 as libc::c_longlong as u64_0,
     0xc0b144f1414146d as libc::c_longlong as u64_0,
     0x12906b8e3f090601 as libc::c_longlong as u64_0,
     0x105050505051c1c as libc::c_longlong as u64_0,
     0xb051c6d0e0e0b01 as libc::c_longlong as u64_0,
     0xf716161c161c1c0b as libc::c_ulonglong,
     0x2341814e4567381b as libc::c_longlong as u64_0,
     0x611010e0e0e0e01 as libc::c_longlong as u64_0,
     0x10f0f01010e010f as libc::c_longlong as u64_0,
     0x9a0c0101c4851d16 as libc::c_ulonglong,
     0x8ea312371f453838 as libc::c_ulonglong,
     0x1b06064646460606 as libc::c_longlong as u64_0,
     0x6061b0606060909 as libc::c_longlong as u64_0,
     0x93f70c0c1b0c093e as libc::c_ulonglong,
     0x58f3143928dd264e as libc::c_longlong as u64_0,
     0x234e0909093b4126 as libc::c_longlong as u64_0,
     0x4e263f791b389b3c as libc::c_longlong as u64_0,
     0x56452d2d3f2dea40 as libc::c_longlong as u64_0,
     0x925c140790d58e87 as libc::c_ulonglong,
     0x6123383b2d3f1567 as libc::c_longlong as u64_0,
     0x4e60313b31311326 as libc::c_longlong as u64_0,
     0x45269a502d2d268c as libc::c_longlong as u64_0,
     0x12ae589269818112 as libc::c_longlong as u64_0,
     0x5135c8c8737282e as libc::c_longlong as u64_0,
     0xc945154049130526 as libc::c_ulonglong,
     0x2e26a3269b652892 as libc::c_longlong as u64_0,
     0x282e0bb91f133705 as libc::c_longlong as u64_0,
     0x75c0b8fdc281cd8 as libc::c_longlong as u64_0,
     0x151c6bd386158114 as libc::c_longlong as u64_0,
     0xb1515492e120e47 as libc::c_longlong as u64_0,
     0x50e3d07291cba1f as libc::c_longlong as u64_0,
     0xb863a1c330b1c05 as libc::c_longlong as u64_0,
     0xc190c93713431414 as libc::c_ulonglong,
     0x391413140e6b475a as libc::c_longlong as u64_0,
     0x5b3d0e0505fd92d7 as libc::c_longlong as u64_0,
     0x1512010bab696b05 as libc::c_longlong as u64_0,
     0x379005dc0505815f as libc::c_longlong as u64_0,
     0x690e05338f473346 as libc::c_longlong as u64_0];
static mut ovl_Boss_GanonVtx_00FC48: [Vtx; 3] =
    [Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(120 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [447 as libc::c_int as libc::c_short,
                                -(372 as libc::c_int) as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(104 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                60 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [-(450 as libc::c_int) as libc::c_short,
                                1024 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [104 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                60 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1679 as libc::c_int as libc::c_short,
                                1024 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },}];
// Initialized in run_static_initializers
#[no_mangle]
pub static mut gDorfLightStreak10DL: [Gfx; 7] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 7];
// Initialized in run_static_initializers
#[no_mangle]
pub static mut gDorfWindowShardModelDL: [Gfx; 3] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 3];
static mut ovl_Boss_GanonTex_01CEB8: [u64_0; 256] =
    [0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x100000000 as libc::c_longlong as u64_0,
     0x10201000001 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0x1000000000000 as libc::c_longlong as u64_0,
     0x100000000 as libc::c_longlong as u64_0,
     0x20402000101 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0x1010100000001 as libc::c_longlong as u64_0,
     0x100000000 as libc::c_longlong as u64_0,
     0x30703010102 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0x101010200000002 as libc::c_longlong as u64_0,
     0x101000100000000 as libc::c_longlong as u64_0,
     0x1050904010103 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x102020200000104 as libc::c_longlong as u64_0,
     0x302010100000000 as libc::c_longlong as u64_0,
     0x1060c06010103 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x202020200000206 as libc::c_longlong as u64_0,
     0x504010100000000 as libc::c_longlong as u64_0,
     0x1080f07010103 as libc::c_longlong as u64_0,
     0x100000100000000 as libc::c_longlong as u64_0,
     0x303020200010408 as libc::c_longlong as u64_0,
     0x706020100000000 as libc::c_longlong as u64_0,
     0x1091108010103 as libc::c_longlong as u64_0,
     0x100000100000001 as libc::c_longlong as u64_0,
     0x40403030101050b as libc::c_longlong as u64_0,
     0xa08030100000000 as libc::c_longlong as u64_0,
     0x20b140a010103 as libc::c_longlong as u64_0,
     0x100000100010102 as libc::c_longlong as u64_0,
     0x60604030203070d as libc::c_longlong as u64_0,
     0xc0a040100000000 as libc::c_longlong as u64_0,
     0x30d170b020103 as libc::c_longlong as u64_0,
     0x101000100010205 as libc::c_longlong as u64_0,
     0x90805030205090e as libc::c_longlong as u64_0,
     0xe0d050100000000 as libc::c_longlong as u64_0,
     0x1050f180c020102 as libc::c_longlong as u64_0,
     0x101000100010408 as libc::c_longlong as u64_0,
     0xd0b050203070b0f as libc::c_longlong as u64_0,
     0xf0f060100000000 as libc::c_longlong as u64_0,
     0x20812190d030102 as libc::c_longlong as u64_0,
     0x100010001050b as libc::c_longlong as u64_0,
     0x130f070204080b0f as libc::c_longlong as u64_0,
     0x1011080100000000 as libc::c_longlong as u64_0,
     0x30c14190e040101 as libc::c_longlong as u64_0,
     0x100010001070f as libc::c_longlong as u64_0,
     0x19140a0305090b0e as libc::c_longlong as u64_0,
     0x10130a0200000001 as libc::c_longlong as u64_0,
     0x51217190e040100 as libc::c_longlong as u64_0,
     0x1010201020a13 as libc::c_longlong as u64_0,
     0x1f1a0f0606090a0c as libc::c_longlong as u64_0,
     0x10150b0301000001 as libc::c_longlong as u64_0,
     0x8181b190f050201 as libc::c_longlong as u64_0,
     0x102010202040d18 as libc::c_longlong as u64_0,
     0x2721140a080a0a0c as libc::c_longlong as u64_0,
     0x11160d0402020001 as libc::c_longlong as u64_0,
     0xb1e1e1910070403 as libc::c_longlong as u64_0,
     0x20302020408111d as libc::c_longlong as u64_0,
     0x2f2a1b0f0a0b0b0d as libc::c_longlong as u64_0,
     0x12180f0604040101 as libc::c_longlong as u64_0,
     0xe24211911090606 as libc::c_longlong as u64_0,
     0x4040304070c1623 as libc::c_longlong as u64_0,
     0x383222140e0d0e10 as libc::c_longlong as u64_0,
     0x141a110806060102 as libc::c_longlong as u64_0,
     0x112a241a120b0909 as libc::c_longlong as u64_0,
     0x60505070b111c29 as libc::c_longlong as u64_0,
     0x413b291b13101216 as libc::c_longlong as u64_0,
     0x181b120908080304 as libc::c_longlong as u64_0,
     0x152f271b140e0c0c as libc::c_longlong as u64_0,
     0x907080b10172230 as libc::c_longlong as u64_0,
     0x4a4332231813161d as libc::c_longlong as u64_0,
     0x1d1e140b0a0a0608 as libc::c_longlong as u64_0,
     0x1a342b1e17110f0f as libc::c_longlong as u64_0,
     0xc0b0d11171f2a38 as libc::c_longlong as u64_0,
     0x534c3b2b1e161c25 as libc::c_longlong as u64_0,
     0x2221160d0b0c0a0e as libc::c_longlong as u64_0,
     0x213930231b151211 as libc::c_longlong as u64_0,
     0xf0f12171e273240 as libc::c_longlong as u64_0,
     0x5c564534251b242f as libc::c_longlong as u64_0,
     0x2924190f0e0e0f17 as libc::c_longlong as u64_0,
     0x293e372b21181513 as libc::c_longlong as u64_0,
     0x1113181e26303b48 as libc::c_longlong as u64_0,
     0x655f4e3e2d222d3a as libc::c_longlong as u64_0,
     0x30271c1311111520 as libc::c_longlong as u64_0,
     0x32453f35281d1714 as libc::c_longlong as u64_0,
     0x14181e252f3a4551 as libc::c_longlong as u64_0,
     0x6f695746362b3744 as libc::c_longlong as u64_0,
     0x372a1f1715151d2a as libc::c_longlong as u64_0,
     0x3d4d483f31231a14 as libc::c_longlong as u64_0,
     0x171e252e38444f5b as libc::c_longlong as u64_0,
     0x7974614f4036404c as libc::c_longlong as u64_0,
     0x3c2d231d1a1a2637 as libc::c_longlong as u64_0,
     0x4957524a3a2a1d15 as libc::c_longlong as u64_0,
     0x1a252e3743505b66 as libc::c_longlong as u64_0,
     0x837f6c594a414750 as libc::c_ulonglong,
     0x3f2e272321213245 as libc::c_longlong as u64_0,
     0x57625d5443312216 as libc::c_longlong as u64_0,
     0x1f2d37414d5b6671 as libc::c_longlong as u64_0,
     0x8e8b7662544b4d51 as libc::c_ulonglong,
     0x3f302c2c2b2d4054 as libc::c_longlong as u64_0,
     0x656d675e4c3a281a as libc::c_longlong as u64_0,
     0x2536414b5867717b as libc::c_longlong as u64_0,
     0x9896816c5e545150 as libc::c_ulonglong,
     0x3f323337383c5063 as libc::c_longlong as u64_0,
     0x7177716856432f21 as libc::c_longlong as u64_0,
     0x2c3f4b5663727c86 as libc::c_longlong as u64_0,
     0xa2a08b76685d5651 as libc::c_ulonglong,
     0x3f343a43484d5f70 as libc::c_longlong as u64_0,
     0x7d827b715f4c3829 as libc::c_longlong as u64_0,
     0x344654626f7c8690 as libc::c_longlong as u64_0,
     0xaca9958172655b53 as libc::c_ulonglong,
     0x42394450585e6d7c as libc::c_longlong as u64_0,
     0x878c847968574334 as libc::c_ulonglong,
     0x3d4e5e6e7b88919a as libc::c_longlong as u64_0,
     0xb4b09e8c7c6e6155 as libc::c_ulonglong,
     0x46414f5f676e7b87 as libc::c_longlong as u64_0,
     0x92958c8071625041 as libc::c_ulonglong,
     0x4857697a86929ba3 as libc::c_longlong as u64_0,
     0xbbb7a79686776658 as libc::c_ulonglong,
     0x4d4b5c6e777d8791 as libc::c_longlong as u64_0,
     0x9c9f94877a6d5c4f as libc::c_ulonglong,
     0x54617486919ca4ab as libc::c_longlong as u64_0,
     0xc2bbafa1907f6c5d as libc::c_ulonglong,
     0x55576a7e8589929a as libc::c_longlong as u64_0,
     0xa5a99d908478695e as libc::c_ulonglong,
     0x5f697f939da6acb2 as libc::c_longlong as u64_0,
     0xc8bfb6ac9a877465 as libc::c_ulonglong,
     0x6064788d92949ba1 as libc::c_longlong as u64_0,
     0xadb2a89c8f83766c as libc::c_ulonglong,
     0x6a718aa1a9afb2b8 as libc::c_longlong as u64_0,
     0xcec3bdb6a4907e70 as libc::c_ulonglong,
     0x6c72879b9c9ca2a8 as libc::c_longlong as u64_0,
     0xb5bbb3a99b8e8279 as libc::c_ulonglong,
     0x737693aeb4b6b9be as libc::c_longlong as u64_0,
     0xd5c9c5bfaf9c8b7e as libc::c_ulonglong,
     0x7a8094a5a4a0a7b0 as libc::c_longlong as u64_0,
     0xbdc5c0b7a8998e85 as libc::c_ulonglong,
     0x7b7b9ab7bdbec0c5 as libc::c_longlong as u64_0,
     0xdbcfccc8baa9998e as libc::c_ulonglong,
     0x898e9fada8a1acb8 as libc::c_ulonglong,
     0xc6ceccc5b6a4988f as libc::c_ulonglong,
     0x8381a0bec4c6c8cd as libc::c_ulonglong,
     0xe0d4d3d1c5b7a89d as libc::c_ulonglong,
     0x989ca8b3aba2b0c0 as libc::c_ulonglong,
     0xced8d8d2c2aea298 as libc::c_ulonglong,
     0x8c89a6c3caced1d5 as libc::c_ulonglong,
     0xe5dbdad8d0c4b6ab as libc::c_ulonglong,
     0xa6a8b1b8aea4b5c7 as libc::c_ulonglong,
     0xd6e0e3decdb7aba2 as libc::c_ulonglong,
     0x9590acc9d0d5d9dc as libc::c_ulonglong,
     0xebe1e0dedad1c4b9 as libc::c_ulonglong,
     0xb2b2b8bcb1a7b9ce as libc::c_ulonglong,
     0xdee8ece8d6bdb3ac as libc::c_ulonglong,
     0x9e98b3ced6dbe0e3 as libc::c_ulonglong,
     0xf0e9e6e3e3ddd2c6 as libc::c_ulonglong,
     0xbcbabec0b4aabed5 as libc::c_ulonglong,
     0xe5eff3f0ddc2bbb6 as libc::c_ulonglong,
     0xa79fb9d4dce2e7e9 as libc::c_ulonglong,
     0xf5f0ece7eae8ded2 as libc::c_ulonglong,
     0xc6c1c2c3b7adc4dd as libc::c_ulonglong,
     0xebf3f8f5e1c6c2c1 as libc::c_ulonglong,
     0xb1a7bfd8e1e7edf0 as libc::c_ulonglong,
     0xf9f5f1ebf0f0e9dd as libc::c_ulonglong,
     0xcfc7c7c6bbb1cbe5 as libc::c_ulonglong,
     0xf0f5fbf7e3cacacc as libc::c_ulonglong,
     0xbbb0c5dce5ecf4f6 as libc::c_ulonglong,
     0xfcf9f5eef5f7f0e7 as libc::c_ulonglong,
     0xd7cdcccbbfb7d2eb as libc::c_ulonglong,
     0xf4f7fbf6e4cdd2d6 as libc::c_ulonglong,
     0xc6b9cbe0e9f1f9fb as libc::c_ulonglong,
     0xfdfcf8f2f9faf6ee as libc::c_ulonglong,
     0xdfd5d3d0c5bdd9f0 as libc::c_ulonglong,
     0xf7f9fbf4e5d0d9e0 as libc::c_ulonglong,
     0xd1c2d2e4edf5fcfe as libc::c_ulonglong,
     0xfefdfaf4fbfcf9f3 as libc::c_ulonglong,
     0xe6dddad7cbc3def4 as libc::c_ulonglong,
     0xfafbfcf3e5d3dee8 as libc::c_ulonglong,
     0xdbcddae9f2f8feff as libc::c_ulonglong,
     0xfefdfcf6fcfdfcf7 as libc::c_ulonglong,
     0xece4e2dfd2c9e3f7 as libc::c_ulonglong,
     0xfcfdfbf3e5d6e4ef as libc::c_ulonglong,
     0xe3d6e1eef6fafeff as libc::c_ulonglong,
     0xfefdfdf8fcfdfdfa as libc::c_ulonglong,
     0xf1eae9e7d9cfe7f9 as libc::c_ulonglong,
     0xfefefbf3e7dbe9f4 as libc::c_ulonglong,
     0xebdfe8f3f9fcffff as libc::c_ulonglong,
     0xfefdfdfafdfdfefc as libc::c_ulonglong,
     0xf5efefeee0d5ecfb as libc::c_ulonglong,
     0xfffefbf3e9e1eef8 as libc::c_ulonglong,
     0xf0e6eef6fcfdffff as libc::c_ulonglong,
     0xfefdfefcfefdfefe as libc::c_ulonglong,
     0xf8f4f4f3e7ddf1fd as libc::c_ulonglong,
     0xfffefbf3ece7f3fc as libc::c_ulonglong,
     0xf5ecf2f9fdfeffff as libc::c_ulonglong,
     0xfefdfffefffdfefe as libc::c_ulonglong,
     0xfaf7f8f7ede5f5fe as libc::c_ulonglong,
     0xfffefbf5f0edf7fd as libc::c_ulonglong,
     0xf9f1f5fafeffffff as libc::c_ulonglong,
     0xfefdfffffffefeff as libc::c_ulonglong,
     0xfcfafafaf2ecf8fe as libc::c_ulonglong,
     0xfffefcf7f4f3fafe as libc::c_ulonglong,
     0xfbf6f8fbfeffffff as libc::c_ulonglong,
     0xfefdfffffffefeff as libc::c_ulonglong,
     0xfdfcfcfcf7f2fbff as libc::c_ulonglong,
     0xfffefcfaf8f7fcff as libc::c_ulonglong,
     0xfefafbfcffffffff as libc::c_ulonglong,
     0xfefeffffffffffff as libc::c_ulonglong,
     0xfefdfefdfaf7fcff as libc::c_ulonglong,
     0xfffefdfcfcfbfdff as libc::c_ulonglong,
     0xfffdfdfdffffffff as libc::c_ulonglong,
     0xfffeffffffffffff as libc::c_ulonglong,
     0xfffefefefcfafdff as libc::c_ulonglong,
     0xfffefefefefdfeff as libc::c_ulonglong,
     0xfffffefdffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xfffffffffdfcfeff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xfffffffeffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xfffffffffefeffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong];
// Initialized in run_static_initializers
#[no_mangle]
pub static mut gDorfImpactLightDL: [Gfx; 35] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 35];
// Initialized in run_static_initializers
#[no_mangle]
pub static mut gDorfShockGlowDL: [Gfx; 25] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 25];
static mut ovl_Boss_GanonVtx_01EE88: [Vtx; 4] =
    [Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(7 as libc::c_int) as libc::c_short,
                                -(9 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [7 as libc::c_int as libc::c_short,
                                -(9 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1024 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [7 as libc::c_int as libc::c_short,
                                9 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1024 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(7 as libc::c_int) as libc::c_short,
                                9 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },}];
static mut ovl_Boss_GanonTex_01E688: [u64_0; 256] =
    [0x2f3e56aba4582102 as libc::c_longlong as u64_0,
     0x10417ab0805c312a as libc::c_longlong as u64_0,
     0x32376dd4a2633907 as libc::c_longlong as u64_0,
     0xb387da26d81470c as libc::c_longlong as u64_0,
     0x3c5c60aca5571801 as libc::c_longlong as u64_0,
     0x154c97b968533236 as libc::c_longlong as u64_0,
     0x304276d69b533108 as libc::c_longlong as u64_0,
     0x154a96b77c9b400b as libc::c_longlong as u64_0,
     0x3e756faeaf5d1301 as libc::c_longlong as u64_0,
     0x1d59b4bf53432c38 as libc::c_longlong as u64_0,
     0x2f487dcc8a4a2406 as libc::c_longlong as u64_0,
     0x1f5db0c890b55110 as libc::c_longlong as u64_0,
     0x408b7faab76d1503 as libc::c_longlong as u64_0,
     0x286accbe43312030 as libc::c_longlong as u64_0,
     0x2b4c82ba77431607 as libc::c_longlong as u64_0,
     0x2b70c7d5a6b95b13 as libc::c_longlong as u64_0,
     0x409c93a6b87d1d08 as libc::c_longlong as u64_0,
     0x367fe1c13c261629 as libc::c_longlong as u64_0,
     0x2a508aab69410c0c as libc::c_longlong as u64_0,
     0x3986dddbb5ae6316 as libc::c_longlong as u64_0,
     0x40a0a7a1aa7d2610 as libc::c_longlong as u64_0,
     0x4596f1cd47281e36 as libc::c_longlong as u64_0,
     0x365c97a363450713 as libc::c_longlong as u64_0,
     0x499df0d8b49e721a as libc::c_longlong as u64_0,
     0x409ab59f8a662d1c as libc::c_longlong as u64_0,
     0x57aefbdf6b404456 as libc::c_longlong as u64_0,
     0x536ea49b6a4d061e as libc::c_longlong as u64_0,
     0x5cb6fcc69a8e7f20 as libc::c_longlong as u64_0,
     0x428ebea0623f2e2a as libc::c_longlong as u64_0,
     0x69c6fff09a686569 as libc::c_longlong as u64_0,
     0x6f83ac927f5d0b2a as libc::c_longlong as u64_0,
     0x70cdffb277848d29 as libc::c_longlong as u64_0,
     0x4787c4a0401d2e3e as libc::c_longlong as u64_0,
     0x7ed9fffcc48f7973 as libc::c_longlong as u64_0,
     0x8598ae869a701339 as libc::c_ulonglong,
     0x85e1ffa65e859534 as libc::c_ulonglong,
     0x5189c99b2c0b3455 as libc::c_longlong as u64_0,
     0x92e9fffadcab8071 as libc::c_ulonglong,
     0x94acad7ab1882249 as libc::c_ulonglong,
     0x9af1ffb06a8f9746 as libc::c_ulonglong,
     0x6394cd8d290c416f as libc::c_longlong as u64_0,
     0xa5eefff4dcb46b6d as libc::c_ulonglong,
     0xa1bfad77b6a43a58 as libc::c_ulonglong,
     0xaaf8ffc884959963 as libc::c_ulonglong,
     0x7ba4ce78351a588e as libc::c_longlong as u64_0,
     0xb5e3f9f1cfac6077 as libc::c_ulonglong,
     0xabcfac77a8c05a6a as libc::c_ulonglong,
     0xb2f3ffe1a3959471 as libc::c_ulonglong,
     0x94b9d065473274a9 as libc::c_ulonglong,
     0xbdcdecefc2a05f86 as libc::c_ulonglong,
     0xbaddac7892d87c7d as libc::c_ulonglong,
     0xafdefdf1bc8c8971 as libc::c_ulonglong,
     0xa6d2d45a584b95bb as libc::c_ulonglong,
     0xc1b3d5edb8956697 as libc::c_ulonglong,
     0xc5e9a6707ae6978f as libc::c_ulonglong,
     0xa4bef0efb9797360 as libc::c_ulonglong,
     0xb1e8dd5d5d5fafc7 as libc::c_ulonglong,
     0xc49cb8e3af8c78a5 as libc::c_ulonglong,
     0xcbf19d5f6ae5a6a3 as libc::c_ulonglong,
     0x9398dbe7b46a5841 as libc::c_ulonglong,
     0xb8f2e871586dc1cd as libc::c_ulonglong,
     0xc78c9dd5aa878cb1 as libc::c_ulonglong,
     0xd8f8924963dcabb3 as libc::c_ulonglong,
     0x8576c5d8a95e4430 as libc::c_ulonglong,
     0xc0ebee915378cace as libc::c_ulonglong,
     0xc58087c5a4859eae as libc::c_ulonglong,
     0xe1fd8a3660d0acbd as libc::c_ulonglong,
     0x7765b9c59c563a2b as libc::c_longlong as u64_0,
     0xced7e7b45484c7cc as libc::c_ulonglong,
     0xb66f7cbb9f81a898 as libc::c_ulonglong,
     0xe3ff8d2e63c8b0ba as libc::c_ulonglong,
     0x6d69b8b093573b2e as libc::c_longlong as u64_0,
     0xe0c2ced26898c0c3 as libc::c_ulonglong,
     0x97587ebc9d749570 as libc::c_ulonglong,
     0xdeff9d3667c8b4a8 as libc::c_ulonglong,
     0x6682bd9b93643e37 as libc::c_longlong as u64_0,
     0xf0b4a8de86a9b6b0 as libc::c_ulonglong,
     0x70448bbe99617545 as libc::c_longlong as u64_0,
     0xd1ffb84e70cab48c as libc::c_ulonglong,
     0x64a4bd8d96763d41 as libc::c_longlong as u64_0,
     0xfaac82daa7b6ae9a as libc::c_ulonglong,
     0x4d359ac090494f27 as libc::c_longlong as u64_0,
     0xc0ffd67580ccad6d as libc::c_ulonglong,
     0x63c1b6819c85374e as libc::c_longlong as u64_0,
     0xffa069c9c1baa785 as libc::c_ulonglong,
     0x3936a4b67d342e18 as libc::c_longlong as u64_0,
     0xa9ffeea59ac59f56 as libc::c_ulonglong,
     0x60d0a8739288315e as libc::c_longlong as u64_0,
     0xfb8669b6d0b6a473 as libc::c_ulonglong,
     0x3c47a39a6228241b as libc::c_longlong as u64_0,
     0x8bfff6cdb7bb8f47 as libc::c_ulonglong,
     0x57cfa16977782c6b as libc::c_longlong as u64_0,
     0xe56478aad6ac9e64 as libc::c_ulonglong,
     0x4e61977c4b232428 as libc::c_longlong as u64_0,
     0x6fffebe5d0af813c as libc::c_longlong as u64_0,
     0x44c2a2665b61296e as libc::c_longlong as u64_0,
     0xc04188a8d4a09051 as libc::c_ulonglong,
     0x5d788b613e202234 as libc::c_longlong as u64_0,
     0x58f9d7dfdea27332 as libc::c_longlong as u64_0,
     0x31ae9a6c3e4b2f62 as libc::c_longlong as u64_0,
     0x902688b3d0937a3f as libc::c_ulonglong,
     0x5d7d8b5837241f35 as libc::c_longlong as u64_0,
     0x46f2c5bfd7956528 as libc::c_longlong as u64_0,
     0x1e918e763442424a as libc::c_longlong as u64_0,
     0x601774c3cb8f6630 as libc::c_longlong as u64_0,
     0x48698261333c2729 as libc::c_longlong as u64_0,
     0x3cecbf95c2885420 as libc::c_longlong as u64_0,
     0x11717b784952673a as libc::c_longlong as u64_0,
     0x3d1153cdc994602f as libc::c_longlong as u64_0,
     0x2d496f6d31674418 as libc::c_longlong as u64_0,
     0x32e7ca6ca77d4318 as libc::c_longlong as u64_0,
     0x95266726b6f963e as libc::c_longlong as u64_0,
     0x2b1036d0caa26e3c as libc::c_longlong as u64_0,
     0x1b2a5a7b3798700f as libc::c_longlong as u64_0,
     0x2bdfd94d8c773712 as libc::c_longlong as u64_0,
     0x43c606c9086b955 as libc::c_longlong as u64_0,
     0x281225c9c7ad8954 as libc::c_longlong as u64_0,
     0x141b408553cb9c10 as libc::c_longlong as u64_0,
     0x26d3e63a757a3b11 as libc::c_longlong as u64_0,
     0x131666fab87ba6a as libc::c_longlong as u64_0,
     0x2e151fbfc1aea16a as libc::c_longlong as u64_0,
     0x1721388c81ecbb17 as libc::c_longlong as u64_0,
     0x23c1ee306688561e as libc::c_longlong as u64_0,
     0x2317381a36a9566 as libc::c_longlong as u64_0,
     0x3b171fb9b5a5af7a as libc::c_longlong as u64_0,
     0x1b384395abfbc81d as libc::c_longlong as u64_0,
     0x20aaeb2861987838 as libc::c_longlong as u64_0,
     0x535829985405d4e as libc::c_longlong as u64_0,
     0x45181fb5a695b083 as libc::c_longlong as u64_0,
     0x1c55569cceffcf1e as libc::c_longlong as u64_0,
     0x1a8cda2462a39755 as libc::c_longlong as u64_0,
     0xa398fae601a2a2c as libc::c_longlong as u64_0,
     0x49161fb19a8bac8a as libc::c_longlong as u64_0,
     0x23736da0e0ffd61e as libc::c_longlong as u64_0,
     0x136baf2370abad6d as libc::c_longlong as u64_0,
     0x143d95bd41030d16 as libc::c_longlong as u64_0,
     0x41151daa938baa94 as libc::c_longlong as u64_0,
     0x2e8a8ba7e6ffd921 as libc::c_longlong as u64_0,
     0xc4a7d2d7cacab70 as libc::c_longlong as u64_0,
     0x244093c338020f11 as libc::c_longlong as u64_0,
     0x2f151ca39293aba1 as libc::c_longlong as u64_0,
     0x3995aab7edf7d924 as libc::c_longlong as u64_0,
     0x72f584283ae9c66 as libc::c_longlong as u64_0,
     0x3f498ec7420d2812 as libc::c_longlong as u64_0,
     0x1e151f9b989cb0b2 as libc::c_longlong as u64_0,
     0x4697c5cef5f0d626 as libc::c_longlong as u64_0,
     0x61b435b85b18a5b as libc::c_longlong as u64_0,
     0x5f568bcd54245213 as libc::c_longlong as u64_0,
     0x121725939fa1bac0 as libc::c_longlong as u64_0,
     0x5291d4e1faf0d123 as libc::c_longlong as u64_0,
     0x711416f82b2765b as libc::c_longlong as u64_0,
     0x84668fcb684d8212 as libc::c_ulonglong,
     0x1318308aa3a2c2c6 as libc::c_longlong as u64_0,
     0x5f88d3eefef6c81b as libc::c_longlong as u64_0,
     0xb10427685b06a72 as libc::c_longlong as u64_0,
     0xa97896c37c81ac19 as libc::c_ulonglong,
     0x24194083a2a0c6c4 as libc::c_longlong as u64_0,
     0x6a82ccf1ffffb910 as libc::c_longlong as u64_0,
     0x14173e778bae6992 as libc::c_longlong as u64_0,
     0xc6879bb492b3c933 as libc::c_ulonglong,
     0x3c1d4f7d9da2ccbe as libc::c_longlong as u64_0,
     0x7381c6e6ffffb111 as libc::c_longlong as u64_0,
     0x2623397592af6daf as libc::c_longlong as u64_0,
     0xdb949aa3addbdd64 as libc::c_ulonglong,
     0x5927597b99aad4b9 as libc::c_longlong as u64_0,
     0x7687c6d5fcffb736 as libc::c_longlong as u64_0,
     0x432d3a7898b371bd as libc::c_longlong as u64_0,
     0xe5a0989eccf2eaa0 as libc::c_ulonglong,
     0x753c5c809db9e3bc as libc::c_longlong as u64_0,
     0x7896cfbff6ffcb72 as libc::c_longlong as u64_0,
     0x64323f819cbc70b4 as libc::c_longlong as u64_0,
     0xe3ac9eade6fbf6cf as libc::c_ulonglong,
     0x8b5c5c85a7c8f4c2 as libc::c_ulonglong,
     0x7aa6d9a3f0ffe2a9 as libc::c_longlong as u64_0,
     0x8032448da4c970a0 as libc::c_ulonglong,
     0xdbb5aac6f7fefde7 as libc::c_ulonglong,
     0xa3806187b0d6ffc9 as libc::c_ulonglong,
     0x7fb5d686e7fff0d2 as libc::c_longlong as u64_0,
     0x8d2f4e98abd7768d as libc::c_ulonglong,
     0xcfb9b4e1f8f8ffe7 as libc::c_ulonglong,
     0xb29b7089b7e4ffcd as libc::c_ulonglong,
     0x8cb8bf65d5fff0d7 as libc::c_ulonglong,
     0x8d34609db4e48385 as libc::c_ulonglong,
     0xc3bab0f1e2e8fedc as libc::c_ulonglong,
     0xb5a07a8dbdefffd0 as libc::c_ulonglong,
     0x9aab9543b9ffe9c3 as libc::c_ulonglong,
     0x80447497c0ef9c90 as libc::c_ulonglong,
     0xbdb997e5c2ccfbd4 as libc::c_ulonglong,
     0xab8f7387c8f8ffd4 as libc::c_ulonglong,
     0xa493632498ffe5b3 as libc::c_ulonglong,
     0x6f577e8acefabca8 as libc::c_longlong as u64_0,
     0xc0bc71c79eadf4d2 as libc::c_ulonglong,
     0x916d5d7bd4feffd6 as libc::c_ulonglong,
     0xa575390f76ffe4a6 as libc::c_ulonglong,
     0x656a7f7dddffdabf as libc::c_longlong as u64_0,
     0xc8bf4ca18095e8cc as libc::c_ulonglong,
     0x744a3b66daffffd6 as libc::c_longlong as u64_0,
     0x9d5b1e045dfddf9a as libc::c_ulonglong,
     0x6075787aecfff1cd as libc::c_longlong as u64_0,
     0xcec42e7c7087d6bf as libc::c_ulonglong,
     0x5a311f49d4ffffd0 as libc::c_longlong as u64_0,
     0x8e4b110050f7d892 as libc::c_ulonglong,
     0x68767788f6fffdce as libc::c_longlong as u64_0,
     0xcdc31e656e88c3a8 as libc::c_ulonglong,
     0x4922153ac3fffdc4 as libc::c_longlong as u64_0,
     0x7f410b034beed08b as libc::c_longlong as u64_0,
     0x747682a0fdfffebf as libc::c_longlong as u64_0,
     0xbcb614567792b18b as libc::c_ulonglong,
     0x3e19153db5fff8b2 as libc::c_longlong as u64_0,
     0x733b09084de0c487 as libc::c_longlong as u64_0,
     0x827797bcfffff8ab as libc::c_ulonglong,
     0x9e9b0e50869e9f6e as libc::c_ulonglong,
     0x3714184db5fff09e as libc::c_longlong as u64_0,
     0x67380c1156cfb285 as libc::c_longlong as u64_0,
     0x8f7eadd4ffffed96 as libc::c_ulonglong,
     0x78730a539ca98f57 as libc::c_longlong as u64_0,
     0x310f1c69c8ffe18a as libc::c_longlong as u64_0,
     0x5d35161d64bc9e84 as libc::c_longlong as u64_0,
     0x978bbfe7ffffdd81 as libc::c_ulonglong,
     0x5348075ab5b07f48 as libc::c_longlong as u64_0,
     0x290a2088e1ffcf75 as libc::c_longlong as u64_0,
     0x5335272b74ad877f as libc::c_longlong as u64_0,
     0x9c9dcff3fffec86e as libc::c_ulonglong,
     0x35260864c6b16f3e as libc::c_longlong as u64_0,
     0x200422a6f8fcb95f as libc::c_longlong as u64_0,
     0x47373a3c86a36f73 as libc::c_longlong as u64_0,
     0x9fb0d9fafff7b15b as libc::c_ulonglong,
     0x21110e70cdab6139 as libc::c_longlong as u64_0,
     0x160027c1fff09f4c as libc::c_longlong as u64_0,
     0x3b3a4b4d989d5b5d as libc::c_longlong as u64_0,
     0x9db5d9feffea994c as libc::c_ulonglong,
     0x1509177bc8a15c3c as libc::c_longlong as u64_0,
     0xe022bd1ffe1873b as libc::c_longlong as u64_0,
     0x2f3e5460a8954f44 as libc::c_longlong as u64_0,
     0x96a6ceffffd7823c as libc::c_ulonglong,
     0xc0a2784b9956343 as libc::c_longlong as u64_0,
     0xb0731dbffce722c as libc::c_longlong as u64_0,
     0x22415672b58c4a31 as libc::c_longlong as u64_0,
     0x8a88bafffac56e2e as libc::c_ulonglong,
     0x60f398fa989764a as libc::c_longlong as u64_0,
     0xa0c3ae1ffb85f20 as libc::c_longlong as u64_0,
     0x17425787bf824826 as libc::c_longlong as u64_0,
     0x775fa3fff1b66121 as libc::c_longlong as u64_0,
     0x3164b989a818e4a as libc::c_longlong as u64_0,
     0xa1040d4e8974d14 as libc::c_longlong as u64_0,
     0x11405495bb74401f as libc::c_longlong as u64_0,
     0x603d86f1d7a35414 as libc::c_longlong as u64_0,
     0x21956948476943e as libc::c_longlong as u64_0,
     0x171a46c5cc7d3d0c as libc::c_longlong as u64_0,
     0xd3e599eae6c371c as libc::c_longlong as u64_0,
     0x4a2d72e3c38f4c0e as libc::c_longlong as u64_0,
     0x3205f96766a792a as libc::c_longlong as u64_0,
     0x242b4fb8b66a2e06 as libc::c_longlong as u64_0,
     0xd3e66aa9b663322 as libc::c_longlong as u64_0,
     0x3b2d6cddb47b450a as libc::c_longlong as u64_0,
     0x62b6e9c6e705d17 as libc::c_longlong as u64_0];
static mut ovl_Boss_GanonTex_01DE88: [u64_0; 256] =
    [0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x10101 as libc::c_int as u64_0,
     0x101010100000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x101020303 as libc::c_longlong as u64_0,
     0x303020101000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x10203040506 as libc::c_longlong as u64_0,
     0x606050302010000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1030406080a0b as libc::c_longlong as u64_0,
     0xb0a080605030100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x10305080b0e1011 as libc::c_longlong as u64_0,
     0x12100e0b08050301 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x205090d12151819 as libc::c_longlong as u64_0,
     0x191816120d090502 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1 as libc::c_int as u64_0,
     0x4080e13191d2021 as libc::c_longlong as u64_0,
     0x21201e1a140e0904 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x103 as libc::c_int as u64_0,
     0x70d141a21252829 as libc::c_longlong as u64_0,
     0x292825221c150e08 as libc::c_longlong as u64_0,
     0x301000000000000 as libc::c_longlong as u64_0,
     0x206 as libc::c_int as u64_0,
     0xb131c232a2e3032 as libc::c_longlong as u64_0,
     0x32302e2a241d140c as libc::c_longlong as u64_0,
     0x602000000000000 as libc::c_longlong as u64_0,
     0x10409 as libc::c_int as u64_0,
     0x111a252c3337393b as libc::c_longlong as u64_0,
     0x3b3a37332d261c12 as libc::c_longlong as u64_0,
     0x904010000000000 as libc::c_longlong as u64_0,
     0x2060d as libc::c_int as u64_0,
     0x17232e363c404243 as libc::c_longlong as u64_0,
     0x4342403d372f2418 as libc::c_longlong as u64_0,
     0xe06020000000000 as libc::c_longlong as u64_0,
     0x30912 as libc::c_int as u64_0,
     0x1f2c373f454a4c4e as libc::c_longlong as u64_0,
     0x4e4c4a4640382e20 as libc::c_longlong as u64_0,
     0x140a040100000000 as libc::c_longlong as u64_0,
     0x1050c19 as libc::c_int as u64_0,
     0x283641494f545658 as libc::c_longlong as u64_0,
     0x585755504a423729 as libc::c_longlong as u64_0,
     0x1a0e060100000000 as libc::c_longlong as u64_0,
     0x2071120 as libc::c_int as u64_0,
     0x313f4b53595e6062 as libc::c_longlong as u64_0,
     0x62615f5a554c4233 as libc::c_longlong as u64_0,
     0x2213080200000000 as libc::c_longlong as u64_0,
     0x30a1728 as libc::c_int as u64_0,
     0x3a49545c63676a6c as libc::c_longlong as u64_0,
     0x6c6b68655f564b3c as libc::c_longlong as u64_0,
     0x2a190b0401000000 as libc::c_longlong as u64_0,
     0x1050e1d30 as libc::c_longlong as u64_0,
     0x44535f666d717475 as libc::c_longlong as u64_0,
     0x7574726e68605546 as libc::c_longlong as u64_0,
     0x331f0f0501000000 as libc::c_longlong as u64_0,
     0x206112338 as libc::c_longlong as u64_0,
     0x4d5d6971777a7c7d as libc::c_longlong as u64_0,
     0x7d7d7b77726a5f4f as libc::c_longlong as u64_0,
     0x3b25120702000000 as libc::c_longlong as u64_0,
     0x308162a41 as libc::c_longlong as u64_0,
     0x5667737b7f828484 as libc::c_longlong as u64_0,
     0x8484827f7b746959 as libc::c_ulonglong,
     0x442c170902000000 as libc::c_longlong as u64_0,
     0x30a1a314a as libc::c_longlong as u64_0,
     0x60717c84888b8c8d as libc::c_longlong as u64_0,
     0x8d8d8a88857e7363 as libc::c_ulonglong,
     0x4e341c0b03000000 as libc::c_longlong as u64_0,
     0x40d1f3954 as libc::c_longlong as u64_0,
     0x6a7b868d91949596 as libc::c_longlong as u64_0,
     0x969593918e877d6c as libc::c_ulonglong,
     0x573c220e04000000 as libc::c_longlong as u64_0,
     0x40f24415d as libc::c_longlong as u64_0,
     0x74848f959a9d9fa0 as libc::c_longlong as u64_0,
     0xa09e9d9a97918676 as libc::c_ulonglong,
     0x6145271106010000 as libc::c_longlong as u64_0,
     0x105122a4966 as libc::c_longlong as u64_0,
     0x7d8e989da2a6a8aa as libc::c_longlong as u64_0,
     0xaaa9a6a39f998f7f as libc::c_ulonglong,
     0x694c2d1407010000 as libc::c_longlong as u64_0,
     0x1071630516f as libc::c_longlong as u64_0,
     0x8696a1a7acb0b4b6 as libc::c_ulonglong,
     0xb6b5b1ada8a29989 as libc::c_ulonglong,
     0x7254321708020000 as libc::c_longlong as u64_0,
     0x20818345878 as libc::c_longlong as u64_0,
     0x909faab0b6bcbfc0 as libc::c_ulonglong,
     0xc1c0bcb7b1aaa192 as libc::c_ulonglong,
     0x7b5c381a09020000 as libc::c_longlong as u64_0,
     0x2091b3a5f80 as libc::c_longlong as u64_0,
     0x98a8b3bac0c6cacb as libc::c_ulonglong,
     0xcbcac6c1bbb4ab9b as libc::c_ulonglong,
     0x84633e1e0b030000 as libc::c_ulonglong,
     0x20a1e3f6587 as libc::c_longlong as u64_0,
     0xa1b1bcc3cad0d3d5 as libc::c_ulonglong,
     0xd5d4d0cac5bdb3a3 as libc::c_ulonglong,
     0x8b6943210c030000 as libc::c_ulonglong,
     0x20b1f426c8f as libc::c_longlong as u64_0,
     0xa9bac5cdd4dadcde as libc::c_ulonglong,
     0xdedddad5cec6bbab as libc::c_ulonglong,
     0x937047230d040100 as libc::c_ulonglong,
     0x1020b21467296 as libc::c_longlong as u64_0,
     0xb0c2ced7dfe4e6e7 as libc::c_ulonglong,
     0xe7e7e4dfd8cfc4b3 as libc::c_ulonglong,
     0x9a774c250d030100 as libc::c_ulonglong,
     0x1020c234a789d as libc::c_longlong as u64_0,
     0xb8cad7dfe7edeeef as libc::c_ulonglong,
     0xefefece8e1d8ccbb as libc::c_ulonglong,
     0xa17c4f270e040100 as libc::c_ulonglong,
     0x1020d244d7ca3 as libc::c_longlong as u64_0,
     0xc0d2dfe8f0f5f6f7 as libc::c_ulonglong,
     0xf7f7f5f1eae1d5c3 as libc::c_ulonglong,
     0xa88052280f040100 as libc::c_ulonglong,
     0x1020d254e7ea8 as libc::c_longlong as u64_0,
     0xc5d9e7f1f8fcfefe as libc::c_ulonglong,
     0xfefefdf9f2e9dbc8 as libc::c_ulonglong,
     0xad8353280e030100 as libc::c_ulonglong,
     0x20d244d7ea8 as libc::c_longlong as u64_0,
     0xc6dae9f3fafeffff as libc::c_ulonglong,
     0xfffffefbf5ebddca as libc::c_ulonglong,
     0xad8353280e040100 as libc::c_ulonglong,
     0x20c234b7ca6 as libc::c_longlong as u64_0,
     0xc6dbeaf4fbfeffff as libc::c_ulonglong,
     0xfffffffbf5ecdeca as libc::c_ulonglong,
     0xac8151270e040000 as libc::c_ulonglong,
     0x20b224878a4 as libc::c_longlong as u64_0,
     0xc5dbebf5fbffffff as libc::c_ulonglong,
     0xfffffffcf6ecdec8 as libc::c_ulonglong,
     0xa97d4d240c030000 as libc::c_ulonglong,
     0x20a1f4575a1 as libc::c_longlong as u64_0,
     0xc3dbebf5fcffffff as libc::c_ulonglong,
     0xfffffffcf7ecddc6 as libc::c_ulonglong,
     0xa57a4a220c030000 as libc::c_ulonglong,
     0x2091c41719e as libc::c_longlong as u64_0,
     0xc1daeaf5fbffffff as libc::c_ulonglong,
     0xfffffffcf7ecdcc4 as libc::c_ulonglong,
     0xa275451f0b020000 as libc::c_ulonglong,
     0x107193c6b99 as libc::c_longlong as u64_0,
     0xbdd7e9f5fbffffff as libc::c_ulonglong,
     0xfffffffcf6ebdac0 as libc::c_ulonglong,
     0x9c6f401c09020000 as libc::c_ulonglong,
     0x10616366392 as libc::c_longlong as u64_0,
     0xb8d4e8f5fbffffff as libc::c_ulonglong,
     0xfffffffbf5ead8bc as libc::c_ulonglong,
     0x96683a1807010000 as libc::c_ulonglong,
     0x10513305b89 as libc::c_longlong as u64_0,
     0xb2d0e5f3fbfeffff as libc::c_ulonglong,
     0xfffffffbf5e8d4b6 as libc::c_ulonglong,
     0x8f60341506010000 as libc::c_ulonglong,
     0x105102a5380 as libc::c_longlong as u64_0,
     0xabcbe3f2fafeffff as libc::c_ulonglong,
     0xfffffefaf2e5cfaf as libc::c_ulonglong,
     0x87582d1205010000 as libc::c_ulonglong,
     0x40d234977 as libc::c_longlong as u64_0,
     0xa2c4deeef8fdffff as libc::c_ulonglong,
     0xfffffef9efe0c9a7 as libc::c_ulonglong,
     0x7c4e260f04000000 as libc::c_longlong as u64_0,
     0x30a1d3f6b as libc::c_longlong as u64_0,
     0x98bcd8eaf5fbfeff as libc::c_ulonglong,
     0xfffefcf6ecdac19d as libc::c_ulonglong,
     0x7144200c03000000 as libc::c_longlong as u64_0,
     0x20818365f as libc::c_longlong as u64_0,
     0x8cb3d1e5f3fafdfe as libc::c_ulonglong,
     0xfefdfaf3e7d3b791 as libc::c_ulonglong,
     0x653b1a0902000000 as libc::c_longlong as u64_0,
     0x105132d53 as libc::c_longlong as u64_0,
     0x7fa7c8dfeef7fbfd as libc::c_longlong as u64_0,
     0xfdfcf8f0e1cbac84 as libc::c_ulonglong,
     0x5931150601000000 as libc::c_longlong as u64_0,
     0x30e2446 as libc::c_int as u64_0,
     0x7099bcd5e7f2f8fb as libc::c_longlong as u64_0,
     0xfbf9f3e9d9c09f76 as libc::c_ulonglong,
     0x4b27100501000000 as libc::c_longlong as u64_0,
     0x20a1c39 as libc::c_int as u64_0,
     0x6089aecadfecf3f7 as libc::c_longlong as u64_0,
     0xf7f4ede0cdb28e65 as libc::c_ulonglong,
     0x3d1f0c0301000000 as libc::c_longlong as u64_0,
     0x107142c as libc::c_int as u64_0,
     0x4f779dbbd3e3ecf0 as libc::c_longlong as u64_0,
     0xf0ede4d5bfa17c54 as libc::c_ulonglong,
     0x3017080200000000 as libc::c_longlong as u64_0,
     0x40d20 as libc::c_int as u64_0,
     0x3f6489a9c3d5e0e5 as libc::c_longlong as u64_0,
     0xe6e1d7c5ad8d6842 as libc::c_ulonglong,
     0x230f040100000000 as libc::c_longlong as u64_0,
     0x20917 as libc::c_int as u64_0,
     0x2f507394b0c4d1d7 as libc::c_longlong as u64_0,
     0xd8d2c6b298775433 as libc::c_ulonglong,
     0x190a030000000000 as libc::c_longlong as u64_0,
     0x10610 as libc::c_int as u64_0,
     0x223d5d7c9aafbdc4 as libc::c_longlong as u64_0,
     0xc5beb19c81614125 as libc::c_ulonglong,
     0x1206010000000000 as libc::c_longlong as u64_0,
     0x1030a as libc::c_int as u64_0,
     0x182d48658297a6ae as libc::c_longlong as u64_0,
     0xafa89a846a4c301a as libc::c_ulonglong,
     0xc04010000000000 as libc::c_longlong as u64_0,
     0x106 as libc::c_int as u64_0,
     0x1020364e687e8d95 as libc::c_longlong as u64_0,
     0x958f816b52392210 as libc::c_ulonglong,
     0x602000000000000 as libc::c_longlong as u64_0,
     0x3 as libc::c_int as u64_0,
     0xa15263950637178 as libc::c_longlong as u64_0,
     0x797266523c28170a as libc::c_longlong as u64_0,
     0x300000000000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x50d18273949555b as libc::c_longlong as u64_0,
     0x5c564b3a291a0e06 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x2070e1825323b41 as libc::c_longlong as u64_0,
     0x413c33271a0f0702 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x103070e171f252a as libc::c_longlong as u64_0,
     0x2a261f170f080301 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x10103070c111618 as libc::c_longlong as u64_0,
     0x1916120d08030101 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1010306090b0d as libc::c_longlong as u64_0,
     0xd0b090603010100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x102030506 as libc::c_longlong as u64_0,
     0x605030201010000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1010102 as libc::c_int as u64_0,
     0x202010100000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0];
// Initialized in run_static_initializers
#[no_mangle]
pub static mut gDorfLightStreak1DL: [Gfx; 7] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 7];
static mut ovl_Boss_GanonVtx_01F590: [Vtx; 118] =
    [Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2816 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                1249 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2816 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                -(1249 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2816 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                1250 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2816 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                1249 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [3072 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [3072 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [3072 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                1250 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [3072 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                -(1249 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [3072 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                1250 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [3072 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2559 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                1249 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2559 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2559 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                1250 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2559 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2816 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                1249 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2816 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2816 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                -(1249 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2816 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                1250 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2816 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                1250 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2816 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2304 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                1249 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2304 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                -(1249 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2304 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                1250 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2304 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2559 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                1249 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2559 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2559 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2559 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                1250 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2559 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                1250 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2559 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2048 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                1249 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2048 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                -(1249 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2048 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                1250 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2048 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2304 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                1249 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2304 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2304 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                -(1249 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2304 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                1250 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2304 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                1250 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2304 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1791 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                1249 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1791 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1791 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                1250 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1791 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2048 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                1249 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2048 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2048 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                -(1249 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2048 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                1250 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2048 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                1250 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2048 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1536 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                1249 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1536 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                -(1249 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1536 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                1250 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1536 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1791 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                1249 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1791 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1791 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1791 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                1250 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1791 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                1250 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1791 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                1249 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1280 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1280 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                1250 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1280 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                -(1249 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1280 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1536 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                1249 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1536 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1536 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                -(1249 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1536 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                1250 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1536 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                1250 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1536 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1023 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                1249 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1023 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                -(1249 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1023 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                1250 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1023 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                1249 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1280 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1280 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1280 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                1250 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1280 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                -(1249 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1280 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                1250 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1280 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                1249 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [768 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [768 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                1250 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [768 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                -(1249 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [768 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1023 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                1249 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1023 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1023 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                -(1249 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1023 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                1250 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1023 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                1250 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1023 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                1249 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [512 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [512 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                1250 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [512 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [512 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                1249 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [768 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [768 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [768 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                1250 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [768 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                -(1249 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [768 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                1250 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [768 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                1249 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [255 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [255 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [255 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                1250 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [255 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                1249 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [512 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [512 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [512 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                1250 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [512 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [512 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                1250 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [512 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(1499 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                1250 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                1249 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [255 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [255 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(1500 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(1249 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(1500 as libc::c_int) as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                -(1250 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [255 as libc::c_int as libc::c_short,
                                512 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1500 as libc::c_int as libc::c_short,
                                1250 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [255 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(1500 as libc::c_int) as libc::c_short,
                                1250 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                120 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },}];
// Initialized in run_static_initializers
#[no_mangle]
pub static mut gDorfLightStreak2DL: [Gfx; 7] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 7];
// Initialized in run_static_initializers
#[no_mangle]
pub static mut gDorfLightStreak3DL: [Gfx; 7] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 7];
// Initialized in run_static_initializers
#[no_mangle]
pub static mut gDorfLightStreak4DL: [Gfx; 7] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 7];
// Initialized in run_static_initializers
#[no_mangle]
pub static mut gDorfLightStreak5DL: [Gfx; 7] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 7];
// Initialized in run_static_initializers
#[no_mangle]
pub static mut gDorfLightStreak6DL: [Gfx; 7] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 7];
#[no_mangle]
pub static mut gDorfShadowSetupDL: [Gfx; 4] =
    [Gfx{words:
             {
                 let mut init =
                     Gwords{w0:
                                (0xe7 as libc::c_int as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 24 as libc::c_int,
                            w1: 0 as libc::c_int as libc::c_uint,};
                 init
             },},
     Gfx{words:
             {
                 let mut init =
                     Gwords{w0:
                                (0xe3 as libc::c_int as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 24 as libc::c_int |
                                    ((32 as libc::c_int - 14 as libc::c_int -
                                          2 as libc::c_int) as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) << 8 as libc::c_int
                                    |
                                    ((2 as libc::c_int - 1 as libc::c_int) as
                                         u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        0 as libc::c_int,
                            w1:
                                ((0 as libc::c_int) << 14 as libc::c_int) as
                                    libc::c_uint,};
                 init
             },},
     Gfx{words:
             {
                 let mut init =
                     Gwords{w0:
                                (0xd7 as libc::c_int as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 24 as libc::c_int |
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        11 as libc::c_int |
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) << 8 as libc::c_int
                                    |
                                    (1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               7 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        1 as libc::c_int,
                            w1:
                                (0xffff as libc::c_int as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           16 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 16 as libc::c_int |
                                    (0xffff as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               16 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        0 as libc::c_int,};
                 init
             },},
     Gfx{words:
             {
                 let mut init =
                     Gwords{w0:
                                (0xdf as libc::c_int as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 24 as libc::c_int,
                            w1: 0 as libc::c_int as libc::c_uint,};
                 init
             },}];
static mut ovl_Boss_GanonTLUT_00F808: [u64_0; 8] =
    [0xffff318ddef7 as libc::c_longlong as u64_0,
     0xce73bdeff7bdc631 as libc::c_ulonglong,
     0x4a53ef7b7bdfad6b as libc::c_longlong as u64_0,
     0xe739d6b5a5299ce7 as libc::c_ulonglong,
     0xb5ad42116b5b39cf as libc::c_ulonglong,
     0x52958c6394a5739d as libc::c_longlong as u64_0,
     0x84215ad7294b6319 as libc::c_ulonglong,
     0x2109000100010001 as libc::c_longlong as u64_0];
// Initialized in run_static_initializers
#[no_mangle]
pub static mut gDorfLightStreak7DL: [Gfx; 7] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 7];
// Initialized in run_static_initializers
#[no_mangle]
pub static mut gDorfWindowShardMaterialDL: [Gfx; 21] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 21];
static mut ovl_Boss_GanonTex_00E748: [u64_0; 512] =
    [0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x106 as libc::c_int as u64_0,
     0x701000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x935 as libc::c_int as u64_0,
     0x3d0b000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x11f93 as libc::c_int as u64_0, 0xa529030000000000 as libc::c_ulonglong,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0xd5bdb as libc::c_int as u64_0, 0xe373130100000000 as libc::c_ulonglong,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x42fb5f7 as libc::c_int as u64_0,
     0xfac8400700000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x1147ae7fe as libc::c_longlong as u64_0,
     0xffee931c01000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x640c8faff as libc::c_longlong as u64_0,
     0xfffcd8540a000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x11c95efffff as libc::c_longlong as u64_0,
     0xfffff3a321020000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xa54dbfdffff as libc::c_longlong as u64_0,
     0xfffffedf600d0000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x221a0f3ffffff as libc::c_longlong as u64_0,
     0xfffffff6b52d0300 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xe60ddfdffffff as libc::c_longlong as u64_0,
     0xfffffffee7781501 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0,
     0x432b5f6ffffffff as libc::c_longlong as u64_0,
     0xfffffffffac94407 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1 as libc::c_int as u64_0,
     0x1884e9feffffffff as libc::c_longlong as u64_0,
     0xfffffffffff09c20 as libc::c_ulonglong,
     0x200000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x8 as libc::c_int as u64_0,
     0x48d0fbffffffffff as libc::c_longlong as u64_0,
     0xfffffffffffdde5d as libc::c_ulonglong,
     0xc00000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x11e as libc::c_int as u64_0, 0x9bf1ffffffffffff as libc::c_ulonglong,
     0xfffffffffffff5a9 as libc::c_ulonglong,
     0x2302000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0xb56 as libc::c_int as u64_0, 0xdbfdffffffffffff as libc::c_ulonglong,
     0xfffffffffffffee0 as libc::c_ulonglong,
     0x630f000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x225a8 as libc::c_int as u64_0, 0xf4ffffffffffffff as libc::c_ulonglong,
     0xfffffffffffffff8 as libc::c_ulonglong,
     0xbc34040000000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xf69e1 as libc::c_int as u64_0,
     0xfeffffffffffffff as libc::c_ulonglong,
     0xfffffffffffffffe as libc::c_ulonglong,
     0xea83170100000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x433bcf8 as libc::c_int as u64_0,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xfbcf470800000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x11985eafe as libc::c_longlong as u64_0,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xfff19d2302000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xa52d5fcff as libc::c_longlong as u64_0,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xfffddf670e000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x222a3edf8f9 as libc::c_longlong as u64_0,
     0xf9f9f9f9f9f9f9f9 as libc::c_ulonglong,
     0xf9f9f9f9f9f9f9f9 as libc::c_ulonglong,
     0xf9f9f0af26020000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x83da4bbbcbc as libc::c_longlong as u64_0,
     0xbcbcbcbcbcbcbcbc as libc::c_ulonglong,
     0xbcbcbcbcbcbcbcbc as libc::c_ulonglong,
     0xbcbcbba6450a0000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x1113e36262323 as libc::c_longlong as u64_0,
     0x2323232323232323 as libc::c_longlong as u64_0,
     0x2323232323232323 as libc::c_longlong as u64_0,
     0x2323253444180300 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x8315c3a0b0101 as libc::c_longlong as u64_0,
     0x101010101010101 as libc::c_longlong as u64_0,
     0x101010101010101 as libc::c_longlong as u64_0,
     0x10109335e3b0b00 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x218526959200400 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x2185269592104 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0,
     0xb3a656b66430e01 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0xb3a656b66430e as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x4 as libc::c_int as u64_0,
     0x225a6a69695e2c07 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x4225a6a69695e2b as libc::c_longlong as u64_0,
     0x600000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x110 as libc::c_int as u64_0,
     0x48676a6969695118 as libc::c_longlong as u64_0,
     0x200000000000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x1148676a696a684d as libc::c_longlong as u64_0,
     0x1201000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x529 as libc::c_int as u64_0,
     0x606a6969696a6437 as libc::c_longlong as u64_0,
     0x900000000000000 as libc::c_longlong as u64_0,
     0x7 as libc::c_int as u64_0,
     0x2f616a6969696a62 as libc::c_longlong as u64_0,
     0x2f07000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x11149 as libc::c_int as u64_0,
     0x686a696969696953 as libc::c_longlong as u64_0,
     0x1802000000000000 as libc::c_longlong as u64_0,
     0x215 as libc::c_int as u64_0,
     0x5068696969696969 as libc::c_longlong as u64_0,
     0x5118020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x83161 as libc::c_int as u64_0,
     0x6a69696969696a65 as libc::c_longlong as u64_0,
     0x3b0c010000000000 as libc::c_longlong as u64_0,
     0x933 as libc::c_int as u64_0,
     0x626a69696969696a as libc::c_longlong as u64_0,
     0x653b0c0100000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x31b5569 as libc::c_int as u64_0,
     0x696969696969696a as libc::c_longlong as u64_0,
     0x5b25050000000000 as libc::c_longlong as u64_0,
     0x31b54 as libc::c_int as u64_0,
     0x6969696969696969 as libc::c_longlong as u64_0,
     0x6a5b250500000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x10c3f666a as libc::c_longlong as u64_0,
     0x696969696969696a as libc::c_longlong as u64_0,
     0x6748100100000000 as libc::c_longlong as u64_0,
     0x10c3f66 as libc::c_int as u64_0,
     0x6a69696969696969 as libc::c_longlong as u64_0,
     0x6a67481001000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x5245b6a69 as libc::c_longlong as u64_0,
     0x6969696969696969 as libc::c_longlong as u64_0,
     0x6a602e0700000000 as libc::c_longlong as u64_0,
     0x5245b6a as libc::c_int as u64_0,
     0x6969696969696969 as libc::c_longlong as u64_0,
     0x696a602d07000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x11149686a69 as libc::c_longlong as u64_0,
     0x6969696969696969 as libc::c_longlong as u64_0,
     0x6969511903000000 as libc::c_longlong as u64_0,
     0x21349686a as libc::c_longlong as u64_0,
     0x6969696969696969 as libc::c_longlong as u64_0,
     0x696a684d14020000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x72d616a6969 as libc::c_longlong as u64_0,
     0x6969696969696969 as libc::c_longlong as u64_0,
     0x696a653b0a000000 as libc::c_longlong as u64_0,
     0x834626a69 as libc::c_longlong as u64_0,
     0x6969696969696969 as libc::c_longlong as u64_0,
     0x69696a6334080000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x2144c686a6969 as libc::c_longlong as u64_0,
     0x6969696969696969 as libc::c_longlong as u64_0,
     0x69696a561b030000 as libc::c_longlong as u64_0,
     0x21854696969 as libc::c_longlong as u64_0,
     0x6969696969696969 as libc::c_longlong as u64_0,
     0x69696969541a0300 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x933626a696969 as libc::c_longlong as u64_0,
     0x6969696969696969 as libc::c_longlong as u64_0,
     0x69696a653d0c0100 as libc::c_longlong as u64_0,
     0x935646a6969 as libc::c_longlong as u64_0,
     0x6969696969696969 as libc::c_longlong as u64_0,
     0x6969696a653d0c01 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x31d546969696969 as libc::c_longlong as u64_0,
     0x6969696969696969 as libc::c_longlong as u64_0,
     0x6969696a5c250500 as libc::c_longlong as u64_0,
     0x31d5569696969 as libc::c_longlong as u64_0,
     0x6969696969696969 as libc::c_longlong as u64_0,
     0x696969696a5c2505 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1 as libc::c_int as u64_0,
     0xe42676a69696969 as libc::c_longlong as u64_0,
     0x6969696969696969 as libc::c_longlong as u64_0,
     0x6969696a684a1302 as libc::c_longlong as u64_0,
     0x10e42676a696969 as libc::c_longlong as u64_0,
     0x6969696969696969 as libc::c_longlong as u64_0,
     0x696969696a684b13 as libc::c_longlong as u64_0,
     0x200000000000000 as libc::c_longlong as u64_0,
     0x6 as libc::c_int as u64_0,
     0x285e6a6969696969 as libc::c_longlong as u64_0,
     0x6969696969696969 as libc::c_longlong as u64_0,
     0x696969696a623308 as libc::c_longlong as u64_0,
     0x6285e6a69696969 as libc::c_longlong as u64_0,
     0x6969696969696969 as libc::c_longlong as u64_0,
     0x69696969696a6231 as libc::c_longlong as u64_0,
     0x800000000000000 as libc::c_longlong as u64_0,
     0x212 as libc::c_int as u64_0,
     0x4c696b6a6a6a6a6a as libc::c_longlong as u64_0,
     0x6a6a6a6a6a6a6a6a as libc::c_longlong as u64_0,
     0x6a6a6a6a6a6a551a as libc::c_longlong as u64_0,
     0x154c696b6a6a6a6a as libc::c_longlong as u64_0,
     0x6a6a6a6a6a6a6a6a as libc::c_longlong as u64_0,
     0x6a6a6a6a6a6a6a50 as libc::c_longlong as u64_0,
     0x1502000000000000 as libc::c_longlong as u64_0,
     0x527 as libc::c_int as u64_0,
     0x5862626161616161 as libc::c_longlong as u64_0,
     0x6161616161616161 as libc::c_longlong as u64_0,
     0x6161616161625d39 as libc::c_longlong as u64_0,
     0x3359626261616161 as libc::c_longlong as u64_0,
     0x6161616161616161 as libc::c_longlong as u64_0,
     0x616161616161625b as libc::c_longlong as u64_0,
     0x2d07000000000000 as libc::c_longlong as u64_0,
     0x419 as libc::c_int as u64_0,
     0x292a2a2a2a2a2a2a as libc::c_longlong as u64_0,
     0x2a2a2a2a2a2a2a2a as libc::c_longlong as u64_0,
     0x2a2a2a2a2a2a2a23 as libc::c_longlong as u64_0,
     0x22292a2a2a2a2a2a as libc::c_longlong as u64_0,
     0x2a2a2a2a2a2a2a2a as libc::c_longlong as u64_0,
     0x2a2a2a2a2a2a2a29 as libc::c_longlong as u64_0,
     0x1c05000000000000 as libc::c_longlong as u64_0,
     0x104 as libc::c_int as u64_0,
     0x505050505050505 as libc::c_longlong as u64_0,
     0x505050505050505 as libc::c_longlong as u64_0,
     0x505050505050505 as libc::c_longlong as u64_0,
     0x505050505050505 as libc::c_longlong as u64_0,
     0x505050505050505 as libc::c_longlong as u64_0,
     0x505050505050505 as libc::c_longlong as u64_0,
     0x401000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0];
static mut ovl_Boss_GanonVtx_00F748: [Vtx; 4] =
    [Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(5 as libc::c_int) as libc::c_short,
                                -(5 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [5 as libc::c_int as libc::c_short,
                                -(5 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2048 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [5 as libc::c_int as libc::c_short,
                                5 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2048 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(5 as libc::c_int) as libc::c_short,
                                5 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },}];
// Initialized in run_static_initializers
#[no_mangle]
pub static mut gDorfTriforceDL: [Gfx; 16] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 16];
static mut ovl_Boss_GanonVtx_00E6B8: [Vtx; 4] =
    [Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(100 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(100 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [100 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(100 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2048 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [100 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                100 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2048 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(100 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                100 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },}];
// Initialized in run_static_initializers
#[no_mangle]
pub static mut gDorfShadowModelDL: [Gfx; 6] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 6];
// Initialized in run_static_initializers
#[no_mangle]
pub static mut gDorfLightStreak8DL: [Gfx; 7] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 7];
// Initialized in run_static_initializers
#[no_mangle]
pub static mut gDorfLightStreak9DL: [Gfx; 7] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 7];
static mut ovl_Boss_GanonTex_01FFF8: [u64_0; 64] =
    [0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x111 as libc::c_int as u64_0,
     0x1110000000000000 as libc::c_longlong as u64_0,
     0x111222 as libc::c_int as u64_0,
     0x2221110000000000 as libc::c_longlong as u64_0,
     0x11223444 as libc::c_int as u64_0,
     0x4443221100000000 as libc::c_longlong as u64_0,
     0x122345566 as libc::c_longlong as u64_0,
     0x6655432210000000 as libc::c_longlong as u64_0,
     0x1234566778 as libc::c_longlong as u64_0,
     0x8776654321000000 as libc::c_ulonglong,
     0x12345678999 as libc::c_longlong as u64_0,
     0x9998765432100000 as libc::c_ulonglong,
     0x12346789aabb as libc::c_longlong as u64_0,
     0xbbaa987643210000 as libc::c_ulonglong,
     0x1345789bbcdd as libc::c_longlong as u64_0,
     0xddcbb98754310000 as libc::c_ulonglong,
     0x1235689bcdeee as libc::c_longlong as u64_0,
     0xeeedcb9865321000 as libc::c_ulonglong,
     0x134679bcdefff as libc::c_longlong as u64_0,
     0xfffedcb976431000 as libc::c_ulonglong,
     0x23568abdeffff as libc::c_longlong as u64_0,
     0xffffedba86532000 as libc::c_ulonglong,
     0x124579bcefffff as libc::c_longlong as u64_0,
     0xfffffecb97542100 as libc::c_ulonglong,
     0x124679bdefffff as libc::c_longlong as u64_0,
     0xfffffedb97642100 as libc::c_ulonglong,
     0x134689bdefffff as libc::c_longlong as u64_0,
     0xfffffedb98643100 as libc::c_ulonglong,
     0x134689bdefffff as libc::c_longlong as u64_0,
     0xfffffedb98643100 as libc::c_ulonglong,
     0x124679bdefffff as libc::c_longlong as u64_0,
     0xfffffedb97642100 as libc::c_ulonglong,
     0x124579bcefffff as libc::c_longlong as u64_0,
     0xfffffecb97542100 as libc::c_ulonglong,
     0x23568acdeffff as libc::c_longlong as u64_0,
     0xffffedca86532000 as libc::c_ulonglong,
     0x124679bcdefff as libc::c_longlong as u64_0,
     0xfffedcb976421000 as libc::c_ulonglong,
     0x1235689bcdeee as libc::c_longlong as u64_0,
     0xeeedcb9865321000 as libc::c_ulonglong,
     0x1345789bbcdd as libc::c_longlong as u64_0,
     0xddcbb98754310000 as libc::c_ulonglong,
     0x12346789abbb as libc::c_longlong as u64_0,
     0xbbba987643210000 as libc::c_ulonglong,
     0x12345678999 as libc::c_longlong as u64_0,
     0x9998765432100000 as libc::c_ulonglong,
     0x1234566778 as libc::c_longlong as u64_0,
     0x8776654321000000 as libc::c_ulonglong,
     0x123345566 as libc::c_longlong as u64_0,
     0x6655433210000000 as libc::c_longlong as u64_0,
     0x11233444 as libc::c_int as u64_0,
     0x4443321100000000 as libc::c_longlong as u64_0,
     0x112223 as libc::c_int as u64_0,
     0x3222110000000000 as libc::c_longlong as u64_0,
     0x111 as libc::c_int as u64_0,
     0x1110000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0];
// Initialized in run_static_initializers
#[no_mangle]
pub static mut gDorfLightStreak11DL: [Gfx; 7] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 7];
// Initialized in run_static_initializers
#[no_mangle]
pub static mut gDorfLightStreak12DL: [Gfx; 20] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 20];
static mut ovl_Boss_GanonTex_01EF90: [u64_0; 192] =
    [0 as libc::c_int as u64_0, 0x3040506050301 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x2090d0e0e0b05 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x511 as libc::c_int as u64_0,
     0x1d262c2f2f2f2b27 as libc::c_longlong as u64_0,
     0x242220201d181413 as libc::c_longlong as u64_0,
     0x120f0b0a0c121617 as libc::c_longlong as u64_0,
     0x120a020000000001 as libc::c_longlong as u64_0,
     0x6111a1e1c19140c as libc::c_longlong as u64_0,
     0x400000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x4132840 as libc::c_int as u64_0,
     0x55626d7272706e6b as libc::c_longlong as u64_0,
     0x6a67656058514d4a as libc::c_longlong as u64_0,
     0x4a463f3d40485153 as libc::c_longlong as u64_0,
     0x4a3a27181110141c as libc::c_longlong as u64_0,
     0x263034322d262019 as libc::c_longlong as u64_0,
     0x110a070503000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x20e2644617b as libc::c_longlong as u64_0,
     0x909da8acacababab as libc::c_ulonglong,
     0xadaeaba69c938e8c as libc::c_ulonglong,
     0x8c8c8785868c9395 as libc::c_ulonglong,
     0x8f816e5c514c4f55 as libc::c_ulonglong,
     0x5859544d47413b36 as libc::c_longlong as u64_0,
     0x302a251f1c181612 as libc::c_longlong as u64_0,
     0xe0c0c0c0b0a0808 as libc::c_longlong as u64_0,
     0x8090a0a09070402 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x11232587d9aaf as libc::c_longlong as u64_0,
     0xbdc5cacccccdcfd3 as libc::c_ulonglong,
     0xd9ddddd8cfc6bfbc as libc::c_ulonglong,
     0xbdbfc1c2c2c3c4c4 as libc::c_ulonglong,
     0xc2beb5aba29c9692 as libc::c_ulonglong,
     0x8c81766d6764625f as libc::c_ulonglong,
     0x5b57514b4845423f as libc::c_longlong as u64_0,
     0x3b38373735322d2a as libc::c_longlong as u64_0,
     0x2a2c2e2c28221c17 as libc::c_longlong as u64_0,
     0x130f0a0706050402 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x101010000 as libc::c_longlong as u64_0,
     0x10f2f5781a9c5d3 as libc::c_longlong as u64_0,
     0xd8d8d6d5d6d9e0e7 as libc::c_ulonglong,
     0xecefefeae3dcd5d2 as libc::c_ulonglong,
     0xd5dae0e5e5e1dbd7 as libc::c_ulonglong,
     0xd7dbdee1ded9cec2 as libc::c_ulonglong,
     0xb4a4958b85838383 as libc::c_ulonglong,
     0x8383807a76726f6e as libc::c_ulonglong,
     0x6d6d6e6e6c675f59 as libc::c_longlong as u64_0,
     0x5755534f47413c3a as libc::c_longlong as u64_0,
     0x37332d26211f1e1a as libc::c_longlong as u64_0,
     0x120b050302010000 as libc::c_longlong as u64_0,
     0x30608060100 as libc::c_longlong as u64_0,
     0xd21436c98c1dde7 as libc::c_longlong as u64_0,
     0xe7e1dcd9dbe2ebf2 as libc::c_ulonglong,
     0xf5f3ede7e1dcdadc as libc::c_ulonglong,
     0xe0e6edf2f1eae0d7 as libc::c_ulonglong,
     0xd5dce7f0f5f3eadd as libc::c_ulonglong,
     0xcfbfb2a79f999595 as libc::c_ulonglong,
     0x9a9fa09f99938e8e as libc::c_ulonglong,
     0x91969a99948c827a as libc::c_ulonglong,
     0x736d665d55504c4d as libc::c_longlong as u64_0,
     0x4f4f4c4845454440 as libc::c_longlong as u64_0,
     0x392e22170f0a0605 as libc::c_longlong as u64_0,
     0x60a0d10120f0902 as libc::c_longlong as u64_0,
     0x182f537eabd4edf5 as libc::c_longlong as u64_0,
     0xf3ede6e3e5ecf6fc as libc::c_ulonglong,
     0xfcf7f1eae4e2e2e5 as libc::c_ulonglong,
     0xe9eff5f7f5eee4d8 as libc::c_ulonglong,
     0xd2d6dee9f3f7f5ee as libc::c_ulonglong,
     0xe4d9cfc5baafa7a3 as libc::c_ulonglong,
     0xa6aeb4b6b2aba4a2 as libc::c_ulonglong,
     0xa5a9aba9a2989088 as libc::c_ulonglong,
     0x80756a6157535458 as libc::c_ulonglong,
     0x5e6364626161615f as libc::c_longlong as u64_0,
     0x594e403329211b18 as libc::c_longlong as u64_0,
     0x1818171614110e06 as libc::c_longlong as u64_0,
     0x1d37608fbde2f7fd as libc::c_longlong as u64_0,
     0xfbf7f2f0f2f7fcff as libc::c_ulonglong,
     0xfffdf8f3f0f0f0f0 as libc::c_ulonglong,
     0xf3f5f9fbfaf4ebe0 as libc::c_ulonglong,
     0xd6d4d5dde6f0f6f6 as libc::c_ulonglong,
     0xf3eee5ddd3c6bab1 as libc::c_ulonglong,
     0xaeb2b8bdbebcb7b1 as libc::c_ulonglong,
     0xaaa39e99958f8b86 as libc::c_ulonglong,
     0x7f766c6158565961 as libc::c_longlong as u64_0,
     0x69707576726e6c69 as libc::c_longlong as u64_0,
     0x62594e42382f2722 as libc::c_longlong as u64_0,
     0x1e1a1714100c0803 as libc::c_longlong as u64_0,
     0x17346294c3e8fcff as libc::c_longlong as u64_0,
     0xfffefcfbfbfdffff as libc::c_ulonglong,
     0xfffffffefefefcfc as libc::c_ulonglong,
     0xfcfdfefffefbf6ef as libc::c_ulonglong,
     0xe5dcd7d7dee9f3f9 as libc::c_ulonglong,
     0xfbf8f5efe6d9c9bb as libc::c_ulonglong,
     0xb0aaabb1b7bcbab1 as libc::c_ulonglong,
     0xa291837e7b7c7c7b as libc::c_ulonglong,
     0x76706a615a585961 as libc::c_longlong as u64_0,
     0x6b7275746f69625d as libc::c_longlong as u64_0,
     0x564f473b322a211a as libc::c_longlong as u64_0,
     0x140f0b0704010100 as libc::c_longlong as u64_0,
     0xf254e7fafd9f4fe as libc::c_longlong as u64_0,
     0xfffffffffffefcfb as libc::c_ulonglong,
     0xfbfbfdffffffffff as libc::c_ulonglong,
     0xfffffffffffffffd as libc::c_ulonglong,
     0xf5ebe2dcdee3eaee as libc::c_ulonglong,
     0xefedeae5ded4c4b0 as libc::c_ulonglong,
     0x9e8f888b92999c97 as libc::c_ulonglong,
     0x89786a6261636668 as libc::c_ulonglong,
     0x6765615c57545254 as libc::c_longlong as u64_0,
     0x585a5a58544e4641 as libc::c_longlong as u64_0,
     0x3b352d231b140e0a as libc::c_longlong as u64_0,
     0x502010000000000 as libc::c_longlong as u64_0,
     0x30e2b5382b1d5ec as libc::c_longlong as u64_0,
     0xf7fdfdfdf9f3ece6 as libc::c_ulonglong,
     0xe4e4e6e8edf2f5f6 as libc::c_ulonglong,
     0xf4f1f0f1f4f6f6f2 as libc::c_ulonglong,
     0xebe2d9d0cac8c6c4 as libc::c_ulonglong,
     0xc1bfbbb8b2ab9f8b as libc::c_ulonglong,
     0x735e514e51575e61 as libc::c_longlong as u64_0,
     0x5e564d464546494d as libc::c_longlong as u64_0,
     0x504f4e4c48443e39 as libc::c_longlong as u64_0,
     0x342f2b292724201b as libc::c_longlong as u64_0,
     0x16120c0705030201 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0xc274d79a2c1 as libc::c_longlong as u64_0,
     0xd5e0e4e2dacfc3ba as libc::c_ulonglong,
     0xb4b1b0b1b6bdc4c9 as libc::c_ulonglong,
     0xcacacbcccccac6c0 as libc::c_ulonglong,
     0xb7ada2989089827d as libc::c_ulonglong,
     0x7a7774726e6b6557 as libc::c_longlong as u64_0,
     0x432e1e1616191f26 as libc::c_longlong as u64_0,
     0x2c2d2c2b2b2e3031 as libc::c_longlong as u64_0,
     0x3332302e2b282119 as libc::c_longlong as u64_0,
     0x110b080707060504 as libc::c_longlong as u64_0,
     0x301000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x91f3f607c as libc::c_longlong as u64_0,
     0x93a0a5a39a8e8177 as libc::c_ulonglong,
     0x6e676362656b747e as libc::c_longlong as u64_0,
     0x868b8e8d8880786f as libc::c_ulonglong,
     0x655b5047403b3632 as libc::c_longlong as u64_0,
     0x302e2c2a2a292822 as libc::c_longlong as u64_0,
     0x1a0e030000000104 as libc::c_longlong as u64_0,
     0x70b1014181c1b1a as libc::c_longlong as u64_0,
     0x1713100e0d0a0803 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x411202f as libc::c_int as u64_0,
     0x3f4b504e4840382f as libc::c_longlong as u64_0,
     0x27201d1b1b1e252f as libc::c_longlong as u64_0,
     0x3a4245433c322921 as libc::c_longlong as u64_0,
     0x1b16100a07060505 as libc::c_longlong as u64_0,
     0x403030102020203 as libc::c_longlong as u64_0,
     0x301000000000000 as libc::c_longlong as u64_0,
     0x1050a0d0c09 as libc::c_longlong as u64_0,
     0x300000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x3 as libc::c_int as u64_0,
     0xa0e12120f0b0703 as libc::c_longlong as u64_0,
     0x3 as libc::c_int as u64_0,
     0xb0f12100b050100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x1010000 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0];
// Initialized in run_static_initializers
#[no_mangle]
pub static mut gDorfLightCoreDL: [Gfx; 17] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 17];
static mut ovl_Boss_GanonVtx_0201F8: [Vtx; 3] =
    [Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(20 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                10 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [-(512 as libc::c_int) as libc::c_short,
                                1024 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [20 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                10 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1536 as libc::c_int as libc::c_short,
                                1024 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(28 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [512 as libc::c_int as libc::c_short,
                                -(922 as libc::c_int) as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },}];
static mut ovl_Boss_GanonTex_00F848: [u64_0; 128] =
    [0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x1a021a as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x2111408 as libc::c_int as u64_0,
     0x1302000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x208120a17 as libc::c_longlong as u64_0,
     0x1b08020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x131417150f0f as libc::c_longlong as u64_0,
     0x1517191102000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x211190a160e0b0b as libc::c_longlong as u64_0,
     0xb0f181208130000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x2 as libc::c_int as u64_0,
     0x812180f10050505 as libc::c_longlong as u64_0,
     0x5100b160a191102 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x214 as libc::c_int as u64_0,
     0x17160b0507040404 as libc::c_longlong as u64_0,
     0x40707100f181208 as libc::c_longlong as u64_0,
     0x1300000000000000 as libc::c_longlong as u64_0,
     0x21417 as libc::c_int as u64_0,
     0x160b05040d0c0c0c as libc::c_longlong as u64_0,
     0xc030d07050b1617 as libc::c_longlong as u64_0,
     0x1911020000000000 as libc::c_longlong as u64_0,
     0x2081716 as libc::c_int as u64_0,
     0xb05040309060101 as libc::c_longlong as u64_0,
     0x60606030407100f as libc::c_longlong as u64_0,
     0x181214131a000000 as libc::c_longlong as u64_0,
     0x1a0812150b as libc::c_longlong as u64_0,
     0x504030901010101 as libc::c_longlong as u64_0,
     0x101010603040710 as libc::c_longlong as u64_0,
     0xe160a1b111a0000 as libc::c_longlong as u64_0,
     0x1c1319180e10 as libc::c_longlong as u64_0,
     0x70d0c0101010101 as libc::c_longlong as u64_0,
     0x10101060c030407 as libc::c_longlong as u64_0,
     0x100e161714020000 as libc::c_longlong as u64_0,
     0x131b150e05 as libc::c_longlong as u64_0,
     0x403090101010101 as libc::c_longlong as u64_0,
     0x1010101090c0d04 as libc::c_longlong as u64_0,
     0x50b0f0a08020000 as libc::c_longlong as u64_0,
     0x214180e05 as libc::c_longlong as u64_0,
     0x403060101010101 as libc::c_longlong as u64_0,
     0x1010101060c0304 as libc::c_longlong as u64_0,
     0x7100f1711000000 as libc::c_longlong as u64_0,
     0x80a0e05 as libc::c_int as u64_0,
     0x403090601010101 as libc::c_longlong as u64_0,
     0x10101010609030d as libc::c_longlong as u64_0,
     0x70b161b13000000 as libc::c_longlong as u64_0,
     0x11120f05 as libc::c_int as u64_0,
     0x403090601010101 as libc::c_longlong as u64_0,
     0x101010106090304 as libc::c_longlong as u64_0,
     0x50e181402000000 as libc::c_longlong as u64_0,
     0x2191510 as libc::c_int as u64_0,
     0x4030c0601010101 as libc::c_longlong as u64_0,
     0x1010101060c0304 as libc::c_longlong as u64_0,
     0x50f121100000000 as libc::c_longlong as u64_0,
     0x8180b as libc::c_int as u64_0,
     0x70d0c0906010101 as libc::c_longlong as u64_0,
     0x1010106090c0d07 as libc::c_longlong as u64_0,
     0x1015190200000000 as libc::c_longlong as u64_0,
     0x80a0e as libc::c_int as u64_0,
     0x70d030906010101 as libc::c_longlong as u64_0,
     0x101010609030d07 as libc::c_longlong as u64_0,
     0xe0a080000000000 as libc::c_longlong as u64_0,
     0x13120f as libc::c_int as u64_0,
     0x1004030c09060101 as libc::c_longlong as u64_0,
     0x10106090c030405 as libc::c_longlong as u64_0,
     0xf12110000000000 as libc::c_longlong as u64_0,
     0x21915 as libc::c_int as u64_0,
     0xb070d030c090606 as libc::c_longlong as u64_0,
     0x6060909030d070b as libc::c_longlong as u64_0,
     0x1814020000000000 as libc::c_longlong as u64_0,
     0x80a as libc::c_int as u64_0,
     0xe05070d030c0909 as libc::c_longlong as u64_0,
     0x9090c030d04100f as libc::c_longlong as u64_0,
     0x1211000000000000 as libc::c_longlong as u64_0,
     0x1312 as libc::c_int as u64_0,
     0x160b05070d03030c as libc::c_longlong as u64_0,
     0xc03030d04050b15 as libc::c_longlong as u64_0,
     0x1902000000000000 as libc::c_longlong as u64_0,
     0x214 as libc::c_int as u64_0,
     0x180e10050704040d as libc::c_longlong as u64_0,
     0xd0d040705100f0a as libc::c_longlong as u64_0,
     0x800000000000000 as libc::c_longlong as u64_0,
     0x11 as libc::c_int as u64_0,
     0x12150f0e0b100507 as libc::c_longlong as u64_0,
     0x7070505100e151b as libc::c_longlong as u64_0,
     0x1300000000000000 as libc::c_longlong as u64_0,
     0x13 as libc::c_int as u64_0,
     0x1412170a150f0e0b as libc::c_longlong as u64_0,
     0xb0b0e0e0f160a14 as libc::c_longlong as u64_0,
     0x200000000000000 as libc::c_longlong as u64_0,
     0x1a as libc::c_int as u64_0,
     0x1311110819120a0a as libc::c_longlong as u64_0,
     0xa0a0a0a0a0a1b13 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x2131108 as libc::c_int as u64_0,
     0x80808081414111a as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x2021a00 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0];
// Initialized in run_static_initializers
#[no_mangle]
pub static mut gDorfShockDL: [Gfx; 16] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 16];
static mut ovl_Boss_GanonVtx_0202B0: [Vtx; 4] =
    [Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(10 as libc::c_int) as libc::c_short,
                                -(10 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                1024 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [10 as libc::c_int as libc::c_short,
                                -(10 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1024 as libc::c_int as libc::c_short,
                                1024 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [10 as libc::c_int as libc::c_short,
                                10 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1024 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(10 as libc::c_int) as libc::c_short,
                                10 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },}];
static mut ovl_Boss_GanonTex_020370: [u64_0; 128] =
    [0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x5b3000 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0xb0000 as libc::c_int as u64_0,
     0x700000000000000 as libc::c_longlong as u64_0,
     0x5bb64b as libc::c_int as u64_0,
     0x3a00000000000000 as libc::c_longlong as u64_0,
     0x5b0000 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1e00b6 as libc::c_int as u64_0,
     0xff5b000000000000 as libc::c_ulonglong,
     0x251f0c as libc::c_int as u64_0,
     0x70000000a000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0xb6ff000000000000 as libc::c_ulonglong,
     0x255b00 as libc::c_int as u64_0,
     0x71f1e140a000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x45735000000000 as libc::c_longlong as u64_0,
     0x295b8c as libc::c_int as u64_0,
     0x5b5b000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x455c390f000000 as libc::c_longlong as u64_0,
     0xa1ff as libc::c_int as u64_0,
     0x5b00000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x5b5b0000000000 as libc::c_longlong as u64_0,
     0x5b311c as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0,
     0x5bb6000000000000 as libc::c_longlong as u64_0,
     0x5bb63100 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xffb6000000000000 as libc::c_ulonglong,
     0x46ea310000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x72b64600000000 as libc::c_longlong as u64_0,
     0xb6a181000000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0xc0000 as libc::c_int as u64_0,
     0x172e19bdab5d41 as libc::c_longlong as u64_0,
     0x366beaea81000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x6000000 as libc::c_int as u64_0,
     0x74ffff0500 as libc::c_longlong as u64_0,
     0xa2342b6ff000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x5b0000 as libc::c_int as u64_0,
     0x303010000ff0700 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x20503 as libc::c_int as u64_0, 0x466200 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x76200 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x2962 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x3ea1 as libc::c_int as u64_0,
     0x6200000000000000 as libc::c_longlong as u64_0,
     0x2e as libc::c_int as u64_0, 0xb635000000000000 as libc::c_ulonglong,
     0xea as libc::c_int as u64_0,
     0x4600000000000000 as libc::c_longlong as u64_0,
     0x2eff as libc::c_int as u64_0, 0xff5a000000000000 as libc::c_ulonglong,
     0xff as libc::c_int as u64_0, 0xff00170000000000 as libc::c_ulonglong,
     0x1015bff as libc::c_int as u64_0,
     0xa1a1000000000000 as libc::c_ulonglong, 0x30046 as libc::c_int as u64_0,
     0x9773210000000000 as libc::c_ulonglong,
     0x40cb65e as libc::c_int as u64_0,
     0x4a5b460000000000 as libc::c_longlong as u64_0,
     0x30c0e8c46 as libc::c_longlong as u64_0,
     0x1c035c0000000000 as libc::c_longlong as u64_0,
     0x17134f5b00 as libc::c_longlong as u64_0,
     0x4646000000 as libc::c_longlong as u64_0,
     0x34d20000 as libc::c_int as u64_0,
     0x401005b00000000 as libc::c_longlong as u64_0,
     0x5bb60000 as libc::c_int as u64_0, 0x30fcb600 as libc::c_int as u64_0,
     0xa1e700000001 as libc::c_longlong as u64_0,
     0x100141e5b000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0xa1ff as libc::c_int as u64_0,
     0x5b46ff0000000100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0xfc as libc::c_int as u64_0, 0xffa1310000000000 as libc::c_ulonglong,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xb600000000000000 as libc::c_ulonglong,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0];
// Initialized in run_static_initializers
#[no_mangle]
pub static mut gDorfVortexDL: [Gfx; 33] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 33];
static mut ovl_Boss_GanonVtx_020F70: [Vtx; 22] =
    [Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [159 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(255 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [819 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [437 as libc::c_int as libc::c_short,
                                3000 as libc::c_int as libc::c_short,
                                -(370 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [717 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [257 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(97 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [614 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [540 as libc::c_int as libc::c_short,
                                3000 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [512 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(315 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1024 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [167 as libc::c_int as libc::c_short,
                                3000 as libc::c_int as libc::c_short,
                                -(599 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [922 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(159 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(255 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1229 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(167 as libc::c_int) as libc::c_short,
                                3000 as libc::c_int as libc::c_short,
                                -(599 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1126 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(257 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(97 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1434 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(437 as libc::c_int) as libc::c_short,
                                3000 as libc::c_int as libc::c_short,
                                -(370 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1331 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(257 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                97 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1638 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(540 as libc::c_int) as libc::c_short,
                                3000 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1536 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(159 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                255 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1843 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(437 as libc::c_int) as libc::c_short,
                                3000 as libc::c_int as libc::c_short,
                                370 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1741 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                315 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2048 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(167 as libc::c_int) as libc::c_short,
                                3000 as libc::c_int as libc::c_short,
                                599 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1946 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [159 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                255 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [205 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [167 as libc::c_int as libc::c_short,
                                3000 as libc::c_int as libc::c_short,
                                599 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [102 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                315 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [167 as libc::c_int as libc::c_short,
                                3000 as libc::c_int as libc::c_short,
                                599 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2150 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [257 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                97 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [410 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [437 as libc::c_int as libc::c_short,
                                3000 as libc::c_int as libc::c_short,
                                370 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [307 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },}];
static mut ovl_Boss_GanonTex_020770: [u64_0; 256] =
    [0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x1 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x101000000 as libc::c_longlong as u64_0,
     0x10202010000 as libc::c_longlong as u64_0,
     0x101010202 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0x20202000000 as libc::c_longlong as u64_0,
     0x101020507050200 as libc::c_longlong as u64_0,
     0x101010304 as libc::c_longlong as u64_0,
     0x201000000000000 as libc::c_longlong as u64_0,
     0x30504010001 as libc::c_longlong as u64_0,
     0x50303070a090401 as libc::c_longlong as u64_0,
     0x10101020206 as libc::c_longlong as u64_0,
     0x503020000000000 as libc::c_longlong as u64_0,
     0x101040808030003 as libc::c_longlong as u64_0,
     0x808060709090602 as libc::c_longlong as u64_0,
     0x100000101010104 as libc::c_longlong as u64_0,
     0x506060302010002 as libc::c_longlong as u64_0,
     0x505060a0c080404 as libc::c_longlong as u64_0,
     0x709070706050709 as libc::c_longlong as u64_0,
     0x701000001010101 as libc::c_longlong as u64_0,
     0x5080b0a06020205 as libc::c_longlong as u64_0,
     0x90a0a0c0f0e0a05 as libc::c_longlong as u64_0,
     0x508090505040810 as libc::c_longlong as u64_0,
     0x1006000000010102 as libc::c_longlong as u64_0,
     0x50a11130e080608 as libc::c_longlong as u64_0,
     0xa0c0d101514120d as libc::c_longlong as u64_0,
     0xe0c0d0b09080b15 as libc::c_longlong as u64_0,
     0x190f040201000308 as libc::c_longlong as u64_0,
     0xa0f161a180f0a0a as libc::c_longlong as u64_0,
     0xa0b0b12191b2a20 as libc::c_longlong as u64_0,
     0x221b1f1b1815141c as libc::c_longlong as u64_0,
     0x2217080603030611 as libc::c_longlong as u64_0,
     0x1a1f201e1c140e0e as libc::c_longlong as u64_0,
     0xd0e0f11181d2f3d as libc::c_longlong as u64_0,
     0x3f3335322c261f24 as libc::c_longlong as u64_0,
     0x2e230f0d0a090e18 as libc::c_longlong as u64_0,
     0x242e2d241b141010 as libc::c_longlong as u64_0,
     0x111618131618274a as libc::c_longlong as u64_0,
     0x4e46494842383030 as libc::c_longlong as u64_0,
     0x3931171216151f24 as libc::c_longlong as u64_0,
     0x2331362a1b111013 as libc::c_longlong as u64_0,
     0x191d201c1e273145 as libc::c_longlong as u64_0,
     0x4f51565b584c4140 as libc::c_longlong as u64_0,
     0x4a3f1c141e202d32 as libc::c_longlong as u64_0,
     0x242b363122140f14 as libc::c_longlong as u64_0,
     0x1d23221d273c4a4e as libc::c_longlong as u64_0,
     0x675f636d70645452 as libc::c_longlong as u64_0,
     0x564c26162d363842 as libc::c_longlong as u64_0,
     0x38333f3f35241817 as libc::c_longlong as u64_0,
     0x242c2a252f4f656c as libc::c_longlong as u64_0,
     0x948a7e81887d6a63 as libc::c_ulonglong,
     0x60583b2f4454575f as libc::c_longlong as u64_0,
     0x5b555c5e56493e34 as libc::c_longlong as u64_0,
     0x3941464449627089 as libc::c_longlong as u64_0,
     0xbbbaa89b9b917a70 as libc::c_ulonglong,
     0x67595152677a8184 as libc::c_longlong as u64_0,
     0x857f7a7c756d6a63 as libc::c_ulonglong,
     0x5c5d626e767f8795 as libc::c_longlong as u64_0,
     0xc4d1cabbb5a68c82 as libc::c_ulonglong,
     0x7d706b768b969da7 as libc::c_longlong as u64_0,
     0xaea69592928c8b8a as libc::c_ulonglong,
     0x857d8094a5aaa8a5 as libc::c_ulonglong,
     0xc4cec9c7c2b69e94 as libc::c_ulonglong,
     0x948f89919ea4a9b7 as libc::c_ulonglong,
     0xbebdafa2a2a49f9a as libc::c_ulonglong,
     0x99959bb7c9cecac4 as libc::c_ulonglong,
     0xd7cdc8c8cbc8b6ab as libc::c_ulonglong,
     0xaaaaa7a0a0a2acbd as libc::c_ulonglong,
     0xc6ccc9bdb4bab6a8 as libc::c_ulonglong,
     0xa3a3aecfe3e4e0de as libc::c_ulonglong,
     0xe6dbd4ced0d0c6ba as libc::c_ulonglong,
     0xb6b6b3a79fa7b4c7 as libc::c_ulonglong,
     0xd5d7d8d3c9c9cdbf as libc::c_ulonglong,
     0xb1b2bed9f2ece3e5 as libc::c_ulonglong,
     0xeceae1dadbddd7cb as libc::c_ulonglong,
     0xc2bfbcb4adb4c4d7 as libc::c_ulonglong,
     0xe4e7e4ddd6d6e0dc as libc::c_ulonglong,
     0xc7babfd4e9e8dfe2 as libc::c_ulonglong,
     0xf0f4ede8e6e7e7dd as libc::c_ulonglong,
     0xcfc9cac9c8cedcea as libc::c_ulonglong,
     0xf3f6f1e7e0dee3e7 as libc::c_ulonglong,
     0xdac2c3d6e4e8e3e5 as libc::c_ulonglong,
     0xf7fbf8f1eceaefeb as libc::c_ulonglong,
     0xdfdcdde0e2e4e7ef as libc::c_ulonglong,
     0xf7fcfaf4efe9e5e7 as libc::c_ulonglong,
     0xe2cdc8d7e5e9eaee as libc::c_ulonglong,
     0xfdfefcf7f1ebedf0 as libc::c_ulonglong,
     0xe9e8edf1f3f0eef0 as libc::c_ulonglong,
     0xf5fbfbf8f7f3e9e2 as libc::c_ulonglong,
     0xddd6d3e1ebebebf4 as libc::c_ulonglong,
     0xfcfefefcf6f0f1f4 as libc::c_ulonglong,
     0xedeaf3fafcf5ebea as libc::c_ulonglong,
     0xf0f8f8f6f7f6eee6 as libc::c_ulonglong,
     0xe2e0e4edede9e1ee as libc::c_ulonglong,
     0xfafffdfdfaf7f7f7 as libc::c_ulonglong,
     0xf2eff6fbfbf2e1df as libc::c_ulonglong,
     0xeef8f6f2f4f6f2ee as libc::c_ulonglong,
     0xeae7ecf2eee6e0e5 as libc::c_ulonglong,
     0xf6fcfcfdfdfcfcf9 as libc::c_ulonglong,
     0xf2f0f5fafaf3ded8 as libc::c_ulonglong,
     0xe8f7f7f3f4f8f7f6 as libc::c_ulonglong,
     0xf2eeeef0ece5e2e5 as libc::c_ulonglong,
     0xf8fbf5f7fafbfaf5 as libc::c_ulonglong,
     0xebe7f4fcfaf6e8dd as libc::c_ulonglong,
     0xe8f8fcf8f8f9fafa as libc::c_ulonglong,
     0xf9f4eee9e4dfe0e9 as libc::c_ulonglong,
     0xf9faf1eef2f5f7f5 as libc::c_ulonglong,
     0xebe1edfbfbfaf5ef as libc::c_ulonglong,
     0xf4fcfefdfbf8f8fb as libc::c_ulonglong,
     0xfbf7f2eae4dcd8e5 as libc::c_ulonglong,
     0xf6fbf0eaeceff3f2 as libc::c_ulonglong,
     0xede5eaf9fdfcfdfc as libc::c_ulonglong,
     0xfcfdfdfcf9f5f7fa as libc::c_ulonglong,
     0xfcf9f6f2ebe0d6e1 as libc::c_ulonglong,
     0xedf9f5eeedeef0f0 as libc::c_ulonglong,
     0xeeebeffafefefffc as libc::c_ulonglong,
     0xf9f6f8fbfaf7f6fa as libc::c_ulonglong,
     0xfdfdfbfaf7e8dcdb as libc::c_ulonglong,
     0xecf7f9f4f3f1f0ef as libc::c_ulonglong,
     0xececf3fcfefefef9 as libc::c_ulonglong,
     0xf1edeef7fbfaf9fc as libc::c_ulonglong,
     0xfefefdfcfbf3dfe0 as libc::c_ulonglong,
     0xf0f5fbfaf7f3f3f4 as libc::c_ulonglong,
     0xf1eff2f8fafcfefa as libc::c_ulonglong,
     0xf1eae7f0fafefdfe as libc::c_ulonglong,
     0xfffefefdfdfbe7e9 as libc::c_ulonglong,
     0xf6fbfdfbf8f3f2f7 as libc::c_ulonglong,
     0xf9f4eff0f3f6fbfb as libc::c_ulonglong,
     0xf5eeedf0faffffff as libc::c_ulonglong,
     0xfefdfdfefefdf7f0 as libc::c_ulonglong,
     0xf9fdfcfaf5eceaf4 as libc::c_ulonglong,
     0xfcf8ece8ebeff7fc as libc::c_ulonglong,
     0xf8f6f7f6f9fcfefd as libc::c_ulonglong,
     0xfbfaf8fbfefffef7 as libc::c_ulonglong,
     0xf3fafcf7efe4e1ea as libc::c_ulonglong,
     0xf7f8ebe1e4eaedf5 as libc::c_ulonglong,
     0xf6f3f7f8f7f9faf9 as libc::c_ulonglong,
     0xf5f3f1f0f4fbfffa as libc::c_ulonglong,
     0xeceef6f4ece1dbe1 as libc::c_ulonglong,
     0xeff5ede0e0e2e0e6 as libc::c_ulonglong,
     0xedebeff2f3f6f6f5 as libc::c_ulonglong,
     0xeeecede6e2eefefa as libc::c_ulonglong,
     0xeae3e6e6e5e2dedf as libc::c_ulonglong,
     0xe7ede7dddbddd8da as libc::c_ulonglong,
     0xe5e6e8edeef2f4ef as libc::c_ulonglong,
     0xe3d9dfe4dde2f7fb as libc::c_ulonglong,
     0xf2e5d8d2d4dde3db as libc::c_ulonglong,
     0xd7dcdcd4cfd1d5dc as libc::c_ulonglong,
     0xe6e7e8e8e5e9ebe3 as libc::c_ulonglong,
     0xd1c5cee0e2e2f3fd as libc::c_ulonglong,
     0xf8ead6c2c1cddcd7 as libc::c_ulonglong,
     0xc5bfc4c1b7b9cce7 as libc::c_ulonglong,
     0xf0ede2ddd8d4d7ca as libc::c_ulonglong,
     0xb4afbfd6e4ebf2fc as libc::c_ulonglong,
     0xeeead8c2babecccf as libc::c_ulonglong,
     0xb9a1a3aaa6a2b0db as libc::c_ulonglong,
     0xf0e9d8cec6bfbdae as libc::c_ulonglong,
     0x9292accce0e4e3eb as libc::c_ulonglong,
     0xcfd5cfbfb3aeb1b6 as libc::c_ulonglong,
     0xa68d8a959a99a1c2 as libc::c_ulonglong,
     0xe3dbc6bab4aca292 as libc::c_ulonglong,
     0x757299c0d7d8cbc6 as libc::c_longlong as u64_0,
     0xa5b3bab0a59a9293 as libc::c_ulonglong,
     0x8c7a757e889198ae as libc::c_ulonglong,
     0xcacab7a7a09c9480 as libc::c_ulonglong,
     0x63597696aec0bea8 as libc::c_longlong as u64_0,
     0x8c959f9789807772 as libc::c_ulonglong,
     0x6752536b79808896 as libc::c_longlong as u64_0,
     0xaeb8a894827e796b as libc::c_ulonglong,
     0x59556374849eb6a5 as libc::c_longlong as u64_0,
     0x918f8d7b6a676a66 as libc::c_ulonglong,
     0x533634536a6d6e76 as libc::c_longlong as u64_0,
     0x8a9d9e9073625d58 as libc::c_ulonglong,
     0x5157605f5e749ca7 as libc::c_longlong as u64_0,
     0x968981634e506064 as libc::c_ulonglong,
     0x4a2a1e36565d5b5f as libc::c_longlong as u64_0,
     0x697d8d8c714e4240 as libc::c_longlong as u64_0,
     0x44525e595161869c as libc::c_longlong as u64_0,
     0x81776d543d3a4d5a as libc::c_ulonglong,
     0x46281b22363e424a as libc::c_longlong as u64_0,
     0x545d6e7b714f3630 as libc::c_longlong as u64_0,
     0x313e4e4c44537384 as libc::c_longlong as u64_0,
     0x625b4e3e2e293646 as libc::c_longlong as u64_0,
     0x37201c201e1d1f2d as libc::c_longlong as u64_0,
     0x3e454a595f4d2d20 as libc::c_longlong as u64_0,
     0x2229363e3b4a6a70 as libc::c_longlong as u64_0,
     0x453c3329211f2835 as libc::c_longlong as u64_0,
     0x2a1a1b201307050f as libc::c_longlong as u64_0,
     0x242c293343442c18 as libc::c_longlong as u64_0,
     0x15151c2a3140655c as libc::c_longlong as u64_0,
     0x251b1f1b15161f27 as libc::c_longlong as u64_0,
     0x261d1c2015040005 as libc::c_longlong as u64_0,
     0x141e151626312716 as libc::c_longlong as u64_0,
     0xe0c0d1928385556 as libc::c_longlong as u64_0,
     0x170d15110a0b141e as libc::c_longlong as u64_0,
     0x2222201f170b0403 as libc::c_longlong as u64_0,
     0xd190f0b151f1b10 as libc::c_longlong as u64_0,
     0xb08050c17264546 as libc::c_longlong as u64_0,
     0x130c140c03030c12 as libc::c_longlong as u64_0,
     0x13181f1c16100a07 as libc::c_longlong as u64_0,
     0x90e0f0911160f08 as libc::c_longlong as u64_0,
     0xc0f0a090f1b2e32 as libc::c_longlong as u64_0,
     0x12171d110301070d as libc::c_longlong as u64_0,
     0xb0d1414110f110f as libc::c_longlong as u64_0,
     0xa07070a11150b04 as libc::c_longlong as u64_0,
     0xc15130f0e0e1b23 as libc::c_longlong as u64_0,
     0x101721130401050c as libc::c_longlong as u64_0,
     0xe09090b09090e13 as libc::c_longlong as u64_0,
     0x100905050d120c04 as libc::c_longlong as u64_0,
     0x71419110c0a1016 as libc::c_longlong as u64_0,
     0x910181105020308 as libc::c_longlong as u64_0,
     0xd0906060504060c as libc::c_longlong as u64_0,
     0x110f0903060b0804 as libc::c_longlong as u64_0,
     0x30a100d0a090b0c as libc::c_longlong as u64_0,
     0x5060a0601010204 as libc::c_longlong as u64_0,
     0x708040302010307 as libc::c_longlong as u64_0,
     0xa0d0b0402020302 as libc::c_longlong as u64_0,
     0x203060604040708 as libc::c_longlong as u64_0,
     0x202020000000201 as libc::c_longlong as u64_0,
     0x203020000000102 as libc::c_longlong as u64_0,
     0x506070401000001 as libc::c_longlong as u64_0,
     0x102020100010406 as libc::c_longlong as u64_0,
     0x100020100000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x202020201000000 as libc::c_longlong as u64_0,
     0x10100000102 as libc::c_longlong as u64_0,
     0x10000000000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x10000000001 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0];
static mut ovl_Boss_GanonTex_01D6B8: [u64_0; 128] =
    [0x6e737d8999a8b4bd as libc::c_longlong as u64_0,
     0xc1c1c2c4c8cbccc9 as libc::c_ulonglong,
     0xc2b9b1aba9a6a199 as libc::c_ulonglong,
     0x90867d746f6d6c6c as libc::c_ulonglong,
     0x727a8698acc0ced5 as libc::c_longlong as u64_0,
     0xd5d0cbc7c7cacac8 as libc::c_ulonglong,
     0xc2b9b2aeadaca8a1 as libc::c_ulonglong,
     0x988d837b75716f6f as libc::c_ulonglong,
     0x777e8ca1b8cddbe1 as libc::c_longlong as u64_0,
     0xddd5ccc5c4c8cac8 as libc::c_ulonglong,
     0xc1b6afacacadaba6 as libc::c_ulonglong,
     0xa19a928b847d7775 as libc::c_ulonglong,
     0x797e8da2bacedbde as libc::c_longlong as u64_0,
     0xdad1c7c3c4c9cbc8 as libc::c_ulonglong,
     0xbdb1a8a5a6aaadae as libc::c_ulonglong,
     0xaeaca9a39a8f847c as libc::c_ulonglong,
     0x7a7d899eb5c8d3d5 as libc::c_longlong as u64_0,
     0xd1c9c3c3c8cdcdc4 as libc::c_ulonglong,
     0xb6a89f9ca0a8b1ba as libc::c_ulonglong,
     0xc1c6c6c0b3a39081 as libc::c_ulonglong,
     0x797a8599aebfc7c9 as libc::c_longlong as u64_0,
     0xc6c2c3c6cdd1cbbd as libc::c_ulonglong,
     0xab9c95969eabbccc as libc::c_ulonglong,
     0xd9e2e3dbc9b19883 as libc::c_ulonglong,
     0x76778394a7b5bbbd as libc::c_longlong as u64_0,
     0xbdbfc5cdd3d1c4b1 as libc::c_ulonglong,
     0x9f928e93a2b6cde2 as libc::c_ulonglong,
     0xf0f7f7edd7b99a82 as libc::c_ulonglong,
     0x727480909fa9afb3 as libc::c_longlong as u64_0,
     0xb8bfc9d2d4ccbaa5 as libc::c_ulonglong,
     0x948a8b96abc5e0f4 as libc::c_ulonglong,
     0xfdfffff3d9b7967d as libc::c_ulonglong,
     0x70747f8b979fa5ac as libc::c_longlong as u64_0,
     0xb6c2ced5d2c4b19c as libc::c_ulonglong,
     0x8e878c9db8d6effd as libc::c_ulonglong,
     0xfffffeefd1ad8d78 as libc::c_ulonglong,
     0x6f747d889198a0ab as libc::c_longlong as u64_0,
     0xb8c6d2d6d0c2ae9b as libc::c_ulonglong,
     0x8d8991a6c5e3f9ff as libc::c_ulonglong,
     0xfffff9e3c29e8374 as libc::c_ulonglong,
     0x6f747d878f97a1af as libc::c_longlong as u64_0,
     0xbeced8dad4c6b4a2 as libc::c_ulonglong,
     0x938f98afd0edfeff as libc::c_ulonglong,
     0xfffdeed1af8f7a70 as libc::c_ulonglong,
     0x7178828c949eaab9 as libc::c_longlong as u64_0,
     0xc9d8e2e4dfd3c2ae as libc::c_ulonglong,
     0x9f99a3bbd9f4ffff as libc::c_ulonglong,
     0xfff4dcbc9b82736f as libc::c_ulonglong,
     0x77818c97a1acb8c7 as libc::c_longlong as u64_0,
     0xd7e5eff1eee4d3bf as libc::c_ulonglong,
     0xafa9b2c8e3f9ffff as libc::c_ulonglong,
     0xf9e5c7a78b797171 as libc::c_ulonglong,
     0x83909da9b3bdc9d6 as libc::c_ulonglong,
     0xe4f1fafdfbf3e4d2 as libc::c_ulonglong,
     0xc3bfc7d9effdfffd as libc::c_ulonglong,
     0xeed3b39681767479 as libc::c_ulonglong,
     0x96a5b1bbc4ccd6e0 as libc::c_ulonglong,
     0xebf6fefffffdf3e5 as libc::c_ulonglong,
     0xdad7dfedfafffff5 as libc::c_ulonglong,
     0xdfc1a48c7d797d88 as libc::c_ulonglong,
     0xadbac3c9cdd2d7df as libc::c_ulonglong,
     0xe7f0f9fffffffdf6 as libc::c_ulonglong,
     0xefeef4fbfffffcec as libc::c_ulonglong,
     0xd2b49b8a82848f9e as libc::c_ulonglong,
     0xbfc6c8c9c9caccd0 as libc::c_ulonglong,
     0xd7e1eef9ffffffff as libc::c_ulonglong,
     0xfdfdfefffffff7e2 as libc::c_ulonglong,
     0xc8ae9a8f8e96a5b4 as libc::c_ulonglong,
     0xc6c5c0bdbab8b7bb as libc::c_ulonglong,
     0xc1cedef0fdffffff as libc::c_ulonglong,
     0xfffffffffffdf0da as libc::c_ulonglong,
     0xc3aea09ba0acb9c2 as libc::c_ulonglong,
     0xbfb7afa8a4a09fa3 as libc::c_ulonglong,
     0xacbbd0e7f9ffffff as libc::c_ulonglong,
     0xfffffffffff8e8d5 as libc::c_ulonglong,
     0xc1b2acadb5bfc6c6 as libc::c_ulonglong,
     0xb3a69c938f8b8b90 as libc::c_ulonglong,
     0x9caec7dff2fdfefe as libc::c_ulonglong,
     0xfefffffffbf0e0d0 as libc::c_ulonglong,
     0xc2bab9bec6cac8bf as libc::c_ulonglong,
     0xa6978b827e7c7d83 as libc::c_ulonglong,
     0x91a6c0d8ebf6f8f7 as libc::c_ulonglong,
     0xf7fafbfaf3e8d9cb as libc::c_ulonglong,
     0xc2bfc3cacfcdc4b6 as libc::c_ulonglong,
     0x9d8c7f787372747c as libc::c_ulonglong,
     0x8ca2bcd3e5eef0f1 as libc::c_ulonglong,
     0xf2f4f6f2eaddd0c6 as libc::c_ulonglong,
     0xc0c0c6cccec9beae as libc::c_ulonglong,
     0x978577716e6e7078 as libc::c_ulonglong,
     0x889eb8cfe0e9edef as libc::c_ulonglong,
     0xf2f3f1eaded0c4bc as libc::c_ulonglong,
     0xb9bbc1c7c8c3b8a9 as libc::c_ulonglong,
     0x927f736d6c6c6e75 as libc::c_ulonglong,
     0x849ab3c9dae5ecf0 as libc::c_ulonglong,
     0xf3f1eaded0c1b6af as libc::c_ulonglong,
     0xadb0b7bec0beb4a6 as libc::c_ulonglong,
     0x8c7a706c6c6c6d73 as libc::c_ulonglong,
     0x7f93aac1d4e2ecf1 as libc::c_longlong as u64_0,
     0xf2ece0d1c0b1a6a0 as libc::c_ulonglong,
     0x9ea1a9b3b9b9b1a0 as libc::c_ulonglong,
     0x84756e6c6c6c6c70 as libc::c_ulonglong,
     0x7a8ba0b7ccdee9ef as libc::c_longlong as u64_0,
     0xece2d3c2b1a39891 as libc::c_ulonglong,
     0x90949da9b3b4ab98 as libc::c_ulonglong,
     0x7c716c6c6c6c6c6e as libc::c_longlong as u64_0,
     0x758295acc3d6e4e8 as libc::c_longlong as u64_0,
     0xe2d5c4b4a5978c85 as libc::c_ulonglong,
     0x848994a0abaca18f as libc::c_ulonglong,
     0x766e6c6c6c6c6c6c as libc::c_longlong as u64_0,
     0x707b8da4bbcfdcde as libc::c_longlong as u64_0,
     0xd6c8b8a99b8f857e as libc::c_ulonglong,
     0x7c818a969f9f9584 as libc::c_longlong as u64_0,
     0x716c6c6c6c6c6c6d as libc::c_longlong as u64_0,
     0x7079889fb6cad5d5 as libc::c_longlong as u64_0,
     0xccbeafa2978c837c as libc::c_ulonglong,
     0x797c838c9290877a as libc::c_longlong as u64_0,
     0x6d6c6c6c6d6e7072 as libc::c_longlong as u64_0,
     0x767f8ea2b7c8d0cf as libc::c_longlong as u64_0,
     0xc5b9aba0968e857e as libc::c_ulonglong,
     0x7a7a7e8284817a72 as libc::c_longlong as u64_0,
     0x6c6c6d7074787d82 as libc::c_longlong as u64_0,
     0x88909dadbdc9cecb as libc::c_ulonglong,
     0xc3b7aba29a948c85 as libc::c_ulonglong,
     0x807c7a797875716e as libc::c_ulonglong,
     0x6c6f737a838d969e as libc::c_longlong as u64_0,
     0xa4aab1bac4cbcdca as libc::c_ulonglong,
     0xc2b8ada6a29d9790 as libc::c_ulonglong,
     0x88807a75716f6d6c as libc::c_ulonglong];
unsafe extern "C" fn run_static_initializers() {
    sInitChain =
        [{
             let mut init = InitChainEntry{cont_type_0_offset_value: [0; 4],};
             init.set_cont(1 as libc::c_int as u32_0);
             init.set_type_0(ICHAINTYPE_U8 as libc::c_int as u32_0);
             init.set_offset(&mut (*(0 as *mut Actor)).targetMode as *mut s8
                                 as size_t as u32_0);
             init.set_value(5 as libc::c_int);
             init
         },
         {
             let mut init = InitChainEntry{cont_type_0_offset_value: [0; 4],};
             init.set_cont(1 as libc::c_int as u32_0);
             init.set_type_0(ICHAINTYPE_S8 as libc::c_int as u32_0);
             init.set_offset(&mut (*(0 as *mut Actor)).naviEnemyId as
                                 *mut u8_0 as size_t as u32_0);
             init.set_value(0x3d as libc::c_int);
             init
         },
         {
             let mut init = InitChainEntry{cont_type_0_offset_value: [0; 4],};
             init.set_cont(1 as libc::c_int as u32_0);
             init.set_type_0(ICHAINTYPE_F32_DIV1000 as libc::c_int as u32_0);
             init.set_offset(&mut (*(0 as *mut Actor)).gravity as *mut f32_0
                                 as size_t as u32_0);
             init.set_value(0 as libc::c_int);
             init
         },
         {
             let mut init = InitChainEntry{cont_type_0_offset_value: [0; 4],};
             init.set_cont(0 as libc::c_int as u32_0);
             init.set_type_0(ICHAINTYPE_F32 as libc::c_int as u32_0);
             init.set_offset(&mut (*(0 as *mut Actor)).targetArrowOffset as
                                 *mut f32_0 as size_t as u32_0);
             init.set_value(0 as libc::c_int);
             init
         }];
    gDorfImpactDarkDL =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int -
                                              14 as libc::c_int -
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((2 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 14 as libc::c_int)
                                        as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            11 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    (0xffff as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               16 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                        (0xffff as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ovl_Boss_GanonTex_01CEB8.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((32 as libc::c_int *
                                                   64 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (32 as libc::c_int *
                                                   64 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       32 as libc::c_int *
                                                           1 as libc::c_int /
                                                           8 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (32 as libc::c_int *
                                                         1 as libc::c_int) /
                                                        8 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      32 as libc::c_int *
                                                          1 as libc::c_int /
                                                          8 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (32 as libc::c_int *
                                                        1 as libc::c_int) /
                                                       8 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((32 as libc::c_int * 1 as libc::c_int
                                              + 7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((64 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ovl_Boss_GanonTex_01D6B8.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0x100 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (15 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((32 as libc::c_int *
                                                   32 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (32 as libc::c_int *
                                                   32 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       32 as libc::c_int *
                                                           1 as libc::c_int /
                                                           8 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (32 as libc::c_int *
                                                         1 as libc::c_int) /
                                                        8 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      32 as libc::c_int *
                                                          1 as libc::c_int /
                                                          8 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (32 as libc::c_int *
                                                        1 as libc::c_int) /
                                                       8 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((32 as libc::c_int * 1 as libc::c_int
                                              + 7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0x100 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (15 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfc as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((3 as libc::c_int as u32_0 &
                                               (((0x1 as libc::c_int) <<
                                                     4 as libc::c_int) -
                                                    1 as libc::c_int) as
                                                   libc::c_uint) <<
                                              20 as libc::c_int |
                                              (1 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         5 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  15 as libc::c_int |
                                              (2 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  12 as libc::c_int |
                                              (5 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  9 as libc::c_int |
                                              ((31 as libc::c_int as u32_0 &
                                                    (((0x1 as libc::c_int) <<
                                                          4 as libc::c_int) -
                                                         1 as libc::c_int) as
                                                        libc::c_uint) <<
                                                   5 as libc::c_int |
                                                   (31 as libc::c_int as u32_0
                                                        &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              5 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 0 as libc::c_int)) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               4 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        28 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            15 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        ((31 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    4 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             24 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 21 as libc::c_int |
                                             (3 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 18 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 6 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 3 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 0 as libc::c_int),};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int - 3 as libc::c_int
                                              - 29 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((29 as libc::c_int -
                                              1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 30 as libc::c_int |
                                         (3 as libc::c_int) <<
                                             26 as libc::c_int |
                                         (0 as libc::c_int) <<
                                             22 as libc::c_int |
                                         (2 as libc::c_int) <<
                                             18 as libc::c_int |
                                         (0x8 as libc::c_int |
                                              0x10 as libc::c_int |
                                              0x40 as libc::c_int |
                                              0x100 as libc::c_int |
                                              0x80 as libc::c_int |
                                              0x4000 as libc::c_int |
                                              0x800 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  28 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  24 as libc::c_int |
                                              (1 as libc::c_int) <<
                                                  20 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  16 as libc::c_int)) as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!((0x400 as libc::c_int |
                                                0x10000 as libc::c_int |
                                                0x20000 as libc::c_int |
                                                0x40000 as libc::c_int |
                                                0x80000 as libc::c_int) as
                                               u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1: 0 as libc::c_int as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xde as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    0x8000000 as libc::c_int as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (26 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int +
                                              26 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    ovl_Boss_GanonVtx_01DAB8.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((1 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((2 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((4 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((5 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((1 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((5 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((1 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((4 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((4 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((5 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((4 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((1 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((1 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((4 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((4 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((1 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((6 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((7 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((5 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((7 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((5 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((6 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((5 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((6 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((7 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((6 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((5 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((4 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((5 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((4 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((6 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((4 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((6 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((5 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((8 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((9 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((10 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((9 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((10 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((8 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((10 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((8 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((9 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((8 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((10 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((11 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((10 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((11 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((8 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((11 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((8 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((10 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((12 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((13 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((9 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((13 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((9 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((12 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((9 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((12 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((13 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((12 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((9 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((8 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((9 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((8 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((12 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((8 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((12 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((9 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((14 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((15 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((13 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((15 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((13 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((14 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((13 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((14 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((15 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((14 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((13 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((12 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((13 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((12 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((14 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((12 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((14 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((13 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((16 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((17 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((15 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((17 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((15 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((16 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((15 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((16 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((17 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((16 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((15 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((14 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((15 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((14 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((16 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((14 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((16 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((15 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((18 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((19 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((17 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((19 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((17 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((18 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((17 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((18 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((19 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((18 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((17 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((16 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((17 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((16 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((18 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((16 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((18 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((17 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((20 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((21 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((19 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((21 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((19 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((20 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((19 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((20 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((21 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((20 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((19 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((18 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((19 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((18 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((20 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((18 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((20 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((19 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((22 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((23 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((21 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((23 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((21 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((22 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((21 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((22 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((23 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((22 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((21 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((20 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((21 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((20 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((22 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((20 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((22 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((21 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((24 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((25 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((23 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((25 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((23 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((24 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((23 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((24 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((25 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((24 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((23 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((22 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((23 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((22 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((24 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((22 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((24 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((23 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((3 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((2 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((25 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((25 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((3 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((25 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((3 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((2 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((25 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((24 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((25 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((24 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((24 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((25 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    gDorfShockwaveDL =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int -
                                              14 as libc::c_int -
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((2 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 14 as libc::c_int)
                                        as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            11 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    (0xffff as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               16 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                        (0xffff as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ovl_Boss_GanonTex_01C420.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (15 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((64 as libc::c_int *
                                                   32 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (64 as libc::c_int *
                                                   32 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       64 as libc::c_int *
                                                           1 as libc::c_int /
                                                           8 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (64 as libc::c_int *
                                                         1 as libc::c_int) /
                                                        8 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      64 as libc::c_int *
                                                          1 as libc::c_int /
                                                          8 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (64 as libc::c_int *
                                                        1 as libc::c_int) /
                                                       8 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((64 as libc::c_int * 1 as libc::c_int
                                              + 7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (15 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((64 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe8 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (8 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (14 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0xfc as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0x7c as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfc as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((2 as libc::c_int as u32_0 &
                                               (((0x1 as libc::c_int) <<
                                                     4 as libc::c_int) -
                                                    1 as libc::c_int) as
                                                   libc::c_uint) <<
                                              20 as libc::c_int |
                                              (12 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         5 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  15 as libc::c_int |
                                              (2 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  12 as libc::c_int |
                                              (5 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  9 as libc::c_int |
                                              ((3 as libc::c_int as u32_0 &
                                                    (((0x1 as libc::c_int) <<
                                                          4 as libc::c_int) -
                                                         1 as libc::c_int) as
                                                        libc::c_uint) <<
                                                   5 as libc::c_int |
                                                   (0 as libc::c_int as u32_0
                                                        &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              5 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 0 as libc::c_int)) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               4 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        28 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            15 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        ((5 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    4 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             24 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 21 as libc::c_int |
                                             (3 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 18 as libc::c_int |
                                             (5 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 6 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 3 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 0 as libc::c_int),};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int - 3 as libc::c_int
                                              - 29 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((29 as libc::c_int -
                                              1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 30 as libc::c_int |
                                         (3 as libc::c_int) <<
                                             26 as libc::c_int |
                                         (0 as libc::c_int) <<
                                             22 as libc::c_int |
                                         (2 as libc::c_int) <<
                                             18 as libc::c_int |
                                         (0x8 as libc::c_int |
                                              0x10 as libc::c_int |
                                              0x40 as libc::c_int |
                                              0x100 as libc::c_int |
                                              0x80 as libc::c_int |
                                              0x4000 as libc::c_int |
                                              0x800 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  28 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  24 as libc::c_int |
                                              (1 as libc::c_int) <<
                                                  20 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  16 as libc::c_int)) as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!((0x400 as libc::c_int |
                                                0x10000 as libc::c_int |
                                                0x20000 as libc::c_int |
                                                0x40000 as libc::c_int |
                                                0x80000 as libc::c_int) as
                                               u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1: 0 as libc::c_int as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xde as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    0x8000000 as libc::c_int as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (26 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int +
                                              26 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    ovl_Boss_GanonVtx_01CC20.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((1 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((2 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((4 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((5 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((1 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((5 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((1 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((4 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((4 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((5 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((4 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((1 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((1 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((4 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((4 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((1 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((6 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((7 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((5 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((7 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((5 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((6 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((5 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((6 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((7 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((6 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((5 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((4 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((5 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((4 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((6 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((4 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((6 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((5 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((8 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((9 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((7 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((9 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((7 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((8 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((7 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((8 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((9 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((8 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((7 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((6 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((7 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((6 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((8 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((6 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((8 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((7 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((10 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((11 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((9 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((11 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((9 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((10 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((9 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((10 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((11 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((10 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((9 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((8 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((9 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((8 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((10 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((8 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((10 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((9 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((12 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((13 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((11 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((13 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((11 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((12 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((11 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((12 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((13 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((12 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((11 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((10 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((11 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((10 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((12 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((10 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((12 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((11 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((14 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((15 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((16 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((15 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((16 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((14 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((16 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((14 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((15 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((14 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((16 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((17 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((16 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((17 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((14 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((17 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((14 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((16 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((18 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((19 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((15 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((19 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((15 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((18 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((15 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((18 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((19 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((18 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((15 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((14 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((15 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((14 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((18 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((14 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((18 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((15 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((20 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((21 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((19 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((21 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((19 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((20 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((19 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((20 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((21 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((20 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((19 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((18 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((19 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((18 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((20 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((18 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((20 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((19 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((22 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((23 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((21 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((23 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((21 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((22 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((21 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((22 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((23 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((22 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((21 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((20 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((21 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((20 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((22 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((20 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((22 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((21 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((24 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((25 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((23 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((25 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((23 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((24 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((23 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((24 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((25 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((24 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((23 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((22 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((23 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((22 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((24 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((22 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((24 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((23 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((3 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((2 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((25 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((25 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((3 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((25 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((3 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((2 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((25 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((24 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((25 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((24 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((24 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((25 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    gDorfDotDL =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int -
                                              14 as libc::c_int -
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((2 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 14 as libc::c_int)
                                        as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            11 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    (0xffff as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               16 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                        (0xffff as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (3 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ovl_Boss_GanonTex_01A7B0.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (3 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((32 as libc::c_int *
                                                   32 as libc::c_int +
                                                   0 as libc::c_int >>
                                                   0 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (32 as libc::c_int *
                                                   32 as libc::c_int +
                                                   0 as libc::c_int >>
                                                   0 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       32 as libc::c_int *
                                                           2 as libc::c_int /
                                                           8 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (32 as libc::c_int *
                                                         2 as libc::c_int) /
                                                        8 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      32 as libc::c_int *
                                                          2 as libc::c_int /
                                                          8 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (32 as libc::c_int *
                                                        2 as libc::c_int) /
                                                       8 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (3 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((32 as libc::c_int * 2 as libc::c_int
                                              + 7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ovl_Boss_GanonTex_01AFB0.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0x100 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (14 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (15 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((64 as libc::c_int *
                                                   64 as libc::c_int +
                                                   3 as libc::c_int >>
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (64 as libc::c_int *
                                                   64 as libc::c_int +
                                                   3 as libc::c_int >>
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       64 as libc::c_int /
                                                           16 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (64 as libc::c_int) /
                                                        16 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      64 as libc::c_int /
                                                          16 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (64 as libc::c_int) /
                                                       16 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (((64 as libc::c_int >>
                                               1 as libc::c_int) +
                                              7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0x100 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (14 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (15 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((64 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((64 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfc as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((2 as libc::c_int as u32_0 &
                                               (((0x1 as libc::c_int) <<
                                                     4 as libc::c_int) -
                                                    1 as libc::c_int) as
                                                   libc::c_uint) <<
                                              20 as libc::c_int |
                                              (2 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         5 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  15 as libc::c_int |
                                              (2 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  12 as libc::c_int |
                                              (5 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  9 as libc::c_int |
                                              ((3 as libc::c_int as u32_0 &
                                                    (((0x1 as libc::c_int) <<
                                                          4 as libc::c_int) -
                                                         1 as libc::c_int) as
                                                        libc::c_uint) <<
                                                   5 as libc::c_int |
                                                   (0 as libc::c_int as u32_0
                                                        &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              5 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 0 as libc::c_int)) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (31 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               4 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        28 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            15 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        ((31 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    4 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             24 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 21 as libc::c_int |
                                             (3 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 18 as libc::c_int |
                                             (31 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 6 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 3 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 0 as libc::c_int),};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int - 3 as libc::c_int
                                              - 29 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((29 as libc::c_int -
                                              1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 30 as libc::c_int |
                                         (3 as libc::c_int) <<
                                             26 as libc::c_int |
                                         (0 as libc::c_int) <<
                                             22 as libc::c_int |
                                         (2 as libc::c_int) <<
                                             18 as libc::c_int |
                                         (0x8 as libc::c_int |
                                              0x10 as libc::c_int |
                                              0x40 as libc::c_int |
                                              0x100 as libc::c_int |
                                              0x80 as libc::c_int |
                                              0x4000 as libc::c_int |
                                              0x800 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  28 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  24 as libc::c_int |
                                              (1 as libc::c_int) <<
                                                  20 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  16 as libc::c_int)) as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!((0x10000 as libc::c_int |
                                                0x20000 as libc::c_int |
                                                0x40000 as libc::c_int |
                                                0x80000 as libc::c_int) as
                                               u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1: 0 as libc::c_int as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!(0 as libc::c_int as u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1: 0x400 as libc::c_int as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xde as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    0xa000000 as libc::c_int as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int + 4 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    &mut *ovl_Boss_GanonVtx_01BFB0.as_mut_ptr().offset(29
                                                                                           as
                                                                                           libc::c_int
                                                                                           as
                                                                                           isize)
                                        as *mut Vtx as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((1 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((2 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    gDorfBigMagicBGCircleDL =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int -
                                              14 as libc::c_int -
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((2 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 14 as libc::c_int)
                                        as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            11 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    (0xffff as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               16 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                        (0xffff as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (3 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ovl_Boss_GanonTex_01A7B0.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (3 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((32 as libc::c_int *
                                                   32 as libc::c_int +
                                                   0 as libc::c_int >>
                                                   0 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (32 as libc::c_int *
                                                   32 as libc::c_int +
                                                   0 as libc::c_int >>
                                                   0 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       32 as libc::c_int *
                                                           2 as libc::c_int /
                                                           8 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (32 as libc::c_int *
                                                         2 as libc::c_int) /
                                                        8 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      32 as libc::c_int *
                                                          2 as libc::c_int /
                                                          8 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (32 as libc::c_int *
                                                        2 as libc::c_int) /
                                                       8 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (3 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((32 as libc::c_int * 2 as libc::c_int
                                              + 7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe8 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (3 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (8 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (14 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (15 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0x7c as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0x7c as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfc as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((7 as libc::c_int as u32_0 &
                                               (((0x1 as libc::c_int) <<
                                                     4 as libc::c_int) -
                                                    1 as libc::c_int) as
                                                   libc::c_uint) <<
                                              20 as libc::c_int |
                                              (12 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         5 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  15 as libc::c_int |
                                              (2 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  12 as libc::c_int |
                                              (5 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  9 as libc::c_int |
                                              ((31 as libc::c_int as u32_0 &
                                                    (((0x1 as libc::c_int) <<
                                                          4 as libc::c_int) -
                                                         1 as libc::c_int) as
                                                        libc::c_uint) <<
                                                   5 as libc::c_int |
                                                   (0 as libc::c_int as u32_0
                                                        &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              5 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 0 as libc::c_int)) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               4 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        28 as libc::c_int |
                                        (3 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            15 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        ((3 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    4 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             24 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 21 as libc::c_int |
                                             (3 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 18 as libc::c_int |
                                             (6 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 6 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 3 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 0 as libc::c_int),};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int - 3 as libc::c_int
                                              - 29 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((29 as libc::c_int -
                                              1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 30 as libc::c_int |
                                         (3 as libc::c_int) <<
                                             26 as libc::c_int |
                                         (0 as libc::c_int) <<
                                             22 as libc::c_int |
                                         (2 as libc::c_int) <<
                                             18 as libc::c_int |
                                         (0x8 as libc::c_int |
                                              0x10 as libc::c_int |
                                              0x40 as libc::c_int |
                                              0x100 as libc::c_int |
                                              0x80 as libc::c_int |
                                              0x4000 as libc::c_int |
                                              0x800 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  28 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  24 as libc::c_int |
                                              (1 as libc::c_int) <<
                                                  20 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  16 as libc::c_int)) as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!((0x10000 as libc::c_int |
                                                0x20000 as libc::c_int |
                                                0x40000 as libc::c_int |
                                                0x80000 as libc::c_int) as
                                               u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1: 0 as libc::c_int as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!(0 as libc::c_int as u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1: 0x400 as libc::c_int as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xde as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    0x9000000 as libc::c_int as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int + 4 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    &mut *ovl_Boss_GanonVtx_01BFB0.as_mut_ptr().offset(25
                                                                                           as
                                                                                           libc::c_int
                                                                                           as
                                                                                           isize)
                                        as *mut Vtx as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((1 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((2 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    gDorfLightFlecksDL =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int -
                                              14 as libc::c_int -
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((2 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 14 as libc::c_int)
                                        as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            11 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    (0xffff as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               16 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                        (0xffff as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ovl_Boss_GanonTex_01B7B0.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0x1 as libc::c_int |
                                              0 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (15 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((64 as libc::c_int *
                                                   64 as libc::c_int +
                                                   3 as libc::c_int >>
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (64 as libc::c_int *
                                                   64 as libc::c_int +
                                                   3 as libc::c_int >>
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       64 as libc::c_int /
                                                           16 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (64 as libc::c_int) /
                                                        16 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      64 as libc::c_int /
                                                          16 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (64 as libc::c_int) /
                                                       16 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (((64 as libc::c_int >>
                                               1 as libc::c_int) +
                                              7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0x1 as libc::c_int |
                                              0 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (15 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((64 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((64 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    gEffFleckTex.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0x100 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (14 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (14 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((64 as libc::c_int *
                                                   64 as libc::c_int +
                                                   3 as libc::c_int >>
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (64 as libc::c_int *
                                                   64 as libc::c_int +
                                                   3 as libc::c_int >>
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       64 as libc::c_int /
                                                           16 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (64 as libc::c_int) /
                                                        16 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      64 as libc::c_int /
                                                          16 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (64 as libc::c_int) /
                                                       16 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (((64 as libc::c_int >>
                                               1 as libc::c_int) +
                                              7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0x100 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (14 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (14 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((64 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((64 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfc as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((2 as libc::c_int as u32_0 &
                                               (((0x1 as libc::c_int) <<
                                                     4 as libc::c_int) -
                                                    1 as libc::c_int) as
                                                   libc::c_uint) <<
                                              20 as libc::c_int |
                                              (12 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         5 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  15 as libc::c_int |
                                              (2 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  12 as libc::c_int |
                                              (5 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  9 as libc::c_int |
                                              ((3 as libc::c_int as u32_0 &
                                                    (((0x1 as libc::c_int) <<
                                                          4 as libc::c_int) -
                                                         1 as libc::c_int) as
                                                        libc::c_uint) <<
                                                   5 as libc::c_int |
                                                   (0 as libc::c_int as u32_0
                                                        &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              5 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 0 as libc::c_int)) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               4 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        28 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            15 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        ((5 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    4 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             24 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 21 as libc::c_int |
                                             (3 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 18 as libc::c_int |
                                             (5 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 6 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 3 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 0 as libc::c_int),};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int - 3 as libc::c_int
                                              - 29 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((29 as libc::c_int -
                                              1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 30 as libc::c_int |
                                         (3 as libc::c_int) <<
                                             26 as libc::c_int |
                                         (0 as libc::c_int) <<
                                             22 as libc::c_int |
                                         (2 as libc::c_int) <<
                                             18 as libc::c_int |
                                         (0x8 as libc::c_int |
                                              0x10 as libc::c_int |
                                              0x40 as libc::c_int |
                                              0x100 as libc::c_int |
                                              0x80 as libc::c_int |
                                              0x4000 as libc::c_int |
                                              0x800 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  28 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  24 as libc::c_int |
                                              (1 as libc::c_int) <<
                                                  20 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  16 as libc::c_int)) as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!((0x10000 as libc::c_int |
                                                0x20000 as libc::c_int |
                                                0x40000 as libc::c_int |
                                                0x80000 as libc::c_int) as
                                               u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1: 0 as libc::c_int as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!(0 as libc::c_int as u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1: 0x400 as libc::c_int as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xde as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    0x8000000 as libc::c_int as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (25 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int +
                                              25 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    ovl_Boss_GanonVtx_01BFB0.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((1 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((2 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((1 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((4 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((4 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((1 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((4 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((1 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((3 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((5 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((6 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((5 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((6 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((3 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((6 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((3 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((5 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((5 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((7 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((8 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((7 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((8 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((5 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((8 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((5 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((7 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((7 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((9 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((10 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((9 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((10 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((7 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((10 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((7 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((9 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((9 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((11 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((12 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((11 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((12 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((9 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((12 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((9 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((11 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((11 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((13 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((14 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((13 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((14 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((11 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((14 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((11 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((13 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((13 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((15 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((16 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((15 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((16 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((13 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((16 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((13 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((15 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((17 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((18 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((19 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((18 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((19 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((17 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((19 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((17 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((18 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((18 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((20 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((21 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((20 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((21 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((18 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((21 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((18 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((20 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((20 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((22 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((23 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((22 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((23 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((20 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((23 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((20 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((22 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((22 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((24 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((24 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((22 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((24 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((22 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    gDorfLightRayTriDL =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int -
                                              14 as libc::c_int -
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((2 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 14 as libc::c_int)
                                        as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            11 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               16 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfc as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((3 as libc::c_int as u32_0 &
                                               (((0x1 as libc::c_int) <<
                                                     4 as libc::c_int) -
                                                    1 as libc::c_int) as
                                                   libc::c_uint) <<
                                              20 as libc::c_int |
                                              (11 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         5 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  15 as libc::c_int |
                                              (4 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  12 as libc::c_int |
                                              (3 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  9 as libc::c_int |
                                              ((31 as libc::c_int as u32_0 &
                                                    (((0x1 as libc::c_int) <<
                                                          4 as libc::c_int) -
                                                         1 as libc::c_int) as
                                                        libc::c_uint) <<
                                                   5 as libc::c_int |
                                                   (31 as libc::c_int as u32_0
                                                        &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              5 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 0 as libc::c_int)) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               4 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        28 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            15 as libc::c_int |
                                        (7 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (7 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        ((31 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    4 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             24 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 21 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 18 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 6 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 3 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 0 as libc::c_int),};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int - 3 as libc::c_int
                                              - 29 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((29 as libc::c_int -
                                              1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 30 as libc::c_int |
                                         (3 as libc::c_int) <<
                                             26 as libc::c_int |
                                         (0 as libc::c_int) <<
                                             22 as libc::c_int |
                                         (2 as libc::c_int) <<
                                             18 as libc::c_int |
                                         (0x8 as libc::c_int |
                                              0x10 as libc::c_int |
                                              0x40 as libc::c_int |
                                              0x100 as libc::c_int |
                                              0x80 as libc::c_int |
                                              0x4000 as libc::c_int |
                                              0x800 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  28 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  24 as libc::c_int |
                                              (1 as libc::c_int) <<
                                                  20 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  16 as libc::c_int)) as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!((0x400 as libc::c_int |
                                                0x10000 as libc::c_int |
                                                0x20000 as libc::c_int |
                                                0x40000 as libc::c_int |
                                                0x80000 as libc::c_int) as
                                               u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1: 0 as libc::c_int as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (3 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int + 3 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    ovl_Boss_GanonVtx_01A738.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((1 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((2 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    gDorfUnusedDL =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int -
                                              14 as libc::c_int -
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((2 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 14 as libc::c_int)
                                        as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            11 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               16 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfc as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((3 as libc::c_int as u32_0 &
                                               (((0x1 as libc::c_int) <<
                                                     4 as libc::c_int) -
                                                    1 as libc::c_int) as
                                                   libc::c_uint) <<
                                              20 as libc::c_int |
                                              (11 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         5 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  15 as libc::c_int |
                                              (4 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  12 as libc::c_int |
                                              (3 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  9 as libc::c_int |
                                              ((31 as libc::c_int as u32_0 &
                                                    (((0x1 as libc::c_int) <<
                                                          4 as libc::c_int) -
                                                         1 as libc::c_int) as
                                                        libc::c_uint) <<
                                                   5 as libc::c_int |
                                                   (31 as libc::c_int as u32_0
                                                        &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              5 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 0 as libc::c_int)) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               4 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        28 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            15 as libc::c_int |
                                        (7 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (7 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        ((31 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    4 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             24 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 21 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 18 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 6 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 3 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 0 as libc::c_int),};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int - 3 as libc::c_int
                                              - 29 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((29 as libc::c_int -
                                              1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 30 as libc::c_int |
                                         (3 as libc::c_int) <<
                                             26 as libc::c_int |
                                         (0 as libc::c_int) <<
                                             22 as libc::c_int |
                                         (2 as libc::c_int) <<
                                             18 as libc::c_int |
                                         (0x8 as libc::c_int |
                                              0x10 as libc::c_int |
                                              0x40 as libc::c_int |
                                              0x100 as libc::c_int |
                                              0x80 as libc::c_int |
                                              0x4000 as libc::c_int |
                                              0x800 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  28 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  24 as libc::c_int |
                                              (1 as libc::c_int) <<
                                                  20 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  16 as libc::c_int)) as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!((0x400 as libc::c_int |
                                                0x10000 as libc::c_int |
                                                0x20000 as libc::c_int |
                                                0x40000 as libc::c_int |
                                                0x80000 as libc::c_int) as
                                               u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1: 0 as libc::c_int as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (3 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int + 3 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    ovl_Boss_GanonVtx_01A6C0.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((1 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((2 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    gDorfLightningDL =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int -
                                              14 as libc::c_int -
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((2 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 14 as libc::c_int)
                                        as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            11 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    (0xffff as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               16 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                        (0xffff as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    0x8000000 as libc::c_int as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (7 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((32 as libc::c_int *
                                                   96 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (32 as libc::c_int *
                                                   96 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       32 as libc::c_int *
                                                           1 as libc::c_int /
                                                           8 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (32 as libc::c_int *
                                                         1 as libc::c_int) /
                                                        8 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      32 as libc::c_int *
                                                          1 as libc::c_int /
                                                          8 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (32 as libc::c_int *
                                                        1 as libc::c_int) /
                                                       8 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((32 as libc::c_int * 1 as libc::c_int
                                              + 7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (7 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((96 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfc as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((3 as libc::c_int as u32_0 &
                                               (((0x1 as libc::c_int) <<
                                                     4 as libc::c_int) -
                                                    1 as libc::c_int) as
                                                   libc::c_uint) <<
                                              20 as libc::c_int |
                                              (1 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         5 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  15 as libc::c_int |
                                              (7 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  12 as libc::c_int |
                                              (7 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  9 as libc::c_int |
                                              ((31 as libc::c_int as u32_0 &
                                                    (((0x1 as libc::c_int) <<
                                                          4 as libc::c_int) -
                                                         1 as libc::c_int) as
                                                        libc::c_uint) <<
                                                   5 as libc::c_int |
                                                   (31 as libc::c_int as u32_0
                                                        &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              5 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 0 as libc::c_int)) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               4 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        28 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            15 as libc::c_int |
                                        (7 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        ((31 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    4 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             24 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 21 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 18 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 6 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 3 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 0 as libc::c_int),};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int - 3 as libc::c_int
                                              - 29 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((29 as libc::c_int -
                                              1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 30 as libc::c_int |
                                         (3 as libc::c_int) <<
                                             26 as libc::c_int |
                                         (0 as libc::c_int) <<
                                             22 as libc::c_int |
                                         (2 as libc::c_int) <<
                                             18 as libc::c_int |
                                         (0x8 as libc::c_int |
                                              0x10 as libc::c_int |
                                              0x40 as libc::c_int |
                                              0x100 as libc::c_int |
                                              0x80 as libc::c_int |
                                              0x4000 as libc::c_int |
                                              0x800 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  28 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  24 as libc::c_int |
                                              (1 as libc::c_int) <<
                                                  20 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  16 as libc::c_int)) as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!((0x400 as libc::c_int |
                                                0x10000 as libc::c_int |
                                                0x20000 as libc::c_int |
                                                0x40000 as libc::c_int |
                                                0x80000 as libc::c_int) as
                                               u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1: 0 as libc::c_int as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int + 4 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    ovl_Boss_GanonVtx_01A600.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((1 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((2 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    gDorfSquareDL =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int + 4 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    ovl_Boss_GanonVtx_011538.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((1 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((2 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    gDorfLightBallMaterialDL =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int -
                                              14 as libc::c_int -
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((2 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 14 as libc::c_int)
                                        as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            11 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    (0xffff as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               16 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                        (0xffff as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ovl_Boss_GanonTex_010538.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((64 as libc::c_int *
                                                   64 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (64 as libc::c_int *
                                                   64 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       64 as libc::c_int *
                                                           1 as libc::c_int /
                                                           8 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (64 as libc::c_int *
                                                         1 as libc::c_int) /
                                                        8 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      64 as libc::c_int *
                                                          1 as libc::c_int /
                                                          8 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (64 as libc::c_int *
                                                        1 as libc::c_int) /
                                                       8 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((64 as libc::c_int * 1 as libc::c_int
                                              + 7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((64 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((64 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfc as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((3 as libc::c_int as u32_0 &
                                               (((0x1 as libc::c_int) <<
                                                     4 as libc::c_int) -
                                                    1 as libc::c_int) as
                                                   libc::c_uint) <<
                                              20 as libc::c_int |
                                              (1 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         5 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  15 as libc::c_int |
                                              (1 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  12 as libc::c_int |
                                              (3 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  9 as libc::c_int |
                                              ((31 as libc::c_int as u32_0 &
                                                    (((0x1 as libc::c_int) <<
                                                          4 as libc::c_int) -
                                                         1 as libc::c_int) as
                                                        libc::c_uint) <<
                                                   5 as libc::c_int |
                                                   (31 as libc::c_int as u32_0
                                                        &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              5 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 0 as libc::c_int)) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               4 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        28 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            15 as libc::c_int |
                                        (7 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (7 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        ((31 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    4 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             24 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 21 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 18 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 6 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 3 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 0 as libc::c_int),};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int - 3 as libc::c_int
                                              - 29 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((29 as libc::c_int -
                                              1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 30 as libc::c_int |
                                         (3 as libc::c_int) <<
                                             26 as libc::c_int |
                                         (0 as libc::c_int) <<
                                             22 as libc::c_int |
                                         (2 as libc::c_int) <<
                                             18 as libc::c_int |
                                         (0x8 as libc::c_int |
                                              0x10 as libc::c_int |
                                              0x40 as libc::c_int |
                                              0x100 as libc::c_int |
                                              0x80 as libc::c_int |
                                              0x4000 as libc::c_int |
                                              0x800 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  28 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  24 as libc::c_int |
                                              (1 as libc::c_int) <<
                                                  20 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  16 as libc::c_int)) as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!((0x400 as libc::c_int |
                                                0x10000 as libc::c_int |
                                                0x20000 as libc::c_int |
                                                0x40000 as libc::c_int |
                                                0x80000 as libc::c_int) as
                                               u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1: 0 as libc::c_int as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    gDorfLightStreak10DL =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xda as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((::std::mem::size_of::<Mtx>() as
                                              libc::c_ulong).wrapping_sub(1 as
                                                                              libc::c_int
                                                                              as
                                                                              libc::c_uint).wrapping_div(8
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             libc::c_uint)
                                             &
                                             (((0x1 as libc::c_int) <<
                                                   5 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((0 as libc::c_int / 8 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (((0 as libc::c_int |
                                               0x2 as libc::c_int |
                                               0 as libc::c_int) ^
                                              0x1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    0xd000040 as libc::c_int as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int + 4 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    &mut *ovl_Boss_GanonVtx_01F590.as_mut_ptr().offset(90
                                                                                           as
                                                                                           libc::c_int
                                                                                           as
                                                                                           isize)
                                        as *mut Vtx as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xda as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((::std::mem::size_of::<Mtx>() as
                                              libc::c_ulong).wrapping_sub(1 as
                                                                              libc::c_int
                                                                              as
                                                                              libc::c_uint).wrapping_div(8
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             libc::c_uint)
                                             &
                                             (((0x1 as libc::c_int) <<
                                                   5 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((0 as libc::c_int / 8 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (((0 as libc::c_int |
                                               0x2 as libc::c_int |
                                               0 as libc::c_int) ^
                                              0x1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    0xd000080 as libc::c_int as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((4 as libc::c_int + 6 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    &mut *ovl_Boss_GanonVtx_01F590.as_mut_ptr().offset(94
                                                                                           as
                                                                                           libc::c_int
                                                                                           as
                                                                                           isize)
                                        as *mut Vtx as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((4 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((5 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((4 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((5 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((5 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((4 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((6 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((1 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((6 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((1 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((1 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((6 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((3 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((7 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((2 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((7 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((3 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((3 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((7 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((8 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((9 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((8 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((9 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((9 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((8 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    gDorfWindowShardModelDL =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (3 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int + 3 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    ovl_Boss_GanonVtx_00FC48.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((1 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((2 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    gDorfImpactLightDL =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int -
                                              14 as libc::c_int -
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((2 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 14 as libc::c_int)
                                        as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            11 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    (0xffff as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               16 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                        (0xffff as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ovl_Boss_GanonTex_01CEB8.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((32 as libc::c_int *
                                                   64 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (32 as libc::c_int *
                                                   64 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       32 as libc::c_int *
                                                           1 as libc::c_int /
                                                           8 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (32 as libc::c_int *
                                                         1 as libc::c_int) /
                                                        8 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      32 as libc::c_int *
                                                          1 as libc::c_int /
                                                          8 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (32 as libc::c_int *
                                                        1 as libc::c_int) /
                                                       8 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((32 as libc::c_int * 1 as libc::c_int
                                              + 7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((64 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ovl_Boss_GanonTex_01D6B8.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0x100 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (14 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((32 as libc::c_int *
                                                   32 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (32 as libc::c_int *
                                                   32 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       32 as libc::c_int *
                                                           1 as libc::c_int /
                                                           8 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (32 as libc::c_int *
                                                         1 as libc::c_int) /
                                                        8 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      32 as libc::c_int *
                                                          1 as libc::c_int /
                                                          8 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (32 as libc::c_int *
                                                        1 as libc::c_int) /
                                                       8 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((32 as libc::c_int * 1 as libc::c_int
                                              + 7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0x100 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (14 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfc as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((3 as libc::c_int as u32_0 &
                                               (((0x1 as libc::c_int) <<
                                                     4 as libc::c_int) -
                                                    1 as libc::c_int) as
                                                   libc::c_uint) <<
                                              20 as libc::c_int |
                                              (1 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         5 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  15 as libc::c_int |
                                              (2 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  12 as libc::c_int |
                                              (5 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  9 as libc::c_int |
                                              ((31 as libc::c_int as u32_0 &
                                                    (((0x1 as libc::c_int) <<
                                                          4 as libc::c_int) -
                                                         1 as libc::c_int) as
                                                        libc::c_uint) <<
                                                   5 as libc::c_int |
                                                   (31 as libc::c_int as u32_0
                                                        &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              5 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 0 as libc::c_int)) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               4 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        28 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            15 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        ((31 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    4 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             24 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 21 as libc::c_int |
                                             (3 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 18 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 6 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 3 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 0 as libc::c_int),};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int - 3 as libc::c_int
                                              - 29 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((29 as libc::c_int -
                                              1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 30 as libc::c_int |
                                         (3 as libc::c_int) <<
                                             26 as libc::c_int |
                                         (0 as libc::c_int) <<
                                             22 as libc::c_int |
                                         (2 as libc::c_int) <<
                                             18 as libc::c_int |
                                         (0x8 as libc::c_int |
                                              0x10 as libc::c_int |
                                              0x40 as libc::c_int |
                                              0x100 as libc::c_int |
                                              0x80 as libc::c_int |
                                              0x4000 as libc::c_int |
                                              0x800 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  28 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  24 as libc::c_int |
                                              (1 as libc::c_int) <<
                                                  20 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  16 as libc::c_int)) as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!((0x400 as libc::c_int |
                                                0x10000 as libc::c_int |
                                                0x20000 as libc::c_int |
                                                0x40000 as libc::c_int |
                                                0x80000 as libc::c_int) as
                                               u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1: 0 as libc::c_int as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xde as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    0x8000000 as libc::c_int as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (26 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int +
                                              26 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    ovl_Boss_GanonVtx_01DAB8.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((1 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((2 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((4 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((5 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((1 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((5 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((1 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((4 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((4 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((5 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((4 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((1 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((1 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((4 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((4 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((1 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((6 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((7 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((5 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((7 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((5 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((6 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((5 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((6 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((7 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((6 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((5 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((4 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((5 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((4 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((6 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((4 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((6 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((5 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((8 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((9 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((10 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((9 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((10 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((8 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((10 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((8 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((9 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((8 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((10 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((11 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((10 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((11 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((8 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((11 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((8 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((10 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((12 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((13 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((9 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((13 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((9 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((12 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((9 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((12 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((13 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((12 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((9 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((8 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((9 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((8 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((12 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((8 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((12 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((9 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((14 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((15 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((13 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((15 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((13 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((14 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((13 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((14 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((15 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((14 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((13 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((12 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((13 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((12 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((14 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((12 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((14 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((13 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((16 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((17 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((15 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((17 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((15 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((16 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((15 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((16 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((17 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((16 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((15 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((14 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((15 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((14 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((16 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((14 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((16 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((15 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((18 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((19 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((17 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((19 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((17 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((18 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((17 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((18 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((19 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((18 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((17 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((16 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((17 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((16 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((18 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((16 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((18 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((17 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((20 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((21 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((19 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((21 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((19 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((20 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((19 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((20 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((21 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((20 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((19 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((18 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((19 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((18 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((20 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((18 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((20 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((19 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((22 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((23 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((21 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((23 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((21 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((22 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((21 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((22 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((23 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((22 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((21 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((20 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((21 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((20 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((22 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((20 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((22 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((21 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((24 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((25 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((23 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((25 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((23 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((24 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((23 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((24 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((25 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((24 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((23 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((22 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((23 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((22 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((24 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((22 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((24 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((23 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((3 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((2 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((25 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((25 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((3 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((25 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((3 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((2 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((25 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((24 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((25 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((24 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((24 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((25 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    gDorfShockGlowDL =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int -
                                              14 as libc::c_int -
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((2 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 14 as libc::c_int)
                                        as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            11 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    (0xffff as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               16 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                        (0xffff as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ovl_Boss_GanonTex_01DE88.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((32 as libc::c_int *
                                                   64 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (32 as libc::c_int *
                                                   64 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       32 as libc::c_int *
                                                           1 as libc::c_int /
                                                           8 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (32 as libc::c_int *
                                                         1 as libc::c_int) /
                                                        8 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      32 as libc::c_int *
                                                          1 as libc::c_int /
                                                          8 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (32 as libc::c_int *
                                                        1 as libc::c_int) /
                                                       8 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((32 as libc::c_int * 1 as libc::c_int
                                              + 7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((64 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ovl_Boss_GanonTex_01E688.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0x100 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (15 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((32 as libc::c_int *
                                                   64 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (32 as libc::c_int *
                                                   64 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       32 as libc::c_int *
                                                           1 as libc::c_int /
                                                           8 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (32 as libc::c_int *
                                                         1 as libc::c_int) /
                                                        8 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      32 as libc::c_int *
                                                          1 as libc::c_int /
                                                          8 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (32 as libc::c_int *
                                                        1 as libc::c_int) /
                                                       8 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((32 as libc::c_int * 1 as libc::c_int
                                              + 7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0x100 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (15 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((64 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfc as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((2 as libc::c_int as u32_0 &
                                               (((0x1 as libc::c_int) <<
                                                     4 as libc::c_int) -
                                                    1 as libc::c_int) as
                                                   libc::c_uint) <<
                                              20 as libc::c_int |
                                              (12 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         5 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  15 as libc::c_int |
                                              (2 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  12 as libc::c_int |
                                              (5 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  9 as libc::c_int |
                                              ((3 as libc::c_int as u32_0 &
                                                    (((0x1 as libc::c_int) <<
                                                          4 as libc::c_int) -
                                                         1 as libc::c_int) as
                                                        libc::c_uint) <<
                                                   5 as libc::c_int |
                                                   (0 as libc::c_int as u32_0
                                                        &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              5 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 0 as libc::c_int)) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               4 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        28 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            15 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        ((5 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    4 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             24 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 21 as libc::c_int |
                                             (3 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 18 as libc::c_int |
                                             (5 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 6 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 3 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 0 as libc::c_int),};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int - 3 as libc::c_int
                                              - 29 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((29 as libc::c_int -
                                              1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 30 as libc::c_int |
                                         (3 as libc::c_int) <<
                                             26 as libc::c_int |
                                         (0 as libc::c_int) <<
                                             22 as libc::c_int |
                                         (2 as libc::c_int) <<
                                             18 as libc::c_int |
                                         (0x8 as libc::c_int |
                                              0x10 as libc::c_int |
                                              0x40 as libc::c_int |
                                              0x100 as libc::c_int |
                                              0x80 as libc::c_int |
                                              0x4000 as libc::c_int |
                                              0x800 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  28 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  24 as libc::c_int |
                                              (1 as libc::c_int) <<
                                                  20 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  16 as libc::c_int)) as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!((0x10000 as libc::c_int |
                                                0x20000 as libc::c_int |
                                                0x40000 as libc::c_int |
                                                0x80000 as libc::c_int) as
                                               u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1: 0 as libc::c_int as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!(0 as libc::c_int as u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1: 0x400 as libc::c_int as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xde as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    0x8000000 as libc::c_int as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int + 4 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    ovl_Boss_GanonVtx_01EE88.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((1 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((2 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    gDorfLightStreak1DL =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xda as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((::std::mem::size_of::<Mtx>() as
                                              libc::c_ulong).wrapping_sub(1 as
                                                                              libc::c_int
                                                                              as
                                                                              libc::c_uint).wrapping_div(8
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             libc::c_uint)
                                             &
                                             (((0x1 as libc::c_int) <<
                                                   5 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((0 as libc::c_int / 8 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (((0 as libc::c_int |
                                               0x2 as libc::c_int |
                                               0 as libc::c_int) ^
                                              0x1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    0xd000280 as libc::c_int as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int + 4 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    ovl_Boss_GanonVtx_01F590.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xda as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((::std::mem::size_of::<Mtx>() as
                                              libc::c_ulong).wrapping_sub(1 as
                                                                              libc::c_int
                                                                              as
                                                                              libc::c_uint).wrapping_div(8
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             libc::c_uint)
                                             &
                                             (((0x1 as libc::c_int) <<
                                                   5 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((0 as libc::c_int / 8 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (((0 as libc::c_int |
                                               0x2 as libc::c_int |
                                               0 as libc::c_int) ^
                                              0x1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    0xd0002c0 as libc::c_int as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((4 as libc::c_int + 6 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    &mut *ovl_Boss_GanonVtx_01F590.as_mut_ptr().offset(4
                                                                                           as
                                                                                           libc::c_int
                                                                                           as
                                                                                           isize)
                                        as *mut Vtx as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((1 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((4 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((5 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((4 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((5 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((5 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((1 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((4 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((1 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((6 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((6 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((1 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((1 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((6 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((2 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((7 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((3 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((7 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((3 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((2 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((3 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((7 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((8 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((9 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((8 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((9 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((9 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((8 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    gDorfLightStreak2DL =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xda as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((::std::mem::size_of::<Mtx>() as
                                              libc::c_ulong).wrapping_sub(1 as
                                                                              libc::c_int
                                                                              as
                                                                              libc::c_uint).wrapping_div(8
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             libc::c_uint)
                                             &
                                             (((0x1 as libc::c_int) <<
                                                   5 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((0 as libc::c_int / 8 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (((0 as libc::c_int |
                                               0x2 as libc::c_int |
                                               0 as libc::c_int) ^
                                              0x1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    0xd000240 as libc::c_int as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int + 4 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    &mut *ovl_Boss_GanonVtx_01F590.as_mut_ptr().offset(10
                                                                                           as
                                                                                           libc::c_int
                                                                                           as
                                                                                           isize)
                                        as *mut Vtx as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xda as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((::std::mem::size_of::<Mtx>() as
                                              libc::c_ulong).wrapping_sub(1 as
                                                                              libc::c_int
                                                                              as
                                                                              libc::c_uint).wrapping_div(8
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             libc::c_uint)
                                             &
                                             (((0x1 as libc::c_int) <<
                                                   5 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((0 as libc::c_int / 8 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (((0 as libc::c_int |
                                               0x2 as libc::c_int |
                                               0 as libc::c_int) ^
                                              0x1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    0xd000280 as libc::c_int as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((4 as libc::c_int + 6 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    &mut *ovl_Boss_GanonVtx_01F590.as_mut_ptr().offset(14
                                                                                           as
                                                                                           libc::c_int
                                                                                           as
                                                                                           isize)
                                        as *mut Vtx as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((1 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((4 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((0 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((4 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((0 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((1 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((4 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((1 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((5 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((6 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((5 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((6 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((1 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((6 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((1 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((5 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((2 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((7 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((8 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((7 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((8 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((2 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((8 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((7 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((9 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((9 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((9 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    gDorfLightStreak3DL =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xda as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((::std::mem::size_of::<Mtx>() as
                                              libc::c_ulong).wrapping_sub(1 as
                                                                              libc::c_int
                                                                              as
                                                                              libc::c_uint).wrapping_div(8
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             libc::c_uint)
                                             &
                                             (((0x1 as libc::c_int) <<
                                                   5 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((0 as libc::c_int / 8 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (((0 as libc::c_int |
                                               0x2 as libc::c_int |
                                               0 as libc::c_int) ^
                                              0x1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    0xd000200 as libc::c_int as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int + 4 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    &mut *ovl_Boss_GanonVtx_01F590.as_mut_ptr().offset(20
                                                                                           as
                                                                                           libc::c_int
                                                                                           as
                                                                                           isize)
                                        as *mut Vtx as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xda as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((::std::mem::size_of::<Mtx>() as
                                              libc::c_ulong).wrapping_sub(1 as
                                                                              libc::c_int
                                                                              as
                                                                              libc::c_uint).wrapping_div(8
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             libc::c_uint)
                                             &
                                             (((0x1 as libc::c_int) <<
                                                   5 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((0 as libc::c_int / 8 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (((0 as libc::c_int |
                                               0x2 as libc::c_int |
                                               0 as libc::c_int) ^
                                              0x1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    0xd000240 as libc::c_int as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((4 as libc::c_int + 6 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    &mut *ovl_Boss_GanonVtx_01F590.as_mut_ptr().offset(24
                                                                                           as
                                                                                           libc::c_int
                                                                                           as
                                                                                           isize)
                                        as *mut Vtx as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((1 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((4 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((0 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((4 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((0 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((1 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((4 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((1 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((5 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((6 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((5 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((6 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((1 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((6 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((1 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((5 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((2 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((7 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((8 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((7 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((8 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((2 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((8 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((7 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((9 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((9 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((9 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    gDorfLightStreak4DL =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xda as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((::std::mem::size_of::<Mtx>() as
                                              libc::c_ulong).wrapping_sub(1 as
                                                                              libc::c_int
                                                                              as
                                                                              libc::c_uint).wrapping_div(8
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             libc::c_uint)
                                             &
                                             (((0x1 as libc::c_int) <<
                                                   5 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((0 as libc::c_int / 8 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (((0 as libc::c_int |
                                               0x2 as libc::c_int |
                                               0 as libc::c_int) ^
                                              0x1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    0xd0001c0 as libc::c_int as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int + 4 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    &mut *ovl_Boss_GanonVtx_01F590.as_mut_ptr().offset(30
                                                                                           as
                                                                                           libc::c_int
                                                                                           as
                                                                                           isize)
                                        as *mut Vtx as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xda as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((::std::mem::size_of::<Mtx>() as
                                              libc::c_ulong).wrapping_sub(1 as
                                                                              libc::c_int
                                                                              as
                                                                              libc::c_uint).wrapping_div(8
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             libc::c_uint)
                                             &
                                             (((0x1 as libc::c_int) <<
                                                   5 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((0 as libc::c_int / 8 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (((0 as libc::c_int |
                                               0x2 as libc::c_int |
                                               0 as libc::c_int) ^
                                              0x1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    0xd000200 as libc::c_int as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((4 as libc::c_int + 6 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    &mut *ovl_Boss_GanonVtx_01F590.as_mut_ptr().offset(34
                                                                                           as
                                                                                           libc::c_int
                                                                                           as
                                                                                           isize)
                                        as *mut Vtx as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((1 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((4 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((0 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((4 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((0 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((1 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((4 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((1 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((5 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((6 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((5 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((6 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((1 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((6 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((1 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((5 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((2 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((7 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((8 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((7 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((8 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((2 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((8 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((7 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((9 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((9 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((9 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    gDorfLightStreak5DL =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xda as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((::std::mem::size_of::<Mtx>() as
                                              libc::c_ulong).wrapping_sub(1 as
                                                                              libc::c_int
                                                                              as
                                                                              libc::c_uint).wrapping_div(8
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             libc::c_uint)
                                             &
                                             (((0x1 as libc::c_int) <<
                                                   5 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((0 as libc::c_int / 8 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (((0 as libc::c_int |
                                               0x2 as libc::c_int |
                                               0 as libc::c_int) ^
                                              0x1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    0xd000180 as libc::c_int as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int + 4 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    &mut *ovl_Boss_GanonVtx_01F590.as_mut_ptr().offset(40
                                                                                           as
                                                                                           libc::c_int
                                                                                           as
                                                                                           isize)
                                        as *mut Vtx as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xda as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((::std::mem::size_of::<Mtx>() as
                                              libc::c_ulong).wrapping_sub(1 as
                                                                              libc::c_int
                                                                              as
                                                                              libc::c_uint).wrapping_div(8
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             libc::c_uint)
                                             &
                                             (((0x1 as libc::c_int) <<
                                                   5 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((0 as libc::c_int / 8 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (((0 as libc::c_int |
                                               0x2 as libc::c_int |
                                               0 as libc::c_int) ^
                                              0x1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    0xd0001c0 as libc::c_int as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((4 as libc::c_int + 6 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    &mut *ovl_Boss_GanonVtx_01F590.as_mut_ptr().offset(44
                                                                                           as
                                                                                           libc::c_int
                                                                                           as
                                                                                           isize)
                                        as *mut Vtx as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((1 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((4 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((0 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((4 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((0 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((1 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((4 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((1 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((5 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((6 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((5 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((6 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((1 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((6 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((1 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((5 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((2 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((7 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((8 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((7 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((8 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((2 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((8 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((7 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((9 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((9 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((9 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    gDorfLightStreak6DL =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xda as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((::std::mem::size_of::<Mtx>() as
                                              libc::c_ulong).wrapping_sub(1 as
                                                                              libc::c_int
                                                                              as
                                                                              libc::c_uint).wrapping_div(8
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             libc::c_uint)
                                             &
                                             (((0x1 as libc::c_int) <<
                                                   5 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((0 as libc::c_int / 8 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (((0 as libc::c_int |
                                               0x2 as libc::c_int |
                                               0 as libc::c_int) ^
                                              0x1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    0xd000140 as libc::c_int as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int + 4 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    &mut *ovl_Boss_GanonVtx_01F590.as_mut_ptr().offset(50
                                                                                           as
                                                                                           libc::c_int
                                                                                           as
                                                                                           isize)
                                        as *mut Vtx as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xda as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((::std::mem::size_of::<Mtx>() as
                                              libc::c_ulong).wrapping_sub(1 as
                                                                              libc::c_int
                                                                              as
                                                                              libc::c_uint).wrapping_div(8
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             libc::c_uint)
                                             &
                                             (((0x1 as libc::c_int) <<
                                                   5 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((0 as libc::c_int / 8 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (((0 as libc::c_int |
                                               0x2 as libc::c_int |
                                               0 as libc::c_int) ^
                                              0x1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    0xd000180 as libc::c_int as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((4 as libc::c_int + 6 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    &mut *ovl_Boss_GanonVtx_01F590.as_mut_ptr().offset(54
                                                                                           as
                                                                                           libc::c_int
                                                                                           as
                                                                                           isize)
                                        as *mut Vtx as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((1 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((4 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((0 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((4 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((0 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((1 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((4 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((1 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((5 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((6 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((5 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((6 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((1 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((6 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((1 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((5 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((2 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((7 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((8 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((7 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((8 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((2 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((8 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((7 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((9 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((9 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((9 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    gDorfLightStreak7DL =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xda as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((::std::mem::size_of::<Mtx>() as
                                              libc::c_ulong).wrapping_sub(1 as
                                                                              libc::c_int
                                                                              as
                                                                              libc::c_uint).wrapping_div(8
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             libc::c_uint)
                                             &
                                             (((0x1 as libc::c_int) <<
                                                   5 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((0 as libc::c_int / 8 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (((0 as libc::c_int |
                                               0x2 as libc::c_int |
                                               0 as libc::c_int) ^
                                              0x1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    0xd000100 as libc::c_int as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int + 4 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    &mut *ovl_Boss_GanonVtx_01F590.as_mut_ptr().offset(60
                                                                                           as
                                                                                           libc::c_int
                                                                                           as
                                                                                           isize)
                                        as *mut Vtx as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xda as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((::std::mem::size_of::<Mtx>() as
                                              libc::c_ulong).wrapping_sub(1 as
                                                                              libc::c_int
                                                                              as
                                                                              libc::c_uint).wrapping_div(8
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             libc::c_uint)
                                             &
                                             (((0x1 as libc::c_int) <<
                                                   5 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((0 as libc::c_int / 8 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (((0 as libc::c_int |
                                               0x2 as libc::c_int |
                                               0 as libc::c_int) ^
                                              0x1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    0xd000140 as libc::c_int as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((4 as libc::c_int + 6 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    &mut *ovl_Boss_GanonVtx_01F590.as_mut_ptr().offset(64
                                                                                           as
                                                                                           libc::c_int
                                                                                           as
                                                                                           isize)
                                        as *mut Vtx as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((4 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((1 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((4 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((1 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((4 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((5 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((6 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((5 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((6 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((6 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((5 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((3 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((7 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((8 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((7 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((8 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((3 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((8 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((3 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((7 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((9 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((9 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((9 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    gDorfWindowShardMaterialDL =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int -
                                              14 as libc::c_int -
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((2 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((2 as libc::c_int) << 14 as libc::c_int)
                                        as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            11 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    (0xffff as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               16 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                        (0xffff as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ovl_Boss_GanonTex_00F848.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((32 as libc::c_int *
                                                   32 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (32 as libc::c_int *
                                                   32 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       32 as libc::c_int *
                                                           1 as libc::c_int /
                                                           8 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (32 as libc::c_int *
                                                         1 as libc::c_int) /
                                                        8 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      32 as libc::c_int *
                                                          1 as libc::c_int /
                                                          8 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (32 as libc::c_int *
                                                        1 as libc::c_int) /
                                                       8 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((32 as libc::c_int * 1 as libc::c_int
                                              + 7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ovl_Boss_GanonTLUT_00F808.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe8 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (256 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (255 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   10 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfc as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((1 as libc::c_int as u32_0 &
                                               (((0x1 as libc::c_int) <<
                                                     4 as libc::c_int) -
                                                    1 as libc::c_int) as
                                                   libc::c_uint) <<
                                              20 as libc::c_int |
                                              (4 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         5 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  15 as libc::c_int |
                                              (1 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  12 as libc::c_int |
                                              (3 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  9 as libc::c_int |
                                              ((0 as libc::c_int as u32_0 &
                                                    (((0x1 as libc::c_int) <<
                                                          4 as libc::c_int) -
                                                         1 as libc::c_int) as
                                                        libc::c_uint) <<
                                                   5 as libc::c_int |
                                                   (3 as libc::c_int as u32_0
                                                        &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              5 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 0 as libc::c_int)) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (31 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               4 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        28 as libc::c_int |
                                        (31 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            15 as libc::c_int |
                                        (7 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (7 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        ((31 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    4 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             24 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 21 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 18 as libc::c_int |
                                             (31 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 6 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 3 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 0 as libc::c_int),};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int - 3 as libc::c_int
                                              - 29 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((29 as libc::c_int -
                                              1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((3 as libc::c_int) << 30 as libc::c_int |
                                         (2 as libc::c_int) <<
                                             26 as libc::c_int |
                                         (0 as libc::c_int) <<
                                             22 as libc::c_int |
                                         (0 as libc::c_int) <<
                                             18 as libc::c_int |
                                         (0x8 as libc::c_int |
                                              0x10 as libc::c_int |
                                              0x20 as libc::c_int |
                                              0x40 as libc::c_int |
                                              0 as libc::c_int |
                                              0x1000 as libc::c_int |
                                              0x2000 as libc::c_int |
                                              0 as libc::c_int |
                                              0 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  28 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  24 as libc::c_int |
                                              (1 as libc::c_int) <<
                                                  20 as libc::c_int |
                                              (1 as libc::c_int) <<
                                                  16 as libc::c_int)) as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!((0x400 as libc::c_int |
                                                0x20000 as libc::c_int |
                                                0x40000 as libc::c_int |
                                                0x80000 as libc::c_int) as
                                               u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1: 0 as libc::c_int as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!(0 as libc::c_int as u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1: 0x10000 as libc::c_int as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    gDorfTriforceDL =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int -
                                              14 as libc::c_int -
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((2 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 14 as libc::c_int)
                                        as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            11 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    (0xffff as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               16 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                        (0xffff as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ovl_Boss_GanonTex_00E748.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((64 as libc::c_int *
                                                   64 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (64 as libc::c_int *
                                                   64 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       64 as libc::c_int *
                                                           1 as libc::c_int /
                                                           8 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (64 as libc::c_int *
                                                         1 as libc::c_int) /
                                                        8 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      64 as libc::c_int *
                                                          1 as libc::c_int /
                                                          8 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (64 as libc::c_int *
                                                        1 as libc::c_int) /
                                                       8 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((64 as libc::c_int * 1 as libc::c_int
                                              + 7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((64 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((64 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfc as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((1 as libc::c_int as u32_0 &
                                               (((0x1 as libc::c_int) <<
                                                     4 as libc::c_int) -
                                                    1 as libc::c_int) as
                                                   libc::c_uint) <<
                                              20 as libc::c_int |
                                              (12 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         5 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  15 as libc::c_int |
                                              (7 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  12 as libc::c_int |
                                              (7 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  9 as libc::c_int |
                                              ((3 as libc::c_int as u32_0 &
                                                    (((0x1 as libc::c_int) <<
                                                          4 as libc::c_int) -
                                                         1 as libc::c_int) as
                                                        libc::c_uint) <<
                                                   5 as libc::c_int |
                                                   (0 as libc::c_int as u32_0
                                                        &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              5 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 0 as libc::c_int)) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               4 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        28 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            15 as libc::c_int |
                                        (7 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        ((5 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    4 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             24 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 21 as libc::c_int |
                                             (3 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 18 as libc::c_int |
                                             (5 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 6 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 3 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 0 as libc::c_int),};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int - 3 as libc::c_int
                                              - 29 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((29 as libc::c_int -
                                              1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 30 as libc::c_int |
                                         (3 as libc::c_int) <<
                                             26 as libc::c_int |
                                         (0 as libc::c_int) <<
                                             22 as libc::c_int |
                                         (2 as libc::c_int) <<
                                             18 as libc::c_int |
                                         (0x8 as libc::c_int |
                                              0x10 as libc::c_int |
                                              0x40 as libc::c_int |
                                              0x100 as libc::c_int |
                                              0x80 as libc::c_int |
                                              0x4000 as libc::c_int |
                                              0x800 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  28 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  24 as libc::c_int |
                                              (1 as libc::c_int) <<
                                                  20 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  16 as libc::c_int)) as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!((0x400 as libc::c_int |
                                                0x10000 as libc::c_int |
                                                0x20000 as libc::c_int |
                                                0x40000 as libc::c_int |
                                                0x80000 as libc::c_int) as
                                               u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1: 0 as libc::c_int as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int + 4 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    ovl_Boss_GanonVtx_00F748.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((1 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((2 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    gDorfShadowModelDL =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfc as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((3 as libc::c_int as u32_0 &
                                               (((0x1 as libc::c_int) <<
                                                     4 as libc::c_int) -
                                                    1 as libc::c_int) as
                                                   libc::c_uint) <<
                                              20 as libc::c_int |
                                              (1 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         5 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  15 as libc::c_int |
                                              (1 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  12 as libc::c_int |
                                              (3 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  9 as libc::c_int |
                                              ((31 as libc::c_int as u32_0 &
                                                    (((0x1 as libc::c_int) <<
                                                          4 as libc::c_int) -
                                                         1 as libc::c_int) as
                                                        libc::c_uint) <<
                                                   5 as libc::c_int |
                                                   (31 as libc::c_int as u32_0
                                                        &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              5 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 0 as libc::c_int)) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               4 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        28 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            15 as libc::c_int |
                                        (7 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (7 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        ((31 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    4 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             24 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 21 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 18 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 6 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 3 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 0 as libc::c_int),};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int - 3 as libc::c_int
                                              - 29 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((29 as libc::c_int -
                                              1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 30 as libc::c_int |
                                         (3 as libc::c_int) <<
                                             26 as libc::c_int |
                                         (0 as libc::c_int) <<
                                             22 as libc::c_int |
                                         (2 as libc::c_int) <<
                                             18 as libc::c_int |
                                         (0x10 as libc::c_int |
                                              0x40 as libc::c_int |
                                              0x300 as libc::c_int |
                                              0x4000 as libc::c_int |
                                              0xc00 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  28 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  24 as libc::c_int |
                                              (1 as libc::c_int) <<
                                                  20 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  16 as libc::c_int)) as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!((0x400 as libc::c_int |
                                                0x10000 as libc::c_int |
                                                0x20000 as libc::c_int |
                                                0x40000 as libc::c_int |
                                                0x80000 as libc::c_int) as
                                               u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1: 0 as libc::c_int as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int + 4 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    ovl_Boss_GanonVtx_00E6B8.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((1 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((2 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    gDorfLightStreak8DL =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xda as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((::std::mem::size_of::<Mtx>() as
                                              libc::c_ulong).wrapping_sub(1 as
                                                                              libc::c_int
                                                                              as
                                                                              libc::c_uint).wrapping_div(8
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             libc::c_uint)
                                             &
                                             (((0x1 as libc::c_int) <<
                                                   5 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((0 as libc::c_int / 8 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (((0 as libc::c_int |
                                               0x2 as libc::c_int |
                                               0 as libc::c_int) ^
                                              0x1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    0xd0000c0 as libc::c_int as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int + 4 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    &mut *ovl_Boss_GanonVtx_01F590.as_mut_ptr().offset(70
                                                                                           as
                                                                                           libc::c_int
                                                                                           as
                                                                                           isize)
                                        as *mut Vtx as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xda as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((::std::mem::size_of::<Mtx>() as
                                              libc::c_ulong).wrapping_sub(1 as
                                                                              libc::c_int
                                                                              as
                                                                              libc::c_uint).wrapping_div(8
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             libc::c_uint)
                                             &
                                             (((0x1 as libc::c_int) <<
                                                   5 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((0 as libc::c_int / 8 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (((0 as libc::c_int |
                                               0x2 as libc::c_int |
                                               0 as libc::c_int) ^
                                              0x1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    0xd000100 as libc::c_int as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((4 as libc::c_int + 6 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    &mut *ovl_Boss_GanonVtx_01F590.as_mut_ptr().offset(74
                                                                                           as
                                                                                           libc::c_int
                                                                                           as
                                                                                           isize)
                                        as *mut Vtx as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((1 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((4 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((5 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((4 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((5 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((5 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((1 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((4 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((1 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((6 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((6 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((1 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((1 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((6 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((2 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((7 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((3 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((7 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((3 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((2 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((3 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((7 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((8 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((9 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((8 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((9 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((9 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((8 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    gDorfLightStreak9DL =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xda as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((::std::mem::size_of::<Mtx>() as
                                              libc::c_ulong).wrapping_sub(1 as
                                                                              libc::c_int
                                                                              as
                                                                              libc::c_uint).wrapping_div(8
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             libc::c_uint)
                                             &
                                             (((0x1 as libc::c_int) <<
                                                   5 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((0 as libc::c_int / 8 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (((0 as libc::c_int |
                                               0x2 as libc::c_int |
                                               0 as libc::c_int) ^
                                              0x1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    0xd000080 as libc::c_int as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int + 4 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    &mut *ovl_Boss_GanonVtx_01F590.as_mut_ptr().offset(80
                                                                                           as
                                                                                           libc::c_int
                                                                                           as
                                                                                           isize)
                                        as *mut Vtx as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xda as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((::std::mem::size_of::<Mtx>() as
                                              libc::c_ulong).wrapping_sub(1 as
                                                                              libc::c_int
                                                                              as
                                                                              libc::c_uint).wrapping_div(8
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             libc::c_uint)
                                             &
                                             (((0x1 as libc::c_int) <<
                                                   5 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((0 as libc::c_int / 8 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (((0 as libc::c_int |
                                               0x2 as libc::c_int |
                                               0 as libc::c_int) ^
                                              0x1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    0xd0000c0 as libc::c_int as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((4 as libc::c_int + 6 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    &mut *ovl_Boss_GanonVtx_01F590.as_mut_ptr().offset(84
                                                                                           as
                                                                                           libc::c_int
                                                                                           as
                                                                                           isize)
                                        as *mut Vtx as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((4 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((1 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((4 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((1 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((4 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((5 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((6 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((5 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((6 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((6 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((5 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((3 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((7 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((8 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((7 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((8 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((3 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((8 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((3 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((7 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((9 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((9 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((9 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    gDorfLightStreak11DL =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xda as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((::std::mem::size_of::<Mtx>() as
                                              libc::c_ulong).wrapping_sub(1 as
                                                                              libc::c_int
                                                                              as
                                                                              libc::c_uint).wrapping_div(8
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             libc::c_uint)
                                             &
                                             (((0x1 as libc::c_int) <<
                                                   5 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((0 as libc::c_int / 8 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (((0 as libc::c_int |
                                               0x2 as libc::c_int |
                                               0 as libc::c_int) ^
                                              0x1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    0xd000000 as libc::c_int as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int + 4 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    &mut *ovl_Boss_GanonVtx_01F590.as_mut_ptr().offset(100
                                                                                           as
                                                                                           libc::c_int
                                                                                           as
                                                                                           isize)
                                        as *mut Vtx as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xda as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((::std::mem::size_of::<Mtx>() as
                                              libc::c_ulong).wrapping_sub(1 as
                                                                              libc::c_int
                                                                              as
                                                                              libc::c_uint).wrapping_div(8
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             libc::c_uint)
                                             &
                                             (((0x1 as libc::c_int) <<
                                                   5 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((0 as libc::c_int / 8 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (((0 as libc::c_int |
                                               0x2 as libc::c_int |
                                               0 as libc::c_int) ^
                                              0x1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    0xd000040 as libc::c_int as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((4 as libc::c_int + 6 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    &mut *ovl_Boss_GanonVtx_01F590.as_mut_ptr().offset(104
                                                                                           as
                                                                                           libc::c_int
                                                                                           as
                                                                                           isize)
                                        as *mut Vtx as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((4 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((5 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((4 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((5 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((5 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((4 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((6 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((1 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((6 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((1 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((1 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((6 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((2 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((7 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((3 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((7 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((3 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((2 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((3 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((7 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((8 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((9 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((8 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((9 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((9 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((8 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    gDorfLightStreak12DL =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            11 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    (0xffff as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               16 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                        (0xffff as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int - 3 as libc::c_int
                                              - 29 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((29 as libc::c_int -
                                              1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 30 as libc::c_int |
                                         (3 as libc::c_int) <<
                                             26 as libc::c_int |
                                         (0 as libc::c_int) <<
                                             22 as libc::c_int |
                                         (2 as libc::c_int) <<
                                             18 as libc::c_int |
                                         (0x8 as libc::c_int |
                                              0x10 as libc::c_int |
                                              0x40 as libc::c_int |
                                              0x100 as libc::c_int |
                                              0x80 as libc::c_int |
                                              0x4000 as libc::c_int |
                                              0x800 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  28 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  24 as libc::c_int |
                                              (1 as libc::c_int) <<
                                                  20 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  16 as libc::c_int)) as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfc as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((3 as libc::c_int as u32_0 &
                                               (((0x1 as libc::c_int) <<
                                                     4 as libc::c_int) -
                                                    1 as libc::c_int) as
                                                   libc::c_uint) <<
                                              20 as libc::c_int |
                                              (1 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         5 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  15 as libc::c_int |
                                              (1 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  12 as libc::c_int |
                                              (3 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  9 as libc::c_int |
                                              ((31 as libc::c_int as u32_0 &
                                                    (((0x1 as libc::c_int) <<
                                                          4 as libc::c_int) -
                                                         1 as libc::c_int) as
                                                        libc::c_uint) <<
                                                   5 as libc::c_int |
                                                   (31 as libc::c_int as u32_0
                                                        &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              5 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 0 as libc::c_int)) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               4 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        28 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            15 as libc::c_int |
                                        (7 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (7 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        ((31 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    4 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             24 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 21 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 18 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 6 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 3 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 0 as libc::c_int),};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int -
                                              14 as libc::c_int -
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((2 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 14 as libc::c_int)
                                        as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ovl_Boss_GanonTex_01EF90.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (7 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((96 as libc::c_int *
                                                   16 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (96 as libc::c_int *
                                                   16 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       96 as libc::c_int *
                                                           1 as libc::c_int /
                                                           8 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (96 as libc::c_int *
                                                         1 as libc::c_int) /
                                                        8 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      96 as libc::c_int *
                                                          1 as libc::c_int /
                                                          8 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (96 as libc::c_int *
                                                        1 as libc::c_int) /
                                                       8 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((96 as libc::c_int * 1 as libc::c_int
                                              + 7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (7 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((96 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((16 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0x17c as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0x3c as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!((0x10000 as libc::c_int |
                                                0x20000 as libc::c_int) as
                                               u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1: 0 as libc::c_int as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!(0x400 as libc::c_int as u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1: 0 as libc::c_int as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!((0x40000 as libc::c_int |
                                                0x80000 as libc::c_int) as
                                               u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1: 0 as libc::c_int as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (8 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int + 8 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    &mut *ovl_Boss_GanonVtx_01F590.as_mut_ptr().offset(110
                                                                                           as
                                                                                           libc::c_int
                                                                                           as
                                                                                           isize)
                                        as *mut Vtx as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((1 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((2 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((4 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((5 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((6 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((5 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((6 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((4 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((6 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((4 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((5 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((4 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((6 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((7 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((6 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((7 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((4 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((7 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((4 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((6 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    gDorfLightCoreDL =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int -
                                              14 as libc::c_int -
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((2 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 14 as libc::c_int)
                                        as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            11 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    (0xffff as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               16 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                        (0xffff as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ovl_Boss_GanonTex_01FFF8.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((32 as libc::c_int *
                                                   32 as libc::c_int +
                                                   3 as libc::c_int >>
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (32 as libc::c_int *
                                                   32 as libc::c_int +
                                                   3 as libc::c_int >>
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       32 as libc::c_int /
                                                           16 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (32 as libc::c_int) /
                                                        16 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      32 as libc::c_int /
                                                          16 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (32 as libc::c_int) /
                                                       16 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (((32 as libc::c_int >>
                                               1 as libc::c_int) +
                                              7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfc as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((1 as libc::c_int as u32_0 &
                                               (((0x1 as libc::c_int) <<
                                                     4 as libc::c_int) -
                                                    1 as libc::c_int) as
                                                   libc::c_uint) <<
                                              20 as libc::c_int |
                                              (3 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         5 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  15 as libc::c_int |
                                              (1 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  12 as libc::c_int |
                                              (3 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  9 as libc::c_int |
                                              ((31 as libc::c_int as u32_0 &
                                                    (((0x1 as libc::c_int) <<
                                                          4 as libc::c_int) -
                                                         1 as libc::c_int) as
                                                        libc::c_uint) <<
                                                   5 as libc::c_int |
                                                   (31 as libc::c_int as u32_0
                                                        &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              5 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 0 as libc::c_int)) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (31 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               4 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        28 as libc::c_int |
                                        (31 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            15 as libc::c_int |
                                        (7 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (7 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        ((31 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    4 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             24 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 21 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 18 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 6 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 3 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 0 as libc::c_int),};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int - 3 as libc::c_int
                                              - 29 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((29 as libc::c_int -
                                              1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 30 as libc::c_int |
                                         (3 as libc::c_int) <<
                                             26 as libc::c_int |
                                         (0 as libc::c_int) <<
                                             22 as libc::c_int |
                                         (2 as libc::c_int) <<
                                             18 as libc::c_int |
                                         (0x10 as libc::c_int |
                                              0x40 as libc::c_int |
                                              0x300 as libc::c_int |
                                              0x4000 as libc::c_int |
                                              0xc00 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  28 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  24 as libc::c_int |
                                              (1 as libc::c_int) <<
                                                  20 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  16 as libc::c_int)) as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!((0x10000 as libc::c_int |
                                                0x20000 as libc::c_int |
                                                0x40000 as libc::c_int |
                                                0x80000 as libc::c_int) as
                                               u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1: 0 as libc::c_int as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!(0 as libc::c_int as u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1: 0x400 as libc::c_int as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (3 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int + 3 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    ovl_Boss_GanonVtx_0201F8.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((1 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((2 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    gDorfShockDL =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int -
                                              14 as libc::c_int -
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((2 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 14 as libc::c_int)
                                        as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            11 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    (0xffff as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               16 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                        (0xffff as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ovl_Boss_GanonTex_020370.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0x1 as libc::c_int |
                                              0 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0x1 as libc::c_int |
                                              0 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((32 as libc::c_int *
                                                   32 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (32 as libc::c_int *
                                                   32 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       32 as libc::c_int *
                                                           1 as libc::c_int /
                                                           8 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (32 as libc::c_int *
                                                         1 as libc::c_int) /
                                                        8 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      32 as libc::c_int *
                                                          1 as libc::c_int /
                                                          8 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (32 as libc::c_int *
                                                        1 as libc::c_int) /
                                                       8 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((32 as libc::c_int * 1 as libc::c_int
                                              + 7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0x1 as libc::c_int |
                                              0 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0x1 as libc::c_int |
                                              0 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfc as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((3 as libc::c_int as u32_0 &
                                               (((0x1 as libc::c_int) <<
                                                     4 as libc::c_int) -
                                                    1 as libc::c_int) as
                                                   libc::c_uint) <<
                                              20 as libc::c_int |
                                              (1 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         5 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  15 as libc::c_int |
                                              (1 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  12 as libc::c_int |
                                              (3 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  9 as libc::c_int |
                                              ((31 as libc::c_int as u32_0 &
                                                    (((0x1 as libc::c_int) <<
                                                          4 as libc::c_int) -
                                                         1 as libc::c_int) as
                                                        libc::c_uint) <<
                                                   5 as libc::c_int |
                                                   (31 as libc::c_int as u32_0
                                                        &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              5 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 0 as libc::c_int)) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               4 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        28 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            15 as libc::c_int |
                                        (7 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (7 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        ((31 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    4 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             24 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 21 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 18 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 6 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 3 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 0 as libc::c_int),};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int - 3 as libc::c_int
                                              - 29 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((29 as libc::c_int -
                                              1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 30 as libc::c_int |
                                         (3 as libc::c_int) <<
                                             26 as libc::c_int |
                                         (0 as libc::c_int) <<
                                             22 as libc::c_int |
                                         (2 as libc::c_int) <<
                                             18 as libc::c_int |
                                         (0x10 as libc::c_int |
                                              0x40 as libc::c_int |
                                              0x300 as libc::c_int |
                                              0x4000 as libc::c_int |
                                              0xc00 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  28 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  24 as libc::c_int |
                                              (1 as libc::c_int) <<
                                                  20 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  16 as libc::c_int)) as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!((0x400 as libc::c_int |
                                                0x10000 as libc::c_int |
                                                0x20000 as libc::c_int |
                                                0x40000 as libc::c_int |
                                                0x80000 as libc::c_int) as
                                               u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1: 0 as libc::c_int as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int + 4 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    ovl_Boss_GanonVtx_0202B0.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((1 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((2 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    gDorfVortexDL =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int -
                                              14 as libc::c_int -
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((2 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 14 as libc::c_int)
                                        as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            11 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    (0xffff as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               16 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                        (0xffff as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ovl_Boss_GanonTex_020770.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (15 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((32 as libc::c_int *
                                                   64 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (32 as libc::c_int *
                                                   64 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       32 as libc::c_int *
                                                           1 as libc::c_int /
                                                           8 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (32 as libc::c_int *
                                                         1 as libc::c_int) /
                                                        8 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      32 as libc::c_int *
                                                          1 as libc::c_int /
                                                          8 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (32 as libc::c_int *
                                                        1 as libc::c_int) /
                                                       8 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((32 as libc::c_int * 1 as libc::c_int
                                              + 7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (15 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((64 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    gEffUnknown12Tex.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0x100 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((32 as libc::c_int *
                                                   32 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (32 as libc::c_int *
                                                   32 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       32 as libc::c_int *
                                                           1 as libc::c_int /
                                                           8 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (32 as libc::c_int *
                                                         1 as libc::c_int) /
                                                        8 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      32 as libc::c_int *
                                                          1 as libc::c_int /
                                                          8 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (32 as libc::c_int *
                                                        1 as libc::c_int) /
                                                       8 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((32 as libc::c_int * 1 as libc::c_int
                                              + 7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0x100 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfc as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((2 as libc::c_int as u32_0 &
                                               (((0x1 as libc::c_int) <<
                                                     4 as libc::c_int) -
                                                    1 as libc::c_int) as
                                                   libc::c_uint) <<
                                              20 as libc::c_int |
                                              (12 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         5 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  15 as libc::c_int |
                                              (2 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  12 as libc::c_int |
                                              (5 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  9 as libc::c_int |
                                              ((3 as libc::c_int as u32_0 &
                                                    (((0x1 as libc::c_int) <<
                                                          4 as libc::c_int) -
                                                         1 as libc::c_int) as
                                                        libc::c_uint) <<
                                                   5 as libc::c_int |
                                                   (0 as libc::c_int as u32_0
                                                        &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              5 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 0 as libc::c_int)) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               4 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        28 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            15 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        ((5 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    4 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             24 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 21 as libc::c_int |
                                             (3 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 18 as libc::c_int |
                                             (5 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 6 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 3 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 0 as libc::c_int),};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int - 3 as libc::c_int
                                              - 29 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((29 as libc::c_int -
                                              1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 30 as libc::c_int |
                                         (3 as libc::c_int) <<
                                             26 as libc::c_int |
                                         (0 as libc::c_int) <<
                                             22 as libc::c_int |
                                         (2 as libc::c_int) <<
                                             18 as libc::c_int |
                                         (0x8 as libc::c_int |
                                              0x10 as libc::c_int |
                                              0x40 as libc::c_int |
                                              0x100 as libc::c_int |
                                              0x80 as libc::c_int |
                                              0x4000 as libc::c_int |
                                              0x800 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  28 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  24 as libc::c_int |
                                              (1 as libc::c_int) <<
                                                  20 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  16 as libc::c_int)) as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!((0x400 as libc::c_int |
                                                0x10000 as libc::c_int |
                                                0x20000 as libc::c_int |
                                                0x40000 as libc::c_int |
                                                0x80000 as libc::c_int) as
                                               u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1: 0 as libc::c_int as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xde as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    0x8000000 as libc::c_int as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (22 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int +
                                              22 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    ovl_Boss_GanonVtx_020F70.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((1 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((2 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((1 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((1 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((1 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((4 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((5 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((0 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((5 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((4 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((0 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((4 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((5 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((5 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((1 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((1 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((5 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((5 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((1 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((6 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((7 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((4 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((7 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((4 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((6 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((4 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((6 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((7 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((7 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((5 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((4 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((5 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((4 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((7 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((4 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((7 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((5 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((8 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((9 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((6 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((9 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((6 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((8 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((6 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((8 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((9 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((9 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((7 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((6 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((7 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((6 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((9 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((6 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((9 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((7 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((10 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((11 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((8 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((11 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((8 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((10 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((8 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((10 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((11 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((11 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((9 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((8 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((9 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((8 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((11 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((8 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((11 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((9 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((12 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((13 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((10 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((13 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((10 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((12 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((10 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((12 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((13 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((13 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((11 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((10 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((11 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((10 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((13 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((10 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((13 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((11 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((14 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((15 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((12 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((15 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((12 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((14 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((12 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((14 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((15 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((15 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((13 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((12 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((13 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((12 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((15 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((12 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((15 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((13 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((16 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((17 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((18 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((17 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((18 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((16 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((18 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((16 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((17 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((19 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((15 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((14 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((15 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((14 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((19 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((14 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((19 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((15 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((20 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((21 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((16 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((21 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((16 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((20 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((16 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((20 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((21 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((21 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((17 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((16 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((17 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((16 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((21 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((16 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((21 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((17 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((2 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((3 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((20 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((3 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((20 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((2 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((20 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((3 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((21 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((20 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((21 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((20 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((20 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((21 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}]
}
#[used]
#[cfg_attr(target_os = "linux", link_section = ".init_array")]
#[cfg_attr(target_os = "windows", link_section = ".CRT$XIB")]
#[cfg_attr(target_os = "macos", link_section = "__DATA,__mod_init_func")]
static INIT_ARRAY: [unsafe extern "C" fn(); 1] = [run_static_initializers];
