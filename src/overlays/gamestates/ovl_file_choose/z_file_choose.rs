#![allow(dead_code, mutable_transmutes, non_camel_case_types, non_snake_case,
         non_upper_case_globals, unused_assignments, unused_mut)]
#![register_tool(c2rust)]
#![feature(const_raw_ptr_to_usize_cast, register_tool)]
extern "C" {
    #[no_mangle]
    fn DmaMgr_SendRequest1(ram0: *mut libc::c_void, vrom: u32_0, size: u32_0,
                           file: *const libc::c_char, line: s32) -> s32;
    #[no_mangle]
    fn __assert(exp: *const libc::c_char, file: *const libc::c_char,
                line: s32);
    #[no_mangle]
    fn osSyncPrintf(fmt: *const libc::c_char, _: ...);
    #[no_mangle]
    fn MemCopy(dest: *mut libc::c_void, src: *mut libc::c_void, size: s32)
     -> *mut libc::c_void;
    #[no_mangle]
    fn Font_LoadOrderedFont(font: *mut Font);
    #[no_mangle]
    fn Environment_UpdateSkybox(skyboxId: u8_0,
                                envCtx: *mut EnvironmentContext,
                                skyboxCtx: *mut SkyboxContext);
    #[no_mangle]
    fn Math_CosS(angle: s16) -> f32_0;
    #[no_mangle]
    fn Math_SinS(angle: s16) -> f32_0;
    #[no_mangle]
    fn func_800944C4(gfxCtx: *mut GraphicsContext);
    #[no_mangle]
    fn func_800949A8(gfxCtx: *mut GraphicsContext);
    #[no_mangle]
    fn func_80095248(gfxCtx: *mut GraphicsContext, r: u8_0, g: u8_0, b: u8_0);
    #[no_mangle]
    fn Sram_OpenSave(sramCtx: *mut SramContext);
    #[no_mangle]
    fn Sram_VerifyAndLoadAllSaves(fileChoose: *mut FileChooseContext,
                                  sramCtx: *mut SramContext);
    #[no_mangle]
    fn Sram_Alloc(gameState: *mut GameState, sramCtx: *mut SramContext);
    #[no_mangle]
    fn SsSram_ReadWrite(addr: u32_0, dramAddr: *mut libc::c_void,
                        size: size_t, direction: s32);
    #[no_mangle]
    fn func_800AA000(_: f32_0, _: u8_0, _: u8_0, _: u8_0);
    #[no_mangle]
    fn View_Init(_: *mut View, _: *mut GraphicsContext);
    #[no_mangle]
    fn func_800AA358(view: *mut View, eye: *mut Vec3f, lookAt: *mut Vec3f,
                     up: *mut Vec3f);
    #[no_mangle]
    fn func_800AAA50(view: *mut View, arg1: s32);
    #[no_mangle]
    fn Skybox_Init(state: *mut GameState, skyboxCtx: *mut SkyboxContext,
                   skyboxId: s16);
    #[no_mangle]
    fn SkyboxDraw_Draw(skyboxCtx: *mut SkyboxContext,
                       gfxCtx: *mut GraphicsContext, skyboxId: s16,
                       blend: s16, x: f32_0, y: f32_0, z: f32_0);
    #[no_mangle]
    fn ShrinkWindow_SetVal(value: s32);
    #[no_mangle]
    fn Gameplay_Init(thisx: *mut GameState);
    #[no_mangle]
    fn GameState_Alloc(gameState: *mut GameState, size: size_t,
                       file: *mut libc::c_char, line: s32)
     -> *mut libc::c_void;
    #[no_mangle]
    fn Graph_Alloc(gfxCtx: *mut GraphicsContext, size: size_t)
     -> *mut libc::c_void;
    #[no_mangle]
    fn Graph_OpenDisps(dispRefs: *mut *mut Gfx, gfxCtx: *mut GraphicsContext,
                       file: *const libc::c_char, line: s32);
    #[no_mangle]
    fn Graph_CloseDisps(dispRefs: *mut *mut Gfx, gfxCtx: *mut GraphicsContext,
                        file: *const libc::c_char, line: s32);
    #[no_mangle]
    fn Matrix_Init(gameState: *mut GameState);
    #[no_mangle]
    fn Matrix_Translate(x: f32_0, y: f32_0, z: f32_0, mode: u8_0);
    #[no_mangle]
    fn Matrix_Scale(x: f32_0, y: f32_0, z: f32_0, mode: u8_0);
    #[no_mangle]
    fn Matrix_RotateX(x: f32_0, mode: u8_0);
    #[no_mangle]
    fn Matrix_NewMtx(gfxCtx: *mut GraphicsContext, file: *mut libc::c_char,
                     line: s32) -> *mut Mtx;
    #[no_mangle]
    fn func_800F5E18(playerIdx: u8_0, seqId: u16_0, fadeTimer: u8_0, arg3: s8,
                     arg4: s8);
    #[no_mangle]
    fn func_800F6964(_: u16_0);
    #[no_mangle]
    fn Audio_PlaySoundGeneral(sfxId: u16_0, pos: *mut Vec3f, token: u8_0,
                              freqScale: *mut f32_0, a4: *mut f32_0,
                              reverbAdd: *mut s8);
    #[no_mangle]
    fn Audio_QueueSeqCmd(bgmID: u32_0);
    #[no_mangle]
    static mut D_801333E0: f32_0;
    #[no_mangle]
    fn Select_Init(thisx: *mut GameState);
    #[no_mangle]
    static mut gTimeIncrement: u16_0;
    #[no_mangle]
    static mut gScreenHeight: s32;
    #[no_mangle]
    static mut gScreenWidth: s32;
    #[no_mangle]
    static mut gBitFlags: [u32_0; 32];
    #[no_mangle]
    fn FileChoose_DrawCharacter(gfxCtx: *mut GraphicsContext,
                                texture: *mut libc::c_void, vtx: s16);
    #[no_mangle]
    static mut gSramSlotOffsets: [u16_0; 0];
    #[no_mangle]
    fn FileChoose_DrawOptions(thisx: *mut GameState);
    #[no_mangle]
    fn FileChoose_DrawNameEntry(thisx: *mut GameState);
    #[no_mangle]
    static mut gEquipShifts: [u8_0; 4];
    #[no_mangle]
    static mut gEquipNegMasks: [u16_0; 4];
    #[no_mangle]
    static mut gEquipMasks: [u16_0; 4];
    #[no_mangle]
    static mut D_801333D4: Vec3f;
    #[no_mangle]
    fn FileChoose_StartOptions(thisx: *mut GameState);
    #[no_mangle]
    fn FileChoose_UpdateOptionsMenu(thisx: *mut GameState);
    #[no_mangle]
    fn FileChoose_StartNameEntry(thisx: *mut GameState);
    #[no_mangle]
    fn FileChoose_UpdateKeyboardCursor(thisx: *mut GameState);
    #[no_mangle]
    fn FileChoose_ExitEraseToMain(thisx: *mut GameState);
    #[no_mangle]
    fn FileChoose_EraseAnim3(thisx: *mut GameState);
    #[no_mangle]
    fn FileChoose_EraseAnim2(thisx: *mut GameState);
    #[no_mangle]
    fn FileChoose_EraseAnim1(thisx: *mut GameState);
    #[no_mangle]
    fn FileChoose_ExitToEraseSelect2(thisx: *mut GameState);
    #[no_mangle]
    fn FileChoose_ExitToEraseSelect1(thisx: *mut GameState);
    #[no_mangle]
    fn FileChoose_EraseConfirm(thisx: *mut GameState);
    #[no_mangle]
    fn FileChoose_SetupEraseConfirm2(thisx: *mut GameState);
    #[no_mangle]
    fn FileChoose_SetupEraseConfirm1(thisx: *mut GameState);
    #[no_mangle]
    fn FileChoose_EraseSelect(thisx: *mut GameState);
    #[no_mangle]
    fn FileChoose_SetupEraseSelect(thisx: *mut GameState);
    #[no_mangle]
    fn FileChoose_ExitCopyToMain(thisx: *mut GameState);
    #[no_mangle]
    fn FileChoose_CopyAnim5(thisx: *mut GameState);
    #[no_mangle]
    fn FileChoose_CopyAnim4(thisx: *mut GameState);
    #[no_mangle]
    fn FileChoose_CopyAnim3(thisx: *mut GameState);
    #[no_mangle]
    fn FileChoose_CopyAnim2(thisx: *mut GameState);
    #[no_mangle]
    fn FileChoose_CopyAnim1(thisx: *mut GameState);
    #[no_mangle]
    fn FileChoose_ReturnToCopyDest(thisx: *mut GameState);
    #[no_mangle]
    fn FileChoose_CopyConfirm(thisx: *mut GameState);
    #[no_mangle]
    fn FileChoose_SetupCopyConfirm2(thisx: *mut GameState);
    #[no_mangle]
    fn FileChoose_SetupCopyConfirm1(thisx: *mut GameState);
    #[no_mangle]
    fn FileChoose_ExitToCopySource2(thisx: *mut GameState);
    #[no_mangle]
    fn FileChoose_ExitToCopySource1(thisx: *mut GameState);
    #[no_mangle]
    fn FileChoose_SelectCopyDest(thisx: *mut GameState);
    #[no_mangle]
    fn FileChoose_SetupCopyDest2(thisx: *mut GameState);
    #[no_mangle]
    fn FileChoose_SetupCopyDest1(thisx: *mut GameState);
    #[no_mangle]
    fn FileChoose_SelectCopySource(thisx: *mut GameState);
    #[no_mangle]
    fn FileChoose_SetupCopySource(thisx: *mut GameState);
    #[no_mangle]
    static mut _title_staticSegmentRomStart: [u8_0; 0];
    #[no_mangle]
    static mut _title_staticSegmentRomEnd: [u8_0; 0];
    #[no_mangle]
    static mut _parameter_staticSegmentRomStart: [u8_0; 0];
    #[no_mangle]
    static mut _parameter_staticSegmentRomEnd: [u8_0; 0];
    #[no_mangle]
    static mut gSaveContext: SaveContext;
    #[no_mangle]
    static mut gGameInfo: *mut GameInfo;
    #[no_mangle]
    static mut D_801333E8: s8;
    #[no_mangle]
    static mut gFileSelConnectorTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelForestMedallionTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelFireMedallionTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelWaterMedallionTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelSpiritMedallionTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelShadowMedallionTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelLightMedallionTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelNameBoxTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelFileInfoBox1Tex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelFileInfoBox2Tex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelFileInfoBox3Tex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelFileInfoBox4Tex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelFileInfoBox5Tex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelDISKButtonTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelBigButtonHighlightTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelKokiriEmeraldTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelGoronRubyTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelZoraSapphireTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelNoFileToCopyENGTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelNoFileToEraseENGTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelNoEmptyFileENGTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelFileEmptyENGTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelFileInUseENGTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelNoFileToCopyGERTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelNoFileToEraseGERTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelNoEmptyFileGERTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelFileEmptyGERTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelFileInUseGERTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelNoFileToCopyFRATex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelNoFileToEraseFRATex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelNoEmptyFileFRATex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelFileEmptyFRATex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelFileInUseFRATex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelCopyWhichFileENGTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelCopyToWhichFileENGTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelAreYouSureENGTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelFileCopiedENGTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelWhichFile1GERTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelCopyToWhichFileGERTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelAreYouSureGERTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelFileCopiedGERTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelCopyWhichFileFRATex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelCopyToWhichFileFRATex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelAreYouSureFRATex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelFileCopiedFRATex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelPleaseSelectAFileENGTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelOpenThisFileENGTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelPleaseSelectAFileGERTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelOpenThisFileGERTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelPleaseSelectAFileFRATex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelOpenThisFileFRATex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelEraseWhichFileENGTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelAreYouSure2ENGTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelFileErasedENGTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelWhichFile2GERTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelAreYouSure2GERTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelFileErasedGERTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelEraseWhichFileFRATex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelAreYouSure2FRATex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelFileErasedFRATex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelControlsENGTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelControlsGERTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelControlsFRATex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelCopyButtonENGTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelCopyButtonGERTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelCopyButtonFRATex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelFile1ButtonENGTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelFile2ButtonENGTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelFile3ButtonENGTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelFile1ButtonGERTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelFile2ButtonGERTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelFile3ButtonGERTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelFile1ButtonFRATex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelFile2ButtonFRATex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelFile3ButtonFRATex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelYesButtonENGTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelYesButtonGERTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelYesButtonFRATex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelEraseButtonENGTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelEraseButtonGERTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelEraseButtonFRATex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelQuitButtonENGTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelQuitButtonGERTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelQuitButtonFRATex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelOptionsButtonENGTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelOptionsButtonGERTex: [u64_0; 0];
    #[no_mangle]
    static mut gFileSelWindow1DL: [Gfx; 0];
    #[no_mangle]
    static mut gFileSelWindow2DL: [Gfx; 0];
    #[no_mangle]
    static mut gFileSelWindow3DL: [Gfx; 0];
    #[no_mangle]
    static mut gHeartFullTex: [u64_0; 0];
    #[no_mangle]
    static mut gDefenseHeartFullTex: [u64_0; 0];
}
pub type s8 = libc::c_schar;
pub type u8_0 = libc::c_uchar;
pub type s16 = libc::c_short;
pub type u16_0 = libc::c_ushort;
pub type s32 = libc::c_int;
pub type u32_0 = libc::c_uint;
pub type u64_0 = libc::c_ulonglong;
pub type f32_0 = libc::c_float;
pub type Mtx_t = [[libc::c_long; 4]; 4];
#[derive(Copy, Clone)]
#[repr(C)]
pub union Mtx {
    pub m: Mtx_t,
    pub c2rust_unnamed: C2RustUnnamed,
    pub forc_structure_alignment: libc::c_longlong,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed {
    pub intPart: [[u16_0; 4]; 4],
    pub fracPart: [[u16_0; 4]; 4],
}
pub type MtxF_t = [[libc::c_float; 4]; 4];
#[derive(Copy, Clone)]
#[repr(C)]
pub union MtxF {
    pub mf: MtxF_t,
    pub c2rust_unnamed: C2RustUnnamed_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_0 {
    pub xx: libc::c_float,
    pub yx: libc::c_float,
    pub zx: libc::c_float,
    pub wx: libc::c_float,
    pub xy: libc::c_float,
    pub yy: libc::c_float,
    pub zy: libc::c_float,
    pub wy: libc::c_float,
    pub xz: libc::c_float,
    pub yz: libc::c_float,
    pub zz: libc::c_float,
    pub wz: libc::c_float,
    pub xw: libc::c_float,
    pub yw: libc::c_float,
    pub zw: libc::c_float,
    pub ww: libc::c_float,
}
pub type size_t = libc::c_ulong;
pub type OSPri = s32;
pub type OSId = s32;
#[derive(Copy, Clone)]
#[repr(C)]
pub union __OSfp {
    pub f: C2RustUnnamed_1,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_1 {
    pub f_odd: f32_0,
    pub f_even: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __OSThreadContext {
    pub at: u64_0,
    pub v0: u64_0,
    pub v1: u64_0,
    pub a0: u64_0,
    pub a1: u64_0,
    pub a2: u64_0,
    pub a3: u64_0,
    pub t0: u64_0,
    pub t1: u64_0,
    pub t2: u64_0,
    pub t3: u64_0,
    pub t4: u64_0,
    pub t5: u64_0,
    pub t6: u64_0,
    pub t7: u64_0,
    pub s0: u64_0,
    pub s1: u64_0,
    pub s2: u64_0,
    pub s3: u64_0,
    pub s4: u64_0,
    pub s5: u64_0,
    pub s6: u64_0,
    pub s7: u64_0,
    pub t8: u64_0,
    pub t9: u64_0,
    pub gp: u64_0,
    pub sp: u64_0,
    pub s8: u64_0,
    pub ra: u64_0,
    pub lo: u64_0,
    pub hi: u64_0,
    pub sr: u32_0,
    pub pc: u32_0,
    pub cause: u32_0,
    pub badvaddr: u32_0,
    pub rcp: u32_0,
    pub fpcsr: u32_0,
    pub fp0: __OSfp,
    pub fp2: __OSfp,
    pub fp4: __OSfp,
    pub fp6: __OSfp,
    pub fp8: __OSfp,
    pub fp10: __OSfp,
    pub fp12: __OSfp,
    pub fp14: __OSfp,
    pub fp16: __OSfp,
    pub fp18: __OSfp,
    pub fp20: __OSfp,
    pub fp22: __OSfp,
    pub fp24: __OSfp,
    pub fp26: __OSfp,
    pub fp28: __OSfp,
    pub fp30: __OSfp,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __OSThreadprofile {
    pub flag: u32_0,
    pub count: u32_0,
    pub time: u64_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSThread {
    pub next: *mut OSThread,
    pub priority: OSPri,
    pub queue: *mut *mut OSThread,
    pub tlnext: *mut OSThread,
    pub state: u16_0,
    pub flags: u16_0,
    pub id: OSId,
    pub fp: s32,
    pub thprof: *mut __OSThreadprofile,
    pub context: __OSThreadContext,
}
pub type OSMesg = *mut libc::c_void;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSMesgQueue {
    pub mtqueue: *mut OSThread,
    pub fullqueue: *mut OSThread,
    pub validCount: s32,
    pub first: s32,
    pub msgCount: s32,
    pub msg: *mut OSMesg,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSTask_t {
    pub type_0: u32_0,
    pub flags: u32_0,
    pub ucode_boot: *mut u64_0,
    pub ucode_boot_size: u32_0,
    pub ucode: *mut u64_0,
    pub ucode_size: u32_0,
    pub ucode_data: *mut u64_0,
    pub ucode_data_size: u32_0,
    pub dram_stack: *mut u64_0,
    pub dram_stack_size: u32_0,
    pub output_buff: *mut u64_0,
    pub output_buff_size: *mut u64_0,
    pub data_ptr: *mut u64_0,
    pub data_size: u32_0,
    pub yield_data_ptr: *mut u64_0,
    pub yield_data_size: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union OSTask {
    pub t: OSTask_t,
    pub force_structure_alignment: libc::c_longlong,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSViCommonRegs {
    pub ctrl: u32_0,
    pub width: u32_0,
    pub burst: u32_0,
    pub vSync: u32_0,
    pub hSync: u32_0,
    pub leap: u32_0,
    pub hStart: u32_0,
    pub xScale: u32_0,
    pub vCurrent: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSViFieldRegs {
    pub origin: u32_0,
    pub yScale: u32_0,
    pub vStart: u32_0,
    pub vBurst: u32_0,
    pub vIntr: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSViMode {
    pub type_0: u8_0,
    pub comRegs: OSViCommonRegs,
    pub fldRegs: [OSViFieldRegs; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSContPad {
    pub button: u16_0,
    pub stick_x: s8,
    pub stick_y: s8,
    pub errno: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Vtx_t {
    pub ob: [libc::c_short; 3],
    pub flag: libc::c_ushort,
    pub tc: [libc::c_short; 2],
    pub cn: [libc::c_uchar; 4],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Vtx_tn {
    pub ob: [libc::c_short; 3],
    pub flag: libc::c_ushort,
    pub tc: [libc::c_short; 2],
    pub n: [libc::c_schar; 3],
    pub a: libc::c_uchar,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union Vtx {
    pub v: Vtx_t,
    pub n: Vtx_tn,
    pub force_structure_alignment: libc::c_longlong,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Tri {
    pub flag: libc::c_uchar,
    pub v: [libc::c_uchar; 3],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Vp_t {
    pub vscale: [libc::c_short; 4],
    pub vtrans: [libc::c_short; 4],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union Vp {
    pub vp: Vp_t,
    pub force_structure_alignment: libc::c_longlong,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Light_t {
    pub col: [libc::c_uchar; 3],
    pub pad1: libc::c_char,
    pub colc: [libc::c_uchar; 3],
    pub pad2: libc::c_char,
    pub dir: [libc::c_schar; 3],
    pub pad3: libc::c_char,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Ambient_t {
    pub col: [libc::c_uchar; 3],
    pub pad1: libc::c_char,
    pub colc: [libc::c_uchar; 3],
    pub pad2: libc::c_char,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union Light {
    pub l: Light_t,
    pub force_structure_alignment: [libc::c_longlong; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union Ambient {
    pub l: Ambient_t,
    pub force_structure_alignment: [libc::c_longlong; 1],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Lightsn {
    pub a: Ambient,
    pub l: [Light; 7],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gdma {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "par", ty = "libc::c_uint", bits = "8..=15")]
    #[bitfield(name = "len", ty = "libc::c_uint", bits = "16..=31")]
    pub cmd_par_len: [u8; 4],
    pub addr: libc::c_uint,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gtri {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "pad", ty = "libc::c_int", bits = "8..=31")]
    pub cmd_pad: [u8; 4],
    pub tri: Tri,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gpopmtx {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "pad1", ty = "libc::c_int", bits = "8..=31")]
    #[bitfield(name = "pad2", ty = "libc::c_int", bits = "32..=55")]
    #[bitfield(name = "param", ty = "libc::c_uchar", bits = "56..=63")]
    pub cmd_pad1_pad2_param: [u8; 8],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gsegment {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "pad0", ty = "libc::c_int", bits = "8..=15")]
    #[bitfield(name = "mw_index", ty = "libc::c_int", bits = "16..=23")]
    #[bitfield(name = "number", ty = "libc::c_int", bits = "24..=31")]
    #[bitfield(name = "pad1", ty = "libc::c_int", bits = "32..=39")]
    #[bitfield(name = "base", ty = "libc::c_int", bits = "40..=63")]
    pub cmd_pad0_mw_index_number_pad1_base: [u8; 8],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct GsetothermodeL {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "pad0", ty = "libc::c_int", bits = "8..=15")]
    #[bitfield(name = "sft", ty = "libc::c_int", bits = "16..=23")]
    #[bitfield(name = "len", ty = "libc::c_int", bits = "24..=31")]
    #[bitfield(name = "data", ty = "libc::c_uint", bits = "32..=63")]
    pub cmd_pad0_sft_len_data: [u8; 8],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct GsetothermodeH {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "pad0", ty = "libc::c_int", bits = "8..=15")]
    #[bitfield(name = "sft", ty = "libc::c_int", bits = "16..=23")]
    #[bitfield(name = "len", ty = "libc::c_int", bits = "24..=31")]
    #[bitfield(name = "data", ty = "libc::c_uint", bits = "32..=63")]
    pub cmd_pad0_sft_len_data: [u8; 8],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Gtexture {
    pub cmd: libc::c_uchar,
    pub lodscale: libc::c_uchar,
    pub tile: libc::c_uchar,
    pub on: libc::c_uchar,
    pub s: libc::c_ushort,
    pub t: libc::c_ushort,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gline3D {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "pad", ty = "libc::c_int", bits = "8..=31")]
    pub cmd_pad: [u8; 4],
    pub line: Tri,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gperspnorm {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "pad1", ty = "libc::c_int", bits = "8..=31")]
    pub cmd_pad1: [u8; 4],
    pub pad2: libc::c_short,
    pub scale: libc::c_short,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gsetimg {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "fmt", ty = "libc::c_uint", bits = "8..=10")]
    #[bitfield(name = "siz", ty = "libc::c_uint", bits = "11..=12")]
    #[bitfield(name = "pad", ty = "libc::c_uint", bits = "13..=19")]
    #[bitfield(name = "wd", ty = "libc::c_uint", bits = "20..=31")]
    pub cmd_fmt_siz_pad_wd: [u8; 4],
    pub dram: libc::c_uint,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gsetcombine {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "muxs0", ty = "libc::c_uint", bits = "8..=31")]
    #[bitfield(name = "muxs1", ty = "libc::c_uint", bits = "32..=63")]
    pub cmd_muxs0_muxs1: [u8; 8],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gsetcolor {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    pub cmd: [u8; 1],
    pub pad: libc::c_uchar,
    pub prim_min_level: libc::c_uchar,
    pub prim_level: libc::c_uchar,
    pub color: libc::c_ulong,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gfillrect {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "x0", ty = "libc::c_int", bits = "8..=17")]
    #[bitfield(name = "x0frac", ty = "libc::c_int", bits = "18..=19")]
    #[bitfield(name = "y0", ty = "libc::c_int", bits = "20..=29")]
    #[bitfield(name = "y0frac", ty = "libc::c_int", bits = "30..=31")]
    #[bitfield(name = "pad", ty = "libc::c_uint", bits = "32..=39")]
    #[bitfield(name = "x1", ty = "libc::c_int", bits = "40..=49")]
    #[bitfield(name = "x1frac", ty = "libc::c_int", bits = "50..=51")]
    #[bitfield(name = "y1", ty = "libc::c_int", bits = "52..=61")]
    #[bitfield(name = "y1frac", ty = "libc::c_int", bits = "62..=63")]
    pub cmd_x0_x0frac_y0_y0frac_pad_x1_x1frac_y1_y1frac: [u8; 8],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gsettile {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "fmt", ty = "libc::c_uint", bits = "8..=10")]
    #[bitfield(name = "siz", ty = "libc::c_uint", bits = "11..=12")]
    #[bitfield(name = "pad0", ty = "libc::c_uint", bits = "13..=13")]
    #[bitfield(name = "line", ty = "libc::c_uint", bits = "14..=22")]
    #[bitfield(name = "tmem", ty = "libc::c_uint", bits = "23..=31")]
    #[bitfield(name = "pad1", ty = "libc::c_uint", bits = "32..=36")]
    #[bitfield(name = "tile", ty = "libc::c_uint", bits = "37..=39")]
    #[bitfield(name = "palette", ty = "libc::c_uint", bits = "40..=43")]
    #[bitfield(name = "ct", ty = "libc::c_uint", bits = "44..=44")]
    #[bitfield(name = "mt", ty = "libc::c_uint", bits = "45..=45")]
    #[bitfield(name = "maskt", ty = "libc::c_uint", bits = "46..=49")]
    #[bitfield(name = "shiftt", ty = "libc::c_uint", bits = "50..=53")]
    #[bitfield(name = "cs", ty = "libc::c_uint", bits = "54..=54")]
    #[bitfield(name = "ms", ty = "libc::c_uint", bits = "55..=55")]
    #[bitfield(name = "masks", ty = "libc::c_uint", bits = "56..=59")]
    #[bitfield(name = "shifts", ty = "libc::c_uint", bits = "60..=63")]
    pub cmd_fmt_siz_pad0_line_tmem_pad1_tile_palette_ct_mt_maskt_shiftt_cs_ms_masks_shifts: [u8; 8],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gloadtile {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "sl", ty = "libc::c_uint", bits = "8..=19")]
    #[bitfield(name = "tl", ty = "libc::c_uint", bits = "20..=31")]
    #[bitfield(name = "pad", ty = "libc::c_int", bits = "32..=36")]
    #[bitfield(name = "tile", ty = "libc::c_uint", bits = "37..=39")]
    #[bitfield(name = "sh", ty = "libc::c_uint", bits = "40..=51")]
    #[bitfield(name = "th", ty = "libc::c_uint", bits = "52..=63")]
    pub cmd_sl_tl_pad_tile_sh_th: [u8; 8],
}
pub type Gsettilesize = Gloadtile;
pub type Gloadtlut = Gloadtile;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Gwords {
    pub w0: libc::c_uint,
    pub w1: libc::c_uint,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union Gfx {
    pub words: Gwords,
    pub dma: Gdma,
    pub tri: Gtri,
    pub line: Gline3D,
    pub popmtx: Gpopmtx,
    pub segment: Gsegment,
    pub setothermodeH: GsetothermodeH,
    pub setothermodeL: GsetothermodeL,
    pub texture: Gtexture,
    pub perspnorm: Gperspnorm,
    pub setimg: Gsetimg,
    pub setcombine: Gsetcombine,
    pub setcolor: Gsetcolor,
    pub fillrect: Gfillrect,
    pub settile: Gsettile,
    pub loadtile: Gloadtile,
    pub settilesize: Gsettilesize,
    pub loadtlut: Gloadtlut,
    pub force_structure_alignment: libc::c_longlong,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Vec3f {
    pub x: f32_0,
    pub y: f32_0,
    pub z: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Vec3us {
    pub x: u16_0,
    pub y: u16_0,
    pub z: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Vec3s {
    pub x: s16,
    pub y: s16,
    pub z: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Vec3i {
    pub x: s32,
    pub y: s32,
    pub z: s32,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Sphere16 {
    pub center: Vec3s,
    pub radius: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Cylinder16 {
    pub radius: s16,
    pub height: s16,
    pub yShift: s16,
    pub pos: Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Linef {
    pub a: Vec3f,
    pub b: Vec3f,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ItemEquips {
    pub buttonItems: [u8_0; 4],
    pub cButtonSlots: [u8_0; 3],
    pub equipment: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Inventory {
    pub items: [u8_0; 24],
    pub ammo: [s8; 16],
    pub equipment: u16_0,
    pub upgrades: u32_0,
    pub questItems: u32_0,
    pub dungeonItems: [u8_0; 20],
    pub dungeonKeys: [s8; 19],
    pub defenseHearts: s8,
    pub gsTokens: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SavedSceneFlags {
    pub chest: u32_0,
    pub swch: u32_0,
    pub clear: u32_0,
    pub collect: u32_0,
    pub unk: u32_0,
    pub rooms: u32_0,
    pub floors: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct HorseData {
    pub scene: s16,
    pub pos: Vec3s,
    pub angle: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct RespawnData {
    pub pos: Vec3f,
    pub yaw: s16,
    pub playerParams: s16,
    pub entranceIndex: s16,
    pub roomIndex: u8_0,
    pub data: s8,
    pub tempSwchFlags: u32_0,
    pub tempCollectFlags: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct FaroresWindData {
    pub pos: Vec3i,
    pub yaw: s32,
    pub playerParams: s32,
    pub entranceIndex: s32,
    pub roomIndex: s32,
    pub set: s32,
    pub tempSwchFlags: s32,
    pub tempCollectFlags: s32,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SaveContext {
    pub entranceIndex: s32,
    pub linkAge: s32,
    pub cutsceneIndex: s32,
    pub dayTime: u16_0,
    pub nightFlag: s32,
    pub totalDays: s32,
    pub bgsDayCount: s32,
    pub newf: [libc::c_char; 6],
    pub deaths: u16_0,
    pub playerName: [libc::c_char; 8],
    pub n64ddFlag: s16,
    pub healthCapacity: s16,
    pub health: s16,
    pub magicLevel: s8,
    pub magic: s8,
    pub rupees: s16,
    pub swordHealth: u16_0,
    pub naviTimer: u16_0,
    pub magicAcquired: u8_0,
    pub unk_3B: [libc::c_char; 1],
    pub doubleMagic: u8_0,
    pub doubleDefense: u8_0,
    pub bgsFlag: u8_0,
    pub ocarinaGameRoundNum: u8_0,
    pub childEquips: ItemEquips,
    pub adultEquips: ItemEquips,
    pub unk_54: u32_0,
    pub unk_58: [libc::c_char; 14],
    pub savedSceneNum: s16,
    pub equips: ItemEquips,
    pub inventory: Inventory,
    pub sceneFlags: [SavedSceneFlags; 124],
    pub fw: FaroresWindData,
    pub unk_E8C: [libc::c_char; 16],
    pub gsFlags: [s32; 6],
    pub unk_EB4: [libc::c_char; 4],
    pub highScores: [s32; 7],
    pub eventChkInf: [u16_0; 14],
    pub itemGetInf: [u16_0; 4],
    pub infTable: [u16_0; 30],
    pub unk_F34: [libc::c_char; 4],
    pub worldMapAreaData: u32_0,
    pub unk_F3C: [libc::c_char; 4],
    pub scarecrowCustomSongSet: u8_0,
    pub scarecrowCustomSong: [u8_0; 864],
    pub unk_12A1: [libc::c_char; 36],
    pub scarecrowSpawnSongSet: u8_0,
    pub scarecrowSpawnSong: [u8_0; 128],
    pub unk_1346: [libc::c_char; 2],
    pub horseData: HorseData,
    pub checksum: u16_0,
    pub fileNum: s32,
    pub unk_1358: [libc::c_char; 4],
    pub gameMode: s32,
    pub sceneSetupIndex: s32,
    pub respawnFlag: s32,
    pub respawn: [RespawnData; 3],
    pub entranceSpeed: f32_0,
    pub entranceSound: u16_0,
    pub unk_13C2: [libc::c_char; 1],
    pub unk_13C3: u8_0,
    pub dogParams: s16,
    pub textTriggerFlags: u8_0,
    pub showTitleCard: u8_0,
    pub nayrusLoveTimer: s16,
    pub unk_13CA: [libc::c_char; 2],
    pub rupeeAccumulator: s16,
    pub timer1State: s16,
    pub timer1Value: s16,
    pub timer2State: s16,
    pub timer2Value: s16,
    pub timerX: [s16; 2],
    pub timerY: [s16; 2],
    pub unk_13DE: [libc::c_char; 2],
    pub seqId: u8_0,
    pub natureAmbienceId: u8_0,
    pub buttonStatus: [u8_0; 5],
    pub unk_13E7: u8_0,
    pub unk_13E8: u16_0,
    pub unk_13EA: u16_0,
    pub unk_13EC: u16_0,
    pub unk_13EE: u16_0,
    pub unk_13F0: s16,
    pub unk_13F2: s16,
    pub unk_13F4: s16,
    pub unk_13F6: s16,
    pub unk_13F8: s16,
    pub eventInf: [u16_0; 4],
    pub mapIndex: u16_0,
    pub minigameState: u16_0,
    pub minigameScore: u16_0,
    pub unk_1408: [libc::c_char; 1],
    pub language: u8_0,
    pub audioSetting: u8_0,
    pub unk_140B: [libc::c_char; 1],
    pub zTargetSetting: u8_0,
    pub forcedSeqId: u16_0,
    pub unk_1410: u8_0,
    pub unk_1411: [libc::c_char; 1],
    pub nextCutsceneIndex: u16_0,
    pub cutsceneTrigger: u8_0,
    pub chamberCutsceneNum: u8_0,
    pub nextDayTime: u16_0,
    pub fadeDuration: u8_0,
    pub unk_1419: u8_0,
    pub skyboxTime: u16_0,
    pub dogIsLost: u8_0,
    pub nextTransition: u8_0,
    pub unk_141E: [libc::c_char; 2],
    pub worldMapArea: s16,
    pub sunsSongState: s16,
    pub healthAccumulator: s16,
}
pub type C2RustUnnamed_2 = libc::c_uint;
pub const BTN_DISABLED: C2RustUnnamed_2 = 255;
pub const BTN_ENABLED: C2RustUnnamed_2 = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Color_RGB8 {
    pub r: u8_0,
    pub g: u8_0,
    pub b: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union Color_RGBA8_u32 {
    pub c2rust_unnamed: C2RustUnnamed_3,
    pub rgba: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_3 {
    pub r: u8_0,
    pub g: u8_0,
    pub b: u8_0,
    pub a: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Color_RGBAf {
    pub r: f32_0,
    pub g: f32_0,
    pub b: f32_0,
    pub a: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct LightPoint {
    pub x: s16,
    pub y: s16,
    pub z: s16,
    pub color: [u8_0; 3],
    pub drawGlow: u8_0,
    pub radius: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct LightDirectional {
    pub x: s8,
    pub y: s8,
    pub z: s8,
    pub color: [u8_0; 3],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union LightParams {
    pub point: LightPoint,
    pub dir: LightDirectional,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct LightInfo {
    pub type_0: u8_0,
    pub params: LightParams,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Lights {
    pub numLights: u8_0,
    pub l: Lightsn,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct LightNode {
    pub info: *mut LightInfo,
    pub prev: *mut LightNode,
    pub next: *mut LightNode,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct LightContext {
    pub listHead: *mut LightNode,
    pub ambientColor: [u8_0; 3],
    pub fogColor: [u8_0; 3],
    pub fogNear: s16,
    pub fogFar: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GlobalContext {
    pub state: GameState,
    pub sceneNum: s16,
    pub sceneConfig: u8_0,
    pub unk_A7: [libc::c_char; 9],
    pub sceneSegment: *mut libc::c_void,
    pub view: View,
    pub mainCamera: Camera,
    pub subCameras: [Camera; 3],
    pub cameraPtrs: [*mut Camera; 4],
    pub activeCamera: s16,
    pub nextCamera: s16,
    pub sequenceCtx: SequenceContext,
    pub lightCtx: LightContext,
    pub frameAdvCtx: FrameAdvanceContext,
    pub colCtx: CollisionContext,
    pub actorCtx: ActorContext,
    pub csCtx: CutsceneContext,
    pub soundSources: [SoundSource; 16],
    pub sramCtx: SramContext,
    pub skyboxCtx: SkyboxContext,
    pub msgCtx: MessageContext,
    pub interfaceCtx: InterfaceContext,
    pub pauseCtx: PauseContext,
    pub gameOverCtx: GameOverContext,
    pub envCtx: EnvironmentContext,
    pub animationCtx: AnimationContext,
    pub objectCtx: ObjectContext,
    pub roomCtx: RoomContext,
    pub transiActorCtx: TransitionActorContext,
    pub playerInit: Option<unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext,
                                                _: *mut FlexSkeletonHeader)
                               -> ()>,
    pub playerUpdate: Option<unsafe extern "C" fn(_: *mut Player,
                                                  _: *mut GlobalContext,
                                                  _: *mut Input) -> ()>,
    pub isPlayerDroppingFish: Option<unsafe extern "C" fn(_:
                                                              *mut GlobalContext)
                                         -> s32>,
    pub startPlayerFishing: Option<unsafe extern "C" fn(_: *mut GlobalContext)
                                       -> s32>,
    pub grabPlayer: Option<unsafe extern "C" fn(_: *mut GlobalContext,
                                                _: *mut Player) -> s32>,
    pub startPlayerCutscene: Option<unsafe extern "C" fn(_:
                                                             *mut GlobalContext,
                                                         _: *mut Actor,
                                                         _: s32) -> s32>,
    pub func_11D54: Option<unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()>,
    pub damagePlayer: Option<unsafe extern "C" fn(_: *mut GlobalContext,
                                                  _: s32) -> s32>,
    pub talkWithPlayer: Option<unsafe extern "C" fn(_: *mut GlobalContext,
                                                    _: *mut Actor) -> ()>,
    pub viewProjectionMtxF: MtxF,
    pub billboardMtxF: MtxF,
    pub billboardMtx: *mut Mtx,
    pub gameplayFrames: u32_0,
    pub linkAgeOnLoad: u8_0,
    pub unk_11DE9: u8_0,
    pub curSpawn: u8_0,
    pub numSetupActors: u8_0,
    pub numRooms: u8_0,
    pub roomList: *mut RomFile,
    pub linkActorEntry: *mut ActorEntry,
    pub setupActorList: *mut ActorEntry,
    pub unk_11DFC: *mut libc::c_void,
    pub setupEntranceList: *mut EntranceEntry,
    pub setupExitList: *mut s16,
    pub setupPathList: *mut Path,
    pub cUpElfMsgs: *mut ElfMessage,
    pub specialEffects: *mut libc::c_void,
    pub skyboxId: u8_0,
    pub sceneLoadFlag: s8,
    pub unk_11E16: s16,
    pub unk_11E18: s16,
    pub nextEntranceIndex: s16,
    pub unk_11E1C: [libc::c_char; 64],
    pub shootingGalleryStatus: s8,
    pub bombchuBowlingStatus: s8,
    pub fadeTransition: u8_0,
    pub colChkCtx: CollisionCheckContext,
    pub envFlags: [u16_0; 20],
    pub pauseBgPreRender: PreRender,
    pub unk_12174: [libc::c_char; 83],
    pub unk_121C7: s8,
    pub transitionCtx: TransitionContext,
    pub unk_12418: [libc::c_char; 3],
    pub transitionMode: u8_0,
    pub transitionFade: TransitionFade,
    pub unk_12428: [libc::c_char; 3],
    pub unk_1242B: u8_0,
    pub loadedScene: *mut SceneTableEntry,
    pub unk_12430: [libc::c_char; 232],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SceneTableEntry {
    pub sceneFile: RomFile,
    pub titleFile: RomFile,
    pub unk_10: u8_0,
    pub config: u8_0,
    pub unk_12: u8_0,
    pub unk_13: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct RomFile {
    pub vromStart: u32_0,
    pub vromEnd: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TransitionFade {
    pub fadeType: u8_0,
    pub isDone: u8_0,
    pub fadeDirection: u8_0,
    pub fadeColor: Color_RGBA8_u32,
    pub fadeTimer: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TransitionContext {
    pub c2rust_unnamed: C2RustUnnamed_4,
    pub transitionType: s32,
    pub init: Option<unsafe extern "C" fn(_: *mut libc::c_void)
                         -> *mut libc::c_void>,
    pub destroy: Option<unsafe extern "C" fn(_: *mut libc::c_void) -> ()>,
    pub update: Option<unsafe extern "C" fn(_: *mut libc::c_void, _: s32)
                           -> ()>,
    pub draw: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                          _: *mut *mut Gfx) -> ()>,
    pub start: Option<unsafe extern "C" fn(_: *mut libc::c_void) -> ()>,
    pub setType: Option<unsafe extern "C" fn(_: *mut libc::c_void, _: s32)
                            -> ()>,
    pub setColor: Option<unsafe extern "C" fn(_: *mut libc::c_void, _: u32_0)
                             -> ()>,
    pub setEnvColor: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                                 _: u32_0) -> ()>,
    pub isDone: Option<unsafe extern "C" fn(_: *mut libc::c_void) -> s32>,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_4 {
    pub fade: TransitionFade,
    pub circle: TransitionCircle,
    pub triforce: TransitionTriforce,
    pub wipe: TransitionWipe,
    pub data: [libc::c_char; 552],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TransitionWipe {
    pub color: Color_RGBA8_u32,
    pub envColor: Color_RGBA8_u32,
    pub direction: u8_0,
    pub frame: u8_0,
    pub isDone: u8_0,
    pub texX: u16_0,
    pub texY: u16_0,
    pub normal: u16_0,
    pub projection: Mtx,
    pub lookAt: Mtx,
    pub modelView: [[Mtx; 3]; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TransitionTriforce {
    pub color: Color_RGBA8_u32,
    pub transPos: f32_0,
    pub step: f32_0,
    pub state: s32,
    pub fadeDirection: s32,
    pub projection: Mtx,
    pub frame: s32,
    pub modelView: [[Mtx; 3]; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TransitionCircle {
    pub color: Color_RGBA8_u32,
    pub envColor: Color_RGBA8_u32,
    pub texX: s32,
    pub texY: s32,
    pub step: s32,
    pub unk_14: u8_0,
    pub typeColor: u8_0,
    pub speed: u8_0,
    pub effect: u8_0,
    pub isDone: u8_0,
    pub frame: u8_0,
    pub normal: u16_0,
    pub projection: Mtx,
    pub lookAt: Mtx,
    pub texture: *mut libc::c_void,
    pub modelView: [[Mtx; 3]; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PreRender {
    pub width: s32,
    pub height: s32,
    pub widthSave: s32,
    pub heightSave: s32,
    pub fbuf: *mut u16_0,
    pub fbufSave: *mut u16_0,
    pub cvgSave: *mut u8_0,
    pub zbuf: *mut u16_0,
    pub zbufSave: *mut u16_0,
    pub ulxSave: s32,
    pub ulySave: s32,
    pub lrxSave: s32,
    pub lrySave: s32,
    pub ulx: s32,
    pub uly: s32,
    pub lrx: s32,
    pub lry: s32,
    pub alloc: ListAlloc,
    pub unk_4C: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ListAlloc {
    pub prev: *mut ListAlloc,
    pub next: *mut ListAlloc,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CollisionCheckContext {
    pub colATCount: s16,
    pub sacFlags: u16_0,
    pub colAT: [*mut Collider; 50],
    pub colACCount: s32,
    pub colAC: [*mut Collider; 60],
    pub colOCCount: s32,
    pub colOC: [*mut Collider; 50],
    pub colLineCount: s32,
    pub colLine: [*mut OcLine; 3],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OcLine {
    pub line: Linef,
    pub ocFlags: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Collider {
    pub actor: *mut Actor,
    pub at: *mut Actor,
    pub ac: *mut Actor,
    pub oc: *mut Actor,
    pub atFlags: u8_0,
    pub acFlags: u8_0,
    pub ocFlags1: u8_0,
    pub ocFlags2: u8_0,
    pub colType: u8_0,
    pub shape: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Actor {
    pub id: s16,
    pub category: u8_0,
    pub room: s8,
    pub flags: u32_0,
    pub home: PosRot,
    pub params: s16,
    pub objBankIndex: s8,
    pub targetMode: s8,
    pub sfx: u16_0,
    pub world: PosRot,
    pub focus: PosRot,
    pub targetArrowOffset: f32_0,
    pub scale: Vec3f,
    pub velocity: Vec3f,
    pub speedXZ: f32_0,
    pub gravity: f32_0,
    pub minVelocityY: f32_0,
    pub wallPoly: *mut CollisionPoly,
    pub floorPoly: *mut CollisionPoly,
    pub wallBgId: u8_0,
    pub floorBgId: u8_0,
    pub wallYaw: s16,
    pub floorHeight: f32_0,
    pub yDistToWater: f32_0,
    pub bgCheckFlags: u16_0,
    pub yawTowardsPlayer: s16,
    pub xyzDistToPlayerSq: f32_0,
    pub xzDistToPlayer: f32_0,
    pub yDistToPlayer: f32_0,
    pub colChkInfo: CollisionCheckInfo,
    pub shape: ActorShape,
    pub projectedPos: Vec3f,
    pub projectedW: f32_0,
    pub uncullZoneForward: f32_0,
    pub uncullZoneScale: f32_0,
    pub uncullZoneDownward: f32_0,
    pub prevPos: Vec3f,
    pub isTargeted: u8_0,
    pub targetPriority: u8_0,
    pub textId: u16_0,
    pub freezeTimer: u16_0,
    pub colorFilterParams: u16_0,
    pub colorFilterTimer: u8_0,
    pub isDrawn: u8_0,
    pub dropFlag: u8_0,
    pub naviEnemyId: u8_0,
    pub parent: *mut Actor,
    pub child: *mut Actor,
    pub prev: *mut Actor,
    pub next: *mut Actor,
    pub init: ActorFunc,
    pub destroy: ActorFunc,
    pub update: ActorFunc,
    pub draw: ActorFunc,
    pub overlayEntry: *mut ActorOverlay,
    pub dbgPad: [libc::c_char; 16],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ActorOverlay {
    pub vromStart: u32_0,
    pub vromEnd: u32_0,
    pub vramStart: *mut libc::c_void,
    pub vramEnd: *mut libc::c_void,
    pub loadedRamAddr: *mut libc::c_void,
    pub initInfo: *mut ActorInit,
    pub name: *mut libc::c_char,
    pub allocType: u16_0,
    pub numLoaded: s8,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ActorInit {
    pub id: s16,
    pub category: u8_0,
    pub flags: u32_0,
    pub objectId: s16,
    pub instanceSize: u32_0,
    pub init: ActorFunc,
    pub destroy: ActorFunc,
    pub update: ActorFunc,
    pub draw: ActorFunc,
}
pub type ActorFunc
    =
    Option<unsafe extern "C" fn(_: *mut Actor, _: *mut GlobalContext) -> ()>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ActorShape {
    pub rot: Vec3s,
    pub face: s16,
    pub yOffset: f32_0,
    pub shadowDraw: ActorShadowFunc,
    pub shadowScale: f32_0,
    pub shadowAlpha: u8_0,
    pub feetFloorFlags: u8_0,
    pub feetPos: [Vec3f; 2],
}
pub type ActorShadowFunc
    =
    Option<unsafe extern "C" fn(_: *mut Actor, _: *mut Lights,
                                _: *mut GlobalContext) -> ()>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CollisionCheckInfo {
    pub damageTable: *mut DamageTable,
    pub displacement: Vec3f,
    pub cylRadius: s16,
    pub cylHeight: s16,
    pub cylYShift: s16,
    pub mass: u8_0,
    pub health: u8_0,
    pub damage: u8_0,
    pub damageEffect: u8_0,
    pub atHitEffect: u8_0,
    pub acHitEffect: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct DamageTable {
    pub table: [u8_0; 32],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CollisionPoly {
    pub type_0: u16_0,
    pub c2rust_unnamed: C2RustUnnamed_5,
    pub normal: Vec3s,
    pub dist: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_5 {
    pub vtxData: [u16_0; 3],
    pub c2rust_unnamed: C2RustUnnamed_6,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_6 {
    pub flags_vIA: u16_0,
    pub flags_vIB: u16_0,
    pub vIC: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PosRot {
    pub pos: Vec3f,
    pub rot: Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ElfMessage {
    pub byte0: u8_0,
    pub byte1: u8_0,
    pub byte2: u8_0,
    pub byte3: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Path {
    pub count: u8_0,
    pub points: *mut Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct EntranceEntry {
    pub spawn: u8_0,
    pub room: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ActorEntry {
    pub id: s16,
    pub pos: Vec3s,
    pub rot: Vec3s,
    pub params: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Player {
    pub actor: Actor,
    pub currentTunic: s8,
    pub currentSword: s8,
    pub currentShield: s8,
    pub currentBoots: s8,
    pub heldItemButton: s8,
    pub heldItemActionParam: s8,
    pub heldItemId: u8_0,
    pub prevBoots: s8,
    pub itemActionParam: s8,
    pub unk_155: [libc::c_char; 3],
    pub modelGroup: u8_0,
    pub nextModelGroup: u8_0,
    pub unk_15A: s8,
    pub modelAnimType: u8_0,
    pub leftHandType: u8_0,
    pub rightHandType: u8_0,
    pub sheathType: u8_0,
    pub currentMask: u8_0,
    pub rightHandDLists: *mut *mut Gfx,
    pub leftHandDLists: *mut *mut Gfx,
    pub sheathDLists: *mut *mut Gfx,
    pub waistDLists: *mut *mut Gfx,
    pub giObjectLoading: u8_0,
    pub giObjectDmaRequest: DmaRequest,
    pub giObjectLoadQueue: OSMesgQueue,
    pub giObjectLoadMsg: OSMesg,
    pub giObjectSegment: *mut libc::c_void,
    pub skelAnime: SkelAnime,
    pub jointTable: [Vec3s; 24],
    pub morphTable: [Vec3s; 24],
    pub blendTable: [Vec3s; 24],
    pub unk_3A8: [s16; 2],
    pub heldActor: *mut Actor,
    pub leftHandPos: Vec3f,
    pub unk_3BC: Vec3s,
    pub unk_3C4: *mut Actor,
    pub unk_3C8: Vec3f,
    pub unk_3D4: [libc::c_char; 88],
    pub doorType: s8,
    pub doorDirection: s8,
    pub doorTimer: s16,
    pub doorActor: *mut Actor,
    pub getItemId: s8,
    pub getItemDirection: u16_0,
    pub interactRangeActor: *mut Actor,
    pub mountSide: s8,
    pub unk_43D: [libc::c_char; 3],
    pub rideActor: *mut Actor,
    pub csMode: u8_0,
    pub prevCsMode: u8_0,
    pub unk_446: u8_0,
    pub unk_447: u8_0,
    pub unk_448: *mut Actor,
    pub unk_44C: [libc::c_char; 4],
    pub unk_450: Vec3f,
    pub unk_45C: Vec3f,
    pub unk_468: [libc::c_char; 2],
    pub unk_46A: s16,
    pub unk_46C: s16,
    pub unk_46E: [libc::c_char; 42],
    pub cylinder: ColliderCylinder,
    pub swordQuads: [ColliderQuad; 2],
    pub shieldQuad: ColliderQuad,
    pub unk_664: *mut Actor,
    pub unk_668: [libc::c_char; 4],
    pub unk_66C: s32,
    pub swordEffectIndex: s32,
    pub func_674: PlayerFunc674,
    pub ageProperties: *mut PlayerAgeProperties,
    pub stateFlags1: u32_0,
    pub stateFlags2: u32_0,
    pub unk_684: *mut Actor,
    pub boomerangActor: *mut Actor,
    pub naviActor: *mut Actor,
    pub naviTextId: s16,
    pub stateFlags3: u8_0,
    pub exchangeItemId: s8,
    pub targetActor: *mut Actor,
    pub targetActorDistance: f32_0,
    pub unk_69C: [libc::c_char; 4],
    pub unk_6A0: f32_0,
    pub unk_6A4: f32_0,
    pub unk_6A8: *mut Actor,
    pub unk_6AC: s8,
    pub unk_6AD: u8_0,
    pub unk_6AE: u16_0,
    pub unk_6B0: s16,
    pub unk_6B4: [libc::c_char; 4],
    pub unk_6B6: s16,
    pub unk_6B8: s16,
    pub unk_6BA: s16,
    pub unk_6BC: s16,
    pub unk_6BE: s16,
    pub unk_6C0: s16,
    pub unk_6C2: s16,
    pub unk_6C4: f32_0,
    pub skelAnime2: SkelAnime,
    pub jointTable2: [Vec3s; 24],
    pub morphTable2: [Vec3s; 24],
    pub func_82C: PlayerFunc82C,
    pub unk_830: f32_0,
    pub unk_834: s16,
    pub unk_836: s8,
    pub unk_837: u8_0,
    pub linearVelocity: f32_0,
    pub currentYaw: s16,
    pub targetYaw: s16,
    pub unk_840: u16_0,
    pub swordAnimation: s8,
    pub swordState: s8,
    pub unk_844: s8,
    pub unk_845: u8_0,
    pub unk_846: u8_0,
    pub unk_847: [s8; 4],
    pub unk_84B: [s8; 4],
    pub unk_84F: s8,
    pub unk_850: s16,
    pub unk_854: f32_0,
    pub unk_858: f32_0,
    pub unk_85C: f32_0,
    pub unk_860: s16,
    pub unk_862: s8,
    pub unk_864: f32_0,
    pub unk_868: f32_0,
    pub unk_86C: f32_0,
    pub unk_870: f32_0,
    pub unk_874: f32_0,
    pub unk_878: f32_0,
    pub unk_87C: s16,
    pub unk_87E: s16,
    pub unk_880: f32_0,
    pub wallHeight: f32_0,
    pub wallDistance: f32_0,
    pub unk_88C: u8_0,
    pub unk_88D: u8_0,
    pub unk_88E: u8_0,
    pub unk_88F: u8_0,
    pub unk_890: u8_0,
    pub shockTimer: u8_0,
    pub unk_892: u8_0,
    pub hoverBootsTimer: u8_0,
    pub fallStartHeight: s16,
    pub fallDistance: s16,
    pub unk_898: s16,
    pub unk_89A: s16,
    pub unk_89C: s16,
    pub unk_89E: u16_0,
    pub unk_8A0: u8_0,
    pub unk_8A1: u8_0,
    pub unk_8A2: s16,
    pub unk_8A4: f32_0,
    pub unk_8A8: f32_0,
    pub windSpeed: f32_0,
    pub windDirection: s16,
    pub swordInfo: [WeaponInfo; 3],
    pub bodyPartsPos: [Vec3f; 18],
    pub mf_9E0: MtxF,
    pub shieldMf: MtxF,
    pub isBurning: u8_0,
    pub flameTimers: [u8_0; 18],
    pub unk_A73: u8_0,
    pub func_A74: PlayerFuncA74,
    pub invincibilityTimer: s8,
    pub unk_A79: u8_0,
    pub unk_A7A: u8_0,
    pub unk_A7B: u8_0,
    pub unk_A7C: f32_0,
    pub unk_A80: s16,
    pub unk_A82: u16_0,
    pub unk_A84: s16,
    pub unk_A86: s8,
    pub unk_A87: u8_0,
    pub unk_A88: Vec3f,
}
pub type PlayerFuncA74
    =
    Option<unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player) -> ()>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct WeaponInfo {
    pub active: s32,
    pub tip: Vec3f,
    pub base: Vec3f,
}
pub type PlayerFunc82C
    =
    Option<unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
               -> s32>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SkelAnime {
    pub limbCount: u8_0,
    pub mode: u8_0,
    pub dListCount: u8_0,
    pub taper: s8,
    pub skeleton: *mut *mut libc::c_void,
    pub animation: *mut libc::c_void,
    pub startFrame: f32_0,
    pub endFrame: f32_0,
    pub animLength: f32_0,
    pub curFrame: f32_0,
    pub playSpeed: f32_0,
    pub jointTable: *mut Vec3s,
    pub morphTable: *mut Vec3s,
    pub morphWeight: f32_0,
    pub morphRate: f32_0,
    pub update: Option<unsafe extern "C" fn() -> s32>,
    pub initFlags: s8,
    pub moveFlags: u8_0,
    pub prevRot: s16,
    pub prevTransl: Vec3s,
    pub baseTransl: Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PlayerAgeProperties {
    pub unk_00: f32_0,
    pub unk_04: f32_0,
    pub unk_08: f32_0,
    pub unk_0C: f32_0,
    pub unk_10: f32_0,
    pub unk_14: f32_0,
    pub unk_18: f32_0,
    pub unk_1C: f32_0,
    pub unk_20: f32_0,
    pub unk_24: f32_0,
    pub unk_28: f32_0,
    pub unk_2C: f32_0,
    pub unk_30: f32_0,
    pub unk_34: f32_0,
    pub unk_38: f32_0,
    pub unk_3C: f32_0,
    pub unk_40: f32_0,
    pub unk_44: Vec3s,
    pub unk_4A: [Vec3s; 4],
    pub unk_62: [Vec3s; 4],
    pub unk_7A: [Vec3s; 2],
    pub unk_86: [Vec3s; 2],
    pub unk_92: u16_0,
    pub unk_94: u16_0,
    pub unk_98: *mut LinkAnimationHeader,
    pub unk_9C: *mut LinkAnimationHeader,
    pub unk_A0: *mut LinkAnimationHeader,
    pub unk_A4: *mut LinkAnimationHeader,
    pub unk_A8: *mut LinkAnimationHeader,
    pub unk_AC: [*mut LinkAnimationHeader; 4],
    pub unk_BC: [*mut LinkAnimationHeader; 2],
    pub unk_C4: [*mut LinkAnimationHeader; 2],
    pub unk_CC: [*mut LinkAnimationHeader; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct LinkAnimationHeader {
    pub common: AnimationHeaderCommon,
    pub segment: *mut libc::c_void,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimationHeaderCommon {
    pub frameCount: s16,
}
pub type PlayerFunc674
    =
    Option<unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext) -> ()>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderQuad {
    pub base: Collider,
    pub info: ColliderInfo,
    pub dim: ColliderQuadDim,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderQuadDim {
    pub quad: [Vec3f; 4],
    pub dcMid: Vec3s,
    pub baMid: Vec3s,
    pub acDist: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderInfo {
    pub toucher: ColliderTouch,
    pub bumper: ColliderBump,
    pub elemType: u8_0,
    pub toucherFlags: u8_0,
    pub bumperFlags: u8_0,
    pub ocElemFlags: u8_0,
    pub atHit: *mut Collider,
    pub acHit: *mut Collider,
    pub atHitInfo: *mut ColliderInfo,
    pub acHitInfo: *mut ColliderInfo,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderBump {
    pub dmgFlags: u32_0,
    pub effect: u8_0,
    pub defense: u8_0,
    pub hitPos: Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderTouch {
    pub dmgFlags: u32_0,
    pub effect: u8_0,
    pub damage: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderCylinder {
    pub base: Collider,
    pub info: ColliderInfo,
    pub dim: Cylinder16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct DmaRequest {
    pub vromAddr: u32_0,
    pub dramAddr: *mut libc::c_void,
    pub size: u32_0,
    pub filename: *const libc::c_char,
    pub line: s32,
    pub unk_14: s32,
    pub notifyQueue: *mut OSMesgQueue,
    pub notifyMsg: OSMesg,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Input {
    pub cur: OSContPad,
    pub prev: OSContPad,
    pub press: OSContPad,
    pub rel: OSContPad,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct FlexSkeletonHeader {
    pub sh: SkeletonHeader,
    pub dListCount: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SkeletonHeader {
    pub segment: *mut *mut libc::c_void,
    pub limbCount: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TransitionActorContext {
    pub numActors: u8_0,
    pub list: *mut TransitionActorEntry,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TransitionActorEntry {
    pub sides: [C2RustUnnamed_7; 2],
    pub id: s16,
    pub pos: Vec3s,
    pub rotY: s16,
    pub params: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_7 {
    pub room: s8,
    pub effects: s8,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct RoomContext {
    pub curRoom: Room,
    pub prevRoom: Room,
    pub bufPtrs: [*mut libc::c_void; 2],
    pub unk_30: u8_0,
    pub status: s8,
    pub unk_34: *mut libc::c_void,
    pub dmaRequest: DmaRequest,
    pub loadQueue: OSMesgQueue,
    pub loadMsg: OSMesg,
    pub unk_74: [s16; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Room {
    pub num: s8,
    pub unk_01: u8_0,
    pub unk_02: u8_0,
    pub unk_03: u8_0,
    pub echo: s8,
    pub showInvisActors: u8_0,
    pub mesh: *mut Mesh,
    pub segment: *mut libc::c_void,
    pub unk_10: [libc::c_char; 4],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union Mesh {
    pub polygon: Polygon,
    pub polygon0: PolygonType0,
    pub polygon1: PolygonType1,
    pub polygon2: PolygonType2,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PolygonType2 {
    pub type_0: u8_0,
    pub num: u8_0,
    pub start: *mut libc::c_void,
    pub end: *mut libc::c_void,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PolygonType1 {
    pub type_0: u8_0,
    pub format: u8_0,
    pub dlist: *mut Gfx,
    pub c2rust_unnamed: C2RustUnnamed_8,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_8 {
    pub single: C2RustUnnamed_10,
    pub multi: C2RustUnnamed_9,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_9 {
    pub count: u8_0,
    pub list: *mut BgImage,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct BgImage {
    pub unk_00: u16_0,
    pub id: u8_0,
    pub source: u32_0,
    pub unk_0C: u32_0,
    pub tlut: u32_0,
    pub width: u16_0,
    pub height: u16_0,
    pub fmt: u8_0,
    pub siz: u8_0,
    pub mode0: u16_0,
    pub tlutCount: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_10 {
    pub source: *mut libc::c_void,
    pub unk_0C: u32_0,
    pub tlut: *mut libc::c_void,
    pub width: u16_0,
    pub height: u16_0,
    pub fmt: u8_0,
    pub siz: u8_0,
    pub mode0: u16_0,
    pub tlutCount: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PolygonType0 {
    pub type_0: u8_0,
    pub num: u8_0,
    pub start: *mut libc::c_void,
    pub end: *mut libc::c_void,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Polygon {
    pub type_0: u8_0,
    pub num: u8_0,
    pub start: *mut libc::c_void,
    pub end: *mut libc::c_void,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ObjectContext {
    pub spaceStart: *mut libc::c_void,
    pub spaceEnd: *mut libc::c_void,
    pub num: u8_0,
    pub unk_09: u8_0,
    pub mainKeepIndex: u8_0,
    pub subKeepIndex: u8_0,
    pub status: [ObjectStatus; 19],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ObjectStatus {
    pub id: s16,
    pub segment: *mut libc::c_void,
    pub dmaRequest: DmaRequest,
    pub loadQueue: OSMesgQueue,
    pub loadMsg: OSMesg,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimationContext {
    pub animationCount: s16,
    pub entries: [AnimationEntry; 50],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimationEntry {
    pub type_0: u8_0,
    pub data: AnimationEntryData,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union AnimationEntryData {
    pub load: AnimEntryLoadFrame,
    pub copy: AnimEntryCopyAll,
    pub interp: AnimEntryInterp,
    pub copy1: AnimEntryCopyTrue,
    pub copy0: AnimEntryCopyFalse,
    pub move_0: AnimEntryMoveActor,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimEntryMoveActor {
    pub actor: *mut Actor,
    pub skelAnime: *mut SkelAnime,
    pub unk_08: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimEntryCopyFalse {
    pub queueFlag: u8_0,
    pub vecCount: u8_0,
    pub dst: *mut Vec3s,
    pub src: *mut Vec3s,
    pub copyFlag: *mut u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimEntryCopyTrue {
    pub queueFlag: u8_0,
    pub vecCount: u8_0,
    pub dst: *mut Vec3s,
    pub src: *mut Vec3s,
    pub copyFlag: *mut u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimEntryInterp {
    pub queueFlag: u8_0,
    pub vecCount: u8_0,
    pub base: *mut Vec3s,
    pub mod_0: *mut Vec3s,
    pub weight: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimEntryCopyAll {
    pub queueFlag: u8_0,
    pub vecCount: u8_0,
    pub dst: *mut Vec3s,
    pub src: *mut Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimEntryLoadFrame {
    pub req: DmaRequest,
    pub msgQueue: OSMesgQueue,
    pub msg: OSMesg,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct EnvironmentContext {
    pub unk_00: [libc::c_char; 2],
    pub timeIncrement: u16_0,
    pub sunPos: Vec3f,
    pub skybox1Index: u8_0,
    pub skybox2Index: u8_0,
    pub unk_12: [libc::c_char; 1],
    pub skyboxBlend: u8_0,
    pub unk_14: [libc::c_char; 1],
    pub skyboxDisabled: u8_0,
    pub sunMoonDisabled: u8_0,
    pub unk_17: u8_0,
    pub unk_18: u8_0,
    pub unk_19: u8_0,
    pub unk_1A: u16_0,
    pub unk_1C: [libc::c_char; 2],
    pub indoors: u8_0,
    pub unk_1F: u8_0,
    pub unk_20: u8_0,
    pub unk_21: u8_0,
    pub unk_22: u16_0,
    pub unk_24: u16_0,
    pub unk_26: [libc::c_char; 2],
    pub dirLight1: LightInfo,
    pub dirLight2: LightInfo,
    pub skyboxDmaState: s8,
    pub dmaRequest: DmaRequest,
    pub loadQueue: OSMesgQueue,
    pub loadMsg: OSMesg,
    pub unk_84: f32_0,
    pub unk_88: f32_0,
    pub adjAmbientColor: [s16; 3],
    pub adjLight1Color: [s16; 3],
    pub adjFogColor: [s16; 3],
    pub adjFogNear: s16,
    pub adjFogFar: s16,
    pub unk_A2: [libc::c_char; 6],
    pub windDirection: Vec3s,
    pub windSpeed: f32_0,
    pub numLightSettings: u8_0,
    pub lightSettingsList: *mut EnvLightSettings,
    pub blendIndoorLights: u8_0,
    pub unk_BD: u8_0,
    pub unk_BE: u8_0,
    pub unk_BF: u8_0,
    pub lightSettings: EnvLightSettings,
    pub unk_D6: u16_0,
    pub unk_D8: f32_0,
    pub unk_DC: u8_0,
    pub gloomySkyMode: u8_0,
    pub unk_DE: u8_0,
    pub lightningMode: u8_0,
    pub unk_E0: u8_0,
    pub fillScreen: u8_0,
    pub screenFillColor: [u8_0; 4],
    pub sandstormState: u8_0,
    pub sandstormPrimA: u8_0,
    pub sandstormEnvA: u8_0,
    pub customSkyboxFilter: u8_0,
    pub skyboxFilterColor: [u8_0; 4],
    pub unk_EE: [u8_0; 4],
    pub unk_F2: [u8_0; 4],
    pub unk_F6: [libc::c_char; 6],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct EnvLightSettings {
    pub ambientColor: [u8_0; 3],
    pub light1Dir: [s8; 3],
    pub light1Color: [u8_0; 3],
    pub light2Dir: [s8; 3],
    pub light2Color: [u8_0; 3],
    pub fogColor: [u8_0; 3],
    pub fogNear: s16,
    pub fogFar: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GameOverContext {
    pub state: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PauseContext {
    pub view: View,
    pub iconItemSegment: *mut u8_0,
    pub iconItem24Segment: *mut u8_0,
    pub iconItemAltSegment: *mut u8_0,
    pub iconItemLangSegment: *mut u8_0,
    pub nameSegment: *mut u8_0,
    pub playerSegment: *mut u8_0,
    pub unk_140: [libc::c_char; 4],
    pub itemPageVtx: *mut Vtx,
    pub equipPageVtx: *mut Vtx,
    pub mapPageVtx: *mut Vtx,
    pub questPageVtx: *mut Vtx,
    pub infoPanelVtx: *mut Vtx,
    pub itemVtx: *mut Vtx,
    pub equipVtx: *mut Vtx,
    pub unk_160: [libc::c_char; 4],
    pub questVtx: *mut Vtx,
    pub cursorVtx: *mut Vtx,
    pub saveVtx: *mut Vtx,
    pub unk_170: [libc::c_char; 36],
    pub ocarinaStaff: *mut OcarinaStaff,
    pub unk_198: [libc::c_char; 32],
    pub loadQueue: OSMesgQueue,
    pub loadMsg: OSMesg,
    pub state: u16_0,
    pub debugState: u16_0,
    pub eye: Vec3f,
    pub unk_1E4: u16_0,
    pub mode: u16_0,
    pub pageIndex: u16_0,
    pub unk_1EA: u16_0,
    pub unk_1EC: u16_0,
    pub unk_1F0: f32_0,
    pub unk_1F4: f32_0,
    pub unk_1F8: f32_0,
    pub unk_1FC: f32_0,
    pub unk_200: f32_0,
    pub unk_204: f32_0,
    pub alpha: u16_0,
    pub offsetY: s16,
    pub unk_20C: [libc::c_char; 8],
    pub stickRelX: s16,
    pub stickRelY: s16,
    pub cursorPoint: [s16; 5],
    pub cursorX: [s16; 5],
    pub cursorY: [s16; 5],
    pub dungeonMapSlot: s16,
    pub cursorSpecialPos: s16,
    pub pageSwitchTimer: s16,
    pub namedItem: u16_0,
    pub cursorItem: [u16_0; 4],
    pub cursorSlot: [u16_0; 4],
    pub equipTargetItem: u16_0,
    pub equipTargetSlot: u16_0,
    pub equipTargetCBtn: u16_0,
    pub equipAnimX: s16,
    pub equipAnimY: s16,
    pub equipAnimAlpha: s16,
    pub infoPanelOffsetY: s16,
    pub nameDisplayTimer: u16_0,
    pub nameColorSet: u16_0,
    pub cursorColorSet: s16,
    pub promptChoice: s16,
    pub ocarinaSongIdx: s16,
    pub worldMapPoints: [u8_0; 20],
    pub tradeQuestLocation: u8_0,
    pub playerSkelAnime: SkelAnime,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OcarinaStaff {
    pub noteIdx: u8_0,
    pub state: u8_0,
    pub pos: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct View {
    pub magic: s32,
    pub gfxCtx: *mut GraphicsContext,
    pub viewport: Viewport,
    pub fovy: f32_0,
    pub zNear: f32_0,
    pub zFar: f32_0,
    pub scale: f32_0,
    pub eye: Vec3f,
    pub lookAt: Vec3f,
    pub up: Vec3f,
    pub vp: Vp,
    pub projection: Mtx,
    pub viewing: Mtx,
    pub projectionPtr: *mut Mtx,
    pub viewingPtr: *mut Mtx,
    pub unk_E8: Vec3f,
    pub unk_F4: Vec3f,
    pub unk_100: f32_0,
    pub unk_104: Vec3f,
    pub unk_110: Vec3f,
    pub normal: u16_0,
    pub flags: s32,
    pub unk_124: s32,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Viewport {
    pub topY: s32,
    pub bottomY: s32,
    pub leftX: s32,
    pub rightX: s32,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraphicsContext {
    pub polyOpaBuffer: *mut Gfx,
    pub polyXluBuffer: *mut Gfx,
    pub unk_008: [libc::c_char; 8],
    pub overlayBuffer: *mut Gfx,
    pub unk_014: u32_0,
    pub unk_018: [libc::c_char; 32],
    pub msgBuff: [OSMesg; 8],
    pub schedMsgQ: *mut OSMesgQueue,
    pub queue: OSMesgQueue,
    pub unk_074: [libc::c_char; 4],
    pub task: OSScTask,
    pub unk_0D0: [libc::c_char; 224],
    pub workBuffer: *mut Gfx,
    pub work: TwoHeadGfxArena,
    pub unk_01C4: [libc::c_char; 192],
    pub viMode: *mut OSViMode,
    pub unk_0288: [libc::c_char; 32],
    pub overlay: TwoHeadGfxArena,
    pub polyOpa: TwoHeadGfxArena,
    pub polyXlu: TwoHeadGfxArena,
    pub gfxPoolIdx: u32_0,
    pub curFrameBuffer: *mut u16_0,
    pub unk_2E0: [libc::c_char; 4],
    pub viFeatures: u32_0,
    pub fbIdx: s32,
    pub callback: Option<unsafe extern "C" fn(_: *mut GraphicsContext,
                                              _: *mut libc::c_void) -> ()>,
    pub callbackParam: *mut libc::c_void,
    pub xScale: f32_0,
    pub yScale: f32_0,
    pub unk_2FC: [libc::c_char; 4],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TwoHeadGfxArena {
    pub size: u32_0,
    pub bufp: *mut Gfx,
    pub p: *mut Gfx,
    pub d: *mut Gfx,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSScTask {
    pub next: *mut OSScTask,
    pub state: u32_0,
    pub flags: u32_0,
    pub framebuffer: *mut CfbInfo,
    pub list: OSTask,
    pub msgQ: *mut OSMesgQueue,
    pub msg: OSMesg,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CfbInfo {
    pub fb1: *mut u16_0,
    pub swapBuffer: *mut u16_0,
    pub viMode: *mut OSViMode,
    pub features: u32_0,
    pub unk_10: u8_0,
    pub updateRate: s8,
    pub updateRate2: s8,
    pub unk_13: u8_0,
    pub xScale: f32_0,
    pub yScale: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct InterfaceContext {
    pub view: View,
    pub actionVtx: *mut Vtx,
    pub beatingHeartVtx: *mut Vtx,
    pub parameterSegment: *mut u8_0,
    pub doActionSegment: *mut u8_0,
    pub iconItemSegment: *mut u8_0,
    pub mapSegment: *mut u8_0,
    pub mapPalette: [u8_0; 32],
    pub dmaRequest_160: DmaRequest,
    pub dmaRequest_180: DmaRequest,
    pub unk_1A0: [libc::c_char; 32],
    pub loadQueue: OSMesgQueue,
    pub loadMsg: OSMesg,
    pub viewport: Viewport,
    pub unk_1EC: s16,
    pub unk_1EE: u16_0,
    pub unk_1F0: u16_0,
    pub unk_1F4: f32_0,
    pub naviCalling: s16,
    pub unk_1FA: s16,
    pub unk_1FC: s16,
    pub unk_1FE: s16,
    pub unk_200: s16,
    pub beatingHeartPrim: [s16; 3],
    pub beatingHeartEnv: [s16; 3],
    pub heartsPrimR: [s16; 2],
    pub heartsPrimG: [s16; 2],
    pub heartsPrimB: [s16; 2],
    pub heartsEnvR: [s16; 2],
    pub heartsEnvG: [s16; 2],
    pub heartsEnvB: [s16; 2],
    pub unk_226: s16,
    pub unk_228: s16,
    pub unk_22A: s16,
    pub unk_22C: s16,
    pub unk_22E: s16,
    pub unk_230: s16,
    pub counterDigits: [s16; 4],
    pub numHorseBoosts: u8_0,
    pub unk_23C: u16_0,
    pub hbaAmmo: u16_0,
    pub unk_240: u16_0,
    pub unk_242: u16_0,
    pub unk_244: u16_0,
    pub aAlpha: u16_0,
    pub bAlpha: u16_0,
    pub cLeftAlpha: u16_0,
    pub cDownAlpha: u16_0,
    pub cRightAlpha: u16_0,
    pub healthAlpha: u16_0,
    pub magicAlpha: u16_0,
    pub minimapAlpha: u16_0,
    pub startAlpha: s16,
    pub unk_258: s16,
    pub unk_25A: s16,
    pub mapRoomNum: s16,
    pub mapPaletteIndex: s16,
    pub unk_260: u8_0,
    pub unk_261: u8_0,
    pub restrictions: C2RustUnnamed_11,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_11 {
    pub hGauge: u8_0,
    pub bButton: u8_0,
    pub aButton: u8_0,
    pub bottles: u8_0,
    pub tradeItems: u8_0,
    pub hookshot: u8_0,
    pub ocarina: u8_0,
    pub warpSongs: u8_0,
    pub sunsSong: u8_0,
    pub farores: u8_0,
    pub dinsNayrus: u8_0,
    pub all: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct MessageContext {
    pub view: View,
    pub font: Font,
    pub textboxSegment: *mut libc::c_void,
    pub unk_E2B4: [libc::c_char; 4],
    pub ocarinaStaff: *mut OcarinaStaff,
    pub unk_E2BC: [libc::c_char; 60],
    pub textId: u16_0,
    pub choiceTextId: u16_0,
    pub textBoxProperties: u8_0,
    pub textBoxType: u8_0,
    pub textBoxPos: u8_0,
    pub msgLength: s32,
    pub msgMode: u8_0,
    pub unk_E305: [libc::c_char; 1],
    pub msgBufDecoded: [u8_0; 200],
    pub msgBufPos: u16_0,
    pub unk_E3D0: u16_0,
    pub textDrawPos: u16_0,
    pub decodedTextLen: u16_0,
    pub textUnskippable: u16_0,
    pub textPosX: s16,
    pub textPosY: s16,
    pub textColorR: s16,
    pub textColorG: s16,
    pub textColorB: s16,
    pub textColorAlpha: s16,
    pub textboxEndType: u8_0,
    pub choiceIndex: u8_0,
    pub choiceNum: u8_0,
    pub stateTimer: u8_0,
    pub textDelayTimer: u16_0,
    pub textDelay: u16_0,
    pub lastPlayedSong: u16_0,
    pub ocarinaMode: u16_0,
    pub ocarinaAction: u16_0,
    pub unk_E3F2: u16_0,
    pub unk_E3F4: u16_0,
    pub textboxBackgroundIdx: u16_0,
    pub textboxBackgroundForeColorIdx: u8_0,
    pub textboxBackgroundBackColorIdx: u8_0,
    pub textboxBackgroundYOffsetIdx: u8_0,
    pub textboxBackgroundUnkArg: u8_0,
    pub unk_E3FC: [libc::c_char; 2],
    pub textboxColorRed: s16,
    pub textboxColorGreen: s16,
    pub textboxColorBlue: s16,
    pub textboxColorAlphaTarget: s16,
    pub textboxColorAlphaCurrent: s16,
    pub talkActor: *mut Actor,
    pub disableWarpSongs: s16,
    pub unk_E40E: s16,
    pub lastOcaNoteIdx: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Font {
    pub msgOffset: u32_0,
    pub msgLength: u32_0,
    pub charTexBuf: [u8_0; 15360],
    pub iconBuf: [u8_0; 128],
    pub fontBuf: [u8_0; 40960],
    pub c2rust_unnamed: C2RustUnnamed_12,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_12 {
    pub msgBuf: [libc::c_char; 1280],
    pub msgBufWide: [u16_0; 640],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SkyboxContext {
    pub unk_00: [libc::c_char; 296],
    pub staticSegments: [*mut libc::c_void; 2],
    pub palettes: *mut [u16_0; 256],
    pub dListBuf: *mut [Gfx; 150],
    pub unk_138: *mut Gfx,
    pub roomVtx: *mut Vtx,
    pub unk_140: s16,
    pub rot: Vec3f,
    pub unk_150: [libc::c_char; 16],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SramContext {
    pub readBuff: *mut u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SoundSource {
    pub countdown: u16_0,
    pub originPos: Vec3f,
    pub relativePos: Vec3f,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CutsceneContext {
    pub unk_00: [libc::c_char; 4],
    pub segment: *mut libc::c_void,
    pub state: u8_0,
    pub unk_0C: f32_0,
    pub frames: u16_0,
    pub unk_12: u16_0,
    pub unk_14: s32,
    pub unk_18: u16_0,
    pub unk_1A: u8_0,
    pub unk_1B: u8_0,
    pub cameraFocus: *mut CutsceneCameraPoint,
    pub cameraPosition: *mut CutsceneCameraPoint,
    pub linkAction: *mut CsCmdActorAction,
    pub npcActions: [*mut CsCmdActorAction; 10],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CsCmdActorAction {
    pub action: u16_0,
    pub startFrame: u16_0,
    pub endFrame: u16_0,
    pub c2rust_unnamed: C2RustUnnamed_13,
    pub startPos: Vec3i,
    pub endPos: Vec3i,
    pub normal: Vec3i,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_13 {
    pub rot: Vec3s,
    pub urot: Vec3us,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CutsceneCameraPoint {
    pub continueFlag: s8,
    pub cameraRoll: s8,
    pub nextPointFrame: u16_0,
    pub viewAngle: f32_0,
    pub pos: Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ActorContext {
    pub freezeFlashTimer: u8_0,
    pub unk_01: [libc::c_char; 1],
    pub unk_02: u8_0,
    pub unk_03: u8_0,
    pub unk_04: [libc::c_char; 4],
    pub total: u8_0,
    pub unk_09: [libc::c_char; 3],
    pub actorLists: [ActorListEntry; 12],
    pub targetCtx: TargetContext,
    pub flags: C2RustUnnamed_14,
    pub titleCtx: TitleCardContext,
    pub unk_138: [libc::c_char; 4],
    pub absoluteSpace: *mut libc::c_void,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TitleCardContext {
    pub texture: *mut libc::c_void,
    pub x: s16,
    pub y: s16,
    pub width: u8_0,
    pub height: u8_0,
    pub durationTimer: u8_0,
    pub delayTimer: u8_0,
    pub alpha: s16,
    pub intensity: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_14 {
    pub swch: u32_0,
    pub tempSwch: u32_0,
    pub unk0: u32_0,
    pub unk1: u32_0,
    pub chest: u32_0,
    pub clear: u32_0,
    pub tempClear: u32_0,
    pub collect: u32_0,
    pub tempCollect: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TargetContext {
    pub naviRefPos: Vec3f,
    pub targetCenterPos: Vec3f,
    pub naviInner: Color_RGBAf,
    pub naviOuter: Color_RGBAf,
    pub arrowPointedActor: *mut Actor,
    pub targetedActor: *mut Actor,
    pub unk_40: f32_0,
    pub unk_44: f32_0,
    pub unk_48: s16,
    pub activeCategory: u8_0,
    pub unk_4B: u8_0,
    pub unk_4C: s8,
    pub unk_4D: [libc::c_char; 3],
    pub arr_50: [TargetContextEntry; 3],
    pub unk_8C: *mut Actor,
    pub bgmEnemy: *mut Actor,
    pub unk_94: *mut Actor,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TargetContextEntry {
    pub pos: Vec3f,
    pub unk_0C: f32_0,
    pub color: Color_RGB8,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ActorListEntry {
    pub length: s32,
    pub head: *mut Actor,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CollisionContext {
    pub colHeader: *mut CollisionHeader,
    pub minBounds: Vec3f,
    pub maxBounds: Vec3f,
    pub subdivAmount: Vec3i,
    pub subdivLength: Vec3f,
    pub subdivLengthInv: Vec3f,
    pub lookupTbl: *mut StaticLookup,
    pub polyNodes: SSNodeList,
    pub dyna: DynaCollisionContext,
    pub memSize: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct DynaCollisionContext {
    pub bitFlag: u8_0,
    pub bgActors: [BgActor; 50],
    pub bgActorFlags: [u16_0; 50],
    pub polyList: *mut CollisionPoly,
    pub vtxList: *mut Vec3s,
    pub polyNodes: DynaSSNodeList,
    pub polyNodesMax: s32,
    pub polyListMax: s32,
    pub vtxListMax: s32,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct DynaSSNodeList {
    pub tbl: *mut SSNode,
    pub count: s32,
    pub max: s32,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SSNode {
    pub polyId: s16,
    pub next: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct BgActor {
    pub actor: *mut Actor,
    pub colHeader: *mut CollisionHeader,
    pub dynaLookup: DynaLookup,
    pub vtxStartIndex: u16_0,
    pub prevTransform: ScaleRotPos,
    pub curTransform: ScaleRotPos,
    pub boundingSphere: Sphere16,
    pub minY: f32_0,
    pub maxY: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ScaleRotPos {
    pub scale: Vec3f,
    pub rot: Vec3s,
    pub pos: Vec3f,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct DynaLookup {
    pub polyStartIndex: u16_0,
    pub ceiling: SSList,
    pub wall: SSList,
    pub floor: SSList,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SSList {
    pub head: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CollisionHeader {
    pub minBounds: Vec3s,
    pub maxBounds: Vec3s,
    pub numVertices: u16_0,
    pub vtxList: *mut Vec3s,
    pub numPolygons: u16_0,
    pub polyList: *mut CollisionPoly,
    pub surfaceTypeList: *mut SurfaceType,
    pub cameraDataList: *mut CamData,
    pub numWaterBoxes: u16_0,
    pub waterBoxes: *mut WaterBox,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct WaterBox {
    pub xMin: s16,
    pub ySurface: s16,
    pub zMin: s16,
    pub xLength: s16,
    pub zLength: s16,
    pub properties: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CamData {
    pub cameraSType: u16_0,
    pub numCameras: s16,
    pub camPosData: *mut Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SurfaceType {
    pub data: [u32_0; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SSNodeList {
    pub max: u16_0,
    pub count: u16_0,
    pub tbl: *mut SSNode,
    pub polyCheckTbl: *mut u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct StaticLookup {
    pub floor: SSList,
    pub wall: SSList,
    pub ceiling: SSList,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct FrameAdvanceContext {
    pub enabled: s32,
    pub timer: s32,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SequenceContext {
    pub seqId: u8_0,
    pub natureAmbienceId: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Camera {
    pub paramData: [libc::c_char; 80],
    pub at: Vec3f,
    pub eye: Vec3f,
    pub up: Vec3f,
    pub eyeNext: Vec3f,
    pub skyboxOffset: Vec3f,
    pub globalCtx: *mut GlobalContext,
    pub player: *mut Player,
    pub playerPosRot: PosRot,
    pub target: *mut Actor,
    pub targetPosRot: PosRot,
    pub rUpdateRateInv: f32_0,
    pub pitchUpdateRateInv: f32_0,
    pub yawUpdateRateInv: f32_0,
    pub xzOffsetUpdateRate: f32_0,
    pub yOffsetUpdateRate: f32_0,
    pub fovUpdateRate: f32_0,
    pub xzSpeed: f32_0,
    pub dist: f32_0,
    pub speedRatio: f32_0,
    pub posOffset: Vec3f,
    pub playerPosDelta: Vec3f,
    pub fov: f32_0,
    pub atLERPStepScale: f32_0,
    pub playerGroundY: f32_0,
    pub floorNorm: Vec3f,
    pub waterYPos: f32_0,
    pub waterPrevCamIdx: s32,
    pub waterPrevCamSetting: s32,
    pub waterQuakeId: s32,
    pub data0: *mut libc::c_void,
    pub data1: *mut libc::c_void,
    pub data2: s16,
    pub data3: s16,
    pub uid: s16,
    pub unk_132: [libc::c_char; 2],
    pub inputDir: Vec3s,
    pub camDir: Vec3s,
    pub status: s16,
    pub setting: s16,
    pub mode: s16,
    pub bgCheckId: s16,
    pub camDataIdx: s16,
    pub unk_14A: s16,
    pub unk_14C: s16,
    pub childCamIdx: s16,
    pub unk_150: s16,
    pub unk_152: s16,
    pub prevSetting: s16,
    pub nextCamDataIdx: s16,
    pub nextBGCheckId: s16,
    pub roll: s16,
    pub paramFlags: s16,
    pub animState: s16,
    pub timer: s16,
    pub parentCamIdx: s16,
    pub thisIdx: s16,
    pub prevCamDataIdx: s16,
    pub csId: s16,
    pub unk_16A: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GameState {
    pub gfxCtx: *mut GraphicsContext,
    pub main: GameStateFunc,
    pub destroy: GameStateFunc,
    pub init: GameStateFunc,
    pub size: u32_0,
    pub input: [Input; 4],
    pub tha: TwoHeadArena,
    pub alloc: GameAlloc,
    pub running: u32_0,
    pub frames: u32_0,
    pub unk_A0: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GameAlloc {
    pub base: GameAllocEntry,
    pub head: *mut GameAllocEntry,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GameAllocEntry {
    pub next: *mut GameAllocEntry,
    pub prev: *mut GameAllocEntry,
    pub size: u32_0,
    pub unk_0C: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TwoHeadArena {
    pub size: u32_0,
    pub bufp: *mut libc::c_void,
    pub head: *mut libc::c_void,
    pub tail: *mut libc::c_void,
}
pub type GameStateFunc
    =
    Option<unsafe extern "C" fn(_: *mut GameState) -> ()>;
pub type C2RustUnnamed_15 = libc::c_uint;
pub const SKYBOX_DMA_PAL2_START: C2RustUnnamed_15 = 13;
pub const SKYBOX_DMA_FILE2_DONE: C2RustUnnamed_15 = 12;
pub const SKYBOX_DMA_FILE2_START: C2RustUnnamed_15 = 11;
pub const SKYBOX_DMA_PAL1_START: C2RustUnnamed_15 = 3;
pub const SKYBOX_DMA_FILE1_DONE: C2RustUnnamed_15 = 2;
pub const SKYBOX_DMA_FILE1_START: C2RustUnnamed_15 = 1;
pub const SKYBOX_DMA_INACTIVE: C2RustUnnamed_15 = 0;
pub type C2RustUnnamed_16 = libc::c_uint;
pub const EQUIP_BOOTS: C2RustUnnamed_16 = 3;
pub const EQUIP_TUNIC: C2RustUnnamed_16 = 2;
pub const EQUIP_SHIELD: C2RustUnnamed_16 = 1;
pub const EQUIP_SWORD: C2RustUnnamed_16 = 0;
pub type C2RustUnnamed_17 = libc::c_uint;
pub const ITEM_NONE: C2RustUnnamed_17 = 255;
pub const ITEM_NONE_FE: C2RustUnnamed_17 = 254;
pub const ITEM_LAST_USED: C2RustUnnamed_17 = 252;
pub const ITEM_NUT_UPGRADE_40: C2RustUnnamed_17 = 155;
pub const ITEM_NUT_UPGRADE_30: C2RustUnnamed_17 = 154;
pub const ITEM_STICK_UPGRADE_30: C2RustUnnamed_17 = 153;
pub const ITEM_STICK_UPGRADE_20: C2RustUnnamed_17 = 152;
pub const ITEM_BOMBCHUS_20: C2RustUnnamed_17 = 151;
pub const ITEM_BOMBCHUS_5: C2RustUnnamed_17 = 150;
pub const ITEM_SEEDS_30: C2RustUnnamed_17 = 149;
pub const ITEM_ARROWS_LARGE: C2RustUnnamed_17 = 148;
pub const ITEM_ARROWS_MEDIUM: C2RustUnnamed_17 = 147;
pub const ITEM_ARROWS_SMALL: C2RustUnnamed_17 = 146;
pub const ITEM_BOMBS_30: C2RustUnnamed_17 = 145;
pub const ITEM_BOMBS_20: C2RustUnnamed_17 = 144;
pub const ITEM_BOMBS_10: C2RustUnnamed_17 = 143;
pub const ITEM_BOMBS_5: C2RustUnnamed_17 = 142;
pub const ITEM_NUTS_10: C2RustUnnamed_17 = 141;
pub const ITEM_NUTS_5: C2RustUnnamed_17 = 140;
pub const ITEM_STICKS_10: C2RustUnnamed_17 = 139;
pub const ITEM_STICKS_5: C2RustUnnamed_17 = 138;
pub const ITEM_INVALID_8: C2RustUnnamed_17 = 137;
pub const ITEM_RUPEE_GOLD: C2RustUnnamed_17 = 136;
pub const ITEM_RUPEE_PURPLE: C2RustUnnamed_17 = 135;
pub const ITEM_RUPEE_RED: C2RustUnnamed_17 = 134;
pub const ITEM_RUPEE_BLUE: C2RustUnnamed_17 = 133;
pub const ITEM_RUPEE_GREEN: C2RustUnnamed_17 = 132;
pub const ITEM_HEART: C2RustUnnamed_17 = 131;
pub const ITEM_MILK: C2RustUnnamed_17 = 130;
pub const ITEM_INVALID_7: C2RustUnnamed_17 = 129;
pub const ITEM_INVALID_6: C2RustUnnamed_17 = 128;
pub const ITEM_INVALID_5: C2RustUnnamed_17 = 127;
pub const ITEM_INVALID_4: C2RustUnnamed_17 = 126;
pub const ITEM_INVALID_3: C2RustUnnamed_17 = 125;
pub const ITEM_INVALID_2: C2RustUnnamed_17 = 124;
pub const ITEM_INVALID_1: C2RustUnnamed_17 = 123;
pub const ITEM_HEART_PIECE_2: C2RustUnnamed_17 = 122;
pub const ITEM_MAGIC_LARGE: C2RustUnnamed_17 = 121;
pub const ITEM_MAGIC_SMALL: C2RustUnnamed_17 = 120;
pub const ITEM_KEY_SMALL: C2RustUnnamed_17 = 119;
pub const ITEM_DUNGEON_MAP: C2RustUnnamed_17 = 118;
pub const ITEM_COMPASS: C2RustUnnamed_17 = 117;
pub const ITEM_KEY_BOSS: C2RustUnnamed_17 = 116;
pub const ITEM_HEART_PIECE: C2RustUnnamed_17 = 115;
pub const ITEM_HEART_CONTAINER: C2RustUnnamed_17 = 114;
pub const ITEM_SKULL_TOKEN: C2RustUnnamed_17 = 113;
pub const ITEM_GERUDO_CARD: C2RustUnnamed_17 = 112;
pub const ITEM_STONE_OF_AGONY: C2RustUnnamed_17 = 111;
pub const ITEM_ZORA_SAPPHIRE: C2RustUnnamed_17 = 110;
pub const ITEM_GORON_RUBY: C2RustUnnamed_17 = 109;
pub const ITEM_KOKIRI_EMERALD: C2RustUnnamed_17 = 108;
pub const ITEM_MEDALLION_LIGHT: C2RustUnnamed_17 = 107;
pub const ITEM_MEDALLION_SHADOW: C2RustUnnamed_17 = 106;
pub const ITEM_MEDALLION_SPIRIT: C2RustUnnamed_17 = 105;
pub const ITEM_MEDALLION_WATER: C2RustUnnamed_17 = 104;
pub const ITEM_MEDALLION_FIRE: C2RustUnnamed_17 = 103;
pub const ITEM_MEDALLION_FOREST: C2RustUnnamed_17 = 102;
pub const ITEM_SONG_STORMS: C2RustUnnamed_17 = 101;
pub const ITEM_SONG_TIME: C2RustUnnamed_17 = 100;
pub const ITEM_SONG_SUN: C2RustUnnamed_17 = 99;
pub const ITEM_SONG_SARIA: C2RustUnnamed_17 = 98;
pub const ITEM_SONG_EPONA: C2RustUnnamed_17 = 97;
pub const ITEM_SONG_LULLABY: C2RustUnnamed_17 = 96;
pub const ITEM_SONG_PRELUDE: C2RustUnnamed_17 = 95;
pub const ITEM_SONG_NOCTURNE: C2RustUnnamed_17 = 94;
pub const ITEM_SONG_REQUIEM: C2RustUnnamed_17 = 93;
pub const ITEM_SONG_SERENADE: C2RustUnnamed_17 = 92;
pub const ITEM_SONG_BOLERO: C2RustUnnamed_17 = 91;
pub const ITEM_SONG_MINUET: C2RustUnnamed_17 = 90;
pub const ITEM_FISHING_POLE: C2RustUnnamed_17 = 89;
pub const ITEM_SEEDS: C2RustUnnamed_17 = 88;
pub const ITEM_WALLET_GIANT: C2RustUnnamed_17 = 87;
pub const ITEM_WALLET_ADULT: C2RustUnnamed_17 = 86;
pub const ITEM_SWORD_KNIFE: C2RustUnnamed_17 = 85;
pub const ITEM_SCALE_GOLDEN: C2RustUnnamed_17 = 84;
pub const ITEM_SCALE_SILVER: C2RustUnnamed_17 = 83;
pub const ITEM_GAUNTLETS_GOLD: C2RustUnnamed_17 = 82;
pub const ITEM_GAUNTLETS_SILVER: C2RustUnnamed_17 = 81;
pub const ITEM_BRACELET: C2RustUnnamed_17 = 80;
pub const ITEM_BOMB_BAG_40: C2RustUnnamed_17 = 79;
pub const ITEM_BOMB_BAG_30: C2RustUnnamed_17 = 78;
pub const ITEM_BOMB_BAG_20: C2RustUnnamed_17 = 77;
pub const ITEM_QUIVER_50: C2RustUnnamed_17 = 76;
pub const ITEM_QUIVER_40: C2RustUnnamed_17 = 75;
pub const ITEM_QUIVER_30: C2RustUnnamed_17 = 74;
pub const ITEM_BULLET_BAG_50: C2RustUnnamed_17 = 73;
pub const ITEM_BULLET_BAG_40: C2RustUnnamed_17 = 72;
pub const ITEM_BULLET_BAG_30: C2RustUnnamed_17 = 71;
pub const ITEM_BOOTS_HOVER: C2RustUnnamed_17 = 70;
pub const ITEM_BOOTS_IRON: C2RustUnnamed_17 = 69;
pub const ITEM_BOOTS_KOKIRI: C2RustUnnamed_17 = 68;
pub const ITEM_TUNIC_ZORA: C2RustUnnamed_17 = 67;
pub const ITEM_TUNIC_GORON: C2RustUnnamed_17 = 66;
pub const ITEM_TUNIC_KOKIRI: C2RustUnnamed_17 = 65;
pub const ITEM_SHIELD_MIRROR: C2RustUnnamed_17 = 64;
pub const ITEM_SHIELD_HYLIAN: C2RustUnnamed_17 = 63;
pub const ITEM_SHIELD_DEKU: C2RustUnnamed_17 = 62;
pub const ITEM_SWORD_BGS: C2RustUnnamed_17 = 61;
pub const ITEM_SWORD_MASTER: C2RustUnnamed_17 = 60;
pub const ITEM_SWORD_KOKIRI: C2RustUnnamed_17 = 59;
pub const ITEM_BOW_ARROW_LIGHT: C2RustUnnamed_17 = 58;
pub const ITEM_BOW_ARROW_ICE: C2RustUnnamed_17 = 57;
pub const ITEM_BOW_ARROW_FIRE: C2RustUnnamed_17 = 56;
pub const ITEM_CLAIM_CHECK: C2RustUnnamed_17 = 55;
pub const ITEM_EYEDROPS: C2RustUnnamed_17 = 54;
pub const ITEM_FROG: C2RustUnnamed_17 = 53;
pub const ITEM_PRESCRIPTION: C2RustUnnamed_17 = 52;
pub const ITEM_SWORD_BROKEN: C2RustUnnamed_17 = 51;
pub const ITEM_SAW: C2RustUnnamed_17 = 50;
pub const ITEM_ODD_POTION: C2RustUnnamed_17 = 49;
pub const ITEM_ODD_MUSHROOM: C2RustUnnamed_17 = 48;
pub const ITEM_COJIRO: C2RustUnnamed_17 = 47;
pub const ITEM_POCKET_CUCCO: C2RustUnnamed_17 = 46;
pub const ITEM_POCKET_EGG: C2RustUnnamed_17 = 45;
pub const ITEM_SOLD_OUT: C2RustUnnamed_17 = 44;
pub const ITEM_MASK_TRUTH: C2RustUnnamed_17 = 43;
pub const ITEM_MASK_GERUDO: C2RustUnnamed_17 = 42;
pub const ITEM_MASK_ZORA: C2RustUnnamed_17 = 41;
pub const ITEM_MASK_GORON: C2RustUnnamed_17 = 40;
pub const ITEM_MASK_BUNNY: C2RustUnnamed_17 = 39;
pub const ITEM_MASK_SPOOKY: C2RustUnnamed_17 = 38;
pub const ITEM_MASK_SKULL: C2RustUnnamed_17 = 37;
pub const ITEM_MASK_KEATON: C2RustUnnamed_17 = 36;
pub const ITEM_LETTER_ZELDA: C2RustUnnamed_17 = 35;
pub const ITEM_CHICKEN: C2RustUnnamed_17 = 34;
pub const ITEM_WEIRD_EGG: C2RustUnnamed_17 = 33;
pub const ITEM_POE: C2RustUnnamed_17 = 32;
pub const ITEM_MILK_HALF: C2RustUnnamed_17 = 31;
pub const ITEM_BIG_POE: C2RustUnnamed_17 = 30;
pub const ITEM_BUG: C2RustUnnamed_17 = 29;
pub const ITEM_BLUE_FIRE: C2RustUnnamed_17 = 28;
pub const ITEM_LETTER_RUTO: C2RustUnnamed_17 = 27;
pub const ITEM_MILK_BOTTLE: C2RustUnnamed_17 = 26;
pub const ITEM_FISH: C2RustUnnamed_17 = 25;
pub const ITEM_FAIRY: C2RustUnnamed_17 = 24;
pub const ITEM_POTION_BLUE: C2RustUnnamed_17 = 23;
pub const ITEM_POTION_GREEN: C2RustUnnamed_17 = 22;
pub const ITEM_POTION_RED: C2RustUnnamed_17 = 21;
pub const ITEM_BOTTLE: C2RustUnnamed_17 = 20;
pub const ITEM_NAYRUS_LOVE: C2RustUnnamed_17 = 19;
pub const ITEM_ARROW_LIGHT: C2RustUnnamed_17 = 18;
pub const ITEM_HAMMER: C2RustUnnamed_17 = 17;
pub const ITEM_BEAN: C2RustUnnamed_17 = 16;
pub const ITEM_LENS: C2RustUnnamed_17 = 15;
pub const ITEM_BOOMERANG: C2RustUnnamed_17 = 14;
pub const ITEM_FARORES_WIND: C2RustUnnamed_17 = 13;
pub const ITEM_ARROW_ICE: C2RustUnnamed_17 = 12;
pub const ITEM_LONGSHOT: C2RustUnnamed_17 = 11;
pub const ITEM_HOOKSHOT: C2RustUnnamed_17 = 10;
pub const ITEM_BOMBCHU: C2RustUnnamed_17 = 9;
pub const ITEM_OCARINA_TIME: C2RustUnnamed_17 = 8;
pub const ITEM_OCARINA_FAIRY: C2RustUnnamed_17 = 7;
pub const ITEM_SLINGSHOT: C2RustUnnamed_17 = 6;
pub const ITEM_DINS_FIRE: C2RustUnnamed_17 = 5;
pub const ITEM_ARROW_FIRE: C2RustUnnamed_17 = 4;
pub const ITEM_BOW: C2RustUnnamed_17 = 3;
pub const ITEM_BOMB: C2RustUnnamed_17 = 2;
pub const ITEM_NUT: C2RustUnnamed_17 = 1;
pub const ITEM_STICK: C2RustUnnamed_17 = 0;
pub type C2RustUnnamed_18 = libc::c_uint;
pub const SEQ_PLAYER_BGM_SUB: C2RustUnnamed_18 = 3;
pub const SEQ_PLAYER_SFX: C2RustUnnamed_18 = 2;
pub const SEQ_PLAYER_FANFARE: C2RustUnnamed_18 = 1;
pub const SEQ_PLAYER_BGM_MAIN: C2RustUnnamed_18 = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GameInfo {
    pub regPage: s32,
    pub regGroup: s32,
    pub regCur: s32,
    pub dpadLast: s32,
    pub repeat: s32,
    pub data: [s16; 2784],
}
pub type C2RustUnnamed_19 = libc::c_uint;
pub const SKYBOX_UNSET_27: C2RustUnnamed_19 = 39;
pub const SKYBOX_HOUSE_ALLEY: C2RustUnnamed_19 = 34;
pub const SKYBOX_HOUSE_SARIA: C2RustUnnamed_19 = 33;
pub const SKYBOX_HOUSE_MIDO: C2RustUnnamed_19 = 32;
pub const SKYBOX_UNSET_1D: C2RustUnnamed_19 = 29;
pub const SKYBOX_TENT: C2RustUnnamed_19 = 28;
pub const SKYBOX_HOUSE_IMPA: C2RustUnnamed_19 = 27;
pub const SKYBOX_HOUSE_RICHARD: C2RustUnnamed_19 = 26;
pub const SKYBOX_BOMBCHU_SHOP: C2RustUnnamed_19 = 24;
pub const SKYBOX_POTION_SHOP_MARKET: C2RustUnnamed_19 = 23;
pub const SKYBOX_POTION_SHOP_KAKARIKO: C2RustUnnamed_19 = 22;
pub const SKYBOX_ZORA_SHOP: C2RustUnnamed_19 = 20;
pub const SKYBOX_GORON_SHOP: C2RustUnnamed_19 = 19;
pub const SKYBOX_KOKIRI_SHOP: C2RustUnnamed_19 = 17;
pub const SKYBOX_HOUSE_KAKARIKO: C2RustUnnamed_19 = 16;
pub const SKYBOX_STABLES: C2RustUnnamed_19 = 15;
pub const SKYBOX_HOUSE_OF_TWINS: C2RustUnnamed_19 = 14;
pub const SKYBOX_HOUSE_KNOW_IT_ALL_BROTHERS: C2RustUnnamed_19 = 12;
pub const SKYBOX_HAPPY_MASK_SHOP: C2RustUnnamed_19 = 11;
pub const SKYBOX_MARKET_CHILD_NIGHT: C2RustUnnamed_19 = 10;
pub const SKYBOX_MARKET_CHILD_DAY: C2RustUnnamed_19 = 9;
pub const SKYBOX_HOUSE_LINK: C2RustUnnamed_19 = 7;
pub const SKYBOX_CUTSCENE_MAP: C2RustUnnamed_19 = 5;
pub const SKYBOX_MARKET_ADULT: C2RustUnnamed_19 = 4;
pub const SKYBOX_OVERCAST_SUNSET: C2RustUnnamed_19 = 3;
pub const SKYBOX_BAZAAR: C2RustUnnamed_19 = 2;
pub const SKYBOX_NORMAL_SKY: C2RustUnnamed_19 = 1;
pub const SKYBOX_NONE: C2RustUnnamed_19 = 0;
pub type C2RustUnnamed_20 = libc::c_uint;
pub const LANGUAGE_MAX: C2RustUnnamed_20 = 3;
pub const LANGUAGE_FRA: C2RustUnnamed_20 = 2;
pub const LANGUAGE_GER: C2RustUnnamed_20 = 1;
pub const LANGUAGE_ENG: C2RustUnnamed_20 = 0;
pub type C2RustUnnamed_21 = libc::c_uint;
pub const SRAM_HEADER_MAGIC: C2RustUnnamed_21 = 3;
pub const SRAM_HEADER_LANGUAGE: C2RustUnnamed_21 = 2;
pub const SRAM_HEADER_ZTARGET: C2RustUnnamed_21 = 1;
pub const SRAM_HEADER_SOUND: C2RustUnnamed_21 = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SelectContext {
    pub state: GameState,
    pub view: View,
    pub count: s32,
    pub scenes: *mut SceneSelectEntry,
    pub currentScene: s32,
    pub pageDownIndex: s32,
    pub pageDownStops: [s32; 7],
    pub unk_1FC: [libc::c_char; 12],
    pub opt: s32,
    pub topDisplayedScene: s32,
    pub unk_210: [libc::c_char; 12],
    pub verticalInputAccumulator: s32,
    pub verticalInput: s32,
    pub timerUp: s32,
    pub timerDown: s32,
    pub lockUp: s32,
    pub lockDown: s32,
    pub unk_234: s32,
    pub staticSegment: *mut u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SceneSelectEntry {
    pub name: *mut libc::c_char,
    pub loadFunc: Option<unsafe extern "C" fn(_: *mut SelectContext, _: s32)
                             -> ()>,
    pub entranceIndex: s32,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct FileChooseContext {
    pub state: GameState,
    pub windowVtx: *mut Vtx,
    pub staticSegment: *mut u8_0,
    pub parameterSegment: *mut u8_0,
    pub unk_B0: [libc::c_char; 8],
    pub view: View,
    pub sramCtx: SramContext,
    pub unk_1E4: [libc::c_char; 4],
    pub skyboxCtx: SkyboxContext,
    pub msgCtx: MessageContext,
    pub font: Font,
    pub envCtx: EnvironmentContext,
    pub unk_1C9E4: [libc::c_char; 4],
    pub windowContentVtx: *mut Vtx,
    pub keyboardVtx: *mut Vtx,
    pub nameEntryVtx: *mut Vtx,
    pub n64ddFlag: u8_0,
    pub deaths: [u16_0; 3],
    pub fileNames: [[u8_0; 8]; 3],
    pub healthCapacities: [u16_0; 3],
    pub questItems: [u32_0; 3],
    pub n64ddFlags: [s16; 3],
    pub defense: [s8; 3],
    pub health: [u16_0; 3],
    pub buttonIndex: s16,
    pub confirmButtonIndex: s16,
    pub menuMode: s16,
    pub configMode: s16,
    pub prevConfigMode: s16,
    pub nextConfigMode: s16,
    pub selectMode: s16,
    pub selectedFileIndex: s16,
    pub unk_1CA48: [libc::c_char; 2],
    pub fileNamesY: [s16; 3],
    pub actionTimer: s16,
    pub buttonYOffsets: [s16; 6],
    pub copyDestFileIndex: s16,
    pub warningLabel: s16,
    pub warningButtonIndex: s16,
    pub titleLabel: s16,
    pub nextTitleLabel: s16,
    pub windowColor: [s16; 3],
    pub titleAlpha: [s16; 2],
    pub windowAlpha: s16,
    pub fileButtonAlpha: [s16; 3],
    pub nameBoxAlpha: [s16; 3],
    pub nameAlpha: [s16; 3],
    pub connectorAlpha: [s16; 3],
    pub fileInfoAlpha: [s16; 3],
    pub actionButtonAlpha: [s16; 2],
    pub confirmButtonAlpha: [s16; 2],
    pub optionButtonAlpha: s16,
    pub nameEntryBoxAlpha: s16,
    pub controlsAlpha: s16,
    pub emptyFileTextAlpha: s16,
    pub highlightColor: [s16; 4],
    pub highlightPulseDir: s16,
    pub unk_1CAAC: s16,
    pub confirmButtonTexIndices: [s16; 2],
    pub inputTimerX: s16,
    pub inputTimerY: s16,
    pub stickXDir: s16,
    pub stickYDir: s16,
    pub stickRelX: s16,
    pub stickRelY: s16,
    pub nameEntryBoxPosX: s16,
    pub windowPosX: s16,
    pub windowRot: f32_0,
    pub kbdButton: s16,
    pub charPage: s16,
    pub charBgAlpha: s16,
    pub charIndex: s16,
    pub kbdX: s16,
    pub kbdY: s16,
    pub newFileNameCharCount: s16,
    pub unk_1CAD6: [s16; 5],
}
pub type C2RustUnnamed_22 = libc::c_uint;
pub const MTXMODE_APPLY: C2RustUnnamed_22 = 1;
pub const MTXMODE_NEW: C2RustUnnamed_22 = 0;
pub const FS_WARNING_NONE: C2RustUnnamed_27 = -1;
pub const FS_BTN_CONFIRM_QUIT: C2RustUnnamed_30 = 1;
pub const FS_BTN_CONFIRM_YES: C2RustUnnamed_30 = 0;
pub const FS_BTN_ACTION_ERASE: C2RustUnnamed_31 = 1;
pub const FS_BTN_ACTION_COPY: C2RustUnnamed_31 = 0;
pub const FS_KBD_BTN_NONE: C2RustUnnamed_33 = 99;
pub const CM_FADE_IN_START: C2RustUnnamed_24 = 0;
pub const FS_TITLE_OPEN_FILE: C2RustUnnamed_26 = 1;
pub const FS_TITLE_SELECT_FILE: C2RustUnnamed_26 = 0;
pub const FS_MENU_MODE_INIT: C2RustUnnamed_23 = 0;
pub const CM_UNUSED_DELAY: C2RustUnnamed_24 = 40;
pub const CM_NAME_ENTRY_TO_MAIN: C2RustUnnamed_24 = 35;
pub const SM_CONFIRM_FILE: C2RustUnnamed_25 = 3;
pub const FS_MENU_MODE_SELECT: C2RustUnnamed_23 = 2;
pub const CM_ERASE_CONFIRM: C2RustUnnamed_24 = 24;
pub const CM_ERASE_SELECT: C2RustUnnamed_24 = 21;
pub const CM_COPY_CONFIRM: C2RustUnnamed_24 = 12;
pub const CM_SELECT_COPY_DEST: C2RustUnnamed_24 = 7;
pub const CM_SELECT_COPY_SOURCE: C2RustUnnamed_24 = 4;
pub const CM_MAIN_MENU: C2RustUnnamed_24 = 2;
pub const FS_MENU_MODE_CONFIG: C2RustUnnamed_23 = 1;
pub const CM_COPY_ANIM_4: C2RustUnnamed_24 = 17;
pub const CM_COPY_ANIM_3: C2RustUnnamed_24 = 16;
pub const CM_COPY_ANIM_2: C2RustUnnamed_24 = 15;
pub const CM_OPTIONS_TO_MAIN: C2RustUnnamed_24 = 39;
pub const CM_MAIN_TO_OPTIONS: C2RustUnnamed_24 = 36;
pub const CM_ROTATE_TO_NAME_ENTRY: C2RustUnnamed_24 = 32;
pub const CM_START_NAME_ENTRY: C2RustUnnamed_24 = 34;
pub const CM_NAME_ENTRY: C2RustUnnamed_24 = 33;
pub const FS_BTN_SELECT_FILE_1: C2RustUnnamed_29 = 0;
pub const SM_FADE_MAIN_TO_SELECT: C2RustUnnamed_25 = 0;
pub const FS_BTN_SELECT_QUIT: C2RustUnnamed_29 = 4;
pub const FS_BTN_SELECT_YES: C2RustUnnamed_29 = 3;
pub const SM_FADE_OUT: C2RustUnnamed_25 = 6;
pub const CM_START_OPTIONS: C2RustUnnamed_24 = 38;
pub const FS_WARNING_NO_FILE_ERASE: C2RustUnnamed_27 = 1;
pub const FS_BTN_MAIN_ERASE: C2RustUnnamed_28 = 4;
pub const FS_WARNING_NO_EMPTY_FILES: C2RustUnnamed_27 = 2;
pub const FS_WARNING_NO_FILE_COPY: C2RustUnnamed_27 = 0;
pub const FS_BTN_MAIN_COPY: C2RustUnnamed_28 = 3;
pub const FS_BTN_MAIN_FILE_1: C2RustUnnamed_28 = 0;
pub const FS_BTN_MAIN_OPTIONS: C2RustUnnamed_28 = 5;
pub const FS_TITLE_ERASE_FILE: C2RustUnnamed_26 = 6;
pub const CM_SETUP_ERASE_SELECT: C2RustUnnamed_24 = 20;
pub const FS_TITLE_COPY_FROM: C2RustUnnamed_26 = 2;
pub const CM_SETUP_COPY_SOURCE: C2RustUnnamed_24 = 3;
pub const FS_CHAR_PAGE_ENG: C2RustUnnamed_32 = 2;
pub const FS_BTN_MAIN_FILE_3: C2RustUnnamed_28 = 2;
pub const CM_FADE_IN_END: C2RustUnnamed_24 = 1;
pub type C2RustUnnamed_23 = libc::c_uint;
pub type C2RustUnnamed_24 = libc::c_uint;
pub const CM_OPTIONS_MENU: C2RustUnnamed_24 = 37;
pub const CM_UNUSED_31: C2RustUnnamed_24 = 31;
pub const CM_EXIT_ERASE_TO_MAIN: C2RustUnnamed_24 = 30;
pub const CM_ERASE_ANIM_3: C2RustUnnamed_24 = 29;
pub const CM_ERASE_ANIM_2: C2RustUnnamed_24 = 28;
pub const CM_ERASE_ANIM_1: C2RustUnnamed_24 = 27;
pub const CM_EXIT_TO_ERASE_SELECT_2: C2RustUnnamed_24 = 26;
pub const CM_EXIT_TO_ERASE_SELECT_1: C2RustUnnamed_24 = 25;
pub const CM_SETUP_ERASE_CONFIRM_2: C2RustUnnamed_24 = 23;
pub const CM_SETUP_ERASE_CONFIRM_1: C2RustUnnamed_24 = 22;
pub const CM_COPY_RETURN_MAIN: C2RustUnnamed_24 = 19;
pub const CM_COPY_ANIM_5: C2RustUnnamed_24 = 18;
pub const CM_COPY_ANIM_1: C2RustUnnamed_24 = 14;
pub const CM_RETURN_TO_COPY_DEST: C2RustUnnamed_24 = 13;
pub const CM_SETUP_COPY_CONFIRM_2: C2RustUnnamed_24 = 11;
pub const CM_SETUP_COPY_CONFIRM_1: C2RustUnnamed_24 = 10;
pub const CM_EXIT_TO_COPY_SOURCE_2: C2RustUnnamed_24 = 9;
pub const CM_EXIT_TO_COPY_SOURCE_1: C2RustUnnamed_24 = 8;
pub const CM_SETUP_COPY_DEST_2: C2RustUnnamed_24 = 6;
pub const CM_SETUP_COPY_DEST_1: C2RustUnnamed_24 = 5;
pub type C2RustUnnamed_25 = libc::c_uint;
pub const SM_LOAD_GAME: C2RustUnnamed_25 = 7;
pub const SM_MOVE_FILE_TO_SLOT: C2RustUnnamed_25 = 5;
pub const SM_FADE_OUT_FILE_INFO: C2RustUnnamed_25 = 4;
pub const SM_FADE_IN_FILE_INFO: C2RustUnnamed_25 = 2;
pub const SM_MOVE_FILE_TO_TOP: C2RustUnnamed_25 = 1;
pub type C2RustUnnamed_26 = libc::c_uint;
pub const FS_TITLE_ERASE_COMPLETE: C2RustUnnamed_26 = 8;
pub const FS_TITLE_ERASE_CONFIRM: C2RustUnnamed_26 = 7;
pub const FS_TITLE_COPY_COMPLETE: C2RustUnnamed_26 = 5;
pub const FS_TITLE_COPY_CONFIRM: C2RustUnnamed_26 = 4;
pub const FS_TITLE_COPY_TO: C2RustUnnamed_26 = 3;
pub type C2RustUnnamed_27 = libc::c_int;
pub const FS_WARNING_FILE_IN_USE: C2RustUnnamed_27 = 4;
pub const FS_WARNING_FILE_EMPTY: C2RustUnnamed_27 = 3;
pub type C2RustUnnamed_28 = libc::c_uint;
pub const FS_BTN_MAIN_FILE_2: C2RustUnnamed_28 = 1;
pub type C2RustUnnamed_29 = libc::c_uint;
pub const FS_BTN_SELECT_FILE_3: C2RustUnnamed_29 = 2;
pub const FS_BTN_SELECT_FILE_2: C2RustUnnamed_29 = 1;
pub type C2RustUnnamed_30 = libc::c_uint;
pub type C2RustUnnamed_31 = libc::c_uint;
pub type C2RustUnnamed_32 = libc::c_uint;
pub const FS_CHAR_PAGE_KATA: C2RustUnnamed_32 = 1;
pub const FS_CHAR_PAGE_HIRA: C2RustUnnamed_32 = 0;
pub type C2RustUnnamed_33 = libc::c_uint;
pub const FS_KBD_BTN_END: C2RustUnnamed_33 = 4;
pub const FS_KBD_BTN_BACKSPACE: C2RustUnnamed_33 = 3;
pub const FS_KBD_BTN_ENG: C2RustUnnamed_33 = 2;
pub const FS_KBD_BTN_KATA: C2RustUnnamed_33 = 1;
pub const FS_KBD_BTN_HIRA: C2RustUnnamed_33 = 0;
static mut sScreenFillAlpha: s16 = 255 as libc::c_int as s16;
static mut sScreenFillSetupDL: [Gfx; 5] =
    [Gfx{words:
             {
                 let mut init =
                     Gwords{w0:
                                (0xe7 as libc::c_int as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 24 as libc::c_int,
                            w1: 0 as libc::c_int as libc::c_uint,};
                 init
             },},
     Gfx{words:
             {
                 let mut init =
                     Gwords{w0:
                                (0xd9 as libc::c_int as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 24 as libc::c_int |
                                    (!((0x1 as libc::c_int |
                                            0x4 as libc::c_int |
                                            0x600 as libc::c_int |
                                            0x10000 as libc::c_int |
                                            0x20000 as libc::c_int |
                                            0x40000 as libc::c_int |
                                            0x80000 as libc::c_int |
                                            0x100000 as libc::c_int |
                                            0x200000 as libc::c_int) as u32_0)
                                         &
                                         (((0x1 as libc::c_int) <<
                                               24 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        0 as libc::c_int,
                            w1: 0 as libc::c_int as u32_0,};
                 init
             },},
     Gfx{words:
             {
                 let mut init =
                     Gwords{w0:
                                (0xef as libc::c_int as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 24 as libc::c_int |
                                    (((3 as libc::c_int) << 4 as libc::c_int |
                                          (0 as libc::c_int) <<
                                              6 as libc::c_int |
                                          (0 as libc::c_int) <<
                                              8 as libc::c_int |
                                          (6 as libc::c_int) <<
                                              9 as libc::c_int |
                                          (2 as libc::c_int) <<
                                              12 as libc::c_int |
                                          (0 as libc::c_int) <<
                                              14 as libc::c_int |
                                          (0 as libc::c_int) <<
                                              16 as libc::c_int |
                                          (0 as libc::c_int) <<
                                              17 as libc::c_int |
                                          (0 as libc::c_int) <<
                                              19 as libc::c_int |
                                          (0 as libc::c_int) <<
                                              20 as libc::c_int |
                                          (1 as libc::c_int) <<
                                              23 as libc::c_int) as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               24 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        0 as libc::c_int,
                            w1:
                                ((0 as libc::c_int) << 0 as libc::c_int |
                                     (0 as libc::c_int) << 2 as libc::c_int |
                                     0x40 as libc::c_int |
                                     0x300 as libc::c_int |
                                     0x4000 as libc::c_int | 0 as libc::c_int
                                     | (0 as libc::c_int) << 30 as libc::c_int
                                     | (0 as libc::c_int) << 26 as libc::c_int
                                     | (1 as libc::c_int) << 22 as libc::c_int
                                     | (0 as libc::c_int) << 18 as libc::c_int
                                     | 0x40 as libc::c_int |
                                     0x300 as libc::c_int |
                                     0x4000 as libc::c_int | 0 as libc::c_int
                                     | (0 as libc::c_int) << 28 as libc::c_int
                                     | (0 as libc::c_int) << 24 as libc::c_int
                                     | (1 as libc::c_int) << 20 as libc::c_int
                                     |
                                     (0 as libc::c_int) << 16 as libc::c_int)
                                    as libc::c_uint,};
                 init
             },},
     Gfx{words:
             {
                 let mut init =
                     Gwords{w0:
                                (0xfc as libc::c_int as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 24 as libc::c_int |
                                    (((31 as libc::c_int as u32_0 &
                                           (((0x1 as libc::c_int) <<
                                                 4 as libc::c_int) -
                                                1 as libc::c_int) as
                                               libc::c_uint) <<
                                          20 as libc::c_int |
                                          (31 as libc::c_int as u32_0 &
                                               (((0x1 as libc::c_int) <<
                                                     5 as libc::c_int) -
                                                    1 as libc::c_int) as
                                                   libc::c_uint) <<
                                              15 as libc::c_int |
                                          (7 as libc::c_int as u32_0 &
                                               (((0x1 as libc::c_int) <<
                                                     3 as libc::c_int) -
                                                    1 as libc::c_int) as
                                                   libc::c_uint) <<
                                              12 as libc::c_int |
                                          (7 as libc::c_int as u32_0 &
                                               (((0x1 as libc::c_int) <<
                                                     3 as libc::c_int) -
                                                    1 as libc::c_int) as
                                                   libc::c_uint) <<
                                              9 as libc::c_int |
                                          ((31 as libc::c_int as u32_0 &
                                                (((0x1 as libc::c_int) <<
                                                      4 as libc::c_int) -
                                                     1 as libc::c_int) as
                                                    libc::c_uint) <<
                                               5 as libc::c_int |
                                               (31 as libc::c_int as u32_0 &
                                                    (((0x1 as libc::c_int) <<
                                                          5 as libc::c_int) -
                                                         1 as libc::c_int) as
                                                        libc::c_uint) <<
                                                   0 as libc::c_int)) &
                                         (((0x1 as libc::c_int) <<
                                               24 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        0 as libc::c_int,
                            w1:
                                (31 as libc::c_int as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           4 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 28 as libc::c_int |
                                    (3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        15 as libc::c_int |
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        12 as libc::c_int |
                                    (3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) << 9 as libc::c_int
                                    |
                                    ((31 as libc::c_int as u32_0 &
                                          (((0x1 as libc::c_int) <<
                                                4 as libc::c_int) -
                                               1 as libc::c_int) as
                                              libc::c_uint) <<
                                         24 as libc::c_int |
                                         (7 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    3 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             21 as libc::c_int |
                                         (7 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    3 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             18 as libc::c_int |
                                         (3 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    3 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             6 as libc::c_int |
                                         (7 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    3 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             3 as libc::c_int |
                                         (3 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    3 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             0 as libc::c_int),};
                 init
             },},
     Gfx{words:
             {
                 let mut init =
                     Gwords{w0:
                                (0xdf as libc::c_int as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 24 as libc::c_int,
                            w1: 0 as libc::c_int as libc::c_uint,};
                 init
             },}];
static mut sFileInfoBoxPartWidths: [s16; 5] =
    [36 as libc::c_int as s16, 36 as libc::c_int as s16,
     36 as libc::c_int as s16, 36 as libc::c_int as s16,
     24 as libc::c_int as s16];
static mut sWindowContentColors: [[s16; 3]; 2] =
    [[100 as libc::c_int as s16, 150 as libc::c_int as s16,
      255 as libc::c_int as s16],
     [100 as libc::c_int as s16, 100 as libc::c_int as s16,
      100 as libc::c_int as s16]];
#[no_mangle]
pub unsafe extern "C" fn FileChoose_SetView(mut this: *mut FileChooseContext,
                                            mut eyeX: f32_0, mut eyeY: f32_0,
                                            mut eyeZ: f32_0) {
    let mut eye: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut lookAt: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut up: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    lookAt.z = 0.0f32;
    lookAt.y = lookAt.z;
    lookAt.x = lookAt.y;
    up.z = 0.0f32;
    up.x = up.z;
    eye.x = eyeX;
    eye.y = eyeY;
    eye.z = eyeZ;
    up.y = 1.0f32;
    func_800AA358(&mut (*this).view, &mut eye, &mut lookAt, &mut up);
    func_800AAA50(&mut (*this).view, 0x7f as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn FileChoose_QuadTextureIA8(mut gfx: *mut Gfx,
                                                   mut texture:
                                                       *mut libc::c_void,
                                                   mut width: s16,
                                                   mut height: s16,
                                                   mut point: s16)
 -> *mut Gfx {
    let fresh0 = gfx;
    gfx = gfx.offset(1);
    let mut _g: *mut Gfx = fresh0;
    (*_g).words.w0 =
        (0xfd as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (3 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 21 as libc::c_int
            |
            (2 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            ((1 as libc::c_int - 1 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g).words.w1 = texture as libc::c_uint;
    let fresh1 = gfx;
    gfx = gfx.offset(1);
    let mut _g_0: *mut Gfx = fresh1;
    (*_g_0).words.w0 =
        (0xf5 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (3 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 21 as libc::c_int
            |
            (2 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 9 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_0).words.w1 =
        (7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 20 as libc::c_int
            |
            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 18 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 14 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 10 as libc::c_int
            |
            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 4 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh2 = gfx;
    gfx = gfx.offset(1);
    let mut _g_1: *mut Gfx = fresh2;
    (*_g_1).words.w0 =
        (0xe6 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_1).words.w1 = 0 as libc::c_int as libc::c_uint;
    let fresh3 = gfx;
    gfx = gfx.offset(1);
    let mut _g_2: *mut Gfx = fresh3;
    (*_g_2).words.w0 =
        (0xf3 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_2).words.w1 =
        (7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            ((if ((width as libc::c_int * height as libc::c_int +
                       1 as libc::c_int >> 1 as libc::c_int) -
                      1 as libc::c_int) < 2047 as libc::c_int {
                  (width as libc::c_int * height as libc::c_int +
                       1 as libc::c_int >> 1 as libc::c_int) -
                      1 as libc::c_int
              } else { 2047 as libc::c_int }) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (((((1 as libc::c_int) << 11 as libc::c_int) +
                   (if 1 as libc::c_int >
                           width as libc::c_int * 1 as libc::c_int /
                               8 as libc::c_int {
                        1 as libc::c_int
                    } else {
                        (width as libc::c_int * 1 as libc::c_int) /
                            8 as libc::c_int
                    }) - 1 as libc::c_int) /
                  (if 1 as libc::c_int >
                          width as libc::c_int * 1 as libc::c_int /
                              8 as libc::c_int {
                       1 as libc::c_int
                   } else {
                       (width as libc::c_int * 1 as libc::c_int) /
                           8 as libc::c_int
                   })) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh4 = gfx;
    gfx = gfx.offset(1);
    let mut _g_3: *mut Gfx = fresh4;
    (*_g_3).words.w0 =
        (0xe7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_3).words.w1 = 0 as libc::c_int as libc::c_uint;
    let fresh5 = gfx;
    gfx = gfx.offset(1);
    let mut _g_4: *mut Gfx = fresh5;
    (*_g_4).words.w0 =
        (0xf5 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (3 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 21 as libc::c_int
            |
            (1 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            ((width as libc::c_int * 1 as libc::c_int + 7 as libc::c_int >>
                  3 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 9 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_4).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 20 as libc::c_int
            |
            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 18 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 14 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 10 as libc::c_int
            |
            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 4 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh6 = gfx;
    gfx = gfx.offset(1);
    let mut _g_5: *mut Gfx = fresh6;
    (*_g_5).words.w0 =
        (0xf2 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_5).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (((width as libc::c_int - 1 as libc::c_int) << 2 as libc::c_int)
                 as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (((height as libc::c_int - 1 as libc::c_int) << 2 as libc::c_int)
                 as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh7 = gfx;
    gfx = gfx.offset(1);
    let mut _g_6: *mut Gfx = fresh7;
    (*_g_6).words.w0 =
        (0x7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (if 0 as libc::c_int == 0 as libc::c_int {
                 (((point as libc::c_int * 2 as libc::c_int) as u32_0 &
                       (((0x1 as libc::c_int) << 8 as libc::c_int) -
                            1 as libc::c_int) as libc::c_uint) <<
                      16 as libc::c_int |
                      (((point as libc::c_int + 2 as libc::c_int) *
                            2 as libc::c_int) as u32_0 &
                           (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          8 as libc::c_int) |
                     (((point as libc::c_int + 3 as libc::c_int) *
                           2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         0 as libc::c_int
             } else {
                 (if 0 as libc::c_int == 1 as libc::c_int {
                      ((((point as libc::c_int + 2 as libc::c_int) *
                             2 as libc::c_int) as u32_0 &
                            (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                 1 as libc::c_int) as libc::c_uint) <<
                           16 as libc::c_int |
                           (((point as libc::c_int + 3 as libc::c_int) *
                                 2 as libc::c_int) as u32_0 &
                                (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                     1 as libc::c_int) as libc::c_uint) <<
                               8 as libc::c_int) |
                          (((point as libc::c_int + 1 as libc::c_int) *
                                2 as libc::c_int) as u32_0 &
                               (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              0 as libc::c_int
                  } else {
                      (if 0 as libc::c_int == 2 as libc::c_int {
                           ((((point as libc::c_int + 3 as libc::c_int) *
                                  2 as libc::c_int) as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                16 as libc::c_int |
                                (((point as libc::c_int + 1 as libc::c_int) *
                                      2 as libc::c_int) as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 8 as libc::c_int) |
                               ((point as libc::c_int * 2 as libc::c_int) as
                                    u32_0 &
                                    (((0x1 as libc::c_int) <<
                                          8 as libc::c_int) -
                                         1 as libc::c_int) as libc::c_uint) <<
                                   0 as libc::c_int
                       } else {
                           ((((point as libc::c_int + 1 as libc::c_int) *
                                  2 as libc::c_int) as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                16 as libc::c_int |
                                ((point as libc::c_int * 2 as libc::c_int) as
                                     u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 8 as libc::c_int) |
                               (((point as libc::c_int + 2 as libc::c_int) *
                                     2 as libc::c_int) as u32_0 &
                                    (((0x1 as libc::c_int) <<
                                          8 as libc::c_int) -
                                         1 as libc::c_int) as libc::c_uint) <<
                                   0 as libc::c_int
                       })
                  })
             });
    (*_g_6).words.w1 =
        if 0 as libc::c_int == 0 as libc::c_int {
            (((point as libc::c_int * 2 as libc::c_int) as u32_0 &
                  (((0x1 as libc::c_int) << 8 as libc::c_int) -
                       1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
                 |
                 (((point as libc::c_int + 3 as libc::c_int) *
                       2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     8 as libc::c_int) |
                (((point as libc::c_int + 1 as libc::c_int) *
                      2 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int
        } else if 0 as libc::c_int == 1 as libc::c_int {
            ((((point as libc::c_int + 2 as libc::c_int) * 2 as libc::c_int)
                  as u32_0 &
                  (((0x1 as libc::c_int) << 8 as libc::c_int) -
                       1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
                 |
                 (((point as libc::c_int + 1 as libc::c_int) *
                       2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     8 as libc::c_int) |
                ((point as libc::c_int * 2 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int
        } else if 0 as libc::c_int == 2 as libc::c_int {
            ((((point as libc::c_int + 3 as libc::c_int) * 2 as libc::c_int)
                  as u32_0 &
                  (((0x1 as libc::c_int) << 8 as libc::c_int) -
                       1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
                 |
                 ((point as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     8 as libc::c_int) |
                (((point as libc::c_int + 2 as libc::c_int) *
                      2 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int
        } else {
            ((((point as libc::c_int + 1 as libc::c_int) * 2 as libc::c_int)
                  as u32_0 &
                  (((0x1 as libc::c_int) << 8 as libc::c_int) -
                       1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
                 |
                 (((point as libc::c_int + 2 as libc::c_int) *
                       2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     8 as libc::c_int) |
                (((point as libc::c_int + 3 as libc::c_int) *
                      2 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int
        };
    return gfx;
}
#[no_mangle]
pub unsafe extern "C" fn FileChoose_InitModeUpdate(mut thisx:
                                                       *mut GameState) {
    let mut this: *mut FileChooseContext = thisx as *mut FileChooseContext;
    if (*this).menuMode as libc::c_int == FS_MENU_MODE_INIT as libc::c_int {
        (*this).menuMode = FS_MENU_MODE_CONFIG as libc::c_int as s16;
        (*this).configMode = CM_FADE_IN_START as libc::c_int as s16;
        (*this).nextTitleLabel = FS_TITLE_OPEN_FILE as libc::c_int as s16;
        osSyncPrintf(b"\xef\xbc\xb3\xef\xbd\x92\xef\xbd\x81\xef\xbd\x8d \xef\xbc\xb3\xef\xbd\x94\xef\xbd\x81\xef\xbd\x92\xef\xbd\x94\xe2\x94\x80\xef\xbc\xac\xef\xbd\x8f\xef\xbd\x81\xef\xbd\x84  \xe3\x80\x8b\xe3\x80\x8b\xe3\x80\x8b\xe3\x80\x8b\xe3\x80\x8b  \x00"
                         as *const u8 as *const libc::c_char);
        Sram_VerifyAndLoadAllSaves(this, &mut (*this).sramCtx);
        osSyncPrintf(b"\xe7\xb5\x82\xe4\xba\x86\xef\xbc\x81\xef\xbc\x81\xef\xbc\x81\n\x00"
                         as *const u8 as *const libc::c_char);
    };
}
#[no_mangle]
pub unsafe extern "C" fn FileChoose_InitModeDraw(mut thisx: *mut GameState) {
}
/* *
 * Fade in the menu window and title label.
 * If a file is occupied fade in the name, name box, and connector.
 * Fade in the copy erase and options button according to the window alpha.
 */
#[no_mangle]
pub unsafe extern "C" fn FileChoose_FadeInMenuElements(mut thisx:
                                                           *mut GameState) {
    let mut this: *mut FileChooseContext = thisx as *mut FileChooseContext;
    let mut sramCtx: *mut SramContext = &mut (*this).sramCtx;
    let mut i: s16 = 0;
    (*this).titleAlpha[0 as libc::c_int as usize] =
        ((*this).titleAlpha[0 as libc::c_int as usize] as libc::c_int +
             (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                                    16 as libc::c_int + 1 as libc::c_int) as
                                   usize] as libc::c_int) as s16;
    (*this).windowAlpha =
        ((*this).windowAlpha as libc::c_int +
             (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                                    16 as libc::c_int + 2 as libc::c_int) as
                                   usize] as libc::c_int) as s16;
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) < 3 as libc::c_int {
        (*this).fileButtonAlpha[i as usize] = (*this).windowAlpha;
        if *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(i
                                                                                  as
                                                                                  isize)
                                            as
                                            libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                     as
                                                                                     *mut SaveContext)).newf.as_mut_ptr().offset(0
                                                                                                                                     as
                                                                                                                                     libc::c_int
                                                                                                                                     as
                                                                                                                                     isize)
                                                                            as
                                                                            *mut libc::c_char
                                                                            as
                                                                            size_t)
                                           as isize) as libc::c_int ==
               'Z' as i32 ||
               *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(i
                                                                                      as
                                                                                      isize)
                                                as
                                                libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                         as
                                                                                         *mut SaveContext)).newf.as_mut_ptr().offset(1
                                                                                                                                         as
                                                                                                                                         libc::c_int
                                                                                                                                         as
                                                                                                                                         isize)
                                                                                as
                                                                                *mut libc::c_char
                                                                                as
                                                                                size_t)
                                               as isize) as libc::c_int ==
                   'E' as i32 ||
               *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(i
                                                                                      as
                                                                                      isize)
                                                as
                                                libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                         as
                                                                                         *mut SaveContext)).newf.as_mut_ptr().offset(2
                                                                                                                                         as
                                                                                                                                         libc::c_int
                                                                                                                                         as
                                                                                                                                         isize)
                                                                                as
                                                                                *mut libc::c_char
                                                                                as
                                                                                size_t)
                                               as isize) as libc::c_int ==
                   'L' as i32 ||
               *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(i
                                                                                      as
                                                                                      isize)
                                                as
                                                libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                         as
                                                                                         *mut SaveContext)).newf.as_mut_ptr().offset(3
                                                                                                                                         as
                                                                                                                                         libc::c_int
                                                                                                                                         as
                                                                                                                                         isize)
                                                                                as
                                                                                *mut libc::c_char
                                                                                as
                                                                                size_t)
                                               as isize) as libc::c_int ==
                   'D' as i32 ||
               *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(i
                                                                                      as
                                                                                      isize)
                                                as
                                                libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                         as
                                                                                         *mut SaveContext)).newf.as_mut_ptr().offset(4
                                                                                                                                         as
                                                                                                                                         libc::c_int
                                                                                                                                         as
                                                                                                                                         isize)
                                                                                as
                                                                                *mut libc::c_char
                                                                                as
                                                                                size_t)
                                               as isize) as libc::c_int ==
                   'A' as i32 ||
               *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(i
                                                                                      as
                                                                                      isize)
                                                as
                                                libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                         as
                                                                                         *mut SaveContext)).newf.as_mut_ptr().offset(5
                                                                                                                                         as
                                                                                                                                         libc::c_int
                                                                                                                                         as
                                                                                                                                         isize)
                                                                                as
                                                                                *mut libc::c_char
                                                                                as
                                                                                size_t)
                                               as isize) as libc::c_int ==
                   'Z' as i32 {
            (*this).nameAlpha[i as usize] = (*this).windowAlpha;
            (*this).nameBoxAlpha[i as usize] = (*this).nameAlpha[i as usize];
            (*this).connectorAlpha[i as usize] =
                ((*this).connectorAlpha[i as usize] as libc::c_int +
                     (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                                            16 as libc::c_int +
                                            1 as libc::c_int) as usize] as
                         libc::c_int) as s16;
            if (*this).connectorAlpha[i as usize] as libc::c_int >=
                   255 as libc::c_int {
                (*this).connectorAlpha[i as usize] = 255 as libc::c_int as s16
            }
        }
        i += 1
    }
    (*this).optionButtonAlpha = (*this).windowAlpha;
    (*this).actionButtonAlpha[FS_BTN_ACTION_ERASE as libc::c_int as usize] =
        (*this).optionButtonAlpha;
    (*this).actionButtonAlpha[FS_BTN_ACTION_COPY as libc::c_int as usize] =
        (*this).actionButtonAlpha[FS_BTN_ACTION_ERASE as libc::c_int as
                                      usize];
}
/* *
 * Converts a numerical value to ones-tens-hundreds digits
 */
#[no_mangle]
pub unsafe extern "C" fn FileChoose_SplitNumber(mut value: u16_0,
                                                mut hundreds: *mut s16,
                                                mut tens: *mut s16,
                                                mut ones: *mut s16) {
    *hundreds = 0 as libc::c_int as s16;
    *tens = 0 as libc::c_int as s16;
    *ones = value as s16;
    while !((*ones as libc::c_int - 100 as libc::c_int) < 0 as libc::c_int) {
        *hundreds += 1;
        *ones = (*ones as libc::c_int - 100 as libc::c_int) as s16
    }
    while !((*ones as libc::c_int - 10 as libc::c_int) < 0 as libc::c_int) {
        *tens += 1;
        *ones = (*ones as libc::c_int - 10 as libc::c_int) as s16
    };
}
/* *
 * Reduce the alpha of the black screen fill to create a fade in effect.
 * Additionally, slide the window from the right to the center of the screen.
 * Update function for `CM_FADE_IN_START`
 */
#[no_mangle]
pub unsafe extern "C" fn FileChoose_StartFadeIn(mut thisx: *mut GameState) {
    let mut this: *mut FileChooseContext = thisx as *mut FileChooseContext;
    FileChoose_FadeInMenuElements(&mut (*this).state);
    sScreenFillAlpha =
        (sScreenFillAlpha as libc::c_int - 40 as libc::c_int) as s16;
    (*this).windowPosX =
        ((*this).windowPosX as libc::c_int - 20 as libc::c_int) as s16;
    if (*this).windowPosX as libc::c_int <= -(94 as libc::c_int) {
        (*this).windowPosX = -(94 as libc::c_int) as s16;
        (*this).configMode = CM_FADE_IN_END as libc::c_int as s16;
        sScreenFillAlpha = 0 as libc::c_int as s16
    };
}
/* *
 * Finish fading in the remaining menu elements.
 * Fade in the controls text at the bottom of the screen.
 * Update function for `CM_FADE_IN_END`
 */
#[no_mangle]
pub unsafe extern "C" fn FileChoose_FinishFadeIn(mut thisx: *mut GameState) {
    let mut this: *mut FileChooseContext = thisx as *mut FileChooseContext;
    (*this).controlsAlpha =
        ((*this).controlsAlpha as libc::c_int +
             (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                                    16 as libc::c_int + 1 as libc::c_int) as
                                   usize] as libc::c_int) as s16;
    FileChoose_FadeInMenuElements(&mut (*this).state);
    if (*this).titleAlpha[0 as libc::c_int as usize] as libc::c_int >=
           255 as libc::c_int {
        (*this).titleAlpha[0 as libc::c_int as usize] =
            255 as libc::c_int as s16;
        (*this).controlsAlpha = 255 as libc::c_int as s16;
        (*this).windowAlpha = 200 as libc::c_int as s16;
        (*this).configMode = CM_MAIN_MENU as libc::c_int as s16
    };
}
/* *
 * Update the cursor and wait for the player to select a button to change menus accordingly.
 * If an empty file is selected, enter the name entry config mode.
 * If an occupied file is selected, enter the `Select` menu mode.
 * If copy, erase, or options is selected, set config mode accordingly.
 * Lastly, set any warning labels if appropriate.
 * Update function for `CM_MAIN_MENU`
 */
#[no_mangle]
pub unsafe extern "C" fn FileChoose_UpdateMainMenu(mut thisx:
                                                       *mut GameState) {
    static mut emptyName: [u8_0; 8] =
        [0x3e as libc::c_int as u8_0, 0x3e as libc::c_int as u8_0,
         0x3e as libc::c_int as u8_0, 0x3e as libc::c_int as u8_0,
         0x3e as libc::c_int as u8_0, 0x3e as libc::c_int as u8_0,
         0x3e as libc::c_int as u8_0, 0x3e as libc::c_int as u8_0];
    let mut this: *mut FileChooseContext = thisx as *mut FileChooseContext;
    let mut sramCtx: *mut SramContext = &mut (*this).sramCtx;
    let mut input: *mut Input =
        &mut *(*this).state.input.as_mut_ptr().offset(0 as libc::c_int as
                                                          isize) as
            *mut Input;
    if !((*input).press.button as libc::c_int | !(0x1000 as libc::c_int)) ==
           0 as libc::c_int ||
           !((*input).press.button as libc::c_int | !(0x8000 as libc::c_int))
               == 0 as libc::c_int {
        if (*this).buttonIndex as libc::c_int <=
               FS_BTN_MAIN_FILE_3 as libc::c_int {
            osSyncPrintf(b"REGCK_ALL[%x]=%x,%x,%x,%x,%x,%x\n\x00" as *const u8
                             as *const libc::c_char,
                         (*this).buttonIndex as libc::c_int,
                         *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset((*this).buttonIndex
                                                                                                as
                                                                                                isize)
                                                          as
                                                          libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                   as
                                                                                                   *mut SaveContext)).newf.as_mut_ptr().offset(0
                                                                                                                                                   as
                                                                                                                                                   libc::c_int
                                                                                                                                                   as
                                                                                                                                                   isize)
                                                                                          as
                                                                                          *mut libc::c_char
                                                                                          as
                                                                                          size_t)
                                                         as isize) as
                             libc::c_int,
                         *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset((*this).buttonIndex
                                                                                                as
                                                                                                isize)
                                                          as
                                                          libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                   as
                                                                                                   *mut SaveContext)).newf.as_mut_ptr().offset(1
                                                                                                                                                   as
                                                                                                                                                   libc::c_int
                                                                                                                                                   as
                                                                                                                                                   isize)
                                                                                          as
                                                                                          *mut libc::c_char
                                                                                          as
                                                                                          size_t)
                                                         as isize) as
                             libc::c_int,
                         *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset((*this).buttonIndex
                                                                                                as
                                                                                                isize)
                                                          as
                                                          libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                   as
                                                                                                   *mut SaveContext)).newf.as_mut_ptr().offset(2
                                                                                                                                                   as
                                                                                                                                                   libc::c_int
                                                                                                                                                   as
                                                                                                                                                   isize)
                                                                                          as
                                                                                          *mut libc::c_char
                                                                                          as
                                                                                          size_t)
                                                         as isize) as
                             libc::c_int,
                         *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset((*this).buttonIndex
                                                                                                as
                                                                                                isize)
                                                          as
                                                          libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                   as
                                                                                                   *mut SaveContext)).newf.as_mut_ptr().offset(3
                                                                                                                                                   as
                                                                                                                                                   libc::c_int
                                                                                                                                                   as
                                                                                                                                                   isize)
                                                                                          as
                                                                                          *mut libc::c_char
                                                                                          as
                                                                                          size_t)
                                                         as isize) as
                             libc::c_int,
                         *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset((*this).buttonIndex
                                                                                                as
                                                                                                isize)
                                                          as
                                                          libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                   as
                                                                                                   *mut SaveContext)).newf.as_mut_ptr().offset(4
                                                                                                                                                   as
                                                                                                                                                   libc::c_int
                                                                                                                                                   as
                                                                                                                                                   isize)
                                                                                          as
                                                                                          *mut libc::c_char
                                                                                          as
                                                                                          size_t)
                                                         as isize) as
                             libc::c_int,
                         *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset((*this).buttonIndex
                                                                                                as
                                                                                                isize)
                                                          as
                                                          libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                   as
                                                                                                   *mut SaveContext)).newf.as_mut_ptr().offset(5
                                                                                                                                                   as
                                                                                                                                                   libc::c_int
                                                                                                                                                   as
                                                                                                                                                   isize)
                                                                                          as
                                                                                          *mut libc::c_char
                                                                                          as
                                                                                          size_t)
                                                         as isize) as
                             libc::c_int);
            if !(*(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset((*this).buttonIndex
                                                                                        as
                                                                                        isize)
                                                  as
                                                  libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                           as
                                                                                           *mut SaveContext)).newf.as_mut_ptr().offset(0
                                                                                                                                           as
                                                                                                                                           libc::c_int
                                                                                                                                           as
                                                                                                                                           isize)
                                                                                  as
                                                                                  *mut libc::c_char
                                                                                  as
                                                                                  size_t)
                                                 as isize) as libc::c_int ==
                     'Z' as i32 ||
                     *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset((*this).buttonIndex
                                                                                            as
                                                                                            isize)
                                                      as
                                                      libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                               as
                                                                                               *mut SaveContext)).newf.as_mut_ptr().offset(1
                                                                                                                                               as
                                                                                                                                               libc::c_int
                                                                                                                                               as
                                                                                                                                               isize)
                                                                                      as
                                                                                      *mut libc::c_char
                                                                                      as
                                                                                      size_t)
                                                     as isize) as libc::c_int
                         == 'E' as i32 ||
                     *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset((*this).buttonIndex
                                                                                            as
                                                                                            isize)
                                                      as
                                                      libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                               as
                                                                                               *mut SaveContext)).newf.as_mut_ptr().offset(2
                                                                                                                                               as
                                                                                                                                               libc::c_int
                                                                                                                                               as
                                                                                                                                               isize)
                                                                                      as
                                                                                      *mut libc::c_char
                                                                                      as
                                                                                      size_t)
                                                     as isize) as libc::c_int
                         == 'L' as i32 ||
                     *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset((*this).buttonIndex
                                                                                            as
                                                                                            isize)
                                                      as
                                                      libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                               as
                                                                                               *mut SaveContext)).newf.as_mut_ptr().offset(3
                                                                                                                                               as
                                                                                                                                               libc::c_int
                                                                                                                                               as
                                                                                                                                               isize)
                                                                                      as
                                                                                      *mut libc::c_char
                                                                                      as
                                                                                      size_t)
                                                     as isize) as libc::c_int
                         == 'D' as i32 ||
                     *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset((*this).buttonIndex
                                                                                            as
                                                                                            isize)
                                                      as
                                                      libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                               as
                                                                                               *mut SaveContext)).newf.as_mut_ptr().offset(4
                                                                                                                                               as
                                                                                                                                               libc::c_int
                                                                                                                                               as
                                                                                                                                               isize)
                                                                                      as
                                                                                      *mut libc::c_char
                                                                                      as
                                                                                      size_t)
                                                     as isize) as libc::c_int
                         == 'A' as i32 ||
                     *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset((*this).buttonIndex
                                                                                            as
                                                                                            isize)
                                                      as
                                                      libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                               as
                                                                                               *mut SaveContext)).newf.as_mut_ptr().offset(5
                                                                                                                                               as
                                                                                                                                               libc::c_int
                                                                                                                                               as
                                                                                                                                               isize)
                                                                                      as
                                                                                      *mut libc::c_char
                                                                                      as
                                                                                      size_t)
                                                     as isize) as libc::c_int
                         == 'Z' as i32) {
                Audio_PlaySoundGeneral(0x483b as libc::c_int as u16_0,
                                       &mut D_801333D4,
                                       4 as libc::c_int as u8_0,
                                       &mut D_801333E0, &mut D_801333E0,
                                       &mut D_801333E8);
                (*this).configMode =
                    CM_ROTATE_TO_NAME_ENTRY as libc::c_int as s16;
                (*this).kbdButton = FS_KBD_BTN_NONE as libc::c_int as s16;
                (*this).charPage = FS_CHAR_PAGE_ENG as libc::c_int as s16;
                (*this).kbdX = 0 as libc::c_int as s16;
                (*this).kbdY = 0 as libc::c_int as s16;
                (*this).charIndex = 0 as libc::c_int as s16;
                (*this).charBgAlpha = 0 as libc::c_int as s16;
                (*this).newFileNameCharCount = 0 as libc::c_int as s16;
                (*this).nameEntryBoxPosX = 120 as libc::c_int as s16;
                (*this).nameEntryBoxAlpha = 0 as libc::c_int as s16;
                MemCopy(&mut *(*(*this).fileNames.as_mut_ptr().offset((*this).buttonIndex
                                                                          as
                                                                          isize)).as_mut_ptr().offset(0
                                                                                                          as
                                                                                                          libc::c_int
                                                                                                          as
                                                                                                          isize)
                            as *mut u8_0 as *mut libc::c_void,
                        &mut emptyName as *mut [u8_0; 8] as *mut libc::c_void,
                        8 as libc::c_int);
            } else if (*this).n64ddFlags[(*this).buttonIndex as usize] as
                          libc::c_int == (*this).n64ddFlag as libc::c_int {
                Audio_PlaySoundGeneral(0x483b as libc::c_int as u16_0,
                                       &mut D_801333D4,
                                       4 as libc::c_int as u8_0,
                                       &mut D_801333E0, &mut D_801333E0,
                                       &mut D_801333E8);
                (*this).actionTimer = 8 as libc::c_int as s16;
                (*this).selectMode =
                    SM_FADE_MAIN_TO_SELECT as libc::c_int as s16;
                (*this).selectedFileIndex = (*this).buttonIndex;
                (*this).menuMode = FS_MENU_MODE_SELECT as libc::c_int as s16;
                (*this).nextTitleLabel =
                    FS_TITLE_OPEN_FILE as libc::c_int as s16
            } else if (*this).n64ddFlags[(*this).buttonIndex as usize] == 0 {
                Audio_PlaySoundGeneral(0x483d as libc::c_int as u16_0,
                                       &mut D_801333D4,
                                       4 as libc::c_int as u8_0,
                                       &mut D_801333E0, &mut D_801333E0,
                                       &mut D_801333E8);
            }
        } else if (*this).warningLabel as libc::c_int ==
                      FS_WARNING_NONE as libc::c_int {
            Audio_PlaySoundGeneral(0x483b as libc::c_int as u16_0,
                                   &mut D_801333D4, 4 as libc::c_int as u8_0,
                                   &mut D_801333E0, &mut D_801333E0,
                                   &mut D_801333E8);
            (*this).prevConfigMode = (*this).configMode;
            if (*this).buttonIndex as libc::c_int ==
                   FS_BTN_MAIN_COPY as libc::c_int {
                (*this).configMode =
                    CM_SETUP_COPY_SOURCE as libc::c_int as s16;
                (*this).nextTitleLabel =
                    FS_TITLE_COPY_FROM as libc::c_int as s16
            } else if (*this).buttonIndex as libc::c_int ==
                          FS_BTN_MAIN_ERASE as libc::c_int {
                (*this).configMode =
                    CM_SETUP_ERASE_SELECT as libc::c_int as s16;
                (*this).nextTitleLabel =
                    FS_TITLE_ERASE_FILE as libc::c_int as s16
            } else {
                (*this).configMode = CM_MAIN_TO_OPTIONS as libc::c_int as s16;
                (*this).kbdButton = 0 as libc::c_int as s16;
                (*this).kbdX = 0 as libc::c_int as s16;
                (*this).kbdY = 0 as libc::c_int as s16;
                (*this).charBgAlpha = 0 as libc::c_int as s16;
                (*this).newFileNameCharCount = 0 as libc::c_int as s16;
                (*this).nameEntryBoxPosX = 120 as libc::c_int as s16
            }
            (*this).actionTimer = 8 as libc::c_int as s16
        } else {
            Audio_PlaySoundGeneral(0x483d as libc::c_int as u16_0,
                                   &mut D_801333D4, 4 as libc::c_int as u8_0,
                                   &mut D_801333E0, &mut D_801333E0,
                                   &mut D_801333E8);
        }
    } else {
        if (if (*this).stickRelY as libc::c_int >= 0 as libc::c_int {
                (*this).stickRelY as libc::c_int
            } else { -((*this).stickRelY as libc::c_int) }) >
               30 as libc::c_int {
            Audio_PlaySoundGeneral(0x4839 as libc::c_int as u16_0,
                                   &mut D_801333D4, 4 as libc::c_int as u8_0,
                                   &mut D_801333E0, &mut D_801333E0,
                                   &mut D_801333E8);
            if (*this).stickRelY as libc::c_int > 30 as libc::c_int {
                (*this).buttonIndex -= 1;
                if ((*this).buttonIndex as libc::c_int) <
                       FS_BTN_MAIN_FILE_1 as libc::c_int {
                    (*this).buttonIndex =
                        FS_BTN_MAIN_OPTIONS as libc::c_int as s16
                }
            } else {
                (*this).buttonIndex += 1;
                if (*this).buttonIndex as libc::c_int >
                       FS_BTN_MAIN_OPTIONS as libc::c_int {
                    (*this).buttonIndex =
                        FS_BTN_MAIN_FILE_1 as libc::c_int as s16
                }
            }
        }
        if (*this).buttonIndex as libc::c_int ==
               FS_BTN_MAIN_COPY as libc::c_int {
            if !(*(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(0
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        isize)
                                                  as
                                                  libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                           as
                                                                                           *mut SaveContext)).newf.as_mut_ptr().offset(0
                                                                                                                                           as
                                                                                                                                           libc::c_int
                                                                                                                                           as
                                                                                                                                           isize)
                                                                                  as
                                                                                  *mut libc::c_char
                                                                                  as
                                                                                  size_t)
                                                 as isize) as libc::c_int ==
                     'Z' as i32 ||
                     *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(0
                                                                                            as
                                                                                            libc::c_int
                                                                                            as
                                                                                            isize)
                                                      as
                                                      libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                               as
                                                                                               *mut SaveContext)).newf.as_mut_ptr().offset(1
                                                                                                                                               as
                                                                                                                                               libc::c_int
                                                                                                                                               as
                                                                                                                                               isize)
                                                                                      as
                                                                                      *mut libc::c_char
                                                                                      as
                                                                                      size_t)
                                                     as isize) as libc::c_int
                         == 'E' as i32 ||
                     *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(0
                                                                                            as
                                                                                            libc::c_int
                                                                                            as
                                                                                            isize)
                                                      as
                                                      libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                               as
                                                                                               *mut SaveContext)).newf.as_mut_ptr().offset(2
                                                                                                                                               as
                                                                                                                                               libc::c_int
                                                                                                                                               as
                                                                                                                                               isize)
                                                                                      as
                                                                                      *mut libc::c_char
                                                                                      as
                                                                                      size_t)
                                                     as isize) as libc::c_int
                         == 'L' as i32 ||
                     *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(0
                                                                                            as
                                                                                            libc::c_int
                                                                                            as
                                                                                            isize)
                                                      as
                                                      libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                               as
                                                                                               *mut SaveContext)).newf.as_mut_ptr().offset(3
                                                                                                                                               as
                                                                                                                                               libc::c_int
                                                                                                                                               as
                                                                                                                                               isize)
                                                                                      as
                                                                                      *mut libc::c_char
                                                                                      as
                                                                                      size_t)
                                                     as isize) as libc::c_int
                         == 'D' as i32 ||
                     *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(0
                                                                                            as
                                                                                            libc::c_int
                                                                                            as
                                                                                            isize)
                                                      as
                                                      libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                               as
                                                                                               *mut SaveContext)).newf.as_mut_ptr().offset(4
                                                                                                                                               as
                                                                                                                                               libc::c_int
                                                                                                                                               as
                                                                                                                                               isize)
                                                                                      as
                                                                                      *mut libc::c_char
                                                                                      as
                                                                                      size_t)
                                                     as isize) as libc::c_int
                         == 'A' as i32 ||
                     *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(0
                                                                                            as
                                                                                            libc::c_int
                                                                                            as
                                                                                            isize)
                                                      as
                                                      libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                               as
                                                                                               *mut SaveContext)).newf.as_mut_ptr().offset(5
                                                                                                                                               as
                                                                                                                                               libc::c_int
                                                                                                                                               as
                                                                                                                                               isize)
                                                                                      as
                                                                                      *mut libc::c_char
                                                                                      as
                                                                                      size_t)
                                                     as isize) as libc::c_int
                         == 'Z' as i32) &&
                   !(*(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(1
                                                                                            as
                                                                                            libc::c_int
                                                                                            as
                                                                                            isize)
                                                      as
                                                      libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                               as
                                                                                               *mut SaveContext)).newf.as_mut_ptr().offset(0
                                                                                                                                               as
                                                                                                                                               libc::c_int
                                                                                                                                               as
                                                                                                                                               isize)
                                                                                      as
                                                                                      *mut libc::c_char
                                                                                      as
                                                                                      size_t)
                                                     as isize) as libc::c_int
                         == 'Z' as i32 ||
                         *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(1
                                                                                                as
                                                                                                libc::c_int
                                                                                                as
                                                                                                isize)
                                                          as
                                                          libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                   as
                                                                                                   *mut SaveContext)).newf.as_mut_ptr().offset(1
                                                                                                                                                   as
                                                                                                                                                   libc::c_int
                                                                                                                                                   as
                                                                                                                                                   isize)
                                                                                          as
                                                                                          *mut libc::c_char
                                                                                          as
                                                                                          size_t)
                                                         as isize) as
                             libc::c_int == 'E' as i32 ||
                         *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(1
                                                                                                as
                                                                                                libc::c_int
                                                                                                as
                                                                                                isize)
                                                          as
                                                          libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                   as
                                                                                                   *mut SaveContext)).newf.as_mut_ptr().offset(2
                                                                                                                                                   as
                                                                                                                                                   libc::c_int
                                                                                                                                                   as
                                                                                                                                                   isize)
                                                                                          as
                                                                                          *mut libc::c_char
                                                                                          as
                                                                                          size_t)
                                                         as isize) as
                             libc::c_int == 'L' as i32 ||
                         *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(1
                                                                                                as
                                                                                                libc::c_int
                                                                                                as
                                                                                                isize)
                                                          as
                                                          libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                   as
                                                                                                   *mut SaveContext)).newf.as_mut_ptr().offset(3
                                                                                                                                                   as
                                                                                                                                                   libc::c_int
                                                                                                                                                   as
                                                                                                                                                   isize)
                                                                                          as
                                                                                          *mut libc::c_char
                                                                                          as
                                                                                          size_t)
                                                         as isize) as
                             libc::c_int == 'D' as i32 ||
                         *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(1
                                                                                                as
                                                                                                libc::c_int
                                                                                                as
                                                                                                isize)
                                                          as
                                                          libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                   as
                                                                                                   *mut SaveContext)).newf.as_mut_ptr().offset(4
                                                                                                                                                   as
                                                                                                                                                   libc::c_int
                                                                                                                                                   as
                                                                                                                                                   isize)
                                                                                          as
                                                                                          *mut libc::c_char
                                                                                          as
                                                                                          size_t)
                                                         as isize) as
                             libc::c_int == 'A' as i32 ||
                         *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(1
                                                                                                as
                                                                                                libc::c_int
                                                                                                as
                                                                                                isize)
                                                          as
                                                          libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                   as
                                                                                                   *mut SaveContext)).newf.as_mut_ptr().offset(5
                                                                                                                                                   as
                                                                                                                                                   libc::c_int
                                                                                                                                                   as
                                                                                                                                                   isize)
                                                                                          as
                                                                                          *mut libc::c_char
                                                                                          as
                                                                                          size_t)
                                                         as isize) as
                             libc::c_int == 'Z' as i32) &&
                   !(*(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(2
                                                                                            as
                                                                                            libc::c_int
                                                                                            as
                                                                                            isize)
                                                      as
                                                      libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                               as
                                                                                               *mut SaveContext)).newf.as_mut_ptr().offset(0
                                                                                                                                               as
                                                                                                                                               libc::c_int
                                                                                                                                               as
                                                                                                                                               isize)
                                                                                      as
                                                                                      *mut libc::c_char
                                                                                      as
                                                                                      size_t)
                                                     as isize) as libc::c_int
                         == 'Z' as i32 ||
                         *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(2
                                                                                                as
                                                                                                libc::c_int
                                                                                                as
                                                                                                isize)
                                                          as
                                                          libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                   as
                                                                                                   *mut SaveContext)).newf.as_mut_ptr().offset(1
                                                                                                                                                   as
                                                                                                                                                   libc::c_int
                                                                                                                                                   as
                                                                                                                                                   isize)
                                                                                          as
                                                                                          *mut libc::c_char
                                                                                          as
                                                                                          size_t)
                                                         as isize) as
                             libc::c_int == 'E' as i32 ||
                         *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(2
                                                                                                as
                                                                                                libc::c_int
                                                                                                as
                                                                                                isize)
                                                          as
                                                          libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                   as
                                                                                                   *mut SaveContext)).newf.as_mut_ptr().offset(2
                                                                                                                                                   as
                                                                                                                                                   libc::c_int
                                                                                                                                                   as
                                                                                                                                                   isize)
                                                                                          as
                                                                                          *mut libc::c_char
                                                                                          as
                                                                                          size_t)
                                                         as isize) as
                             libc::c_int == 'L' as i32 ||
                         *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(2
                                                                                                as
                                                                                                libc::c_int
                                                                                                as
                                                                                                isize)
                                                          as
                                                          libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                   as
                                                                                                   *mut SaveContext)).newf.as_mut_ptr().offset(3
                                                                                                                                                   as
                                                                                                                                                   libc::c_int
                                                                                                                                                   as
                                                                                                                                                   isize)
                                                                                          as
                                                                                          *mut libc::c_char
                                                                                          as
                                                                                          size_t)
                                                         as isize) as
                             libc::c_int == 'D' as i32 ||
                         *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(2
                                                                                                as
                                                                                                libc::c_int
                                                                                                as
                                                                                                isize)
                                                          as
                                                          libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                   as
                                                                                                   *mut SaveContext)).newf.as_mut_ptr().offset(4
                                                                                                                                                   as
                                                                                                                                                   libc::c_int
                                                                                                                                                   as
                                                                                                                                                   isize)
                                                                                          as
                                                                                          *mut libc::c_char
                                                                                          as
                                                                                          size_t)
                                                         as isize) as
                             libc::c_int == 'A' as i32 ||
                         *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(2
                                                                                                as
                                                                                                libc::c_int
                                                                                                as
                                                                                                isize)
                                                          as
                                                          libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                   as
                                                                                                   *mut SaveContext)).newf.as_mut_ptr().offset(5
                                                                                                                                                   as
                                                                                                                                                   libc::c_int
                                                                                                                                                   as
                                                                                                                                                   isize)
                                                                                          as
                                                                                          *mut libc::c_char
                                                                                          as
                                                                                          size_t)
                                                         as isize) as
                             libc::c_int == 'Z' as i32) {
                (*this).warningButtonIndex = (*this).buttonIndex;
                (*this).warningLabel =
                    FS_WARNING_NO_FILE_COPY as libc::c_int as s16;
                (*this).emptyFileTextAlpha = 255 as libc::c_int as s16
            } else if (*(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(0
                                                                                              as
                                                                                              libc::c_int
                                                                                              as
                                                                                              isize)
                                                        as
                                                        libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                 as
                                                                                                 *mut SaveContext)).newf.as_mut_ptr().offset(0
                                                                                                                                                 as
                                                                                                                                                 libc::c_int
                                                                                                                                                 as
                                                                                                                                                 isize)
                                                                                        as
                                                                                        *mut libc::c_char
                                                                                        as
                                                                                        size_t)
                                                       as isize) as
                           libc::c_int == 'Z' as i32 ||
                           *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(0
                                                                                                  as
                                                                                                  libc::c_int
                                                                                                  as
                                                                                                  isize)
                                                            as
                                                            libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                     as
                                                                                                     *mut SaveContext)).newf.as_mut_ptr().offset(1
                                                                                                                                                     as
                                                                                                                                                     libc::c_int
                                                                                                                                                     as
                                                                                                                                                     isize)
                                                                                            as
                                                                                            *mut libc::c_char
                                                                                            as
                                                                                            size_t)
                                                           as isize) as
                               libc::c_int == 'E' as i32 ||
                           *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(0
                                                                                                  as
                                                                                                  libc::c_int
                                                                                                  as
                                                                                                  isize)
                                                            as
                                                            libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                     as
                                                                                                     *mut SaveContext)).newf.as_mut_ptr().offset(2
                                                                                                                                                     as
                                                                                                                                                     libc::c_int
                                                                                                                                                     as
                                                                                                                                                     isize)
                                                                                            as
                                                                                            *mut libc::c_char
                                                                                            as
                                                                                            size_t)
                                                           as isize) as
                               libc::c_int == 'L' as i32 ||
                           *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(0
                                                                                                  as
                                                                                                  libc::c_int
                                                                                                  as
                                                                                                  isize)
                                                            as
                                                            libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                     as
                                                                                                     *mut SaveContext)).newf.as_mut_ptr().offset(3
                                                                                                                                                     as
                                                                                                                                                     libc::c_int
                                                                                                                                                     as
                                                                                                                                                     isize)
                                                                                            as
                                                                                            *mut libc::c_char
                                                                                            as
                                                                                            size_t)
                                                           as isize) as
                               libc::c_int == 'D' as i32 ||
                           *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(0
                                                                                                  as
                                                                                                  libc::c_int
                                                                                                  as
                                                                                                  isize)
                                                            as
                                                            libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                     as
                                                                                                     *mut SaveContext)).newf.as_mut_ptr().offset(4
                                                                                                                                                     as
                                                                                                                                                     libc::c_int
                                                                                                                                                     as
                                                                                                                                                     isize)
                                                                                            as
                                                                                            *mut libc::c_char
                                                                                            as
                                                                                            size_t)
                                                           as isize) as
                               libc::c_int == 'A' as i32 ||
                           *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(0
                                                                                                  as
                                                                                                  libc::c_int
                                                                                                  as
                                                                                                  isize)
                                                            as
                                                            libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                     as
                                                                                                     *mut SaveContext)).newf.as_mut_ptr().offset(5
                                                                                                                                                     as
                                                                                                                                                     libc::c_int
                                                                                                                                                     as
                                                                                                                                                     isize)
                                                                                            as
                                                                                            *mut libc::c_char
                                                                                            as
                                                                                            size_t)
                                                           as isize) as
                               libc::c_int == 'Z' as i32) &&
                          (*(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(1
                                                                                                  as
                                                                                                  libc::c_int
                                                                                                  as
                                                                                                  isize)
                                                            as
                                                            libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                     as
                                                                                                     *mut SaveContext)).newf.as_mut_ptr().offset(0
                                                                                                                                                     as
                                                                                                                                                     libc::c_int
                                                                                                                                                     as
                                                                                                                                                     isize)
                                                                                            as
                                                                                            *mut libc::c_char
                                                                                            as
                                                                                            size_t)
                                                           as isize) as
                               libc::c_int == 'Z' as i32 ||
                               *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(1
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      isize)
                                                                as
                                                                libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                         as
                                                                                                         *mut SaveContext)).newf.as_mut_ptr().offset(1
                                                                                                                                                         as
                                                                                                                                                         libc::c_int
                                                                                                                                                         as
                                                                                                                                                         isize)
                                                                                                as
                                                                                                *mut libc::c_char
                                                                                                as
                                                                                                size_t)
                                                               as isize) as
                                   libc::c_int == 'E' as i32 ||
                               *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(1
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      isize)
                                                                as
                                                                libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                         as
                                                                                                         *mut SaveContext)).newf.as_mut_ptr().offset(2
                                                                                                                                                         as
                                                                                                                                                         libc::c_int
                                                                                                                                                         as
                                                                                                                                                         isize)
                                                                                                as
                                                                                                *mut libc::c_char
                                                                                                as
                                                                                                size_t)
                                                               as isize) as
                                   libc::c_int == 'L' as i32 ||
                               *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(1
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      isize)
                                                                as
                                                                libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                         as
                                                                                                         *mut SaveContext)).newf.as_mut_ptr().offset(3
                                                                                                                                                         as
                                                                                                                                                         libc::c_int
                                                                                                                                                         as
                                                                                                                                                         isize)
                                                                                                as
                                                                                                *mut libc::c_char
                                                                                                as
                                                                                                size_t)
                                                               as isize) as
                                   libc::c_int == 'D' as i32 ||
                               *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(1
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      isize)
                                                                as
                                                                libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                         as
                                                                                                         *mut SaveContext)).newf.as_mut_ptr().offset(4
                                                                                                                                                         as
                                                                                                                                                         libc::c_int
                                                                                                                                                         as
                                                                                                                                                         isize)
                                                                                                as
                                                                                                *mut libc::c_char
                                                                                                as
                                                                                                size_t)
                                                               as isize) as
                                   libc::c_int == 'A' as i32 ||
                               *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(1
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      isize)
                                                                as
                                                                libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                         as
                                                                                                         *mut SaveContext)).newf.as_mut_ptr().offset(5
                                                                                                                                                         as
                                                                                                                                                         libc::c_int
                                                                                                                                                         as
                                                                                                                                                         isize)
                                                                                                as
                                                                                                *mut libc::c_char
                                                                                                as
                                                                                                size_t)
                                                               as isize) as
                                   libc::c_int == 'Z' as i32) &&
                          (*(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(2
                                                                                                  as
                                                                                                  libc::c_int
                                                                                                  as
                                                                                                  isize)
                                                            as
                                                            libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                     as
                                                                                                     *mut SaveContext)).newf.as_mut_ptr().offset(0
                                                                                                                                                     as
                                                                                                                                                     libc::c_int
                                                                                                                                                     as
                                                                                                                                                     isize)
                                                                                            as
                                                                                            *mut libc::c_char
                                                                                            as
                                                                                            size_t)
                                                           as isize) as
                               libc::c_int == 'Z' as i32 ||
                               *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(2
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      isize)
                                                                as
                                                                libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                         as
                                                                                                         *mut SaveContext)).newf.as_mut_ptr().offset(1
                                                                                                                                                         as
                                                                                                                                                         libc::c_int
                                                                                                                                                         as
                                                                                                                                                         isize)
                                                                                                as
                                                                                                *mut libc::c_char
                                                                                                as
                                                                                                size_t)
                                                               as isize) as
                                   libc::c_int == 'E' as i32 ||
                               *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(2
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      isize)
                                                                as
                                                                libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                         as
                                                                                                         *mut SaveContext)).newf.as_mut_ptr().offset(2
                                                                                                                                                         as
                                                                                                                                                         libc::c_int
                                                                                                                                                         as
                                                                                                                                                         isize)
                                                                                                as
                                                                                                *mut libc::c_char
                                                                                                as
                                                                                                size_t)
                                                               as isize) as
                                   libc::c_int == 'L' as i32 ||
                               *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(2
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      isize)
                                                                as
                                                                libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                         as
                                                                                                         *mut SaveContext)).newf.as_mut_ptr().offset(3
                                                                                                                                                         as
                                                                                                                                                         libc::c_int
                                                                                                                                                         as
                                                                                                                                                         isize)
                                                                                                as
                                                                                                *mut libc::c_char
                                                                                                as
                                                                                                size_t)
                                                               as isize) as
                                   libc::c_int == 'D' as i32 ||
                               *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(2
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      isize)
                                                                as
                                                                libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                         as
                                                                                                         *mut SaveContext)).newf.as_mut_ptr().offset(4
                                                                                                                                                         as
                                                                                                                                                         libc::c_int
                                                                                                                                                         as
                                                                                                                                                         isize)
                                                                                                as
                                                                                                *mut libc::c_char
                                                                                                as
                                                                                                size_t)
                                                               as isize) as
                                   libc::c_int == 'A' as i32 ||
                               *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(2
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      isize)
                                                                as
                                                                libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                         as
                                                                                                         *mut SaveContext)).newf.as_mut_ptr().offset(5
                                                                                                                                                         as
                                                                                                                                                         libc::c_int
                                                                                                                                                         as
                                                                                                                                                         isize)
                                                                                                as
                                                                                                *mut libc::c_char
                                                                                                as
                                                                                                size_t)
                                                               as isize) as
                                   libc::c_int == 'Z' as i32) {
                (*this).warningButtonIndex = (*this).buttonIndex;
                (*this).warningLabel =
                    FS_WARNING_NO_EMPTY_FILES as libc::c_int as s16;
                (*this).emptyFileTextAlpha = 255 as libc::c_int as s16
            } else {
                (*this).warningLabel = FS_WARNING_NONE as libc::c_int as s16
            }
        } else if (*this).buttonIndex as libc::c_int ==
                      FS_BTN_MAIN_ERASE as libc::c_int {
            if !(*(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(0
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        isize)
                                                  as
                                                  libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                           as
                                                                                           *mut SaveContext)).newf.as_mut_ptr().offset(0
                                                                                                                                           as
                                                                                                                                           libc::c_int
                                                                                                                                           as
                                                                                                                                           isize)
                                                                                  as
                                                                                  *mut libc::c_char
                                                                                  as
                                                                                  size_t)
                                                 as isize) as libc::c_int ==
                     'Z' as i32 ||
                     *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(0
                                                                                            as
                                                                                            libc::c_int
                                                                                            as
                                                                                            isize)
                                                      as
                                                      libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                               as
                                                                                               *mut SaveContext)).newf.as_mut_ptr().offset(1
                                                                                                                                               as
                                                                                                                                               libc::c_int
                                                                                                                                               as
                                                                                                                                               isize)
                                                                                      as
                                                                                      *mut libc::c_char
                                                                                      as
                                                                                      size_t)
                                                     as isize) as libc::c_int
                         == 'E' as i32 ||
                     *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(0
                                                                                            as
                                                                                            libc::c_int
                                                                                            as
                                                                                            isize)
                                                      as
                                                      libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                               as
                                                                                               *mut SaveContext)).newf.as_mut_ptr().offset(2
                                                                                                                                               as
                                                                                                                                               libc::c_int
                                                                                                                                               as
                                                                                                                                               isize)
                                                                                      as
                                                                                      *mut libc::c_char
                                                                                      as
                                                                                      size_t)
                                                     as isize) as libc::c_int
                         == 'L' as i32 ||
                     *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(0
                                                                                            as
                                                                                            libc::c_int
                                                                                            as
                                                                                            isize)
                                                      as
                                                      libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                               as
                                                                                               *mut SaveContext)).newf.as_mut_ptr().offset(3
                                                                                                                                               as
                                                                                                                                               libc::c_int
                                                                                                                                               as
                                                                                                                                               isize)
                                                                                      as
                                                                                      *mut libc::c_char
                                                                                      as
                                                                                      size_t)
                                                     as isize) as libc::c_int
                         == 'D' as i32 ||
                     *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(0
                                                                                            as
                                                                                            libc::c_int
                                                                                            as
                                                                                            isize)
                                                      as
                                                      libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                               as
                                                                                               *mut SaveContext)).newf.as_mut_ptr().offset(4
                                                                                                                                               as
                                                                                                                                               libc::c_int
                                                                                                                                               as
                                                                                                                                               isize)
                                                                                      as
                                                                                      *mut libc::c_char
                                                                                      as
                                                                                      size_t)
                                                     as isize) as libc::c_int
                         == 'A' as i32 ||
                     *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(0
                                                                                            as
                                                                                            libc::c_int
                                                                                            as
                                                                                            isize)
                                                      as
                                                      libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                               as
                                                                                               *mut SaveContext)).newf.as_mut_ptr().offset(5
                                                                                                                                               as
                                                                                                                                               libc::c_int
                                                                                                                                               as
                                                                                                                                               isize)
                                                                                      as
                                                                                      *mut libc::c_char
                                                                                      as
                                                                                      size_t)
                                                     as isize) as libc::c_int
                         == 'Z' as i32) &&
                   !(*(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(1
                                                                                            as
                                                                                            libc::c_int
                                                                                            as
                                                                                            isize)
                                                      as
                                                      libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                               as
                                                                                               *mut SaveContext)).newf.as_mut_ptr().offset(0
                                                                                                                                               as
                                                                                                                                               libc::c_int
                                                                                                                                               as
                                                                                                                                               isize)
                                                                                      as
                                                                                      *mut libc::c_char
                                                                                      as
                                                                                      size_t)
                                                     as isize) as libc::c_int
                         == 'Z' as i32 ||
                         *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(1
                                                                                                as
                                                                                                libc::c_int
                                                                                                as
                                                                                                isize)
                                                          as
                                                          libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                   as
                                                                                                   *mut SaveContext)).newf.as_mut_ptr().offset(1
                                                                                                                                                   as
                                                                                                                                                   libc::c_int
                                                                                                                                                   as
                                                                                                                                                   isize)
                                                                                          as
                                                                                          *mut libc::c_char
                                                                                          as
                                                                                          size_t)
                                                         as isize) as
                             libc::c_int == 'E' as i32 ||
                         *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(1
                                                                                                as
                                                                                                libc::c_int
                                                                                                as
                                                                                                isize)
                                                          as
                                                          libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                   as
                                                                                                   *mut SaveContext)).newf.as_mut_ptr().offset(2
                                                                                                                                                   as
                                                                                                                                                   libc::c_int
                                                                                                                                                   as
                                                                                                                                                   isize)
                                                                                          as
                                                                                          *mut libc::c_char
                                                                                          as
                                                                                          size_t)
                                                         as isize) as
                             libc::c_int == 'L' as i32 ||
                         *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(1
                                                                                                as
                                                                                                libc::c_int
                                                                                                as
                                                                                                isize)
                                                          as
                                                          libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                   as
                                                                                                   *mut SaveContext)).newf.as_mut_ptr().offset(3
                                                                                                                                                   as
                                                                                                                                                   libc::c_int
                                                                                                                                                   as
                                                                                                                                                   isize)
                                                                                          as
                                                                                          *mut libc::c_char
                                                                                          as
                                                                                          size_t)
                                                         as isize) as
                             libc::c_int == 'D' as i32 ||
                         *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(1
                                                                                                as
                                                                                                libc::c_int
                                                                                                as
                                                                                                isize)
                                                          as
                                                          libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                   as
                                                                                                   *mut SaveContext)).newf.as_mut_ptr().offset(4
                                                                                                                                                   as
                                                                                                                                                   libc::c_int
                                                                                                                                                   as
                                                                                                                                                   isize)
                                                                                          as
                                                                                          *mut libc::c_char
                                                                                          as
                                                                                          size_t)
                                                         as isize) as
                             libc::c_int == 'A' as i32 ||
                         *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(1
                                                                                                as
                                                                                                libc::c_int
                                                                                                as
                                                                                                isize)
                                                          as
                                                          libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                   as
                                                                                                   *mut SaveContext)).newf.as_mut_ptr().offset(5
                                                                                                                                                   as
                                                                                                                                                   libc::c_int
                                                                                                                                                   as
                                                                                                                                                   isize)
                                                                                          as
                                                                                          *mut libc::c_char
                                                                                          as
                                                                                          size_t)
                                                         as isize) as
                             libc::c_int == 'Z' as i32) &&
                   !(*(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(2
                                                                                            as
                                                                                            libc::c_int
                                                                                            as
                                                                                            isize)
                                                      as
                                                      libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                               as
                                                                                               *mut SaveContext)).newf.as_mut_ptr().offset(0
                                                                                                                                               as
                                                                                                                                               libc::c_int
                                                                                                                                               as
                                                                                                                                               isize)
                                                                                      as
                                                                                      *mut libc::c_char
                                                                                      as
                                                                                      size_t)
                                                     as isize) as libc::c_int
                         == 'Z' as i32 ||
                         *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(2
                                                                                                as
                                                                                                libc::c_int
                                                                                                as
                                                                                                isize)
                                                          as
                                                          libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                   as
                                                                                                   *mut SaveContext)).newf.as_mut_ptr().offset(1
                                                                                                                                                   as
                                                                                                                                                   libc::c_int
                                                                                                                                                   as
                                                                                                                                                   isize)
                                                                                          as
                                                                                          *mut libc::c_char
                                                                                          as
                                                                                          size_t)
                                                         as isize) as
                             libc::c_int == 'E' as i32 ||
                         *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(2
                                                                                                as
                                                                                                libc::c_int
                                                                                                as
                                                                                                isize)
                                                          as
                                                          libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                   as
                                                                                                   *mut SaveContext)).newf.as_mut_ptr().offset(2
                                                                                                                                                   as
                                                                                                                                                   libc::c_int
                                                                                                                                                   as
                                                                                                                                                   isize)
                                                                                          as
                                                                                          *mut libc::c_char
                                                                                          as
                                                                                          size_t)
                                                         as isize) as
                             libc::c_int == 'L' as i32 ||
                         *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(2
                                                                                                as
                                                                                                libc::c_int
                                                                                                as
                                                                                                isize)
                                                          as
                                                          libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                   as
                                                                                                   *mut SaveContext)).newf.as_mut_ptr().offset(3
                                                                                                                                                   as
                                                                                                                                                   libc::c_int
                                                                                                                                                   as
                                                                                                                                                   isize)
                                                                                          as
                                                                                          *mut libc::c_char
                                                                                          as
                                                                                          size_t)
                                                         as isize) as
                             libc::c_int == 'D' as i32 ||
                         *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(2
                                                                                                as
                                                                                                libc::c_int
                                                                                                as
                                                                                                isize)
                                                          as
                                                          libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                   as
                                                                                                   *mut SaveContext)).newf.as_mut_ptr().offset(4
                                                                                                                                                   as
                                                                                                                                                   libc::c_int
                                                                                                                                                   as
                                                                                                                                                   isize)
                                                                                          as
                                                                                          *mut libc::c_char
                                                                                          as
                                                                                          size_t)
                                                         as isize) as
                             libc::c_int == 'A' as i32 ||
                         *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(2
                                                                                                as
                                                                                                libc::c_int
                                                                                                as
                                                                                                isize)
                                                          as
                                                          libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                                   as
                                                                                                   *mut SaveContext)).newf.as_mut_ptr().offset(5
                                                                                                                                                   as
                                                                                                                                                   libc::c_int
                                                                                                                                                   as
                                                                                                                                                   isize)
                                                                                          as
                                                                                          *mut libc::c_char
                                                                                          as
                                                                                          size_t)
                                                         as isize) as
                             libc::c_int == 'Z' as i32) {
                (*this).warningButtonIndex = (*this).buttonIndex;
                (*this).warningLabel =
                    FS_WARNING_NO_FILE_ERASE as libc::c_int as s16;
                (*this).emptyFileTextAlpha = 255 as libc::c_int as s16
            } else {
                (*this).warningLabel = FS_WARNING_NONE as libc::c_int as s16
            }
        } else {
            (*this).warningLabel = FS_WARNING_NONE as libc::c_int as s16
        }
    };
}
/* *
 * Update function for `CM_UNUSED_31`
 */
#[no_mangle]
pub unsafe extern "C" fn FileChoose_UnusedCM31(mut thisx: *mut GameState) { }
/* *
 * Delay the next config mode from running until `XREG(73)` reaches 254.
 * Because the timer increments by 2, the delay is 127 frames (assuming the value was not changed by reg editor).
 * Unused in the final game, was possibly used for debugging.
 * Update function for `CM_UNUSED_DELAY`
 */
#[no_mangle]
pub unsafe extern "C" fn FileChoose_UnusedCMDelay(mut thisx: *mut GameState) {
    let mut this: *mut FileChooseContext = thisx as *mut FileChooseContext;
    (*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 73 as libc::c_int) as usize] =
        ((*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int *
                                16 as libc::c_int + 73 as libc::c_int) as
                               usize] as libc::c_int + 2 as libc::c_int) as
            s16;
    if (*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int *
                              16 as libc::c_int + 73 as libc::c_int) as usize]
           as libc::c_int == 254 as libc::c_int {
        (*this).configMode = (*this).nextConfigMode;
        (*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int *
                               16 as libc::c_int + 73 as libc::c_int) as
                              usize] = 0 as libc::c_int as s16
    };
}
/* *
 * Rotate the window from the main menu to the name entry menu.
 * Update function for `CM_ROTATE_TO_NAME_ENTRY`
 */
#[no_mangle]
pub unsafe extern "C" fn FileChoose_RotateToNameEntry(mut thisx:
                                                          *mut GameState) {
    let mut this: *mut FileChooseContext = thisx as *mut FileChooseContext;
    (*this).windowRot +=
        (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                               16 as libc::c_int + 16 as libc::c_int) as
                              usize] as libc::c_int as libc::c_float;
    if (*this).windowRot >= 314.0f32 {
        (*this).windowRot = 314.0f32;
        (*this).configMode = CM_START_NAME_ENTRY as libc::c_int as s16
    };
}
/* *
 * Rotate the window from the main menu to the options menu.
 * Update function for `CM_MAIN_TO_OPTIONS`
 */
#[no_mangle]
pub unsafe extern "C" fn FileChoose_RotateToOptions(mut thisx:
                                                        *mut GameState) {
    let mut this: *mut FileChooseContext = thisx as *mut FileChooseContext;
    (*this).windowRot +=
        (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                               16 as libc::c_int + 16 as libc::c_int) as
                              usize] as libc::c_int as libc::c_float;
    if (*this).windowRot >= 314.0f32 {
        (*this).windowRot = 314.0f32;
        (*this).configMode = CM_START_OPTIONS as libc::c_int as s16
    };
}
/* *
 * Rotate the window from the options menu to the main menu.
 * Update function for `CM_NAME_ENTRY_TO_MAIN` and `CM_OPTIONS_TO_MAIN`
 */
#[no_mangle]
pub unsafe extern "C" fn FileChoose_RotateToMain(mut thisx: *mut GameState) {
    let mut this: *mut FileChooseContext = thisx as *mut FileChooseContext;
    (*this).windowRot +=
        (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                               16 as libc::c_int + 16 as libc::c_int) as
                              usize] as libc::c_int as libc::c_float;
    if (*this).windowRot >= 628.0f32 {
        (*this).windowRot = 0.0f32;
        (*this).configMode = CM_MAIN_MENU as libc::c_int as s16
    };
}
static mut gConfigModeUpdateFuncs:
       [Option<unsafe extern "C" fn(_: *mut GameState) -> ()>; 41] =
    unsafe {
        [Some(FileChoose_StartFadeIn as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_FinishFadeIn as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_UpdateMainMenu as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_SetupCopySource as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_SelectCopySource as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_SetupCopyDest1 as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_SetupCopyDest2 as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_SelectCopyDest as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_ExitToCopySource1 as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_ExitToCopySource2 as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_SetupCopyConfirm1 as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_SetupCopyConfirm2 as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_CopyConfirm as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_ReturnToCopyDest as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_CopyAnim1 as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_CopyAnim2 as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_CopyAnim3 as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_CopyAnim4 as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_CopyAnim5 as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_ExitCopyToMain as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_SetupEraseSelect as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_EraseSelect as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_SetupEraseConfirm1 as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_SetupEraseConfirm2 as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_EraseConfirm as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_ExitToEraseSelect1 as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_ExitToEraseSelect2 as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_EraseAnim1 as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_EraseAnim2 as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_EraseAnim3 as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_ExitEraseToMain as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_UnusedCM31 as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_RotateToNameEntry as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_UpdateKeyboardCursor as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_StartNameEntry as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_RotateToMain as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_RotateToOptions as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_UpdateOptionsMenu as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_StartOptions as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_RotateToMain as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_UnusedCMDelay as
                  unsafe extern "C" fn(_: *mut GameState) -> ())]
    };
/* *
 * Updates the alpha of the cursor to make it pulsate.
 * On the debug rom, this function also handles switching languages with controller 3.
 */
#[no_mangle]
pub unsafe extern "C" fn FileChoose_PulsateCursor(mut thisx: *mut GameState) {
    static mut cursorAlphaTargets: [s16; 2] =
        [70 as libc::c_int as s16, 200 as libc::c_int as s16];
    let mut this: *mut FileChooseContext = thisx as *mut FileChooseContext;
    let mut alphaStep: s16 = 0;
    let mut sramCtx: *mut SramContext = &mut (*this).sramCtx;
    let mut debugInput: *mut Input =
        &mut *(*this).state.input.as_mut_ptr().offset(2 as libc::c_int as
                                                          isize) as
            *mut Input;
    if !((*debugInput).press.button as libc::c_int | !(0x200 as libc::c_int))
           == 0 as libc::c_int {
        gSaveContext.language = LANGUAGE_ENG as libc::c_int as u8_0;
        *(*sramCtx).readBuff.offset(SRAM_HEADER_LANGUAGE as libc::c_int as
                                        isize) = gSaveContext.language;
        *(0x80000002 as libc::c_uint as *mut u8_0) =
            LANGUAGE_ENG as libc::c_int as u8_0;
        SsSram_ReadWrite((0xa8000000 as libc::c_uint as
                              *mut libc::c_char).offset(-(0xa0000000 as
                                                              libc::c_uint as
                                                              isize)) as
                             u32_0, (*sramCtx).readBuff as *mut libc::c_void,
                         3 as libc::c_int as size_t, 1 as libc::c_int);
        osSyncPrintf(b"1:read_buff[]=%x, %x, %x, %x\n\x00" as *const u8 as
                         *const libc::c_char,
                     *(*sramCtx).readBuff.offset(SRAM_HEADER_SOUND as
                                                     libc::c_int as isize) as
                         libc::c_int,
                     *(*sramCtx).readBuff.offset(SRAM_HEADER_ZTARGET as
                                                     libc::c_int as isize) as
                         libc::c_int,
                     *(*sramCtx).readBuff.offset(SRAM_HEADER_LANGUAGE as
                                                     libc::c_int as isize) as
                         libc::c_int,
                     *(*sramCtx).readBuff.offset(SRAM_HEADER_MAGIC as
                                                     libc::c_int as isize) as
                         libc::c_int);
        SsSram_ReadWrite((0xa8000000 as libc::c_uint as
                              *mut libc::c_char).offset(-(0xa0000000 as
                                                              libc::c_uint as
                                                              isize)) as
                             u32_0, (*sramCtx).readBuff as *mut libc::c_void,
                         0x8000 as libc::c_int as size_t, 0 as libc::c_int);
        osSyncPrintf(b"read_buff[]=%x, %x, %x, %x\n\x00" as *const u8 as
                         *const libc::c_char,
                     *(*sramCtx).readBuff.offset(SRAM_HEADER_SOUND as
                                                     libc::c_int as isize) as
                         libc::c_int,
                     *(*sramCtx).readBuff.offset(SRAM_HEADER_ZTARGET as
                                                     libc::c_int as isize) as
                         libc::c_int,
                     *(*sramCtx).readBuff.offset(SRAM_HEADER_LANGUAGE as
                                                     libc::c_int as isize) as
                         libc::c_int,
                     *(*sramCtx).readBuff.offset(SRAM_HEADER_MAGIC as
                                                     libc::c_int as isize) as
                         libc::c_int);
    } else if !((*debugInput).press.button as libc::c_int |
                    !(0x800 as libc::c_int)) == 0 as libc::c_int {
        gSaveContext.language = LANGUAGE_GER as libc::c_int as u8_0;
        *(*sramCtx).readBuff.offset(SRAM_HEADER_LANGUAGE as libc::c_int as
                                        isize) = gSaveContext.language;
        *(0x80000002 as libc::c_uint as *mut u8_0) =
            LANGUAGE_GER as libc::c_int as u8_0;
        SsSram_ReadWrite((0xa8000000 as libc::c_uint as
                              *mut libc::c_char).offset(-(0xa0000000 as
                                                              libc::c_uint as
                                                              isize)) as
                             u32_0, (*sramCtx).readBuff as *mut libc::c_void,
                         3 as libc::c_int as size_t, 1 as libc::c_int);
        osSyncPrintf(b"1:read_buff[]=%x, %x, %x, %x\n\x00" as *const u8 as
                         *const libc::c_char,
                     *(*sramCtx).readBuff.offset(SRAM_HEADER_SOUND as
                                                     libc::c_int as isize) as
                         libc::c_int,
                     *(*sramCtx).readBuff.offset(SRAM_HEADER_ZTARGET as
                                                     libc::c_int as isize) as
                         libc::c_int,
                     *(*sramCtx).readBuff.offset(SRAM_HEADER_LANGUAGE as
                                                     libc::c_int as isize) as
                         libc::c_int,
                     *(*sramCtx).readBuff.offset(SRAM_HEADER_MAGIC as
                                                     libc::c_int as isize) as
                         libc::c_int);
        SsSram_ReadWrite((0xa8000000 as libc::c_uint as
                              *mut libc::c_char).offset(-(0xa0000000 as
                                                              libc::c_uint as
                                                              isize)) as
                             u32_0, (*sramCtx).readBuff as *mut libc::c_void,
                         0x8000 as libc::c_int as size_t, 0 as libc::c_int);
        osSyncPrintf(b"read_buff[]=%x, %x, %x, %x\n\x00" as *const u8 as
                         *const libc::c_char,
                     *(*sramCtx).readBuff.offset(SRAM_HEADER_SOUND as
                                                     libc::c_int as isize) as
                         libc::c_int,
                     *(*sramCtx).readBuff.offset(SRAM_HEADER_ZTARGET as
                                                     libc::c_int as isize) as
                         libc::c_int,
                     *(*sramCtx).readBuff.offset(SRAM_HEADER_LANGUAGE as
                                                     libc::c_int as isize) as
                         libc::c_int,
                     *(*sramCtx).readBuff.offset(SRAM_HEADER_MAGIC as
                                                     libc::c_int as isize) as
                         libc::c_int);
    } else if !((*debugInput).press.button as libc::c_int |
                    !(0x100 as libc::c_int)) == 0 as libc::c_int {
        gSaveContext.language = LANGUAGE_FRA as libc::c_int as u8_0;
        *(*sramCtx).readBuff.offset(SRAM_HEADER_LANGUAGE as libc::c_int as
                                        isize) = gSaveContext.language;
        *(0x80000002 as libc::c_uint as *mut u8_0) =
            LANGUAGE_FRA as libc::c_int as u8_0;
        SsSram_ReadWrite((0xa8000000 as libc::c_uint as
                              *mut libc::c_char).offset(-(0xa0000000 as
                                                              libc::c_uint as
                                                              isize)) as
                             u32_0, (*sramCtx).readBuff as *mut libc::c_void,
                         3 as libc::c_int as size_t, 1 as libc::c_int);
        osSyncPrintf(b"1:read_buff[]=%x, %x, %x, %x\n\x00" as *const u8 as
                         *const libc::c_char,
                     *(*sramCtx).readBuff.offset(SRAM_HEADER_SOUND as
                                                     libc::c_int as isize) as
                         libc::c_int,
                     *(*sramCtx).readBuff.offset(SRAM_HEADER_ZTARGET as
                                                     libc::c_int as isize) as
                         libc::c_int,
                     *(*sramCtx).readBuff.offset(SRAM_HEADER_LANGUAGE as
                                                     libc::c_int as isize) as
                         libc::c_int,
                     *(*sramCtx).readBuff.offset(SRAM_HEADER_MAGIC as
                                                     libc::c_int as isize) as
                         libc::c_int);
        SsSram_ReadWrite((0xa8000000 as libc::c_uint as
                              *mut libc::c_char).offset(-(0xa0000000 as
                                                              libc::c_uint as
                                                              isize)) as
                             u32_0, (*sramCtx).readBuff as *mut libc::c_void,
                         0x8000 as libc::c_int as size_t, 0 as libc::c_int);
        osSyncPrintf(b"read_buff[]=%x, %x, %x, %x\n\x00" as *const u8 as
                         *const libc::c_char,
                     *(*sramCtx).readBuff.offset(SRAM_HEADER_SOUND as
                                                     libc::c_int as isize) as
                         libc::c_int,
                     *(*sramCtx).readBuff.offset(SRAM_HEADER_ZTARGET as
                                                     libc::c_int as isize) as
                         libc::c_int,
                     *(*sramCtx).readBuff.offset(SRAM_HEADER_LANGUAGE as
                                                     libc::c_int as isize) as
                         libc::c_int,
                     *(*sramCtx).readBuff.offset(SRAM_HEADER_MAGIC as
                                                     libc::c_int as isize) as
                         libc::c_int);
    }
    alphaStep =
        ((if (*this).highlightColor[3 as libc::c_int as usize] as libc::c_int
                 -
                 cursorAlphaTargets[(*this).highlightPulseDir as usize] as
                     libc::c_int >= 0 as libc::c_int {
              ((*this).highlightColor[3 as libc::c_int as usize] as
                   libc::c_int) -
                  cursorAlphaTargets[(*this).highlightPulseDir as usize] as
                      libc::c_int
          } else {
              -((*this).highlightColor[3 as libc::c_int as usize] as
                    libc::c_int -
                    cursorAlphaTargets[(*this).highlightPulseDir as usize] as
                        libc::c_int)
          }) /
             (*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int *
                                    16 as libc::c_int + 35 as libc::c_int) as
                                   usize] as libc::c_int) as s16;
    if (*this).highlightColor[3 as libc::c_int as usize] as libc::c_int >=
           cursorAlphaTargets[(*this).highlightPulseDir as usize] as
               libc::c_int {
        (*this).highlightColor[3 as libc::c_int as usize] =
            ((*this).highlightColor[3 as libc::c_int as usize] as libc::c_int
                 - alphaStep as libc::c_int) as s16
    } else {
        (*this).highlightColor[3 as libc::c_int as usize] =
            ((*this).highlightColor[3 as libc::c_int as usize] as libc::c_int
                 + alphaStep as libc::c_int) as s16
    }
    (*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 35 as libc::c_int) as usize] -=
        1;
    if (*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int *
                              16 as libc::c_int + 35 as libc::c_int) as usize]
           as libc::c_int == 0 as libc::c_int {
        (*this).highlightColor[3 as libc::c_int as usize] =
            cursorAlphaTargets[(*this).highlightPulseDir as usize];
        (*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int *
                               16 as libc::c_int + 35 as libc::c_int) as
                              usize] =
            (*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int *
                                   16 as libc::c_int + 36 as libc::c_int +
                                   (*this).highlightPulseDir as libc::c_int)
                                  as usize];
        (*this).highlightPulseDir =
            ((*this).highlightPulseDir as libc::c_int ^ 1 as libc::c_int) as
                s16
    };
}
#[no_mangle]
pub unsafe extern "C" fn FileChoose_ConfigModeUpdate(mut thisx:
                                                         *mut GameState) {
    let mut this: *mut FileChooseContext = thisx as *mut FileChooseContext;
    gConfigModeUpdateFuncs[(*this).configMode as
                               usize].expect("non-null function pointer")(&mut (*this).state);
}
#[no_mangle]
pub unsafe extern "C" fn FileChoose_SetWindowVtx(mut thisx: *mut GameState) {
    let mut this: *mut FileChooseContext = thisx as *mut FileChooseContext;
    let mut i: s16 = 0;
    let mut j: s16 = 0;
    let mut x: s16 = 0;
    let mut tmp: s16 = 0;
    let mut tmp2: s16 = 0;
    let mut tmp3: s16 = 0;
    (*this).windowVtx =
        Graph_Alloc((*this).state.gfxCtx,
                    (::std::mem::size_of::<Vtx>() as
                         libc::c_ulong).wrapping_mul(80 as libc::c_int as
                                                         libc::c_uint) as
                        size_t) as *mut Vtx;
    tmp = ((*this).windowPosX as libc::c_int - 90 as libc::c_int) as s16;
    x = 0 as libc::c_int as s16;
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) < 4 as libc::c_int {
        tmp = (tmp as libc::c_int + 0x40 as libc::c_int) as s16;
        tmp2 =
            if i as libc::c_int == 3 as libc::c_int {
                0x30 as libc::c_int
            } else { 0x40 as libc::c_int } as s16;
        j = 0 as libc::c_int as s16;
        tmp3 = 0x50 as libc::c_int as s16;
        while (j as libc::c_int) < 5 as libc::c_int {
            let ref mut fresh8 =
                (*(*this).windowVtx.offset((x as libc::c_int +
                                                2 as libc::c_int) as
                                               isize)).v.ob[0 as libc::c_int
                                                                as usize];
            *fresh8 = tmp;
            (*(*this).windowVtx.offset(x as
                                           isize)).v.ob[0 as libc::c_int as
                                                            usize] = *fresh8;
            let ref mut fresh9 =
                (*(*this).windowVtx.offset((x as libc::c_int +
                                                3 as libc::c_int) as
                                               isize)).v.ob[0 as libc::c_int
                                                                as usize];
            *fresh9 =
                (tmp as libc::c_int + tmp2 as libc::c_int) as libc::c_short;
            (*(*this).windowVtx.offset((x as libc::c_int + 1 as libc::c_int)
                                           as
                                           isize)).v.ob[0 as libc::c_int as
                                                            usize] = *fresh9;
            let ref mut fresh10 =
                (*(*this).windowVtx.offset((x as libc::c_int +
                                                1 as libc::c_int) as
                                               isize)).v.ob[1 as libc::c_int
                                                                as usize];
            *fresh10 = tmp3;
            (*(*this).windowVtx.offset(x as
                                           isize)).v.ob[1 as libc::c_int as
                                                            usize] = *fresh10;
            let ref mut fresh11 =
                (*(*this).windowVtx.offset((x as libc::c_int +
                                                3 as libc::c_int) as
                                               isize)).v.ob[1 as libc::c_int
                                                                as usize];
            *fresh11 =
                (tmp3 as libc::c_int - 0x20 as libc::c_int) as libc::c_short;
            (*(*this).windowVtx.offset((x as libc::c_int + 2 as libc::c_int)
                                           as
                                           isize)).v.ob[1 as libc::c_int as
                                                            usize] = *fresh11;
            let ref mut fresh12 =
                (*(*this).windowVtx.offset((x as libc::c_int +
                                                3 as libc::c_int) as
                                               isize)).v.ob[2 as libc::c_int
                                                                as usize];
            *fresh12 = 0 as libc::c_int as libc::c_short;
            let ref mut fresh13 =
                (*(*this).windowVtx.offset((x as libc::c_int +
                                                2 as libc::c_int) as
                                               isize)).v.ob[2 as libc::c_int
                                                                as usize];
            *fresh13 = *fresh12;
            let ref mut fresh14 =
                (*(*this).windowVtx.offset((x as libc::c_int +
                                                1 as libc::c_int) as
                                               isize)).v.ob[2 as libc::c_int
                                                                as usize];
            *fresh14 = *fresh13;
            (*(*this).windowVtx.offset(x as
                                           isize)).v.ob[2 as libc::c_int as
                                                            usize] = *fresh14;
            let ref mut fresh15 =
                (*(*this).windowVtx.offset((x as libc::c_int +
                                                3 as libc::c_int) as
                                               isize)).v.flag;
            *fresh15 = 0 as libc::c_int as libc::c_ushort;
            let ref mut fresh16 =
                (*(*this).windowVtx.offset((x as libc::c_int +
                                                2 as libc::c_int) as
                                               isize)).v.flag;
            *fresh16 = *fresh15;
            let ref mut fresh17 =
                (*(*this).windowVtx.offset((x as libc::c_int +
                                                1 as libc::c_int) as
                                               isize)).v.flag;
            *fresh17 = *fresh16;
            (*(*this).windowVtx.offset(x as isize)).v.flag = *fresh17;
            let ref mut fresh18 =
                (*(*this).windowVtx.offset((x as libc::c_int +
                                                2 as libc::c_int) as
                                               isize)).v.tc[0 as libc::c_int
                                                                as usize];
            *fresh18 = 0 as libc::c_int as libc::c_short;
            let ref mut fresh19 =
                (*(*this).windowVtx.offset((x as libc::c_int +
                                                1 as libc::c_int) as
                                               isize)).v.tc[1 as libc::c_int
                                                                as usize];
            *fresh19 = *fresh18;
            let ref mut fresh20 =
                (*(*this).windowVtx.offset(x as
                                               isize)).v.tc[1 as libc::c_int
                                                                as usize];
            *fresh20 = *fresh19;
            (*(*this).windowVtx.offset(x as
                                           isize)).v.tc[0 as libc::c_int as
                                                            usize] = *fresh20;
            let ref mut fresh21 =
                (*(*this).windowVtx.offset((x as libc::c_int +
                                                3 as libc::c_int) as
                                               isize)).v.tc[0 as libc::c_int
                                                                as usize];
            *fresh21 =
                (tmp2 as libc::c_int * 0x20 as libc::c_int) as libc::c_short;
            (*(*this).windowVtx.offset((x as libc::c_int + 1 as libc::c_int)
                                           as
                                           isize)).v.tc[0 as libc::c_int as
                                                            usize] = *fresh21;
            let ref mut fresh22 =
                (*(*this).windowVtx.offset((x as libc::c_int +
                                                3 as libc::c_int) as
                                               isize)).v.tc[1 as libc::c_int
                                                                as usize];
            *fresh22 = 0x400 as libc::c_int as libc::c_short;
            (*(*this).windowVtx.offset((x as libc::c_int + 2 as libc::c_int)
                                           as
                                           isize)).v.tc[1 as libc::c_int as
                                                            usize] = *fresh22;
            let ref mut fresh23 =
                (*(*this).windowVtx.offset((x as libc::c_int +
                                                3 as libc::c_int) as
                                               isize)).v.cn[3 as libc::c_int
                                                                as usize];
            *fresh23 = 255 as libc::c_int as libc::c_uchar;
            let ref mut fresh24 =
                (*(*this).windowVtx.offset((x as libc::c_int +
                                                1 as libc::c_int) as
                                               isize)).v.cn[3 as libc::c_int
                                                                as usize];
            *fresh24 = *fresh23;
            let ref mut fresh25 =
                (*(*this).windowVtx.offset((x as libc::c_int +
                                                2 as libc::c_int) as
                                               isize)).v.cn[3 as libc::c_int
                                                                as usize];
            *fresh25 = *fresh24;
            let ref mut fresh26 =
                (*(*this).windowVtx.offset(x as
                                               isize)).v.cn[3 as libc::c_int
                                                                as usize];
            *fresh26 = *fresh25;
            let ref mut fresh27 =
                (*(*this).windowVtx.offset((x as libc::c_int +
                                                3 as libc::c_int) as
                                               isize)).v.cn[2 as libc::c_int
                                                                as usize];
            *fresh27 = *fresh26;
            let ref mut fresh28 =
                (*(*this).windowVtx.offset((x as libc::c_int +
                                                1 as libc::c_int) as
                                               isize)).v.cn[2 as libc::c_int
                                                                as usize];
            *fresh28 = *fresh27;
            let ref mut fresh29 =
                (*(*this).windowVtx.offset((x as libc::c_int +
                                                3 as libc::c_int) as
                                               isize)).v.cn[1 as libc::c_int
                                                                as usize];
            *fresh29 = *fresh28;
            let ref mut fresh30 =
                (*(*this).windowVtx.offset((x as libc::c_int +
                                                1 as libc::c_int) as
                                               isize)).v.cn[1 as libc::c_int
                                                                as usize];
            *fresh30 = *fresh29;
            let ref mut fresh31 =
                (*(*this).windowVtx.offset((x as libc::c_int +
                                                3 as libc::c_int) as
                                               isize)).v.cn[0 as libc::c_int
                                                                as usize];
            *fresh31 = *fresh30;
            let ref mut fresh32 =
                (*(*this).windowVtx.offset((x as libc::c_int +
                                                1 as libc::c_int) as
                                               isize)).v.cn[0 as libc::c_int
                                                                as usize];
            *fresh32 = *fresh31;
            let ref mut fresh33 =
                (*(*this).windowVtx.offset((x as libc::c_int +
                                                2 as libc::c_int) as
                                               isize)).v.cn[2 as libc::c_int
                                                                as usize];
            *fresh33 = *fresh32;
            let ref mut fresh34 =
                (*(*this).windowVtx.offset(x as
                                               isize)).v.cn[2 as libc::c_int
                                                                as usize];
            *fresh34 = *fresh33;
            let ref mut fresh35 =
                (*(*this).windowVtx.offset((x as libc::c_int +
                                                2 as libc::c_int) as
                                               isize)).v.cn[1 as libc::c_int
                                                                as usize];
            *fresh35 = *fresh34;
            let ref mut fresh36 =
                (*(*this).windowVtx.offset(x as
                                               isize)).v.cn[1 as libc::c_int
                                                                as usize];
            *fresh36 = *fresh35;
            let ref mut fresh37 =
                (*(*this).windowVtx.offset((x as libc::c_int +
                                                2 as libc::c_int) as
                                               isize)).v.cn[0 as libc::c_int
                                                                as usize];
            *fresh37 = *fresh36;
            (*(*this).windowVtx.offset(x as
                                           isize)).v.cn[0 as libc::c_int as
                                                            usize] = *fresh37;
            j += 1;
            x = (x as libc::c_int + 4 as libc::c_int) as s16;
            tmp3 = (tmp3 as libc::c_int - 0x20 as libc::c_int) as s16
        }
        i += 1
    };
}
static mut D_80812818: [s16; 4] =
    [0x1a as libc::c_int as s16, 0xa as libc::c_int as s16,
     0xa as libc::c_int as s16, 0xa as libc::c_int as s16];
static mut D_80812820: [s16; 4] =
    [0x20 as libc::c_int as s16, 0xc as libc::c_int as s16,
     0xc as libc::c_int as s16, 0xc as libc::c_int as s16];
static mut D_80812828: [s16; 4] =
    [0x10 as libc::c_int as s16, 0xc as libc::c_int as s16,
     0xc as libc::c_int as s16, 0xc as libc::c_int as s16];
static mut D_80812830: [s16; 6] =
    [0x40 as libc::c_int as s16, 0x54 as libc::c_int as s16,
     0x68 as libc::c_int as s16, 0x274 as libc::c_int as s16,
     0x278 as libc::c_int as s16, 0x27c as libc::c_int as s16];
static mut D_8081283C: [s16; 4] =
    [0x40 as libc::c_int as s16, 0x54 as libc::c_int as s16,
     0x68 as libc::c_int as s16, 0x278 as libc::c_int as s16];
static mut D_80812844: [s16; 2] =
    [0x274 as libc::c_int as s16, 0x278 as libc::c_int as s16];
static mut D_80812848: [s16; 2] =
    [0x274 as libc::c_int as s16, 0x278 as libc::c_int as s16];
#[no_mangle]
pub unsafe extern "C" fn FileChoose_SetWindowContentVtx(mut thisx:
                                                            *mut GameState) {
    let mut this: *mut FileChooseContext = thisx as *mut FileChooseContext;
    let mut phi_t2: s16 = 0;
    let mut phi_t0: s16 = 0;
    let mut phi_t5: s16 = 0;
    let mut phi_a1: s16 = 0;
    let mut phi_ra: s16 = 0;
    let mut temp_t1: s16 = 0;
    let mut sramCtx: *mut SramContext = &mut (*this).sramCtx;
    (*this).windowContentVtx =
        Graph_Alloc((*this).state.gfxCtx,
                    (0x288 as libc::c_int as
                         libc::c_uint).wrapping_mul(::std::mem::size_of::<Vtx>()
                                                        as libc::c_ulong) as
                        size_t) as *mut Vtx;
    phi_t2 = 0 as libc::c_int as s16;
    while (phi_t2 as libc::c_int) < 0x288 as libc::c_int {
        let ref mut fresh38 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   2 as libc::c_int) as
                                                  isize)).v.ob[0 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh38 = 0x12c as libc::c_int as libc::c_short;
        (*(*this).windowContentVtx.offset(phi_t2 as
                                              isize)).v.ob[0 as libc::c_int as
                                                               usize] =
            *fresh38;
        let ref mut fresh39 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   3 as libc::c_int) as
                                                  isize)).v.ob[0 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh39 =
            ((*(*this).windowContentVtx.offset(phi_t2 as
                                                   isize)).v.ob[0 as
                                                                    libc::c_int
                                                                    as usize]
                 as libc::c_int + 0x10 as libc::c_int) as libc::c_short;
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               1 as libc::c_int) as
                                              isize)).v.ob[0 as libc::c_int as
                                                               usize] =
            *fresh39;
        let ref mut fresh40 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   1 as libc::c_int) as
                                                  isize)).v.ob[1 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh40 = 0 as libc::c_int as libc::c_short;
        (*(*this).windowContentVtx.offset(phi_t2 as
                                              isize)).v.ob[1 as libc::c_int as
                                                               usize] =
            *fresh40;
        let ref mut fresh41 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   3 as libc::c_int) as
                                                  isize)).v.ob[1 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh41 =
            ((*(*this).windowContentVtx.offset(phi_t2 as
                                                   isize)).v.ob[1 as
                                                                    libc::c_int
                                                                    as usize]
                 as libc::c_int - 0x10 as libc::c_int) as libc::c_short;
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               2 as libc::c_int) as
                                              isize)).v.ob[1 as libc::c_int as
                                                               usize] =
            *fresh41;
        let ref mut fresh42 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   3 as libc::c_int) as
                                                  isize)).v.ob[2 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh42 = 0 as libc::c_int as libc::c_short;
        let ref mut fresh43 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   2 as libc::c_int) as
                                                  isize)).v.ob[2 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh43 = *fresh42;
        let ref mut fresh44 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   1 as libc::c_int) as
                                                  isize)).v.ob[2 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh44 = *fresh43;
        (*(*this).windowContentVtx.offset(phi_t2 as
                                              isize)).v.ob[2 as libc::c_int as
                                                               usize] =
            *fresh44;
        let ref mut fresh45 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   3 as libc::c_int) as
                                                  isize)).v.flag;
        *fresh45 = 0 as libc::c_int as libc::c_ushort;
        let ref mut fresh46 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   2 as libc::c_int) as
                                                  isize)).v.flag;
        *fresh46 = *fresh45;
        let ref mut fresh47 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   1 as libc::c_int) as
                                                  isize)).v.flag;
        *fresh47 = *fresh46;
        (*(*this).windowContentVtx.offset(phi_t2 as isize)).v.flag = *fresh47;
        let ref mut fresh48 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   2 as libc::c_int) as
                                                  isize)).v.tc[0 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh48 = 0 as libc::c_int as libc::c_short;
        let ref mut fresh49 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   1 as libc::c_int) as
                                                  isize)).v.tc[1 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh49 = *fresh48;
        let ref mut fresh50 =
            (*(*this).windowContentVtx.offset(phi_t2 as
                                                  isize)).v.tc[1 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh50 = *fresh49;
        (*(*this).windowContentVtx.offset(phi_t2 as
                                              isize)).v.tc[0 as libc::c_int as
                                                               usize] =
            *fresh50;
        let ref mut fresh51 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   3 as libc::c_int) as
                                                  isize)).v.tc[1 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh51 = 0x200 as libc::c_int as libc::c_short;
        let ref mut fresh52 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   3 as libc::c_int) as
                                                  isize)).v.tc[0 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh52 = *fresh51;
        let ref mut fresh53 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   2 as libc::c_int) as
                                                  isize)).v.tc[1 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh53 = *fresh52;
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               1 as libc::c_int) as
                                              isize)).v.tc[0 as libc::c_int as
                                                               usize] =
            *fresh53;
        let ref mut fresh54 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   3 as libc::c_int) as
                                                  isize)).v.cn[3 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh54 = 0xff as libc::c_int as libc::c_uchar;
        let ref mut fresh55 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   2 as libc::c_int) as
                                                  isize)).v.cn[3 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh55 = *fresh54;
        let ref mut fresh56 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   1 as libc::c_int) as
                                                  isize)).v.cn[3 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh56 = *fresh55;
        let ref mut fresh57 =
            (*(*this).windowContentVtx.offset(phi_t2 as
                                                  isize)).v.cn[3 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh57 = *fresh56;
        let ref mut fresh58 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   3 as libc::c_int) as
                                                  isize)).v.cn[2 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh58 = *fresh57;
        let ref mut fresh59 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   2 as libc::c_int) as
                                                  isize)).v.cn[2 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh59 = *fresh58;
        let ref mut fresh60 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   1 as libc::c_int) as
                                                  isize)).v.cn[2 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh60 = *fresh59;
        let ref mut fresh61 =
            (*(*this).windowContentVtx.offset(phi_t2 as
                                                  isize)).v.cn[2 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh61 = *fresh60;
        let ref mut fresh62 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   3 as libc::c_int) as
                                                  isize)).v.cn[1 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh62 = *fresh61;
        let ref mut fresh63 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   2 as libc::c_int) as
                                                  isize)).v.cn[1 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh63 = *fresh62;
        let ref mut fresh64 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   1 as libc::c_int) as
                                                  isize)).v.cn[1 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh64 = *fresh63;
        let ref mut fresh65 =
            (*(*this).windowContentVtx.offset(phi_t2 as
                                                  isize)).v.cn[1 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh65 = *fresh64;
        let ref mut fresh66 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   3 as libc::c_int) as
                                                  isize)).v.cn[0 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh66 = *fresh65;
        let ref mut fresh67 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   2 as libc::c_int) as
                                                  isize)).v.cn[0 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh67 = *fresh66;
        let ref mut fresh68 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   1 as libc::c_int) as
                                                  isize)).v.cn[0 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh68 = *fresh67;
        (*(*this).windowContentVtx.offset(phi_t2 as
                                              isize)).v.cn[0 as libc::c_int as
                                                               usize] =
            *fresh68;
        phi_t2 = (phi_t2 as libc::c_int + 4 as libc::c_int) as s16
    }
    let ref mut fresh69 =
        (*(*this).windowContentVtx.offset(2 as libc::c_int as
                                              isize)).v.ob[0 as libc::c_int as
                                                               usize];
    *fresh69 = (*this).windowPosX;
    (*(*this).windowContentVtx.offset(0 as libc::c_int as
                                          isize)).v.ob[0 as libc::c_int as
                                                           usize] = *fresh69;
    let ref mut fresh70 =
        (*(*this).windowContentVtx.offset(3 as libc::c_int as
                                              isize)).v.ob[0 as libc::c_int as
                                                               usize];
    *fresh70 =
        ((*(*this).windowContentVtx.offset(0 as libc::c_int as
                                               isize)).v.ob[0 as libc::c_int
                                                                as usize] as
             libc::c_int + 0x80 as libc::c_int) as libc::c_short;
    (*(*this).windowContentVtx.offset(1 as libc::c_int as
                                          isize)).v.ob[0 as libc::c_int as
                                                           usize] = *fresh70;
    let ref mut fresh71 =
        (*(*this).windowContentVtx.offset(1 as libc::c_int as
                                              isize)).v.ob[1 as libc::c_int as
                                                               usize];
    *fresh71 = 0x48 as libc::c_int as libc::c_short;
    (*(*this).windowContentVtx.offset(0 as libc::c_int as
                                          isize)).v.ob[1 as libc::c_int as
                                                           usize] = *fresh71;
    let ref mut fresh72 =
        (*(*this).windowContentVtx.offset(3 as libc::c_int as
                                              isize)).v.ob[1 as libc::c_int as
                                                               usize];
    *fresh72 =
        ((*(*this).windowContentVtx.offset(0 as libc::c_int as
                                               isize)).v.ob[1 as libc::c_int
                                                                as usize] as
             libc::c_int - 0x10 as libc::c_int) as libc::c_short;
    (*(*this).windowContentVtx.offset(2 as libc::c_int as
                                          isize)).v.ob[1 as libc::c_int as
                                                           usize] = *fresh72;
    let ref mut fresh73 =
        (*(*this).windowContentVtx.offset(3 as libc::c_int as
                                              isize)).v.tc[0 as libc::c_int as
                                                               usize];
    *fresh73 = 0x1000 as libc::c_int as libc::c_short;
    (*(*this).windowContentVtx.offset(1 as libc::c_int as
                                          isize)).v.tc[0 as libc::c_int as
                                                           usize] = *fresh73;
    phi_a1 = 0 as libc::c_int as s16;
    phi_t2 = 4 as libc::c_int as s16;
    while (phi_a1 as libc::c_int) < 3 as libc::c_int {
        phi_t0 =
            ((*this).windowPosX as libc::c_int - 6 as libc::c_int) as s16;
        phi_t5 = 0 as libc::c_int as s16;
        while (phi_t5 as libc::c_int) < 5 as libc::c_int {
            let ref mut fresh74 =
                (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                       2 as libc::c_int) as
                                                      isize)).v.ob[0 as
                                                                       libc::c_int
                                                                       as
                                                                       usize];
            *fresh74 = phi_t0;
            (*(*this).windowContentVtx.offset(phi_t2 as
                                                  isize)).v.ob[0 as
                                                                   libc::c_int
                                                                   as usize] =
                *fresh74;
            let ref mut fresh75 =
                (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                       3 as libc::c_int) as
                                                      isize)).v.ob[0 as
                                                                       libc::c_int
                                                                       as
                                                                       usize];
            *fresh75 =
                ((*(*this).windowContentVtx.offset(phi_t2 as
                                                       isize)).v.ob[0 as
                                                                        libc::c_int
                                                                        as
                                                                        usize]
                     as libc::c_int +
                     sFileInfoBoxPartWidths[phi_t5 as usize] as libc::c_int)
                    as libc::c_short;
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   1 as libc::c_int) as
                                                  isize)).v.ob[0 as
                                                                   libc::c_int
                                                                   as usize] =
                *fresh75;
            let ref mut fresh76 =
                (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                       1 as libc::c_int) as
                                                      isize)).v.ob[1 as
                                                                       libc::c_int
                                                                       as
                                                                       usize];
            *fresh76 =
                ((*this).fileNamesY[phi_a1 as usize] as libc::c_int +
                     0x2c as libc::c_int) as libc::c_short;
            (*(*this).windowContentVtx.offset(phi_t2 as
                                                  isize)).v.ob[1 as
                                                                   libc::c_int
                                                                   as usize] =
                *fresh76;
            let ref mut fresh77 =
                (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                       3 as libc::c_int) as
                                                      isize)).v.ob[1 as
                                                                       libc::c_int
                                                                       as
                                                                       usize];
            *fresh77 =
                ((*(*this).windowContentVtx.offset(phi_t2 as
                                                       isize)).v.ob[1 as
                                                                        libc::c_int
                                                                        as
                                                                        usize]
                     as libc::c_int - 0x38 as libc::c_int) as libc::c_short;
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   2 as libc::c_int) as
                                                  isize)).v.ob[1 as
                                                                   libc::c_int
                                                                   as usize] =
                *fresh77;
            let ref mut fresh78 =
                (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                       3 as libc::c_int) as
                                                      isize)).v.tc[0 as
                                                                       libc::c_int
                                                                       as
                                                                       usize];
            *fresh78 =
                ((sFileInfoBoxPartWidths[phi_t5 as usize] as libc::c_int) <<
                     5 as libc::c_int) as libc::c_short;
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   1 as libc::c_int) as
                                                  isize)).v.tc[0 as
                                                                   libc::c_int
                                                                   as usize] =
                *fresh78;
            let ref mut fresh79 =
                (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                       3 as libc::c_int) as
                                                      isize)).v.tc[1 as
                                                                       libc::c_int
                                                                       as
                                                                       usize];
            *fresh79 = 0x700 as libc::c_int as libc::c_short;
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   2 as libc::c_int) as
                                                  isize)).v.tc[1 as
                                                                   libc::c_int
                                                                   as usize] =
                *fresh79;
            phi_t0 =
                (phi_t0 as libc::c_int +
                     sFileInfoBoxPartWidths[phi_t5 as usize] as libc::c_int)
                    as s16;
            phi_t5 += 1;
            phi_t2 = (phi_t2 as libc::c_int + 4 as libc::c_int) as s16
        }
        phi_a1 += 1
    }
    phi_t0 = ((*this).windowPosX as libc::c_int - 6 as libc::c_int) as s16;
    phi_ra = 0x2c as libc::c_int as s16;
    phi_t5 = 0 as libc::c_int as s16;
    while (phi_t5 as libc::c_int) < 3 as libc::c_int {
        let ref mut fresh80 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   2 as libc::c_int) as
                                                  isize)).v.ob[0 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh80 = phi_t0;
        (*(*this).windowContentVtx.offset(phi_t2 as
                                              isize)).v.ob[0 as libc::c_int as
                                                               usize] =
            *fresh80;
        let ref mut fresh81 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   3 as libc::c_int) as
                                                  isize)).v.ob[0 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh81 =
            ((*(*this).windowContentVtx.offset(phi_t2 as
                                                   isize)).v.ob[0 as
                                                                    libc::c_int
                                                                    as usize]
                 as libc::c_int + 0x40 as libc::c_int) as libc::c_short;
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               1 as libc::c_int) as
                                              isize)).v.ob[0 as libc::c_int as
                                                               usize] =
            *fresh81;
        let ref mut fresh82 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   1 as libc::c_int) as
                                                  isize)).v.ob[1 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh82 =
            ((*this).buttonYOffsets[phi_t5 as usize] as libc::c_int +
                 phi_ra as libc::c_int) as libc::c_short;
        (*(*this).windowContentVtx.offset(phi_t2 as
                                              isize)).v.ob[1 as libc::c_int as
                                                               usize] =
            *fresh82;
        let ref mut fresh83 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   3 as libc::c_int) as
                                                  isize)).v.ob[1 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh83 =
            ((*(*this).windowContentVtx.offset(phi_t2 as
                                                   isize)).v.ob[1 as
                                                                    libc::c_int
                                                                    as usize]
                 as libc::c_int - 0x10 as libc::c_int) as libc::c_short;
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               2 as libc::c_int) as
                                              isize)).v.ob[1 as libc::c_int as
                                                               usize] =
            *fresh83;
        let ref mut fresh84 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   3 as libc::c_int) as
                                                  isize)).v.tc[0 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh84 = 0x800 as libc::c_int as libc::c_short;
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               1 as libc::c_int) as
                                              isize)).v.tc[0 as libc::c_int as
                                                               usize] =
            *fresh84;
        let ref mut fresh85 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   6 as libc::c_int) as
                                                  isize)).v.ob[0 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh85 =
            (phi_t0 as libc::c_int + 0x40 as libc::c_int) as libc::c_short;
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               4 as libc::c_int) as
                                              isize)).v.ob[0 as libc::c_int as
                                                               usize] =
            *fresh85;
        let ref mut fresh86 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   7 as libc::c_int) as
                                                  isize)).v.ob[0 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh86 =
            ((*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                    4 as libc::c_int) as
                                                   isize)).v.ob[0 as
                                                                    libc::c_int
                                                                    as usize]
                 as libc::c_int + 0x6c as libc::c_int) as libc::c_short;
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               5 as libc::c_int) as
                                              isize)).v.ob[0 as libc::c_int as
                                                               usize] =
            *fresh86;
        let ref mut fresh87 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   5 as libc::c_int) as
                                                  isize)).v.ob[1 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh87 =
            ((*this).buttonYOffsets[phi_t5 as usize] as libc::c_int +
                 phi_ra as libc::c_int) as libc::c_short;
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               4 as libc::c_int) as
                                              isize)).v.ob[1 as libc::c_int as
                                                               usize] =
            *fresh87;
        let ref mut fresh88 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   7 as libc::c_int) as
                                                  isize)).v.ob[1 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh88 =
            ((*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                    4 as libc::c_int) as
                                                   isize)).v.ob[1 as
                                                                    libc::c_int
                                                                    as usize]
                 as libc::c_int - 0x10 as libc::c_int) as libc::c_short;
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               6 as libc::c_int) as
                                              isize)).v.ob[1 as libc::c_int as
                                                               usize] =
            *fresh88;
        let ref mut fresh89 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   7 as libc::c_int) as
                                                  isize)).v.tc[0 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh89 = 0xd80 as libc::c_int as libc::c_short;
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               5 as libc::c_int) as
                                              isize)).v.tc[0 as libc::c_int as
                                                               usize] =
            *fresh89;
        if (*this).configMode as libc::c_int == CM_COPY_ANIM_2 as libc::c_int
               &&
               phi_t5 as libc::c_int ==
                   (*this).copyDestFileIndex as libc::c_int {
            temp_t1 =
                ((*this).fileNamesY[phi_t5 as usize] as libc::c_int +
                     0x2c as libc::c_int) as s16
        } else if ((*this).configMode as libc::c_int ==
                       CM_COPY_ANIM_3 as libc::c_int ||
                       (*this).configMode as libc::c_int ==
                           CM_COPY_ANIM_4 as libc::c_int) &&
                      phi_t5 as libc::c_int ==
                          (*this).copyDestFileIndex as libc::c_int {
            temp_t1 =
                ((*this).buttonYOffsets[phi_t5 as usize] as libc::c_int +
                     phi_ra as libc::c_int) as s16
        } else {
            temp_t1 =
                (phi_ra as libc::c_int +
                     (*this).buttonYOffsets[phi_t5 as usize] as libc::c_int +
                     (*this).fileNamesY[phi_t5 as usize] as libc::c_int) as
                    s16
        }
        let ref mut fresh90 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   10 as libc::c_int) as
                                                  isize)).v.ob[0 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh90 =
            (phi_t0 as libc::c_int + 0xa8 as libc::c_int) as libc::c_short;
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               8 as libc::c_int) as
                                              isize)).v.ob[0 as libc::c_int as
                                                               usize] =
            *fresh90;
        let ref mut fresh91 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   11 as libc::c_int) as
                                                  isize)).v.ob[0 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh91 =
            ((*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                    8 as libc::c_int) as
                                                   isize)).v.ob[0 as
                                                                    libc::c_int
                                                                    as usize]
                 as libc::c_int + 0x2c as libc::c_int) as libc::c_short;
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               9 as libc::c_int) as
                                              isize)).v.ob[0 as libc::c_int as
                                                               usize] =
            *fresh91;
        let ref mut fresh92 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   9 as libc::c_int) as
                                                  isize)).v.ob[1 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh92 = temp_t1;
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               8 as libc::c_int) as
                                              isize)).v.ob[1 as libc::c_int as
                                                               usize] =
            *fresh92;
        let ref mut fresh93 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   11 as libc::c_int) as
                                                  isize)).v.ob[1 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh93 =
            ((*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                    8 as libc::c_int) as
                                                   isize)).v.ob[1 as
                                                                    libc::c_int
                                                                    as usize]
                 as libc::c_int - 0x10 as libc::c_int) as libc::c_short;
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               10 as libc::c_int) as
                                              isize)).v.ob[1 as libc::c_int as
                                                               usize] =
            *fresh93;
        let ref mut fresh94 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   11 as libc::c_int) as
                                                  isize)).v.tc[0 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh94 = 0x580 as libc::c_int as libc::c_short;
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               9 as libc::c_int) as
                                              isize)).v.tc[0 as libc::c_int as
                                                               usize] =
            *fresh94;
        let ref mut fresh95 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   14 as libc::c_int) as
                                                  isize)).v.ob[0 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh95 =
            (phi_t0 as libc::c_int + 0x34 as libc::c_int) as libc::c_short;
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               12 as libc::c_int) as
                                              isize)).v.ob[0 as libc::c_int as
                                                               usize] =
            *fresh95;
        let ref mut fresh96 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   15 as libc::c_int) as
                                                  isize)).v.ob[0 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh96 =
            ((*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                    12 as libc::c_int) as
                                                   isize)).v.ob[0 as
                                                                    libc::c_int
                                                                    as usize]
                 as libc::c_int + 0x18 as libc::c_int) as libc::c_short;
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               13 as libc::c_int) as
                                              isize)).v.ob[0 as libc::c_int as
                                                               usize] =
            *fresh96;
        let ref mut fresh97 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   13 as libc::c_int) as
                                                  isize)).v.ob[1 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh97 =
            ((*this).buttonYOffsets[phi_t5 as usize] as libc::c_int +
                 phi_ra as libc::c_int) as libc::c_short;
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               12 as libc::c_int) as
                                              isize)).v.ob[1 as libc::c_int as
                                                               usize] =
            *fresh97;
        let ref mut fresh98 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   15 as libc::c_int) as
                                                  isize)).v.ob[1 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh98 =
            ((*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                    12 as libc::c_int) as
                                                   isize)).v.ob[1 as
                                                                    libc::c_int
                                                                    as usize]
                 as libc::c_int - 0x10 as libc::c_int) as libc::c_short;
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               14 as libc::c_int) as
                                              isize)).v.ob[1 as libc::c_int as
                                                               usize] =
            *fresh98;
        let ref mut fresh99 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   15 as libc::c_int) as
                                                  isize)).v.tc[0 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh99 = 0x300 as libc::c_int as libc::c_short;
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               13 as libc::c_int) as
                                              isize)).v.tc[0 as libc::c_int as
                                                               usize] =
            *fresh99;
        let ref mut fresh100 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   18 as libc::c_int) as
                                                  isize)).v.ob[0 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh100 =
            (phi_t0 as libc::c_int + 0x9c as libc::c_int) as libc::c_short;
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               16 as libc::c_int) as
                                              isize)).v.ob[0 as libc::c_int as
                                                               usize] =
            *fresh100;
        let ref mut fresh101 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   19 as libc::c_int) as
                                                  isize)).v.ob[0 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh101 =
            ((*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                    16 as libc::c_int) as
                                                   isize)).v.ob[0 as
                                                                    libc::c_int
                                                                    as usize]
                 as libc::c_int + 0x18 as libc::c_int) as libc::c_short;
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               17 as libc::c_int) as
                                              isize)).v.ob[0 as libc::c_int as
                                                               usize] =
            *fresh101;
        let ref mut fresh102 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   17 as libc::c_int) as
                                                  isize)).v.ob[1 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh102 =
            ((*this).buttonYOffsets[phi_t5 as usize] as libc::c_int +
                 phi_ra as libc::c_int) as libc::c_short;
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               16 as libc::c_int) as
                                              isize)).v.ob[1 as libc::c_int as
                                                               usize] =
            *fresh102;
        let ref mut fresh103 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   19 as libc::c_int) as
                                                  isize)).v.ob[1 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh103 =
            ((*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                    16 as libc::c_int) as
                                                   isize)).v.ob[1 as
                                                                    libc::c_int
                                                                    as usize]
                 as libc::c_int - 0x10 as libc::c_int) as libc::c_short;
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               18 as libc::c_int) as
                                              isize)).v.ob[1 as libc::c_int as
                                                               usize] =
            *fresh103;
        let ref mut fresh104 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   19 as libc::c_int) as
                                                  isize)).v.tc[0 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh104 = 0x300 as libc::c_int as libc::c_short;
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               17 as libc::c_int) as
                                              isize)).v.tc[0 as libc::c_int as
                                                               usize] =
            *fresh104;
        phi_t5 += 1;
        phi_t2 = (phi_t2 as libc::c_int + 20 as libc::c_int) as s16;
        phi_ra = (phi_ra as libc::c_int - 0x10 as libc::c_int) as s16
    }
    phi_ra = 0x2c as libc::c_int as s16;
    phi_t5 = 0 as libc::c_int as s16;
    while (phi_t5 as libc::c_int) < 3 as libc::c_int {
        if *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(phi_t5
                                                                                  as
                                                                                  isize)
                                            as
                                            libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                     as
                                                                                     *mut SaveContext)).newf.as_mut_ptr().offset(0
                                                                                                                                     as
                                                                                                                                     libc::c_int
                                                                                                                                     as
                                                                                                                                     isize)
                                                                            as
                                                                            *mut libc::c_char
                                                                            as
                                                                            size_t)
                                           as isize) as libc::c_int ==
               'Z' as i32 ||
               *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(phi_t5
                                                                                      as
                                                                                      isize)
                                                as
                                                libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                         as
                                                                                         *mut SaveContext)).newf.as_mut_ptr().offset(1
                                                                                                                                         as
                                                                                                                                         libc::c_int
                                                                                                                                         as
                                                                                                                                         isize)
                                                                                as
                                                                                *mut libc::c_char
                                                                                as
                                                                                size_t)
                                               as isize) as libc::c_int ==
                   'E' as i32 ||
               *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(phi_t5
                                                                                      as
                                                                                      isize)
                                                as
                                                libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                         as
                                                                                         *mut SaveContext)).newf.as_mut_ptr().offset(2
                                                                                                                                         as
                                                                                                                                         libc::c_int
                                                                                                                                         as
                                                                                                                                         isize)
                                                                                as
                                                                                *mut libc::c_char
                                                                                as
                                                                                size_t)
                                               as isize) as libc::c_int ==
                   'L' as i32 ||
               *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(phi_t5
                                                                                      as
                                                                                      isize)
                                                as
                                                libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                         as
                                                                                         *mut SaveContext)).newf.as_mut_ptr().offset(3
                                                                                                                                         as
                                                                                                                                         libc::c_int
                                                                                                                                         as
                                                                                                                                         isize)
                                                                                as
                                                                                *mut libc::c_char
                                                                                as
                                                                                size_t)
                                               as isize) as libc::c_int ==
                   'D' as i32 ||
               *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(phi_t5
                                                                                      as
                                                                                      isize)
                                                as
                                                libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                         as
                                                                                         *mut SaveContext)).newf.as_mut_ptr().offset(4
                                                                                                                                         as
                                                                                                                                         libc::c_int
                                                                                                                                         as
                                                                                                                                         isize)
                                                                                as
                                                                                *mut libc::c_char
                                                                                as
                                                                                size_t)
                                               as isize) as libc::c_int ==
                   'A' as i32 ||
               *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(phi_t5
                                                                                      as
                                                                                      isize)
                                                as
                                                libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                         as
                                                                                         *mut SaveContext)).newf.as_mut_ptr().offset(5
                                                                                                                                         as
                                                                                                                                         libc::c_int
                                                                                                                                         as
                                                                                                                                         isize)
                                                                                as
                                                                                *mut libc::c_char
                                                                                as
                                                                                size_t)
                                               as isize) as libc::c_int ==
                   'Z' as i32 {
            phi_t0 =
                ((*this).windowPosX as libc::c_int -
                     (*gGameInfo).data[(18 as libc::c_int * 6 as libc::c_int *
                                            16 as libc::c_int +
                                            39 as libc::c_int) as usize] as
                         libc::c_int) as s16;
            if (*this).configMode as libc::c_int == 0xf as libc::c_int &&
                   phi_t5 as libc::c_int ==
                       (*this).copyDestFileIndex as libc::c_int {
                temp_t1 =
                    ((*this).fileNamesY[phi_t5 as usize] as libc::c_int +
                         0x2c as libc::c_int) as s16
            } else if ((*this).configMode as libc::c_int ==
                           CM_COPY_ANIM_3 as libc::c_int ||
                           (*this).configMode as libc::c_int ==
                               CM_COPY_ANIM_4 as libc::c_int) &&
                          phi_t5 as libc::c_int ==
                              (*this).copyDestFileIndex as libc::c_int {
                temp_t1 =
                    ((*this).buttonYOffsets[phi_t5 as usize] as libc::c_int +
                         phi_ra as libc::c_int) as s16
            } else {
                temp_t1 =
                    (phi_ra as libc::c_int +
                         (*this).buttonYOffsets[phi_t5 as usize] as
                             libc::c_int +
                         (*this).fileNamesY[phi_t5 as usize] as libc::c_int)
                        as s16
            }
            temp_t1 = (temp_t1 as libc::c_int + 2 as libc::c_int) as s16;
            phi_a1 = 0 as libc::c_int as s16;
            while (phi_a1 as libc::c_int) < 8 as libc::c_int {
                let ref mut fresh105 =
                    (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                           2 as libc::c_int)
                                                          as
                                                          isize)).v.ob[0 as
                                                                           libc::c_int
                                                                           as
                                                                           usize];
                *fresh105 =
                    ((*gGameInfo).data[(18 as libc::c_int * 6 as libc::c_int *
                                            16 as libc::c_int +
                                            41 as libc::c_int) as usize] as
                         libc::c_int + phi_t0 as libc::c_int +
                         0x40 as libc::c_int) as libc::c_short;
                (*(*this).windowContentVtx.offset(phi_t2 as
                                                      isize)).v.ob[0 as
                                                                       libc::c_int
                                                                       as
                                                                       usize]
                    = *fresh105;
                let ref mut fresh106 =
                    (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                           3 as libc::c_int)
                                                          as
                                                          isize)).v.ob[0 as
                                                                           libc::c_int
                                                                           as
                                                                           usize];
                *fresh106 =
                    ((*(*this).windowContentVtx.offset(phi_t2 as
                                                           isize)).v.ob[0 as
                                                                            libc::c_int
                                                                            as
                                                                            usize]
                         as libc::c_int +
                         (*gGameInfo).data[(18 as libc::c_int *
                                                6 as libc::c_int *
                                                16 as libc::c_int +
                                                42 as libc::c_int) as usize]
                             as libc::c_int) as libc::c_short;
                (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                       1 as libc::c_int) as
                                                      isize)).v.ob[0 as
                                                                       libc::c_int
                                                                       as
                                                                       usize]
                    = *fresh106;
                let ref mut fresh107 =
                    (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                           1 as libc::c_int)
                                                          as
                                                          isize)).v.ob[1 as
                                                                           libc::c_int
                                                                           as
                                                                           usize];
                *fresh107 =
                    (temp_t1 as libc::c_int - 3 as libc::c_int) as
                        libc::c_short;
                (*(*this).windowContentVtx.offset(phi_t2 as
                                                      isize)).v.ob[1 as
                                                                       libc::c_int
                                                                       as
                                                                       usize]
                    = *fresh107;
                let ref mut fresh108 =
                    (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                           3 as libc::c_int)
                                                          as
                                                          isize)).v.ob[1 as
                                                                           libc::c_int
                                                                           as
                                                                           usize];
                *fresh108 =
                    ((*(*this).windowContentVtx.offset(phi_t2 as
                                                           isize)).v.ob[1 as
                                                                            libc::c_int
                                                                            as
                                                                            usize]
                         as libc::c_int -
                         (*gGameInfo).data[(18 as libc::c_int *
                                                6 as libc::c_int *
                                                16 as libc::c_int +
                                                43 as libc::c_int) as usize]
                             as libc::c_int) as libc::c_short;
                (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                       2 as libc::c_int) as
                                                      isize)).v.ob[1 as
                                                                       libc::c_int
                                                                       as
                                                                       usize]
                    = *fresh108;
                phi_a1 += 1;
                phi_t2 = (phi_t2 as libc::c_int + 4 as libc::c_int) as s16;
                phi_t0 =
                    (phi_t0 as libc::c_int +
                         (*gGameInfo).data[(18 as libc::c_int *
                                                6 as libc::c_int *
                                                16 as libc::c_int +
                                                40 as libc::c_int) as usize]
                             as libc::c_int) as s16
            }
            phi_t0 =
                ((*this).windowPosX as libc::c_int - 14 as libc::c_int) as
                    s16;
            temp_t1 = (temp_t1 as libc::c_int - 0x16 as libc::c_int) as s16;
            phi_a1 = 0 as libc::c_int as s16;
            while (phi_a1 as libc::c_int) < 4 as libc::c_int {
                let ref mut fresh109 =
                    (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                           2 as libc::c_int)
                                                          as
                                                          isize)).v.ob[0 as
                                                                           libc::c_int
                                                                           as
                                                                           usize];
                *fresh109 = phi_t0;
                (*(*this).windowContentVtx.offset(phi_t2 as
                                                      isize)).v.ob[0 as
                                                                       libc::c_int
                                                                       as
                                                                       usize]
                    = *fresh109;
                let ref mut fresh110 =
                    (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                           3 as libc::c_int)
                                                          as
                                                          isize)).v.ob[0 as
                                                                           libc::c_int
                                                                           as
                                                                           usize];
                *fresh110 =
                    ((*(*this).windowContentVtx.offset(phi_t2 as
                                                           isize)).v.ob[0 as
                                                                            libc::c_int
                                                                            as
                                                                            usize]
                         as libc::c_int +
                         D_80812820[phi_a1 as usize] as libc::c_int) as
                        libc::c_short;
                (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                       1 as libc::c_int) as
                                                      isize)).v.ob[0 as
                                                                       libc::c_int
                                                                       as
                                                                       usize]
                    = *fresh110;
                let ref mut fresh111 =
                    (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                           1 as libc::c_int)
                                                          as
                                                          isize)).v.ob[1 as
                                                                           libc::c_int
                                                                           as
                                                                           usize];
                *fresh111 = temp_t1;
                (*(*this).windowContentVtx.offset(phi_t2 as
                                                      isize)).v.ob[1 as
                                                                       libc::c_int
                                                                       as
                                                                       usize]
                    = *fresh111;
                let ref mut fresh112 =
                    (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                           3 as libc::c_int)
                                                          as
                                                          isize)).v.ob[1 as
                                                                           libc::c_int
                                                                           as
                                                                           usize];
                *fresh112 =
                    ((*(*this).windowContentVtx.offset(phi_t2 as
                                                           isize)).v.ob[1 as
                                                                            libc::c_int
                                                                            as
                                                                            usize]
                         as libc::c_int -
                         D_80812828[phi_a1 as usize] as libc::c_int) as
                        libc::c_short;
                (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                       2 as libc::c_int) as
                                                      isize)).v.ob[1 as
                                                                       libc::c_int
                                                                       as
                                                                       usize]
                    = *fresh112;
                phi_t0 =
                    (phi_t0 as libc::c_int +
                         D_80812818[phi_a1 as usize] as libc::c_int) as s16;
                phi_a1 += 1;
                phi_t2 = (phi_t2 as libc::c_int + 4 as libc::c_int) as s16
            }
            let ref mut fresh113 =
                (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int -
                                                       13 as libc::c_int) as
                                                      isize)).v.tc[0 as
                                                                       libc::c_int
                                                                       as
                                                                       usize];
            *fresh113 = 0x400 as libc::c_int as libc::c_short;
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int -
                                                   15 as libc::c_int) as
                                                  isize)).v.tc[0 as
                                                                   libc::c_int
                                                                   as usize] =
                *fresh113;
            phi_t0 =
                ((*this).windowPosX as libc::c_int + 63 as libc::c_int) as
                    s16;
            temp_t1 = (temp_t1 as libc::c_int + 4 as libc::c_int) as s16;
            phi_a1 = 0 as libc::c_int as s16;
            while (phi_a1 as libc::c_int) < 20 as libc::c_int {
                let ref mut fresh114 =
                    (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                           2 as libc::c_int)
                                                          as
                                                          isize)).v.ob[0 as
                                                                           libc::c_int
                                                                           as
                                                                           usize];
                *fresh114 = phi_t0;
                (*(*this).windowContentVtx.offset(phi_t2 as
                                                      isize)).v.ob[0 as
                                                                       libc::c_int
                                                                       as
                                                                       usize]
                    = *fresh114;
                let ref mut fresh115 =
                    (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                           3 as libc::c_int)
                                                          as
                                                          isize)).v.ob[0 as
                                                                           libc::c_int
                                                                           as
                                                                           usize];
                *fresh115 =
                    ((*(*this).windowContentVtx.offset(phi_t2 as
                                                           isize)).v.ob[0 as
                                                                            libc::c_int
                                                                            as
                                                                            usize]
                         as libc::c_int + 0xa as libc::c_int) as
                        libc::c_short;
                (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                       1 as libc::c_int) as
                                                      isize)).v.ob[0 as
                                                                       libc::c_int
                                                                       as
                                                                       usize]
                    = *fresh115;
                let ref mut fresh116 =
                    (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                           1 as libc::c_int)
                                                          as
                                                          isize)).v.ob[1 as
                                                                           libc::c_int
                                                                           as
                                                                           usize];
                *fresh116 = temp_t1;
                (*(*this).windowContentVtx.offset(phi_t2 as
                                                      isize)).v.ob[1 as
                                                                       libc::c_int
                                                                       as
                                                                       usize]
                    = *fresh116;
                let ref mut fresh117 =
                    (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                           3 as libc::c_int)
                                                          as
                                                          isize)).v.ob[1 as
                                                                           libc::c_int
                                                                           as
                                                                           usize];
                *fresh117 =
                    ((*(*this).windowContentVtx.offset(phi_t2 as
                                                           isize)).v.ob[1 as
                                                                            libc::c_int
                                                                            as
                                                                            usize]
                         as libc::c_int - 0xa as libc::c_int) as
                        libc::c_short;
                (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                       2 as libc::c_int) as
                                                      isize)).v.ob[1 as
                                                                       libc::c_int
                                                                       as
                                                                       usize]
                    = *fresh117;
                if phi_a1 as libc::c_int == 9 as libc::c_int {
                    phi_t0 =
                        ((*this).windowPosX as libc::c_int +
                             54 as libc::c_int) as s16;
                    temp_t1 =
                        (temp_t1 as libc::c_int - 8 as libc::c_int) as s16
                }
                phi_a1 += 1;
                phi_t2 = (phi_t2 as libc::c_int + 4 as libc::c_int) as s16;
                phi_t0 = (phi_t0 as libc::c_int + 9 as libc::c_int) as s16
            }
            phi_t0 =
                ((*this).windowPosX as libc::c_int + 4 as libc::c_int) as s16;
            temp_t1 = (temp_t1 as libc::c_int - 0xa as libc::c_int) as s16;
            phi_a1 = 0 as libc::c_int as s16;
            while (phi_a1 as libc::c_int) < 10 as libc::c_int {
                let ref mut fresh118 =
                    (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                           2 as libc::c_int)
                                                          as
                                                          isize)).v.ob[0 as
                                                                           libc::c_int
                                                                           as
                                                                           usize];
                *fresh118 = phi_t0;
                (*(*this).windowContentVtx.offset(phi_t2 as
                                                      isize)).v.ob[0 as
                                                                       libc::c_int
                                                                       as
                                                                       usize]
                    = *fresh118;
                let ref mut fresh119 =
                    (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                           3 as libc::c_int)
                                                          as
                                                          isize)).v.ob[0 as
                                                                           libc::c_int
                                                                           as
                                                                           usize];
                *fresh119 =
                    ((*(*this).windowContentVtx.offset(phi_t2 as
                                                           isize)).v.ob[0 as
                                                                            libc::c_int
                                                                            as
                                                                            usize]
                         as libc::c_int + 0x10 as libc::c_int) as
                        libc::c_short;
                (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                       1 as libc::c_int) as
                                                      isize)).v.ob[0 as
                                                                       libc::c_int
                                                                       as
                                                                       usize]
                    = *fresh119;
                let ref mut fresh120 =
                    (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                           1 as libc::c_int)
                                                          as
                                                          isize)).v.ob[1 as
                                                                           libc::c_int
                                                                           as
                                                                           usize];
                *fresh120 = temp_t1;
                (*(*this).windowContentVtx.offset(phi_t2 as
                                                      isize)).v.ob[1 as
                                                                       libc::c_int
                                                                       as
                                                                       usize]
                    = *fresh120;
                let ref mut fresh121 =
                    (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                           3 as libc::c_int)
                                                          as
                                                          isize)).v.ob[1 as
                                                                           libc::c_int
                                                                           as
                                                                           usize];
                *fresh121 =
                    ((*(*this).windowContentVtx.offset(phi_t2 as
                                                           isize)).v.ob[1 as
                                                                            libc::c_int
                                                                            as
                                                                            usize]
                         as libc::c_int - 0x10 as libc::c_int) as
                        libc::c_short;
                (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                       2 as libc::c_int) as
                                                      isize)).v.ob[1 as
                                                                       libc::c_int
                                                                       as
                                                                       usize]
                    = *fresh121;
                phi_a1 += 1;
                phi_t2 = (phi_t2 as libc::c_int + 4 as libc::c_int) as s16;
                phi_t0 = (phi_t0 as libc::c_int + 0x10 as libc::c_int) as s16
            }
        } else {
            phi_t2 = (phi_t2 as libc::c_int + 0xa8 as libc::c_int) as s16
        }
        phi_t5 += 1;
        phi_ra =
            (phi_ra as libc::c_int -
                 (*gGameInfo).data[(18 as libc::c_int * 6 as libc::c_int *
                                        16 as libc::c_int + 38 as libc::c_int)
                                       as usize] as libc::c_int) as s16
    }
    phi_t0 = ((*this).windowPosX as libc::c_int - 6 as libc::c_int) as s16;
    phi_ra = -(0xc as libc::c_int) as s16;
    phi_t5 = 0 as libc::c_int as s16;
    while (phi_t5 as libc::c_int) < 2 as libc::c_int {
        let ref mut fresh122 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   2 as libc::c_int) as
                                                  isize)).v.ob[0 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh122 = phi_t0;
        (*(*this).windowContentVtx.offset(phi_t2 as
                                              isize)).v.ob[0 as libc::c_int as
                                                               usize] =
            *fresh122;
        let ref mut fresh123 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   3 as libc::c_int) as
                                                  isize)).v.ob[0 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh123 =
            ((*(*this).windowContentVtx.offset(phi_t2 as
                                                   isize)).v.ob[0 as
                                                                    libc::c_int
                                                                    as usize]
                 as libc::c_int + 0x40 as libc::c_int) as libc::c_short;
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               1 as libc::c_int) as
                                              isize)).v.ob[0 as libc::c_int as
                                                               usize] =
            *fresh123;
        let ref mut fresh124 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   1 as libc::c_int) as
                                                  isize)).v.ob[1 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh124 =
            ((*this).buttonYOffsets[(phi_t5 as libc::c_int + 3 as libc::c_int)
                                        as usize] as libc::c_int +
                 phi_ra as libc::c_int) as libc::c_short;
        (*(*this).windowContentVtx.offset(phi_t2 as
                                              isize)).v.ob[1 as libc::c_int as
                                                               usize] =
            *fresh124;
        let ref mut fresh125 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   3 as libc::c_int) as
                                                  isize)).v.ob[1 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh125 =
            ((*(*this).windowContentVtx.offset(phi_t2 as
                                                   isize)).v.ob[1 as
                                                                    libc::c_int
                                                                    as usize]
                 as libc::c_int - 0x10 as libc::c_int) as libc::c_short;
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               2 as libc::c_int) as
                                              isize)).v.ob[1 as libc::c_int as
                                                               usize] =
            *fresh125;
        let ref mut fresh126 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   3 as libc::c_int) as
                                                  isize)).v.tc[0 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh126 = 0x800 as libc::c_int as libc::c_short;
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               1 as libc::c_int) as
                                              isize)).v.tc[0 as libc::c_int as
                                                               usize] =
            *fresh126;
        phi_t5 += 1;
        phi_t2 = (phi_t2 as libc::c_int + 4 as libc::c_int) as s16;
        phi_ra = (phi_ra as libc::c_int - 0x10 as libc::c_int) as s16
    }
    let ref mut fresh127 =
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               2 as libc::c_int) as
                                              isize)).v.ob[0 as libc::c_int as
                                                               usize];
    *fresh127 = phi_t0;
    (*(*this).windowContentVtx.offset(phi_t2 as
                                          isize)).v.ob[0 as libc::c_int as
                                                           usize] = *fresh127;
    let ref mut fresh128 =
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               3 as libc::c_int) as
                                              isize)).v.ob[0 as libc::c_int as
                                                               usize];
    *fresh128 =
        ((*(*this).windowContentVtx.offset(phi_t2 as
                                               isize)).v.ob[0 as libc::c_int
                                                                as usize] as
             libc::c_int + 0x40 as libc::c_int) as libc::c_short;
    (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                           1 as libc::c_int) as
                                          isize)).v.ob[0 as libc::c_int as
                                                           usize] = *fresh128;
    let ref mut fresh129 =
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               1 as libc::c_int) as
                                              isize)).v.ob[1 as libc::c_int as
                                                               usize];
    *fresh129 =
        ((*this).buttonYOffsets[5 as libc::c_int as usize] as libc::c_int -
             0x34 as libc::c_int) as libc::c_short;
    (*(*this).windowContentVtx.offset(phi_t2 as
                                          isize)).v.ob[1 as libc::c_int as
                                                           usize] = *fresh129;
    let ref mut fresh130 =
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               3 as libc::c_int) as
                                              isize)).v.ob[1 as libc::c_int as
                                                               usize];
    *fresh130 =
        ((*(*this).windowContentVtx.offset(phi_t2 as
                                               isize)).v.ob[1 as libc::c_int
                                                                as usize] as
             libc::c_int - 0x10 as libc::c_int) as libc::c_short;
    (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                           2 as libc::c_int) as
                                          isize)).v.ob[1 as libc::c_int as
                                                           usize] = *fresh130;
    let ref mut fresh131 =
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               3 as libc::c_int) as
                                              isize)).v.tc[0 as libc::c_int as
                                                               usize];
    *fresh131 = 0x800 as libc::c_int as libc::c_short;
    (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                           1 as libc::c_int) as
                                          isize)).v.tc[0 as libc::c_int as
                                                           usize] = *fresh131;
    phi_t2 = (phi_t2 as libc::c_int + 4 as libc::c_int) as s16;
    if (*this).menuMode as libc::c_int == FS_MENU_MODE_CONFIG as libc::c_int
           && (*this).configMode as libc::c_int >= CM_MAIN_MENU as libc::c_int
           ||
           (*this).menuMode as libc::c_int ==
               FS_MENU_MODE_SELECT as libc::c_int &&
               (*this).selectMode as libc::c_int ==
                   SM_CONFIRM_FILE as libc::c_int {
        if (*this).menuMode as libc::c_int ==
               FS_MENU_MODE_CONFIG as libc::c_int {
            if (*this).configMode as libc::c_int ==
                   CM_SELECT_COPY_SOURCE as libc::c_int ||
                   (*this).configMode as libc::c_int ==
                       CM_SELECT_COPY_DEST as libc::c_int ||
                   (*this).configMode as libc::c_int ==
                       CM_ERASE_SELECT as libc::c_int {
                phi_t5 = D_8081283C[(*this).buttonIndex as usize]
            } else if (*this).configMode as libc::c_int ==
                          CM_ERASE_CONFIRM as libc::c_int ||
                          (*this).configMode as libc::c_int ==
                              CM_COPY_CONFIRM as libc::c_int {
                phi_t5 = D_80812844[(*this).buttonIndex as usize]
            } else { phi_t5 = D_80812830[(*this).buttonIndex as usize] }
        } else { phi_t5 = D_80812848[(*this).confirmButtonIndex as usize] }
        let ref mut fresh132 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   2 as libc::c_int) as
                                                  isize)).v.ob[0 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh132 =
            ((*this).windowPosX as libc::c_int - 0xa as libc::c_int) as
                libc::c_short;
        (*(*this).windowContentVtx.offset(phi_t2 as
                                              isize)).v.ob[0 as libc::c_int as
                                                               usize] =
            *fresh132;
        let ref mut fresh133 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   3 as libc::c_int) as
                                                  isize)).v.ob[0 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh133 =
            ((*(*this).windowContentVtx.offset(phi_t2 as
                                                   isize)).v.ob[0 as
                                                                    libc::c_int
                                                                    as usize]
                 as libc::c_int + 0x48 as libc::c_int) as libc::c_short;
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               1 as libc::c_int) as
                                              isize)).v.ob[0 as libc::c_int as
                                                               usize] =
            *fresh133;
        let ref mut fresh134 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   1 as libc::c_int) as
                                                  isize)).v.ob[1 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh134 =
            ((*(*this).windowContentVtx.offset(phi_t5 as
                                                   isize)).v.ob[1 as
                                                                    libc::c_int
                                                                    as usize]
                 as libc::c_int + 4 as libc::c_int) as libc::c_short;
        (*(*this).windowContentVtx.offset(phi_t2 as
                                              isize)).v.ob[1 as libc::c_int as
                                                               usize] =
            *fresh134;
        let ref mut fresh135 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   3 as libc::c_int) as
                                                  isize)).v.ob[1 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh135 =
            ((*(*this).windowContentVtx.offset(phi_t2 as
                                                   isize)).v.ob[1 as
                                                                    libc::c_int
                                                                    as usize]
                 as libc::c_int - 0x18 as libc::c_int) as libc::c_short;
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               2 as libc::c_int) as
                                              isize)).v.ob[1 as libc::c_int as
                                                               usize] =
            *fresh135;
        let ref mut fresh136 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   3 as libc::c_int) as
                                                  isize)).v.tc[0 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh136 = 0x900 as libc::c_int as libc::c_short;
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               1 as libc::c_int) as
                                              isize)).v.tc[0 as libc::c_int as
                                                               usize] =
            *fresh136;
        let ref mut fresh137 =
            (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                   3 as libc::c_int) as
                                                  isize)).v.tc[1 as
                                                                   libc::c_int
                                                                   as usize];
        *fresh137 = 0x300 as libc::c_int as libc::c_short;
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               2 as libc::c_int) as
                                              isize)).v.tc[1 as libc::c_int as
                                                               usize] =
            *fresh137
    }
    let ref mut fresh138 =
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               6 as libc::c_int) as
                                              isize)).v.ob[0 as libc::c_int as
                                                               usize];
    *fresh138 =
        ((*this).windowPosX as libc::c_int + 0x3a as libc::c_int) as
            libc::c_short;
    (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                           4 as libc::c_int) as
                                          isize)).v.ob[0 as libc::c_int as
                                                           usize] = *fresh138;
    let ref mut fresh139 =
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               7 as libc::c_int) as
                                              isize)).v.ob[0 as libc::c_int as
                                                               usize];
    *fresh139 =
        ((*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                4 as libc::c_int) as
                                               isize)).v.ob[0 as libc::c_int
                                                                as usize] as
             libc::c_int + 0x80 as libc::c_int) as libc::c_short;
    (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                           5 as libc::c_int) as
                                          isize)).v.ob[0 as libc::c_int as
                                                           usize] = *fresh139;
    let ref mut fresh140 =
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               5 as libc::c_int) as
                                              isize)).v.ob[1 as libc::c_int as
                                                               usize];
    *fresh140 =
        (*(*this).windowContentVtx.offset(D_80812830[(*this).warningButtonIndex
                                                         as usize] as
                                              isize)).v.ob[1 as libc::c_int as
                                                               usize];
    (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                           4 as libc::c_int) as
                                          isize)).v.ob[1 as libc::c_int as
                                                           usize] = *fresh140;
    let ref mut fresh141 =
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               7 as libc::c_int) as
                                              isize)).v.ob[1 as libc::c_int as
                                                               usize];
    *fresh141 =
        ((*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                                4 as libc::c_int) as
                                               isize)).v.ob[1 as libc::c_int
                                                                as usize] as
             libc::c_int - 0x10 as libc::c_int) as libc::c_short;
    (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                           6 as libc::c_int) as
                                          isize)).v.ob[1 as libc::c_int as
                                                           usize] = *fresh141;
    let ref mut fresh142 =
        (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                               7 as libc::c_int) as
                                              isize)).v.tc[0 as libc::c_int as
                                                               usize];
    *fresh142 = 0x1000 as libc::c_int as libc::c_short;
    (*(*this).windowContentVtx.offset((phi_t2 as libc::c_int +
                                           5 as libc::c_int) as
                                          isize)).v.tc[0 as libc::c_int as
                                                           usize] = *fresh142;
}
static mut D_8081284C: [u16_0; 3] =
    [0x7c as libc::c_int as u16_0, 0x124 as libc::c_int as u16_0,
     0x1cc as libc::c_int as u16_0];
static mut sQuestItemTextures: [*mut libc::c_void; 9] =
    unsafe {
        [gFileSelKokiriEmeraldTex.as_ptr() as *mut _ as *mut libc::c_void,
         gFileSelGoronRubyTex.as_ptr() as *mut _ as *mut libc::c_void,
         gFileSelZoraSapphireTex.as_ptr() as *mut _ as *mut libc::c_void,
         gFileSelForestMedallionTex.as_ptr() as *mut _ as *mut libc::c_void,
         gFileSelFireMedallionTex.as_ptr() as *mut _ as *mut libc::c_void,
         gFileSelWaterMedallionTex.as_ptr() as *mut _ as *mut libc::c_void,
         gFileSelSpiritMedallionTex.as_ptr() as *mut _ as *mut libc::c_void,
         gFileSelShadowMedallionTex.as_ptr() as *mut _ as *mut libc::c_void,
         gFileSelLightMedallionTex.as_ptr() as *mut _ as *mut libc::c_void]
    };
static mut sQuestItemRed: [s16; 9] =
    [255 as libc::c_int as s16, 255 as libc::c_int as s16,
     255 as libc::c_int as s16, 0 as libc::c_int as s16,
     255 as libc::c_int as s16, 0 as libc::c_int as s16,
     255 as libc::c_int as s16, 200 as libc::c_int as s16,
     200 as libc::c_int as s16];
static mut sQuestItemGreen: [s16; 9] =
    [255 as libc::c_int as s16, 255 as libc::c_int as s16,
     255 as libc::c_int as s16, 255 as libc::c_int as s16,
     60 as libc::c_int as s16, 100 as libc::c_int as s16,
     130 as libc::c_int as s16, 50 as libc::c_int as s16,
     200 as libc::c_int as s16];
static mut sQuestItemBlue: [s16; 9] =
    [255 as libc::c_int as s16, 255 as libc::c_int as s16,
     255 as libc::c_int as s16, 0 as libc::c_int as s16,
     0 as libc::c_int as s16, 255 as libc::c_int as s16,
     0 as libc::c_int as s16, 255 as libc::c_int as s16,
     0 as libc::c_int as s16];
static mut sQuestItemFlags: [s16; 9] =
    [0x12 as libc::c_int as s16, 0x13 as libc::c_int as s16,
     0x14 as libc::c_int as s16, 0 as libc::c_int as s16,
     0x1 as libc::c_int as s16, 0x2 as libc::c_int as s16,
     0x3 as libc::c_int as s16, 0x4 as libc::c_int as s16,
     0x5 as libc::c_int as s16];
static mut sNamePrimColors: [[s16; 3]; 2] =
    [[255 as libc::c_int as s16, 255 as libc::c_int as s16,
      255 as libc::c_int as s16],
     [100 as libc::c_int as s16, 100 as libc::c_int as s16,
      100 as libc::c_int as s16]];
static mut sHeartTextures: [*mut libc::c_void; 2] =
    unsafe {
        [gHeartFullTex.as_ptr() as *mut _ as *mut libc::c_void,
         gDefenseHeartFullTex.as_ptr() as *mut _ as *mut libc::c_void]
    };
static mut sHeartPrimColors: [[s16; 3]; 2] =
    [[255 as libc::c_int as s16, 70 as libc::c_int as s16,
      50 as libc::c_int as s16],
     [200 as libc::c_int as s16, 0 as libc::c_int as s16,
      0 as libc::c_int as s16]];
static mut sHeartEnvColors: [[s16; 3]; 2] =
    [[50 as libc::c_int as s16, 40 as libc::c_int as s16,
      60 as libc::c_int as s16],
     [255 as libc::c_int as s16, 255 as libc::c_int as s16,
      255 as libc::c_int as s16]];
#[no_mangle]
pub unsafe extern "C" fn FileChoose_DrawFileInfo(mut thisx: *mut GameState,
                                                 mut fileIndex: s16,
                                                 mut isActive: s16) {
    let mut this: *mut FileChooseContext = thisx as *mut FileChooseContext;
    let mut sp54: *mut Font = &mut (*this).font;
    let mut heartType: s32 = 0;
    let mut i: s16 = 0;
    let mut vtxOffset: s16 = 0;
    let mut j: s16 = 0;
    let mut deathCountSplit: [s16; 3] = [0; 3];
    let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
    let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
    __gfxCtx = (*this).state.gfxCtx;
    Graph_OpenDisps(dispRefs.as_mut_ptr(), (*this).state.gfxCtx,
                    b"../z_file_choose.c\x00" as *const u8 as
                        *const libc::c_char, 1709 as libc::c_int);
    let fresh143 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g: *mut Gfx = fresh143;
    (*_g).words.w0 =
        (0xe7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g).words.w1 = 0 as libc::c_int as libc::c_uint;
    let fresh144 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_0: *mut Gfx = fresh144;
    (*_g_0).words.w0 =
        (0xfc as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (((31 as libc::c_int as u32_0 &
                   (((0x1 as libc::c_int) << 4 as libc::c_int) -
                        1 as libc::c_int) as libc::c_uint) <<
                  20 as libc::c_int |
                  (31 as libc::c_int as u32_0 &
                       (((0x1 as libc::c_int) << 5 as libc::c_int) -
                            1 as libc::c_int) as libc::c_uint) <<
                      15 as libc::c_int |
                  (1 as libc::c_int as u32_0 &
                       (((0x1 as libc::c_int) << 3 as libc::c_int) -
                            1 as libc::c_int) as libc::c_uint) <<
                      12 as libc::c_int |
                  (3 as libc::c_int as u32_0 &
                       (((0x1 as libc::c_int) << 3 as libc::c_int) -
                            1 as libc::c_int) as libc::c_uint) <<
                      9 as libc::c_int |
                  ((31 as libc::c_int as u32_0 &
                        (((0x1 as libc::c_int) << 4 as libc::c_int) -
                             1 as libc::c_int) as libc::c_uint) <<
                       5 as libc::c_int |
                       (31 as libc::c_int as u32_0 &
                            (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                 1 as libc::c_int) as libc::c_uint) <<
                           0 as libc::c_int)) &
                 (((0x1 as libc::c_int) << 24 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_0).words.w1 =
        (31 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 4 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 28 as libc::c_int |
            (3 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 15 as libc::c_int
            |
            (7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 9 as libc::c_int |
            ((31 as libc::c_int as u32_0 &
                  (((0x1 as libc::c_int) << 4 as libc::c_int) -
                       1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                 |
                 (1 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 3 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     21 as libc::c_int |
                 (3 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 3 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     18 as libc::c_int |
                 (3 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 3 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     6 as libc::c_int |
                 (7 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 3 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     3 as libc::c_int |
                 (7 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 3 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     0 as libc::c_int);
    // draw file name
    if (*this).nameAlpha[fileIndex as usize] as libc::c_int !=
           0 as libc::c_int {
        let fresh145 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_1: *mut Gfx = fresh145;
        (*_g_1).words.w0 =
            (0x1 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (32 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                ((0 as libc::c_int + 32 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 7 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    1 as libc::c_int;
        (*_g_1).words.w1 =
            &mut *(*this).windowContentVtx.offset(*D_8081284C.as_mut_ptr().offset(fileIndex
                                                                                      as
                                                                                      isize)
                                                      as isize) as *mut Vtx as
                libc::c_uint;
        let fresh146 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_2: *mut Gfx = fresh146;
        (*_g_2).words.w0 =
            (0xfa as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_2).words.w1 =
            (sNamePrimColors[isActive as usize][0 as libc::c_int as usize] as
                 u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (sNamePrimColors[isActive as usize][1 as libc::c_int as usize]
                     as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (sNamePrimColors[isActive as usize][2 as libc::c_int as usize]
                     as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                ((*this).nameAlpha[fileIndex as usize] as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        i = 0 as libc::c_int as s16;
        vtxOffset = 0 as libc::c_int as s16;
        while (vtxOffset as libc::c_int) < 0x20 as libc::c_int {
            FileChoose_DrawCharacter((*this).state.gfxCtx,
                                     (*sp54).fontBuf.as_mut_ptr().offset(((*this).fileNames[fileIndex
                                                                                                as
                                                                                                usize][i
                                                                                                           as
                                                                                                           usize]
                                                                              as
                                                                              libc::c_int
                                                                              *
                                                                              (16
                                                                                   as
                                                                                   libc::c_int
                                                                                   *
                                                                                   16
                                                                                       as
                                                                                       libc::c_int
                                                                                   /
                                                                                   2
                                                                                       as
                                                                                       libc::c_int))
                                                                             as
                                                                             isize)
                                         as *mut libc::c_void, vtxOffset);
            i += 1;
            vtxOffset = (vtxOffset as libc::c_int + 4 as libc::c_int) as s16
        }
    }
    if fileIndex as libc::c_int == (*this).selectedFileIndex as libc::c_int ||
           fileIndex as libc::c_int ==
               (*this).copyDestFileIndex as libc::c_int {
        let fresh147 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_3: *mut Gfx = fresh147;
        (*_g_3).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_3).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh148 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_4: *mut Gfx = fresh148;
        (*_g_4).words.w0 =
            (0xfc as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (((6 as libc::c_int as u32_0 &
                       (((0x1 as libc::c_int) << 4 as libc::c_int) -
                            1 as libc::c_int) as libc::c_uint) <<
                      20 as libc::c_int |
                      (3 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          15 as libc::c_int |
                      (1 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          12 as libc::c_int |
                      (3 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          9 as libc::c_int |
                      ((6 as libc::c_int as u32_0 &
                            (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                 1 as libc::c_int) as libc::c_uint) <<
                           5 as libc::c_int |
                           (3 as libc::c_int as u32_0 &
                                (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                     1 as libc::c_int) as libc::c_uint) <<
                               0 as libc::c_int)) &
                     (((0x1 as libc::c_int) << 24 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_4).words.w1 =
            (31 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 28 as libc::c_int
                |
                (31 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    15 as libc::c_int |
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    9 as libc::c_int |
                ((31 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 4 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     24 as libc::c_int |
                     (1 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         21 as libc::c_int |
                     (3 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         18 as libc::c_int |
                     (31 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         6 as libc::c_int |
                     (7 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         3 as libc::c_int |
                     (7 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         0 as libc::c_int);
        let fresh149 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_5: *mut Gfx = fresh149;
        (*_g_5).words.w0 =
            (0xfa as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_5).words.w1 =
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                ((*this).fileInfoAlpha[fileIndex as usize] as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh150 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_6: *mut Gfx = fresh150;
        (*_g_6).words.w0 =
            (0x1 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (12 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                ((0 as libc::c_int + 12 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 7 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    1 as libc::c_int;
        (*_g_6).words.w1 =
            (&mut *(*this).windowContentVtx.offset(*D_8081284C.as_mut_ptr().offset(fileIndex
                                                                                       as
                                                                                       isize)
                                                       as isize) as
                 *mut Vtx).offset(0x24 as libc::c_int as isize) as
                libc::c_uint;
        FileChoose_SplitNumber((*this).deaths[fileIndex as usize],
                               &mut *deathCountSplit.as_mut_ptr().offset(0 as
                                                                             libc::c_int
                                                                             as
                                                                             isize),
                               &mut *deathCountSplit.as_mut_ptr().offset(1 as
                                                                             libc::c_int
                                                                             as
                                                                             isize),
                               &mut *deathCountSplit.as_mut_ptr().offset(2 as
                                                                             libc::c_int
                                                                             as
                                                                             isize));
        // draw death count
        i = 0 as libc::c_int as s16;
        vtxOffset = 0 as libc::c_int as s16;
        while (i as libc::c_int) < 3 as libc::c_int {
            FileChoose_DrawCharacter((*this).state.gfxCtx,
                                     (*sp54).fontBuf.as_mut_ptr().offset((deathCountSplit[i
                                                                                              as
                                                                                              usize]
                                                                              as
                                                                              libc::c_int
                                                                              *
                                                                              (16
                                                                                   as
                                                                                   libc::c_int
                                                                                   *
                                                                                   16
                                                                                       as
                                                                                       libc::c_int
                                                                                   /
                                                                                   2
                                                                                       as
                                                                                       libc::c_int))
                                                                             as
                                                                             isize)
                                         as *mut libc::c_void, vtxOffset);
            i += 1;
            vtxOffset = (vtxOffset as libc::c_int + 4 as libc::c_int) as s16
        }
        let fresh151 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_7: *mut Gfx = fresh151;
        (*_g_7).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_7).words.w1 = 0 as libc::c_int as libc::c_uint;
        heartType =
            if (*this).defense[fileIndex as usize] as libc::c_int ==
                   0 as libc::c_int {
                0 as libc::c_int
            } else { 1 as libc::c_int };
        let fresh152 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_8: *mut Gfx = fresh152;
        (*_g_8).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_8).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh153 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_9: *mut Gfx = fresh153;
        (*_g_9).words.w0 =
            (0xfc as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (((3 as libc::c_int as u32_0 &
                       (((0x1 as libc::c_int) << 4 as libc::c_int) -
                            1 as libc::c_int) as libc::c_uint) <<
                      20 as libc::c_int |
                      (1 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          15 as libc::c_int |
                      (1 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          12 as libc::c_int |
                      (3 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          9 as libc::c_int |
                      ((3 as libc::c_int as u32_0 &
                            (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                 1 as libc::c_int) as libc::c_uint) <<
                           5 as libc::c_int |
                           (1 as libc::c_int as u32_0 &
                                (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                     1 as libc::c_int) as libc::c_uint) <<
                               0 as libc::c_int)) &
                     (((0x1 as libc::c_int) << 24 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_9).words.w1 =
            (5 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 28 as libc::c_int
                |
                (5 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    15 as libc::c_int |
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    9 as libc::c_int |
                ((5 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 4 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     24 as libc::c_int |
                     (1 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         21 as libc::c_int |
                     (3 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         18 as libc::c_int |
                     (5 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         6 as libc::c_int |
                     (7 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         3 as libc::c_int |
                     (7 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         0 as libc::c_int);
        let fresh154 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_10: *mut Gfx = fresh154;
        (*_g_10).words.w0 =
            (0xfa as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_10).words.w1 =
            (sHeartPrimColors[heartType as usize][0 as libc::c_int as usize]
                 as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (sHeartPrimColors[heartType as
                                      usize][1 as libc::c_int as usize] as
                     u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (sHeartPrimColors[heartType as
                                      usize][2 as libc::c_int as usize] as
                     u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                ((*this).fileInfoAlpha[fileIndex as usize] as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh155 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_11: *mut Gfx = fresh155;
        (*_g_11).words.w0 =
            (0xfb as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_11).words.w1 =
            (sHeartEnvColors[heartType as usize][0 as libc::c_int as usize] as
                 u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (sHeartEnvColors[heartType as
                                     usize][1 as libc::c_int as usize] as
                     u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (sHeartEnvColors[heartType as
                                     usize][2 as libc::c_int as usize] as
                     u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        i =
            ((*this).healthCapacities[fileIndex as usize] as libc::c_int /
                 0x10 as libc::c_int) as s16;
        // draw hearts
        vtxOffset = 0 as libc::c_int as s16;
        j = 0 as libc::c_int as s16;
        while (j as libc::c_int) < i as libc::c_int {
            let fresh156 = (*__gfxCtx).polyOpa.p;
            (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
            let mut _g_12: *mut Gfx = fresh156;
            (*_g_12).words.w0 =
                (0x1 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (4 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    ((0 as libc::c_int + 4 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 7 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        1 as libc::c_int;
            (*_g_12).words.w1 =
                (&mut *(*this).windowContentVtx.offset((*D_8081284C.as_mut_ptr().offset(fileIndex
                                                                                            as
                                                                                            isize)
                                                            as libc::c_int +
                                                            vtxOffset as
                                                                libc::c_int)
                                                           as isize) as
                     *mut Vtx).offset(0x30 as libc::c_int as isize) as
                    libc::c_uint;
            (*__gfxCtx).polyOpa.p =
                FileChoose_QuadTextureIA8((*__gfxCtx).polyOpa.p,
                                          sHeartTextures[heartType as usize],
                                          0x10 as libc::c_int as s16,
                                          0x10 as libc::c_int as s16,
                                          0 as libc::c_int as s16);
            j += 1;
            vtxOffset = (vtxOffset as libc::c_int + 4 as libc::c_int) as s16
        }
        let fresh157 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_13: *mut Gfx = fresh157;
        (*_g_13).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_13).words.w1 = 0 as libc::c_int as libc::c_uint;
        // draw quest items
        vtxOffset = 0 as libc::c_int as s16;
        j = 0 as libc::c_int as s16;
        while (j as libc::c_int) < 9 as libc::c_int {
            if (*this).questItems[fileIndex as usize] &
                   gBitFlags[sQuestItemFlags[j as usize] as usize] != 0 {
                let fresh158 = (*__gfxCtx).polyOpa.p;
                (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
                let mut _g_14: *mut Gfx = fresh158;
                (*_g_14).words.w0 =
                    (0x1 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (4 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            12 as libc::c_int |
                        ((0 as libc::c_int + 4 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 7 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            1 as libc::c_int;
                (*_g_14).words.w1 =
                    (&mut *(*this).windowContentVtx.offset((*D_8081284C.as_mut_ptr().offset(fileIndex
                                                                                                as
                                                                                                isize)
                                                                as libc::c_int
                                                                +
                                                                vtxOffset as
                                                                    libc::c_int)
                                                               as isize) as
                         *mut Vtx).offset(0x80 as libc::c_int as isize) as
                        libc::c_uint;
                let fresh159 = (*__gfxCtx).polyOpa.p;
                (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
                let mut _g_15: *mut Gfx = fresh159;
                (*_g_15).words.w0 =
                    (0xe7 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int;
                (*_g_15).words.w1 = 0 as libc::c_int as libc::c_uint;
                let fresh160 = (*__gfxCtx).polyOpa.p;
                (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
                let mut _g_16: *mut Gfx = fresh160;
                (*_g_16).words.w0 =
                    (0xfa as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            8 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                (*_g_16).words.w1 =
                    (sQuestItemRed[j as usize] as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (sQuestItemGreen[j as usize] as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            16 as libc::c_int |
                        (sQuestItemBlue[j as usize] as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            8 as libc::c_int |
                        ((*this).fileInfoAlpha[fileIndex as usize] as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                let fresh161 = (*__gfxCtx).polyOpa.p;
                (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
                let mut _g_17: *mut Gfx = fresh161;
                (*_g_17).words.w0 =
                    (0xfb as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int;
                (*_g_17).words.w1 =
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            16 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            8 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                if (j as libc::c_int) < 3 as libc::c_int {
                    let fresh162 = (*__gfxCtx).polyOpa.p;
                    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
                    let mut _g_18: *mut Gfx = fresh162;
                    (*_g_18).words.w0 =
                        (0xfd as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                21 as libc::c_int |
                            (3 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                19 as libc::c_int |
                            ((1 as libc::c_int - 1 as libc::c_int) as u32_0 &
                                 (((0x1 as libc::c_int) << 12 as libc::c_int)
                                      - 1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int;
                    (*_g_18).words.w1 =
                        sQuestItemTextures[j as usize] as libc::c_uint;
                    let fresh163 = (*__gfxCtx).polyOpa.p;
                    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
                    let mut _g_19: *mut Gfx = fresh163;
                    (*_g_19).words.w0 =
                        (0xf5 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                21 as libc::c_int |
                            (3 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                19 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                9 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int;
                    (*_g_19).words.w1 =
                        (7 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                20 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                18 as libc::c_int |
                            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                14 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                10 as libc::c_int |
                            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                8 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                4 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int;
                    let fresh164 = (*__gfxCtx).polyOpa.p;
                    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
                    let mut _g_20: *mut Gfx = fresh164;
                    (*_g_20).words.w0 =
                        (0xe6 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int;
                    (*_g_20).words.w1 = 0 as libc::c_int as libc::c_uint;
                    let fresh165 = (*__gfxCtx).polyOpa.p;
                    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
                    let mut _g_21: *mut Gfx = fresh165;
                    (*_g_21).words.w0 =
                        (0xf3 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 12 as libc::c_int)
                                      - 1 as libc::c_int) as libc::c_uint) <<
                                12 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 12 as libc::c_int)
                                      - 1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int;
                    (*_g_21).words.w1 =
                        (7 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            ((if ((16 as libc::c_int * 16 as libc::c_int +
                                       0 as libc::c_int >> 0 as libc::c_int) -
                                      1 as libc::c_int) < 2047 as libc::c_int
                                 {
                                  (16 as libc::c_int * 16 as libc::c_int +
                                       0 as libc::c_int >> 0 as libc::c_int) -
                                      1 as libc::c_int
                              } else { 2047 as libc::c_int }) as u32_0 &
                                 (((0x1 as libc::c_int) << 12 as libc::c_int)
                                      - 1 as libc::c_int) as libc::c_uint) <<
                                12 as libc::c_int |
                            (((((1 as libc::c_int) << 11 as libc::c_int) +
                                   (if 1 as libc::c_int >
                                           16 as libc::c_int *
                                               4 as libc::c_int /
                                               8 as libc::c_int {
                                        1 as libc::c_int
                                    } else {
                                        (16 as libc::c_int * 4 as libc::c_int)
                                            / 8 as libc::c_int
                                    }) - 1 as libc::c_int) /
                                  (if 1 as libc::c_int >
                                          16 as libc::c_int * 4 as libc::c_int
                                              / 8 as libc::c_int {
                                       1 as libc::c_int
                                   } else {
                                       (16 as libc::c_int * 4 as libc::c_int)
                                           / 8 as libc::c_int
                                   })) as u32_0 &
                                 (((0x1 as libc::c_int) << 12 as libc::c_int)
                                      - 1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int;
                    let fresh166 = (*__gfxCtx).polyOpa.p;
                    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
                    let mut _g_22: *mut Gfx = fresh166;
                    (*_g_22).words.w0 =
                        (0xe7 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int;
                    (*_g_22).words.w1 = 0 as libc::c_int as libc::c_uint;
                    let fresh167 = (*__gfxCtx).polyOpa.p;
                    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
                    let mut _g_23: *mut Gfx = fresh167;
                    (*_g_23).words.w0 =
                        (0xf5 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                21 as libc::c_int |
                            (3 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                19 as libc::c_int |
                            ((16 as libc::c_int * 2 as libc::c_int +
                                  7 as libc::c_int >> 3 as libc::c_int) as
                                 u32_0 &
                                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                9 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int;
                    (*_g_23).words.w1 =
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                20 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                18 as libc::c_int |
                            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                14 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                10 as libc::c_int |
                            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                8 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                4 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int;
                    let fresh168 = (*__gfxCtx).polyOpa.p;
                    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
                    let mut _g_24: *mut Gfx = fresh168;
                    (*_g_24).words.w0 =
                        (0xf2 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 12 as libc::c_int)
                                      - 1 as libc::c_int) as libc::c_uint) <<
                                12 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 12 as libc::c_int)
                                      - 1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int;
                    (*_g_24).words.w1 =
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (((16 as libc::c_int - 1 as libc::c_int) <<
                                  2 as libc::c_int) as u32_0 &
                                 (((0x1 as libc::c_int) << 12 as libc::c_int)
                                      - 1 as libc::c_int) as libc::c_uint) <<
                                12 as libc::c_int |
                            (((16 as libc::c_int - 1 as libc::c_int) <<
                                  2 as libc::c_int) as u32_0 &
                                 (((0x1 as libc::c_int) << 12 as libc::c_int)
                                      - 1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int;
                    let fresh169 = (*__gfxCtx).polyOpa.p;
                    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
                    let mut _g_25: *mut Gfx = fresh169;
                    (*_g_25).words.w0 =
                        (0x7 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (if 0 as libc::c_int == 0 as libc::c_int {
                                 (((0 as libc::c_int * 2 as libc::c_int) as
                                       u32_0 &
                                       (((0x1 as libc::c_int) <<
                                             8 as libc::c_int) -
                                            1 as libc::c_int) as libc::c_uint)
                                      << 16 as libc::c_int |
                                      ((2 as libc::c_int * 2 as libc::c_int)
                                           as u32_0 &
                                           (((0x1 as libc::c_int) <<
                                                 8 as libc::c_int) -
                                                1 as libc::c_int) as
                                               libc::c_uint) <<
                                          8 as libc::c_int) |
                                     ((3 as libc::c_int * 2 as libc::c_int) as
                                          u32_0 &
                                          (((0x1 as libc::c_int) <<
                                                8 as libc::c_int) -
                                               1 as libc::c_int) as
                                              libc::c_uint) <<
                                         0 as libc::c_int
                             } else {
                                 (if 0 as libc::c_int == 1 as libc::c_int {
                                      (((2 as libc::c_int * 2 as libc::c_int)
                                            as u32_0 &
                                            (((0x1 as libc::c_int) <<
                                                  8 as libc::c_int) -
                                                 1 as libc::c_int) as
                                                libc::c_uint) <<
                                           16 as libc::c_int |
                                           ((3 as libc::c_int *
                                                 2 as libc::c_int) as u32_0 &
                                                (((0x1 as libc::c_int) <<
                                                      8 as libc::c_int) -
                                                     1 as libc::c_int) as
                                                    libc::c_uint) <<
                                               8 as libc::c_int) |
                                          ((1 as libc::c_int *
                                                2 as libc::c_int) as u32_0 &
                                               (((0x1 as libc::c_int) <<
                                                     8 as libc::c_int) -
                                                    1 as libc::c_int) as
                                                   libc::c_uint) <<
                                              0 as libc::c_int
                                  } else {
                                      (if 0 as libc::c_int == 2 as libc::c_int
                                          {
                                           (((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                16 as libc::c_int |
                                                ((1 as libc::c_int *
                                                      2 as libc::c_int) as
                                                     u32_0 &
                                                     (((0x1 as libc::c_int) <<
                                                           8 as libc::c_int) -
                                                          1 as libc::c_int) as
                                                         libc::c_uint) <<
                                                    8 as libc::c_int) |
                                               ((0 as libc::c_int *
                                                     2 as libc::c_int) as
                                                    u32_0 &
                                                    (((0x1 as libc::c_int) <<
                                                          8 as libc::c_int) -
                                                         1 as libc::c_int) as
                                                        libc::c_uint) <<
                                                   0 as libc::c_int
                                       } else {
                                           (((1 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                16 as libc::c_int |
                                                ((0 as libc::c_int *
                                                      2 as libc::c_int) as
                                                     u32_0 &
                                                     (((0x1 as libc::c_int) <<
                                                           8 as libc::c_int) -
                                                          1 as libc::c_int) as
                                                         libc::c_uint) <<
                                                    8 as libc::c_int) |
                                               ((2 as libc::c_int *
                                                     2 as libc::c_int) as
                                                    u32_0 &
                                                    (((0x1 as libc::c_int) <<
                                                          8 as libc::c_int) -
                                                         1 as libc::c_int) as
                                                        libc::c_uint) <<
                                                   0 as libc::c_int
                                       })
                                  })
                             });
                    (*_g_25).words.w1 =
                        if 0 as libc::c_int == 0 as libc::c_int {
                            (((0 as libc::c_int * 2 as libc::c_int) as u32_0 &
                                  (((0x1 as libc::c_int) << 8 as libc::c_int)
                                       - 1 as libc::c_int) as libc::c_uint) <<
                                 16 as libc::c_int |
                                 ((3 as libc::c_int * 2 as libc::c_int) as
                                      u32_0 &
                                      (((0x1 as libc::c_int) <<
                                            8 as libc::c_int) -
                                           1 as libc::c_int) as libc::c_uint)
                                     << 8 as libc::c_int) |
                                ((1 as libc::c_int * 2 as libc::c_int) as
                                     u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 0 as libc::c_int
                        } else if 0 as libc::c_int == 1 as libc::c_int {
                            (((2 as libc::c_int * 2 as libc::c_int) as u32_0 &
                                  (((0x1 as libc::c_int) << 8 as libc::c_int)
                                       - 1 as libc::c_int) as libc::c_uint) <<
                                 16 as libc::c_int |
                                 ((1 as libc::c_int * 2 as libc::c_int) as
                                      u32_0 &
                                      (((0x1 as libc::c_int) <<
                                            8 as libc::c_int) -
                                           1 as libc::c_int) as libc::c_uint)
                                     << 8 as libc::c_int) |
                                ((0 as libc::c_int * 2 as libc::c_int) as
                                     u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 0 as libc::c_int
                        } else if 0 as libc::c_int == 2 as libc::c_int {
                            (((3 as libc::c_int * 2 as libc::c_int) as u32_0 &
                                  (((0x1 as libc::c_int) << 8 as libc::c_int)
                                       - 1 as libc::c_int) as libc::c_uint) <<
                                 16 as libc::c_int |
                                 ((0 as libc::c_int * 2 as libc::c_int) as
                                      u32_0 &
                                      (((0x1 as libc::c_int) <<
                                            8 as libc::c_int) -
                                           1 as libc::c_int) as libc::c_uint)
                                     << 8 as libc::c_int) |
                                ((2 as libc::c_int * 2 as libc::c_int) as
                                     u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 0 as libc::c_int
                        } else {
                            (((1 as libc::c_int * 2 as libc::c_int) as u32_0 &
                                  (((0x1 as libc::c_int) << 8 as libc::c_int)
                                       - 1 as libc::c_int) as libc::c_uint) <<
                                 16 as libc::c_int |
                                 ((2 as libc::c_int * 2 as libc::c_int) as
                                      u32_0 &
                                      (((0x1 as libc::c_int) <<
                                            8 as libc::c_int) -
                                           1 as libc::c_int) as libc::c_uint)
                                     << 8 as libc::c_int) |
                                ((3 as libc::c_int * 2 as libc::c_int) as
                                     u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 0 as libc::c_int
                        }
                } else {
                    (*__gfxCtx).polyOpa.p =
                        FileChoose_QuadTextureIA8((*__gfxCtx).polyOpa.p,
                                                  sQuestItemTextures[j as
                                                                         usize],
                                                  0x10 as libc::c_int as s16,
                                                  0x10 as libc::c_int as s16,
                                                  0 as libc::c_int as s16)
                }
            }
            j += 1;
            vtxOffset = (vtxOffset as libc::c_int + 4 as libc::c_int) as s16
        }
    }
    Graph_CloseDisps(dispRefs.as_mut_ptr(), (*this).state.gfxCtx,
                     b"../z_file_choose.c\x00" as *const u8 as
                         *const libc::c_char, 1797 as libc::c_int);
}
static mut sFileInfoBoxTextures: [*mut libc::c_void; 5] =
    unsafe {
        [gFileSelFileInfoBox1Tex.as_ptr() as *mut _ as *mut libc::c_void,
         gFileSelFileInfoBox2Tex.as_ptr() as *mut _ as *mut libc::c_void,
         gFileSelFileInfoBox3Tex.as_ptr() as *mut _ as *mut libc::c_void,
         gFileSelFileInfoBox4Tex.as_ptr() as *mut _ as *mut libc::c_void,
         gFileSelFileInfoBox5Tex.as_ptr() as *mut _ as *mut libc::c_void]
    };
static mut sTitleLabels: [[*mut libc::c_void; 9]; 3] =
    unsafe {
        [[gFileSelPleaseSelectAFileENGTex.as_ptr() as *mut _ as
              *mut libc::c_void,
          gFileSelOpenThisFileENGTex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelCopyWhichFileENGTex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelCopyToWhichFileENGTex.as_ptr() as *mut _ as
              *mut libc::c_void,
          gFileSelAreYouSureENGTex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelFileCopiedENGTex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelEraseWhichFileENGTex.as_ptr() as *mut _ as
              *mut libc::c_void,
          gFileSelAreYouSure2ENGTex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelFileErasedENGTex.as_ptr() as *mut _ as *mut libc::c_void],
         [gFileSelPleaseSelectAFileGERTex.as_ptr() as *mut _ as
              *mut libc::c_void,
          gFileSelOpenThisFileGERTex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelWhichFile1GERTex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelCopyToWhichFileGERTex.as_ptr() as *mut _ as
              *mut libc::c_void,
          gFileSelAreYouSureGERTex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelFileCopiedGERTex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelWhichFile2GERTex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelAreYouSure2GERTex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelFileErasedGERTex.as_ptr() as *mut _ as *mut libc::c_void],
         [gFileSelPleaseSelectAFileFRATex.as_ptr() as *mut _ as
              *mut libc::c_void,
          gFileSelOpenThisFileFRATex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelCopyWhichFileFRATex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelCopyToWhichFileFRATex.as_ptr() as *mut _ as
              *mut libc::c_void,
          gFileSelAreYouSureFRATex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelFileCopiedFRATex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelEraseWhichFileFRATex.as_ptr() as *mut _ as
              *mut libc::c_void,
          gFileSelAreYouSure2FRATex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelFileErasedFRATex.as_ptr() as *mut _ as *mut libc::c_void]]
    };
static mut sWarningLabels: [[*mut libc::c_void; 5]; 3] =
    unsafe {
        [[gFileSelNoFileToCopyENGTex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelNoFileToEraseENGTex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelNoEmptyFileENGTex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelFileEmptyENGTex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelFileInUseENGTex.as_ptr() as *mut _ as *mut libc::c_void],
         [gFileSelNoFileToCopyGERTex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelNoFileToEraseGERTex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelNoEmptyFileGERTex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelFileEmptyGERTex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelFileInUseGERTex.as_ptr() as *mut _ as *mut libc::c_void],
         [gFileSelNoFileToCopyFRATex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelNoFileToEraseFRATex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelNoEmptyFileFRATex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelFileEmptyFRATex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelFileInUseFRATex.as_ptr() as *mut _ as *mut libc::c_void]]
    };
static mut sFileButtonTextures: [[*mut libc::c_void; 3]; 3] =
    unsafe {
        [[gFileSelFile1ButtonENGTex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelFile2ButtonENGTex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelFile3ButtonENGTex.as_ptr() as *mut _ as *mut libc::c_void],
         [gFileSelFile1ButtonGERTex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelFile2ButtonGERTex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelFile3ButtonGERTex.as_ptr() as *mut _ as *mut libc::c_void],
         [gFileSelFile1ButtonFRATex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelFile2ButtonFRATex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelFile3ButtonFRATex.as_ptr() as *mut _ as *mut libc::c_void]]
    };
static mut sActionButtonTextures: [[*mut libc::c_void; 4]; 3] =
    unsafe {
        [[gFileSelCopyButtonENGTex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelEraseButtonENGTex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelYesButtonENGTex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelQuitButtonENGTex.as_ptr() as *mut _ as *mut libc::c_void],
         [gFileSelCopyButtonGERTex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelEraseButtonGERTex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelYesButtonGERTex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelQuitButtonGERTex.as_ptr() as *mut _ as *mut libc::c_void],
         [gFileSelCopyButtonFRATex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelEraseButtonFRATex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelYesButtonFRATex.as_ptr() as *mut _ as *mut libc::c_void,
          gFileSelQuitButtonFRATex.as_ptr() as *mut _ as *mut libc::c_void]]
    };
static mut sOptionsButtonTextures: [*mut libc::c_void; 3] =
    unsafe {
        [gFileSelOptionsButtonENGTex.as_ptr() as *mut _ as *mut libc::c_void,
         gFileSelOptionsButtonGERTex.as_ptr() as *mut _ as *mut libc::c_void,
         gFileSelOptionsButtonENGTex.as_ptr() as *mut _ as *mut libc::c_void]
    };
/* *
 * Draw most window contents including buttons, labels, and icons.
 * Does not include anything from the keyboard and settings windows.
 */
#[no_mangle]
pub unsafe extern "C" fn FileChoose_DrawWindowContents(mut thisx:
                                                           *mut GameState) {
    let mut this: *mut FileChooseContext = thisx as *mut FileChooseContext;
    let mut fileIndex: s16 = 0;
    let mut temp: s16 = 0;
    let mut i: s16 = 0;
    let mut quadVtxIndex: s16 = 0;
    let mut isActive: s16 = 0;
    let mut pad: s16 = 0;
    let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
    let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
    __gfxCtx = (*this).state.gfxCtx;
    Graph_OpenDisps(dispRefs.as_mut_ptr(), (*this).state.gfxCtx,
                    b"../z_file_choose.c\x00" as *const u8 as
                        *const libc::c_char, 1940 as libc::c_int);
    // draw title label
    let fresh170 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g: *mut Gfx = fresh170;
    (*_g).words.w0 =
        (0xe7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g).words.w1 = 0 as libc::c_int as libc::c_uint;
    let fresh171 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_0: *mut Gfx = fresh171;
    (*_g_0).words.w0 =
        (0xfc as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (((3 as libc::c_int as u32_0 &
                   (((0x1 as libc::c_int) << 4 as libc::c_int) -
                        1 as libc::c_int) as libc::c_uint) <<
                  20 as libc::c_int |
                  (1 as libc::c_int as u32_0 &
                       (((0x1 as libc::c_int) << 5 as libc::c_int) -
                            1 as libc::c_int) as libc::c_uint) <<
                      15 as libc::c_int |
                  (1 as libc::c_int as u32_0 &
                       (((0x1 as libc::c_int) << 3 as libc::c_int) -
                            1 as libc::c_int) as libc::c_uint) <<
                      12 as libc::c_int |
                  (3 as libc::c_int as u32_0 &
                       (((0x1 as libc::c_int) << 3 as libc::c_int) -
                            1 as libc::c_int) as libc::c_uint) <<
                      9 as libc::c_int |
                  ((3 as libc::c_int as u32_0 &
                        (((0x1 as libc::c_int) << 4 as libc::c_int) -
                             1 as libc::c_int) as libc::c_uint) <<
                       5 as libc::c_int |
                       (1 as libc::c_int as u32_0 &
                            (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                 1 as libc::c_int) as libc::c_uint) <<
                           0 as libc::c_int)) &
                 (((0x1 as libc::c_int) << 24 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_0).words.w1 =
        (5 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 4 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 28 as libc::c_int |
            (5 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 15 as libc::c_int
            |
            (7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 9 as libc::c_int |
            ((5 as libc::c_int as u32_0 &
                  (((0x1 as libc::c_int) << 4 as libc::c_int) -
                       1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                 |
                 (1 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 3 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     21 as libc::c_int |
                 (3 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 3 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     18 as libc::c_int |
                 (5 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 3 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     6 as libc::c_int |
                 (7 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 3 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     3 as libc::c_int |
                 (7 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 3 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     0 as libc::c_int);
    let fresh172 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_1: *mut Gfx = fresh172;
    (*_g_1).words.w0 =
        (0xfa as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_1).words.w1 =
        (255 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            ((*this).titleAlpha[0 as libc::c_int as usize] as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh173 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_2: *mut Gfx = fresh173;
    (*_g_2).words.w0 =
        (0xfb as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_2).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh174 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_3: *mut Gfx = fresh174;
    (*_g_3).words.w0 =
        (0x1 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (4 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            ((0 as libc::c_int + 4 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 7 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 1 as libc::c_int;
    (*_g_3).words.w1 = (*this).windowContentVtx as libc::c_uint;
    let fresh175 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_4: *mut Gfx = fresh175;
    (*_g_4).words.w0 =
        (0xfd as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (3 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 21 as libc::c_int
            |
            (2 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            ((1 as libc::c_int - 1 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_4).words.w1 =
        sTitleLabels[gSaveContext.language as
                         usize][(*this).titleLabel as usize] as libc::c_uint;
    let fresh176 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_5: *mut Gfx = fresh176;
    (*_g_5).words.w0 =
        (0xf5 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (3 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 21 as libc::c_int
            |
            (2 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 9 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_5).words.w1 =
        (7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 20 as libc::c_int
            |
            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 18 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 14 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 10 as libc::c_int
            |
            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 4 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh177 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_6: *mut Gfx = fresh177;
    (*_g_6).words.w0 =
        (0xe6 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_6).words.w1 = 0 as libc::c_int as libc::c_uint;
    let fresh178 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_7: *mut Gfx = fresh178;
    (*_g_7).words.w0 =
        (0xf3 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_7).words.w1 =
        (7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            ((if ((128 as libc::c_int * 16 as libc::c_int + 1 as libc::c_int
                       >> 1 as libc::c_int) - 1 as libc::c_int) <
                     2047 as libc::c_int {
                  (128 as libc::c_int * 16 as libc::c_int + 1 as libc::c_int
                       >> 1 as libc::c_int) - 1 as libc::c_int
              } else { 2047 as libc::c_int }) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (((((1 as libc::c_int) << 11 as libc::c_int) +
                   (if 1 as libc::c_int >
                           128 as libc::c_int * 1 as libc::c_int /
                               8 as libc::c_int {
                        1 as libc::c_int
                    } else {
                        (128 as libc::c_int * 1 as libc::c_int) /
                            8 as libc::c_int
                    }) - 1 as libc::c_int) /
                  (if 1 as libc::c_int >
                          128 as libc::c_int * 1 as libc::c_int /
                              8 as libc::c_int {
                       1 as libc::c_int
                   } else {
                       (128 as libc::c_int * 1 as libc::c_int) /
                           8 as libc::c_int
                   })) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh179 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_8: *mut Gfx = fresh179;
    (*_g_8).words.w0 =
        (0xe7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_8).words.w1 = 0 as libc::c_int as libc::c_uint;
    let fresh180 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_9: *mut Gfx = fresh180;
    (*_g_9).words.w0 =
        (0xf5 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (3 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 21 as libc::c_int
            |
            (1 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            ((128 as libc::c_int * 1 as libc::c_int + 7 as libc::c_int >>
                  3 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 9 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_9).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 20 as libc::c_int
            |
            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 18 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 14 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 10 as libc::c_int
            |
            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 4 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh181 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_10: *mut Gfx = fresh181;
    (*_g_10).words.w0 =
        (0xf2 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_10).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (((128 as libc::c_int - 1 as libc::c_int) << 2 as libc::c_int) as
                 u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (((16 as libc::c_int - 1 as libc::c_int) << 2 as libc::c_int) as
                 u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh182 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_11: *mut Gfx = fresh182;
    (*_g_11).words.w0 =
        (0x7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (if 0 as libc::c_int == 0 as libc::c_int {
                 (((0 as libc::c_int * 2 as libc::c_int) as u32_0 &
                       (((0x1 as libc::c_int) << 8 as libc::c_int) -
                            1 as libc::c_int) as libc::c_uint) <<
                      16 as libc::c_int |
                      ((2 as libc::c_int * 2 as libc::c_int) as u32_0 &
                           (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          8 as libc::c_int) |
                     ((3 as libc::c_int * 2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         0 as libc::c_int
             } else {
                 (if 0 as libc::c_int == 1 as libc::c_int {
                      (((2 as libc::c_int * 2 as libc::c_int) as u32_0 &
                            (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                 1 as libc::c_int) as libc::c_uint) <<
                           16 as libc::c_int |
                           ((3 as libc::c_int * 2 as libc::c_int) as u32_0 &
                                (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                     1 as libc::c_int) as libc::c_uint) <<
                               8 as libc::c_int) |
                          ((1 as libc::c_int * 2 as libc::c_int) as u32_0 &
                               (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              0 as libc::c_int
                  } else {
                      (if 0 as libc::c_int == 2 as libc::c_int {
                           (((3 as libc::c_int * 2 as libc::c_int) as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                16 as libc::c_int |
                                ((1 as libc::c_int * 2 as libc::c_int) as
                                     u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 8 as libc::c_int) |
                               ((0 as libc::c_int * 2 as libc::c_int) as u32_0
                                    &
                                    (((0x1 as libc::c_int) <<
                                          8 as libc::c_int) -
                                         1 as libc::c_int) as libc::c_uint) <<
                                   0 as libc::c_int
                       } else {
                           (((1 as libc::c_int * 2 as libc::c_int) as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                16 as libc::c_int |
                                ((0 as libc::c_int * 2 as libc::c_int) as
                                     u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 8 as libc::c_int) |
                               ((2 as libc::c_int * 2 as libc::c_int) as u32_0
                                    &
                                    (((0x1 as libc::c_int) <<
                                          8 as libc::c_int) -
                                         1 as libc::c_int) as libc::c_uint) <<
                                   0 as libc::c_int
                       })
                  })
             });
    (*_g_11).words.w1 =
        if 0 as libc::c_int == 0 as libc::c_int {
            (((0 as libc::c_int * 2 as libc::c_int) as u32_0 &
                  (((0x1 as libc::c_int) << 8 as libc::c_int) -
                       1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
                 |
                 ((3 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     8 as libc::c_int) |
                ((1 as libc::c_int * 2 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int
        } else if 0 as libc::c_int == 1 as libc::c_int {
            (((2 as libc::c_int * 2 as libc::c_int) as u32_0 &
                  (((0x1 as libc::c_int) << 8 as libc::c_int) -
                       1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
                 |
                 ((1 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     8 as libc::c_int) |
                ((0 as libc::c_int * 2 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int
        } else if 0 as libc::c_int == 2 as libc::c_int {
            (((3 as libc::c_int * 2 as libc::c_int) as u32_0 &
                  (((0x1 as libc::c_int) << 8 as libc::c_int) -
                       1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
                 |
                 ((0 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     8 as libc::c_int) |
                ((2 as libc::c_int * 2 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int
        } else {
            (((1 as libc::c_int * 2 as libc::c_int) as u32_0 &
                  (((0x1 as libc::c_int) << 8 as libc::c_int) -
                       1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
                 |
                 ((2 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     8 as libc::c_int) |
                ((3 as libc::c_int * 2 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int
        };
    // draw next title label
    let fresh183 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_12: *mut Gfx = fresh183;
    (*_g_12).words.w0 =
        (0xe7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_12).words.w1 = 0 as libc::c_int as libc::c_uint;
    let fresh184 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_13: *mut Gfx = fresh184;
    (*_g_13).words.w0 =
        (0xfa as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_13).words.w1 =
        (255 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            ((*this).titleAlpha[1 as libc::c_int as usize] as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh185 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_14: *mut Gfx = fresh185;
    (*_g_14).words.w0 =
        (0xfd as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (3 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 21 as libc::c_int
            |
            (2 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            ((1 as libc::c_int - 1 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_14).words.w1 =
        sTitleLabels[gSaveContext.language as
                         usize][(*this).nextTitleLabel as usize] as
            libc::c_uint;
    let fresh186 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_15: *mut Gfx = fresh186;
    (*_g_15).words.w0 =
        (0xf5 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (3 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 21 as libc::c_int
            |
            (2 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 9 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_15).words.w1 =
        (7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 20 as libc::c_int
            |
            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 18 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 14 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 10 as libc::c_int
            |
            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 4 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh187 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_16: *mut Gfx = fresh187;
    (*_g_16).words.w0 =
        (0xe6 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_16).words.w1 = 0 as libc::c_int as libc::c_uint;
    let fresh188 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_17: *mut Gfx = fresh188;
    (*_g_17).words.w0 =
        (0xf3 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_17).words.w1 =
        (7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            ((if ((128 as libc::c_int * 16 as libc::c_int + 1 as libc::c_int
                       >> 1 as libc::c_int) - 1 as libc::c_int) <
                     2047 as libc::c_int {
                  (128 as libc::c_int * 16 as libc::c_int + 1 as libc::c_int
                       >> 1 as libc::c_int) - 1 as libc::c_int
              } else { 2047 as libc::c_int }) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (((((1 as libc::c_int) << 11 as libc::c_int) +
                   (if 1 as libc::c_int >
                           128 as libc::c_int * 1 as libc::c_int /
                               8 as libc::c_int {
                        1 as libc::c_int
                    } else {
                        (128 as libc::c_int * 1 as libc::c_int) /
                            8 as libc::c_int
                    }) - 1 as libc::c_int) /
                  (if 1 as libc::c_int >
                          128 as libc::c_int * 1 as libc::c_int /
                              8 as libc::c_int {
                       1 as libc::c_int
                   } else {
                       (128 as libc::c_int * 1 as libc::c_int) /
                           8 as libc::c_int
                   })) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh189 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_18: *mut Gfx = fresh189;
    (*_g_18).words.w0 =
        (0xe7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_18).words.w1 = 0 as libc::c_int as libc::c_uint;
    let fresh190 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_19: *mut Gfx = fresh190;
    (*_g_19).words.w0 =
        (0xf5 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (3 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 21 as libc::c_int
            |
            (1 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            ((128 as libc::c_int * 1 as libc::c_int + 7 as libc::c_int >>
                  3 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 9 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_19).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 20 as libc::c_int
            |
            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 18 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 14 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 10 as libc::c_int
            |
            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 4 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh191 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_20: *mut Gfx = fresh191;
    (*_g_20).words.w0 =
        (0xf2 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_20).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (((128 as libc::c_int - 1 as libc::c_int) << 2 as libc::c_int) as
                 u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (((16 as libc::c_int - 1 as libc::c_int) << 2 as libc::c_int) as
                 u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh192 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_21: *mut Gfx = fresh192;
    (*_g_21).words.w0 =
        (0x7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (if 0 as libc::c_int == 0 as libc::c_int {
                 (((0 as libc::c_int * 2 as libc::c_int) as u32_0 &
                       (((0x1 as libc::c_int) << 8 as libc::c_int) -
                            1 as libc::c_int) as libc::c_uint) <<
                      16 as libc::c_int |
                      ((2 as libc::c_int * 2 as libc::c_int) as u32_0 &
                           (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          8 as libc::c_int) |
                     ((3 as libc::c_int * 2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         0 as libc::c_int
             } else {
                 (if 0 as libc::c_int == 1 as libc::c_int {
                      (((2 as libc::c_int * 2 as libc::c_int) as u32_0 &
                            (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                 1 as libc::c_int) as libc::c_uint) <<
                           16 as libc::c_int |
                           ((3 as libc::c_int * 2 as libc::c_int) as u32_0 &
                                (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                     1 as libc::c_int) as libc::c_uint) <<
                               8 as libc::c_int) |
                          ((1 as libc::c_int * 2 as libc::c_int) as u32_0 &
                               (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              0 as libc::c_int
                  } else {
                      (if 0 as libc::c_int == 2 as libc::c_int {
                           (((3 as libc::c_int * 2 as libc::c_int) as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                16 as libc::c_int |
                                ((1 as libc::c_int * 2 as libc::c_int) as
                                     u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 8 as libc::c_int) |
                               ((0 as libc::c_int * 2 as libc::c_int) as u32_0
                                    &
                                    (((0x1 as libc::c_int) <<
                                          8 as libc::c_int) -
                                         1 as libc::c_int) as libc::c_uint) <<
                                   0 as libc::c_int
                       } else {
                           (((1 as libc::c_int * 2 as libc::c_int) as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                16 as libc::c_int |
                                ((0 as libc::c_int * 2 as libc::c_int) as
                                     u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 8 as libc::c_int) |
                               ((2 as libc::c_int * 2 as libc::c_int) as u32_0
                                    &
                                    (((0x1 as libc::c_int) <<
                                          8 as libc::c_int) -
                                         1 as libc::c_int) as libc::c_uint) <<
                                   0 as libc::c_int
                       })
                  })
             });
    (*_g_21).words.w1 =
        if 0 as libc::c_int == 0 as libc::c_int {
            (((0 as libc::c_int * 2 as libc::c_int) as u32_0 &
                  (((0x1 as libc::c_int) << 8 as libc::c_int) -
                       1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
                 |
                 ((3 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     8 as libc::c_int) |
                ((1 as libc::c_int * 2 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int
        } else if 0 as libc::c_int == 1 as libc::c_int {
            (((2 as libc::c_int * 2 as libc::c_int) as u32_0 &
                  (((0x1 as libc::c_int) << 8 as libc::c_int) -
                       1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
                 |
                 ((1 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     8 as libc::c_int) |
                ((0 as libc::c_int * 2 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int
        } else if 0 as libc::c_int == 2 as libc::c_int {
            (((3 as libc::c_int * 2 as libc::c_int) as u32_0 &
                  (((0x1 as libc::c_int) << 8 as libc::c_int) -
                       1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
                 |
                 ((0 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     8 as libc::c_int) |
                ((2 as libc::c_int * 2 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int
        } else {
            (((1 as libc::c_int * 2 as libc::c_int) as u32_0 &
                  (((0x1 as libc::c_int) << 8 as libc::c_int) -
                       1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
                 |
                 ((2 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     8 as libc::c_int) |
                ((3 as libc::c_int * 2 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int
        };
    temp = 4 as libc::c_int as s16;
    let fresh193 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_22: *mut Gfx = fresh193;
    (*_g_22).words.w0 =
        (0xe7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_22).words.w1 = 0 as libc::c_int as libc::c_uint;
    // draw file info box (large box when a file is selected)
    fileIndex = 0 as libc::c_int as s16;
    while (fileIndex as libc::c_int) < 3 as libc::c_int {
        let fresh194 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_23: *mut Gfx = fresh194;
        (*_g_23).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_23).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh195 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_24: *mut Gfx = fresh195;
        (*_g_24).words.w0 =
            (0xfa as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_24).words.w1 =
            ((*this).windowColor[0 as libc::c_int as usize] as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((*this).windowColor[1 as libc::c_int as usize] as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                ((*this).windowColor[2 as libc::c_int as usize] as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                ((*this).fileInfoAlpha[fileIndex as usize] as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh196 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_25: *mut Gfx = fresh196;
        (*_g_25).words.w0 =
            (0x1 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (20 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                ((0 as libc::c_int + 20 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 7 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    1 as libc::c_int;
        (*_g_25).words.w1 =
            &mut *(*this).windowContentVtx.offset(temp as isize) as *mut Vtx
                as libc::c_uint;
        quadVtxIndex = 0 as libc::c_int as s16;
        i = 0 as libc::c_int as s16;
        while (i as libc::c_int) < 5 as libc::c_int {
            let fresh197 = (*__gfxCtx).polyOpa.p;
            (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
            let mut _g_26: *mut Gfx = fresh197;
            (*_g_26).words.w0 =
                (0xfd as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (3 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        21 as libc::c_int |
                    (2 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    ((1 as libc::c_int - 1 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_26).words.w1 =
                sFileInfoBoxTextures[i as usize] as libc::c_uint;
            let fresh198 = (*__gfxCtx).polyOpa.p;
            (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
            let mut _g_27: *mut Gfx = fresh198;
            (*_g_27).words.w0 =
                (0xf5 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (3 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        21 as libc::c_int |
                    (2 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 9 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        9 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 9 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_27).words.w1 =
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        20 as libc::c_int |
                    ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        18 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        14 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        10 as libc::c_int |
                    ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        4 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh199 = (*__gfxCtx).polyOpa.p;
            (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
            let mut _g_28: *mut Gfx = fresh199;
            (*_g_28).words.w0 =
                (0xe6 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_28).words.w1 = 0 as libc::c_int as libc::c_uint;
            let fresh200 = (*__gfxCtx).polyOpa.p;
            (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
            let mut _g_29: *mut Gfx = fresh200;
            (*_g_29).words.w0 =
                (0xf3 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_29).words.w1 =
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((if ((sFileInfoBoxPartWidths[i as usize] as libc::c_int *
                               56 as libc::c_int + 0 as libc::c_int >>
                               0 as libc::c_int) - 1 as libc::c_int) <
                             2047 as libc::c_int {
                          (sFileInfoBoxPartWidths[i as usize] as libc::c_int *
                               56 as libc::c_int + 0 as libc::c_int >>
                               0 as libc::c_int) - 1 as libc::c_int
                      } else { 2047 as libc::c_int }) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (((((1 as libc::c_int) << 11 as libc::c_int) +
                           (if 1 as libc::c_int >
                                   sFileInfoBoxPartWidths[i as usize] as
                                       libc::c_int * 2 as libc::c_int /
                                       8 as libc::c_int {
                                1 as libc::c_int
                            } else {
                                (sFileInfoBoxPartWidths[i as usize] as
                                     libc::c_int * 2 as libc::c_int) /
                                    8 as libc::c_int
                            }) - 1 as libc::c_int) /
                          (if 1 as libc::c_int >
                                  sFileInfoBoxPartWidths[i as usize] as
                                      libc::c_int * 2 as libc::c_int /
                                      8 as libc::c_int {
                               1 as libc::c_int
                           } else {
                               (sFileInfoBoxPartWidths[i as usize] as
                                    libc::c_int * 2 as libc::c_int) /
                                   8 as libc::c_int
                           })) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh201 = (*__gfxCtx).polyOpa.p;
            (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
            let mut _g_30: *mut Gfx = fresh201;
            (*_g_30).words.w0 =
                (0xe7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_30).words.w1 = 0 as libc::c_int as libc::c_uint;
            let fresh202 = (*__gfxCtx).polyOpa.p;
            (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
            let mut _g_31: *mut Gfx = fresh202;
            (*_g_31).words.w0 =
                (0xf5 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (3 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        21 as libc::c_int |
                    (2 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    ((sFileInfoBoxPartWidths[i as usize] as libc::c_int *
                          2 as libc::c_int + 7 as libc::c_int >>
                          3 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 9 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        9 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 9 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_31).words.w1 =
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        20 as libc::c_int |
                    ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        18 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        14 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        10 as libc::c_int |
                    ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        4 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh203 = (*__gfxCtx).polyOpa.p;
            (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
            let mut _g_32: *mut Gfx = fresh203;
            (*_g_32).words.w0 =
                (0xf2 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_32).words.w1 =
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (((sFileInfoBoxPartWidths[i as usize] as libc::c_int -
                           1 as libc::c_int) << 2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (((56 as libc::c_int - 1 as libc::c_int) <<
                          2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh204 = (*__gfxCtx).polyOpa.p;
            (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
            let mut _g_33: *mut Gfx = fresh204;
            (*_g_33).words.w0 =
                (0x7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (if 0 as libc::c_int == 0 as libc::c_int {
                         (((quadVtxIndex as libc::c_int * 2 as libc::c_int) as
                               u32_0 &
                               (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              16 as libc::c_int |
                              (((quadVtxIndex as libc::c_int +
                                     2 as libc::c_int) * 2 as libc::c_int) as
                                   u32_0 &
                                   (((0x1 as libc::c_int) << 8 as libc::c_int)
                                        - 1 as libc::c_int) as libc::c_uint)
                                  << 8 as libc::c_int) |
                             (((quadVtxIndex as libc::c_int +
                                    3 as libc::c_int) * 2 as libc::c_int) as
                                  u32_0 &
                                  (((0x1 as libc::c_int) << 8 as libc::c_int)
                                       - 1 as libc::c_int) as libc::c_uint) <<
                                 0 as libc::c_int
                     } else {
                         (if 0 as libc::c_int == 1 as libc::c_int {
                              ((((quadVtxIndex as libc::c_int +
                                      2 as libc::c_int) * 2 as libc::c_int) as
                                    u32_0 &
                                    (((0x1 as libc::c_int) <<
                                          8 as libc::c_int) -
                                         1 as libc::c_int) as libc::c_uint) <<
                                   16 as libc::c_int |
                                   (((quadVtxIndex as libc::c_int +
                                          3 as libc::c_int) *
                                         2 as libc::c_int) as u32_0 &
                                        (((0x1 as libc::c_int) <<
                                              8 as libc::c_int) -
                                             1 as libc::c_int) as
                                            libc::c_uint) << 8 as libc::c_int)
                                  |
                                  (((quadVtxIndex as libc::c_int +
                                         1 as libc::c_int) * 2 as libc::c_int)
                                       as u32_0 &
                                       (((0x1 as libc::c_int) <<
                                             8 as libc::c_int) -
                                            1 as libc::c_int) as libc::c_uint)
                                      << 0 as libc::c_int
                          } else {
                              (if 0 as libc::c_int == 2 as libc::c_int {
                                   ((((quadVtxIndex as libc::c_int +
                                           3 as libc::c_int) *
                                          2 as libc::c_int) as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                        (((quadVtxIndex as libc::c_int +
                                               1 as libc::c_int) *
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int) |
                                       ((quadVtxIndex as libc::c_int *
                                             2 as libc::c_int) as u32_0 &
                                            (((0x1 as libc::c_int) <<
                                                  8 as libc::c_int) -
                                                 1 as libc::c_int) as
                                                libc::c_uint) <<
                                           0 as libc::c_int
                               } else {
                                   ((((quadVtxIndex as libc::c_int +
                                           1 as libc::c_int) *
                                          2 as libc::c_int) as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                        ((quadVtxIndex as libc::c_int *
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int) |
                                       (((quadVtxIndex as libc::c_int +
                                              2 as libc::c_int) *
                                             2 as libc::c_int) as u32_0 &
                                            (((0x1 as libc::c_int) <<
                                                  8 as libc::c_int) -
                                                 1 as libc::c_int) as
                                                libc::c_uint) <<
                                           0 as libc::c_int
                               })
                          })
                     });
            (*_g_33).words.w1 =
                if 0 as libc::c_int == 0 as libc::c_int {
                    (((quadVtxIndex as libc::c_int * 2 as libc::c_int) as
                          u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         16 as libc::c_int |
                         (((quadVtxIndex as libc::c_int + 3 as libc::c_int) *
                               2 as libc::c_int) as u32_0 &
                              (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             8 as libc::c_int) |
                        (((quadVtxIndex as libc::c_int + 1 as libc::c_int) *
                              2 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int
                } else if 0 as libc::c_int == 1 as libc::c_int {
                    ((((quadVtxIndex as libc::c_int + 2 as libc::c_int) *
                           2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         16 as libc::c_int |
                         (((quadVtxIndex as libc::c_int + 1 as libc::c_int) *
                               2 as libc::c_int) as u32_0 &
                              (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             8 as libc::c_int) |
                        ((quadVtxIndex as libc::c_int * 2 as libc::c_int) as
                             u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int
                } else if 0 as libc::c_int == 2 as libc::c_int {
                    ((((quadVtxIndex as libc::c_int + 3 as libc::c_int) *
                           2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         16 as libc::c_int |
                         ((quadVtxIndex as libc::c_int * 2 as libc::c_int) as
                              u32_0 &
                              (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             8 as libc::c_int) |
                        (((quadVtxIndex as libc::c_int + 2 as libc::c_int) *
                              2 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int
                } else {
                    ((((quadVtxIndex as libc::c_int + 1 as libc::c_int) *
                           2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         16 as libc::c_int |
                         (((quadVtxIndex as libc::c_int + 2 as libc::c_int) *
                               2 as libc::c_int) as u32_0 &
                              (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             8 as libc::c_int) |
                        (((quadVtxIndex as libc::c_int + 3 as libc::c_int) *
                              2 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int
                };
            i += 1;
            quadVtxIndex =
                (quadVtxIndex as libc::c_int + 4 as libc::c_int) as s16
        }
        fileIndex += 1;
        temp = (temp as libc::c_int + 20 as libc::c_int) as s16
    }
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) < 3 as libc::c_int {
        // draw file button
        let fresh205 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_34: *mut Gfx = fresh205;
        (*_g_34).words.w0 =
            (0x1 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (20 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                ((0 as libc::c_int + 20 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 7 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    1 as libc::c_int;
        (*_g_34).words.w1 =
            &mut *(*this).windowContentVtx.offset(temp as isize) as *mut Vtx
                as libc::c_uint;
        isActive =
            if (*this).n64ddFlag as libc::c_int ==
                   (*this).n64ddFlags[i as usize] as libc::c_int ||
                   (*this).nameBoxAlpha[i as usize] as libc::c_int ==
                       0 as libc::c_int {
                0 as libc::c_int
            } else { 1 as libc::c_int } as s16;
        let fresh206 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_35: *mut Gfx = fresh206;
        (*_g_35).words.w0 =
            (0xfa as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_35).words.w1 =
            (sWindowContentColors[isActive as
                                      usize][0 as libc::c_int as usize] as
                 u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (sWindowContentColors[isActive as
                                          usize][1 as libc::c_int as usize] as
                     u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (sWindowContentColors[isActive as
                                          usize][2 as libc::c_int as usize] as
                     u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                ((*this).fileButtonAlpha[i as usize] as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh207 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_36: *mut Gfx = fresh207;
        (*_g_36).words.w0 =
            (0xfd as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (3 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    21 as libc::c_int |
                (2 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((1 as libc::c_int - 1 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_36).words.w1 =
            sFileButtonTextures[gSaveContext.language as usize][i as usize] as
                libc::c_uint;
        let fresh208 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_37: *mut Gfx = fresh208;
        (*_g_37).words.w0 =
            (0xf5 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (3 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    21 as libc::c_int |
                (2 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 9 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    9 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 9 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_37).words.w1 =
            (7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    20 as libc::c_int |
                ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    18 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    14 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    10 as libc::c_int |
                ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    4 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh209 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_38: *mut Gfx = fresh209;
        (*_g_38).words.w0 =
            (0xe6 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_38).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh210 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_39: *mut Gfx = fresh210;
        (*_g_39).words.w0 =
            (0xf3 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_39).words.w1 =
            (7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((if ((64 as libc::c_int * 16 as libc::c_int +
                           0 as libc::c_int >> 0 as libc::c_int) -
                          1 as libc::c_int) < 2047 as libc::c_int {
                      (64 as libc::c_int * 16 as libc::c_int +
                           0 as libc::c_int >> 0 as libc::c_int) -
                          1 as libc::c_int
                  } else { 2047 as libc::c_int }) as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (((((1 as libc::c_int) << 11 as libc::c_int) +
                       (if 1 as libc::c_int >
                               64 as libc::c_int * 2 as libc::c_int /
                                   8 as libc::c_int {
                            1 as libc::c_int
                        } else {
                            (64 as libc::c_int * 2 as libc::c_int) /
                                8 as libc::c_int
                        }) - 1 as libc::c_int) /
                      (if 1 as libc::c_int >
                              64 as libc::c_int * 2 as libc::c_int /
                                  8 as libc::c_int {
                           1 as libc::c_int
                       } else {
                           (64 as libc::c_int * 2 as libc::c_int) /
                               8 as libc::c_int
                       })) as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh211 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_40: *mut Gfx = fresh211;
        (*_g_40).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_40).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh212 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_41: *mut Gfx = fresh212;
        (*_g_41).words.w0 =
            (0xf5 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (3 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    21 as libc::c_int |
                (2 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((64 as libc::c_int * 2 as libc::c_int + 7 as libc::c_int >>
                      3 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 9 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    9 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 9 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_41).words.w1 =
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    20 as libc::c_int |
                ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    18 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    14 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    10 as libc::c_int |
                ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    4 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh213 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_42: *mut Gfx = fresh213;
        (*_g_42).words.w0 =
            (0xf2 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_42).words.w1 =
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (((64 as libc::c_int - 1 as libc::c_int) << 2 as libc::c_int)
                     as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (((16 as libc::c_int - 1 as libc::c_int) << 2 as libc::c_int)
                     as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh214 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_43: *mut Gfx = fresh214;
        (*_g_43).words.w0 =
            (0x7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (if 0 as libc::c_int == 0 as libc::c_int {
                     (((0 as libc::c_int * 2 as libc::c_int) as u32_0 &
                           (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          16 as libc::c_int |
                          ((2 as libc::c_int * 2 as libc::c_int) as u32_0 &
                               (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              8 as libc::c_int) |
                         ((3 as libc::c_int * 2 as libc::c_int) as u32_0 &
                              (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             0 as libc::c_int
                 } else {
                     (if 0 as libc::c_int == 1 as libc::c_int {
                          (((2 as libc::c_int * 2 as libc::c_int) as u32_0 &
                                (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                     1 as libc::c_int) as libc::c_uint) <<
                               16 as libc::c_int |
                               ((3 as libc::c_int * 2 as libc::c_int) as u32_0
                                    &
                                    (((0x1 as libc::c_int) <<
                                          8 as libc::c_int) -
                                         1 as libc::c_int) as libc::c_uint) <<
                                   8 as libc::c_int) |
                              ((1 as libc::c_int * 2 as libc::c_int) as u32_0
                                   &
                                   (((0x1 as libc::c_int) << 8 as libc::c_int)
                                        - 1 as libc::c_int) as libc::c_uint)
                                  << 0 as libc::c_int
                      } else {
                          (if 0 as libc::c_int == 2 as libc::c_int {
                               (((3 as libc::c_int * 2 as libc::c_int) as
                                     u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 16 as libc::c_int |
                                    ((1 as libc::c_int * 2 as libc::c_int) as
                                         u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        8 as libc::c_int) |
                                   ((0 as libc::c_int * 2 as libc::c_int) as
                                        u32_0 &
                                        (((0x1 as libc::c_int) <<
                                              8 as libc::c_int) -
                                             1 as libc::c_int) as
                                            libc::c_uint) << 0 as libc::c_int
                           } else {
                               (((1 as libc::c_int * 2 as libc::c_int) as
                                     u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 16 as libc::c_int |
                                    ((0 as libc::c_int * 2 as libc::c_int) as
                                         u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        8 as libc::c_int) |
                                   ((2 as libc::c_int * 2 as libc::c_int) as
                                        u32_0 &
                                        (((0x1 as libc::c_int) <<
                                              8 as libc::c_int) -
                                             1 as libc::c_int) as
                                            libc::c_uint) << 0 as libc::c_int
                           })
                      })
                 });
        (*_g_43).words.w1 =
            if 0 as libc::c_int == 0 as libc::c_int {
                (((0 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     16 as libc::c_int |
                     ((3 as libc::c_int * 2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         8 as libc::c_int) |
                    ((1 as libc::c_int * 2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
            } else if 0 as libc::c_int == 1 as libc::c_int {
                (((2 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     16 as libc::c_int |
                     ((1 as libc::c_int * 2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         8 as libc::c_int) |
                    ((0 as libc::c_int * 2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
            } else if 0 as libc::c_int == 2 as libc::c_int {
                (((3 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     16 as libc::c_int |
                     ((0 as libc::c_int * 2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         8 as libc::c_int) |
                    ((2 as libc::c_int * 2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
            } else {
                (((1 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     16 as libc::c_int |
                     ((2 as libc::c_int * 2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         8 as libc::c_int) |
                    ((3 as libc::c_int * 2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
            };
        // draw file name box
        let fresh215 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_44: *mut Gfx = fresh215;
        (*_g_44).words.w0 =
            (0xfa as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_44).words.w1 =
            (sWindowContentColors[isActive as
                                      usize][0 as libc::c_int as usize] as
                 u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (sWindowContentColors[isActive as
                                          usize][1 as libc::c_int as usize] as
                     u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (sWindowContentColors[isActive as
                                          usize][2 as libc::c_int as usize] as
                     u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                ((*this).nameBoxAlpha[i as usize] as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh216 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_45: *mut Gfx = fresh216;
        (*_g_45).words.w0 =
            (0xfd as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (3 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    21 as libc::c_int |
                (2 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((1 as libc::c_int - 1 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_45).words.w1 = gFileSelNameBoxTex.as_mut_ptr() as libc::c_uint;
        let fresh217 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_46: *mut Gfx = fresh217;
        (*_g_46).words.w0 =
            (0xf5 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (3 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    21 as libc::c_int |
                (2 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 9 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    9 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 9 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_46).words.w1 =
            (7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    20 as libc::c_int |
                ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    18 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    14 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    10 as libc::c_int |
                ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    4 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh218 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_47: *mut Gfx = fresh218;
        (*_g_47).words.w0 =
            (0xe6 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_47).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh219 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_48: *mut Gfx = fresh219;
        (*_g_48).words.w0 =
            (0xf3 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_48).words.w1 =
            (7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((if ((108 as libc::c_int * 16 as libc::c_int +
                           0 as libc::c_int >> 0 as libc::c_int) -
                          1 as libc::c_int) < 2047 as libc::c_int {
                      (108 as libc::c_int * 16 as libc::c_int +
                           0 as libc::c_int >> 0 as libc::c_int) -
                          1 as libc::c_int
                  } else { 2047 as libc::c_int }) as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (((((1 as libc::c_int) << 11 as libc::c_int) +
                       (if 1 as libc::c_int >
                               108 as libc::c_int * 2 as libc::c_int /
                                   8 as libc::c_int {
                            1 as libc::c_int
                        } else {
                            (108 as libc::c_int * 2 as libc::c_int) /
                                8 as libc::c_int
                        }) - 1 as libc::c_int) /
                      (if 1 as libc::c_int >
                              108 as libc::c_int * 2 as libc::c_int /
                                  8 as libc::c_int {
                           1 as libc::c_int
                       } else {
                           (108 as libc::c_int * 2 as libc::c_int) /
                               8 as libc::c_int
                       })) as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh220 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_49: *mut Gfx = fresh220;
        (*_g_49).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_49).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh221 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_50: *mut Gfx = fresh221;
        (*_g_50).words.w0 =
            (0xf5 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (3 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    21 as libc::c_int |
                (2 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((108 as libc::c_int * 2 as libc::c_int + 7 as libc::c_int >>
                      3 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 9 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    9 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 9 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_50).words.w1 =
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    20 as libc::c_int |
                ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    18 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    14 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    10 as libc::c_int |
                ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    4 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh222 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_51: *mut Gfx = fresh222;
        (*_g_51).words.w0 =
            (0xf2 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_51).words.w1 =
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (((108 as libc::c_int - 1 as libc::c_int) << 2 as libc::c_int)
                     as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (((16 as libc::c_int - 1 as libc::c_int) << 2 as libc::c_int)
                     as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh223 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_52: *mut Gfx = fresh223;
        (*_g_52).words.w0 =
            (0x7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (if 0 as libc::c_int == 0 as libc::c_int {
                     (((4 as libc::c_int * 2 as libc::c_int) as u32_0 &
                           (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          16 as libc::c_int |
                          ((6 as libc::c_int * 2 as libc::c_int) as u32_0 &
                               (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              8 as libc::c_int) |
                         ((7 as libc::c_int * 2 as libc::c_int) as u32_0 &
                              (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             0 as libc::c_int
                 } else {
                     (if 0 as libc::c_int == 1 as libc::c_int {
                          (((6 as libc::c_int * 2 as libc::c_int) as u32_0 &
                                (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                     1 as libc::c_int) as libc::c_uint) <<
                               16 as libc::c_int |
                               ((7 as libc::c_int * 2 as libc::c_int) as u32_0
                                    &
                                    (((0x1 as libc::c_int) <<
                                          8 as libc::c_int) -
                                         1 as libc::c_int) as libc::c_uint) <<
                                   8 as libc::c_int) |
                              ((5 as libc::c_int * 2 as libc::c_int) as u32_0
                                   &
                                   (((0x1 as libc::c_int) << 8 as libc::c_int)
                                        - 1 as libc::c_int) as libc::c_uint)
                                  << 0 as libc::c_int
                      } else {
                          (if 0 as libc::c_int == 2 as libc::c_int {
                               (((7 as libc::c_int * 2 as libc::c_int) as
                                     u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 16 as libc::c_int |
                                    ((5 as libc::c_int * 2 as libc::c_int) as
                                         u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        8 as libc::c_int) |
                                   ((4 as libc::c_int * 2 as libc::c_int) as
                                        u32_0 &
                                        (((0x1 as libc::c_int) <<
                                              8 as libc::c_int) -
                                             1 as libc::c_int) as
                                            libc::c_uint) << 0 as libc::c_int
                           } else {
                               (((5 as libc::c_int * 2 as libc::c_int) as
                                     u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 16 as libc::c_int |
                                    ((4 as libc::c_int * 2 as libc::c_int) as
                                         u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        8 as libc::c_int) |
                                   ((6 as libc::c_int * 2 as libc::c_int) as
                                        u32_0 &
                                        (((0x1 as libc::c_int) <<
                                              8 as libc::c_int) -
                                             1 as libc::c_int) as
                                            libc::c_uint) << 0 as libc::c_int
                           })
                      })
                 });
        (*_g_52).words.w1 =
            if 0 as libc::c_int == 0 as libc::c_int {
                (((4 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     16 as libc::c_int |
                     ((7 as libc::c_int * 2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         8 as libc::c_int) |
                    ((5 as libc::c_int * 2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
            } else if 0 as libc::c_int == 1 as libc::c_int {
                (((6 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     16 as libc::c_int |
                     ((5 as libc::c_int * 2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         8 as libc::c_int) |
                    ((4 as libc::c_int * 2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
            } else if 0 as libc::c_int == 2 as libc::c_int {
                (((7 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     16 as libc::c_int |
                     ((4 as libc::c_int * 2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         8 as libc::c_int) |
                    ((6 as libc::c_int * 2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
            } else {
                (((5 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     16 as libc::c_int |
                     ((6 as libc::c_int * 2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         8 as libc::c_int) |
                    ((7 as libc::c_int * 2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
            };
        // draw disk label for 64DD
        if (*this).n64ddFlags[i as usize] != 0 {
            let fresh224 = (*__gfxCtx).polyOpa.p;
            (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
            let mut _g_53: *mut Gfx = fresh224;
            (*_g_53).words.w0 =
                (0xfa as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_53).words.w1 =
                (sWindowContentColors[isActive as
                                          usize][0 as libc::c_int as usize] as
                     u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (sWindowContentColors[isActive as
                                              usize][1 as libc::c_int as
                                                         usize] as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (sWindowContentColors[isActive as
                                              usize][2 as libc::c_int as
                                                         usize] as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    ((*this).nameAlpha[i as usize] as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh225 = (*__gfxCtx).polyOpa.p;
            (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
            let mut _g_54: *mut Gfx = fresh225;
            (*_g_54).words.w0 =
                (0xfd as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (3 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        21 as libc::c_int |
                    (2 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    ((1 as libc::c_int - 1 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_54).words.w1 =
                gFileSelDISKButtonTex.as_mut_ptr() as libc::c_uint;
            let fresh226 = (*__gfxCtx).polyOpa.p;
            (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
            let mut _g_55: *mut Gfx = fresh226;
            (*_g_55).words.w0 =
                (0xf5 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (3 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        21 as libc::c_int |
                    (2 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 9 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        9 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 9 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_55).words.w1 =
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        20 as libc::c_int |
                    ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        18 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        14 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        10 as libc::c_int |
                    ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        4 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh227 = (*__gfxCtx).polyOpa.p;
            (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
            let mut _g_56: *mut Gfx = fresh227;
            (*_g_56).words.w0 =
                (0xe6 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_56).words.w1 = 0 as libc::c_int as libc::c_uint;
            let fresh228 = (*__gfxCtx).polyOpa.p;
            (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
            let mut _g_57: *mut Gfx = fresh228;
            (*_g_57).words.w0 =
                (0xf3 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_57).words.w1 =
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((if ((44 as libc::c_int * 16 as libc::c_int +
                               0 as libc::c_int >> 0 as libc::c_int) -
                              1 as libc::c_int) < 2047 as libc::c_int {
                          (44 as libc::c_int * 16 as libc::c_int +
                               0 as libc::c_int >> 0 as libc::c_int) -
                              1 as libc::c_int
                      } else { 2047 as libc::c_int }) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (((((1 as libc::c_int) << 11 as libc::c_int) +
                           (if 1 as libc::c_int >
                                   44 as libc::c_int * 2 as libc::c_int /
                                       8 as libc::c_int {
                                1 as libc::c_int
                            } else {
                                (44 as libc::c_int * 2 as libc::c_int) /
                                    8 as libc::c_int
                            }) - 1 as libc::c_int) /
                          (if 1 as libc::c_int >
                                  44 as libc::c_int * 2 as libc::c_int /
                                      8 as libc::c_int {
                               1 as libc::c_int
                           } else {
                               (44 as libc::c_int * 2 as libc::c_int) /
                                   8 as libc::c_int
                           })) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh229 = (*__gfxCtx).polyOpa.p;
            (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
            let mut _g_58: *mut Gfx = fresh229;
            (*_g_58).words.w0 =
                (0xe7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_58).words.w1 = 0 as libc::c_int as libc::c_uint;
            let fresh230 = (*__gfxCtx).polyOpa.p;
            (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
            let mut _g_59: *mut Gfx = fresh230;
            (*_g_59).words.w0 =
                (0xf5 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (3 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        21 as libc::c_int |
                    (2 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    ((44 as libc::c_int * 2 as libc::c_int + 7 as libc::c_int
                          >> 3 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 9 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        9 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 9 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_59).words.w1 =
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        20 as libc::c_int |
                    ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        18 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        14 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        10 as libc::c_int |
                    ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        4 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh231 = (*__gfxCtx).polyOpa.p;
            (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
            let mut _g_60: *mut Gfx = fresh231;
            (*_g_60).words.w0 =
                (0xf2 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_60).words.w1 =
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (((44 as libc::c_int - 1 as libc::c_int) <<
                          2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (((16 as libc::c_int - 1 as libc::c_int) <<
                          2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh232 = (*__gfxCtx).polyOpa.p;
            (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
            let mut _g_61: *mut Gfx = fresh232;
            (*_g_61).words.w0 =
                (0x7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (if 0 as libc::c_int == 0 as libc::c_int {
                         (((8 as libc::c_int * 2 as libc::c_int) as u32_0 &
                               (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              16 as libc::c_int |
                              ((10 as libc::c_int * 2 as libc::c_int) as u32_0
                                   &
                                   (((0x1 as libc::c_int) << 8 as libc::c_int)
                                        - 1 as libc::c_int) as libc::c_uint)
                                  << 8 as libc::c_int) |
                             ((11 as libc::c_int * 2 as libc::c_int) as u32_0
                                  &
                                  (((0x1 as libc::c_int) << 8 as libc::c_int)
                                       - 1 as libc::c_int) as libc::c_uint) <<
                                 0 as libc::c_int
                     } else {
                         (if 0 as libc::c_int == 1 as libc::c_int {
                              (((10 as libc::c_int * 2 as libc::c_int) as
                                    u32_0 &
                                    (((0x1 as libc::c_int) <<
                                          8 as libc::c_int) -
                                         1 as libc::c_int) as libc::c_uint) <<
                                   16 as libc::c_int |
                                   ((11 as libc::c_int * 2 as libc::c_int) as
                                        u32_0 &
                                        (((0x1 as libc::c_int) <<
                                              8 as libc::c_int) -
                                             1 as libc::c_int) as
                                            libc::c_uint) << 8 as libc::c_int)
                                  |
                                  ((9 as libc::c_int * 2 as libc::c_int) as
                                       u32_0 &
                                       (((0x1 as libc::c_int) <<
                                             8 as libc::c_int) -
                                            1 as libc::c_int) as libc::c_uint)
                                      << 0 as libc::c_int
                          } else {
                              (if 0 as libc::c_int == 2 as libc::c_int {
                                   (((11 as libc::c_int * 2 as libc::c_int) as
                                         u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                        ((9 as libc::c_int * 2 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int) |
                                       ((8 as libc::c_int * 2 as libc::c_int)
                                            as u32_0 &
                                            (((0x1 as libc::c_int) <<
                                                  8 as libc::c_int) -
                                                 1 as libc::c_int) as
                                                libc::c_uint) <<
                                           0 as libc::c_int
                               } else {
                                   (((9 as libc::c_int * 2 as libc::c_int) as
                                         u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                        ((8 as libc::c_int * 2 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int) |
                                       ((10 as libc::c_int * 2 as libc::c_int)
                                            as u32_0 &
                                            (((0x1 as libc::c_int) <<
                                                  8 as libc::c_int) -
                                                 1 as libc::c_int) as
                                                libc::c_uint) <<
                                           0 as libc::c_int
                               })
                          })
                     });
            (*_g_61).words.w1 =
                if 0 as libc::c_int == 0 as libc::c_int {
                    (((8 as libc::c_int * 2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         16 as libc::c_int |
                         ((11 as libc::c_int * 2 as libc::c_int) as u32_0 &
                              (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             8 as libc::c_int) |
                        ((9 as libc::c_int * 2 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int
                } else if 0 as libc::c_int == 1 as libc::c_int {
                    (((10 as libc::c_int * 2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         16 as libc::c_int |
                         ((9 as libc::c_int * 2 as libc::c_int) as u32_0 &
                              (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             8 as libc::c_int) |
                        ((8 as libc::c_int * 2 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int
                } else if 0 as libc::c_int == 2 as libc::c_int {
                    (((11 as libc::c_int * 2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         16 as libc::c_int |
                         ((8 as libc::c_int * 2 as libc::c_int) as u32_0 &
                              (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             8 as libc::c_int) |
                        ((10 as libc::c_int * 2 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int
                } else {
                    (((9 as libc::c_int * 2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         16 as libc::c_int |
                         ((10 as libc::c_int * 2 as libc::c_int) as u32_0 &
                              (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             8 as libc::c_int) |
                        ((11 as libc::c_int * 2 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int
                }
        }
        // draw connectors
        let fresh233 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_62: *mut Gfx = fresh233;
        (*_g_62).words.w0 =
            (0xfa as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_62).words.w1 =
            (sWindowContentColors[isActive as
                                      usize][0 as libc::c_int as usize] as
                 u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (sWindowContentColors[isActive as
                                          usize][1 as libc::c_int as usize] as
                     u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (sWindowContentColors[isActive as
                                          usize][2 as libc::c_int as usize] as
                     u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                ((*this).connectorAlpha[i as usize] as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh234 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_63: *mut Gfx = fresh234;
        (*_g_63).words.w0 =
            (0xfd as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (3 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    21 as libc::c_int |
                (2 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((1 as libc::c_int - 1 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_63).words.w1 = gFileSelConnectorTex.as_mut_ptr() as libc::c_uint;
        let fresh235 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_64: *mut Gfx = fresh235;
        (*_g_64).words.w0 =
            (0xf5 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (3 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    21 as libc::c_int |
                (2 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 9 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    9 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 9 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_64).words.w1 =
            (7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    20 as libc::c_int |
                ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    18 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    14 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    10 as libc::c_int |
                ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    4 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh236 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_65: *mut Gfx = fresh236;
        (*_g_65).words.w0 =
            (0xe6 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_65).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh237 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_66: *mut Gfx = fresh237;
        (*_g_66).words.w0 =
            (0xf3 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_66).words.w1 =
            (7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((if ((24 as libc::c_int * 16 as libc::c_int +
                           1 as libc::c_int >> 1 as libc::c_int) -
                          1 as libc::c_int) < 2047 as libc::c_int {
                      (24 as libc::c_int * 16 as libc::c_int +
                           1 as libc::c_int >> 1 as libc::c_int) -
                          1 as libc::c_int
                  } else { 2047 as libc::c_int }) as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (((((1 as libc::c_int) << 11 as libc::c_int) +
                       (if 1 as libc::c_int >
                               24 as libc::c_int * 1 as libc::c_int /
                                   8 as libc::c_int {
                            1 as libc::c_int
                        } else {
                            (24 as libc::c_int * 1 as libc::c_int) /
                                8 as libc::c_int
                        }) - 1 as libc::c_int) /
                      (if 1 as libc::c_int >
                              24 as libc::c_int * 1 as libc::c_int /
                                  8 as libc::c_int {
                           1 as libc::c_int
                       } else {
                           (24 as libc::c_int * 1 as libc::c_int) /
                               8 as libc::c_int
                       })) as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh238 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_67: *mut Gfx = fresh238;
        (*_g_67).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_67).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh239 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_68: *mut Gfx = fresh239;
        (*_g_68).words.w0 =
            (0xf5 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (3 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    21 as libc::c_int |
                (1 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((24 as libc::c_int * 1 as libc::c_int + 7 as libc::c_int >>
                      3 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 9 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    9 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 9 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_68).words.w1 =
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    20 as libc::c_int |
                ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    18 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    14 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    10 as libc::c_int |
                ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    4 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh240 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_69: *mut Gfx = fresh240;
        (*_g_69).words.w0 =
            (0xf2 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_69).words.w1 =
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (((24 as libc::c_int - 1 as libc::c_int) << 2 as libc::c_int)
                     as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (((16 as libc::c_int - 1 as libc::c_int) << 2 as libc::c_int)
                     as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh241 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_70: *mut Gfx = fresh241;
        (*_g_70).words.w0 =
            (0x7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (if 0 as libc::c_int == 0 as libc::c_int {
                     (((12 as libc::c_int * 2 as libc::c_int) as u32_0 &
                           (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          16 as libc::c_int |
                          ((14 as libc::c_int * 2 as libc::c_int) as u32_0 &
                               (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              8 as libc::c_int) |
                         ((15 as libc::c_int * 2 as libc::c_int) as u32_0 &
                              (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             0 as libc::c_int
                 } else {
                     (if 0 as libc::c_int == 1 as libc::c_int {
                          (((14 as libc::c_int * 2 as libc::c_int) as u32_0 &
                                (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                     1 as libc::c_int) as libc::c_uint) <<
                               16 as libc::c_int |
                               ((15 as libc::c_int * 2 as libc::c_int) as
                                    u32_0 &
                                    (((0x1 as libc::c_int) <<
                                          8 as libc::c_int) -
                                         1 as libc::c_int) as libc::c_uint) <<
                                   8 as libc::c_int) |
                              ((13 as libc::c_int * 2 as libc::c_int) as u32_0
                                   &
                                   (((0x1 as libc::c_int) << 8 as libc::c_int)
                                        - 1 as libc::c_int) as libc::c_uint)
                                  << 0 as libc::c_int
                      } else {
                          (if 0 as libc::c_int == 2 as libc::c_int {
                               (((15 as libc::c_int * 2 as libc::c_int) as
                                     u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 16 as libc::c_int |
                                    ((13 as libc::c_int * 2 as libc::c_int) as
                                         u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        8 as libc::c_int) |
                                   ((12 as libc::c_int * 2 as libc::c_int) as
                                        u32_0 &
                                        (((0x1 as libc::c_int) <<
                                              8 as libc::c_int) -
                                             1 as libc::c_int) as
                                            libc::c_uint) << 0 as libc::c_int
                           } else {
                               (((13 as libc::c_int * 2 as libc::c_int) as
                                     u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 16 as libc::c_int |
                                    ((12 as libc::c_int * 2 as libc::c_int) as
                                         u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        8 as libc::c_int) |
                                   ((14 as libc::c_int * 2 as libc::c_int) as
                                        u32_0 &
                                        (((0x1 as libc::c_int) <<
                                              8 as libc::c_int) -
                                             1 as libc::c_int) as
                                            libc::c_uint) << 0 as libc::c_int
                           })
                      })
                 });
        (*_g_70).words.w1 =
            if 0 as libc::c_int == 0 as libc::c_int {
                (((12 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     16 as libc::c_int |
                     ((15 as libc::c_int * 2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         8 as libc::c_int) |
                    ((13 as libc::c_int * 2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
            } else if 0 as libc::c_int == 1 as libc::c_int {
                (((14 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     16 as libc::c_int |
                     ((13 as libc::c_int * 2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         8 as libc::c_int) |
                    ((12 as libc::c_int * 2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
            } else if 0 as libc::c_int == 2 as libc::c_int {
                (((15 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     16 as libc::c_int |
                     ((12 as libc::c_int * 2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         8 as libc::c_int) |
                    ((14 as libc::c_int * 2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
            } else {
                (((13 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     16 as libc::c_int |
                     ((14 as libc::c_int * 2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         8 as libc::c_int) |
                    ((15 as libc::c_int * 2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
            };
        if (*this).n64ddFlags[i as usize] != 0 {
            let fresh242 = (*__gfxCtx).polyOpa.p;
            (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
            let mut _g_71: *mut Gfx = fresh242;
            (*_g_71).words.w0 =
                (0x7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (if 0 as libc::c_int == 0 as libc::c_int {
                         (((16 as libc::c_int * 2 as libc::c_int) as u32_0 &
                               (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              16 as libc::c_int |
                              ((18 as libc::c_int * 2 as libc::c_int) as u32_0
                                   &
                                   (((0x1 as libc::c_int) << 8 as libc::c_int)
                                        - 1 as libc::c_int) as libc::c_uint)
                                  << 8 as libc::c_int) |
                             ((19 as libc::c_int * 2 as libc::c_int) as u32_0
                                  &
                                  (((0x1 as libc::c_int) << 8 as libc::c_int)
                                       - 1 as libc::c_int) as libc::c_uint) <<
                                 0 as libc::c_int
                     } else {
                         (if 0 as libc::c_int == 1 as libc::c_int {
                              (((18 as libc::c_int * 2 as libc::c_int) as
                                    u32_0 &
                                    (((0x1 as libc::c_int) <<
                                          8 as libc::c_int) -
                                         1 as libc::c_int) as libc::c_uint) <<
                                   16 as libc::c_int |
                                   ((19 as libc::c_int * 2 as libc::c_int) as
                                        u32_0 &
                                        (((0x1 as libc::c_int) <<
                                              8 as libc::c_int) -
                                             1 as libc::c_int) as
                                            libc::c_uint) << 8 as libc::c_int)
                                  |
                                  ((17 as libc::c_int * 2 as libc::c_int) as
                                       u32_0 &
                                       (((0x1 as libc::c_int) <<
                                             8 as libc::c_int) -
                                            1 as libc::c_int) as libc::c_uint)
                                      << 0 as libc::c_int
                          } else {
                              (if 0 as libc::c_int == 2 as libc::c_int {
                                   (((19 as libc::c_int * 2 as libc::c_int) as
                                         u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                        ((17 as libc::c_int *
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int) |
                                       ((16 as libc::c_int * 2 as libc::c_int)
                                            as u32_0 &
                                            (((0x1 as libc::c_int) <<
                                                  8 as libc::c_int) -
                                                 1 as libc::c_int) as
                                                libc::c_uint) <<
                                           0 as libc::c_int
                               } else {
                                   (((17 as libc::c_int * 2 as libc::c_int) as
                                         u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                        ((16 as libc::c_int *
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int) |
                                       ((18 as libc::c_int * 2 as libc::c_int)
                                            as u32_0 &
                                            (((0x1 as libc::c_int) <<
                                                  8 as libc::c_int) -
                                                 1 as libc::c_int) as
                                                libc::c_uint) <<
                                           0 as libc::c_int
                               })
                          })
                     });
            (*_g_71).words.w1 =
                if 0 as libc::c_int == 0 as libc::c_int {
                    (((16 as libc::c_int * 2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         16 as libc::c_int |
                         ((19 as libc::c_int * 2 as libc::c_int) as u32_0 &
                              (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             8 as libc::c_int) |
                        ((17 as libc::c_int * 2 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int
                } else if 0 as libc::c_int == 1 as libc::c_int {
                    (((18 as libc::c_int * 2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         16 as libc::c_int |
                         ((17 as libc::c_int * 2 as libc::c_int) as u32_0 &
                              (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             8 as libc::c_int) |
                        ((16 as libc::c_int * 2 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int
                } else if 0 as libc::c_int == 2 as libc::c_int {
                    (((19 as libc::c_int * 2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         16 as libc::c_int |
                         ((16 as libc::c_int * 2 as libc::c_int) as u32_0 &
                              (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             8 as libc::c_int) |
                        ((18 as libc::c_int * 2 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int
                } else {
                    (((17 as libc::c_int * 2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         16 as libc::c_int |
                         ((18 as libc::c_int * 2 as libc::c_int) as u32_0 &
                              (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             8 as libc::c_int) |
                        ((19 as libc::c_int * 2 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int
                }
        }
        i += 1;
        temp = (temp as libc::c_int + 20 as libc::c_int) as s16
    }
    // draw file info
    fileIndex = 0 as libc::c_int as s16;
    while (fileIndex as libc::c_int) < 3 as libc::c_int {
        isActive =
            if (*this).n64ddFlag as libc::c_int ==
                   (*this).n64ddFlags[fileIndex as usize] as libc::c_int ||
                   (*this).nameBoxAlpha[fileIndex as usize] as libc::c_int ==
                       0 as libc::c_int {
                0 as libc::c_int
            } else { 1 as libc::c_int } as s16;
        FileChoose_DrawFileInfo(&mut (*this).state, fileIndex, isActive);
        fileIndex += 1
    }
    let fresh243 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_72: *mut Gfx = fresh243;
    (*_g_72).words.w0 =
        (0xe7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_72).words.w1 = 0 as libc::c_int as libc::c_uint;
    let fresh244 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_73: *mut Gfx = fresh244;
    (*_g_73).words.w0 =
        (0xfc as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (((3 as libc::c_int as u32_0 &
                   (((0x1 as libc::c_int) << 4 as libc::c_int) -
                        1 as libc::c_int) as libc::c_uint) <<
                  20 as libc::c_int |
                  (1 as libc::c_int as u32_0 &
                       (((0x1 as libc::c_int) << 5 as libc::c_int) -
                            1 as libc::c_int) as libc::c_uint) <<
                      15 as libc::c_int |
                  (1 as libc::c_int as u32_0 &
                       (((0x1 as libc::c_int) << 3 as libc::c_int) -
                            1 as libc::c_int) as libc::c_uint) <<
                      12 as libc::c_int |
                  (3 as libc::c_int as u32_0 &
                       (((0x1 as libc::c_int) << 3 as libc::c_int) -
                            1 as libc::c_int) as libc::c_uint) <<
                      9 as libc::c_int |
                  ((3 as libc::c_int as u32_0 &
                        (((0x1 as libc::c_int) << 4 as libc::c_int) -
                             1 as libc::c_int) as libc::c_uint) <<
                       5 as libc::c_int |
                       (1 as libc::c_int as u32_0 &
                            (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                 1 as libc::c_int) as libc::c_uint) <<
                           0 as libc::c_int)) &
                 (((0x1 as libc::c_int) << 24 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_73).words.w1 =
        (5 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 4 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 28 as libc::c_int |
            (5 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 15 as libc::c_int
            |
            (7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 9 as libc::c_int |
            ((5 as libc::c_int as u32_0 &
                  (((0x1 as libc::c_int) << 4 as libc::c_int) -
                       1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                 |
                 (1 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 3 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     21 as libc::c_int |
                 (3 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 3 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     18 as libc::c_int |
                 (5 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 3 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     6 as libc::c_int |
                 (7 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 3 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     3 as libc::c_int |
                 (7 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 3 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     0 as libc::c_int);
    let fresh245 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_74: *mut Gfx = fresh245;
    (*_g_74).words.w0 =
        (0xfb as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_74).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh246 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_75: *mut Gfx = fresh246;
    (*_g_75).words.w0 =
        (0x1 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (20 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            ((0 as libc::c_int + 20 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 7 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 1 as libc::c_int;
    (*_g_75).words.w1 =
        &mut *(*this).windowContentVtx.offset(0x274 as libc::c_int as isize)
            as *mut Vtx as libc::c_uint;
    // draw primary action buttons (copy/erase)
    quadVtxIndex = 0 as libc::c_int as s16;
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) < 2 as libc::c_int {
        let fresh247 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_76: *mut Gfx = fresh247;
        (*_g_76).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_76).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh248 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_77: *mut Gfx = fresh248;
        (*_g_77).words.w0 =
            (0xfa as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_77).words.w1 =
            ((*this).windowColor[0 as libc::c_int as usize] as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((*this).windowColor[1 as libc::c_int as usize] as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                ((*this).windowColor[2 as libc::c_int as usize] as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                ((*this).actionButtonAlpha[i as usize] as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh249 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_78: *mut Gfx = fresh249;
        (*_g_78).words.w0 =
            (0xfd as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (3 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    21 as libc::c_int |
                (2 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((1 as libc::c_int - 1 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_78).words.w1 =
            sActionButtonTextures[gSaveContext.language as usize][i as usize]
                as libc::c_uint;
        let fresh250 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_79: *mut Gfx = fresh250;
        (*_g_79).words.w0 =
            (0xf5 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (3 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    21 as libc::c_int |
                (2 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 9 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    9 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 9 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_79).words.w1 =
            (7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    20 as libc::c_int |
                ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    18 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    14 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    10 as libc::c_int |
                ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    4 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh251 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_80: *mut Gfx = fresh251;
        (*_g_80).words.w0 =
            (0xe6 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_80).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh252 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_81: *mut Gfx = fresh252;
        (*_g_81).words.w0 =
            (0xf3 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_81).words.w1 =
            (7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((if ((64 as libc::c_int * 16 as libc::c_int +
                           0 as libc::c_int >> 0 as libc::c_int) -
                          1 as libc::c_int) < 2047 as libc::c_int {
                      (64 as libc::c_int * 16 as libc::c_int +
                           0 as libc::c_int >> 0 as libc::c_int) -
                          1 as libc::c_int
                  } else { 2047 as libc::c_int }) as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (((((1 as libc::c_int) << 11 as libc::c_int) +
                       (if 1 as libc::c_int >
                               64 as libc::c_int * 2 as libc::c_int /
                                   8 as libc::c_int {
                            1 as libc::c_int
                        } else {
                            (64 as libc::c_int * 2 as libc::c_int) /
                                8 as libc::c_int
                        }) - 1 as libc::c_int) /
                      (if 1 as libc::c_int >
                              64 as libc::c_int * 2 as libc::c_int /
                                  8 as libc::c_int {
                           1 as libc::c_int
                       } else {
                           (64 as libc::c_int * 2 as libc::c_int) /
                               8 as libc::c_int
                       })) as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh253 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_82: *mut Gfx = fresh253;
        (*_g_82).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_82).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh254 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_83: *mut Gfx = fresh254;
        (*_g_83).words.w0 =
            (0xf5 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (3 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    21 as libc::c_int |
                (2 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((64 as libc::c_int * 2 as libc::c_int + 7 as libc::c_int >>
                      3 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 9 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    9 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 9 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_83).words.w1 =
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    20 as libc::c_int |
                ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    18 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    14 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    10 as libc::c_int |
                ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    4 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh255 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_84: *mut Gfx = fresh255;
        (*_g_84).words.w0 =
            (0xf2 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_84).words.w1 =
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (((64 as libc::c_int - 1 as libc::c_int) << 2 as libc::c_int)
                     as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (((16 as libc::c_int - 1 as libc::c_int) << 2 as libc::c_int)
                     as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh256 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_85: *mut Gfx = fresh256;
        (*_g_85).words.w0 =
            (0x7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (if 0 as libc::c_int == 0 as libc::c_int {
                     (((quadVtxIndex as libc::c_int * 2 as libc::c_int) as
                           u32_0 &
                           (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          16 as libc::c_int |
                          (((quadVtxIndex as libc::c_int + 2 as libc::c_int) *
                                2 as libc::c_int) as u32_0 &
                               (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              8 as libc::c_int) |
                         (((quadVtxIndex as libc::c_int + 3 as libc::c_int) *
                               2 as libc::c_int) as u32_0 &
                              (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             0 as libc::c_int
                 } else {
                     (if 0 as libc::c_int == 1 as libc::c_int {
                          ((((quadVtxIndex as libc::c_int + 2 as libc::c_int)
                                 * 2 as libc::c_int) as u32_0 &
                                (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                     1 as libc::c_int) as libc::c_uint) <<
                               16 as libc::c_int |
                               (((quadVtxIndex as libc::c_int +
                                      3 as libc::c_int) * 2 as libc::c_int) as
                                    u32_0 &
                                    (((0x1 as libc::c_int) <<
                                          8 as libc::c_int) -
                                         1 as libc::c_int) as libc::c_uint) <<
                                   8 as libc::c_int) |
                              (((quadVtxIndex as libc::c_int +
                                     1 as libc::c_int) * 2 as libc::c_int) as
                                   u32_0 &
                                   (((0x1 as libc::c_int) << 8 as libc::c_int)
                                        - 1 as libc::c_int) as libc::c_uint)
                                  << 0 as libc::c_int
                      } else {
                          (if 0 as libc::c_int == 2 as libc::c_int {
                               ((((quadVtxIndex as libc::c_int +
                                       3 as libc::c_int) * 2 as libc::c_int)
                                     as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 16 as libc::c_int |
                                    (((quadVtxIndex as libc::c_int +
                                           1 as libc::c_int) *
                                          2 as libc::c_int) as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        8 as libc::c_int) |
                                   ((quadVtxIndex as libc::c_int *
                                         2 as libc::c_int) as u32_0 &
                                        (((0x1 as libc::c_int) <<
                                              8 as libc::c_int) -
                                             1 as libc::c_int) as
                                            libc::c_uint) << 0 as libc::c_int
                           } else {
                               ((((quadVtxIndex as libc::c_int +
                                       1 as libc::c_int) * 2 as libc::c_int)
                                     as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 16 as libc::c_int |
                                    ((quadVtxIndex as libc::c_int *
                                          2 as libc::c_int) as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        8 as libc::c_int) |
                                   (((quadVtxIndex as libc::c_int +
                                          2 as libc::c_int) *
                                         2 as libc::c_int) as u32_0 &
                                        (((0x1 as libc::c_int) <<
                                              8 as libc::c_int) -
                                             1 as libc::c_int) as
                                            libc::c_uint) << 0 as libc::c_int
                           })
                      })
                 });
        (*_g_85).words.w1 =
            if 0 as libc::c_int == 0 as libc::c_int {
                (((quadVtxIndex as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     16 as libc::c_int |
                     (((quadVtxIndex as libc::c_int + 3 as libc::c_int) *
                           2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         8 as libc::c_int) |
                    (((quadVtxIndex as libc::c_int + 1 as libc::c_int) *
                          2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
            } else if 0 as libc::c_int == 1 as libc::c_int {
                ((((quadVtxIndex as libc::c_int + 2 as libc::c_int) *
                       2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     16 as libc::c_int |
                     (((quadVtxIndex as libc::c_int + 1 as libc::c_int) *
                           2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         8 as libc::c_int) |
                    ((quadVtxIndex as libc::c_int * 2 as libc::c_int) as u32_0
                         &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
            } else if 0 as libc::c_int == 2 as libc::c_int {
                ((((quadVtxIndex as libc::c_int + 3 as libc::c_int) *
                       2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     16 as libc::c_int |
                     ((quadVtxIndex as libc::c_int * 2 as libc::c_int) as
                          u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         8 as libc::c_int) |
                    (((quadVtxIndex as libc::c_int + 2 as libc::c_int) *
                          2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
            } else {
                ((((quadVtxIndex as libc::c_int + 1 as libc::c_int) *
                       2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     16 as libc::c_int |
                     (((quadVtxIndex as libc::c_int + 2 as libc::c_int) *
                           2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         8 as libc::c_int) |
                    (((quadVtxIndex as libc::c_int + 3 as libc::c_int) *
                          2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
            };
        i += 1;
        quadVtxIndex = (quadVtxIndex as libc::c_int + 4 as libc::c_int) as s16
    }
    let fresh257 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_86: *mut Gfx = fresh257;
    (*_g_86).words.w0 =
        (0xe7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_86).words.w1 = 0 as libc::c_int as libc::c_uint;
    // draw confirm buttons (yes/quit)
    quadVtxIndex = 0 as libc::c_int as s16;
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) < 2 as libc::c_int {
        temp = (*this).confirmButtonTexIndices[i as usize];
        let fresh258 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_87: *mut Gfx = fresh258;
        (*_g_87).words.w0 =
            (0xfa as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_87).words.w1 =
            ((*this).windowColor[0 as libc::c_int as usize] as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((*this).windowColor[1 as libc::c_int as usize] as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                ((*this).windowColor[2 as libc::c_int as usize] as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                ((*this).confirmButtonAlpha[i as usize] as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh259 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_88: *mut Gfx = fresh259;
        (*_g_88).words.w0 =
            (0xfd as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (3 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    21 as libc::c_int |
                (2 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((1 as libc::c_int - 1 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_88).words.w1 =
            sActionButtonTextures[gSaveContext.language as
                                      usize][temp as usize] as libc::c_uint;
        let fresh260 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_89: *mut Gfx = fresh260;
        (*_g_89).words.w0 =
            (0xf5 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (3 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    21 as libc::c_int |
                (2 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 9 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    9 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 9 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_89).words.w1 =
            (7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    20 as libc::c_int |
                ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    18 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    14 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    10 as libc::c_int |
                ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    4 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh261 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_90: *mut Gfx = fresh261;
        (*_g_90).words.w0 =
            (0xe6 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_90).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh262 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_91: *mut Gfx = fresh262;
        (*_g_91).words.w0 =
            (0xf3 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_91).words.w1 =
            (7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((if ((64 as libc::c_int * 16 as libc::c_int +
                           0 as libc::c_int >> 0 as libc::c_int) -
                          1 as libc::c_int) < 2047 as libc::c_int {
                      (64 as libc::c_int * 16 as libc::c_int +
                           0 as libc::c_int >> 0 as libc::c_int) -
                          1 as libc::c_int
                  } else { 2047 as libc::c_int }) as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (((((1 as libc::c_int) << 11 as libc::c_int) +
                       (if 1 as libc::c_int >
                               64 as libc::c_int * 2 as libc::c_int /
                                   8 as libc::c_int {
                            1 as libc::c_int
                        } else {
                            (64 as libc::c_int * 2 as libc::c_int) /
                                8 as libc::c_int
                        }) - 1 as libc::c_int) /
                      (if 1 as libc::c_int >
                              64 as libc::c_int * 2 as libc::c_int /
                                  8 as libc::c_int {
                           1 as libc::c_int
                       } else {
                           (64 as libc::c_int * 2 as libc::c_int) /
                               8 as libc::c_int
                       })) as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh263 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_92: *mut Gfx = fresh263;
        (*_g_92).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_92).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh264 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_93: *mut Gfx = fresh264;
        (*_g_93).words.w0 =
            (0xf5 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (3 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    21 as libc::c_int |
                (2 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((64 as libc::c_int * 2 as libc::c_int + 7 as libc::c_int >>
                      3 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 9 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    9 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 9 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_93).words.w1 =
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    20 as libc::c_int |
                ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    18 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    14 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    10 as libc::c_int |
                ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    4 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh265 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_94: *mut Gfx = fresh265;
        (*_g_94).words.w0 =
            (0xf2 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_94).words.w1 =
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (((64 as libc::c_int - 1 as libc::c_int) << 2 as libc::c_int)
                     as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (((16 as libc::c_int - 1 as libc::c_int) << 2 as libc::c_int)
                     as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh266 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_95: *mut Gfx = fresh266;
        (*_g_95).words.w0 =
            (0x7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (if 0 as libc::c_int == 0 as libc::c_int {
                     (((quadVtxIndex as libc::c_int * 2 as libc::c_int) as
                           u32_0 &
                           (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          16 as libc::c_int |
                          (((quadVtxIndex as libc::c_int + 2 as libc::c_int) *
                                2 as libc::c_int) as u32_0 &
                               (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              8 as libc::c_int) |
                         (((quadVtxIndex as libc::c_int + 3 as libc::c_int) *
                               2 as libc::c_int) as u32_0 &
                              (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             0 as libc::c_int
                 } else {
                     (if 0 as libc::c_int == 1 as libc::c_int {
                          ((((quadVtxIndex as libc::c_int + 2 as libc::c_int)
                                 * 2 as libc::c_int) as u32_0 &
                                (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                     1 as libc::c_int) as libc::c_uint) <<
                               16 as libc::c_int |
                               (((quadVtxIndex as libc::c_int +
                                      3 as libc::c_int) * 2 as libc::c_int) as
                                    u32_0 &
                                    (((0x1 as libc::c_int) <<
                                          8 as libc::c_int) -
                                         1 as libc::c_int) as libc::c_uint) <<
                                   8 as libc::c_int) |
                              (((quadVtxIndex as libc::c_int +
                                     1 as libc::c_int) * 2 as libc::c_int) as
                                   u32_0 &
                                   (((0x1 as libc::c_int) << 8 as libc::c_int)
                                        - 1 as libc::c_int) as libc::c_uint)
                                  << 0 as libc::c_int
                      } else {
                          (if 0 as libc::c_int == 2 as libc::c_int {
                               ((((quadVtxIndex as libc::c_int +
                                       3 as libc::c_int) * 2 as libc::c_int)
                                     as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 16 as libc::c_int |
                                    (((quadVtxIndex as libc::c_int +
                                           1 as libc::c_int) *
                                          2 as libc::c_int) as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        8 as libc::c_int) |
                                   ((quadVtxIndex as libc::c_int *
                                         2 as libc::c_int) as u32_0 &
                                        (((0x1 as libc::c_int) <<
                                              8 as libc::c_int) -
                                             1 as libc::c_int) as
                                            libc::c_uint) << 0 as libc::c_int
                           } else {
                               ((((quadVtxIndex as libc::c_int +
                                       1 as libc::c_int) * 2 as libc::c_int)
                                     as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 16 as libc::c_int |
                                    ((quadVtxIndex as libc::c_int *
                                          2 as libc::c_int) as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        8 as libc::c_int) |
                                   (((quadVtxIndex as libc::c_int +
                                          2 as libc::c_int) *
                                         2 as libc::c_int) as u32_0 &
                                        (((0x1 as libc::c_int) <<
                                              8 as libc::c_int) -
                                             1 as libc::c_int) as
                                            libc::c_uint) << 0 as libc::c_int
                           })
                      })
                 });
        (*_g_95).words.w1 =
            if 0 as libc::c_int == 0 as libc::c_int {
                (((quadVtxIndex as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     16 as libc::c_int |
                     (((quadVtxIndex as libc::c_int + 3 as libc::c_int) *
                           2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         8 as libc::c_int) |
                    (((quadVtxIndex as libc::c_int + 1 as libc::c_int) *
                          2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
            } else if 0 as libc::c_int == 1 as libc::c_int {
                ((((quadVtxIndex as libc::c_int + 2 as libc::c_int) *
                       2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     16 as libc::c_int |
                     (((quadVtxIndex as libc::c_int + 1 as libc::c_int) *
                           2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         8 as libc::c_int) |
                    ((quadVtxIndex as libc::c_int * 2 as libc::c_int) as u32_0
                         &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
            } else if 0 as libc::c_int == 2 as libc::c_int {
                ((((quadVtxIndex as libc::c_int + 3 as libc::c_int) *
                       2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     16 as libc::c_int |
                     ((quadVtxIndex as libc::c_int * 2 as libc::c_int) as
                          u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         8 as libc::c_int) |
                    (((quadVtxIndex as libc::c_int + 2 as libc::c_int) *
                          2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
            } else {
                ((((quadVtxIndex as libc::c_int + 1 as libc::c_int) *
                       2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     16 as libc::c_int |
                     (((quadVtxIndex as libc::c_int + 2 as libc::c_int) *
                           2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         8 as libc::c_int) |
                    (((quadVtxIndex as libc::c_int + 3 as libc::c_int) *
                          2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
            };
        i += 1;
        quadVtxIndex = (quadVtxIndex as libc::c_int + 4 as libc::c_int) as s16
    }
    // draw options button
    let fresh267 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_96: *mut Gfx = fresh267;
    (*_g_96).words.w0 =
        (0xe7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_96).words.w1 = 0 as libc::c_int as libc::c_uint;
    let fresh268 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_97: *mut Gfx = fresh268;
    (*_g_97).words.w0 =
        (0xfa as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_97).words.w1 =
        ((*this).windowColor[0 as libc::c_int as usize] as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            ((*this).windowColor[1 as libc::c_int as usize] as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            ((*this).windowColor[2 as libc::c_int as usize] as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            ((*this).optionButtonAlpha as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh269 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_98: *mut Gfx = fresh269;
    (*_g_98).words.w0 =
        (0xfd as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (3 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 21 as libc::c_int
            |
            (2 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            ((1 as libc::c_int - 1 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_98).words.w1 =
        sOptionsButtonTextures[gSaveContext.language as usize] as
            libc::c_uint;
    let fresh270 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_99: *mut Gfx = fresh270;
    (*_g_99).words.w0 =
        (0xf5 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (3 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 21 as libc::c_int
            |
            (2 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 9 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_99).words.w1 =
        (7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 20 as libc::c_int
            |
            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 18 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 14 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 10 as libc::c_int
            |
            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 4 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh271 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_100: *mut Gfx = fresh271;
    (*_g_100).words.w0 =
        (0xe6 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_100).words.w1 = 0 as libc::c_int as libc::c_uint;
    let fresh272 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_101: *mut Gfx = fresh272;
    (*_g_101).words.w0 =
        (0xf3 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_101).words.w1 =
        (7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            ((if ((64 as libc::c_int * 16 as libc::c_int + 0 as libc::c_int >>
                       0 as libc::c_int) - 1 as libc::c_int) <
                     2047 as libc::c_int {
                  (64 as libc::c_int * 16 as libc::c_int + 0 as libc::c_int >>
                       0 as libc::c_int) - 1 as libc::c_int
              } else { 2047 as libc::c_int }) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (((((1 as libc::c_int) << 11 as libc::c_int) +
                   (if 1 as libc::c_int >
                           64 as libc::c_int * 2 as libc::c_int /
                               8 as libc::c_int {
                        1 as libc::c_int
                    } else {
                        (64 as libc::c_int * 2 as libc::c_int) /
                            8 as libc::c_int
                    }) - 1 as libc::c_int) /
                  (if 1 as libc::c_int >
                          64 as libc::c_int * 2 as libc::c_int /
                              8 as libc::c_int {
                       1 as libc::c_int
                   } else {
                       (64 as libc::c_int * 2 as libc::c_int) /
                           8 as libc::c_int
                   })) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh273 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_102: *mut Gfx = fresh273;
    (*_g_102).words.w0 =
        (0xe7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_102).words.w1 = 0 as libc::c_int as libc::c_uint;
    let fresh274 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_103: *mut Gfx = fresh274;
    (*_g_103).words.w0 =
        (0xf5 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (3 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 21 as libc::c_int
            |
            (2 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            ((64 as libc::c_int * 2 as libc::c_int + 7 as libc::c_int >>
                  3 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 9 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_103).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 20 as libc::c_int
            |
            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 18 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 14 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 10 as libc::c_int
            |
            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 4 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh275 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_104: *mut Gfx = fresh275;
    (*_g_104).words.w0 =
        (0xf2 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_104).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (((64 as libc::c_int - 1 as libc::c_int) << 2 as libc::c_int) as
                 u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (((16 as libc::c_int - 1 as libc::c_int) << 2 as libc::c_int) as
                 u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh276 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_105: *mut Gfx = fresh276;
    (*_g_105).words.w0 =
        (0x7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (if 0 as libc::c_int == 0 as libc::c_int {
                 (((8 as libc::c_int * 2 as libc::c_int) as u32_0 &
                       (((0x1 as libc::c_int) << 8 as libc::c_int) -
                            1 as libc::c_int) as libc::c_uint) <<
                      16 as libc::c_int |
                      ((10 as libc::c_int * 2 as libc::c_int) as u32_0 &
                           (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          8 as libc::c_int) |
                     ((11 as libc::c_int * 2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         0 as libc::c_int
             } else {
                 (if 0 as libc::c_int == 1 as libc::c_int {
                      (((10 as libc::c_int * 2 as libc::c_int) as u32_0 &
                            (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                 1 as libc::c_int) as libc::c_uint) <<
                           16 as libc::c_int |
                           ((11 as libc::c_int * 2 as libc::c_int) as u32_0 &
                                (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                     1 as libc::c_int) as libc::c_uint) <<
                               8 as libc::c_int) |
                          ((9 as libc::c_int * 2 as libc::c_int) as u32_0 &
                               (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              0 as libc::c_int
                  } else {
                      (if 0 as libc::c_int == 2 as libc::c_int {
                           (((11 as libc::c_int * 2 as libc::c_int) as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                16 as libc::c_int |
                                ((9 as libc::c_int * 2 as libc::c_int) as
                                     u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 8 as libc::c_int) |
                               ((8 as libc::c_int * 2 as libc::c_int) as u32_0
                                    &
                                    (((0x1 as libc::c_int) <<
                                          8 as libc::c_int) -
                                         1 as libc::c_int) as libc::c_uint) <<
                                   0 as libc::c_int
                       } else {
                           (((9 as libc::c_int * 2 as libc::c_int) as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                16 as libc::c_int |
                                ((8 as libc::c_int * 2 as libc::c_int) as
                                     u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 8 as libc::c_int) |
                               ((10 as libc::c_int * 2 as libc::c_int) as
                                    u32_0 &
                                    (((0x1 as libc::c_int) <<
                                          8 as libc::c_int) -
                                         1 as libc::c_int) as libc::c_uint) <<
                                   0 as libc::c_int
                       })
                  })
             });
    (*_g_105).words.w1 =
        if 0 as libc::c_int == 0 as libc::c_int {
            (((8 as libc::c_int * 2 as libc::c_int) as u32_0 &
                  (((0x1 as libc::c_int) << 8 as libc::c_int) -
                       1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
                 |
                 ((11 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     8 as libc::c_int) |
                ((9 as libc::c_int * 2 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int
        } else if 0 as libc::c_int == 1 as libc::c_int {
            (((10 as libc::c_int * 2 as libc::c_int) as u32_0 &
                  (((0x1 as libc::c_int) << 8 as libc::c_int) -
                       1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
                 |
                 ((9 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     8 as libc::c_int) |
                ((8 as libc::c_int * 2 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int
        } else if 0 as libc::c_int == 2 as libc::c_int {
            (((11 as libc::c_int * 2 as libc::c_int) as u32_0 &
                  (((0x1 as libc::c_int) << 8 as libc::c_int) -
                       1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
                 |
                 ((8 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     8 as libc::c_int) |
                ((10 as libc::c_int * 2 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int
        } else {
            (((9 as libc::c_int * 2 as libc::c_int) as u32_0 &
                  (((0x1 as libc::c_int) << 8 as libc::c_int) -
                       1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
                 |
                 ((10 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     8 as libc::c_int) |
                ((11 as libc::c_int * 2 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int
        };
    // draw highlight over currently selected button
    if (*this).menuMode as libc::c_int == FS_MENU_MODE_CONFIG as libc::c_int
           &&
           ((*this).configMode as libc::c_int == CM_MAIN_MENU as libc::c_int
                ||
                (*this).configMode as libc::c_int ==
                    CM_SELECT_COPY_SOURCE as libc::c_int ||
                (*this).configMode as libc::c_int ==
                    CM_SELECT_COPY_DEST as libc::c_int ||
                (*this).configMode as libc::c_int ==
                    CM_COPY_CONFIRM as libc::c_int ||
                (*this).configMode as libc::c_int ==
                    CM_ERASE_SELECT as libc::c_int ||
                (*this).configMode as libc::c_int ==
                    CM_ERASE_CONFIRM as libc::c_int) ||
           (*this).menuMode as libc::c_int ==
               FS_MENU_MODE_SELECT as libc::c_int &&
               (*this).selectMode as libc::c_int ==
                   SM_CONFIRM_FILE as libc::c_int {
        let fresh277 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_106: *mut Gfx = fresh277;
        (*_g_106).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_106).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh278 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_107: *mut Gfx = fresh278;
        (*_g_107).words.w0 =
            (0xfc as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (((6 as libc::c_int as u32_0 &
                       (((0x1 as libc::c_int) << 4 as libc::c_int) -
                            1 as libc::c_int) as libc::c_uint) <<
                      20 as libc::c_int |
                      (3 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          15 as libc::c_int |
                      (1 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          12 as libc::c_int |
                      (3 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          9 as libc::c_int |
                      ((6 as libc::c_int as u32_0 &
                            (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                 1 as libc::c_int) as libc::c_uint) <<
                           5 as libc::c_int |
                           (3 as libc::c_int as u32_0 &
                                (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                     1 as libc::c_int) as libc::c_uint) <<
                               0 as libc::c_int)) &
                     (((0x1 as libc::c_int) << 24 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_107).words.w1 =
            (31 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 28 as libc::c_int
                |
                (31 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    15 as libc::c_int |
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    9 as libc::c_int |
                ((31 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 4 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     24 as libc::c_int |
                     (1 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         21 as libc::c_int |
                     (3 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         18 as libc::c_int |
                     (31 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         6 as libc::c_int |
                     (7 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         3 as libc::c_int |
                     (7 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         0 as libc::c_int);
        let fresh279 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_108: *mut Gfx = fresh279;
        (*_g_108).words.w0 =
            (0xfa as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_108).words.w1 =
            ((*this).highlightColor[0 as libc::c_int as usize] as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((*this).highlightColor[1 as libc::c_int as usize] as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                ((*this).highlightColor[2 as libc::c_int as usize] as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                ((*this).highlightColor[3 as libc::c_int as usize] as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh280 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_109: *mut Gfx = fresh280;
        (*_g_109).words.w0 =
            (0xfd as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (4 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    21 as libc::c_int |
                (2 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((1 as libc::c_int - 1 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_109).words.w1 =
            gFileSelBigButtonHighlightTex.as_mut_ptr() as libc::c_uint;
        let fresh281 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_110: *mut Gfx = fresh281;
        (*_g_110).words.w0 =
            (0xf5 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (4 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    21 as libc::c_int |
                (2 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 9 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    9 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 9 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_110).words.w1 =
            (7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    20 as libc::c_int |
                ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    18 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    14 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    10 as libc::c_int |
                ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    4 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh282 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_111: *mut Gfx = fresh282;
        (*_g_111).words.w0 =
            (0xe6 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_111).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh283 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_112: *mut Gfx = fresh283;
        (*_g_112).words.w0 =
            (0xf3 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_112).words.w1 =
            (7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((if ((72 as libc::c_int * 24 as libc::c_int +
                           1 as libc::c_int >> 1 as libc::c_int) -
                          1 as libc::c_int) < 2047 as libc::c_int {
                      (72 as libc::c_int * 24 as libc::c_int +
                           1 as libc::c_int >> 1 as libc::c_int) -
                          1 as libc::c_int
                  } else { 2047 as libc::c_int }) as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (((((1 as libc::c_int) << 11 as libc::c_int) +
                       (if 1 as libc::c_int >
                               72 as libc::c_int * 1 as libc::c_int /
                                   8 as libc::c_int {
                            1 as libc::c_int
                        } else {
                            (72 as libc::c_int * 1 as libc::c_int) /
                                8 as libc::c_int
                        }) - 1 as libc::c_int) /
                      (if 1 as libc::c_int >
                              72 as libc::c_int * 1 as libc::c_int /
                                  8 as libc::c_int {
                           1 as libc::c_int
                       } else {
                           (72 as libc::c_int * 1 as libc::c_int) /
                               8 as libc::c_int
                       })) as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh284 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_113: *mut Gfx = fresh284;
        (*_g_113).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_113).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh285 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_114: *mut Gfx = fresh285;
        (*_g_114).words.w0 =
            (0xf5 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (4 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    21 as libc::c_int |
                (1 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((72 as libc::c_int * 1 as libc::c_int + 7 as libc::c_int >>
                      3 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 9 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    9 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 9 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_114).words.w1 =
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    20 as libc::c_int |
                ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    18 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    14 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    10 as libc::c_int |
                ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    4 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh286 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_115: *mut Gfx = fresh286;
        (*_g_115).words.w0 =
            (0xf2 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_115).words.w1 =
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (((72 as libc::c_int - 1 as libc::c_int) << 2 as libc::c_int)
                     as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (((24 as libc::c_int - 1 as libc::c_int) << 2 as libc::c_int)
                     as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh287 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_116: *mut Gfx = fresh287;
        (*_g_116).words.w0 =
            (0x7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (if 0 as libc::c_int == 0 as libc::c_int {
                     (((12 as libc::c_int * 2 as libc::c_int) as u32_0 &
                           (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          16 as libc::c_int |
                          ((14 as libc::c_int * 2 as libc::c_int) as u32_0 &
                               (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              8 as libc::c_int) |
                         ((15 as libc::c_int * 2 as libc::c_int) as u32_0 &
                              (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             0 as libc::c_int
                 } else {
                     (if 0 as libc::c_int == 1 as libc::c_int {
                          (((14 as libc::c_int * 2 as libc::c_int) as u32_0 &
                                (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                     1 as libc::c_int) as libc::c_uint) <<
                               16 as libc::c_int |
                               ((15 as libc::c_int * 2 as libc::c_int) as
                                    u32_0 &
                                    (((0x1 as libc::c_int) <<
                                          8 as libc::c_int) -
                                         1 as libc::c_int) as libc::c_uint) <<
                                   8 as libc::c_int) |
                              ((13 as libc::c_int * 2 as libc::c_int) as u32_0
                                   &
                                   (((0x1 as libc::c_int) << 8 as libc::c_int)
                                        - 1 as libc::c_int) as libc::c_uint)
                                  << 0 as libc::c_int
                      } else {
                          (if 0 as libc::c_int == 2 as libc::c_int {
                               (((15 as libc::c_int * 2 as libc::c_int) as
                                     u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 16 as libc::c_int |
                                    ((13 as libc::c_int * 2 as libc::c_int) as
                                         u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        8 as libc::c_int) |
                                   ((12 as libc::c_int * 2 as libc::c_int) as
                                        u32_0 &
                                        (((0x1 as libc::c_int) <<
                                              8 as libc::c_int) -
                                             1 as libc::c_int) as
                                            libc::c_uint) << 0 as libc::c_int
                           } else {
                               (((13 as libc::c_int * 2 as libc::c_int) as
                                     u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 16 as libc::c_int |
                                    ((12 as libc::c_int * 2 as libc::c_int) as
                                         u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        8 as libc::c_int) |
                                   ((14 as libc::c_int * 2 as libc::c_int) as
                                        u32_0 &
                                        (((0x1 as libc::c_int) <<
                                              8 as libc::c_int) -
                                             1 as libc::c_int) as
                                            libc::c_uint) << 0 as libc::c_int
                           })
                      })
                 });
        (*_g_116).words.w1 =
            if 0 as libc::c_int == 0 as libc::c_int {
                (((12 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     16 as libc::c_int |
                     ((15 as libc::c_int * 2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         8 as libc::c_int) |
                    ((13 as libc::c_int * 2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
            } else if 0 as libc::c_int == 1 as libc::c_int {
                (((14 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     16 as libc::c_int |
                     ((13 as libc::c_int * 2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         8 as libc::c_int) |
                    ((12 as libc::c_int * 2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
            } else if 0 as libc::c_int == 2 as libc::c_int {
                (((15 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     16 as libc::c_int |
                     ((12 as libc::c_int * 2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         8 as libc::c_int) |
                    ((14 as libc::c_int * 2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
            } else {
                (((13 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     16 as libc::c_int |
                     ((14 as libc::c_int * 2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         8 as libc::c_int) |
                    ((15 as libc::c_int * 2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
            }
    }
    // draw warning labels
    if (*this).warningLabel as libc::c_int > FS_WARNING_NONE as libc::c_int {
        let fresh288 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_117: *mut Gfx = fresh288;
        (*_g_117).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_117).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh289 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_118: *mut Gfx = fresh289;
        (*_g_118).words.w0 =
            (0xfc as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (((3 as libc::c_int as u32_0 &
                       (((0x1 as libc::c_int) << 4 as libc::c_int) -
                            1 as libc::c_int) as libc::c_uint) <<
                      20 as libc::c_int |
                      (1 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          15 as libc::c_int |
                      (1 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          12 as libc::c_int |
                      (3 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          9 as libc::c_int |
                      ((3 as libc::c_int as u32_0 &
                            (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                 1 as libc::c_int) as libc::c_uint) <<
                           5 as libc::c_int |
                           (1 as libc::c_int as u32_0 &
                                (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                     1 as libc::c_int) as libc::c_uint) <<
                               0 as libc::c_int)) &
                     (((0x1 as libc::c_int) << 24 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_118).words.w1 =
            (5 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 28 as libc::c_int
                |
                (5 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    15 as libc::c_int |
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    9 as libc::c_int |
                ((5 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 4 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     24 as libc::c_int |
                     (1 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         21 as libc::c_int |
                     (3 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         18 as libc::c_int |
                     (5 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         6 as libc::c_int |
                     (7 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         3 as libc::c_int |
                     (7 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         0 as libc::c_int);
        let fresh290 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_119: *mut Gfx = fresh290;
        (*_g_119).words.w0 =
            (0xfa as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_119).words.w1 =
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                ((*this).emptyFileTextAlpha as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh291 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_120: *mut Gfx = fresh291;
        (*_g_120).words.w0 =
            (0xfb as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_120).words.w1 =
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh292 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_121: *mut Gfx = fresh292;
        (*_g_121).words.w0 =
            (0xfd as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (3 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    21 as libc::c_int |
                (2 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((1 as libc::c_int - 1 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_121).words.w1 =
            sWarningLabels[gSaveContext.language as
                               usize][(*this).warningLabel as usize] as
                libc::c_uint;
        let fresh293 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_122: *mut Gfx = fresh293;
        (*_g_122).words.w0 =
            (0xf5 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (3 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    21 as libc::c_int |
                (2 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 9 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    9 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 9 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_122).words.w1 =
            (7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    20 as libc::c_int |
                ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    18 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    14 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    10 as libc::c_int |
                ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    4 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh294 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_123: *mut Gfx = fresh294;
        (*_g_123).words.w0 =
            (0xe6 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_123).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh295 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_124: *mut Gfx = fresh295;
        (*_g_124).words.w0 =
            (0xf3 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_124).words.w1 =
            (7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((if ((128 as libc::c_int * 16 as libc::c_int +
                           1 as libc::c_int >> 1 as libc::c_int) -
                          1 as libc::c_int) < 2047 as libc::c_int {
                      (128 as libc::c_int * 16 as libc::c_int +
                           1 as libc::c_int >> 1 as libc::c_int) -
                          1 as libc::c_int
                  } else { 2047 as libc::c_int }) as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (((((1 as libc::c_int) << 11 as libc::c_int) +
                       (if 1 as libc::c_int >
                               128 as libc::c_int * 1 as libc::c_int /
                                   8 as libc::c_int {
                            1 as libc::c_int
                        } else {
                            (128 as libc::c_int * 1 as libc::c_int) /
                                8 as libc::c_int
                        }) - 1 as libc::c_int) /
                      (if 1 as libc::c_int >
                              128 as libc::c_int * 1 as libc::c_int /
                                  8 as libc::c_int {
                           1 as libc::c_int
                       } else {
                           (128 as libc::c_int * 1 as libc::c_int) /
                               8 as libc::c_int
                       })) as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh296 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_125: *mut Gfx = fresh296;
        (*_g_125).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_125).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh297 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_126: *mut Gfx = fresh297;
        (*_g_126).words.w0 =
            (0xf5 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (3 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    21 as libc::c_int |
                (1 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((128 as libc::c_int * 1 as libc::c_int + 7 as libc::c_int >>
                      3 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 9 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    9 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 9 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_126).words.w1 =
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    20 as libc::c_int |
                ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    18 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    14 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    10 as libc::c_int |
                ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    4 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh298 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_127: *mut Gfx = fresh298;
        (*_g_127).words.w0 =
            (0xf2 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_127).words.w1 =
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (((128 as libc::c_int - 1 as libc::c_int) << 2 as libc::c_int)
                     as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (((16 as libc::c_int - 1 as libc::c_int) << 2 as libc::c_int)
                     as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh299 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_128: *mut Gfx = fresh299;
        (*_g_128).words.w0 =
            (0x7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (if 0 as libc::c_int == 0 as libc::c_int {
                     (((16 as libc::c_int * 2 as libc::c_int) as u32_0 &
                           (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          16 as libc::c_int |
                          ((18 as libc::c_int * 2 as libc::c_int) as u32_0 &
                               (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              8 as libc::c_int) |
                         ((19 as libc::c_int * 2 as libc::c_int) as u32_0 &
                              (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             0 as libc::c_int
                 } else {
                     (if 0 as libc::c_int == 1 as libc::c_int {
                          (((18 as libc::c_int * 2 as libc::c_int) as u32_0 &
                                (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                     1 as libc::c_int) as libc::c_uint) <<
                               16 as libc::c_int |
                               ((19 as libc::c_int * 2 as libc::c_int) as
                                    u32_0 &
                                    (((0x1 as libc::c_int) <<
                                          8 as libc::c_int) -
                                         1 as libc::c_int) as libc::c_uint) <<
                                   8 as libc::c_int) |
                              ((17 as libc::c_int * 2 as libc::c_int) as u32_0
                                   &
                                   (((0x1 as libc::c_int) << 8 as libc::c_int)
                                        - 1 as libc::c_int) as libc::c_uint)
                                  << 0 as libc::c_int
                      } else {
                          (if 0 as libc::c_int == 2 as libc::c_int {
                               (((19 as libc::c_int * 2 as libc::c_int) as
                                     u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 16 as libc::c_int |
                                    ((17 as libc::c_int * 2 as libc::c_int) as
                                         u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        8 as libc::c_int) |
                                   ((16 as libc::c_int * 2 as libc::c_int) as
                                        u32_0 &
                                        (((0x1 as libc::c_int) <<
                                              8 as libc::c_int) -
                                             1 as libc::c_int) as
                                            libc::c_uint) << 0 as libc::c_int
                           } else {
                               (((17 as libc::c_int * 2 as libc::c_int) as
                                     u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 16 as libc::c_int |
                                    ((16 as libc::c_int * 2 as libc::c_int) as
                                         u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        8 as libc::c_int) |
                                   ((18 as libc::c_int * 2 as libc::c_int) as
                                        u32_0 &
                                        (((0x1 as libc::c_int) <<
                                              8 as libc::c_int) -
                                             1 as libc::c_int) as
                                            libc::c_uint) << 0 as libc::c_int
                           })
                      })
                 });
        (*_g_128).words.w1 =
            if 0 as libc::c_int == 0 as libc::c_int {
                (((16 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     16 as libc::c_int |
                     ((19 as libc::c_int * 2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         8 as libc::c_int) |
                    ((17 as libc::c_int * 2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
            } else if 0 as libc::c_int == 1 as libc::c_int {
                (((18 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     16 as libc::c_int |
                     ((17 as libc::c_int * 2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         8 as libc::c_int) |
                    ((16 as libc::c_int * 2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
            } else if 0 as libc::c_int == 2 as libc::c_int {
                (((19 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     16 as libc::c_int |
                     ((16 as libc::c_int * 2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         8 as libc::c_int) |
                    ((18 as libc::c_int * 2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
            } else {
                (((17 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     16 as libc::c_int |
                     ((18 as libc::c_int * 2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         8 as libc::c_int) |
                    ((19 as libc::c_int * 2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
            }
    }
    let fresh300 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_129: *mut Gfx = fresh300;
    (*_g_129).words.w0 =
        (0xe7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_129).words.w1 = 0 as libc::c_int as libc::c_uint;
    let fresh301 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_130: *mut Gfx = fresh301;
    (*_g_130).words.w0 =
        (0xfc as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (((1 as libc::c_int as u32_0 &
                   (((0x1 as libc::c_int) << 4 as libc::c_int) -
                        1 as libc::c_int) as libc::c_uint) <<
                  20 as libc::c_int |
                  (4 as libc::c_int as u32_0 &
                       (((0x1 as libc::c_int) << 5 as libc::c_int) -
                            1 as libc::c_int) as libc::c_uint) <<
                      15 as libc::c_int |
                  (7 as libc::c_int as u32_0 &
                       (((0x1 as libc::c_int) << 3 as libc::c_int) -
                            1 as libc::c_int) as libc::c_uint) <<
                      12 as libc::c_int |
                  (7 as libc::c_int as u32_0 &
                       (((0x1 as libc::c_int) << 3 as libc::c_int) -
                            1 as libc::c_int) as libc::c_uint) <<
                      9 as libc::c_int |
                  ((1 as libc::c_int as u32_0 &
                        (((0x1 as libc::c_int) << 4 as libc::c_int) -
                             1 as libc::c_int) as libc::c_uint) <<
                       5 as libc::c_int |
                       (4 as libc::c_int as u32_0 &
                            (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                 1 as libc::c_int) as libc::c_uint) <<
                           0 as libc::c_int)) &
                 (((0x1 as libc::c_int) << 24 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_130).words.w1 =
        (31 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 4 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 28 as libc::c_int |
            (31 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 15 as libc::c_int
            |
            (7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (1 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 9 as libc::c_int |
            ((31 as libc::c_int as u32_0 &
                  (((0x1 as libc::c_int) << 4 as libc::c_int) -
                       1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                 |
                 (7 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 3 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     21 as libc::c_int |
                 (7 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 3 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     18 as libc::c_int |
                 (31 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 3 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     6 as libc::c_int |
                 (7 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 3 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     3 as libc::c_int |
                 (1 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 3 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     0 as libc::c_int);
    Graph_CloseDisps(dispRefs.as_mut_ptr(), (*this).state.gfxCtx,
                     b"../z_file_choose.c\x00" as *const u8 as
                         *const libc::c_char, 2198 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn FileChoose_ConfigModeDraw(mut thisx:
                                                       *mut GameState) {
    let mut this: *mut FileChooseContext = thisx as *mut FileChooseContext;
    let mut eyeX: f32_0 = 0.;
    let mut eyeY: f32_0 = 0.;
    let mut eyeZ: f32_0 = 0.;
    let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
    let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
    __gfxCtx = (*this).state.gfxCtx;
    Graph_OpenDisps(dispRefs.as_mut_ptr(), (*this).state.gfxCtx,
                    b"../z_file_choose.c\x00" as *const u8 as
                        *const libc::c_char, 2218 as libc::c_int);
    let fresh302 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g: *mut Gfx = fresh302;
    (*_g).words.w0 =
        (0xe7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g).words.w1 = 0 as libc::c_int as libc::c_uint;
    eyeX =
        1000.0f32 *
            Math_CosS((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int
                                             * 16 as libc::c_int +
                                             11 as libc::c_int) as usize]) -
            1000.0f32 *
                Math_SinS((*gGameInfo).data[(10 as libc::c_int *
                                                 6 as libc::c_int *
                                                 16 as libc::c_int +
                                                 11 as libc::c_int) as
                                                usize]);
    eyeY =
        (*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                               16 as libc::c_int + 13 as libc::c_int) as
                              usize] as f32_0;
    eyeZ =
        1000.0f32 *
            Math_SinS((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int
                                             * 16 as libc::c_int +
                                             11 as libc::c_int) as usize]) +
            1000.0f32 *
                Math_CosS((*gGameInfo).data[(10 as libc::c_int *
                                                 6 as libc::c_int *
                                                 16 as libc::c_int +
                                                 11 as libc::c_int) as
                                                usize]);
    FileChoose_SetView(this, eyeX, eyeY, eyeZ);
    SkyboxDraw_Draw(&mut (*this).skyboxCtx, (*this).state.gfxCtx,
                    1 as libc::c_int as s16,
                    (*this).envCtx.skyboxBlend as s16, eyeX, eyeY, eyeZ);
    let fresh303 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_0: *mut Gfx = fresh303;
    (*_g_0).words.w0 =
        (0xe3 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            ((32 as libc::c_int - 14 as libc::c_int - 2 as libc::c_int) as
                 u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            ((2 as libc::c_int - 1 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_0).words.w1 =
        ((0 as libc::c_int) << 14 as libc::c_int) as libc::c_uint;
    (*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 11 as libc::c_int) as usize] =
        ((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                16 as libc::c_int + 11 as libc::c_int) as
                               usize] as libc::c_int +
             (*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                    16 as libc::c_int + 10 as libc::c_int) as
                                   usize] as libc::c_int) as s16;
    Environment_UpdateSkybox(SKYBOX_NORMAL_SKY as libc::c_int as u8_0,
                             &mut (*this).envCtx, &mut (*this).skyboxCtx);
    let fresh304 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_1: *mut Gfx = fresh304;
    (*_g_1).words.w0 =
        (0xe7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_1).words.w1 = 0 as libc::c_int as libc::c_uint;
    func_800949A8((*this).state.gfxCtx);
    FileChoose_SetView(this, 0.0f32, 0.0f32, 64.0f32);
    FileChoose_SetWindowVtx(&mut (*this).state);
    FileChoose_SetWindowContentVtx(&mut (*this).state);
    if (*this).configMode as libc::c_int != CM_NAME_ENTRY as libc::c_int &&
           (*this).configMode as libc::c_int !=
               CM_START_NAME_ENTRY as libc::c_int {
        let fresh305 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_2: *mut Gfx = fresh305;
        (*_g_2).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_2).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh306 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_3: *mut Gfx = fresh306;
        (*_g_3).words.w0 =
            (0xfc as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (((1 as libc::c_int as u32_0 &
                       (((0x1 as libc::c_int) << 4 as libc::c_int) -
                            1 as libc::c_int) as libc::c_uint) <<
                      20 as libc::c_int |
                      (3 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          15 as libc::c_int |
                      (1 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          12 as libc::c_int |
                      (3 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          9 as libc::c_int |
                      ((1 as libc::c_int as u32_0 &
                            (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                 1 as libc::c_int) as libc::c_uint) <<
                           5 as libc::c_int |
                           (3 as libc::c_int as u32_0 &
                                (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                     1 as libc::c_int) as libc::c_uint) <<
                               0 as libc::c_int)) &
                     (((0x1 as libc::c_int) << 24 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_3).words.w1 =
            (31 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 28 as libc::c_int
                |
                (31 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    15 as libc::c_int |
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    9 as libc::c_int |
                ((31 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 4 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     24 as libc::c_int |
                     (1 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         21 as libc::c_int |
                     (3 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         18 as libc::c_int |
                     (31 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         6 as libc::c_int |
                     (7 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         3 as libc::c_int |
                     (7 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         0 as libc::c_int);
        let fresh307 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_4: *mut Gfx = fresh307;
        (*_g_4).words.w0 =
            (0xfa as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_4).words.w1 =
            ((*this).windowColor[0 as libc::c_int as usize] as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((*this).windowColor[1 as libc::c_int as usize] as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                ((*this).windowColor[2 as libc::c_int as usize] as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                ((*this).windowAlpha as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh308 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_5: *mut Gfx = fresh308;
        (*_g_5).words.w0 =
            (0xfb as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_5).words.w1 =
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        Matrix_Translate(0.0f32, 0.0f32, -93.6f32,
                         MTXMODE_NEW as libc::c_int as u8_0);
        Matrix_Scale(0.78f32, 0.78f32, 0.78f32,
                     MTXMODE_APPLY as libc::c_int as u8_0);
        if (*this).windowRot != 0 as libc::c_int as libc::c_float {
            Matrix_RotateX((*this).windowRot / 100.0f32,
                           MTXMODE_APPLY as libc::c_int as u8_0);
        }
        let fresh309 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_6: *mut Gfx = fresh309;
        (*_g_6).words.w0 =
            (0xda as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((::std::mem::size_of::<Mtx>() as
                      libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                      libc::c_uint).wrapping_div(8
                                                                                     as
                                                                                     libc::c_int
                                                                                     as
                                                                                     libc::c_uint)
                     &
                     (((0x1 as libc::c_int) << 5 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (((0 as libc::c_int | 0x2 as libc::c_int | 0 as libc::c_int) ^
                      0x1 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_6).words.w1 =
            Matrix_NewMtx((*this).state.gfxCtx,
                          b"../z_file_choose.c\x00" as *const u8 as
                              *const libc::c_char as *mut libc::c_char,
                          2282 as libc::c_int) as libc::c_uint;
        let fresh310 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_7: *mut Gfx = fresh310;
        (*_g_7).words.w0 =
            (0x1 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (32 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                ((0 as libc::c_int + 32 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 7 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    1 as libc::c_int;
        (*_g_7).words.w1 =
            &mut *(*this).windowVtx.offset(0 as libc::c_int as isize) as
                *mut Vtx as libc::c_uint;
        let fresh311 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_8: *mut Gfx = fresh311;
        (*_g_8).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_8).words.w1 = gFileSelWindow1DL.as_mut_ptr() as libc::c_uint;
        let fresh312 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_9: *mut Gfx = fresh312;
        (*_g_9).words.w0 =
            (0x1 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (32 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                ((0 as libc::c_int + 32 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 7 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    1 as libc::c_int;
        (*_g_9).words.w1 =
            &mut *(*this).windowVtx.offset(32 as libc::c_int as isize) as
                *mut Vtx as libc::c_uint;
        let fresh313 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_10: *mut Gfx = fresh313;
        (*_g_10).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_10).words.w1 = gFileSelWindow2DL.as_mut_ptr() as libc::c_uint;
        let fresh314 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_11: *mut Gfx = fresh314;
        (*_g_11).words.w0 =
            (0x1 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (16 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                ((0 as libc::c_int + 16 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 7 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    1 as libc::c_int;
        (*_g_11).words.w1 =
            &mut *(*this).windowVtx.offset(64 as libc::c_int as isize) as
                *mut Vtx as libc::c_uint;
        let fresh315 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_12: *mut Gfx = fresh315;
        (*_g_12).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_12).words.w1 = gFileSelWindow3DL.as_mut_ptr() as libc::c_uint;
        let fresh316 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_13: *mut Gfx = fresh316;
        (*_g_13).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_13).words.w1 = 0 as libc::c_int as libc::c_uint;
        FileChoose_DrawWindowContents(&mut (*this).state);
    }
    // draw name entry menu
    if (*this).configMode as libc::c_int >=
           CM_ROTATE_TO_NAME_ENTRY as libc::c_int &&
           (*this).configMode as libc::c_int <=
               CM_NAME_ENTRY_TO_MAIN as libc::c_int {
        let fresh317 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_14: *mut Gfx = fresh317;
        (*_g_14).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_14).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh318 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_15: *mut Gfx = fresh318;
        (*_g_15).words.w0 =
            (0xfc as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (((1 as libc::c_int as u32_0 &
                       (((0x1 as libc::c_int) << 4 as libc::c_int) -
                            1 as libc::c_int) as libc::c_uint) <<
                      20 as libc::c_int |
                      (3 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          15 as libc::c_int |
                      (1 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          12 as libc::c_int |
                      (3 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          9 as libc::c_int |
                      ((1 as libc::c_int as u32_0 &
                            (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                 1 as libc::c_int) as libc::c_uint) <<
                           5 as libc::c_int |
                           (3 as libc::c_int as u32_0 &
                                (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                     1 as libc::c_int) as libc::c_uint) <<
                               0 as libc::c_int)) &
                     (((0x1 as libc::c_int) << 24 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_15).words.w1 =
            (31 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 28 as libc::c_int
                |
                (31 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    15 as libc::c_int |
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    9 as libc::c_int |
                ((31 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 4 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     24 as libc::c_int |
                     (1 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         21 as libc::c_int |
                     (3 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         18 as libc::c_int |
                     (31 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         6 as libc::c_int |
                     (7 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         3 as libc::c_int |
                     (7 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         0 as libc::c_int);
        let fresh319 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_16: *mut Gfx = fresh319;
        (*_g_16).words.w0 =
            (0xfa as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_16).words.w1 =
            ((*this).windowColor[0 as libc::c_int as usize] as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((*this).windowColor[1 as libc::c_int as usize] as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                ((*this).windowColor[2 as libc::c_int as usize] as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                ((*this).windowAlpha as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh320 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_17: *mut Gfx = fresh320;
        (*_g_17).words.w0 =
            (0xfb as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_17).words.w1 =
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        Matrix_Translate(0.0f32, 0.0f32, -93.6f32,
                         MTXMODE_NEW as libc::c_int as u8_0);
        Matrix_Scale(0.78f32, 0.78f32, 0.78f32,
                     MTXMODE_APPLY as libc::c_int as u8_0);
        Matrix_RotateX(((*this).windowRot - 314.0f32) / 100.0f32,
                       MTXMODE_APPLY as libc::c_int as u8_0);
        let fresh321 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_18: *mut Gfx = fresh321;
        (*_g_18).words.w0 =
            (0xda as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((::std::mem::size_of::<Mtx>() as
                      libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                      libc::c_uint).wrapping_div(8
                                                                                     as
                                                                                     libc::c_int
                                                                                     as
                                                                                     libc::c_uint)
                     &
                     (((0x1 as libc::c_int) << 5 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (((0 as libc::c_int | 0x2 as libc::c_int | 0 as libc::c_int) ^
                      0x1 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_18).words.w1 =
            Matrix_NewMtx((*this).state.gfxCtx,
                          b"../z_file_choose.c\x00" as *const u8 as
                              *const libc::c_char as *mut libc::c_char,
                          2316 as libc::c_int) as libc::c_uint;
        let fresh322 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_19: *mut Gfx = fresh322;
        (*_g_19).words.w0 =
            (0x1 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (32 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                ((0 as libc::c_int + 32 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 7 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    1 as libc::c_int;
        (*_g_19).words.w1 =
            &mut *(*this).windowVtx.offset(0 as libc::c_int as isize) as
                *mut Vtx as libc::c_uint;
        let fresh323 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_20: *mut Gfx = fresh323;
        (*_g_20).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_20).words.w1 = gFileSelWindow1DL.as_mut_ptr() as libc::c_uint;
        let fresh324 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_21: *mut Gfx = fresh324;
        (*_g_21).words.w0 =
            (0x1 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (32 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                ((0 as libc::c_int + 32 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 7 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    1 as libc::c_int;
        (*_g_21).words.w1 =
            &mut *(*this).windowVtx.offset(32 as libc::c_int as isize) as
                *mut Vtx as libc::c_uint;
        let fresh325 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_22: *mut Gfx = fresh325;
        (*_g_22).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_22).words.w1 = gFileSelWindow2DL.as_mut_ptr() as libc::c_uint;
        let fresh326 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_23: *mut Gfx = fresh326;
        (*_g_23).words.w0 =
            (0x1 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (16 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                ((0 as libc::c_int + 16 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 7 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    1 as libc::c_int;
        (*_g_23).words.w1 =
            &mut *(*this).windowVtx.offset(64 as libc::c_int as isize) as
                *mut Vtx as libc::c_uint;
        let fresh327 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_24: *mut Gfx = fresh327;
        (*_g_24).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_24).words.w1 = gFileSelWindow3DL.as_mut_ptr() as libc::c_uint;
        let fresh328 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_25: *mut Gfx = fresh328;
        (*_g_25).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_25).words.w1 = 0 as libc::c_int as libc::c_uint;
        FileChoose_DrawNameEntry(&mut (*this).state);
    }
    // draw options menu
    if (*this).configMode as libc::c_int >= CM_MAIN_TO_OPTIONS as libc::c_int
           &&
           (*this).configMode as libc::c_int <=
               CM_OPTIONS_TO_MAIN as libc::c_int {
        let fresh329 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_26: *mut Gfx = fresh329;
        (*_g_26).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_26).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh330 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_27: *mut Gfx = fresh330;
        (*_g_27).words.w0 =
            (0xfc as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (((1 as libc::c_int as u32_0 &
                       (((0x1 as libc::c_int) << 4 as libc::c_int) -
                            1 as libc::c_int) as libc::c_uint) <<
                      20 as libc::c_int |
                      (3 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          15 as libc::c_int |
                      (1 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          12 as libc::c_int |
                      (3 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          9 as libc::c_int |
                      ((1 as libc::c_int as u32_0 &
                            (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                 1 as libc::c_int) as libc::c_uint) <<
                           5 as libc::c_int |
                           (3 as libc::c_int as u32_0 &
                                (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                     1 as libc::c_int) as libc::c_uint) <<
                               0 as libc::c_int)) &
                     (((0x1 as libc::c_int) << 24 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_27).words.w1 =
            (31 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 28 as libc::c_int
                |
                (31 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    15 as libc::c_int |
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    9 as libc::c_int |
                ((31 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 4 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     24 as libc::c_int |
                     (1 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         21 as libc::c_int |
                     (3 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         18 as libc::c_int |
                     (31 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         6 as libc::c_int |
                     (7 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         3 as libc::c_int |
                     (7 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         0 as libc::c_int);
        let fresh331 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_28: *mut Gfx = fresh331;
        (*_g_28).words.w0 =
            (0xfa as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_28).words.w1 =
            ((*this).windowColor[0 as libc::c_int as usize] as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((*this).windowColor[1 as libc::c_int as usize] as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                ((*this).windowColor[2 as libc::c_int as usize] as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                ((*this).windowAlpha as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh332 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_29: *mut Gfx = fresh332;
        (*_g_29).words.w0 =
            (0xfb as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_29).words.w1 =
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        Matrix_Translate(0.0f32, 0.0f32, -93.6f32,
                         MTXMODE_NEW as libc::c_int as u8_0);
        Matrix_Scale(0.78f32, 0.78f32, 0.78f32,
                     MTXMODE_APPLY as libc::c_int as u8_0);
        Matrix_RotateX(((*this).windowRot - 314.0f32) / 100.0f32,
                       MTXMODE_APPLY as libc::c_int as u8_0);
        let fresh333 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_30: *mut Gfx = fresh333;
        (*_g_30).words.w0 =
            (0xda as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((::std::mem::size_of::<Mtx>() as
                      libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                      libc::c_uint).wrapping_div(8
                                                                                     as
                                                                                     libc::c_int
                                                                                     as
                                                                                     libc::c_uint)
                     &
                     (((0x1 as libc::c_int) << 5 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (((0 as libc::c_int | 0x2 as libc::c_int | 0 as libc::c_int) ^
                      0x1 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_30).words.w1 =
            Matrix_NewMtx((*this).state.gfxCtx,
                          b"../z_file_choose.c\x00" as *const u8 as
                              *const libc::c_char as *mut libc::c_char,
                          2337 as libc::c_int) as libc::c_uint;
        let fresh334 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_31: *mut Gfx = fresh334;
        (*_g_31).words.w0 =
            (0x1 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (32 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                ((0 as libc::c_int + 32 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 7 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    1 as libc::c_int;
        (*_g_31).words.w1 =
            &mut *(*this).windowVtx.offset(0 as libc::c_int as isize) as
                *mut Vtx as libc::c_uint;
        let fresh335 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_32: *mut Gfx = fresh335;
        (*_g_32).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_32).words.w1 = gFileSelWindow1DL.as_mut_ptr() as libc::c_uint;
        let fresh336 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_33: *mut Gfx = fresh336;
        (*_g_33).words.w0 =
            (0x1 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (32 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                ((0 as libc::c_int + 32 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 7 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    1 as libc::c_int;
        (*_g_33).words.w1 =
            &mut *(*this).windowVtx.offset(32 as libc::c_int as isize) as
                *mut Vtx as libc::c_uint;
        let fresh337 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_34: *mut Gfx = fresh337;
        (*_g_34).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_34).words.w1 = gFileSelWindow2DL.as_mut_ptr() as libc::c_uint;
        let fresh338 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_35: *mut Gfx = fresh338;
        (*_g_35).words.w0 =
            (0x1 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (16 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                ((0 as libc::c_int + 16 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 7 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    1 as libc::c_int;
        (*_g_35).words.w1 =
            &mut *(*this).windowVtx.offset(64 as libc::c_int as isize) as
                *mut Vtx as libc::c_uint;
        let fresh339 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_36: *mut Gfx = fresh339;
        (*_g_36).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_36).words.w1 = gFileSelWindow3DL.as_mut_ptr() as libc::c_uint;
        let fresh340 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_37: *mut Gfx = fresh340;
        (*_g_37).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_37).words.w1 = 0 as libc::c_int as libc::c_uint;
        FileChoose_DrawOptions(&mut (*this).state);
    }
    let fresh341 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_38: *mut Gfx = fresh341;
    (*_g_38).words.w0 =
        (0xe7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_38).words.w1 = 0 as libc::c_int as libc::c_uint;
    FileChoose_SetView(this, 0.0f32, 0.0f32, 64.0f32);
    Graph_CloseDisps(dispRefs.as_mut_ptr(), (*this).state.gfxCtx,
                     b"../z_file_choose.c\x00" as *const u8 as
                         *const libc::c_char, 2352 as libc::c_int);
}
/* *
 * Fade out the main menu elements to transition to select mode.
 * Update function for `SM_FADE_MAIN_TO_SELECT`
 */
#[no_mangle]
pub unsafe extern "C" fn FileChoose_FadeMainToSelect(mut thisx:
                                                         *mut GameState) {
    let mut this: *mut FileChooseContext = thisx as *mut FileChooseContext;
    let mut sramCtx: *mut SramContext = &mut (*this).sramCtx;
    let mut i: s16 = 0;
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) < 3 as libc::c_int {
        if i as libc::c_int != (*this).buttonIndex as libc::c_int {
            (*this).fileButtonAlpha[i as usize] =
                ((*this).fileButtonAlpha[i as usize] as libc::c_int -
                     25 as libc::c_int) as s16;
            (*this).optionButtonAlpha = (*this).fileButtonAlpha[i as usize];
            (*this).actionButtonAlpha[FS_BTN_ACTION_ERASE as libc::c_int as
                                          usize] = (*this).optionButtonAlpha;
            (*this).actionButtonAlpha[FS_BTN_ACTION_COPY as libc::c_int as
                                          usize] =
                (*this).actionButtonAlpha[FS_BTN_ACTION_ERASE as libc::c_int
                                              as usize];
            if *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(i
                                                                                      as
                                                                                      isize)
                                                as
                                                libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                         as
                                                                                         *mut SaveContext)).newf.as_mut_ptr().offset(0
                                                                                                                                         as
                                                                                                                                         libc::c_int
                                                                                                                                         as
                                                                                                                                         isize)
                                                                                as
                                                                                *mut libc::c_char
                                                                                as
                                                                                size_t)
                                               as isize) as libc::c_int ==
                   'Z' as i32 ||
                   *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(i
                                                                                          as
                                                                                          isize)
                                                    as
                                                    libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                             as
                                                                                             *mut SaveContext)).newf.as_mut_ptr().offset(1
                                                                                                                                             as
                                                                                                                                             libc::c_int
                                                                                                                                             as
                                                                                                                                             isize)
                                                                                    as
                                                                                    *mut libc::c_char
                                                                                    as
                                                                                    size_t)
                                                   as isize) as libc::c_int ==
                       'E' as i32 ||
                   *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(i
                                                                                          as
                                                                                          isize)
                                                    as
                                                    libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                             as
                                                                                             *mut SaveContext)).newf.as_mut_ptr().offset(2
                                                                                                                                             as
                                                                                                                                             libc::c_int
                                                                                                                                             as
                                                                                                                                             isize)
                                                                                    as
                                                                                    *mut libc::c_char
                                                                                    as
                                                                                    size_t)
                                                   as isize) as libc::c_int ==
                       'L' as i32 ||
                   *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(i
                                                                                          as
                                                                                          isize)
                                                    as
                                                    libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                             as
                                                                                             *mut SaveContext)).newf.as_mut_ptr().offset(3
                                                                                                                                             as
                                                                                                                                             libc::c_int
                                                                                                                                             as
                                                                                                                                             isize)
                                                                                    as
                                                                                    *mut libc::c_char
                                                                                    as
                                                                                    size_t)
                                                   as isize) as libc::c_int ==
                       'D' as i32 ||
                   *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(i
                                                                                          as
                                                                                          isize)
                                                    as
                                                    libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                             as
                                                                                             *mut SaveContext)).newf.as_mut_ptr().offset(4
                                                                                                                                             as
                                                                                                                                             libc::c_int
                                                                                                                                             as
                                                                                                                                             isize)
                                                                                    as
                                                                                    *mut libc::c_char
                                                                                    as
                                                                                    size_t)
                                                   as isize) as libc::c_int ==
                       'A' as i32 ||
                   *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(i
                                                                                          as
                                                                                          isize)
                                                    as
                                                    libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                             as
                                                                                             *mut SaveContext)).newf.as_mut_ptr().offset(5
                                                                                                                                             as
                                                                                                                                             libc::c_int
                                                                                                                                             as
                                                                                                                                             isize)
                                                                                    as
                                                                                    *mut libc::c_char
                                                                                    as
                                                                                    size_t)
                                                   as isize) as libc::c_int ==
                       'Z' as i32 {
                (*this).nameBoxAlpha[i as usize] =
                    (*this).fileButtonAlpha[i as usize];
                (*this).nameAlpha[i as usize] =
                    (*this).nameBoxAlpha[i as usize];
                (*this).connectorAlpha[i as usize] =
                    ((*this).connectorAlpha[i as usize] as libc::c_int -
                         31 as libc::c_int) as s16
            }
        }
        i += 1
    }
    (*this).titleAlpha[0 as libc::c_int as usize] =
        ((*this).titleAlpha[0 as libc::c_int as usize] as libc::c_int -
             31 as libc::c_int) as s16;
    (*this).titleAlpha[1 as libc::c_int as usize] =
        ((*this).titleAlpha[1 as libc::c_int as usize] as libc::c_int +
             31 as libc::c_int) as s16;
    (*this).actionTimer -= 1;
    if (*this).actionTimer as libc::c_int == 0 as libc::c_int {
        (*this).actionTimer = 8 as libc::c_int as s16;
        (*this).selectMode += 1;
        (*this).confirmButtonIndex = FS_BTN_CONFIRM_YES as libc::c_int as s16
    };
}
/* *
 * Moves the selected file to the top of the window.
 * Update function for `SM_MOVE_FILE_TO_TOP`
 */
#[no_mangle]
pub unsafe extern "C" fn FileChoose_MoveSelectedFileToTop(mut thisx:
                                                              *mut GameState) {
    static mut fileYOffsets: [s16; 3] =
        [0 as libc::c_int as s16, 16 as libc::c_int as s16,
         32 as libc::c_int as
             s16]; // amount to move by to reach the top of the screen
    let mut this: *mut FileChooseContext = thisx as *mut FileChooseContext;
    let mut yStep: s16 = 0;
    yStep =
        ((if (*this).buttonYOffsets[(*this).buttonIndex as usize] as
                 libc::c_int -
                 fileYOffsets[(*this).buttonIndex as usize] as libc::c_int >=
                 0 as libc::c_int {
              ((*this).buttonYOffsets[(*this).buttonIndex as usize] as
                   libc::c_int) -
                  fileYOffsets[(*this).buttonIndex as usize] as libc::c_int
          } else {
              -((*this).buttonYOffsets[(*this).buttonIndex as usize] as
                    libc::c_int -
                    fileYOffsets[(*this).buttonIndex as usize] as libc::c_int)
          }) / (*this).actionTimer as libc::c_int) as s16;
    (*this).buttonYOffsets[(*this).buttonIndex as usize] =
        ((*this).buttonYOffsets[(*this).buttonIndex as usize] as libc::c_int +
             yStep as libc::c_int) as s16;
    (*this).actionTimer -= 1;
    if (*this).actionTimer as libc::c_int == 0 as libc::c_int ||
           (*this).buttonYOffsets[(*this).buttonIndex as usize] as libc::c_int
               == fileYOffsets[(*this).buttonIndex as usize] as libc::c_int {
        (*this).buttonYOffsets[FS_BTN_SELECT_QUIT as libc::c_int as usize] =
            -(24 as libc::c_int) as s16;
        (*this).buttonYOffsets[FS_BTN_SELECT_YES as libc::c_int as usize] =
            (*this).buttonYOffsets[FS_BTN_SELECT_QUIT as libc::c_int as
                                       usize];
        (*this).actionTimer = 8 as libc::c_int as s16;
        (*this).selectMode += 1
    };
}
/* *
 * Fade in the file info for the selected file.
 * Update function for `SM_FADE_IN_FILE_INFO`
 */
#[no_mangle]
pub unsafe extern "C" fn FileChoose_FadeInFileInfo(mut thisx:
                                                       *mut GameState) {
    let mut this: *mut FileChooseContext = thisx as *mut FileChooseContext;
    (*this).fileInfoAlpha[(*this).buttonIndex as usize] =
        ((*this).fileInfoAlpha[(*this).buttonIndex as usize] as libc::c_int +
             25 as libc::c_int) as s16;
    (*this).nameBoxAlpha[(*this).buttonIndex as usize] =
        ((*this).nameBoxAlpha[(*this).buttonIndex as usize] as libc::c_int -
             50 as libc::c_int) as s16;
    if (*this).nameBoxAlpha[(*this).buttonIndex as usize] as libc::c_int <=
           0 as libc::c_int {
        (*this).nameBoxAlpha[(*this).buttonIndex as usize] =
            0 as libc::c_int as s16
    }
    (*this).actionTimer -= 1;
    if (*this).actionTimer as libc::c_int == 0 as libc::c_int {
        (*this).fileInfoAlpha[(*this).buttonIndex as usize] =
            200 as libc::c_int as s16;
        (*this).actionTimer = 8 as libc::c_int as s16;
        (*this).selectMode += 1
    }
    (*this).confirmButtonAlpha[FS_BTN_CONFIRM_QUIT as libc::c_int as usize] =
        (*this).fileInfoAlpha[(*this).buttonIndex as usize];
    (*this).confirmButtonAlpha[FS_BTN_CONFIRM_YES as libc::c_int as usize] =
        (*this).confirmButtonAlpha[FS_BTN_CONFIRM_QUIT as libc::c_int as
                                       usize];
}
/* *
 * Update the cursor and handle the option that the player picks for confirming the selected file.
 * Update function for `SM_CONFIRM_FILE`
 */
#[no_mangle]
pub unsafe extern "C" fn FileChoose_ConfirmFile(mut thisx: *mut GameState) {
    let mut this: *mut FileChooseContext = thisx as *mut FileChooseContext;
    let mut input: *mut Input =
        &mut *(*this).state.input.as_mut_ptr().offset(0 as libc::c_int as
                                                          isize) as
            *mut Input;
    if !((*input).press.button as libc::c_int | !(0x1000 as libc::c_int)) ==
           0 as libc::c_int ||
           !((*input).press.button as libc::c_int | !(0x8000 as libc::c_int))
               == 0 as libc::c_int {
        if (*this).confirmButtonIndex as libc::c_int ==
               FS_BTN_CONFIRM_YES as libc::c_int {
            func_800AA000(300.0f32, 180 as libc::c_int as u8_0,
                          20 as libc::c_int as u8_0,
                          100 as libc::c_int as u8_0);
            Audio_PlaySoundGeneral(0x483b as libc::c_int as u16_0,
                                   &mut D_801333D4, 4 as libc::c_int as u8_0,
                                   &mut D_801333E0, &mut D_801333E0,
                                   &mut D_801333E8);
            (*this).selectMode = SM_FADE_OUT as libc::c_int as s16;
            func_800F6964(0xf as libc::c_int as u16_0);
        } else {
            Audio_PlaySoundGeneral(0x483c as libc::c_int as u16_0,
                                   &mut D_801333D4, 4 as libc::c_int as u8_0,
                                   &mut D_801333E0, &mut D_801333E0,
                                   &mut D_801333E8);
            (*this).selectMode += 1
        }
    } else if !((*input).press.button as libc::c_int |
                    !(0x4000 as libc::c_int)) == 0 as libc::c_int {
        Audio_PlaySoundGeneral(0x483c as libc::c_int as u16_0,
                               &mut D_801333D4, 4 as libc::c_int as u8_0,
                               &mut D_801333E0, &mut D_801333E0,
                               &mut D_801333E8);
        (*this).selectMode += 1
    } else if (if (*this).stickRelY as libc::c_int >= 0 as libc::c_int {
                   (*this).stickRelY as libc::c_int
               } else { -((*this).stickRelY as libc::c_int) }) >=
                  30 as libc::c_int {
        Audio_PlaySoundGeneral(0x4839 as libc::c_int as u16_0,
                               &mut D_801333D4, 4 as libc::c_int as u8_0,
                               &mut D_801333E0, &mut D_801333E0,
                               &mut D_801333E8);
        (*this).confirmButtonIndex =
            ((*this).confirmButtonIndex as libc::c_int ^ 1 as libc::c_int) as
                s16
    };
}
/* *
 * Fade out the file info for the selected file before returning to the main menu.
 * Update function for `SM_FADE_OUT_FILE_INFO`
 */
#[no_mangle]
pub unsafe extern "C" fn FileChoose_FadeOutFileInfo(mut thisx:
                                                        *mut GameState) {
    let mut this: *mut FileChooseContext = thisx as *mut FileChooseContext;
    (*this).fileInfoAlpha[(*this).buttonIndex as usize] =
        ((*this).fileInfoAlpha[(*this).buttonIndex as usize] as libc::c_int -
             25 as libc::c_int) as s16;
    (*this).nameBoxAlpha[(*this).buttonIndex as usize] =
        ((*this).nameBoxAlpha[(*this).buttonIndex as usize] as libc::c_int +
             25 as libc::c_int) as s16;
    (*this).actionTimer -= 1;
    if (*this).actionTimer as libc::c_int == 0 as libc::c_int {
        (*this).buttonYOffsets[FS_BTN_SELECT_QUIT as libc::c_int as usize] =
            0 as libc::c_int as s16;
        (*this).buttonYOffsets[FS_BTN_SELECT_YES as libc::c_int as usize] =
            (*this).buttonYOffsets[FS_BTN_SELECT_QUIT as libc::c_int as
                                       usize];
        (*this).nameBoxAlpha[(*this).buttonIndex as usize] =
            200 as libc::c_int as s16;
        (*this).fileInfoAlpha[(*this).buttonIndex as usize] =
            0 as libc::c_int as s16;
        (*this).nextTitleLabel = FS_TITLE_SELECT_FILE as libc::c_int as s16;
        (*this).actionTimer = 8 as libc::c_int as s16;
        (*this).selectMode += 1
    }
    (*this).confirmButtonAlpha[1 as libc::c_int as usize] =
        (*this).fileInfoAlpha[(*this).buttonIndex as usize];
    (*this).confirmButtonAlpha[0 as libc::c_int as usize] =
        (*this).confirmButtonAlpha[1 as libc::c_int as usize];
}
/* *
 * Move the selected file back to the slot position then go to config mode for the main menu.
 * Update function for `SM_MOVE_FILE_TO_SLOT`
 */
#[no_mangle]
pub unsafe extern "C" fn FileChoose_MoveSelectedFileToSlot(mut thisx:
                                                               *mut GameState) {
    let mut this: *mut FileChooseContext = thisx as *mut FileChooseContext;
    let mut sramCtx: *mut SramContext = &mut (*this).sramCtx;
    let mut yStep: s16 = 0;
    let mut i: s16 = 0;
    yStep =
        ((if (*this).buttonYOffsets[(*this).buttonIndex as usize] as
                 libc::c_int >= 0 as libc::c_int {
              (*this).buttonYOffsets[(*this).buttonIndex as usize] as
                  libc::c_int
          } else {
              -((*this).buttonYOffsets[(*this).buttonIndex as usize] as
                    libc::c_int)
          }) / (*this).actionTimer as libc::c_int) as s16;
    (*this).buttonYOffsets[(*this).buttonIndex as usize] =
        ((*this).buttonYOffsets[(*this).buttonIndex as usize] as libc::c_int -
             yStep as libc::c_int) as s16;
    if (*this).buttonYOffsets[(*this).buttonIndex as usize] as libc::c_int <=
           0 as libc::c_int {
        (*this).buttonYOffsets[(*this).buttonIndex as usize] =
            0 as libc::c_int as s16
    }
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) < 3 as libc::c_int {
        if i as libc::c_int != (*this).buttonIndex as libc::c_int {
            (*this).fileButtonAlpha[i as usize] =
                ((*this).fileButtonAlpha[i as usize] as libc::c_int +
                     25 as libc::c_int) as s16;
            if (*this).fileButtonAlpha[i as usize] as libc::c_int >=
                   200 as libc::c_int {
                (*this).fileButtonAlpha[i as usize] =
                    200 as libc::c_int as s16
            }
            (*this).optionButtonAlpha = (*this).fileButtonAlpha[i as usize];
            (*this).actionButtonAlpha[FS_BTN_ACTION_ERASE as libc::c_int as
                                          usize] = (*this).optionButtonAlpha;
            (*this).actionButtonAlpha[FS_BTN_ACTION_COPY as libc::c_int as
                                          usize] =
                (*this).actionButtonAlpha[FS_BTN_ACTION_ERASE as libc::c_int
                                              as usize];
            if *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(i
                                                                                      as
                                                                                      isize)
                                                as
                                                libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                         as
                                                                                         *mut SaveContext)).newf.as_mut_ptr().offset(0
                                                                                                                                         as
                                                                                                                                         libc::c_int
                                                                                                                                         as
                                                                                                                                         isize)
                                                                                as
                                                                                *mut libc::c_char
                                                                                as
                                                                                size_t)
                                               as isize) as libc::c_int ==
                   'Z' as i32 ||
                   *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(i
                                                                                          as
                                                                                          isize)
                                                    as
                                                    libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                             as
                                                                                             *mut SaveContext)).newf.as_mut_ptr().offset(1
                                                                                                                                             as
                                                                                                                                             libc::c_int
                                                                                                                                             as
                                                                                                                                             isize)
                                                                                    as
                                                                                    *mut libc::c_char
                                                                                    as
                                                                                    size_t)
                                                   as isize) as libc::c_int ==
                       'E' as i32 ||
                   *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(i
                                                                                          as
                                                                                          isize)
                                                    as
                                                    libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                             as
                                                                                             *mut SaveContext)).newf.as_mut_ptr().offset(2
                                                                                                                                             as
                                                                                                                                             libc::c_int
                                                                                                                                             as
                                                                                                                                             isize)
                                                                                    as
                                                                                    *mut libc::c_char
                                                                                    as
                                                                                    size_t)
                                                   as isize) as libc::c_int ==
                       'L' as i32 ||
                   *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(i
                                                                                          as
                                                                                          isize)
                                                    as
                                                    libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                             as
                                                                                             *mut SaveContext)).newf.as_mut_ptr().offset(3
                                                                                                                                             as
                                                                                                                                             libc::c_int
                                                                                                                                             as
                                                                                                                                             isize)
                                                                                    as
                                                                                    *mut libc::c_char
                                                                                    as
                                                                                    size_t)
                                                   as isize) as libc::c_int ==
                       'D' as i32 ||
                   *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(i
                                                                                          as
                                                                                          isize)
                                                    as
                                                    libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                             as
                                                                                             *mut SaveContext)).newf.as_mut_ptr().offset(4
                                                                                                                                             as
                                                                                                                                             libc::c_int
                                                                                                                                             as
                                                                                                                                             isize)
                                                                                    as
                                                                                    *mut libc::c_char
                                                                                    as
                                                                                    size_t)
                                                   as isize) as libc::c_int ==
                       'A' as i32 ||
                   *(*sramCtx).readBuff.offset((*gSramSlotOffsets.as_mut_ptr().offset(i
                                                                                          as
                                                                                          isize)
                                                    as
                                                    libc::c_ulong).wrapping_add(&mut *(*(0
                                                                                             as
                                                                                             *mut SaveContext)).newf.as_mut_ptr().offset(5
                                                                                                                                             as
                                                                                                                                             libc::c_int
                                                                                                                                             as
                                                                                                                                             isize)
                                                                                    as
                                                                                    *mut libc::c_char
                                                                                    as
                                                                                    size_t)
                                                   as isize) as libc::c_int ==
                       'Z' as i32 {
                (*this).nameAlpha[i as usize] =
                    (*this).fileButtonAlpha[i as usize];
                (*this).nameBoxAlpha[i as usize] =
                    (*this).nameAlpha[i as usize];
                (*this).connectorAlpha[i as usize] =
                    ((*this).connectorAlpha[i as usize] as libc::c_int +
                         31 as libc::c_int) as s16
            }
        }
        i += 1
    }
    (*this).titleAlpha[0 as libc::c_int as usize] =
        ((*this).titleAlpha[0 as libc::c_int as usize] as libc::c_int -
             31 as libc::c_int) as s16;
    (*this).titleAlpha[1 as libc::c_int as usize] =
        ((*this).titleAlpha[1 as libc::c_int as usize] as libc::c_int +
             31 as libc::c_int) as s16;
    (*this).actionTimer -= 1;
    if (*this).actionTimer as libc::c_int == 0 as libc::c_int {
        (*this).titleAlpha[0 as libc::c_int as usize] =
            255 as libc::c_int as s16;
        (*this).titleAlpha[1 as libc::c_int as usize] =
            0 as libc::c_int as s16;
        (*this).titleLabel = (*this).nextTitleLabel;
        (*this).actionTimer = 8 as libc::c_int as s16;
        (*this).menuMode = FS_MENU_MODE_CONFIG as libc::c_int as s16;
        (*this).configMode = CM_MAIN_MENU as libc::c_int as s16;
        (*this).nextConfigMode = CM_MAIN_MENU as libc::c_int as s16;
        (*this).selectMode = SM_FADE_MAIN_TO_SELECT as libc::c_int as s16
    };
}
/* *
 * Fill the screen with black to fade out.
 * Update function for `SM_FADE_OUT`
 */
#[no_mangle]
pub unsafe extern "C" fn FileChoose_FadeOut(mut thisx: *mut GameState) {
    let mut this: *mut FileChooseContext = thisx as *mut FileChooseContext;
    sScreenFillAlpha =
        (sScreenFillAlpha as libc::c_int +
             (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                                    16 as libc::c_int + 10 as libc::c_int) as
                                   usize] as libc::c_int) as s16;
    if sScreenFillAlpha as libc::c_int >= 255 as libc::c_int {
        sScreenFillAlpha = 255 as libc::c_int as s16;
        (*this).selectMode += 1
    };
}
/* *
 * Load the save for the appropriate file and start the game.
 * Note: On Debug ROM, File 1 will go to Map Select.
 * Update function for `SM_LOAD_GAME`
 */
#[no_mangle]
pub unsafe extern "C" fn FileChoose_LoadGame(mut thisx: *mut GameState) {
    let mut this: *mut FileChooseContext = thisx as *mut FileChooseContext;
    let mut swordEquipMask: u16_0 = 0;
    let mut pad: s32 = 0;
    if (*this).buttonIndex as libc::c_int ==
           FS_BTN_SELECT_FILE_1 as libc::c_int {
        Audio_PlaySoundGeneral(0x483b as libc::c_int as u16_0,
                               &mut D_801333D4, 4 as libc::c_int as u8_0,
                               &mut D_801333E0, &mut D_801333E0,
                               &mut D_801333E8);
        gSaveContext.fileNum = (*this).buttonIndex as s32;
        Sram_OpenSave(&mut (*this).sramCtx);
        gSaveContext.gameMode = 0 as libc::c_int;
        (*this).state.init =
            Some(Select_Init as
                     unsafe extern "C" fn(_: *mut GameState) -> ());
        (*this).state.size =
            ::std::mem::size_of::<SelectContext>() as libc::c_ulong;
        (*this).state.running = 0 as libc::c_int as u32_0
    } else {
        Audio_PlaySoundGeneral(0x483b as libc::c_int as u16_0,
                               &mut D_801333D4, 4 as libc::c_int as u8_0,
                               &mut D_801333E0, &mut D_801333E0,
                               &mut D_801333E8);
        gSaveContext.fileNum = (*this).buttonIndex as s32;
        Sram_OpenSave(&mut (*this).sramCtx);
        gSaveContext.gameMode = 0 as libc::c_int;
        (*this).state.init =
            Some(Gameplay_Init as
                     unsafe extern "C" fn(_: *mut GameState) -> ());
        (*this).state.size =
            ::std::mem::size_of::<GlobalContext>() as libc::c_ulong;
        (*this).state.running = 0 as libc::c_int as u32_0
    }
    gSaveContext.respawn[0 as libc::c_int as usize].entranceIndex =
        -(1 as libc::c_int) as s16;
    gSaveContext.respawnFlag = 0 as libc::c_int;
    gSaveContext.seqId = 0xffff as libc::c_int as u8_0;
    gSaveContext.natureAmbienceId = 0xff as libc::c_int as u8_0;
    gSaveContext.showTitleCard = 1 as libc::c_int as u8_0;
    gSaveContext.dogParams = 0 as libc::c_int as s16;
    gSaveContext.timer1State = 0 as libc::c_int as s16;
    gSaveContext.timer2State = 0 as libc::c_int as s16;
    gSaveContext.eventInf[0 as libc::c_int as usize] =
        0 as libc::c_int as u16_0;
    gSaveContext.eventInf[1 as libc::c_int as usize] =
        0 as libc::c_int as u16_0;
    gSaveContext.eventInf[2 as libc::c_int as usize] =
        0 as libc::c_int as u16_0;
    gSaveContext.eventInf[3 as libc::c_int as usize] =
        0 as libc::c_int as u16_0;
    gSaveContext.unk_13EE = 0x32 as libc::c_int as u16_0;
    gSaveContext.nayrusLoveTimer = 0 as libc::c_int as s16;
    gSaveContext.healthAccumulator = 0 as libc::c_int as s16;
    gSaveContext.unk_13F0 = 0 as libc::c_int as s16;
    gSaveContext.unk_13F2 = 0 as libc::c_int as s16;
    gSaveContext.forcedSeqId = 0 as libc::c_int as u16_0;
    gSaveContext.skyboxTime = 0 as libc::c_int as u16_0;
    gSaveContext.nextTransition = 0xff as libc::c_int as u8_0;
    gSaveContext.nextCutsceneIndex = 0xffef as libc::c_int as u16_0;
    gSaveContext.cutsceneTrigger = 0 as libc::c_int as u8_0;
    gSaveContext.chamberCutsceneNum = 0 as libc::c_int as u8_0;
    gSaveContext.nextDayTime = 0xffff as libc::c_int as u16_0;
    gSaveContext.unk_13C3 = 0 as libc::c_int as u8_0;
    gSaveContext.buttonStatus[4 as libc::c_int as usize] =
        BTN_ENABLED as libc::c_int as u8_0;
    gSaveContext.buttonStatus[3 as libc::c_int as usize] =
        gSaveContext.buttonStatus[4 as libc::c_int as usize];
    gSaveContext.buttonStatus[2 as libc::c_int as usize] =
        gSaveContext.buttonStatus[3 as libc::c_int as usize];
    gSaveContext.buttonStatus[1 as libc::c_int as usize] =
        gSaveContext.buttonStatus[2 as libc::c_int as usize];
    gSaveContext.buttonStatus[0 as libc::c_int as usize] =
        gSaveContext.buttonStatus[1 as libc::c_int as usize];
    gSaveContext.unk_13F4 = 0 as libc::c_int as s16;
    gSaveContext.unk_13EC = gSaveContext.unk_13F4 as u16_0;
    gSaveContext.unk_13EA = gSaveContext.unk_13EC;
    gSaveContext.unk_13E8 = gSaveContext.unk_13EA;
    gSaveContext.unk_13E7 = gSaveContext.unk_13E8 as u8_0;
    gSaveContext.unk_13F6 = gSaveContext.magic as s16;
    gSaveContext.magic = 0 as libc::c_int as s8;
    gSaveContext.magicLevel = gSaveContext.magic;
    osSyncPrintf(b"\x1b[32m\x00" as *const u8 as *const libc::c_char);
    osSyncPrintf(b"Z_MAGIC_NOW_NOW=%d  MAGIC_NOW=%d\n\x00" as *const u8 as
                     *const libc::c_char,
                 gSaveContext.unk_13F6 as libc::c_int,
                 gSaveContext.magic as libc::c_int);
    osSyncPrintf(b"\x1b[m\x00" as *const u8 as *const libc::c_char);
    gSaveContext.naviTimer = 0 as libc::c_int as u16_0;
    if gSaveContext.equips.buttonItems[0 as libc::c_int as usize] as
           libc::c_int != ITEM_SWORD_KOKIRI as libc::c_int &&
           gSaveContext.equips.buttonItems[0 as libc::c_int as usize] as
               libc::c_int != ITEM_SWORD_MASTER as libc::c_int &&
           gSaveContext.equips.buttonItems[0 as libc::c_int as usize] as
               libc::c_int != ITEM_SWORD_BGS as libc::c_int &&
           gSaveContext.equips.buttonItems[0 as libc::c_int as usize] as
               libc::c_int != ITEM_SWORD_KNIFE as libc::c_int {
        gSaveContext.equips.buttonItems[0 as libc::c_int as usize] =
            ITEM_NONE as libc::c_int as u8_0;
        swordEquipMask =
            (gEquipMasks[EQUIP_SWORD as libc::c_int as usize] as libc::c_int &
                 gSaveContext.equips.equipment as libc::c_int) as u16_0;
        gSaveContext.equips.equipment =
            (gSaveContext.equips.equipment as libc::c_int &
                 gEquipNegMasks[EQUIP_SWORD as libc::c_int as usize] as
                     libc::c_int) as u16_0;
        gSaveContext.inventory.equipment =
            (gSaveContext.inventory.equipment as libc::c_uint ^
                 gBitFlags[(swordEquipMask as libc::c_int - 1 as libc::c_int)
                               as usize] <<
                     gEquipShifts[EQUIP_SWORD as libc::c_int as usize] as
                         libc::c_int) as u16_0
    };
}
static mut gSelectModeUpdateFuncs:
       [Option<unsafe extern "C" fn(_: *mut GameState) -> ()>; 8] =
    unsafe {
        [Some(FileChoose_FadeMainToSelect as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_MoveSelectedFileToTop as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_FadeInFileInfo as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_ConfirmFile as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_FadeOutFileInfo as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_MoveSelectedFileToSlot as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_FadeOut as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_LoadGame as
                  unsafe extern "C" fn(_: *mut GameState) -> ())]
    };
#[no_mangle]
pub unsafe extern "C" fn FileChoose_SelectModeUpdate(mut thisx:
                                                         *mut GameState) {
    let mut this: *mut FileChooseContext = thisx as *mut FileChooseContext;
    gSelectModeUpdateFuncs[(*this).selectMode as
                               usize].expect("non-null function pointer")(&mut (*this).state);
}
#[no_mangle]
pub unsafe extern "C" fn FileChoose_SelectModeDraw(mut thisx:
                                                       *mut GameState) {
    let mut this: *mut FileChooseContext = thisx as *mut FileChooseContext;
    let mut eyeX: f32_0 = 0.;
    let mut eyeY: f32_0 = 0.;
    let mut eyeZ: f32_0 = 0.;
    let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
    let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
    __gfxCtx = (*this).state.gfxCtx;
    Graph_OpenDisps(dispRefs.as_mut_ptr(), (*this).state.gfxCtx,
                    b"../z_file_choose.c\x00" as *const u8 as
                        *const libc::c_char, 2753 as libc::c_int);
    let fresh342 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g: *mut Gfx = fresh342;
    (*_g).words.w0 =
        (0xe7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g).words.w1 = 0 as libc::c_int as libc::c_uint;
    eyeX =
        1000.0f32 *
            Math_CosS((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int
                                             * 16 as libc::c_int +
                                             11 as libc::c_int) as usize]) -
            1000.0f32 *
                Math_SinS((*gGameInfo).data[(10 as libc::c_int *
                                                 6 as libc::c_int *
                                                 16 as libc::c_int +
                                                 11 as libc::c_int) as
                                                usize]);
    eyeY =
        (*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                               16 as libc::c_int + 13 as libc::c_int) as
                              usize] as f32_0;
    eyeZ =
        1000.0f32 *
            Math_SinS((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int
                                             * 16 as libc::c_int +
                                             11 as libc::c_int) as usize]) +
            1000.0f32 *
                Math_CosS((*gGameInfo).data[(10 as libc::c_int *
                                                 6 as libc::c_int *
                                                 16 as libc::c_int +
                                                 11 as libc::c_int) as
                                                usize]);
    FileChoose_SetView(this, eyeX, eyeY, eyeZ);
    SkyboxDraw_Draw(&mut (*this).skyboxCtx, (*this).state.gfxCtx,
                    1 as libc::c_int as s16,
                    (*this).envCtx.skyboxBlend as s16, eyeX, eyeY, eyeZ);
    let fresh343 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_0: *mut Gfx = fresh343;
    (*_g_0).words.w0 =
        (0xe3 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            ((32 as libc::c_int - 14 as libc::c_int - 2 as libc::c_int) as
                 u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            ((2 as libc::c_int - 1 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_0).words.w1 =
        ((0 as libc::c_int) << 14 as libc::c_int) as libc::c_uint;
    (*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 11 as libc::c_int) as usize] =
        ((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                16 as libc::c_int + 11 as libc::c_int) as
                               usize] as libc::c_int +
             (*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                    16 as libc::c_int + 10 as libc::c_int) as
                                   usize] as libc::c_int) as s16;
    Environment_UpdateSkybox(SKYBOX_NORMAL_SKY as libc::c_int as u8_0,
                             &mut (*this).envCtx, &mut (*this).skyboxCtx);
    let fresh344 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_1: *mut Gfx = fresh344;
    (*_g_1).words.w0 =
        (0xe7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_1).words.w1 = 0 as libc::c_int as libc::c_uint;
    func_800949A8((*this).state.gfxCtx);
    FileChoose_SetView(this, 0.0f32, 0.0f32, 64.0f32);
    FileChoose_SetWindowVtx(&mut (*this).state);
    FileChoose_SetWindowContentVtx(&mut (*this).state);
    let fresh345 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_2: *mut Gfx = fresh345;
    (*_g_2).words.w0 =
        (0xfc as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (((1 as libc::c_int as u32_0 &
                   (((0x1 as libc::c_int) << 4 as libc::c_int) -
                        1 as libc::c_int) as libc::c_uint) <<
                  20 as libc::c_int |
                  (3 as libc::c_int as u32_0 &
                       (((0x1 as libc::c_int) << 5 as libc::c_int) -
                            1 as libc::c_int) as libc::c_uint) <<
                      15 as libc::c_int |
                  (1 as libc::c_int as u32_0 &
                       (((0x1 as libc::c_int) << 3 as libc::c_int) -
                            1 as libc::c_int) as libc::c_uint) <<
                      12 as libc::c_int |
                  (3 as libc::c_int as u32_0 &
                       (((0x1 as libc::c_int) << 3 as libc::c_int) -
                            1 as libc::c_int) as libc::c_uint) <<
                      9 as libc::c_int |
                  ((1 as libc::c_int as u32_0 &
                        (((0x1 as libc::c_int) << 4 as libc::c_int) -
                             1 as libc::c_int) as libc::c_uint) <<
                       5 as libc::c_int |
                       (3 as libc::c_int as u32_0 &
                            (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                 1 as libc::c_int) as libc::c_uint) <<
                           0 as libc::c_int)) &
                 (((0x1 as libc::c_int) << 24 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_2).words.w1 =
        (31 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 4 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 28 as libc::c_int |
            (31 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 15 as libc::c_int
            |
            (7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 9 as libc::c_int |
            ((31 as libc::c_int as u32_0 &
                  (((0x1 as libc::c_int) << 4 as libc::c_int) -
                       1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                 |
                 (1 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 3 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     21 as libc::c_int |
                 (3 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 3 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     18 as libc::c_int |
                 (31 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 3 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     6 as libc::c_int |
                 (7 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 3 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     3 as libc::c_int |
                 (7 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 3 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     0 as libc::c_int);
    let fresh346 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_3: *mut Gfx = fresh346;
    (*_g_3).words.w0 =
        (0xfa as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_3).words.w1 =
        ((*this).windowColor[0 as libc::c_int as usize] as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            ((*this).windowColor[1 as libc::c_int as usize] as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            ((*this).windowColor[2 as libc::c_int as usize] as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            ((*this).windowAlpha as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh347 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_4: *mut Gfx = fresh347;
    (*_g_4).words.w0 =
        (0xfb as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_4).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    Matrix_Translate(0.0f32, 0.0f32, -93.6f32,
                     MTXMODE_NEW as libc::c_int as u8_0);
    Matrix_Scale(0.78f32, 0.78f32, 0.78f32,
                 MTXMODE_APPLY as libc::c_int as u8_0);
    Matrix_RotateX((*this).windowRot / 100.0f32,
                   MTXMODE_APPLY as libc::c_int as u8_0);
    let fresh348 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_5: *mut Gfx = fresh348;
    (*_g_5).words.w0 =
        (0xda as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            ((::std::mem::size_of::<Mtx>() as
                  libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                  libc::c_uint).wrapping_div(8
                                                                                 as
                                                                                 libc::c_int
                                                                                 as
                                                                                 libc::c_uint)
                 &
                 (((0x1 as libc::c_int) << 5 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (((0 as libc::c_int | 0x2 as libc::c_int | 0 as libc::c_int) ^
                  0x1 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_5).words.w1 =
        Matrix_NewMtx((*this).state.gfxCtx,
                      b"../z_file_choose.c\x00" as *const u8 as
                          *const libc::c_char as *mut libc::c_char,
                      2810 as libc::c_int) as libc::c_uint;
    let fresh349 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_6: *mut Gfx = fresh349;
    (*_g_6).words.w0 =
        (0x1 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (32 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            ((0 as libc::c_int + 32 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 7 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 1 as libc::c_int;
    (*_g_6).words.w1 =
        &mut *(*this).windowVtx.offset(0 as libc::c_int as isize) as *mut Vtx
            as libc::c_uint;
    let fresh350 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_7: *mut Gfx = fresh350;
    (*_g_7).words.w0 =
        (0xde as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_7).words.w1 = gFileSelWindow1DL.as_mut_ptr() as libc::c_uint;
    let fresh351 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_8: *mut Gfx = fresh351;
    (*_g_8).words.w0 =
        (0x1 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (32 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            ((0 as libc::c_int + 32 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 7 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 1 as libc::c_int;
    (*_g_8).words.w1 =
        &mut *(*this).windowVtx.offset(32 as libc::c_int as isize) as *mut Vtx
            as libc::c_uint;
    let fresh352 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_9: *mut Gfx = fresh352;
    (*_g_9).words.w0 =
        (0xde as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_9).words.w1 = gFileSelWindow2DL.as_mut_ptr() as libc::c_uint;
    let fresh353 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_10: *mut Gfx = fresh353;
    (*_g_10).words.w0 =
        (0x1 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (16 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            ((0 as libc::c_int + 16 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 7 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 1 as libc::c_int;
    (*_g_10).words.w1 =
        &mut *(*this).windowVtx.offset(64 as libc::c_int as isize) as *mut Vtx
            as libc::c_uint;
    let fresh354 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_11: *mut Gfx = fresh354;
    (*_g_11).words.w0 =
        (0xde as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_11).words.w1 = gFileSelWindow3DL.as_mut_ptr() as libc::c_uint;
    FileChoose_DrawWindowContents(&mut (*this).state);
    let fresh355 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_12: *mut Gfx = fresh355;
    (*_g_12).words.w0 =
        (0xe7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_12).words.w1 = 0 as libc::c_int as libc::c_uint;
    FileChoose_SetView(this, 0.0f32, 0.0f32, 64.0f32);
    Graph_CloseDisps(dispRefs.as_mut_ptr(), (*this).state.gfxCtx,
                     b"../z_file_choose.c\x00" as *const u8 as
                         *const libc::c_char, 2834 as libc::c_int);
}
static mut gFileSelectDrawFuncs:
       [Option<unsafe extern "C" fn(_: *mut GameState) -> ()>; 3] =
    unsafe {
        [Some(FileChoose_InitModeDraw as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_ConfigModeDraw as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_SelectModeDraw as
                  unsafe extern "C" fn(_: *mut GameState) -> ())]
    };
static mut gFileSelectUpdateFuncs:
       [Option<unsafe extern "C" fn(_: *mut GameState) -> ()>; 3] =
    unsafe {
        [Some(FileChoose_InitModeUpdate as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_ConfigModeUpdate as
                  unsafe extern "C" fn(_: *mut GameState) -> ()),
         Some(FileChoose_SelectModeUpdate as
                  unsafe extern "C" fn(_: *mut GameState) -> ())]
    };
#[no_mangle]
pub unsafe extern "C" fn FileChoose_Main(mut thisx: *mut GameState) {
    static mut controlsTextures: [*mut libc::c_void; 3] =
        unsafe {
            [gFileSelControlsENGTex.as_ptr() as *mut _ as *mut libc::c_void,
             gFileSelControlsGERTex.as_ptr() as *mut _ as *mut libc::c_void,
             gFileSelControlsFRATex.as_ptr() as *mut _ as *mut libc::c_void]
        };
    let mut this: *mut FileChooseContext = thisx as *mut FileChooseContext;
    let mut input: *mut Input =
        &mut *(*this).state.input.as_mut_ptr().offset(0 as libc::c_int as
                                                          isize) as
            *mut Input;
    let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
    let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
    __gfxCtx = (*this).state.gfxCtx;
    Graph_OpenDisps(dispRefs.as_mut_ptr(), (*this).state.gfxCtx,
                    b"../z_file_choose.c\x00" as *const u8 as
                        *const libc::c_char, 2898 as libc::c_int);
    (*this).n64ddFlag = 0 as libc::c_int as u8_0;
    let fresh356 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g: *mut Gfx = fresh356;
    (*_g).words.w0 =
        (0xdb as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0x6 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            ((0 as libc::c_int * 4 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g).words.w1 = 0 as *mut libc::c_void as libc::c_uint;
    let fresh357 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_0: *mut Gfx = fresh357;
    (*_g_0).words.w0 =
        (0xdb as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0x6 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            ((0x1 as libc::c_int * 4 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_0).words.w1 = (*this).staticSegment as libc::c_uint;
    let fresh358 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_1: *mut Gfx = fresh358;
    (*_g_1).words.w0 =
        (0xdb as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0x6 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            ((0x2 as libc::c_int * 4 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_1).words.w1 = (*this).parameterSegment as libc::c_uint;
    func_80095248((*this).state.gfxCtx, 0 as libc::c_int as u8_0,
                  0 as libc::c_int as u8_0, 0 as libc::c_int as u8_0);
    (*this).stickRelX = (*input).rel.stick_x as s16;
    (*this).stickRelY = (*input).rel.stick_y as s16;
    if ((*this).stickRelX as libc::c_int) < -(30 as libc::c_int) {
        if (*this).stickXDir as libc::c_int == -(1 as libc::c_int) {
            (*this).inputTimerX -= 1;
            if ((*this).inputTimerX as libc::c_int) < 0 as libc::c_int {
                (*this).inputTimerX = 2 as libc::c_int as s16
            } else { (*this).stickRelX = 0 as libc::c_int as s16 }
        } else {
            (*this).inputTimerX = 10 as libc::c_int as s16;
            (*this).stickXDir = -(1 as libc::c_int) as s16
        }
    } else if (*this).stickRelX as libc::c_int > 30 as libc::c_int {
        if (*this).stickXDir as libc::c_int == 1 as libc::c_int {
            (*this).inputTimerX -= 1;
            if ((*this).inputTimerX as libc::c_int) < 0 as libc::c_int {
                (*this).inputTimerX = 2 as libc::c_int as s16
            } else { (*this).stickRelX = 0 as libc::c_int as s16 }
        } else {
            (*this).inputTimerX = 10 as libc::c_int as s16;
            (*this).stickXDir = 1 as libc::c_int as s16
        }
    } else { (*this).stickXDir = 0 as libc::c_int as s16 }
    if ((*this).stickRelY as libc::c_int) < -(30 as libc::c_int) {
        if (*this).stickYDir as libc::c_int == -(1 as libc::c_int) {
            (*this).inputTimerY =
                ((*this).inputTimerY as libc::c_int - 1 as libc::c_int) as
                    s16;
            if ((*this).inputTimerY as libc::c_int) < 0 as libc::c_int {
                (*this).inputTimerY = 2 as libc::c_int as s16
            } else { (*this).stickRelY = 0 as libc::c_int as s16 }
        } else {
            (*this).inputTimerY = 10 as libc::c_int as s16;
            (*this).stickYDir = -(1 as libc::c_int) as s16
        }
    } else if (*this).stickRelY as libc::c_int > 30 as libc::c_int {
        if (*this).stickYDir as libc::c_int == 1 as libc::c_int {
            (*this).inputTimerY =
                ((*this).inputTimerY as libc::c_int - 1 as libc::c_int) as
                    s16;
            if ((*this).inputTimerY as libc::c_int) < 0 as libc::c_int {
                (*this).inputTimerY = 2 as libc::c_int as s16
            } else { (*this).stickRelY = 0 as libc::c_int as s16 }
        } else {
            (*this).inputTimerY = 10 as libc::c_int as s16;
            (*this).stickYDir = 1 as libc::c_int as s16
        }
    } else { (*this).stickYDir = 0 as libc::c_int as s16 }
    (*this).emptyFileTextAlpha = 0 as libc::c_int as s16;
    FileChoose_PulsateCursor(&mut (*this).state);
    gFileSelectUpdateFuncs[(*this).menuMode as
                               usize].expect("non-null function pointer")(&mut (*this).state);
    gFileSelectDrawFuncs[(*this).menuMode as
                             usize].expect("non-null function pointer")(&mut (*this).state);
    // do not draw controls text in the options menu
    if (*this).configMode as libc::c_int <=
           CM_NAME_ENTRY_TO_MAIN as libc::c_int ||
           (*this).configMode as libc::c_int >= CM_UNUSED_DELAY as libc::c_int
       {
        func_800944C4((*this).state.gfxCtx);
        let fresh359 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_2: *mut Gfx = fresh359;
        (*_g_2).words.w0 =
            (0xfc as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (((3 as libc::c_int as u32_0 &
                       (((0x1 as libc::c_int) << 4 as libc::c_int) -
                            1 as libc::c_int) as libc::c_uint) <<
                      20 as libc::c_int |
                      (1 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          15 as libc::c_int |
                      (1 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          12 as libc::c_int |
                      (3 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          9 as libc::c_int |
                      ((3 as libc::c_int as u32_0 &
                            (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                 1 as libc::c_int) as libc::c_uint) <<
                           5 as libc::c_int |
                           (1 as libc::c_int as u32_0 &
                                (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                     1 as libc::c_int) as libc::c_uint) <<
                               0 as libc::c_int)) &
                     (((0x1 as libc::c_int) << 24 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_2).words.w1 =
            (5 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 28 as libc::c_int
                |
                (5 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    15 as libc::c_int |
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    9 as libc::c_int |
                ((5 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 4 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     24 as libc::c_int |
                     (1 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         21 as libc::c_int |
                     (3 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         18 as libc::c_int |
                     (5 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         6 as libc::c_int |
                     (7 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         3 as libc::c_int |
                     (7 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         0 as libc::c_int);
        let fresh360 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_3: *mut Gfx = fresh360;
        (*_g_3).words.w0 =
            (0xfa as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_3).words.w1 =
            (100 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                ((*this).controlsAlpha as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh361 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_4: *mut Gfx = fresh361;
        (*_g_4).words.w0 =
            (0xfb as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_4).words.w1 =
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh362 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_5: *mut Gfx = fresh362;
        (*_g_5).words.w0 =
            (0xfd as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (3 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    21 as libc::c_int |
                (2 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((1 as libc::c_int - 1 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_5).words.w1 =
            controlsTextures[gSaveContext.language as usize] as libc::c_uint;
        let fresh363 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_6: *mut Gfx = fresh363;
        (*_g_6).words.w0 =
            (0xf5 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (3 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    21 as libc::c_int |
                (2 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 9 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    9 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 9 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_6).words.w1 =
            (7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    20 as libc::c_int |
                ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    18 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    14 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    10 as libc::c_int |
                ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    4 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh364 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_7: *mut Gfx = fresh364;
        (*_g_7).words.w0 =
            (0xe6 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_7).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh365 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_8: *mut Gfx = fresh365;
        (*_g_8).words.w0 =
            (0xf3 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_8).words.w1 =
            (7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((if ((144 as libc::c_int * 16 as libc::c_int +
                           1 as libc::c_int >> 1 as libc::c_int) -
                          1 as libc::c_int) < 2047 as libc::c_int {
                      (144 as libc::c_int * 16 as libc::c_int +
                           1 as libc::c_int >> 1 as libc::c_int) -
                          1 as libc::c_int
                  } else { 2047 as libc::c_int }) as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (((((1 as libc::c_int) << 11 as libc::c_int) +
                       (if 1 as libc::c_int >
                               144 as libc::c_int * 1 as libc::c_int /
                                   8 as libc::c_int {
                            1 as libc::c_int
                        } else {
                            (144 as libc::c_int * 1 as libc::c_int) /
                                8 as libc::c_int
                        }) - 1 as libc::c_int) /
                      (if 1 as libc::c_int >
                              144 as libc::c_int * 1 as libc::c_int /
                                  8 as libc::c_int {
                           1 as libc::c_int
                       } else {
                           (144 as libc::c_int * 1 as libc::c_int) /
                               8 as libc::c_int
                       })) as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh366 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_9: *mut Gfx = fresh366;
        (*_g_9).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_9).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh367 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_10: *mut Gfx = fresh367;
        (*_g_10).words.w0 =
            (0xf5 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (3 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    21 as libc::c_int |
                (1 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((144 as libc::c_int * 1 as libc::c_int + 7 as libc::c_int >>
                      3 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 9 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    9 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 9 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_10).words.w1 =
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    20 as libc::c_int |
                ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    18 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    14 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    10 as libc::c_int |
                ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    4 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh368 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_11: *mut Gfx = fresh368;
        (*_g_11).words.w0 =
            (0xf2 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_11).words.w1 =
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (((144 as libc::c_int - 1 as libc::c_int) << 2 as libc::c_int)
                     as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (((16 as libc::c_int - 1 as libc::c_int) << 2 as libc::c_int)
                     as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh369 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_12: *mut Gfx = fresh369;
        (*_g_12).words.w0 =
            (0xe4 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0x3a8 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (0x370 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_12).words.w1 =
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0x168 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (0x330 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh370 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_13: *mut Gfx = fresh370;
        (*_g_13).words.w0 =
            (0xe1 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_13).words.w1 =
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh371 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_14: *mut Gfx = fresh371;
        (*_g_14).words.w0 =
            (0xf1 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_14).words.w1 =
            (0x400 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
                |
                (0x400 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int
    }
    let fresh372 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_15: *mut Gfx = fresh372;
    (*_g_15).words.w0 =
        (0xe7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_15).words.w1 = 0 as libc::c_int as libc::c_uint;
    let fresh373 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_16: *mut Gfx = fresh373;
    (*_g_16).words.w0 =
        (0xde as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_16).words.w1 = sScreenFillSetupDL.as_mut_ptr() as libc::c_uint;
    let fresh374 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_17: *mut Gfx = fresh374;
    (*_g_17).words.w0 =
        (0xfa as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_17).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (sScreenFillAlpha as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh375 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_18: *mut Gfx = fresh375;
    (*_g_18).words.w0 =
        (0xf6 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            ((gScreenWidth - 1 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 10 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 14 as libc::c_int
            |
            ((gScreenHeight - 1 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 10 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 2 as libc::c_int;
    (*_g_18).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 10 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 14 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 10 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 2 as libc::c_int;
    Graph_CloseDisps(dispRefs.as_mut_ptr(), (*this).state.gfxCtx,
                     b"../z_file_choose.c\x00" as *const u8 as
                         *const libc::c_char, 3035 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn FileChoose_InitContext(mut thisx: *mut GameState) {
    let mut this: *mut FileChooseContext = thisx as *mut FileChooseContext;
    let mut envCtx: *mut EnvironmentContext = &mut (*this).envCtx;
    let mut sramCtx: *mut SramContext = &mut (*this).sramCtx;
    Sram_Alloc(&mut (*this).state, sramCtx);
    (*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 7 as libc::c_int) as usize] =
        32 as libc::c_int as s16;
    (*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 8 as libc::c_int) as usize] =
        22 as libc::c_int as s16;
    (*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 9 as libc::c_int) as usize] =
        20 as libc::c_int as s16;
    (*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 10 as libc::c_int) as usize] =
        -(10 as libc::c_int) as s16;
    (*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 11 as libc::c_int) as usize] =
        0 as libc::c_int as s16;
    (*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 12 as libc::c_int) as usize] =
        1000 as libc::c_int as s16;
    (*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 13 as libc::c_int) as usize] =
        -(700 as libc::c_int) as s16;
    (*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 14 as libc::c_int) as usize] =
        164 as libc::c_int as s16;
    (*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 15 as libc::c_int) as usize] =
        104 as libc::c_int as s16;
    (*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 16 as libc::c_int) as usize] =
        160 as libc::c_int as s16;
    (*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 17 as libc::c_int) as usize] =
        100 as libc::c_int as s16;
    (*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 18 as libc::c_int) as usize] =
        162 as libc::c_int as s16;
    (*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 19 as libc::c_int) as usize] =
        152 as libc::c_int as s16;
    (*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 20 as libc::c_int) as usize] =
        214 as libc::c_int as s16;
    (*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 13 as libc::c_int) as usize] =
        580 as libc::c_int as s16;
    (*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 14 as libc::c_int) as usize] =
        400 as libc::c_int as s16;
    (*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 35 as libc::c_int) as usize] =
        20 as libc::c_int as s16;
    (*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 36 as libc::c_int) as usize] =
        20 as libc::c_int as s16;
    (*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 37 as libc::c_int) as usize] =
        20 as libc::c_int as s16;
    (*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 43 as libc::c_int) as usize] =
        8 as libc::c_int as s16;
    (*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 44 as libc::c_int) as usize] =
        -(78 as libc::c_int) as s16;
    (*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 45 as libc::c_int) as usize] =
        0 as libc::c_int as s16;
    (*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 46 as libc::c_int) as usize] =
        0 as libc::c_int as s16;
    (*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 47 as libc::c_int) as usize] =
        0 as libc::c_int as s16;
    (*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 48 as libc::c_int) as usize] =
        0 as libc::c_int as s16;
    (*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 49 as libc::c_int) as usize] =
        3 as libc::c_int as s16;
    (*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 50 as libc::c_int) as usize] =
        8 as libc::c_int as s16;
    (*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 51 as libc::c_int) as usize] =
        8 as libc::c_int as s16;
    (*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 52 as libc::c_int) as usize] =
        10 as libc::c_int as s16;
    (*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 73 as libc::c_int) as usize] =
        0 as libc::c_int as s16;
    (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 0 as libc::c_int) as usize] =
        14 as libc::c_int as s16;
    (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 1 as libc::c_int) as usize] =
        5 as libc::c_int as s16;
    (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 2 as libc::c_int) as usize] =
        4 as libc::c_int as s16;
    (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 4 as libc::c_int) as usize] =
        1 as libc::c_int as s16;
    (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 5 as libc::c_int) as usize] =
        6 as libc::c_int as s16;
    (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 6 as libc::c_int) as usize] =
        2 as libc::c_int as s16;
    (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 7 as libc::c_int) as usize] =
        6 as libc::c_int as s16;
    (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 8 as libc::c_int) as usize] =
        80 as libc::c_int as s16;
    sScreenFillAlpha = 255 as libc::c_int as s16;
    (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 10 as libc::c_int) as usize] =
        10 as libc::c_int as s16;
    (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 11 as libc::c_int) as usize] =
        30 as libc::c_int as s16;
    (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 12 as libc::c_int) as usize] =
        -(100 as libc::c_int) as s16;
    (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 13 as libc::c_int) as usize] =
        -(85 as libc::c_int) as s16;
    (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 14 as libc::c_int) as usize] =
        4 as libc::c_int as s16;
    (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 16 as libc::c_int) as usize] =
        25 as libc::c_int as s16;
    (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 17 as libc::c_int) as usize] =
        1 as libc::c_int as s16;
    (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 18 as libc::c_int) as usize] =
        1 as libc::c_int as s16;
    (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 20 as libc::c_int) as usize] =
        92 as libc::c_int as s16;
    (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 21 as libc::c_int) as usize] =
        171 as libc::c_int as s16;
    (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 22 as libc::c_int) as usize] =
        11 as libc::c_int as s16;
    (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 23 as libc::c_int) as usize] =
        10 as libc::c_int as s16;
    (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 24 as libc::c_int) as usize] =
        26 as libc::c_int as s16;
    (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 25 as libc::c_int) as usize] =
        2 as libc::c_int as s16;
    (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 26 as libc::c_int) as usize] =
        1 as libc::c_int as s16;
    (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 27 as libc::c_int) as usize] =
        0 as libc::c_int as s16;
    (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 28 as libc::c_int) as usize] =
        0 as libc::c_int as s16;
    (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 29 as libc::c_int) as usize] =
        160 as libc::c_int as s16;
    (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 30 as libc::c_int) as usize] =
        64 as libc::c_int as s16;
    (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 31 as libc::c_int) as usize] =
        154 as libc::c_int as s16;
    (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 32 as libc::c_int) as usize] =
        152 as libc::c_int as s16;
    (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 33 as libc::c_int) as usize] =
        106 as libc::c_int as s16;
    (*gGameInfo).data[(18 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 38 as libc::c_int) as usize] =
        16 as libc::c_int as s16;
    (*gGameInfo).data[(18 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 39 as libc::c_int) as usize] =
        9 as libc::c_int as s16;
    (*gGameInfo).data[(18 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 40 as libc::c_int) as usize] =
        10 as libc::c_int as s16;
    (*gGameInfo).data[(18 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 41 as libc::c_int) as usize] =
        14 as libc::c_int as s16;
    (*gGameInfo).data[(18 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 42 as libc::c_int) as usize] =
        11 as libc::c_int as s16;
    (*gGameInfo).data[(18 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 43 as libc::c_int) as usize] =
        12 as libc::c_int as s16;
    (*this).menuMode = FS_MENU_MODE_INIT as libc::c_int as s16;
    (*this).confirmButtonIndex = 0 as libc::c_int as s16;
    (*this).copyDestFileIndex = (*this).confirmButtonIndex;
    (*this).selectedFileIndex = (*this).copyDestFileIndex;
    (*this).selectMode = (*this).selectedFileIndex;
    (*this).buttonIndex = (*this).selectMode;
    (*this).confirmButtonTexIndices[0 as libc::c_int as usize] =
        2 as libc::c_int as s16;
    (*this).confirmButtonTexIndices[1 as libc::c_int as usize] =
        3 as libc::c_int as s16;
    (*this).titleLabel = FS_TITLE_SELECT_FILE as libc::c_int as s16;
    (*this).nextTitleLabel = FS_TITLE_OPEN_FILE as libc::c_int as s16;
    (*this).highlightPulseDir = 1 as libc::c_int as s16;
    (*this).unk_1CAAC = 0xc as libc::c_int as s16;
    (*this).highlightColor[0 as libc::c_int as usize] =
        155 as libc::c_int as s16;
    (*this).highlightColor[1 as libc::c_int as usize] =
        255 as libc::c_int as s16;
    (*this).highlightColor[2 as libc::c_int as usize] =
        255 as libc::c_int as s16;
    (*this).highlightColor[3 as libc::c_int as usize] =
        70 as libc::c_int as s16;
    (*this).configMode = CM_FADE_IN_START as libc::c_int as s16;
    (*this).windowRot = 0.0f32;
    (*this).inputTimerX = 0 as libc::c_int as s16;
    (*this).stickXDir = (*this).inputTimerX;
    (*this).inputTimerY = 0 as libc::c_int as s16;
    (*this).stickYDir = (*this).inputTimerY;
    (*this).charIndex = 0 as libc::c_int as s16;
    (*this).kbdY = (*this).charIndex;
    (*this).kbdX = (*this).kbdY;
    (*this).kbdButton = FS_KBD_BTN_NONE as libc::c_int as s16;
    (*this).windowColor[0 as libc::c_int as usize] =
        100 as libc::c_int as s16;
    (*this).windowColor[1 as libc::c_int as usize] =
        150 as libc::c_int as s16;
    (*this).windowColor[2 as libc::c_int as usize] =
        255 as libc::c_int as s16;
    (*this).emptyFileTextAlpha = 0 as libc::c_int as s16;
    (*this).controlsAlpha = (*this).emptyFileTextAlpha;
    (*this).nameEntryBoxAlpha = (*this).controlsAlpha;
    (*this).optionButtonAlpha = (*this).nameEntryBoxAlpha;
    (*this).confirmButtonAlpha[FS_BTN_CONFIRM_QUIT as libc::c_int as usize] =
        (*this).optionButtonAlpha;
    (*this).confirmButtonAlpha[FS_BTN_CONFIRM_YES as libc::c_int as usize] =
        (*this).confirmButtonAlpha[FS_BTN_CONFIRM_QUIT as libc::c_int as
                                       usize];
    (*this).actionButtonAlpha[FS_BTN_ACTION_ERASE as libc::c_int as usize] =
        (*this).confirmButtonAlpha[FS_BTN_CONFIRM_YES as libc::c_int as
                                       usize];
    (*this).actionButtonAlpha[FS_BTN_ACTION_COPY as libc::c_int as usize] =
        (*this).actionButtonAlpha[FS_BTN_ACTION_ERASE as libc::c_int as
                                      usize];
    (*this).fileInfoAlpha[2 as libc::c_int as usize] =
        (*this).actionButtonAlpha[FS_BTN_ACTION_COPY as libc::c_int as usize];
    (*this).fileInfoAlpha[1 as libc::c_int as usize] =
        (*this).fileInfoAlpha[2 as libc::c_int as usize];
    (*this).fileInfoAlpha[0 as libc::c_int as usize] =
        (*this).fileInfoAlpha[1 as libc::c_int as usize];
    (*this).connectorAlpha[2 as libc::c_int as usize] =
        (*this).fileInfoAlpha[0 as libc::c_int as usize];
    (*this).connectorAlpha[1 as libc::c_int as usize] =
        (*this).connectorAlpha[2 as libc::c_int as usize];
    (*this).connectorAlpha[0 as libc::c_int as usize] =
        (*this).connectorAlpha[1 as libc::c_int as usize];
    (*this).nameAlpha[2 as libc::c_int as usize] =
        (*this).connectorAlpha[0 as libc::c_int as usize];
    (*this).nameAlpha[1 as libc::c_int as usize] =
        (*this).nameAlpha[2 as libc::c_int as usize];
    (*this).nameAlpha[0 as libc::c_int as usize] =
        (*this).nameAlpha[1 as libc::c_int as usize];
    (*this).nameBoxAlpha[2 as libc::c_int as usize] =
        (*this).nameAlpha[0 as libc::c_int as usize];
    (*this).nameBoxAlpha[1 as libc::c_int as usize] =
        (*this).nameBoxAlpha[2 as libc::c_int as usize];
    (*this).nameBoxAlpha[0 as libc::c_int as usize] =
        (*this).nameBoxAlpha[1 as libc::c_int as usize];
    (*this).fileButtonAlpha[2 as libc::c_int as usize] =
        (*this).nameBoxAlpha[0 as libc::c_int as usize];
    (*this).fileButtonAlpha[1 as libc::c_int as usize] =
        (*this).fileButtonAlpha[2 as libc::c_int as usize];
    (*this).fileButtonAlpha[0 as libc::c_int as usize] =
        (*this).fileButtonAlpha[1 as libc::c_int as usize];
    (*this).titleAlpha[1 as libc::c_int as usize] =
        (*this).fileButtonAlpha[0 as libc::c_int as usize];
    (*this).titleAlpha[0 as libc::c_int as usize] =
        (*this).titleAlpha[1 as libc::c_int as usize];
    (*this).windowAlpha = (*this).titleAlpha[0 as libc::c_int as usize];
    (*this).windowPosX = 6 as libc::c_int as s16;
    (*this).actionTimer = 8 as libc::c_int as s16;
    (*this).warningLabel = FS_WARNING_NONE as libc::c_int as s16;
    (*this).fileNamesY[2 as libc::c_int as usize] = 0 as libc::c_int as s16;
    (*this).fileNamesY[1 as libc::c_int as usize] =
        (*this).fileNamesY[2 as libc::c_int as usize];
    (*this).fileNamesY[0 as libc::c_int as usize] =
        (*this).fileNamesY[1 as libc::c_int as usize];
    (*this).buttonYOffsets[5 as libc::c_int as usize] =
        (*this).fileNamesY[0 as libc::c_int as usize];
    (*this).buttonYOffsets[4 as libc::c_int as usize] =
        (*this).buttonYOffsets[5 as libc::c_int as usize];
    (*this).buttonYOffsets[3 as libc::c_int as usize] =
        (*this).buttonYOffsets[4 as libc::c_int as usize];
    (*this).buttonYOffsets[2 as libc::c_int as usize] =
        (*this).buttonYOffsets[3 as libc::c_int as usize];
    (*this).buttonYOffsets[1 as libc::c_int as usize] =
        (*this).buttonYOffsets[2 as libc::c_int as usize];
    (*this).buttonYOffsets[0 as libc::c_int as usize] =
        (*this).buttonYOffsets[1 as libc::c_int as usize];
    (*this).warningButtonIndex =
        (*this).buttonYOffsets[0 as libc::c_int as usize];
    (*this).unk_1CAD6[0 as libc::c_int as usize] = 0 as libc::c_int as s16;
    (*this).unk_1CAD6[1 as libc::c_int as usize] = 3 as libc::c_int as s16;
    (*this).unk_1CAD6[2 as libc::c_int as usize] = 6 as libc::c_int as s16;
    (*this).unk_1CAD6[3 as libc::c_int as usize] = 8 as libc::c_int as s16;
    (*this).unk_1CAD6[4 as libc::c_int as usize] = 10 as libc::c_int as s16;
    ShrinkWindow_SetVal(0 as libc::c_int);
    gSaveContext.skyboxTime = 0 as libc::c_int as u16_0;
    gSaveContext.dayTime = 0 as libc::c_int as u16_0;
    Skybox_Init(&mut (*this).state, &mut (*this).skyboxCtx,
                SKYBOX_NORMAL_SKY as libc::c_int as s16);
    gTimeIncrement = 10 as libc::c_int as u16_0;
    (*envCtx).unk_19 = 0 as libc::c_int as u8_0;
    (*envCtx).unk_1A = 0 as libc::c_int as u16_0;
    (*envCtx).unk_21 = 0 as libc::c_int as u8_0;
    (*envCtx).unk_22 = 0 as libc::c_int as u16_0;
    (*envCtx).skyboxDmaState = SKYBOX_DMA_INACTIVE as libc::c_int as s8;
    (*envCtx).skybox1Index = 99 as libc::c_int as u8_0;
    (*envCtx).skybox2Index = 99 as libc::c_int as u8_0;
    (*envCtx).unk_1F = 0 as libc::c_int as u8_0;
    (*envCtx).unk_20 = 0 as libc::c_int as u8_0;
    (*envCtx).unk_BD = 0 as libc::c_int as u8_0;
    (*envCtx).unk_17 = 2 as libc::c_int as u8_0;
    (*envCtx).skyboxDisabled = 0 as libc::c_int as u8_0;
    (*envCtx).skyboxBlend = 0 as libc::c_int as u8_0;
    (*envCtx).unk_84 = 0.0f32;
    (*envCtx).unk_88 = 0.0f32;
    Environment_UpdateSkybox(SKYBOX_NORMAL_SKY as libc::c_int as u8_0,
                             &mut (*this).envCtx, &mut (*this).skyboxCtx);
    gSaveContext.buttonStatus[4 as libc::c_int as usize] =
        BTN_ENABLED as libc::c_int as u8_0;
    gSaveContext.buttonStatus[3 as libc::c_int as usize] =
        gSaveContext.buttonStatus[4 as libc::c_int as usize];
    gSaveContext.buttonStatus[2 as libc::c_int as usize] =
        gSaveContext.buttonStatus[3 as libc::c_int as usize];
    gSaveContext.buttonStatus[1 as libc::c_int as usize] =
        gSaveContext.buttonStatus[2 as libc::c_int as usize];
    gSaveContext.buttonStatus[0 as libc::c_int as usize] =
        gSaveContext.buttonStatus[1 as libc::c_int as usize];
    (*this).defense[2 as libc::c_int as usize] = 0 as libc::c_int as s8;
    (*this).defense[1 as libc::c_int as usize] =
        (*this).defense[2 as libc::c_int as usize];
    (*this).defense[0 as libc::c_int as usize] =
        (*this).defense[1 as libc::c_int as usize];
    (*this).n64ddFlags[2 as libc::c_int as usize] =
        (*this).defense[0 as libc::c_int as usize] as s16;
    (*this).n64ddFlags[1 as libc::c_int as usize] =
        (*this).n64ddFlags[2 as libc::c_int as usize];
    (*this).n64ddFlags[0 as libc::c_int as usize] =
        (*this).n64ddFlags[1 as libc::c_int as usize];
    SsSram_ReadWrite((0xa8000000 as libc::c_uint as
                          *mut libc::c_char).offset(-(0xa0000000 as
                                                          libc::c_uint as
                                                          isize)) as u32_0,
                     (*sramCtx).readBuff as *mut libc::c_void,
                     0x8000 as libc::c_int as size_t, 0 as libc::c_int);
    gSaveContext.language =
        *(*sramCtx).readBuff.offset(SRAM_HEADER_LANGUAGE as libc::c_int as
                                        isize);
    if gSaveContext.language as libc::c_int >= LANGUAGE_MAX as libc::c_int {
        gSaveContext.language = LANGUAGE_ENG as libc::c_int as u8_0;
        *(*sramCtx).readBuff.offset(SRAM_HEADER_LANGUAGE as libc::c_int as
                                        isize) = gSaveContext.language
    };
}
#[no_mangle]
pub unsafe extern "C" fn FileChoose_Destroy(mut thisx: *mut GameState) { }
#[no_mangle]
pub unsafe extern "C" fn FileChoose_Init(mut thisx: *mut GameState) {
    let mut this: *mut FileChooseContext = thisx as *mut FileChooseContext;
    let mut size: u32_0 =
        (_title_staticSegmentRomEnd.as_mut_ptr() as
             u32_0).wrapping_sub(_title_staticSegmentRomStart.as_mut_ptr() as
                                     u32_0);
    let mut pad: s32 = 0;
    (*gGameInfo).data[(1 as libc::c_int * 6 as libc::c_int * 16 as libc::c_int
                           + 30 as libc::c_int) as usize] =
        1 as libc::c_int as s16;
    osSyncPrintf(b"SIZE=%x\n\x00" as *const u8 as *const libc::c_char, size);
    (*this).staticSegment =
        GameState_Alloc(&mut (*this).state, size as size_t,
                        b"../z_file_choose.c\x00" as *const u8 as
                            *const libc::c_char as *mut libc::c_char,
                        3392 as libc::c_int) as *mut u8_0;
    if !(*this).staticSegment.is_null() {
    } else {
        __assert(b"this->staticSegment != NULL\x00" as *const u8 as
                     *const libc::c_char,
                 b"../z_file_choose.c\x00" as *const u8 as
                     *const libc::c_char, 3393 as libc::c_int);
    };
    DmaMgr_SendRequest1((*this).staticSegment as *mut libc::c_void,
                        _title_staticSegmentRomStart.as_mut_ptr() as u32_0,
                        size,
                        b"../z_file_choose.c\x00" as *const u8 as
                            *const libc::c_char, 3394 as libc::c_int);
    size =
        (_parameter_staticSegmentRomEnd.as_mut_ptr() as
             u32_0).wrapping_sub(_parameter_staticSegmentRomStart.as_mut_ptr()
                                     as u32_0);
    (*this).parameterSegment =
        GameState_Alloc(&mut (*this).state, size as size_t,
                        b"../z_file_choose.c\x00" as *const u8 as
                            *const libc::c_char as *mut libc::c_char,
                        3398 as libc::c_int) as *mut u8_0;
    if !(*this).parameterSegment.is_null() {
    } else {
        __assert(b"this->parameterSegment != NULL\x00" as *const u8 as
                     *const libc::c_char,
                 b"../z_file_choose.c\x00" as *const u8 as
                     *const libc::c_char, 3399 as libc::c_int);
    };
    DmaMgr_SendRequest1((*this).parameterSegment as *mut libc::c_void,
                        _parameter_staticSegmentRomStart.as_mut_ptr() as
                            u32_0, size,
                        b"../z_file_choose.c\x00" as *const u8 as
                            *const libc::c_char, 3400 as libc::c_int);
    Matrix_Init(&mut (*this).state);
    View_Init(&mut (*this).view, (*this).state.gfxCtx);
    (*this).state.main =
        Some(FileChoose_Main as
                 unsafe extern "C" fn(_: *mut GameState) -> ());
    (*this).state.destroy =
        Some(FileChoose_Destroy as
                 unsafe extern "C" fn(_: *mut GameState) -> ());
    FileChoose_InitContext(&mut (*this).state);
    Font_LoadOrderedFont(&mut (*this).font);
    Audio_QueueSeqCmd(((0xf as libc::c_int) << 28 as libc::c_int |
                           (SEQ_PLAYER_BGM_MAIN as libc::c_int) <<
                               24 as libc::c_int | 0xa as libc::c_int) as
                          u32_0);
    func_800F5E18(SEQ_PLAYER_BGM_MAIN as libc::c_int as u8_0,
                  0x57 as libc::c_int as u16_0, 0 as libc::c_int as u8_0,
                  7 as libc::c_int as s8, 1 as libc::c_int as s8);
}
