#![allow(dead_code, mutable_transmutes, non_camel_case_types, non_snake_case,
         non_upper_case_globals, unused_assignments, unused_mut)]
#![register_tool(c2rust)]
#![feature(const_raw_ptr_to_usize_cast, register_tool)]
extern "C" {
    #[no_mangle]
    fn DmaMgr_SendRequest2(req: *mut DmaRequest, ram: u32_0, vrom: u32_0,
                           size: u32_0, unk5: u32_0, queue: *mut OSMesgQueue,
                           msg: OSMesg, file: *const libc::c_char, line: s32)
     -> s32;
    #[no_mangle]
    fn osSyncPrintf(fmt: *const libc::c_char, _: ...);
    #[no_mangle]
    fn osRecvMesg(mq: *mut OSMesgQueue, msg: *mut OSMesg, flag: s32) -> s32;
    #[no_mangle]
    fn osCreateMesgQueue(mq: *mut OSMesgQueue, msg: *mut OSMesg, count: s32);
    #[no_mangle]
    fn FlagSet_Update(globalCtx: *mut GlobalContext);
    #[no_mangle]
    fn func_8002C124(targetCtx: *mut TargetContext,
                     globalCtx: *mut GlobalContext);
    #[no_mangle]
    fn Flags_GetSwitch(globalCtx: *mut GlobalContext, flag: s32) -> s32;
    #[no_mangle]
    fn func_8002DF54(globalCtx: *mut GlobalContext, actor: *mut Actor,
                     arg2: u8_0) -> s32;
    #[no_mangle]
    fn func_8006D0AC(globalCtx: *mut GlobalContext);
    #[no_mangle]
    fn HealthMeter_Update(globalCtx: *mut GlobalContext);
    #[no_mangle]
    fn HealthMeter_Draw(globalCtx: *mut GlobalContext);
    #[no_mangle]
    fn HealthMeter_HandleCriticalAlarm(globalCtx: *mut GlobalContext);
    #[no_mangle]
    fn Minimap_Draw(globalCtx: *mut GlobalContext);
    #[no_mangle]
    fn Map_Update(globalCtx: *mut GlobalContext);
    #[no_mangle]
    fn Player_InCsMode(globalCtx: *mut GlobalContext) -> s32;
    #[no_mangle]
    fn func_8008F2F8(globalCtx: *mut GlobalContext) -> s32;
    #[no_mangle]
    fn func_80094520(gfxCtx: *mut GraphicsContext);
    #[no_mangle]
    fn func_80094A14(gfxCtx: *mut GraphicsContext);
    #[no_mangle]
    fn Inventory_ChangeUpgrade(upgrade: s16, value: s16);
    #[no_mangle]
    fn func_800AA358(view: *mut View, eye: *mut Vec3f, lookAt: *mut Vec3f,
                     up: *mut Vec3f);
    #[no_mangle]
    fn func_800AA460(view: *mut View, fovy: f32_0, near: f32_0, far: f32_0);
    #[no_mangle]
    fn View_SetViewport(view: *mut View, viewport: *mut Viewport);
    #[no_mangle]
    fn func_800AB2C4(view: *mut View) -> s32;
    #[no_mangle]
    fn func_800AB560(view: *mut View) -> s32;
    #[no_mangle]
    fn Gameplay_InCsMode(globalCtx: *mut GlobalContext) -> s32;
    #[no_mangle]
    fn Graph_Alloc(gfxCtx: *mut GraphicsContext, size: size_t)
     -> *mut libc::c_void;
    #[no_mangle]
    fn Graph_OpenDisps(dispRefs: *mut *mut Gfx, gfxCtx: *mut GraphicsContext,
                       file: *const libc::c_char, line: s32);
    #[no_mangle]
    fn Graph_CloseDisps(dispRefs: *mut *mut Gfx, gfxCtx: *mut GraphicsContext,
                        file: *const libc::c_char, line: s32);
    #[no_mangle]
    fn Matrix_Translate(x: f32_0, y: f32_0, z: f32_0, mode: u8_0);
    #[no_mangle]
    fn Matrix_Scale(x: f32_0, y: f32_0, z: f32_0, mode: u8_0);
    #[no_mangle]
    fn Matrix_RotateX(x: f32_0, mode: u8_0);
    #[no_mangle]
    fn Matrix_NewMtx(gfxCtx: *mut GraphicsContext, file: *mut libc::c_char,
                     line: s32) -> *mut Mtx;
    #[no_mangle]
    fn func_800F4524(pos: *mut Vec3f, sfxId: u16_0, arg2: s8);
    #[no_mangle]
    fn func_800F6964(_: u16_0);
    #[no_mangle]
    fn Audio_PlaySoundGeneral(sfxId: u16_0, pos: *mut Vec3f, token: u8_0,
                              freqScale: *mut f32_0, a4: *mut f32_0,
                              reverbAdd: *mut s8);
    #[no_mangle]
    fn Message_StartTextbox(globalCtx: *mut GlobalContext, textId: u16_0,
                            actor: *mut Actor);
    #[no_mangle]
    fn Message_GetState(msgCtx: *mut MessageContext) -> u8_0;
    #[no_mangle]
    static mut gSaveContext: SaveContext;
    #[no_mangle]
    static mut gEquipNegMasks: [u16_0; 4];
    #[no_mangle]
    static mut gBitFlags: [u32_0; 32];
    #[no_mangle]
    static mut gEquipShifts: [u8_0; 4];
    #[no_mangle]
    static mut gEquipMasks: [u16_0; 4];
    #[no_mangle]
    static mut _icon_item_staticSegmentRomStart: [u8_0; 0];
    #[no_mangle]
    static mut gItemSlots: [u8_0; 56];
    #[no_mangle]
    static mut D_801333E8: s8;
    #[no_mangle]
    static mut D_801333E0: f32_0;
    #[no_mangle]
    static mut D_801333D4: Vec3f;
    #[no_mangle]
    static mut gUpgradeShifts: [u8_0; 8];
    #[no_mangle]
    static mut gUpgradeMasks: [u32_0; 8];
    #[no_mangle]
    static mut gUpgradeCapacities: [[u16_0; 4]; 8];
    #[no_mangle]
    static mut gSegments: [u32_0; 16];
    #[no_mangle]
    static mut _do_action_staticSegmentRomStart: [u8_0; 0];
    #[no_mangle]
    static mut gScreenHeight: s32;
    #[no_mangle]
    static mut gScreenWidth: s32;
    #[no_mangle]
    static mut gGameInfo: *mut GameInfo;
    #[no_mangle]
    static mut gItemIcons: [*mut libc::c_void; 130];
    #[no_mangle]
    static mut gMtxClear: Mtx;
    #[no_mangle]
    static mut gTimeIncrement: u16_0;
    #[no_mangle]
    static mut gButtonBackgroundTex: [u64_0; 0];
    #[no_mangle]
    static mut gSmallKeyCounterIconTex: [u64_0; 0];
    #[no_mangle]
    static mut gRupeeCounterIconTex: [u64_0; 0];
    #[no_mangle]
    static mut gClockIconTex: [u64_0; 0];
    #[no_mangle]
    static mut gCarrotIconTex: [u64_0; 0];
    #[no_mangle]
    static mut gArcheryScoreIconTex: [u64_0; 0];
    #[no_mangle]
    static mut gNaviCUpENGTex: [u64_0; 0];
    #[no_mangle]
    static mut gCounterDigit0Tex: [u64_0; 0];
    #[no_mangle]
    static mut gAmmoDigit0Tex: [u64_0; 0];
    #[no_mangle]
    static mut gMagicBarEndTex: [u64_0; 0];
    #[no_mangle]
    static mut gMagicBarMidTex: [u64_0; 0];
    #[no_mangle]
    static mut gMagicBarFillTex: [u64_0; 0];
    #[no_mangle]
    static mut gAttackDoActionENGTex: [u64_0; 0];
    #[no_mangle]
    static mut gCheckDoActionENGTex: [u64_0; 0];
    #[no_mangle]
    static mut gMagicArrowEquipEffectTex: [u64_0; 0];
}
pub type s8 = libc::c_schar;
pub type u8_0 = libc::c_uchar;
pub type s16 = libc::c_short;
pub type u16_0 = libc::c_ushort;
pub type s32 = libc::c_int;
pub type u32_0 = libc::c_uint;
pub type u64_0 = libc::c_ulonglong;
pub type f32_0 = libc::c_float;
pub type Mtx_t = [[libc::c_long; 4]; 4];
#[derive(Copy, Clone)]
#[repr(C)]
pub union Mtx {
    pub m: Mtx_t,
    pub c2rust_unnamed: C2RustUnnamed,
    pub forc_structure_alignment: libc::c_longlong,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed {
    pub intPart: [[u16_0; 4]; 4],
    pub fracPart: [[u16_0; 4]; 4],
}
pub type MtxF_t = [[libc::c_float; 4]; 4];
#[derive(Copy, Clone)]
#[repr(C)]
pub union MtxF {
    pub mf: MtxF_t,
    pub c2rust_unnamed: C2RustUnnamed_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_0 {
    pub xx: libc::c_float,
    pub yx: libc::c_float,
    pub zx: libc::c_float,
    pub wx: libc::c_float,
    pub xy: libc::c_float,
    pub yy: libc::c_float,
    pub zy: libc::c_float,
    pub wy: libc::c_float,
    pub xz: libc::c_float,
    pub yz: libc::c_float,
    pub zz: libc::c_float,
    pub wz: libc::c_float,
    pub xw: libc::c_float,
    pub yw: libc::c_float,
    pub zw: libc::c_float,
    pub ww: libc::c_float,
}
pub type size_t = libc::c_ulong;
pub type OSPri = s32;
pub type OSId = s32;
#[derive(Copy, Clone)]
#[repr(C)]
pub union __OSfp {
    pub f: C2RustUnnamed_1,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_1 {
    pub f_odd: f32_0,
    pub f_even: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __OSThreadContext {
    pub at: u64_0,
    pub v0: u64_0,
    pub v1: u64_0,
    pub a0: u64_0,
    pub a1: u64_0,
    pub a2: u64_0,
    pub a3: u64_0,
    pub t0: u64_0,
    pub t1: u64_0,
    pub t2: u64_0,
    pub t3: u64_0,
    pub t4: u64_0,
    pub t5: u64_0,
    pub t6: u64_0,
    pub t7: u64_0,
    pub s0: u64_0,
    pub s1: u64_0,
    pub s2: u64_0,
    pub s3: u64_0,
    pub s4: u64_0,
    pub s5: u64_0,
    pub s6: u64_0,
    pub s7: u64_0,
    pub t8: u64_0,
    pub t9: u64_0,
    pub gp: u64_0,
    pub sp: u64_0,
    pub s8: u64_0,
    pub ra: u64_0,
    pub lo: u64_0,
    pub hi: u64_0,
    pub sr: u32_0,
    pub pc: u32_0,
    pub cause: u32_0,
    pub badvaddr: u32_0,
    pub rcp: u32_0,
    pub fpcsr: u32_0,
    pub fp0: __OSfp,
    pub fp2: __OSfp,
    pub fp4: __OSfp,
    pub fp6: __OSfp,
    pub fp8: __OSfp,
    pub fp10: __OSfp,
    pub fp12: __OSfp,
    pub fp14: __OSfp,
    pub fp16: __OSfp,
    pub fp18: __OSfp,
    pub fp20: __OSfp,
    pub fp22: __OSfp,
    pub fp24: __OSfp,
    pub fp26: __OSfp,
    pub fp28: __OSfp,
    pub fp30: __OSfp,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __OSThreadprofile {
    pub flag: u32_0,
    pub count: u32_0,
    pub time: u64_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSThread {
    pub next: *mut OSThread,
    pub priority: OSPri,
    pub queue: *mut *mut OSThread,
    pub tlnext: *mut OSThread,
    pub state: u16_0,
    pub flags: u16_0,
    pub id: OSId,
    pub fp: s32,
    pub thprof: *mut __OSThreadprofile,
    pub context: __OSThreadContext,
}
pub type OSMesg = *mut libc::c_void;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSMesgQueue {
    pub mtqueue: *mut OSThread,
    pub fullqueue: *mut OSThread,
    pub validCount: s32,
    pub first: s32,
    pub msgCount: s32,
    pub msg: *mut OSMesg,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSTask_t {
    pub type_0: u32_0,
    pub flags: u32_0,
    pub ucode_boot: *mut u64_0,
    pub ucode_boot_size: u32_0,
    pub ucode: *mut u64_0,
    pub ucode_size: u32_0,
    pub ucode_data: *mut u64_0,
    pub ucode_data_size: u32_0,
    pub dram_stack: *mut u64_0,
    pub dram_stack_size: u32_0,
    pub output_buff: *mut u64_0,
    pub output_buff_size: *mut u64_0,
    pub data_ptr: *mut u64_0,
    pub data_size: u32_0,
    pub yield_data_ptr: *mut u64_0,
    pub yield_data_size: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union OSTask {
    pub t: OSTask_t,
    pub force_structure_alignment: libc::c_longlong,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSViCommonRegs {
    pub ctrl: u32_0,
    pub width: u32_0,
    pub burst: u32_0,
    pub vSync: u32_0,
    pub hSync: u32_0,
    pub leap: u32_0,
    pub hStart: u32_0,
    pub xScale: u32_0,
    pub vCurrent: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSViFieldRegs {
    pub origin: u32_0,
    pub yScale: u32_0,
    pub vStart: u32_0,
    pub vBurst: u32_0,
    pub vIntr: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSViMode {
    pub type_0: u8_0,
    pub comRegs: OSViCommonRegs,
    pub fldRegs: [OSViFieldRegs; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSContPad {
    pub button: u16_0,
    pub stick_x: s8,
    pub stick_y: s8,
    pub errno: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Vtx_t {
    pub ob: [libc::c_short; 3],
    pub flag: libc::c_ushort,
    pub tc: [libc::c_short; 2],
    pub cn: [libc::c_uchar; 4],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Vtx_tn {
    pub ob: [libc::c_short; 3],
    pub flag: libc::c_ushort,
    pub tc: [libc::c_short; 2],
    pub n: [libc::c_schar; 3],
    pub a: libc::c_uchar,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union Vtx {
    pub v: Vtx_t,
    pub n: Vtx_tn,
    pub force_structure_alignment: libc::c_longlong,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Tri {
    pub flag: libc::c_uchar,
    pub v: [libc::c_uchar; 3],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Vp_t {
    pub vscale: [libc::c_short; 4],
    pub vtrans: [libc::c_short; 4],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union Vp {
    pub vp: Vp_t,
    pub force_structure_alignment: libc::c_longlong,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Light_t {
    pub col: [libc::c_uchar; 3],
    pub pad1: libc::c_char,
    pub colc: [libc::c_uchar; 3],
    pub pad2: libc::c_char,
    pub dir: [libc::c_schar; 3],
    pub pad3: libc::c_char,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Ambient_t {
    pub col: [libc::c_uchar; 3],
    pub pad1: libc::c_char,
    pub colc: [libc::c_uchar; 3],
    pub pad2: libc::c_char,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union Light {
    pub l: Light_t,
    pub force_structure_alignment: [libc::c_longlong; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union Ambient {
    pub l: Ambient_t,
    pub force_structure_alignment: [libc::c_longlong; 1],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Lightsn {
    pub a: Ambient,
    pub l: [Light; 7],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gdma {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "par", ty = "libc::c_uint", bits = "8..=15")]
    #[bitfield(name = "len", ty = "libc::c_uint", bits = "16..=31")]
    pub cmd_par_len: [u8; 4],
    pub addr: libc::c_uint,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gtri {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "pad", ty = "libc::c_int", bits = "8..=31")]
    pub cmd_pad: [u8; 4],
    pub tri: Tri,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gpopmtx {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "pad1", ty = "libc::c_int", bits = "8..=31")]
    #[bitfield(name = "pad2", ty = "libc::c_int", bits = "32..=55")]
    #[bitfield(name = "param", ty = "libc::c_uchar", bits = "56..=63")]
    pub cmd_pad1_pad2_param: [u8; 8],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gsegment {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "pad0", ty = "libc::c_int", bits = "8..=15")]
    #[bitfield(name = "mw_index", ty = "libc::c_int", bits = "16..=23")]
    #[bitfield(name = "number", ty = "libc::c_int", bits = "24..=31")]
    #[bitfield(name = "pad1", ty = "libc::c_int", bits = "32..=39")]
    #[bitfield(name = "base", ty = "libc::c_int", bits = "40..=63")]
    pub cmd_pad0_mw_index_number_pad1_base: [u8; 8],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct GsetothermodeL {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "pad0", ty = "libc::c_int", bits = "8..=15")]
    #[bitfield(name = "sft", ty = "libc::c_int", bits = "16..=23")]
    #[bitfield(name = "len", ty = "libc::c_int", bits = "24..=31")]
    #[bitfield(name = "data", ty = "libc::c_uint", bits = "32..=63")]
    pub cmd_pad0_sft_len_data: [u8; 8],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct GsetothermodeH {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "pad0", ty = "libc::c_int", bits = "8..=15")]
    #[bitfield(name = "sft", ty = "libc::c_int", bits = "16..=23")]
    #[bitfield(name = "len", ty = "libc::c_int", bits = "24..=31")]
    #[bitfield(name = "data", ty = "libc::c_uint", bits = "32..=63")]
    pub cmd_pad0_sft_len_data: [u8; 8],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Gtexture {
    pub cmd: libc::c_uchar,
    pub lodscale: libc::c_uchar,
    pub tile: libc::c_uchar,
    pub on: libc::c_uchar,
    pub s: libc::c_ushort,
    pub t: libc::c_ushort,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gline3D {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "pad", ty = "libc::c_int", bits = "8..=31")]
    pub cmd_pad: [u8; 4],
    pub line: Tri,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gperspnorm {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "pad1", ty = "libc::c_int", bits = "8..=31")]
    pub cmd_pad1: [u8; 4],
    pub pad2: libc::c_short,
    pub scale: libc::c_short,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gsetimg {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "fmt", ty = "libc::c_uint", bits = "8..=10")]
    #[bitfield(name = "siz", ty = "libc::c_uint", bits = "11..=12")]
    #[bitfield(name = "pad", ty = "libc::c_uint", bits = "13..=19")]
    #[bitfield(name = "wd", ty = "libc::c_uint", bits = "20..=31")]
    pub cmd_fmt_siz_pad_wd: [u8; 4],
    pub dram: libc::c_uint,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gsetcombine {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "muxs0", ty = "libc::c_uint", bits = "8..=31")]
    #[bitfield(name = "muxs1", ty = "libc::c_uint", bits = "32..=63")]
    pub cmd_muxs0_muxs1: [u8; 8],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gsetcolor {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    pub cmd: [u8; 1],
    pub pad: libc::c_uchar,
    pub prim_min_level: libc::c_uchar,
    pub prim_level: libc::c_uchar,
    pub color: libc::c_ulong,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gfillrect {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "x0", ty = "libc::c_int", bits = "8..=17")]
    #[bitfield(name = "x0frac", ty = "libc::c_int", bits = "18..=19")]
    #[bitfield(name = "y0", ty = "libc::c_int", bits = "20..=29")]
    #[bitfield(name = "y0frac", ty = "libc::c_int", bits = "30..=31")]
    #[bitfield(name = "pad", ty = "libc::c_uint", bits = "32..=39")]
    #[bitfield(name = "x1", ty = "libc::c_int", bits = "40..=49")]
    #[bitfield(name = "x1frac", ty = "libc::c_int", bits = "50..=51")]
    #[bitfield(name = "y1", ty = "libc::c_int", bits = "52..=61")]
    #[bitfield(name = "y1frac", ty = "libc::c_int", bits = "62..=63")]
    pub cmd_x0_x0frac_y0_y0frac_pad_x1_x1frac_y1_y1frac: [u8; 8],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gsettile {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "fmt", ty = "libc::c_uint", bits = "8..=10")]
    #[bitfield(name = "siz", ty = "libc::c_uint", bits = "11..=12")]
    #[bitfield(name = "pad0", ty = "libc::c_uint", bits = "13..=13")]
    #[bitfield(name = "line", ty = "libc::c_uint", bits = "14..=22")]
    #[bitfield(name = "tmem", ty = "libc::c_uint", bits = "23..=31")]
    #[bitfield(name = "pad1", ty = "libc::c_uint", bits = "32..=36")]
    #[bitfield(name = "tile", ty = "libc::c_uint", bits = "37..=39")]
    #[bitfield(name = "palette", ty = "libc::c_uint", bits = "40..=43")]
    #[bitfield(name = "ct", ty = "libc::c_uint", bits = "44..=44")]
    #[bitfield(name = "mt", ty = "libc::c_uint", bits = "45..=45")]
    #[bitfield(name = "maskt", ty = "libc::c_uint", bits = "46..=49")]
    #[bitfield(name = "shiftt", ty = "libc::c_uint", bits = "50..=53")]
    #[bitfield(name = "cs", ty = "libc::c_uint", bits = "54..=54")]
    #[bitfield(name = "ms", ty = "libc::c_uint", bits = "55..=55")]
    #[bitfield(name = "masks", ty = "libc::c_uint", bits = "56..=59")]
    #[bitfield(name = "shifts", ty = "libc::c_uint", bits = "60..=63")]
    pub cmd_fmt_siz_pad0_line_tmem_pad1_tile_palette_ct_mt_maskt_shiftt_cs_ms_masks_shifts: [u8; 8],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gloadtile {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "sl", ty = "libc::c_uint", bits = "8..=19")]
    #[bitfield(name = "tl", ty = "libc::c_uint", bits = "20..=31")]
    #[bitfield(name = "pad", ty = "libc::c_int", bits = "32..=36")]
    #[bitfield(name = "tile", ty = "libc::c_uint", bits = "37..=39")]
    #[bitfield(name = "sh", ty = "libc::c_uint", bits = "40..=51")]
    #[bitfield(name = "th", ty = "libc::c_uint", bits = "52..=63")]
    pub cmd_sl_tl_pad_tile_sh_th: [u8; 8],
}
pub type Gsettilesize = Gloadtile;
pub type Gloadtlut = Gloadtile;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Gwords {
    pub w0: libc::c_uint,
    pub w1: libc::c_uint,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union Gfx {
    pub words: Gwords,
    pub dma: Gdma,
    pub tri: Gtri,
    pub line: Gline3D,
    pub popmtx: Gpopmtx,
    pub segment: Gsegment,
    pub setothermodeH: GsetothermodeH,
    pub setothermodeL: GsetothermodeL,
    pub texture: Gtexture,
    pub perspnorm: Gperspnorm,
    pub setimg: Gsetimg,
    pub setcombine: Gsetcombine,
    pub setcolor: Gsetcolor,
    pub fillrect: Gfillrect,
    pub settile: Gsettile,
    pub loadtile: Gloadtile,
    pub settilesize: Gsettilesize,
    pub loadtlut: Gloadtlut,
    pub force_structure_alignment: libc::c_longlong,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Vec3f {
    pub x: f32_0,
    pub y: f32_0,
    pub z: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Vec3us {
    pub x: u16_0,
    pub y: u16_0,
    pub z: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Vec3s {
    pub x: s16,
    pub y: s16,
    pub z: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Vec3i {
    pub x: s32,
    pub y: s32,
    pub z: s32,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Sphere16 {
    pub center: Vec3s,
    pub radius: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Cylinder16 {
    pub radius: s16,
    pub height: s16,
    pub yShift: s16,
    pub pos: Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Linef {
    pub a: Vec3f,
    pub b: Vec3f,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ItemEquips {
    pub buttonItems: [u8_0; 4],
    pub cButtonSlots: [u8_0; 3],
    pub equipment: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Inventory {
    pub items: [u8_0; 24],
    pub ammo: [s8; 16],
    pub equipment: u16_0,
    pub upgrades: u32_0,
    pub questItems: u32_0,
    pub dungeonItems: [u8_0; 20],
    pub dungeonKeys: [s8; 19],
    pub defenseHearts: s8,
    pub gsTokens: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SavedSceneFlags {
    pub chest: u32_0,
    pub swch: u32_0,
    pub clear: u32_0,
    pub collect: u32_0,
    pub unk: u32_0,
    pub rooms: u32_0,
    pub floors: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct HorseData {
    pub scene: s16,
    pub pos: Vec3s,
    pub angle: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct RespawnData {
    pub pos: Vec3f,
    pub yaw: s16,
    pub playerParams: s16,
    pub entranceIndex: s16,
    pub roomIndex: u8_0,
    pub data: s8,
    pub tempSwchFlags: u32_0,
    pub tempCollectFlags: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct FaroresWindData {
    pub pos: Vec3i,
    pub yaw: s32,
    pub playerParams: s32,
    pub entranceIndex: s32,
    pub roomIndex: s32,
    pub set: s32,
    pub tempSwchFlags: s32,
    pub tempCollectFlags: s32,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SaveContext {
    pub entranceIndex: s32,
    pub linkAge: s32,
    pub cutsceneIndex: s32,
    pub dayTime: u16_0,
    pub nightFlag: s32,
    pub totalDays: s32,
    pub bgsDayCount: s32,
    pub newf: [libc::c_char; 6],
    pub deaths: u16_0,
    pub playerName: [libc::c_char; 8],
    pub n64ddFlag: s16,
    pub healthCapacity: s16,
    pub health: s16,
    pub magicLevel: s8,
    pub magic: s8,
    pub rupees: s16,
    pub swordHealth: u16_0,
    pub naviTimer: u16_0,
    pub magicAcquired: u8_0,
    pub unk_3B: [libc::c_char; 1],
    pub doubleMagic: u8_0,
    pub doubleDefense: u8_0,
    pub bgsFlag: u8_0,
    pub ocarinaGameRoundNum: u8_0,
    pub childEquips: ItemEquips,
    pub adultEquips: ItemEquips,
    pub unk_54: u32_0,
    pub unk_58: [libc::c_char; 14],
    pub savedSceneNum: s16,
    pub equips: ItemEquips,
    pub inventory: Inventory,
    pub sceneFlags: [SavedSceneFlags; 124],
    pub fw: FaroresWindData,
    pub unk_E8C: [libc::c_char; 16],
    pub gsFlags: [s32; 6],
    pub unk_EB4: [libc::c_char; 4],
    pub highScores: [s32; 7],
    pub eventChkInf: [u16_0; 14],
    pub itemGetInf: [u16_0; 4],
    pub infTable: [u16_0; 30],
    pub unk_F34: [libc::c_char; 4],
    pub worldMapAreaData: u32_0,
    pub unk_F3C: [libc::c_char; 4],
    pub scarecrowCustomSongSet: u8_0,
    pub scarecrowCustomSong: [u8_0; 864],
    pub unk_12A1: [libc::c_char; 36],
    pub scarecrowSpawnSongSet: u8_0,
    pub scarecrowSpawnSong: [u8_0; 128],
    pub unk_1346: [libc::c_char; 2],
    pub horseData: HorseData,
    pub checksum: u16_0,
    pub fileNum: s32,
    pub unk_1358: [libc::c_char; 4],
    pub gameMode: s32,
    pub sceneSetupIndex: s32,
    pub respawnFlag: s32,
    pub respawn: [RespawnData; 3],
    pub entranceSpeed: f32_0,
    pub entranceSound: u16_0,
    pub unk_13C2: [libc::c_char; 1],
    pub unk_13C3: u8_0,
    pub dogParams: s16,
    pub textTriggerFlags: u8_0,
    pub showTitleCard: u8_0,
    pub nayrusLoveTimer: s16,
    pub unk_13CA: [libc::c_char; 2],
    pub rupeeAccumulator: s16,
    pub timer1State: s16,
    pub timer1Value: s16,
    pub timer2State: s16,
    pub timer2Value: s16,
    pub timerX: [s16; 2],
    pub timerY: [s16; 2],
    pub unk_13DE: [libc::c_char; 2],
    pub seqId: u8_0,
    pub natureAmbienceId: u8_0,
    pub buttonStatus: [u8_0; 5],
    pub unk_13E7: u8_0,
    pub unk_13E8: u16_0,
    pub unk_13EA: u16_0,
    pub unk_13EC: u16_0,
    pub unk_13EE: u16_0,
    pub unk_13F0: s16,
    pub unk_13F2: s16,
    pub unk_13F4: s16,
    pub unk_13F6: s16,
    pub unk_13F8: s16,
    pub eventInf: [u16_0; 4],
    pub mapIndex: u16_0,
    pub minigameState: u16_0,
    pub minigameScore: u16_0,
    pub unk_1408: [libc::c_char; 1],
    pub language: u8_0,
    pub audioSetting: u8_0,
    pub unk_140B: [libc::c_char; 1],
    pub zTargetSetting: u8_0,
    pub forcedSeqId: u16_0,
    pub unk_1410: u8_0,
    pub unk_1411: [libc::c_char; 1],
    pub nextCutsceneIndex: u16_0,
    pub cutsceneTrigger: u8_0,
    pub chamberCutsceneNum: u8_0,
    pub nextDayTime: u16_0,
    pub fadeDuration: u8_0,
    pub unk_1419: u8_0,
    pub skyboxTime: u16_0,
    pub dogIsLost: u8_0,
    pub nextTransition: u8_0,
    pub unk_141E: [libc::c_char; 2],
    pub worldMapArea: s16,
    pub sunsSongState: s16,
    pub healthAccumulator: s16,
}
pub type C2RustUnnamed_2 = libc::c_uint;
pub const BTN_DISABLED: C2RustUnnamed_2 = 255;
pub const BTN_ENABLED: C2RustUnnamed_2 = 0;
pub type C2RustUnnamed_3 = libc::c_uint;
pub const SUNSSONG_SPECIAL: C2RustUnnamed_3 = 3;
pub const SUNSSONG_SPEED_TIME: C2RustUnnamed_3 = 2;
pub const SUNSSONG_START: C2RustUnnamed_3 = 1;
pub const SUNSSONG_INACTIVE: C2RustUnnamed_3 = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Color_RGB8 {
    pub r: u8_0,
    pub g: u8_0,
    pub b: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union Color_RGBA8_u32 {
    pub c2rust_unnamed: C2RustUnnamed_4,
    pub rgba: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_4 {
    pub r: u8_0,
    pub g: u8_0,
    pub b: u8_0,
    pub a: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Color_RGBAf {
    pub r: f32_0,
    pub g: f32_0,
    pub b: f32_0,
    pub a: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct LightPoint {
    pub x: s16,
    pub y: s16,
    pub z: s16,
    pub color: [u8_0; 3],
    pub drawGlow: u8_0,
    pub radius: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct LightDirectional {
    pub x: s8,
    pub y: s8,
    pub z: s8,
    pub color: [u8_0; 3],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union LightParams {
    pub point: LightPoint,
    pub dir: LightDirectional,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct LightInfo {
    pub type_0: u8_0,
    pub params: LightParams,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Lights {
    pub numLights: u8_0,
    pub l: Lightsn,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct LightNode {
    pub info: *mut LightInfo,
    pub prev: *mut LightNode,
    pub next: *mut LightNode,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct LightContext {
    pub listHead: *mut LightNode,
    pub ambientColor: [u8_0; 3],
    pub fogColor: [u8_0; 3],
    pub fogNear: s16,
    pub fogFar: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GlobalContext {
    pub state: GameState,
    pub sceneNum: s16,
    pub sceneConfig: u8_0,
    pub unk_A7: [libc::c_char; 9],
    pub sceneSegment: *mut libc::c_void,
    pub view: View,
    pub mainCamera: Camera,
    pub subCameras: [Camera; 3],
    pub cameraPtrs: [*mut Camera; 4],
    pub activeCamera: s16,
    pub nextCamera: s16,
    pub sequenceCtx: SequenceContext,
    pub lightCtx: LightContext,
    pub frameAdvCtx: FrameAdvanceContext,
    pub colCtx: CollisionContext,
    pub actorCtx: ActorContext,
    pub csCtx: CutsceneContext,
    pub soundSources: [SoundSource; 16],
    pub sramCtx: SramContext,
    pub skyboxCtx: SkyboxContext,
    pub msgCtx: MessageContext,
    pub interfaceCtx: InterfaceContext,
    pub pauseCtx: PauseContext,
    pub gameOverCtx: GameOverContext,
    pub envCtx: EnvironmentContext,
    pub animationCtx: AnimationContext,
    pub objectCtx: ObjectContext,
    pub roomCtx: RoomContext,
    pub transiActorCtx: TransitionActorContext,
    pub playerInit: Option<unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext,
                                                _: *mut FlexSkeletonHeader)
                               -> ()>,
    pub playerUpdate: Option<unsafe extern "C" fn(_: *mut Player,
                                                  _: *mut GlobalContext,
                                                  _: *mut Input) -> ()>,
    pub isPlayerDroppingFish: Option<unsafe extern "C" fn(_:
                                                              *mut GlobalContext)
                                         -> s32>,
    pub startPlayerFishing: Option<unsafe extern "C" fn(_: *mut GlobalContext)
                                       -> s32>,
    pub grabPlayer: Option<unsafe extern "C" fn(_: *mut GlobalContext,
                                                _: *mut Player) -> s32>,
    pub startPlayerCutscene: Option<unsafe extern "C" fn(_:
                                                             *mut GlobalContext,
                                                         _: *mut Actor,
                                                         _: s32) -> s32>,
    pub func_11D54: Option<unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()>,
    pub damagePlayer: Option<unsafe extern "C" fn(_: *mut GlobalContext,
                                                  _: s32) -> s32>,
    pub talkWithPlayer: Option<unsafe extern "C" fn(_: *mut GlobalContext,
                                                    _: *mut Actor) -> ()>,
    pub viewProjectionMtxF: MtxF,
    pub billboardMtxF: MtxF,
    pub billboardMtx: *mut Mtx,
    pub gameplayFrames: u32_0,
    pub linkAgeOnLoad: u8_0,
    pub unk_11DE9: u8_0,
    pub curSpawn: u8_0,
    pub numSetupActors: u8_0,
    pub numRooms: u8_0,
    pub roomList: *mut RomFile,
    pub linkActorEntry: *mut ActorEntry,
    pub setupActorList: *mut ActorEntry,
    pub unk_11DFC: *mut libc::c_void,
    pub setupEntranceList: *mut EntranceEntry,
    pub setupExitList: *mut s16,
    pub setupPathList: *mut Path,
    pub cUpElfMsgs: *mut ElfMessage,
    pub specialEffects: *mut libc::c_void,
    pub skyboxId: u8_0,
    pub sceneLoadFlag: s8,
    pub unk_11E16: s16,
    pub unk_11E18: s16,
    pub nextEntranceIndex: s16,
    pub unk_11E1C: [libc::c_char; 64],
    pub shootingGalleryStatus: s8,
    pub bombchuBowlingStatus: s8,
    pub fadeTransition: u8_0,
    pub colChkCtx: CollisionCheckContext,
    pub envFlags: [u16_0; 20],
    pub pauseBgPreRender: PreRender,
    pub unk_12174: [libc::c_char; 83],
    pub unk_121C7: s8,
    pub transitionCtx: TransitionContext,
    pub unk_12418: [libc::c_char; 3],
    pub transitionMode: u8_0,
    pub transitionFade: TransitionFade,
    pub unk_12428: [libc::c_char; 3],
    pub unk_1242B: u8_0,
    pub loadedScene: *mut SceneTableEntry,
    pub unk_12430: [libc::c_char; 232],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SceneTableEntry {
    pub sceneFile: RomFile,
    pub titleFile: RomFile,
    pub unk_10: u8_0,
    pub config: u8_0,
    pub unk_12: u8_0,
    pub unk_13: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct RomFile {
    pub vromStart: u32_0,
    pub vromEnd: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TransitionFade {
    pub fadeType: u8_0,
    pub isDone: u8_0,
    pub fadeDirection: u8_0,
    pub fadeColor: Color_RGBA8_u32,
    pub fadeTimer: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TransitionContext {
    pub c2rust_unnamed: C2RustUnnamed_5,
    pub transitionType: s32,
    pub init: Option<unsafe extern "C" fn(_: *mut libc::c_void)
                         -> *mut libc::c_void>,
    pub destroy: Option<unsafe extern "C" fn(_: *mut libc::c_void) -> ()>,
    pub update: Option<unsafe extern "C" fn(_: *mut libc::c_void, _: s32)
                           -> ()>,
    pub draw: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                          _: *mut *mut Gfx) -> ()>,
    pub start: Option<unsafe extern "C" fn(_: *mut libc::c_void) -> ()>,
    pub setType: Option<unsafe extern "C" fn(_: *mut libc::c_void, _: s32)
                            -> ()>,
    pub setColor: Option<unsafe extern "C" fn(_: *mut libc::c_void, _: u32_0)
                             -> ()>,
    pub setEnvColor: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                                 _: u32_0) -> ()>,
    pub isDone: Option<unsafe extern "C" fn(_: *mut libc::c_void) -> s32>,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_5 {
    pub fade: TransitionFade,
    pub circle: TransitionCircle,
    pub triforce: TransitionTriforce,
    pub wipe: TransitionWipe,
    pub data: [libc::c_char; 552],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TransitionWipe {
    pub color: Color_RGBA8_u32,
    pub envColor: Color_RGBA8_u32,
    pub direction: u8_0,
    pub frame: u8_0,
    pub isDone: u8_0,
    pub texX: u16_0,
    pub texY: u16_0,
    pub normal: u16_0,
    pub projection: Mtx,
    pub lookAt: Mtx,
    pub modelView: [[Mtx; 3]; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TransitionTriforce {
    pub color: Color_RGBA8_u32,
    pub transPos: f32_0,
    pub step: f32_0,
    pub state: s32,
    pub fadeDirection: s32,
    pub projection: Mtx,
    pub frame: s32,
    pub modelView: [[Mtx; 3]; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TransitionCircle {
    pub color: Color_RGBA8_u32,
    pub envColor: Color_RGBA8_u32,
    pub texX: s32,
    pub texY: s32,
    pub step: s32,
    pub unk_14: u8_0,
    pub typeColor: u8_0,
    pub speed: u8_0,
    pub effect: u8_0,
    pub isDone: u8_0,
    pub frame: u8_0,
    pub normal: u16_0,
    pub projection: Mtx,
    pub lookAt: Mtx,
    pub texture: *mut libc::c_void,
    pub modelView: [[Mtx; 3]; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PreRender {
    pub width: s32,
    pub height: s32,
    pub widthSave: s32,
    pub heightSave: s32,
    pub fbuf: *mut u16_0,
    pub fbufSave: *mut u16_0,
    pub cvgSave: *mut u8_0,
    pub zbuf: *mut u16_0,
    pub zbufSave: *mut u16_0,
    pub ulxSave: s32,
    pub ulySave: s32,
    pub lrxSave: s32,
    pub lrySave: s32,
    pub ulx: s32,
    pub uly: s32,
    pub lrx: s32,
    pub lry: s32,
    pub alloc: ListAlloc,
    pub unk_4C: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ListAlloc {
    pub prev: *mut ListAlloc,
    pub next: *mut ListAlloc,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CollisionCheckContext {
    pub colATCount: s16,
    pub sacFlags: u16_0,
    pub colAT: [*mut Collider; 50],
    pub colACCount: s32,
    pub colAC: [*mut Collider; 60],
    pub colOCCount: s32,
    pub colOC: [*mut Collider; 50],
    pub colLineCount: s32,
    pub colLine: [*mut OcLine; 3],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OcLine {
    pub line: Linef,
    pub ocFlags: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Collider {
    pub actor: *mut Actor,
    pub at: *mut Actor,
    pub ac: *mut Actor,
    pub oc: *mut Actor,
    pub atFlags: u8_0,
    pub acFlags: u8_0,
    pub ocFlags1: u8_0,
    pub ocFlags2: u8_0,
    pub colType: u8_0,
    pub shape: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Actor {
    pub id: s16,
    pub category: u8_0,
    pub room: s8,
    pub flags: u32_0,
    pub home: PosRot,
    pub params: s16,
    pub objBankIndex: s8,
    pub targetMode: s8,
    pub sfx: u16_0,
    pub world: PosRot,
    pub focus: PosRot,
    pub targetArrowOffset: f32_0,
    pub scale: Vec3f,
    pub velocity: Vec3f,
    pub speedXZ: f32_0,
    pub gravity: f32_0,
    pub minVelocityY: f32_0,
    pub wallPoly: *mut CollisionPoly,
    pub floorPoly: *mut CollisionPoly,
    pub wallBgId: u8_0,
    pub floorBgId: u8_0,
    pub wallYaw: s16,
    pub floorHeight: f32_0,
    pub yDistToWater: f32_0,
    pub bgCheckFlags: u16_0,
    pub yawTowardsPlayer: s16,
    pub xyzDistToPlayerSq: f32_0,
    pub xzDistToPlayer: f32_0,
    pub yDistToPlayer: f32_0,
    pub colChkInfo: CollisionCheckInfo,
    pub shape: ActorShape,
    pub projectedPos: Vec3f,
    pub projectedW: f32_0,
    pub uncullZoneForward: f32_0,
    pub uncullZoneScale: f32_0,
    pub uncullZoneDownward: f32_0,
    pub prevPos: Vec3f,
    pub isTargeted: u8_0,
    pub targetPriority: u8_0,
    pub textId: u16_0,
    pub freezeTimer: u16_0,
    pub colorFilterParams: u16_0,
    pub colorFilterTimer: u8_0,
    pub isDrawn: u8_0,
    pub dropFlag: u8_0,
    pub naviEnemyId: u8_0,
    pub parent: *mut Actor,
    pub child: *mut Actor,
    pub prev: *mut Actor,
    pub next: *mut Actor,
    pub init: ActorFunc,
    pub destroy: ActorFunc,
    pub update: ActorFunc,
    pub draw: ActorFunc,
    pub overlayEntry: *mut ActorOverlay,
    pub dbgPad: [libc::c_char; 16],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ActorOverlay {
    pub vromStart: u32_0,
    pub vromEnd: u32_0,
    pub vramStart: *mut libc::c_void,
    pub vramEnd: *mut libc::c_void,
    pub loadedRamAddr: *mut libc::c_void,
    pub initInfo: *mut ActorInit,
    pub name: *mut libc::c_char,
    pub allocType: u16_0,
    pub numLoaded: s8,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ActorInit {
    pub id: s16,
    pub category: u8_0,
    pub flags: u32_0,
    pub objectId: s16,
    pub instanceSize: u32_0,
    pub init: ActorFunc,
    pub destroy: ActorFunc,
    pub update: ActorFunc,
    pub draw: ActorFunc,
}
pub type ActorFunc
    =
    Option<unsafe extern "C" fn(_: *mut Actor, _: *mut GlobalContext) -> ()>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ActorShape {
    pub rot: Vec3s,
    pub face: s16,
    pub yOffset: f32_0,
    pub shadowDraw: ActorShadowFunc,
    pub shadowScale: f32_0,
    pub shadowAlpha: u8_0,
    pub feetFloorFlags: u8_0,
    pub feetPos: [Vec3f; 2],
}
pub type ActorShadowFunc
    =
    Option<unsafe extern "C" fn(_: *mut Actor, _: *mut Lights,
                                _: *mut GlobalContext) -> ()>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CollisionCheckInfo {
    pub damageTable: *mut DamageTable,
    pub displacement: Vec3f,
    pub cylRadius: s16,
    pub cylHeight: s16,
    pub cylYShift: s16,
    pub mass: u8_0,
    pub health: u8_0,
    pub damage: u8_0,
    pub damageEffect: u8_0,
    pub atHitEffect: u8_0,
    pub acHitEffect: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct DamageTable {
    pub table: [u8_0; 32],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CollisionPoly {
    pub type_0: u16_0,
    pub c2rust_unnamed: C2RustUnnamed_6,
    pub normal: Vec3s,
    pub dist: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_6 {
    pub vtxData: [u16_0; 3],
    pub c2rust_unnamed: C2RustUnnamed_7,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_7 {
    pub flags_vIA: u16_0,
    pub flags_vIB: u16_0,
    pub vIC: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PosRot {
    pub pos: Vec3f,
    pub rot: Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ElfMessage {
    pub byte0: u8_0,
    pub byte1: u8_0,
    pub byte2: u8_0,
    pub byte3: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Path {
    pub count: u8_0,
    pub points: *mut Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct EntranceEntry {
    pub spawn: u8_0,
    pub room: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ActorEntry {
    pub id: s16,
    pub pos: Vec3s,
    pub rot: Vec3s,
    pub params: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Player {
    pub actor: Actor,
    pub currentTunic: s8,
    pub currentSword: s8,
    pub currentShield: s8,
    pub currentBoots: s8,
    pub heldItemButton: s8,
    pub heldItemActionParam: s8,
    pub heldItemId: u8_0,
    pub prevBoots: s8,
    pub itemActionParam: s8,
    pub unk_155: [libc::c_char; 3],
    pub modelGroup: u8_0,
    pub nextModelGroup: u8_0,
    pub unk_15A: s8,
    pub modelAnimType: u8_0,
    pub leftHandType: u8_0,
    pub rightHandType: u8_0,
    pub sheathType: u8_0,
    pub currentMask: u8_0,
    pub rightHandDLists: *mut *mut Gfx,
    pub leftHandDLists: *mut *mut Gfx,
    pub sheathDLists: *mut *mut Gfx,
    pub waistDLists: *mut *mut Gfx,
    pub giObjectLoading: u8_0,
    pub giObjectDmaRequest: DmaRequest,
    pub giObjectLoadQueue: OSMesgQueue,
    pub giObjectLoadMsg: OSMesg,
    pub giObjectSegment: *mut libc::c_void,
    pub skelAnime: SkelAnime,
    pub jointTable: [Vec3s; 24],
    pub morphTable: [Vec3s; 24],
    pub blendTable: [Vec3s; 24],
    pub unk_3A8: [s16; 2],
    pub heldActor: *mut Actor,
    pub leftHandPos: Vec3f,
    pub unk_3BC: Vec3s,
    pub unk_3C4: *mut Actor,
    pub unk_3C8: Vec3f,
    pub unk_3D4: [libc::c_char; 88],
    pub doorType: s8,
    pub doorDirection: s8,
    pub doorTimer: s16,
    pub doorActor: *mut Actor,
    pub getItemId: s8,
    pub getItemDirection: u16_0,
    pub interactRangeActor: *mut Actor,
    pub mountSide: s8,
    pub unk_43D: [libc::c_char; 3],
    pub rideActor: *mut Actor,
    pub csMode: u8_0,
    pub prevCsMode: u8_0,
    pub unk_446: u8_0,
    pub unk_447: u8_0,
    pub unk_448: *mut Actor,
    pub unk_44C: [libc::c_char; 4],
    pub unk_450: Vec3f,
    pub unk_45C: Vec3f,
    pub unk_468: [libc::c_char; 2],
    pub unk_46A: s16,
    pub unk_46C: s16,
    pub unk_46E: [libc::c_char; 42],
    pub cylinder: ColliderCylinder,
    pub swordQuads: [ColliderQuad; 2],
    pub shieldQuad: ColliderQuad,
    pub unk_664: *mut Actor,
    pub unk_668: [libc::c_char; 4],
    pub unk_66C: s32,
    pub swordEffectIndex: s32,
    pub func_674: PlayerFunc674,
    pub ageProperties: *mut PlayerAgeProperties,
    pub stateFlags1: u32_0,
    pub stateFlags2: u32_0,
    pub unk_684: *mut Actor,
    pub boomerangActor: *mut Actor,
    pub naviActor: *mut Actor,
    pub naviTextId: s16,
    pub stateFlags3: u8_0,
    pub exchangeItemId: s8,
    pub targetActor: *mut Actor,
    pub targetActorDistance: f32_0,
    pub unk_69C: [libc::c_char; 4],
    pub unk_6A0: f32_0,
    pub unk_6A4: f32_0,
    pub unk_6A8: *mut Actor,
    pub unk_6AC: s8,
    pub unk_6AD: u8_0,
    pub unk_6AE: u16_0,
    pub unk_6B0: s16,
    pub unk_6B4: [libc::c_char; 4],
    pub unk_6B6: s16,
    pub unk_6B8: s16,
    pub unk_6BA: s16,
    pub unk_6BC: s16,
    pub unk_6BE: s16,
    pub unk_6C0: s16,
    pub unk_6C2: s16,
    pub unk_6C4: f32_0,
    pub skelAnime2: SkelAnime,
    pub jointTable2: [Vec3s; 24],
    pub morphTable2: [Vec3s; 24],
    pub func_82C: PlayerFunc82C,
    pub unk_830: f32_0,
    pub unk_834: s16,
    pub unk_836: s8,
    pub unk_837: u8_0,
    pub linearVelocity: f32_0,
    pub currentYaw: s16,
    pub targetYaw: s16,
    pub unk_840: u16_0,
    pub swordAnimation: s8,
    pub swordState: s8,
    pub unk_844: s8,
    pub unk_845: u8_0,
    pub unk_846: u8_0,
    pub unk_847: [s8; 4],
    pub unk_84B: [s8; 4],
    pub unk_84F: s8,
    pub unk_850: s16,
    pub unk_854: f32_0,
    pub unk_858: f32_0,
    pub unk_85C: f32_0,
    pub unk_860: s16,
    pub unk_862: s8,
    pub unk_864: f32_0,
    pub unk_868: f32_0,
    pub unk_86C: f32_0,
    pub unk_870: f32_0,
    pub unk_874: f32_0,
    pub unk_878: f32_0,
    pub unk_87C: s16,
    pub unk_87E: s16,
    pub unk_880: f32_0,
    pub wallHeight: f32_0,
    pub wallDistance: f32_0,
    pub unk_88C: u8_0,
    pub unk_88D: u8_0,
    pub unk_88E: u8_0,
    pub unk_88F: u8_0,
    pub unk_890: u8_0,
    pub shockTimer: u8_0,
    pub unk_892: u8_0,
    pub hoverBootsTimer: u8_0,
    pub fallStartHeight: s16,
    pub fallDistance: s16,
    pub unk_898: s16,
    pub unk_89A: s16,
    pub unk_89C: s16,
    pub unk_89E: u16_0,
    pub unk_8A0: u8_0,
    pub unk_8A1: u8_0,
    pub unk_8A2: s16,
    pub unk_8A4: f32_0,
    pub unk_8A8: f32_0,
    pub windSpeed: f32_0,
    pub windDirection: s16,
    pub swordInfo: [WeaponInfo; 3],
    pub bodyPartsPos: [Vec3f; 18],
    pub mf_9E0: MtxF,
    pub shieldMf: MtxF,
    pub isBurning: u8_0,
    pub flameTimers: [u8_0; 18],
    pub unk_A73: u8_0,
    pub func_A74: PlayerFuncA74,
    pub invincibilityTimer: s8,
    pub unk_A79: u8_0,
    pub unk_A7A: u8_0,
    pub unk_A7B: u8_0,
    pub unk_A7C: f32_0,
    pub unk_A80: s16,
    pub unk_A82: u16_0,
    pub unk_A84: s16,
    pub unk_A86: s8,
    pub unk_A87: u8_0,
    pub unk_A88: Vec3f,
}
pub type PlayerFuncA74
    =
    Option<unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player) -> ()>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct WeaponInfo {
    pub active: s32,
    pub tip: Vec3f,
    pub base: Vec3f,
}
pub type PlayerFunc82C
    =
    Option<unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
               -> s32>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SkelAnime {
    pub limbCount: u8_0,
    pub mode: u8_0,
    pub dListCount: u8_0,
    pub taper: s8,
    pub skeleton: *mut *mut libc::c_void,
    pub animation: *mut libc::c_void,
    pub startFrame: f32_0,
    pub endFrame: f32_0,
    pub animLength: f32_0,
    pub curFrame: f32_0,
    pub playSpeed: f32_0,
    pub jointTable: *mut Vec3s,
    pub morphTable: *mut Vec3s,
    pub morphWeight: f32_0,
    pub morphRate: f32_0,
    pub update: Option<unsafe extern "C" fn() -> s32>,
    pub initFlags: s8,
    pub moveFlags: u8_0,
    pub prevRot: s16,
    pub prevTransl: Vec3s,
    pub baseTransl: Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PlayerAgeProperties {
    pub unk_00: f32_0,
    pub unk_04: f32_0,
    pub unk_08: f32_0,
    pub unk_0C: f32_0,
    pub unk_10: f32_0,
    pub unk_14: f32_0,
    pub unk_18: f32_0,
    pub unk_1C: f32_0,
    pub unk_20: f32_0,
    pub unk_24: f32_0,
    pub unk_28: f32_0,
    pub unk_2C: f32_0,
    pub unk_30: f32_0,
    pub unk_34: f32_0,
    pub unk_38: f32_0,
    pub unk_3C: f32_0,
    pub unk_40: f32_0,
    pub unk_44: Vec3s,
    pub unk_4A: [Vec3s; 4],
    pub unk_62: [Vec3s; 4],
    pub unk_7A: [Vec3s; 2],
    pub unk_86: [Vec3s; 2],
    pub unk_92: u16_0,
    pub unk_94: u16_0,
    pub unk_98: *mut LinkAnimationHeader,
    pub unk_9C: *mut LinkAnimationHeader,
    pub unk_A0: *mut LinkAnimationHeader,
    pub unk_A4: *mut LinkAnimationHeader,
    pub unk_A8: *mut LinkAnimationHeader,
    pub unk_AC: [*mut LinkAnimationHeader; 4],
    pub unk_BC: [*mut LinkAnimationHeader; 2],
    pub unk_C4: [*mut LinkAnimationHeader; 2],
    pub unk_CC: [*mut LinkAnimationHeader; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct LinkAnimationHeader {
    pub common: AnimationHeaderCommon,
    pub segment: *mut libc::c_void,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimationHeaderCommon {
    pub frameCount: s16,
}
pub type PlayerFunc674
    =
    Option<unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext) -> ()>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderQuad {
    pub base: Collider,
    pub info: ColliderInfo,
    pub dim: ColliderQuadDim,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderQuadDim {
    pub quad: [Vec3f; 4],
    pub dcMid: Vec3s,
    pub baMid: Vec3s,
    pub acDist: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderInfo {
    pub toucher: ColliderTouch,
    pub bumper: ColliderBump,
    pub elemType: u8_0,
    pub toucherFlags: u8_0,
    pub bumperFlags: u8_0,
    pub ocElemFlags: u8_0,
    pub atHit: *mut Collider,
    pub acHit: *mut Collider,
    pub atHitInfo: *mut ColliderInfo,
    pub acHitInfo: *mut ColliderInfo,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderBump {
    pub dmgFlags: u32_0,
    pub effect: u8_0,
    pub defense: u8_0,
    pub hitPos: Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderTouch {
    pub dmgFlags: u32_0,
    pub effect: u8_0,
    pub damage: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderCylinder {
    pub base: Collider,
    pub info: ColliderInfo,
    pub dim: Cylinder16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct DmaRequest {
    pub vromAddr: u32_0,
    pub dramAddr: *mut libc::c_void,
    pub size: u32_0,
    pub filename: *const libc::c_char,
    pub line: s32,
    pub unk_14: s32,
    pub notifyQueue: *mut OSMesgQueue,
    pub notifyMsg: OSMesg,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Input {
    pub cur: OSContPad,
    pub prev: OSContPad,
    pub press: OSContPad,
    pub rel: OSContPad,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct FlexSkeletonHeader {
    pub sh: SkeletonHeader,
    pub dListCount: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SkeletonHeader {
    pub segment: *mut *mut libc::c_void,
    pub limbCount: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TransitionActorContext {
    pub numActors: u8_0,
    pub list: *mut TransitionActorEntry,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TransitionActorEntry {
    pub sides: [C2RustUnnamed_8; 2],
    pub id: s16,
    pub pos: Vec3s,
    pub rotY: s16,
    pub params: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_8 {
    pub room: s8,
    pub effects: s8,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct RoomContext {
    pub curRoom: Room,
    pub prevRoom: Room,
    pub bufPtrs: [*mut libc::c_void; 2],
    pub unk_30: u8_0,
    pub status: s8,
    pub unk_34: *mut libc::c_void,
    pub dmaRequest: DmaRequest,
    pub loadQueue: OSMesgQueue,
    pub loadMsg: OSMesg,
    pub unk_74: [s16; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Room {
    pub num: s8,
    pub unk_01: u8_0,
    pub unk_02: u8_0,
    pub unk_03: u8_0,
    pub echo: s8,
    pub showInvisActors: u8_0,
    pub mesh: *mut Mesh,
    pub segment: *mut libc::c_void,
    pub unk_10: [libc::c_char; 4],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union Mesh {
    pub polygon: Polygon,
    pub polygon0: PolygonType0,
    pub polygon1: PolygonType1,
    pub polygon2: PolygonType2,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PolygonType2 {
    pub type_0: u8_0,
    pub num: u8_0,
    pub start: *mut libc::c_void,
    pub end: *mut libc::c_void,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PolygonType1 {
    pub type_0: u8_0,
    pub format: u8_0,
    pub dlist: *mut Gfx,
    pub c2rust_unnamed: C2RustUnnamed_9,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_9 {
    pub single: C2RustUnnamed_11,
    pub multi: C2RustUnnamed_10,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_10 {
    pub count: u8_0,
    pub list: *mut BgImage,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct BgImage {
    pub unk_00: u16_0,
    pub id: u8_0,
    pub source: u32_0,
    pub unk_0C: u32_0,
    pub tlut: u32_0,
    pub width: u16_0,
    pub height: u16_0,
    pub fmt: u8_0,
    pub siz: u8_0,
    pub mode0: u16_0,
    pub tlutCount: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_11 {
    pub source: *mut libc::c_void,
    pub unk_0C: u32_0,
    pub tlut: *mut libc::c_void,
    pub width: u16_0,
    pub height: u16_0,
    pub fmt: u8_0,
    pub siz: u8_0,
    pub mode0: u16_0,
    pub tlutCount: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PolygonType0 {
    pub type_0: u8_0,
    pub num: u8_0,
    pub start: *mut libc::c_void,
    pub end: *mut libc::c_void,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Polygon {
    pub type_0: u8_0,
    pub num: u8_0,
    pub start: *mut libc::c_void,
    pub end: *mut libc::c_void,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ObjectContext {
    pub spaceStart: *mut libc::c_void,
    pub spaceEnd: *mut libc::c_void,
    pub num: u8_0,
    pub unk_09: u8_0,
    pub mainKeepIndex: u8_0,
    pub subKeepIndex: u8_0,
    pub status: [ObjectStatus; 19],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ObjectStatus {
    pub id: s16,
    pub segment: *mut libc::c_void,
    pub dmaRequest: DmaRequest,
    pub loadQueue: OSMesgQueue,
    pub loadMsg: OSMesg,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimationContext {
    pub animationCount: s16,
    pub entries: [AnimationEntry; 50],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimationEntry {
    pub type_0: u8_0,
    pub data: AnimationEntryData,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union AnimationEntryData {
    pub load: AnimEntryLoadFrame,
    pub copy: AnimEntryCopyAll,
    pub interp: AnimEntryInterp,
    pub copy1: AnimEntryCopyTrue,
    pub copy0: AnimEntryCopyFalse,
    pub move_0: AnimEntryMoveActor,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimEntryMoveActor {
    pub actor: *mut Actor,
    pub skelAnime: *mut SkelAnime,
    pub unk_08: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimEntryCopyFalse {
    pub queueFlag: u8_0,
    pub vecCount: u8_0,
    pub dst: *mut Vec3s,
    pub src: *mut Vec3s,
    pub copyFlag: *mut u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimEntryCopyTrue {
    pub queueFlag: u8_0,
    pub vecCount: u8_0,
    pub dst: *mut Vec3s,
    pub src: *mut Vec3s,
    pub copyFlag: *mut u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimEntryInterp {
    pub queueFlag: u8_0,
    pub vecCount: u8_0,
    pub base: *mut Vec3s,
    pub mod_0: *mut Vec3s,
    pub weight: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimEntryCopyAll {
    pub queueFlag: u8_0,
    pub vecCount: u8_0,
    pub dst: *mut Vec3s,
    pub src: *mut Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimEntryLoadFrame {
    pub req: DmaRequest,
    pub msgQueue: OSMesgQueue,
    pub msg: OSMesg,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct EnvironmentContext {
    pub unk_00: [libc::c_char; 2],
    pub timeIncrement: u16_0,
    pub sunPos: Vec3f,
    pub skybox1Index: u8_0,
    pub skybox2Index: u8_0,
    pub unk_12: [libc::c_char; 1],
    pub skyboxBlend: u8_0,
    pub unk_14: [libc::c_char; 1],
    pub skyboxDisabled: u8_0,
    pub sunMoonDisabled: u8_0,
    pub unk_17: u8_0,
    pub unk_18: u8_0,
    pub unk_19: u8_0,
    pub unk_1A: u16_0,
    pub unk_1C: [libc::c_char; 2],
    pub indoors: u8_0,
    pub unk_1F: u8_0,
    pub unk_20: u8_0,
    pub unk_21: u8_0,
    pub unk_22: u16_0,
    pub unk_24: u16_0,
    pub unk_26: [libc::c_char; 2],
    pub dirLight1: LightInfo,
    pub dirLight2: LightInfo,
    pub skyboxDmaState: s8,
    pub dmaRequest: DmaRequest,
    pub loadQueue: OSMesgQueue,
    pub loadMsg: OSMesg,
    pub unk_84: f32_0,
    pub unk_88: f32_0,
    pub adjAmbientColor: [s16; 3],
    pub adjLight1Color: [s16; 3],
    pub adjFogColor: [s16; 3],
    pub adjFogNear: s16,
    pub adjFogFar: s16,
    pub unk_A2: [libc::c_char; 6],
    pub windDirection: Vec3s,
    pub windSpeed: f32_0,
    pub numLightSettings: u8_0,
    pub lightSettingsList: *mut EnvLightSettings,
    pub blendIndoorLights: u8_0,
    pub unk_BD: u8_0,
    pub unk_BE: u8_0,
    pub unk_BF: u8_0,
    pub lightSettings: EnvLightSettings,
    pub unk_D6: u16_0,
    pub unk_D8: f32_0,
    pub unk_DC: u8_0,
    pub gloomySkyMode: u8_0,
    pub unk_DE: u8_0,
    pub lightningMode: u8_0,
    pub unk_E0: u8_0,
    pub fillScreen: u8_0,
    pub screenFillColor: [u8_0; 4],
    pub sandstormState: u8_0,
    pub sandstormPrimA: u8_0,
    pub sandstormEnvA: u8_0,
    pub customSkyboxFilter: u8_0,
    pub skyboxFilterColor: [u8_0; 4],
    pub unk_EE: [u8_0; 4],
    pub unk_F2: [u8_0; 4],
    pub unk_F6: [libc::c_char; 6],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct EnvLightSettings {
    pub ambientColor: [u8_0; 3],
    pub light1Dir: [s8; 3],
    pub light1Color: [u8_0; 3],
    pub light2Dir: [s8; 3],
    pub light2Color: [u8_0; 3],
    pub fogColor: [u8_0; 3],
    pub fogNear: s16,
    pub fogFar: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GameOverContext {
    pub state: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PauseContext {
    pub view: View,
    pub iconItemSegment: *mut u8_0,
    pub iconItem24Segment: *mut u8_0,
    pub iconItemAltSegment: *mut u8_0,
    pub iconItemLangSegment: *mut u8_0,
    pub nameSegment: *mut u8_0,
    pub playerSegment: *mut u8_0,
    pub unk_140: [libc::c_char; 4],
    pub itemPageVtx: *mut Vtx,
    pub equipPageVtx: *mut Vtx,
    pub mapPageVtx: *mut Vtx,
    pub questPageVtx: *mut Vtx,
    pub infoPanelVtx: *mut Vtx,
    pub itemVtx: *mut Vtx,
    pub equipVtx: *mut Vtx,
    pub unk_160: [libc::c_char; 4],
    pub questVtx: *mut Vtx,
    pub cursorVtx: *mut Vtx,
    pub saveVtx: *mut Vtx,
    pub unk_170: [libc::c_char; 36],
    pub ocarinaStaff: *mut OcarinaStaff,
    pub unk_198: [libc::c_char; 32],
    pub loadQueue: OSMesgQueue,
    pub loadMsg: OSMesg,
    pub state: u16_0,
    pub debugState: u16_0,
    pub eye: Vec3f,
    pub unk_1E4: u16_0,
    pub mode: u16_0,
    pub pageIndex: u16_0,
    pub unk_1EA: u16_0,
    pub unk_1EC: u16_0,
    pub unk_1F0: f32_0,
    pub unk_1F4: f32_0,
    pub unk_1F8: f32_0,
    pub unk_1FC: f32_0,
    pub unk_200: f32_0,
    pub unk_204: f32_0,
    pub alpha: u16_0,
    pub offsetY: s16,
    pub unk_20C: [libc::c_char; 8],
    pub stickRelX: s16,
    pub stickRelY: s16,
    pub cursorPoint: [s16; 5],
    pub cursorX: [s16; 5],
    pub cursorY: [s16; 5],
    pub dungeonMapSlot: s16,
    pub cursorSpecialPos: s16,
    pub pageSwitchTimer: s16,
    pub namedItem: u16_0,
    pub cursorItem: [u16_0; 4],
    pub cursorSlot: [u16_0; 4],
    pub equipTargetItem: u16_0,
    pub equipTargetSlot: u16_0,
    pub equipTargetCBtn: u16_0,
    pub equipAnimX: s16,
    pub equipAnimY: s16,
    pub equipAnimAlpha: s16,
    pub infoPanelOffsetY: s16,
    pub nameDisplayTimer: u16_0,
    pub nameColorSet: u16_0,
    pub cursorColorSet: s16,
    pub promptChoice: s16,
    pub ocarinaSongIdx: s16,
    pub worldMapPoints: [u8_0; 20],
    pub tradeQuestLocation: u8_0,
    pub playerSkelAnime: SkelAnime,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OcarinaStaff {
    pub noteIdx: u8_0,
    pub state: u8_0,
    pub pos: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct View {
    pub magic: s32,
    pub gfxCtx: *mut GraphicsContext,
    pub viewport: Viewport,
    pub fovy: f32_0,
    pub zNear: f32_0,
    pub zFar: f32_0,
    pub scale: f32_0,
    pub eye: Vec3f,
    pub lookAt: Vec3f,
    pub up: Vec3f,
    pub vp: Vp,
    pub projection: Mtx,
    pub viewing: Mtx,
    pub projectionPtr: *mut Mtx,
    pub viewingPtr: *mut Mtx,
    pub unk_E8: Vec3f,
    pub unk_F4: Vec3f,
    pub unk_100: f32_0,
    pub unk_104: Vec3f,
    pub unk_110: Vec3f,
    pub normal: u16_0,
    pub flags: s32,
    pub unk_124: s32,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Viewport {
    pub topY: s32,
    pub bottomY: s32,
    pub leftX: s32,
    pub rightX: s32,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraphicsContext {
    pub polyOpaBuffer: *mut Gfx,
    pub polyXluBuffer: *mut Gfx,
    pub unk_008: [libc::c_char; 8],
    pub overlayBuffer: *mut Gfx,
    pub unk_014: u32_0,
    pub unk_018: [libc::c_char; 32],
    pub msgBuff: [OSMesg; 8],
    pub schedMsgQ: *mut OSMesgQueue,
    pub queue: OSMesgQueue,
    pub unk_074: [libc::c_char; 4],
    pub task: OSScTask,
    pub unk_0D0: [libc::c_char; 224],
    pub workBuffer: *mut Gfx,
    pub work: TwoHeadGfxArena,
    pub unk_01C4: [libc::c_char; 192],
    pub viMode: *mut OSViMode,
    pub unk_0288: [libc::c_char; 32],
    pub overlay: TwoHeadGfxArena,
    pub polyOpa: TwoHeadGfxArena,
    pub polyXlu: TwoHeadGfxArena,
    pub gfxPoolIdx: u32_0,
    pub curFrameBuffer: *mut u16_0,
    pub unk_2E0: [libc::c_char; 4],
    pub viFeatures: u32_0,
    pub fbIdx: s32,
    pub callback: Option<unsafe extern "C" fn(_: *mut GraphicsContext,
                                              _: *mut libc::c_void) -> ()>,
    pub callbackParam: *mut libc::c_void,
    pub xScale: f32_0,
    pub yScale: f32_0,
    pub unk_2FC: [libc::c_char; 4],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TwoHeadGfxArena {
    pub size: u32_0,
    pub bufp: *mut Gfx,
    pub p: *mut Gfx,
    pub d: *mut Gfx,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSScTask {
    pub next: *mut OSScTask,
    pub state: u32_0,
    pub flags: u32_0,
    pub framebuffer: *mut CfbInfo,
    pub list: OSTask,
    pub msgQ: *mut OSMesgQueue,
    pub msg: OSMesg,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CfbInfo {
    pub fb1: *mut u16_0,
    pub swapBuffer: *mut u16_0,
    pub viMode: *mut OSViMode,
    pub features: u32_0,
    pub unk_10: u8_0,
    pub updateRate: s8,
    pub updateRate2: s8,
    pub unk_13: u8_0,
    pub xScale: f32_0,
    pub yScale: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct InterfaceContext {
    pub view: View,
    pub actionVtx: *mut Vtx,
    pub beatingHeartVtx: *mut Vtx,
    pub parameterSegment: *mut u8_0,
    pub doActionSegment: *mut u8_0,
    pub iconItemSegment: *mut u8_0,
    pub mapSegment: *mut u8_0,
    pub mapPalette: [u8_0; 32],
    pub dmaRequest_160: DmaRequest,
    pub dmaRequest_180: DmaRequest,
    pub unk_1A0: [libc::c_char; 32],
    pub loadQueue: OSMesgQueue,
    pub loadMsg: OSMesg,
    pub viewport: Viewport,
    pub unk_1EC: s16,
    pub unk_1EE: u16_0,
    pub unk_1F0: u16_0,
    pub unk_1F4: f32_0,
    pub naviCalling: s16,
    pub unk_1FA: s16,
    pub unk_1FC: s16,
    pub unk_1FE: s16,
    pub unk_200: s16,
    pub beatingHeartPrim: [s16; 3],
    pub beatingHeartEnv: [s16; 3],
    pub heartsPrimR: [s16; 2],
    pub heartsPrimG: [s16; 2],
    pub heartsPrimB: [s16; 2],
    pub heartsEnvR: [s16; 2],
    pub heartsEnvG: [s16; 2],
    pub heartsEnvB: [s16; 2],
    pub unk_226: s16,
    pub unk_228: s16,
    pub unk_22A: s16,
    pub unk_22C: s16,
    pub unk_22E: s16,
    pub unk_230: s16,
    pub counterDigits: [s16; 4],
    pub numHorseBoosts: u8_0,
    pub unk_23C: u16_0,
    pub hbaAmmo: u16_0,
    pub unk_240: u16_0,
    pub unk_242: u16_0,
    pub unk_244: u16_0,
    pub aAlpha: u16_0,
    pub bAlpha: u16_0,
    pub cLeftAlpha: u16_0,
    pub cDownAlpha: u16_0,
    pub cRightAlpha: u16_0,
    pub healthAlpha: u16_0,
    pub magicAlpha: u16_0,
    pub minimapAlpha: u16_0,
    pub startAlpha: s16,
    pub unk_258: s16,
    pub unk_25A: s16,
    pub mapRoomNum: s16,
    pub mapPaletteIndex: s16,
    pub unk_260: u8_0,
    pub unk_261: u8_0,
    pub restrictions: C2RustUnnamed_12,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_12 {
    pub hGauge: u8_0,
    pub bButton: u8_0,
    pub aButton: u8_0,
    pub bottles: u8_0,
    pub tradeItems: u8_0,
    pub hookshot: u8_0,
    pub ocarina: u8_0,
    pub warpSongs: u8_0,
    pub sunsSong: u8_0,
    pub farores: u8_0,
    pub dinsNayrus: u8_0,
    pub all: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct MessageContext {
    pub view: View,
    pub font: Font,
    pub textboxSegment: *mut libc::c_void,
    pub unk_E2B4: [libc::c_char; 4],
    pub ocarinaStaff: *mut OcarinaStaff,
    pub unk_E2BC: [libc::c_char; 60],
    pub textId: u16_0,
    pub choiceTextId: u16_0,
    pub textBoxProperties: u8_0,
    pub textBoxType: u8_0,
    pub textBoxPos: u8_0,
    pub msgLength: s32,
    pub msgMode: u8_0,
    pub unk_E305: [libc::c_char; 1],
    pub msgBufDecoded: [u8_0; 200],
    pub msgBufPos: u16_0,
    pub unk_E3D0: u16_0,
    pub textDrawPos: u16_0,
    pub decodedTextLen: u16_0,
    pub textUnskippable: u16_0,
    pub textPosX: s16,
    pub textPosY: s16,
    pub textColorR: s16,
    pub textColorG: s16,
    pub textColorB: s16,
    pub textColorAlpha: s16,
    pub textboxEndType: u8_0,
    pub choiceIndex: u8_0,
    pub choiceNum: u8_0,
    pub stateTimer: u8_0,
    pub textDelayTimer: u16_0,
    pub textDelay: u16_0,
    pub lastPlayedSong: u16_0,
    pub ocarinaMode: u16_0,
    pub ocarinaAction: u16_0,
    pub unk_E3F2: u16_0,
    pub unk_E3F4: u16_0,
    pub textboxBackgroundIdx: u16_0,
    pub textboxBackgroundForeColorIdx: u8_0,
    pub textboxBackgroundBackColorIdx: u8_0,
    pub textboxBackgroundYOffsetIdx: u8_0,
    pub textboxBackgroundUnkArg: u8_0,
    pub unk_E3FC: [libc::c_char; 2],
    pub textboxColorRed: s16,
    pub textboxColorGreen: s16,
    pub textboxColorBlue: s16,
    pub textboxColorAlphaTarget: s16,
    pub textboxColorAlphaCurrent: s16,
    pub talkActor: *mut Actor,
    pub disableWarpSongs: s16,
    pub unk_E40E: s16,
    pub lastOcaNoteIdx: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Font {
    pub msgOffset: u32_0,
    pub msgLength: u32_0,
    pub charTexBuf: [u8_0; 15360],
    pub iconBuf: [u8_0; 128],
    pub fontBuf: [u8_0; 40960],
    pub c2rust_unnamed: C2RustUnnamed_13,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_13 {
    pub msgBuf: [libc::c_char; 1280],
    pub msgBufWide: [u16_0; 640],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SkyboxContext {
    pub unk_00: [libc::c_char; 296],
    pub staticSegments: [*mut libc::c_void; 2],
    pub palettes: *mut [u16_0; 256],
    pub dListBuf: *mut [Gfx; 150],
    pub unk_138: *mut Gfx,
    pub roomVtx: *mut Vtx,
    pub unk_140: s16,
    pub rot: Vec3f,
    pub unk_150: [libc::c_char; 16],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SramContext {
    pub readBuff: *mut u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SoundSource {
    pub countdown: u16_0,
    pub originPos: Vec3f,
    pub relativePos: Vec3f,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CutsceneContext {
    pub unk_00: [libc::c_char; 4],
    pub segment: *mut libc::c_void,
    pub state: u8_0,
    pub unk_0C: f32_0,
    pub frames: u16_0,
    pub unk_12: u16_0,
    pub unk_14: s32,
    pub unk_18: u16_0,
    pub unk_1A: u8_0,
    pub unk_1B: u8_0,
    pub cameraFocus: *mut CutsceneCameraPoint,
    pub cameraPosition: *mut CutsceneCameraPoint,
    pub linkAction: *mut CsCmdActorAction,
    pub npcActions: [*mut CsCmdActorAction; 10],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CsCmdActorAction {
    pub action: u16_0,
    pub startFrame: u16_0,
    pub endFrame: u16_0,
    pub c2rust_unnamed: C2RustUnnamed_14,
    pub startPos: Vec3i,
    pub endPos: Vec3i,
    pub normal: Vec3i,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_14 {
    pub rot: Vec3s,
    pub urot: Vec3us,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CutsceneCameraPoint {
    pub continueFlag: s8,
    pub cameraRoll: s8,
    pub nextPointFrame: u16_0,
    pub viewAngle: f32_0,
    pub pos: Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ActorContext {
    pub freezeFlashTimer: u8_0,
    pub unk_01: [libc::c_char; 1],
    pub unk_02: u8_0,
    pub unk_03: u8_0,
    pub unk_04: [libc::c_char; 4],
    pub total: u8_0,
    pub unk_09: [libc::c_char; 3],
    pub actorLists: [ActorListEntry; 12],
    pub targetCtx: TargetContext,
    pub flags: C2RustUnnamed_15,
    pub titleCtx: TitleCardContext,
    pub unk_138: [libc::c_char; 4],
    pub absoluteSpace: *mut libc::c_void,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TitleCardContext {
    pub texture: *mut libc::c_void,
    pub x: s16,
    pub y: s16,
    pub width: u8_0,
    pub height: u8_0,
    pub durationTimer: u8_0,
    pub delayTimer: u8_0,
    pub alpha: s16,
    pub intensity: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_15 {
    pub swch: u32_0,
    pub tempSwch: u32_0,
    pub unk0: u32_0,
    pub unk1: u32_0,
    pub chest: u32_0,
    pub clear: u32_0,
    pub tempClear: u32_0,
    pub collect: u32_0,
    pub tempCollect: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TargetContext {
    pub naviRefPos: Vec3f,
    pub targetCenterPos: Vec3f,
    pub naviInner: Color_RGBAf,
    pub naviOuter: Color_RGBAf,
    pub arrowPointedActor: *mut Actor,
    pub targetedActor: *mut Actor,
    pub unk_40: f32_0,
    pub unk_44: f32_0,
    pub unk_48: s16,
    pub activeCategory: u8_0,
    pub unk_4B: u8_0,
    pub unk_4C: s8,
    pub unk_4D: [libc::c_char; 3],
    pub arr_50: [TargetContextEntry; 3],
    pub unk_8C: *mut Actor,
    pub bgmEnemy: *mut Actor,
    pub unk_94: *mut Actor,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TargetContextEntry {
    pub pos: Vec3f,
    pub unk_0C: f32_0,
    pub color: Color_RGB8,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ActorListEntry {
    pub length: s32,
    pub head: *mut Actor,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CollisionContext {
    pub colHeader: *mut CollisionHeader,
    pub minBounds: Vec3f,
    pub maxBounds: Vec3f,
    pub subdivAmount: Vec3i,
    pub subdivLength: Vec3f,
    pub subdivLengthInv: Vec3f,
    pub lookupTbl: *mut StaticLookup,
    pub polyNodes: SSNodeList,
    pub dyna: DynaCollisionContext,
    pub memSize: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct DynaCollisionContext {
    pub bitFlag: u8_0,
    pub bgActors: [BgActor; 50],
    pub bgActorFlags: [u16_0; 50],
    pub polyList: *mut CollisionPoly,
    pub vtxList: *mut Vec3s,
    pub polyNodes: DynaSSNodeList,
    pub polyNodesMax: s32,
    pub polyListMax: s32,
    pub vtxListMax: s32,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct DynaSSNodeList {
    pub tbl: *mut SSNode,
    pub count: s32,
    pub max: s32,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SSNode {
    pub polyId: s16,
    pub next: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct BgActor {
    pub actor: *mut Actor,
    pub colHeader: *mut CollisionHeader,
    pub dynaLookup: DynaLookup,
    pub vtxStartIndex: u16_0,
    pub prevTransform: ScaleRotPos,
    pub curTransform: ScaleRotPos,
    pub boundingSphere: Sphere16,
    pub minY: f32_0,
    pub maxY: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ScaleRotPos {
    pub scale: Vec3f,
    pub rot: Vec3s,
    pub pos: Vec3f,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct DynaLookup {
    pub polyStartIndex: u16_0,
    pub ceiling: SSList,
    pub wall: SSList,
    pub floor: SSList,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SSList {
    pub head: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CollisionHeader {
    pub minBounds: Vec3s,
    pub maxBounds: Vec3s,
    pub numVertices: u16_0,
    pub vtxList: *mut Vec3s,
    pub numPolygons: u16_0,
    pub polyList: *mut CollisionPoly,
    pub surfaceTypeList: *mut SurfaceType,
    pub cameraDataList: *mut CamData,
    pub numWaterBoxes: u16_0,
    pub waterBoxes: *mut WaterBox,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct WaterBox {
    pub xMin: s16,
    pub ySurface: s16,
    pub zMin: s16,
    pub xLength: s16,
    pub zLength: s16,
    pub properties: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CamData {
    pub cameraSType: u16_0,
    pub numCameras: s16,
    pub camPosData: *mut Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SurfaceType {
    pub data: [u32_0; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SSNodeList {
    pub max: u16_0,
    pub count: u16_0,
    pub tbl: *mut SSNode,
    pub polyCheckTbl: *mut u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct StaticLookup {
    pub floor: SSList,
    pub wall: SSList,
    pub ceiling: SSList,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct FrameAdvanceContext {
    pub enabled: s32,
    pub timer: s32,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SequenceContext {
    pub seqId: u8_0,
    pub natureAmbienceId: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Camera {
    pub paramData: [libc::c_char; 80],
    pub at: Vec3f,
    pub eye: Vec3f,
    pub up: Vec3f,
    pub eyeNext: Vec3f,
    pub skyboxOffset: Vec3f,
    pub globalCtx: *mut GlobalContext,
    pub player: *mut Player,
    pub playerPosRot: PosRot,
    pub target: *mut Actor,
    pub targetPosRot: PosRot,
    pub rUpdateRateInv: f32_0,
    pub pitchUpdateRateInv: f32_0,
    pub yawUpdateRateInv: f32_0,
    pub xzOffsetUpdateRate: f32_0,
    pub yOffsetUpdateRate: f32_0,
    pub fovUpdateRate: f32_0,
    pub xzSpeed: f32_0,
    pub dist: f32_0,
    pub speedRatio: f32_0,
    pub posOffset: Vec3f,
    pub playerPosDelta: Vec3f,
    pub fov: f32_0,
    pub atLERPStepScale: f32_0,
    pub playerGroundY: f32_0,
    pub floorNorm: Vec3f,
    pub waterYPos: f32_0,
    pub waterPrevCamIdx: s32,
    pub waterPrevCamSetting: s32,
    pub waterQuakeId: s32,
    pub data0: *mut libc::c_void,
    pub data1: *mut libc::c_void,
    pub data2: s16,
    pub data3: s16,
    pub uid: s16,
    pub unk_132: [libc::c_char; 2],
    pub inputDir: Vec3s,
    pub camDir: Vec3s,
    pub status: s16,
    pub setting: s16,
    pub mode: s16,
    pub bgCheckId: s16,
    pub camDataIdx: s16,
    pub unk_14A: s16,
    pub unk_14C: s16,
    pub childCamIdx: s16,
    pub unk_150: s16,
    pub unk_152: s16,
    pub prevSetting: s16,
    pub nextCamDataIdx: s16,
    pub nextBGCheckId: s16,
    pub roll: s16,
    pub paramFlags: s16,
    pub animState: s16,
    pub timer: s16,
    pub parentCamIdx: s16,
    pub thisIdx: s16,
    pub prevCamDataIdx: s16,
    pub csId: s16,
    pub unk_16A: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GameState {
    pub gfxCtx: *mut GraphicsContext,
    pub main: GameStateFunc,
    pub destroy: GameStateFunc,
    pub init: GameStateFunc,
    pub size: u32_0,
    pub input: [Input; 4],
    pub tha: TwoHeadArena,
    pub alloc: GameAlloc,
    pub running: u32_0,
    pub frames: u32_0,
    pub unk_A0: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GameAlloc {
    pub base: GameAllocEntry,
    pub head: *mut GameAllocEntry,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GameAllocEntry {
    pub next: *mut GameAllocEntry,
    pub prev: *mut GameAllocEntry,
    pub size: u32_0,
    pub unk_0C: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TwoHeadArena {
    pub size: u32_0,
    pub bufp: *mut libc::c_void,
    pub head: *mut libc::c_void,
    pub tail: *mut libc::c_void,
}
pub type GameStateFunc
    =
    Option<unsafe extern "C" fn(_: *mut GameState) -> ()>;
pub type C2RustUnnamed_16 = libc::c_uint;
pub const ACTORCAT_CHEST: C2RustUnnamed_16 = 11;
pub const ACTORCAT_DOOR: C2RustUnnamed_16 = 10;
pub const ACTORCAT_BOSS: C2RustUnnamed_16 = 9;
pub const ACTORCAT_MISC: C2RustUnnamed_16 = 8;
pub const ACTORCAT_ITEMACTION: C2RustUnnamed_16 = 7;
pub const ACTORCAT_PROP: C2RustUnnamed_16 = 6;
pub const ACTORCAT_ENEMY: C2RustUnnamed_16 = 5;
pub const ACTORCAT_NPC: C2RustUnnamed_16 = 4;
pub const ACTORCAT_EXPLOSIVE: C2RustUnnamed_16 = 3;
pub const ACTORCAT_PLAYER: C2RustUnnamed_16 = 2;
pub const ACTORCAT_BG: C2RustUnnamed_16 = 1;
pub const ACTORCAT_SWITCH: C2RustUnnamed_16 = 0;
pub type C2RustUnnamed_17 = libc::c_uint;
pub const CS_STATE_UNSKIPPABLE_EXEC: C2RustUnnamed_17 = 4;
pub const CS_STATE_UNSKIPPABLE_INIT: C2RustUnnamed_17 = 3;
pub const CS_STATE_SKIPPABLE_EXEC: C2RustUnnamed_17 = 2;
pub const CS_STATE_SKIPPABLE_INIT: C2RustUnnamed_17 = 1;
pub const CS_STATE_IDLE: C2RustUnnamed_17 = 0;
pub type C2RustUnnamed_18 = libc::c_uint;
pub const SCENE_ID_MAX: C2RustUnnamed_18 = 110;
pub const SCENE_TESTROOM: C2RustUnnamed_18 = 109;
pub const SCENE_SASATEST: C2RustUnnamed_18 = 108;
pub const SCENE_HAIRAL_NIWA2: C2RustUnnamed_18 = 107;
pub const SCENE_SUTARU: C2RustUnnamed_18 = 106;
pub const SCENE_SYOTES2: C2RustUnnamed_18 = 105;
pub const SCENE_SYOTES: C2RustUnnamed_18 = 104;
pub const SCENE_DEPTH_TEST: C2RustUnnamed_18 = 103;
pub const SCENE_BESITU: C2RustUnnamed_18 = 102;
pub const SCENE_TEST01: C2RustUnnamed_18 = 101;
pub const SCENE_GANON_TOU: C2RustUnnamed_18 = 100;
pub const SCENE_SPOT20: C2RustUnnamed_18 = 99;
pub const SCENE_SPOT18: C2RustUnnamed_18 = 98;
pub const SCENE_SPOT17: C2RustUnnamed_18 = 97;
pub const SCENE_SPOT16: C2RustUnnamed_18 = 96;
pub const SCENE_SPOT15: C2RustUnnamed_18 = 95;
pub const SCENE_SPOT13: C2RustUnnamed_18 = 94;
pub const SCENE_SPOT12: C2RustUnnamed_18 = 93;
pub const SCENE_SPOT11: C2RustUnnamed_18 = 92;
pub const SCENE_SPOT10: C2RustUnnamed_18 = 91;
pub const SCENE_SPOT09: C2RustUnnamed_18 = 90;
pub const SCENE_SPOT08: C2RustUnnamed_18 = 89;
pub const SCENE_SPOT07: C2RustUnnamed_18 = 88;
pub const SCENE_SPOT06: C2RustUnnamed_18 = 87;
pub const SCENE_SPOT05: C2RustUnnamed_18 = 86;
pub const SCENE_SPOT04: C2RustUnnamed_18 = 85;
pub const SCENE_SPOT03: C2RustUnnamed_18 = 84;
pub const SCENE_SPOT02: C2RustUnnamed_18 = 83;
pub const SCENE_SPOT01: C2RustUnnamed_18 = 82;
pub const SCENE_SPOT00: C2RustUnnamed_18 = 81;
pub const SCENE_KINSUTA: C2RustUnnamed_18 = 80;
pub const SCENE_GANON_DEMO: C2RustUnnamed_18 = 79;
pub const SCENE_MAHOUYA: C2RustUnnamed_18 = 78;
pub const SCENE_MIHARIGOYA: C2RustUnnamed_18 = 77;
pub const SCENE_SOUKO: C2RustUnnamed_18 = 76;
pub const SCENE_BOWLING: C2RustUnnamed_18 = 75;
pub const SCENE_NAKANIWA: C2RustUnnamed_18 = 74;
pub const SCENE_TURIBORI: C2RustUnnamed_18 = 73;
pub const SCENE_HAKASITARELAY: C2RustUnnamed_18 = 72;
pub const SCENE_HIRAL_DEMO: C2RustUnnamed_18 = 71;
pub const SCENE_HAIRAL_NIWA_N: C2RustUnnamed_18 = 70;
pub const SCENE_HAIRAL_NIWA: C2RustUnnamed_18 = 69;
pub const SCENE_KENJYANOMA: C2RustUnnamed_18 = 68;
pub const SCENE_TOKINOMA: C2RustUnnamed_18 = 67;
pub const SCENE_SYATEKIJYOU: C2RustUnnamed_18 = 66;
pub const SCENE_HAKAANA_OUKE: C2RustUnnamed_18 = 65;
pub const SCENE_HAKAANA2: C2RustUnnamed_18 = 64;
pub const SCENE_HAKAANA: C2RustUnnamed_18 = 63;
pub const SCENE_KAKUSIANA: C2RustUnnamed_18 = 62;
pub const SCENE_YOUSEI_IZUMI_YOKO: C2RustUnnamed_18 = 61;
pub const SCENE_YOUSEI_IZUMI_TATE: C2RustUnnamed_18 = 60;
pub const SCENE_DAIYOUSEI_IZUMI: C2RustUnnamed_18 = 59;
pub const SCENE_HUT: C2RustUnnamed_18 = 58;
pub const SCENE_TENT: C2RustUnnamed_18 = 57;
pub const SCENE_HYLIA_LABO: C2RustUnnamed_18 = 56;
pub const SCENE_LABO: C2RustUnnamed_18 = 55;
pub const SCENE_MALON_STABLE: C2RustUnnamed_18 = 54;
pub const SCENE_IMPA: C2RustUnnamed_18 = 53;
pub const SCENE_LINK_HOME: C2RustUnnamed_18 = 52;
pub const SCENE_FACE_SHOP: C2RustUnnamed_18 = 51;
pub const SCENE_NIGHT_SHOP: C2RustUnnamed_18 = 50;
pub const SCENE_ALLEY_SHOP: C2RustUnnamed_18 = 49;
pub const SCENE_DRAG: C2RustUnnamed_18 = 48;
pub const SCENE_ZOORA: C2RustUnnamed_18 = 47;
pub const SCENE_GOLON: C2RustUnnamed_18 = 46;
pub const SCENE_KOKIRI_SHOP: C2RustUnnamed_18 = 45;
pub const SCENE_SHOP1: C2RustUnnamed_18 = 44;
pub const SCENE_KAKARIKO3: C2RustUnnamed_18 = 43;
pub const SCENE_KAKARIKO: C2RustUnnamed_18 = 42;
pub const SCENE_KOKIRI_HOME5: C2RustUnnamed_18 = 41;
pub const SCENE_KOKIRI_HOME4: C2RustUnnamed_18 = 40;
pub const SCENE_KOKIRI_HOME3: C2RustUnnamed_18 = 39;
pub const SCENE_KOKIRI_HOME: C2RustUnnamed_18 = 38;
pub const SCENE_SHRINE_R: C2RustUnnamed_18 = 37;
pub const SCENE_SHRINE_N: C2RustUnnamed_18 = 36;
pub const SCENE_SHRINE: C2RustUnnamed_18 = 35;
pub const SCENE_MARKET_RUINS: C2RustUnnamed_18 = 34;
pub const SCENE_MARKET_NIGHT: C2RustUnnamed_18 = 33;
pub const SCENE_MARKET_DAY: C2RustUnnamed_18 = 32;
pub const SCENE_MARKET_ALLEY_N: C2RustUnnamed_18 = 31;
pub const SCENE_MARKET_ALLEY: C2RustUnnamed_18 = 30;
pub const SCENE_ENRUI: C2RustUnnamed_18 = 29;
pub const SCENE_ENTRA_N: C2RustUnnamed_18 = 28;
pub const SCENE_ENTRA: C2RustUnnamed_18 = 27;
pub const SCENE_GANON_FINAL: C2RustUnnamed_18 = 26;
pub const SCENE_GANON_BOSS: C2RustUnnamed_18 = 25;
pub const SCENE_HAKADAN_BS: C2RustUnnamed_18 = 24;
pub const SCENE_JYASINBOSS: C2RustUnnamed_18 = 23;
pub const SCENE_MIZUSIN_BS: C2RustUnnamed_18 = 22;
pub const SCENE_FIRE_BS: C2RustUnnamed_18 = 21;
pub const SCENE_MORIBOSSROOM: C2RustUnnamed_18 = 20;
pub const SCENE_BDAN_BOSS: C2RustUnnamed_18 = 19;
pub const SCENE_DDAN_BOSS: C2RustUnnamed_18 = 18;
pub const SCENE_YDAN_BOSS: C2RustUnnamed_18 = 17;
pub const SCENE_TAKARAYA: C2RustUnnamed_18 = 16;
pub const SCENE_GANONTIKA_SONOGO: C2RustUnnamed_18 = 15;
pub const SCENE_GANON_SONOGO: C2RustUnnamed_18 = 14;
pub const SCENE_GANONTIKA: C2RustUnnamed_18 = 13;
pub const SCENE_GERUDOWAY: C2RustUnnamed_18 = 12;
pub const SCENE_MEN: C2RustUnnamed_18 = 11;
pub const SCENE_GANON: C2RustUnnamed_18 = 10;
pub const SCENE_ICE_DOUKUTO: C2RustUnnamed_18 = 9;
pub const SCENE_HAKADANCH: C2RustUnnamed_18 = 8;
pub const SCENE_HAKADAN: C2RustUnnamed_18 = 7;
pub const SCENE_JYASINZOU: C2RustUnnamed_18 = 6;
pub const SCENE_MIZUSIN: C2RustUnnamed_18 = 5;
pub const SCENE_HIDAN: C2RustUnnamed_18 = 4;
pub const SCENE_BMORI1: C2RustUnnamed_18 = 3;
pub const SCENE_BDAN: C2RustUnnamed_18 = 2;
pub const SCENE_DDAN: C2RustUnnamed_18 = 1;
pub const SCENE_YDAN: C2RustUnnamed_18 = 0;
pub type C2RustUnnamed_19 = libc::c_uint;
pub const EQUIP_BOOTS: C2RustUnnamed_19 = 3;
pub const EQUIP_TUNIC: C2RustUnnamed_19 = 2;
pub const EQUIP_SHIELD: C2RustUnnamed_19 = 1;
pub const EQUIP_SWORD: C2RustUnnamed_19 = 0;
pub type C2RustUnnamed_20 = libc::c_uint;
pub const UPG_NUTS: C2RustUnnamed_20 = 7;
pub const UPG_STICKS: C2RustUnnamed_20 = 6;
pub const UPG_BULLET_BAG: C2RustUnnamed_20 = 5;
pub const UPG_WALLET: C2RustUnnamed_20 = 4;
pub const UPG_SCALE: C2RustUnnamed_20 = 3;
pub const UPG_STRENGTH: C2RustUnnamed_20 = 2;
pub const UPG_BOMB_BAG: C2RustUnnamed_20 = 1;
pub const UPG_QUIVER: C2RustUnnamed_20 = 0;
pub type C2RustUnnamed_21 = libc::c_uint;
pub const QUEST_HEART_PIECE: C2RustUnnamed_21 = 24;
pub const QUEST_SKULL_TOKEN: C2RustUnnamed_21 = 23;
pub const QUEST_GERUDO_CARD: C2RustUnnamed_21 = 22;
pub const QUEST_STONE_OF_AGONY: C2RustUnnamed_21 = 21;
pub const QUEST_ZORA_SAPPHIRE: C2RustUnnamed_21 = 20;
pub const QUEST_GORON_RUBY: C2RustUnnamed_21 = 19;
pub const QUEST_KOKIRI_EMERALD: C2RustUnnamed_21 = 18;
pub const QUEST_SONG_STORMS: C2RustUnnamed_21 = 17;
pub const QUEST_SONG_TIME: C2RustUnnamed_21 = 16;
pub const QUEST_SONG_SUN: C2RustUnnamed_21 = 15;
pub const QUEST_SONG_SARIA: C2RustUnnamed_21 = 14;
pub const QUEST_SONG_EPONA: C2RustUnnamed_21 = 13;
pub const QUEST_SONG_LULLABY: C2RustUnnamed_21 = 12;
pub const QUEST_SONG_PRELUDE: C2RustUnnamed_21 = 11;
pub const QUEST_SONG_NOCTURNE: C2RustUnnamed_21 = 10;
pub const QUEST_SONG_REQUIEM: C2RustUnnamed_21 = 9;
pub const QUEST_SONG_SERENADE: C2RustUnnamed_21 = 8;
pub const QUEST_SONG_BOLERO: C2RustUnnamed_21 = 7;
pub const QUEST_SONG_MINUET: C2RustUnnamed_21 = 6;
pub const QUEST_MEDALLION_LIGHT: C2RustUnnamed_21 = 5;
pub const QUEST_MEDALLION_SHADOW: C2RustUnnamed_21 = 4;
pub const QUEST_MEDALLION_SPIRIT: C2RustUnnamed_21 = 3;
pub const QUEST_MEDALLION_WATER: C2RustUnnamed_21 = 2;
pub const QUEST_MEDALLION_FIRE: C2RustUnnamed_21 = 1;
pub const QUEST_MEDALLION_FOREST: C2RustUnnamed_21 = 0;
pub type C2RustUnnamed_22 = libc::c_uint;
pub const SLOT_NONE: C2RustUnnamed_22 = 255;
pub const SLOT_TRADE_CHILD: C2RustUnnamed_22 = 23;
pub const SLOT_TRADE_ADULT: C2RustUnnamed_22 = 22;
pub const SLOT_BOTTLE_4: C2RustUnnamed_22 = 21;
pub const SLOT_BOTTLE_3: C2RustUnnamed_22 = 20;
pub const SLOT_BOTTLE_2: C2RustUnnamed_22 = 19;
pub const SLOT_BOTTLE_1: C2RustUnnamed_22 = 18;
pub const SLOT_NAYRUS_LOVE: C2RustUnnamed_22 = 17;
pub const SLOT_ARROW_LIGHT: C2RustUnnamed_22 = 16;
pub const SLOT_HAMMER: C2RustUnnamed_22 = 15;
pub const SLOT_BEAN: C2RustUnnamed_22 = 14;
pub const SLOT_LENS: C2RustUnnamed_22 = 13;
pub const SLOT_BOOMERANG: C2RustUnnamed_22 = 12;
pub const SLOT_FARORES_WIND: C2RustUnnamed_22 = 11;
pub const SLOT_ARROW_ICE: C2RustUnnamed_22 = 10;
pub const SLOT_HOOKSHOT: C2RustUnnamed_22 = 9;
pub const SLOT_BOMBCHU: C2RustUnnamed_22 = 8;
pub const SLOT_OCARINA: C2RustUnnamed_22 = 7;
pub const SLOT_SLINGSHOT: C2RustUnnamed_22 = 6;
pub const SLOT_DINS_FIRE: C2RustUnnamed_22 = 5;
pub const SLOT_ARROW_FIRE: C2RustUnnamed_22 = 4;
pub const SLOT_BOW: C2RustUnnamed_22 = 3;
pub const SLOT_BOMB: C2RustUnnamed_22 = 2;
pub const SLOT_NUT: C2RustUnnamed_22 = 1;
pub const SLOT_STICK: C2RustUnnamed_22 = 0;
pub type C2RustUnnamed_23 = libc::c_uint;
pub const ITEM_NONE: C2RustUnnamed_23 = 255;
pub const ITEM_NONE_FE: C2RustUnnamed_23 = 254;
pub const ITEM_LAST_USED: C2RustUnnamed_23 = 252;
pub const ITEM_NUT_UPGRADE_40: C2RustUnnamed_23 = 155;
pub const ITEM_NUT_UPGRADE_30: C2RustUnnamed_23 = 154;
pub const ITEM_STICK_UPGRADE_30: C2RustUnnamed_23 = 153;
pub const ITEM_STICK_UPGRADE_20: C2RustUnnamed_23 = 152;
pub const ITEM_BOMBCHUS_20: C2RustUnnamed_23 = 151;
pub const ITEM_BOMBCHUS_5: C2RustUnnamed_23 = 150;
pub const ITEM_SEEDS_30: C2RustUnnamed_23 = 149;
pub const ITEM_ARROWS_LARGE: C2RustUnnamed_23 = 148;
pub const ITEM_ARROWS_MEDIUM: C2RustUnnamed_23 = 147;
pub const ITEM_ARROWS_SMALL: C2RustUnnamed_23 = 146;
pub const ITEM_BOMBS_30: C2RustUnnamed_23 = 145;
pub const ITEM_BOMBS_20: C2RustUnnamed_23 = 144;
pub const ITEM_BOMBS_10: C2RustUnnamed_23 = 143;
pub const ITEM_BOMBS_5: C2RustUnnamed_23 = 142;
pub const ITEM_NUTS_10: C2RustUnnamed_23 = 141;
pub const ITEM_NUTS_5: C2RustUnnamed_23 = 140;
pub const ITEM_STICKS_10: C2RustUnnamed_23 = 139;
pub const ITEM_STICKS_5: C2RustUnnamed_23 = 138;
pub const ITEM_INVALID_8: C2RustUnnamed_23 = 137;
pub const ITEM_RUPEE_GOLD: C2RustUnnamed_23 = 136;
pub const ITEM_RUPEE_PURPLE: C2RustUnnamed_23 = 135;
pub const ITEM_RUPEE_RED: C2RustUnnamed_23 = 134;
pub const ITEM_RUPEE_BLUE: C2RustUnnamed_23 = 133;
pub const ITEM_RUPEE_GREEN: C2RustUnnamed_23 = 132;
pub const ITEM_HEART: C2RustUnnamed_23 = 131;
pub const ITEM_MILK: C2RustUnnamed_23 = 130;
pub const ITEM_INVALID_7: C2RustUnnamed_23 = 129;
pub const ITEM_INVALID_6: C2RustUnnamed_23 = 128;
pub const ITEM_INVALID_5: C2RustUnnamed_23 = 127;
pub const ITEM_INVALID_4: C2RustUnnamed_23 = 126;
pub const ITEM_INVALID_3: C2RustUnnamed_23 = 125;
pub const ITEM_INVALID_2: C2RustUnnamed_23 = 124;
pub const ITEM_INVALID_1: C2RustUnnamed_23 = 123;
pub const ITEM_HEART_PIECE_2: C2RustUnnamed_23 = 122;
pub const ITEM_MAGIC_LARGE: C2RustUnnamed_23 = 121;
pub const ITEM_MAGIC_SMALL: C2RustUnnamed_23 = 120;
pub const ITEM_KEY_SMALL: C2RustUnnamed_23 = 119;
pub const ITEM_DUNGEON_MAP: C2RustUnnamed_23 = 118;
pub const ITEM_COMPASS: C2RustUnnamed_23 = 117;
pub const ITEM_KEY_BOSS: C2RustUnnamed_23 = 116;
pub const ITEM_HEART_PIECE: C2RustUnnamed_23 = 115;
pub const ITEM_HEART_CONTAINER: C2RustUnnamed_23 = 114;
pub const ITEM_SKULL_TOKEN: C2RustUnnamed_23 = 113;
pub const ITEM_GERUDO_CARD: C2RustUnnamed_23 = 112;
pub const ITEM_STONE_OF_AGONY: C2RustUnnamed_23 = 111;
pub const ITEM_ZORA_SAPPHIRE: C2RustUnnamed_23 = 110;
pub const ITEM_GORON_RUBY: C2RustUnnamed_23 = 109;
pub const ITEM_KOKIRI_EMERALD: C2RustUnnamed_23 = 108;
pub const ITEM_MEDALLION_LIGHT: C2RustUnnamed_23 = 107;
pub const ITEM_MEDALLION_SHADOW: C2RustUnnamed_23 = 106;
pub const ITEM_MEDALLION_SPIRIT: C2RustUnnamed_23 = 105;
pub const ITEM_MEDALLION_WATER: C2RustUnnamed_23 = 104;
pub const ITEM_MEDALLION_FIRE: C2RustUnnamed_23 = 103;
pub const ITEM_MEDALLION_FOREST: C2RustUnnamed_23 = 102;
pub const ITEM_SONG_STORMS: C2RustUnnamed_23 = 101;
pub const ITEM_SONG_TIME: C2RustUnnamed_23 = 100;
pub const ITEM_SONG_SUN: C2RustUnnamed_23 = 99;
pub const ITEM_SONG_SARIA: C2RustUnnamed_23 = 98;
pub const ITEM_SONG_EPONA: C2RustUnnamed_23 = 97;
pub const ITEM_SONG_LULLABY: C2RustUnnamed_23 = 96;
pub const ITEM_SONG_PRELUDE: C2RustUnnamed_23 = 95;
pub const ITEM_SONG_NOCTURNE: C2RustUnnamed_23 = 94;
pub const ITEM_SONG_REQUIEM: C2RustUnnamed_23 = 93;
pub const ITEM_SONG_SERENADE: C2RustUnnamed_23 = 92;
pub const ITEM_SONG_BOLERO: C2RustUnnamed_23 = 91;
pub const ITEM_SONG_MINUET: C2RustUnnamed_23 = 90;
pub const ITEM_FISHING_POLE: C2RustUnnamed_23 = 89;
pub const ITEM_SEEDS: C2RustUnnamed_23 = 88;
pub const ITEM_WALLET_GIANT: C2RustUnnamed_23 = 87;
pub const ITEM_WALLET_ADULT: C2RustUnnamed_23 = 86;
pub const ITEM_SWORD_KNIFE: C2RustUnnamed_23 = 85;
pub const ITEM_SCALE_GOLDEN: C2RustUnnamed_23 = 84;
pub const ITEM_SCALE_SILVER: C2RustUnnamed_23 = 83;
pub const ITEM_GAUNTLETS_GOLD: C2RustUnnamed_23 = 82;
pub const ITEM_GAUNTLETS_SILVER: C2RustUnnamed_23 = 81;
pub const ITEM_BRACELET: C2RustUnnamed_23 = 80;
pub const ITEM_BOMB_BAG_40: C2RustUnnamed_23 = 79;
pub const ITEM_BOMB_BAG_30: C2RustUnnamed_23 = 78;
pub const ITEM_BOMB_BAG_20: C2RustUnnamed_23 = 77;
pub const ITEM_QUIVER_50: C2RustUnnamed_23 = 76;
pub const ITEM_QUIVER_40: C2RustUnnamed_23 = 75;
pub const ITEM_QUIVER_30: C2RustUnnamed_23 = 74;
pub const ITEM_BULLET_BAG_50: C2RustUnnamed_23 = 73;
pub const ITEM_BULLET_BAG_40: C2RustUnnamed_23 = 72;
pub const ITEM_BULLET_BAG_30: C2RustUnnamed_23 = 71;
pub const ITEM_BOOTS_HOVER: C2RustUnnamed_23 = 70;
pub const ITEM_BOOTS_IRON: C2RustUnnamed_23 = 69;
pub const ITEM_BOOTS_KOKIRI: C2RustUnnamed_23 = 68;
pub const ITEM_TUNIC_ZORA: C2RustUnnamed_23 = 67;
pub const ITEM_TUNIC_GORON: C2RustUnnamed_23 = 66;
pub const ITEM_TUNIC_KOKIRI: C2RustUnnamed_23 = 65;
pub const ITEM_SHIELD_MIRROR: C2RustUnnamed_23 = 64;
pub const ITEM_SHIELD_HYLIAN: C2RustUnnamed_23 = 63;
pub const ITEM_SHIELD_DEKU: C2RustUnnamed_23 = 62;
pub const ITEM_SWORD_BGS: C2RustUnnamed_23 = 61;
pub const ITEM_SWORD_MASTER: C2RustUnnamed_23 = 60;
pub const ITEM_SWORD_KOKIRI: C2RustUnnamed_23 = 59;
pub const ITEM_BOW_ARROW_LIGHT: C2RustUnnamed_23 = 58;
pub const ITEM_BOW_ARROW_ICE: C2RustUnnamed_23 = 57;
pub const ITEM_BOW_ARROW_FIRE: C2RustUnnamed_23 = 56;
pub const ITEM_CLAIM_CHECK: C2RustUnnamed_23 = 55;
pub const ITEM_EYEDROPS: C2RustUnnamed_23 = 54;
pub const ITEM_FROG: C2RustUnnamed_23 = 53;
pub const ITEM_PRESCRIPTION: C2RustUnnamed_23 = 52;
pub const ITEM_SWORD_BROKEN: C2RustUnnamed_23 = 51;
pub const ITEM_SAW: C2RustUnnamed_23 = 50;
pub const ITEM_ODD_POTION: C2RustUnnamed_23 = 49;
pub const ITEM_ODD_MUSHROOM: C2RustUnnamed_23 = 48;
pub const ITEM_COJIRO: C2RustUnnamed_23 = 47;
pub const ITEM_POCKET_CUCCO: C2RustUnnamed_23 = 46;
pub const ITEM_POCKET_EGG: C2RustUnnamed_23 = 45;
pub const ITEM_SOLD_OUT: C2RustUnnamed_23 = 44;
pub const ITEM_MASK_TRUTH: C2RustUnnamed_23 = 43;
pub const ITEM_MASK_GERUDO: C2RustUnnamed_23 = 42;
pub const ITEM_MASK_ZORA: C2RustUnnamed_23 = 41;
pub const ITEM_MASK_GORON: C2RustUnnamed_23 = 40;
pub const ITEM_MASK_BUNNY: C2RustUnnamed_23 = 39;
pub const ITEM_MASK_SPOOKY: C2RustUnnamed_23 = 38;
pub const ITEM_MASK_SKULL: C2RustUnnamed_23 = 37;
pub const ITEM_MASK_KEATON: C2RustUnnamed_23 = 36;
pub const ITEM_LETTER_ZELDA: C2RustUnnamed_23 = 35;
pub const ITEM_CHICKEN: C2RustUnnamed_23 = 34;
pub const ITEM_WEIRD_EGG: C2RustUnnamed_23 = 33;
pub const ITEM_POE: C2RustUnnamed_23 = 32;
pub const ITEM_MILK_HALF: C2RustUnnamed_23 = 31;
pub const ITEM_BIG_POE: C2RustUnnamed_23 = 30;
pub const ITEM_BUG: C2RustUnnamed_23 = 29;
pub const ITEM_BLUE_FIRE: C2RustUnnamed_23 = 28;
pub const ITEM_LETTER_RUTO: C2RustUnnamed_23 = 27;
pub const ITEM_MILK_BOTTLE: C2RustUnnamed_23 = 26;
pub const ITEM_FISH: C2RustUnnamed_23 = 25;
pub const ITEM_FAIRY: C2RustUnnamed_23 = 24;
pub const ITEM_POTION_BLUE: C2RustUnnamed_23 = 23;
pub const ITEM_POTION_GREEN: C2RustUnnamed_23 = 22;
pub const ITEM_POTION_RED: C2RustUnnamed_23 = 21;
pub const ITEM_BOTTLE: C2RustUnnamed_23 = 20;
pub const ITEM_NAYRUS_LOVE: C2RustUnnamed_23 = 19;
pub const ITEM_ARROW_LIGHT: C2RustUnnamed_23 = 18;
pub const ITEM_HAMMER: C2RustUnnamed_23 = 17;
pub const ITEM_BEAN: C2RustUnnamed_23 = 16;
pub const ITEM_LENS: C2RustUnnamed_23 = 15;
pub const ITEM_BOOMERANG: C2RustUnnamed_23 = 14;
pub const ITEM_FARORES_WIND: C2RustUnnamed_23 = 13;
pub const ITEM_ARROW_ICE: C2RustUnnamed_23 = 12;
pub const ITEM_LONGSHOT: C2RustUnnamed_23 = 11;
pub const ITEM_HOOKSHOT: C2RustUnnamed_23 = 10;
pub const ITEM_BOMBCHU: C2RustUnnamed_23 = 9;
pub const ITEM_OCARINA_TIME: C2RustUnnamed_23 = 8;
pub const ITEM_OCARINA_FAIRY: C2RustUnnamed_23 = 7;
pub const ITEM_SLINGSHOT: C2RustUnnamed_23 = 6;
pub const ITEM_DINS_FIRE: C2RustUnnamed_23 = 5;
pub const ITEM_ARROW_FIRE: C2RustUnnamed_23 = 4;
pub const ITEM_BOW: C2RustUnnamed_23 = 3;
pub const ITEM_BOMB: C2RustUnnamed_23 = 2;
pub const ITEM_NUT: C2RustUnnamed_23 = 1;
pub const ITEM_STICK: C2RustUnnamed_23 = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GameInfo {
    pub regPage: s32,
    pub regGroup: s32,
    pub regCur: s32,
    pub dpadLast: s32,
    pub repeat: s32,
    pub data: [s16; 2784],
}
pub type C2RustUnnamed_24 = libc::c_uint;
pub const OCARINA_ACTION_CHECK_NOWARP_DONE: C2RustUnnamed_24 = 49;
pub const OCARINA_ACTION_CHECK_NOWARP: C2RustUnnamed_24 = 48;
pub const OCARINA_ACTION_FROGS: C2RustUnnamed_24 = 47;
pub const OCARINA_ACTION_MEMORY_GAME: C2RustUnnamed_24 = 46;
pub const OCARINA_ACTION_SCARECROW_PLAYBACK: C2RustUnnamed_24 = 45;
pub const OCARINA_ACTION_SCARECROW_RECORDING: C2RustUnnamed_24 = 44;
pub const OCARINA_ACTION_SCARECROW_LONG_PLAYBACK: C2RustUnnamed_24 = 43;
pub const OCARINA_ACTION_SCARECROW_LONG_RECORDING: C2RustUnnamed_24 = 42;
pub const OCARINA_ACTION_FREE_PLAY_DONE: C2RustUnnamed_24 = 41;
pub const OCARINA_ACTION_CHECK_SCARECROW: C2RustUnnamed_24 = 40;
pub const OCARINA_ACTION_CHECK_STORMS: C2RustUnnamed_24 = 39;
pub const OCARINA_ACTION_CHECK_TIME: C2RustUnnamed_24 = 38;
pub const OCARINA_ACTION_CHECK_SUNS: C2RustUnnamed_24 = 37;
pub const OCARINA_ACTION_CHECK_LULLABY: C2RustUnnamed_24 = 36;
pub const OCARINA_ACTION_CHECK_EPONA: C2RustUnnamed_24 = 35;
pub const OCARINA_ACTION_CHECK_SARIA: C2RustUnnamed_24 = 34;
pub const OCARINA_ACTION_CHECK_PRELUDE: C2RustUnnamed_24 = 33;
pub const OCARINA_ACTION_CHECK_NOCTURNE: C2RustUnnamed_24 = 32;
pub const OCARINA_ACTION_CHECK_REQUIEM: C2RustUnnamed_24 = 31;
pub const OCARINA_ACTION_CHECK_SERENADE: C2RustUnnamed_24 = 30;
pub const OCARINA_ACTION_CHECK_BOLERO: C2RustUnnamed_24 = 29;
pub const OCARINA_ACTION_CHECK_MINUET: C2RustUnnamed_24 = 28;
pub const OCARINA_ACTION_UNK_1B: C2RustUnnamed_24 = 27;
pub const OCARINA_ACTION_PLAYBACK_STORMS: C2RustUnnamed_24 = 26;
pub const OCARINA_ACTION_PLAYBACK_TIME: C2RustUnnamed_24 = 25;
pub const OCARINA_ACTION_PLAYBACK_SUNS: C2RustUnnamed_24 = 24;
pub const OCARINA_ACTION_PLAYBACK_LULLABY: C2RustUnnamed_24 = 23;
pub const OCARINA_ACTION_PLAYBACK_EPONA: C2RustUnnamed_24 = 22;
pub const OCARINA_ACTION_PLAYBACK_SARIA: C2RustUnnamed_24 = 21;
pub const OCARINA_ACTION_PLAYBACK_PRELUDE: C2RustUnnamed_24 = 20;
pub const OCARINA_ACTION_PLAYBACK_NOCTURNE: C2RustUnnamed_24 = 19;
pub const OCARINA_ACTION_PLAYBACK_REQUIEM: C2RustUnnamed_24 = 18;
pub const OCARINA_ACTION_PLAYBACK_SERENADE: C2RustUnnamed_24 = 17;
pub const OCARINA_ACTION_PLAYBACK_BOLERO: C2RustUnnamed_24 = 16;
pub const OCARINA_ACTION_PLAYBACK_MINUET: C2RustUnnamed_24 = 15;
pub const OCARINA_ACTION_UNK_E: C2RustUnnamed_24 = 14;
pub const OCARINA_ACTION_TEACH_STORMS: C2RustUnnamed_24 = 13;
pub const OCARINA_ACTION_TEACH_TIME: C2RustUnnamed_24 = 12;
pub const OCARINA_ACTION_TEACH_SUNS: C2RustUnnamed_24 = 11;
pub const OCARINA_ACTION_TEACH_LULLABY: C2RustUnnamed_24 = 10;
pub const OCARINA_ACTION_TEACH_EPONA: C2RustUnnamed_24 = 9;
pub const OCARINA_ACTION_TEACH_SARIA: C2RustUnnamed_24 = 8;
pub const OCARINA_ACTION_TEACH_PRELUDE: C2RustUnnamed_24 = 7;
pub const OCARINA_ACTION_TEACH_NOCTURNE: C2RustUnnamed_24 = 6;
pub const OCARINA_ACTION_TEACH_REQUIEM: C2RustUnnamed_24 = 5;
pub const OCARINA_ACTION_TEACH_SERENADE: C2RustUnnamed_24 = 4;
pub const OCARINA_ACTION_TEACH_BOLERO: C2RustUnnamed_24 = 3;
pub const OCARINA_ACTION_TEACH_MINUET: C2RustUnnamed_24 = 2;
pub const OCARINA_ACTION_FREE_PLAY: C2RustUnnamed_24 = 1;
pub const OCARINA_ACTION_UNK_0: C2RustUnnamed_24 = 0;
pub type C2RustUnnamed_25 = libc::c_uint;
pub const OCARINA_MODE_0F: C2RustUnnamed_25 = 15;
pub const OCARINA_MODE_0E: C2RustUnnamed_25 = 14;
pub const OCARINA_MODE_0D: C2RustUnnamed_25 = 13;
pub const OCARINA_MODE_0C: C2RustUnnamed_25 = 12;
pub const OCARINA_MODE_0B: C2RustUnnamed_25 = 11;
pub const OCARINA_MODE_0A: C2RustUnnamed_25 = 10;
pub const OCARINA_MODE_09: C2RustUnnamed_25 = 9;
pub const OCARINA_MODE_08: C2RustUnnamed_25 = 8;
pub const OCARINA_MODE_07: C2RustUnnamed_25 = 7;
pub const OCARINA_MODE_06: C2RustUnnamed_25 = 6;
pub const OCARINA_MODE_05: C2RustUnnamed_25 = 5;
pub const OCARINA_MODE_04: C2RustUnnamed_25 = 4;
pub const OCARINA_MODE_03: C2RustUnnamed_25 = 3;
pub const OCARINA_MODE_02: C2RustUnnamed_25 = 2;
pub const OCARINA_MODE_01: C2RustUnnamed_25 = 1;
pub const OCARINA_MODE_00: C2RustUnnamed_25 = 0;
pub type C2RustUnnamed_26 = libc::c_uint;
pub const LANGUAGE_MAX: C2RustUnnamed_26 = 3;
pub const LANGUAGE_FRA: C2RustUnnamed_26 = 2;
pub const LANGUAGE_GER: C2RustUnnamed_26 = 1;
pub const LANGUAGE_ENG: C2RustUnnamed_26 = 0;
pub type C2RustUnnamed_27 = libc::c_uint;
pub const MSGMODE_PAUSED: C2RustUnnamed_27 = 55;
pub const MSGMODE_TEXT_CLOSING: C2RustUnnamed_27 = 54;
pub const MSGMODE_TEXT_DONE: C2RustUnnamed_27 = 53;
pub const MSGMODE_TEXT_AWAIT_NEXT: C2RustUnnamed_27 = 52;
pub const MSGMODE_FROGS_WAITING: C2RustUnnamed_27 = 51;
pub const MSGMODE_FROGS_PLAYING: C2RustUnnamed_27 = 50;
pub const MSGMODE_FROGS_START: C2RustUnnamed_27 = 49;
pub const MSGMODE_MEMORY_GAME_START_NEXT_ROUND: C2RustUnnamed_27 = 48;
pub const MSGMODE_MEMORY_GAME_ROUND_SUCCESS: C2RustUnnamed_27 = 47;
pub const MSGMODE_MEMORY_GAME_PLAYER_PLAYING: C2RustUnnamed_27 = 46;
pub const MSGMODE_MEMORY_GAME_RIGHT_SKULLKID_WAIT: C2RustUnnamed_27 = 45;
pub const MSGMODE_MEMORY_GAME_RIGHT_SKULLKID_PLAYING: C2RustUnnamed_27 = 44;
pub const MSGMODE_MEMORY_GAME_LEFT_SKULLKID_WAIT: C2RustUnnamed_27 = 43;
pub const MSGMODE_MEMORY_GAME_LEFT_SKULLKID_PLAYING: C2RustUnnamed_27 = 42;
pub const MSGMODE_MEMORY_GAME_START: C2RustUnnamed_27 = 41;
pub const MSGMODE_SCARECROW_PLAYBACK: C2RustUnnamed_27 = 40;
pub const MSGMODE_SCARECROW_RECORDING_DONE: C2RustUnnamed_27 = 39;
pub const MSGMODE_SCARECROW_RECORDING_FAILED: C2RustUnnamed_27 = 38;
pub const MSGMODE_SCARECROW_RECORDING_ONGOING: C2RustUnnamed_27 = 37;
pub const MSGMODE_SCARECROW_RECORDING_START: C2RustUnnamed_27 = 36;
pub const MSGMODE_SCARECROW_LONG_PLAYBACK: C2RustUnnamed_27 = 35;
pub const MSGMODE_SCARECROW_LONG_RECORDING_ONGOING: C2RustUnnamed_27 = 34;
pub const MSGMODE_SCARECROW_LONG_RECORDING_START: C2RustUnnamed_27 = 33;
pub const MSGMODE_UNK_20: C2RustUnnamed_27 = 32;
pub const MSGMODE_OCARINA_AWAIT_INPUT: C2RustUnnamed_27 = 31;
pub const MSGMODE_SONG_PLAYBACK_NOTES_DROP: C2RustUnnamed_27 = 30;
pub const MSGMODE_SONG_PLAYBACK_FAIL: C2RustUnnamed_27 = 29;
pub const MSGMODE_SONG_PLAYBACK_SUCCESS: C2RustUnnamed_27 = 28;
pub const MSGMODE_SONG_PLAYBACK: C2RustUnnamed_27 = 27;
pub const MSGMODE_SONG_DEMONSTRATION_DONE: C2RustUnnamed_27 = 26;
pub const MSGMODE_SONG_DEMONSTRATION: C2RustUnnamed_27 = 25;
pub const MSGMODE_SONG_DEMONSTRATION_SELECT_INSTRUMENT: C2RustUnnamed_27 = 24;
pub const MSGMODE_SONG_PLAYED_ACT: C2RustUnnamed_27 = 23;
pub const MSGMODE_SONG_PLAYED_ACT_BEGIN: C2RustUnnamed_27 = 22;
pub const MSGMODE_DISPLAY_SONG_PLAYED_TEXT: C2RustUnnamed_27 = 21;
pub const MSGMODE_DISPLAY_SONG_PLAYED_TEXT_BEGIN: C2RustUnnamed_27 = 20;
pub const MSGMODE_DISPLAY_SONG_PLAYED: C2RustUnnamed_27 = 19;
pub const MSGMODE_SETUP_DISPLAY_SONG_PLAYED: C2RustUnnamed_27 = 18;
pub const MSGMODE_SONG_PLAYED: C2RustUnnamed_27 = 17;
pub const MSGMODE_OCARINA_NOTES_DROP: C2RustUnnamed_27 = 16;
pub const MSGMODE_OCARINA_FAIL_NO_TEXT: C2RustUnnamed_27 = 15;
pub const MSGMODE_OCARINA_FAIL: C2RustUnnamed_27 = 14;
pub const MSGMODE_OCARINA_CORRECT_PLAYBACK: C2RustUnnamed_27 = 13;
pub const MSGMODE_OCARINA_PLAYING: C2RustUnnamed_27 = 12;
pub const MSGMODE_SONG_PLAYBACK_STARTING: C2RustUnnamed_27 = 11;
pub const MSGMODE_SONG_DEMONSTRATION_STARTING: C2RustUnnamed_27 = 10;
pub const MSGMODE_OCARINA_STARTING: C2RustUnnamed_27 = 9;
pub const MSGMODE_TEXT_DELAYED_BREAK: C2RustUnnamed_27 = 8;
pub const MSGMODE_TEXT_AWAIT_INPUT: C2RustUnnamed_27 = 7;
pub const MSGMODE_TEXT_DISPLAYING: C2RustUnnamed_27 = 6;
pub const MSGMODE_TEXT_CONTINUING: C2RustUnnamed_27 = 5;
pub const MSGMODE_TEXT_NEXT_MSG: C2RustUnnamed_27 = 4;
pub const MSGMODE_TEXT_STARTING: C2RustUnnamed_27 = 3;
pub const MSGMODE_TEXT_BOX_GROWING: C2RustUnnamed_27 = 2;
pub const MSGMODE_TEXT_START: C2RustUnnamed_27 = 1;
pub const MSGMODE_NONE: C2RustUnnamed_27 = 0;
pub type C2RustUnnamed_28 = libc::c_uint;
pub const TEXT_STATE_AWAITING_NEXT: C2RustUnnamed_28 = 10;
pub const TEXT_STATE_9: C2RustUnnamed_28 = 9;
pub const TEXT_STATE_8: C2RustUnnamed_28 = 8;
pub const TEXT_STATE_SONG_DEMO_DONE: C2RustUnnamed_28 = 7;
pub const TEXT_STATE_DONE: C2RustUnnamed_28 = 6;
pub const TEXT_STATE_EVENT: C2RustUnnamed_28 = 5;
pub const TEXT_STATE_CHOICE: C2RustUnnamed_28 = 4;
pub const TEXT_STATE_DONE_FADING: C2RustUnnamed_28 = 3;
pub const TEXT_STATE_CLOSING: C2RustUnnamed_28 = 2;
pub const TEXT_STATE_DONE_HAS_NEXT: C2RustUnnamed_28 = 1;
pub const TEXT_STATE_NONE: C2RustUnnamed_28 = 0;
pub type C2RustUnnamed_29 = libc::c_uint;
pub const DO_ACTION_MAX: C2RustUnnamed_29 = 29;
pub const DO_ACTION_8: C2RustUnnamed_29 = 28;
pub const DO_ACTION_7: C2RustUnnamed_29 = 27;
pub const DO_ACTION_6: C2RustUnnamed_29 = 26;
pub const DO_ACTION_5: C2RustUnnamed_29 = 25;
pub const DO_ACTION_4: C2RustUnnamed_29 = 24;
pub const DO_ACTION_3: C2RustUnnamed_29 = 23;
pub const DO_ACTION_2: C2RustUnnamed_29 = 22;
pub const DO_ACTION_1: C2RustUnnamed_29 = 21;
pub const DO_ACTION_REEL: C2RustUnnamed_29 = 20;
pub const DO_ACTION_PUTAWAY: C2RustUnnamed_29 = 19;
pub const DO_ACTION_STOP: C2RustUnnamed_29 = 18;
pub const DO_ACTION_GRAB: C2RustUnnamed_29 = 17;
pub const DO_ACTION_NEXT: C2RustUnnamed_29 = 16;
pub const DO_ACTION_SPEAK: C2RustUnnamed_29 = 15;
pub const DO_ACTION_SAVE: C2RustUnnamed_29 = 14;
pub const DO_ACTION_DOWN: C2RustUnnamed_29 = 13;
pub const DO_ACTION_DROP: C2RustUnnamed_29 = 12;
pub const DO_ACTION_CLIMB: C2RustUnnamed_29 = 11;
pub const DO_ACTION_NONE: C2RustUnnamed_29 = 10;
pub const DO_ACTION_THROW: C2RustUnnamed_29 = 9;
pub const DO_ACTION_FASTER: C2RustUnnamed_29 = 8;
pub const DO_ACTION_DIVE: C2RustUnnamed_29 = 7;
pub const DO_ACTION_DECIDE: C2RustUnnamed_29 = 6;
pub const DO_ACTION_JUMP: C2RustUnnamed_29 = 5;
pub const DO_ACTION_OPEN: C2RustUnnamed_29 = 4;
pub const DO_ACTION_RETURN: C2RustUnnamed_29 = 3;
pub const DO_ACTION_ENTER: C2RustUnnamed_29 = 2;
pub const DO_ACTION_CHECK: C2RustUnnamed_29 = 1;
pub const DO_ACTION_ATTACK: C2RustUnnamed_29 = 0;
pub type C2RustUnnamed_30 = libc::c_uint;
pub const PAUSE_WORLD_MAP: C2RustUnnamed_30 = 4;
pub const PAUSE_EQUIP: C2RustUnnamed_30 = 3;
pub const PAUSE_QUEST: C2RustUnnamed_30 = 2;
pub const PAUSE_MAP: C2RustUnnamed_30 = 1;
pub const PAUSE_ITEM: C2RustUnnamed_30 = 0;
pub type C2RustUnnamed_31 = libc::c_uint;
pub const GAMEOVER_REVIVE_FADE_OUT: C2RustUnnamed_31 = 24;
pub const GAMEOVER_REVIVE_WAIT_FAIRY: C2RustUnnamed_31 = 23;
pub const GAMEOVER_REVIVE_WAIT_GROUND: C2RustUnnamed_31 = 22;
pub const GAMEOVER_REVIVE_RUMBLE: C2RustUnnamed_31 = 21;
pub const GAMEOVER_REVIVE_START: C2RustUnnamed_31 = 20;
pub const GAMEOVER_DEATH_MENU: C2RustUnnamed_31 = 4;
pub const GAMEOVER_DEATH_DELAY_MENU: C2RustUnnamed_31 = 3;
pub const GAMEOVER_DEATH_WAIT_GROUND: C2RustUnnamed_31 = 2;
pub const GAMEOVER_DEATH_START: C2RustUnnamed_31 = 1;
pub const GAMEOVER_INACTIVE: C2RustUnnamed_31 = 0;
pub type C2RustUnnamed_32 = libc::c_uint;
pub const MTXMODE_APPLY: C2RustUnnamed_32 = 1;
pub const MTXMODE_NEW: C2RustUnnamed_32 = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct RestrictionFlags {
    pub scene: u8_0,
    pub flags1: u8_0,
    pub flags2: u8_0,
    pub flags3: u8_0,
}
static mut sRestrictionFlags: [RestrictionFlags; 101] =
    [{
         let mut init =
             RestrictionFlags{scene: SCENE_SPOT00 as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0x10 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_SPOT01 as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0x10 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_SPOT02 as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0x10 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_SPOT03 as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0x10 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_SPOT04 as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0x10 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_SPOT05 as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0x10 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_SPOT06 as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0x10 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_SPOT07 as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0x10 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_SPOT08 as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0x10 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_SPOT09 as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0x10 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_SPOT10 as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0x10 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_SPOT11 as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0x10 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_SPOT12 as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0x10 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_SPOT13 as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0x10 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_SPOT15 as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0x10 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_GANON_TOU as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0x10 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_SPOT16 as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0x10 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_SPOT17 as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0x10 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_SPOT18 as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0x10 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_SPOT20 as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0x10 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_TOKINOMA as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0x10 as libc::c_int as u8_0,
                              flags3: 0x15 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_KENJYANOMA as libc::c_int as u8_0,
                              flags1: 0xa2 as libc::c_int as u8_0,
                              flags2: 0xaa as libc::c_int as u8_0,
                              flags3: 0xaa as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_SYATEKIJYOU as libc::c_int as u8_0,
                              flags1: 0x11 as libc::c_int as u8_0,
                              flags2: 0x55 as libc::c_int as u8_0,
                              flags3: 0x55 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_HAIRAL_NIWA as libc::c_int as u8_0,
                              flags1: 0x11 as libc::c_int as u8_0,
                              flags2: 0x55 as libc::c_int as u8_0,
                              flags3: 0x55 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene:
                                  SCENE_HAIRAL_NIWA_N as libc::c_int as u8_0,
                              flags1: 0x11 as libc::c_int as u8_0,
                              flags2: 0x55 as libc::c_int as u8_0,
                              flags3: 0x55 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_HAKAANA as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0xd0 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_HAKAANA2 as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0xd0 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene:
                                  SCENE_HAKAANA_OUKE as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0xd0 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene:
                                  SCENE_DAIYOUSEI_IZUMI as libc::c_int as
                                      u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0x10 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene:
                                  SCENE_YOUSEI_IZUMI_TATE as libc::c_int as
                                      u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0xd0 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene:
                                  SCENE_YOUSEI_IZUMI_YOKO as libc::c_int as
                                      u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0x10 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_GANON_FINAL as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0x5 as libc::c_int as u8_0,
                              flags3: 0x50 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_NAKANIWA as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0x5 as libc::c_int as u8_0,
                              flags3: 0x54 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_TURIBORI as libc::c_int as u8_0,
                              flags1: 0x11 as libc::c_int as u8_0,
                              flags2: 0x55 as libc::c_int as u8_0,
                              flags3: 0x55 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_BOWLING as libc::c_int as u8_0,
                              flags1: 0x11 as libc::c_int as u8_0,
                              flags2: 0x55 as libc::c_int as u8_0,
                              flags3: 0x55 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_SOUKO as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0x10 as libc::c_int as u8_0,
                              flags3: 0x15 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_MIHARIGOYA as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0x10 as libc::c_int as u8_0,
                              flags3: 0x14 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_MAHOUYA as libc::c_int as u8_0,
                              flags1: 0x10 as libc::c_int as u8_0,
                              flags2: 0x15 as libc::c_int as u8_0,
                              flags3: 0x55 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_TAKARAYA as libc::c_int as u8_0,
                              flags1: 0x10 as libc::c_int as u8_0,
                              flags2: 0x15 as libc::c_int as u8_0,
                              flags3: 0x55 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_KINSUTA as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0x10 as libc::c_int as u8_0,
                              flags3: 0x15 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_ENTRA as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0x10 as libc::c_int as u8_0,
                              flags3: 0x15 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_ENTRA_N as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0x10 as libc::c_int as u8_0,
                              flags3: 0x15 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_ENRUI as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0x10 as libc::c_int as u8_0,
                              flags3: 0xd5 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_MARKET_DAY as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0x10 as libc::c_int as u8_0,
                              flags3: 0x15 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene:
                                  SCENE_MARKET_NIGHT as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0x10 as libc::c_int as u8_0,
                              flags3: 0x15 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene:
                                  SCENE_MARKET_RUINS as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0x10 as libc::c_int as u8_0,
                              flags3: 0xd5 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene:
                                  SCENE_MARKET_ALLEY as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0x10 as libc::c_int as u8_0,
                              flags3: 0x15 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene:
                                  SCENE_MARKET_ALLEY_N as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0x10 as libc::c_int as u8_0,
                              flags3: 0x15 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_SHRINE as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0x10 as libc::c_int as u8_0,
                              flags3: 0x15 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_SHRINE_N as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0x10 as libc::c_int as u8_0,
                              flags3: 0x15 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_SHRINE_R as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0x10 as libc::c_int as u8_0,
                              flags3: 0xd5 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_LINK_HOME as libc::c_int as u8_0,
                              flags1: 0x10 as libc::c_int as u8_0,
                              flags2: 0x10 as libc::c_int as u8_0,
                              flags3: 0x15 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_KAKARIKO as libc::c_int as u8_0,
                              flags1: 0x10 as libc::c_int as u8_0,
                              flags2: 0x10 as libc::c_int as u8_0,
                              flags3: 0x15 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_KAKARIKO3 as libc::c_int as u8_0,
                              flags1: 0x10 as libc::c_int as u8_0,
                              flags2: 0x10 as libc::c_int as u8_0,
                              flags3: 0x15 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_KOKIRI_HOME as libc::c_int as u8_0,
                              flags1: 0x10 as libc::c_int as u8_0,
                              flags2: 0x10 as libc::c_int as u8_0,
                              flags3: 0x15 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene:
                                  SCENE_KOKIRI_HOME3 as libc::c_int as u8_0,
                              flags1: 0x10 as libc::c_int as u8_0,
                              flags2: 0x10 as libc::c_int as u8_0,
                              flags3: 0x15 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene:
                                  SCENE_KOKIRI_HOME4 as libc::c_int as u8_0,
                              flags1: 0x10 as libc::c_int as u8_0,
                              flags2: 0x10 as libc::c_int as u8_0,
                              flags3: 0x15 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene:
                                  SCENE_KOKIRI_HOME5 as libc::c_int as u8_0,
                              flags1: 0x10 as libc::c_int as u8_0,
                              flags2: 0x10 as libc::c_int as u8_0,
                              flags3: 0x15 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene:
                                  SCENE_MALON_STABLE as libc::c_int as u8_0,
                              flags1: 0x10 as libc::c_int as u8_0,
                              flags2: 0x10 as libc::c_int as u8_0,
                              flags3: 0x15 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_HUT as libc::c_int as u8_0,
                              flags1: 0x10 as libc::c_int as u8_0,
                              flags2: 0x10 as libc::c_int as u8_0,
                              flags3: 0x15 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_IMPA as libc::c_int as u8_0,
                              flags1: 0x10 as libc::c_int as u8_0,
                              flags2: 0x10 as libc::c_int as u8_0,
                              flags3: 0x15 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_LABO as libc::c_int as u8_0,
                              flags1: 0x10 as libc::c_int as u8_0,
                              flags2: 0x10 as libc::c_int as u8_0,
                              flags3: 0x15 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_HYLIA_LABO as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0x10 as libc::c_int as u8_0,
                              flags3: 0x15 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_TENT as libc::c_int as u8_0,
                              flags1: 0x10 as libc::c_int as u8_0,
                              flags2: 0x10 as libc::c_int as u8_0,
                              flags3: 0x15 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_SHOP1 as libc::c_int as u8_0,
                              flags1: 0x10 as libc::c_int as u8_0,
                              flags2: 0x10 as libc::c_int as u8_0,
                              flags3: 0x15 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_KOKIRI_SHOP as libc::c_int as u8_0,
                              flags1: 0x10 as libc::c_int as u8_0,
                              flags2: 0x10 as libc::c_int as u8_0,
                              flags3: 0x15 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_GOLON as libc::c_int as u8_0,
                              flags1: 0x10 as libc::c_int as u8_0,
                              flags2: 0x10 as libc::c_int as u8_0,
                              flags3: 0x15 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_ZOORA as libc::c_int as u8_0,
                              flags1: 0x10 as libc::c_int as u8_0,
                              flags2: 0x10 as libc::c_int as u8_0,
                              flags3: 0x15 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_DRAG as libc::c_int as u8_0,
                              flags1: 0x10 as libc::c_int as u8_0,
                              flags2: 0x10 as libc::c_int as u8_0,
                              flags3: 0x15 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_ALLEY_SHOP as libc::c_int as u8_0,
                              flags1: 0x10 as libc::c_int as u8_0,
                              flags2: 0x10 as libc::c_int as u8_0,
                              flags3: 0x15 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_NIGHT_SHOP as libc::c_int as u8_0,
                              flags1: 0x10 as libc::c_int as u8_0,
                              flags2: 0x10 as libc::c_int as u8_0,
                              flags3: 0x15 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_FACE_SHOP as libc::c_int as u8_0,
                              flags1: 0x10 as libc::c_int as u8_0,
                              flags2: 0x10 as libc::c_int as u8_0,
                              flags3: 0x15 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_MEN as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0x3 as libc::c_int as u8_0,
                              flags3: 0x10 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_YDAN as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_YDAN_BOSS as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0x45 as libc::c_int as u8_0,
                              flags3: 0x50 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_DDAN as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_DDAN_BOSS as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0x45 as libc::c_int as u8_0,
                              flags3: 0x50 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_BDAN as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_BDAN_BOSS as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0x45 as libc::c_int as u8_0,
                              flags3: 0x50 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_BMORI1 as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene:
                                  SCENE_MORIBOSSROOM as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0x45 as libc::c_int as u8_0,
                              flags3: 0x50 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_HAKADANCH as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_HAKADAN as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_HAKADAN_BS as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0x45 as libc::c_int as u8_0,
                              flags3: 0x50 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_HIDAN as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_FIRE_BS as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0x45 as libc::c_int as u8_0,
                              flags3: 0x50 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_MIZUSIN as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_MIZUSIN_BS as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0x45 as libc::c_int as u8_0,
                              flags3: 0x50 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_JYASINZOU as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_JYASINBOSS as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0x45 as libc::c_int as u8_0,
                              flags3: 0x50 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_GANON as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_GANON_BOSS as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0x45 as libc::c_int as u8_0,
                              flags3: 0x50 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_ICE_DOUKUTO as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0xc0 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene:
                                  SCENE_HAKASITARELAY as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0x3 as libc::c_int as u8_0,
                              flags3: 0x14 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_GANONTIKA as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0x3 as libc::c_int as u8_0,
                              flags3: 0x10 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_GANON_DEMO as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0x45 as libc::c_int as u8_0,
                              flags3: 0x50 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene:
                                  SCENE_GANON_SONOGO as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0x5 as libc::c_int as u8_0,
                              flags3: 0x50 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene:
                                  SCENE_GANONTIKA_SONOGO as libc::c_int as
                                      u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0x5 as libc::c_int as u8_0,
                              flags3: 0x50 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_GERUDOWAY as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0x10 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: SCENE_KAKUSIANA as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0xd0 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             RestrictionFlags{scene: 0xff as libc::c_int as u8_0,
                              flags1: 0 as libc::c_int as u8_0,
                              flags2: 0 as libc::c_int as u8_0,
                              flags3: 0 as libc::c_int as u8_0,};
         init
     }];
static mut sHBAScoreTier: s16 = 0 as libc::c_int as s16;
static mut sHBAScoreDigits: [u16_0; 4] =
    [0 as libc::c_int as u16_0, 0 as libc::c_int as u16_0,
     0 as libc::c_int as u16_0, 0 as libc::c_int as u16_0];
static mut sCUpInvisible: u16_0 = 0 as libc::c_int as u16_0;
static mut sCUpTimer: u16_0 = 0 as libc::c_int as u16_0;
#[no_mangle]
pub static mut gSpoilingItems: [s16; 3] =
    [ITEM_ODD_MUSHROOM as libc::c_int as s16, ITEM_FROG as libc::c_int as s16,
     ITEM_EYEDROPS as libc::c_int as s16];
#[no_mangle]
pub static mut gSpoilingItemReverts: [s16; 3] =
    [ITEM_COJIRO as libc::c_int as s16,
     ITEM_PRESCRIPTION as libc::c_int as s16,
     ITEM_PRESCRIPTION as libc::c_int as s16];
static mut sMagicBorderR: s16 = 255 as libc::c_int as s16;
static mut sMagicBorderG: s16 = 255 as libc::c_int as s16;
static mut sMagicBorderB: s16 = 255 as libc::c_int as s16;
static mut sExtraItemBases: [s16; 18] =
    [ITEM_STICK as libc::c_int as s16, ITEM_STICK as libc::c_int as s16,
     ITEM_NUT as libc::c_int as s16, ITEM_NUT as libc::c_int as s16,
     ITEM_BOMB as libc::c_int as s16, ITEM_BOMB as libc::c_int as s16,
     ITEM_BOMB as libc::c_int as s16, ITEM_BOMB as libc::c_int as s16,
     ITEM_BOW as libc::c_int as s16, ITEM_BOW as libc::c_int as s16,
     ITEM_BOW as libc::c_int as s16, ITEM_SEEDS as libc::c_int as s16,
     ITEM_BOMBCHU as libc::c_int as s16, ITEM_BOMBCHU as libc::c_int as s16,
     ITEM_STICK as libc::c_int as s16, ITEM_STICK as libc::c_int as s16,
     ITEM_NUT as libc::c_int as s16, ITEM_NUT as libc::c_int as s16];
static mut D_80125A58: s16 = 0 as libc::c_int as s16;
static mut D_80125A5C: s16 = 0 as libc::c_int as s16;
static mut sSetupDL_80125A60: [Gfx; 5] =
    [Gfx{words:
             {
                 let mut init =
                     Gwords{w0:
                                (0xe7 as libc::c_int as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 24 as libc::c_int,
                            w1: 0 as libc::c_int as libc::c_uint,};
                 init
             },},
     Gfx{words:
             {
                 let mut init =
                     Gwords{w0:
                                (0xd9 as libc::c_int as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 24 as libc::c_int |
                                    (!((0x1 as libc::c_int |
                                            0x4 as libc::c_int |
                                            0x600 as libc::c_int |
                                            0x10000 as libc::c_int |
                                            0x20000 as libc::c_int |
                                            0x40000 as libc::c_int |
                                            0x80000 as libc::c_int |
                                            0x200000 as libc::c_int |
                                            0x100000 as libc::c_int) as u32_0)
                                         &
                                         (((0x1 as libc::c_int) <<
                                               24 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        0 as libc::c_int,
                            w1: 0 as libc::c_int as u32_0,};
                 init
             },},
     Gfx{words:
             {
                 let mut init =
                     Gwords{w0:
                                (0xef as libc::c_int as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 24 as libc::c_int |
                                    (((3 as libc::c_int) << 4 as libc::c_int |
                                          (0 as libc::c_int) <<
                                              6 as libc::c_int |
                                          (0 as libc::c_int) <<
                                              8 as libc::c_int |
                                          (6 as libc::c_int) <<
                                              9 as libc::c_int |
                                          (2 as libc::c_int) <<
                                              12 as libc::c_int |
                                          (0 as libc::c_int) <<
                                              14 as libc::c_int |
                                          (0 as libc::c_int) <<
                                              16 as libc::c_int |
                                          (0 as libc::c_int) <<
                                              17 as libc::c_int |
                                          (0 as libc::c_int) <<
                                              19 as libc::c_int |
                                          (0 as libc::c_int) <<
                                              20 as libc::c_int |
                                          (1 as libc::c_int) <<
                                              23 as libc::c_int) as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               24 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        0 as libc::c_int,
                            w1:
                                ((0 as libc::c_int) << 0 as libc::c_int |
                                     (0 as libc::c_int) << 2 as libc::c_int |
                                     0x40 as libc::c_int |
                                     0x300 as libc::c_int |
                                     0x4000 as libc::c_int | 0 as libc::c_int
                                     | (0 as libc::c_int) << 30 as libc::c_int
                                     | (0 as libc::c_int) << 26 as libc::c_int
                                     | (1 as libc::c_int) << 22 as libc::c_int
                                     | (0 as libc::c_int) << 18 as libc::c_int
                                     | 0x40 as libc::c_int |
                                     0x300 as libc::c_int |
                                     0x4000 as libc::c_int | 0 as libc::c_int
                                     | (0 as libc::c_int) << 28 as libc::c_int
                                     | (0 as libc::c_int) << 24 as libc::c_int
                                     | (1 as libc::c_int) << 20 as libc::c_int
                                     |
                                     (0 as libc::c_int) << 16 as libc::c_int)
                                    as libc::c_uint,};
                 init
             },},
     Gfx{words:
             {
                 let mut init =
                     Gwords{w0:
                                (0xfc as libc::c_int as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 24 as libc::c_int |
                                    (((31 as libc::c_int as u32_0 &
                                           (((0x1 as libc::c_int) <<
                                                 4 as libc::c_int) -
                                                1 as libc::c_int) as
                                               libc::c_uint) <<
                                          20 as libc::c_int |
                                          (31 as libc::c_int as u32_0 &
                                               (((0x1 as libc::c_int) <<
                                                     5 as libc::c_int) -
                                                    1 as libc::c_int) as
                                                   libc::c_uint) <<
                                              15 as libc::c_int |
                                          (7 as libc::c_int as u32_0 &
                                               (((0x1 as libc::c_int) <<
                                                     3 as libc::c_int) -
                                                    1 as libc::c_int) as
                                                   libc::c_uint) <<
                                              12 as libc::c_int |
                                          (7 as libc::c_int as u32_0 &
                                               (((0x1 as libc::c_int) <<
                                                     3 as libc::c_int) -
                                                    1 as libc::c_int) as
                                                   libc::c_uint) <<
                                              9 as libc::c_int |
                                          ((31 as libc::c_int as u32_0 &
                                                (((0x1 as libc::c_int) <<
                                                      4 as libc::c_int) -
                                                     1 as libc::c_int) as
                                                    libc::c_uint) <<
                                               5 as libc::c_int |
                                               (31 as libc::c_int as u32_0 &
                                                    (((0x1 as libc::c_int) <<
                                                          5 as libc::c_int) -
                                                         1 as libc::c_int) as
                                                        libc::c_uint) <<
                                                   0 as libc::c_int)) &
                                         (((0x1 as libc::c_int) <<
                                               24 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        0 as libc::c_int,
                            w1:
                                (31 as libc::c_int as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           4 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 28 as libc::c_int |
                                    (3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        15 as libc::c_int |
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        12 as libc::c_int |
                                    (3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) << 9 as libc::c_int
                                    |
                                    ((31 as libc::c_int as u32_0 &
                                          (((0x1 as libc::c_int) <<
                                                4 as libc::c_int) -
                                               1 as libc::c_int) as
                                              libc::c_uint) <<
                                         24 as libc::c_int |
                                         (7 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    3 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             21 as libc::c_int |
                                         (7 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    3 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             18 as libc::c_int |
                                         (3 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    3 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             6 as libc::c_int |
                                         (7 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    3 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             3 as libc::c_int |
                                         (3 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    3 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             0 as libc::c_int),};
                 init
             },},
     Gfx{words:
             {
                 let mut init =
                     Gwords{w0:
                                (0xdf as libc::c_int as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 24 as libc::c_int,
                            w1: 0 as libc::c_int as libc::c_uint,};
                 init
             },}];
// original name: "alpha_change"
#[no_mangle]
pub unsafe extern "C" fn Interface_ChangeAlpha(mut alphaType: u16_0) {
    if alphaType as libc::c_int != gSaveContext.unk_13EA as libc::c_int {
        osSyncPrintf(b"\xef\xbc\xa1\xef\xbc\xac\xef\xbc\xb0\xef\xbc\xa8\xef\xbc\xa1\xe3\x83\xbc\xef\xbc\xb4\xef\xbc\xb9\xef\xbc\xb0\xef\xbc\xa5\xef\xbc\x9d%d  LAST_TIME_TYPE=%d\n\x00"
                         as *const u8 as *const libc::c_char,
                     alphaType as libc::c_int,
                     gSaveContext.unk_13EE as libc::c_int);
        gSaveContext.unk_13E8 = alphaType;
        gSaveContext.unk_13EA = gSaveContext.unk_13E8;
        gSaveContext.unk_13EC = 1 as libc::c_int as u16_0
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80082644(mut globalCtx: *mut GlobalContext,
                                       mut alpha: s16) {
    let mut interfaceCtx: *mut InterfaceContext =
        &mut (*globalCtx).interfaceCtx;
    if gSaveContext.buttonStatus[0 as libc::c_int as usize] as libc::c_int ==
           BTN_DISABLED as libc::c_int {
        if (*interfaceCtx).bAlpha as libc::c_int != 70 as libc::c_int {
            (*interfaceCtx).bAlpha = 70 as libc::c_int as u16_0
        }
    } else if (*interfaceCtx).bAlpha as libc::c_int != 255 as libc::c_int {
        (*interfaceCtx).bAlpha = alpha as u16_0
    }
    if gSaveContext.buttonStatus[1 as libc::c_int as usize] as libc::c_int ==
           BTN_DISABLED as libc::c_int {
        if (*interfaceCtx).cLeftAlpha as libc::c_int != 70 as libc::c_int {
            (*interfaceCtx).cLeftAlpha = 70 as libc::c_int as u16_0
        }
    } else if (*interfaceCtx).cLeftAlpha as libc::c_int != 255 as libc::c_int
     {
        (*interfaceCtx).cLeftAlpha = alpha as u16_0
    }
    if gSaveContext.buttonStatus[2 as libc::c_int as usize] as libc::c_int ==
           BTN_DISABLED as libc::c_int {
        if (*interfaceCtx).cDownAlpha as libc::c_int != 70 as libc::c_int {
            (*interfaceCtx).cDownAlpha = 70 as libc::c_int as u16_0
        }
    } else if (*interfaceCtx).cDownAlpha as libc::c_int != 255 as libc::c_int
     {
        (*interfaceCtx).cDownAlpha = alpha as u16_0
    }
    if gSaveContext.buttonStatus[3 as libc::c_int as usize] as libc::c_int ==
           BTN_DISABLED as libc::c_int {
        if (*interfaceCtx).cRightAlpha as libc::c_int != 70 as libc::c_int {
            (*interfaceCtx).cRightAlpha = 70 as libc::c_int as u16_0
        }
    } else if (*interfaceCtx).cRightAlpha as libc::c_int != 255 as libc::c_int
     {
        (*interfaceCtx).cRightAlpha = alpha as u16_0
    }
    if gSaveContext.buttonStatus[4 as libc::c_int as usize] as libc::c_int ==
           BTN_DISABLED as libc::c_int {
        if (*interfaceCtx).aAlpha as libc::c_int != 70 as libc::c_int {
            (*interfaceCtx).aAlpha = 70 as libc::c_int as u16_0
        }
    } else if (*interfaceCtx).aAlpha as libc::c_int != 255 as libc::c_int {
        (*interfaceCtx).aAlpha = alpha as u16_0
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8008277C(mut globalCtx: *mut GlobalContext,
                                       mut maxAlpha: s16, mut alpha: s16) {
    let mut interfaceCtx: *mut InterfaceContext =
        &mut (*globalCtx).interfaceCtx;
    if gSaveContext.unk_13E7 as libc::c_int != 0 as libc::c_int {
        func_80082644(globalCtx, alpha);
        return
    }
    if (*interfaceCtx).bAlpha as libc::c_int != 0 as libc::c_int &&
           (*interfaceCtx).bAlpha as libc::c_int > maxAlpha as libc::c_int {
        (*interfaceCtx).bAlpha = maxAlpha as u16_0
    }
    if (*interfaceCtx).aAlpha as libc::c_int != 0 as libc::c_int &&
           (*interfaceCtx).aAlpha as libc::c_int > maxAlpha as libc::c_int {
        (*interfaceCtx).aAlpha = maxAlpha as u16_0
    }
    if (*interfaceCtx).cLeftAlpha as libc::c_int != 0 as libc::c_int &&
           (*interfaceCtx).cLeftAlpha as libc::c_int > maxAlpha as libc::c_int
       {
        (*interfaceCtx).cLeftAlpha = maxAlpha as u16_0
    }
    if (*interfaceCtx).cDownAlpha as libc::c_int != 0 as libc::c_int &&
           (*interfaceCtx).cDownAlpha as libc::c_int > maxAlpha as libc::c_int
       {
        (*interfaceCtx).cDownAlpha = maxAlpha as u16_0
    }
    if (*interfaceCtx).cRightAlpha as libc::c_int != 0 as libc::c_int &&
           (*interfaceCtx).cRightAlpha as libc::c_int >
               maxAlpha as libc::c_int {
        (*interfaceCtx).cRightAlpha = maxAlpha as u16_0
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80082850(mut globalCtx: *mut GlobalContext,
                                       mut maxAlpha: s16) {
    let mut interfaceCtx: *mut InterfaceContext =
        &mut (*globalCtx).interfaceCtx;
    let mut alpha: s16 =
        (255 as libc::c_int - maxAlpha as libc::c_int) as s16;
    match gSaveContext.unk_13E8 as libc::c_int {
        1 | 2 | 8 => {
            osSyncPrintf(b"a_alpha=%d, c_alpha=%d   \xe2\x86\x92   \x00" as
                             *const u8 as *const libc::c_char,
                         (*interfaceCtx).aAlpha as libc::c_int,
                         (*interfaceCtx).cLeftAlpha as libc::c_int);
            if gSaveContext.unk_13E8 as libc::c_int == 8 as libc::c_int {
                if (*interfaceCtx).bAlpha as libc::c_int != 255 as libc::c_int
                   {
                    (*interfaceCtx).bAlpha = alpha as u16_0
                }
            } else if (*interfaceCtx).bAlpha as libc::c_int !=
                          0 as libc::c_int &&
                          (*interfaceCtx).bAlpha as libc::c_int >
                              maxAlpha as libc::c_int {
                (*interfaceCtx).bAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).aAlpha as libc::c_int != 0 as libc::c_int &&
                   (*interfaceCtx).aAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).aAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).cLeftAlpha as libc::c_int != 0 as libc::c_int
                   &&
                   (*interfaceCtx).cLeftAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).cLeftAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).cDownAlpha as libc::c_int != 0 as libc::c_int
                   &&
                   (*interfaceCtx).cDownAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).cDownAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).cRightAlpha as libc::c_int != 0 as libc::c_int
                   &&
                   (*interfaceCtx).cRightAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).cRightAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).healthAlpha as libc::c_int != 0 as libc::c_int
                   &&
                   (*interfaceCtx).healthAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).healthAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).magicAlpha as libc::c_int != 0 as libc::c_int
                   &&
                   (*interfaceCtx).magicAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).magicAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).minimapAlpha as libc::c_int != 0 as libc::c_int
                   &&
                   (*interfaceCtx).minimapAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).minimapAlpha = maxAlpha as u16_0
            }
            osSyncPrintf(b"a_alpha=%d, c_alpha=%d\n\x00" as *const u8 as
                             *const libc::c_char,
                         (*interfaceCtx).aAlpha as libc::c_int,
                         (*interfaceCtx).cLeftAlpha as libc::c_int);
        }
        3 => {
            if (*interfaceCtx).aAlpha as libc::c_int != 0 as libc::c_int &&
                   (*interfaceCtx).aAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).aAlpha = maxAlpha as u16_0
            }
            func_8008277C(globalCtx, maxAlpha, alpha);
            if (*interfaceCtx).magicAlpha as libc::c_int != 0 as libc::c_int
                   &&
                   (*interfaceCtx).magicAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).magicAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).minimapAlpha as libc::c_int != 0 as libc::c_int
                   &&
                   (*interfaceCtx).minimapAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).minimapAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).healthAlpha as libc::c_int !=
                   255 as libc::c_int {
                (*interfaceCtx).healthAlpha = alpha as u16_0
            }
        }
        4 => {
            if (*interfaceCtx).bAlpha as libc::c_int != 0 as libc::c_int &&
                   (*interfaceCtx).bAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).bAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).aAlpha as libc::c_int != 0 as libc::c_int &&
                   (*interfaceCtx).aAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).aAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).cLeftAlpha as libc::c_int != 0 as libc::c_int
                   &&
                   (*interfaceCtx).cLeftAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).cLeftAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).cDownAlpha as libc::c_int != 0 as libc::c_int
                   &&
                   (*interfaceCtx).cDownAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).cDownAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).cRightAlpha as libc::c_int != 0 as libc::c_int
                   &&
                   (*interfaceCtx).cRightAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).cRightAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).healthAlpha as libc::c_int != 0 as libc::c_int
                   &&
                   (*interfaceCtx).healthAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).healthAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).magicAlpha as libc::c_int != 0 as libc::c_int
                   &&
                   (*interfaceCtx).magicAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).magicAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).minimapAlpha as libc::c_int != 0 as libc::c_int
                   &&
                   (*interfaceCtx).minimapAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).minimapAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).aAlpha as libc::c_int != 255 as libc::c_int {
                (*interfaceCtx).aAlpha = alpha as u16_0
            }
        }
        5 => {
            func_8008277C(globalCtx, maxAlpha, alpha);
            if (*interfaceCtx).minimapAlpha as libc::c_int != 0 as libc::c_int
                   &&
                   (*interfaceCtx).minimapAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).minimapAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).aAlpha as libc::c_int != 255 as libc::c_int {
                (*interfaceCtx).aAlpha = alpha as u16_0
            }
            if (*interfaceCtx).healthAlpha as libc::c_int !=
                   255 as libc::c_int {
                (*interfaceCtx).healthAlpha = alpha as u16_0
            }
            if (*interfaceCtx).magicAlpha as libc::c_int != 255 as libc::c_int
               {
                (*interfaceCtx).magicAlpha = alpha as u16_0
            }
        }
        6 => {
            func_8008277C(globalCtx, maxAlpha, alpha);
            if (*interfaceCtx).aAlpha as libc::c_int != 255 as libc::c_int {
                (*interfaceCtx).aAlpha = alpha as u16_0
            }
            if (*interfaceCtx).healthAlpha as libc::c_int !=
                   255 as libc::c_int {
                (*interfaceCtx).healthAlpha = alpha as u16_0
            }
            if (*interfaceCtx).magicAlpha as libc::c_int != 255 as libc::c_int
               {
                (*interfaceCtx).magicAlpha = alpha as u16_0
            }
            match (*globalCtx).sceneNum as libc::c_int {
                81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93
                | 94 | 95 | 96 | 97 | 98 | 99 | 100 => {
                    if ((*interfaceCtx).minimapAlpha as libc::c_int) <
                           170 as libc::c_int {
                        (*interfaceCtx).minimapAlpha = alpha as u16_0
                    } else {
                        (*interfaceCtx).minimapAlpha =
                            170 as libc::c_int as u16_0
                    }
                }
                _ => {
                    if (*interfaceCtx).minimapAlpha as libc::c_int !=
                           255 as libc::c_int {
                        (*interfaceCtx).minimapAlpha = alpha as u16_0
                    }
                }
            }
        }
        7 => {
            if (*interfaceCtx).minimapAlpha as libc::c_int != 0 as libc::c_int
                   &&
                   (*interfaceCtx).minimapAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).minimapAlpha = maxAlpha as u16_0
            }
            func_80082644(globalCtx, alpha);
            if (*interfaceCtx).healthAlpha as libc::c_int !=
                   255 as libc::c_int {
                (*interfaceCtx).healthAlpha = alpha as u16_0
            }
            if (*interfaceCtx).magicAlpha as libc::c_int != 255 as libc::c_int
               {
                (*interfaceCtx).magicAlpha = alpha as u16_0
            }
        }
        9 => {
            if (*interfaceCtx).bAlpha as libc::c_int != 0 as libc::c_int &&
                   (*interfaceCtx).bAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).bAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).aAlpha as libc::c_int != 0 as libc::c_int &&
                   (*interfaceCtx).aAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).aAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).cLeftAlpha as libc::c_int != 0 as libc::c_int
                   &&
                   (*interfaceCtx).cLeftAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).cLeftAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).cDownAlpha as libc::c_int != 0 as libc::c_int
                   &&
                   (*interfaceCtx).cDownAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).cDownAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).cRightAlpha as libc::c_int != 0 as libc::c_int
                   &&
                   (*interfaceCtx).cRightAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).cRightAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).minimapAlpha as libc::c_int != 0 as libc::c_int
                   &&
                   (*interfaceCtx).minimapAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).minimapAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).healthAlpha as libc::c_int !=
                   255 as libc::c_int {
                (*interfaceCtx).healthAlpha = alpha as u16_0
            }
            if (*interfaceCtx).magicAlpha as libc::c_int != 255 as libc::c_int
               {
                (*interfaceCtx).magicAlpha = alpha as u16_0
            }
        }
        10 => {
            if (*interfaceCtx).aAlpha as libc::c_int != 0 as libc::c_int &&
                   (*interfaceCtx).aAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).aAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).cLeftAlpha as libc::c_int != 0 as libc::c_int
                   &&
                   (*interfaceCtx).cLeftAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).cLeftAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).cDownAlpha as libc::c_int != 0 as libc::c_int
                   &&
                   (*interfaceCtx).cDownAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).cDownAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).cRightAlpha as libc::c_int != 0 as libc::c_int
                   &&
                   (*interfaceCtx).cRightAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).cRightAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).healthAlpha as libc::c_int != 0 as libc::c_int
                   &&
                   (*interfaceCtx).healthAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).healthAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).magicAlpha as libc::c_int != 0 as libc::c_int
                   &&
                   (*interfaceCtx).magicAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).magicAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).minimapAlpha as libc::c_int != 0 as libc::c_int
                   &&
                   (*interfaceCtx).minimapAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).minimapAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).bAlpha as libc::c_int != 255 as libc::c_int {
                (*interfaceCtx).bAlpha = alpha as u16_0
            }
        }
        11 => {
            if (*interfaceCtx).bAlpha as libc::c_int != 0 as libc::c_int &&
                   (*interfaceCtx).bAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).bAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).aAlpha as libc::c_int != 0 as libc::c_int &&
                   (*interfaceCtx).aAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).aAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).cLeftAlpha as libc::c_int != 0 as libc::c_int
                   &&
                   (*interfaceCtx).cLeftAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).cLeftAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).cDownAlpha as libc::c_int != 0 as libc::c_int
                   &&
                   (*interfaceCtx).cDownAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).cDownAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).cRightAlpha as libc::c_int != 0 as libc::c_int
                   &&
                   (*interfaceCtx).cRightAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).cRightAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).minimapAlpha as libc::c_int != 0 as libc::c_int
                   &&
                   (*interfaceCtx).minimapAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).minimapAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).magicAlpha as libc::c_int != 0 as libc::c_int
                   &&
                   (*interfaceCtx).magicAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).magicAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).healthAlpha as libc::c_int !=
                   255 as libc::c_int {
                (*interfaceCtx).healthAlpha = alpha as u16_0
            }
        }
        12 => {
            if (*interfaceCtx).aAlpha as libc::c_int != 255 as libc::c_int {
                (*interfaceCtx).aAlpha = alpha as u16_0
            }
            if (*interfaceCtx).bAlpha as libc::c_int != 255 as libc::c_int {
                (*interfaceCtx).bAlpha = alpha as u16_0
            }
            if (*interfaceCtx).minimapAlpha as libc::c_int !=
                   255 as libc::c_int {
                (*interfaceCtx).minimapAlpha = alpha as u16_0
            }
            if (*interfaceCtx).cLeftAlpha as libc::c_int != 0 as libc::c_int
                   &&
                   (*interfaceCtx).cLeftAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).cLeftAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).cDownAlpha as libc::c_int != 0 as libc::c_int
                   &&
                   (*interfaceCtx).cDownAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).cDownAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).cRightAlpha as libc::c_int != 0 as libc::c_int
                   &&
                   (*interfaceCtx).cRightAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).cRightAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).magicAlpha as libc::c_int != 0 as libc::c_int
                   &&
                   (*interfaceCtx).magicAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).magicAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).healthAlpha as libc::c_int != 0 as libc::c_int
                   &&
                   (*interfaceCtx).healthAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).healthAlpha = maxAlpha as u16_0
            }
        }
        13 => {
            func_8008277C(globalCtx, maxAlpha, alpha);
            if (*interfaceCtx).minimapAlpha as libc::c_int != 0 as libc::c_int
                   &&
                   (*interfaceCtx).minimapAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).minimapAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).aAlpha as libc::c_int != 0 as libc::c_int &&
                   (*interfaceCtx).aAlpha as libc::c_int >
                       maxAlpha as libc::c_int {
                (*interfaceCtx).aAlpha = maxAlpha as u16_0
            }
            if (*interfaceCtx).healthAlpha as libc::c_int !=
                   255 as libc::c_int {
                (*interfaceCtx).healthAlpha = alpha as u16_0
            }
            if (*interfaceCtx).magicAlpha as libc::c_int != 255 as libc::c_int
               {
                (*interfaceCtx).magicAlpha = alpha as u16_0
            }
        }
        _ => { }
    }
    if (*globalCtx).roomCtx.curRoom.unk_03 as libc::c_int == 1 as libc::c_int
           &&
           (*interfaceCtx).minimapAlpha as libc::c_int >= 0xff as libc::c_int
       {
        (*interfaceCtx).minimapAlpha = 255 as libc::c_int as u16_0
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80083108(mut globalCtx: *mut GlobalContext) {
    let mut msgCtx: *mut MessageContext = &mut (*globalCtx).msgCtx;
    let mut player: *mut Player =
        (*globalCtx).actorCtx.actorLists[ACTORCAT_PLAYER as libc::c_int as
                                             usize].head as *mut Player;
    let mut interfaceCtx: *mut InterfaceContext =
        &mut (*globalCtx).interfaceCtx;
    let mut i: s16 = 0;
    let mut sp28: s16 = 0 as libc::c_int as s16;
    if gSaveContext.cutsceneIndex < 0xfff0 as libc::c_int ||
           (*globalCtx).sceneNum as libc::c_int == SCENE_SPOT20 as libc::c_int
               && gSaveContext.cutsceneIndex == 0xfff0 as libc::c_int {
        gSaveContext.unk_13E7 = 0 as libc::c_int as u8_0;
        if (*player).stateFlags1 & 0x800000 as libc::c_int as libc::c_uint !=
               0 ||
               (*globalCtx).shootingGalleryStatus as libc::c_int >
                   1 as libc::c_int ||
               (*globalCtx).sceneNum as libc::c_int ==
                   SCENE_BOWLING as libc::c_int &&
                   Flags_GetSwitch(globalCtx, 0x38 as libc::c_int) != 0 {
            if gSaveContext.equips.buttonItems[0 as libc::c_int as usize] as
                   libc::c_int != ITEM_NONE as libc::c_int {
                gSaveContext.unk_13E7 = 1 as libc::c_int as u8_0;
                if gSaveContext.buttonStatus[0 as libc::c_int as usize] as
                       libc::c_int == BTN_DISABLED as libc::c_int {
                    gSaveContext.buttonStatus[3 as libc::c_int as usize] =
                        BTN_ENABLED as libc::c_int as u8_0;
                    gSaveContext.buttonStatus[2 as libc::c_int as usize] =
                        gSaveContext.buttonStatus[3 as libc::c_int as usize];
                    gSaveContext.buttonStatus[1 as libc::c_int as usize] =
                        gSaveContext.buttonStatus[2 as libc::c_int as usize];
                    gSaveContext.buttonStatus[0 as libc::c_int as usize] =
                        gSaveContext.buttonStatus[1 as libc::c_int as usize]
                }
                if gSaveContext.equips.buttonItems[0 as libc::c_int as usize]
                       as libc::c_int != ITEM_SLINGSHOT as libc::c_int &&
                       gSaveContext.equips.buttonItems[0 as libc::c_int as
                                                           usize] as
                           libc::c_int != ITEM_BOW as libc::c_int &&
                       gSaveContext.equips.buttonItems[0 as libc::c_int as
                                                           usize] as
                           libc::c_int != ITEM_BOMBCHU as libc::c_int &&
                       gSaveContext.equips.buttonItems[0 as libc::c_int as
                                                           usize] as
                           libc::c_int != ITEM_NONE as libc::c_int {
                    gSaveContext.buttonStatus[0 as libc::c_int as usize] =
                        gSaveContext.equips.buttonItems[0 as libc::c_int as
                                                            usize];
                    if (*globalCtx).sceneNum as libc::c_int ==
                           SCENE_BOWLING as libc::c_int &&
                           Flags_GetSwitch(globalCtx, 0x38 as libc::c_int) !=
                               0 {
                        gSaveContext.equips.buttonItems[0 as libc::c_int as
                                                            usize] =
                            ITEM_BOMBCHU as libc::c_int as u8_0;
                        Interface_LoadItemIcon1(globalCtx,
                                                0 as libc::c_int as u16_0);
                    } else {
                        gSaveContext.equips.buttonItems[0 as libc::c_int as
                                                            usize] =
                            ITEM_BOW as libc::c_int as u8_0;
                        if (*globalCtx).shootingGalleryStatus as libc::c_int >
                               1 as libc::c_int {
                            if (if !(gSaveContext.linkAge == 0 as libc::c_int)
                                   {
                                    5 as libc::c_int
                                } else { 17 as libc::c_int }) ==
                                   5 as libc::c_int {
                                gSaveContext.equips.buttonItems[0 as
                                                                    libc::c_int
                                                                    as usize]
                                    = ITEM_SLINGSHOT as libc::c_int as u8_0
                            }
                            Interface_LoadItemIcon1(globalCtx,
                                                    0 as libc::c_int as
                                                        u16_0);
                        } else if gSaveContext.inventory.items[SLOT_BOW as
                                                                   libc::c_int
                                                                   as usize]
                                      as libc::c_int ==
                                      ITEM_NONE as libc::c_int {
                            gSaveContext.equips.buttonItems[0 as libc::c_int
                                                                as usize] =
                                ITEM_NONE as libc::c_int as u8_0
                        } else {
                            Interface_LoadItemIcon1(globalCtx,
                                                    0 as libc::c_int as
                                                        u16_0);
                        }
                    }
                    gSaveContext.buttonStatus[3 as libc::c_int as usize] =
                        BTN_DISABLED as libc::c_int as u8_0;
                    gSaveContext.buttonStatus[2 as libc::c_int as usize] =
                        gSaveContext.buttonStatus[3 as libc::c_int as usize];
                    gSaveContext.buttonStatus[1 as libc::c_int as usize] =
                        gSaveContext.buttonStatus[2 as libc::c_int as usize];
                    Interface_ChangeAlpha(6 as libc::c_int as u16_0);
                }
                if (*globalCtx).transitionMode as libc::c_int !=
                       0 as libc::c_int {
                    Interface_ChangeAlpha(1 as libc::c_int as u16_0);
                } else if gSaveContext.minigameState as libc::c_int ==
                              1 as libc::c_int {
                    Interface_ChangeAlpha(8 as libc::c_int as u16_0);
                } else if (*globalCtx).shootingGalleryStatus as libc::c_int >
                              1 as libc::c_int {
                    Interface_ChangeAlpha(8 as libc::c_int as u16_0);
                } else if (*globalCtx).sceneNum as libc::c_int ==
                              SCENE_BOWLING as libc::c_int &&
                              Flags_GetSwitch(globalCtx, 0x38 as libc::c_int)
                                  != 0 {
                    Interface_ChangeAlpha(8 as libc::c_int as u16_0);
                } else if (*player).stateFlags1 &
                              0x800000 as libc::c_int as libc::c_uint != 0 {
                    Interface_ChangeAlpha(12 as libc::c_int as u16_0);
                }
            } else if (*player).stateFlags1 &
                          0x800000 as libc::c_int as libc::c_uint != 0 {
                Interface_ChangeAlpha(12 as libc::c_int as u16_0);
            }
        } else if (*globalCtx).sceneNum as libc::c_int ==
                      SCENE_KENJYANOMA as libc::c_int {
            Interface_ChangeAlpha(1 as libc::c_int as u16_0);
        } else if (*globalCtx).sceneNum as libc::c_int ==
                      SCENE_TURIBORI as libc::c_int {
            gSaveContext.unk_13E7 = 2 as libc::c_int as u8_0;
            if (*globalCtx).interfaceCtx.unk_260 as libc::c_int !=
                   0 as libc::c_int {
                if gSaveContext.equips.buttonItems[0 as libc::c_int as usize]
                       as libc::c_int != ITEM_FISHING_POLE as libc::c_int {
                    gSaveContext.buttonStatus[0 as libc::c_int as usize] =
                        gSaveContext.equips.buttonItems[0 as libc::c_int as
                                                            usize];
                    gSaveContext.equips.buttonItems[0 as libc::c_int as usize]
                        = ITEM_FISHING_POLE as libc::c_int as u8_0;
                    gSaveContext.unk_13EA = 0 as libc::c_int as u16_0;
                    Interface_LoadItemIcon1(globalCtx,
                                            0 as libc::c_int as u16_0);
                    Interface_ChangeAlpha(12 as libc::c_int as u16_0);
                }
                if gSaveContext.unk_13EA as libc::c_int != 12 as libc::c_int {
                    Interface_ChangeAlpha(12 as libc::c_int as u16_0);
                }
            } else if gSaveContext.equips.buttonItems[0 as libc::c_int as
                                                          usize] as
                          libc::c_int == ITEM_FISHING_POLE as libc::c_int {
                gSaveContext.equips.buttonItems[0 as libc::c_int as usize] =
                    gSaveContext.buttonStatus[0 as libc::c_int as usize];
                gSaveContext.unk_13EA = 0 as libc::c_int as u16_0;
                if gSaveContext.equips.buttonItems[0 as libc::c_int as usize]
                       as libc::c_int != ITEM_NONE as libc::c_int {
                    Interface_LoadItemIcon1(globalCtx,
                                            0 as libc::c_int as u16_0);
                }
                gSaveContext.buttonStatus[3 as libc::c_int as usize] =
                    BTN_DISABLED as libc::c_int as u8_0;
                gSaveContext.buttonStatus[2 as libc::c_int as usize] =
                    gSaveContext.buttonStatus[3 as libc::c_int as usize];
                gSaveContext.buttonStatus[1 as libc::c_int as usize] =
                    gSaveContext.buttonStatus[2 as libc::c_int as usize];
                gSaveContext.buttonStatus[0 as libc::c_int as usize] =
                    gSaveContext.buttonStatus[1 as libc::c_int as usize];
                Interface_ChangeAlpha(50 as libc::c_int as u16_0);
            } else {
                if gSaveContext.buttonStatus[0 as libc::c_int as usize] as
                       libc::c_int == BTN_ENABLED as libc::c_int {
                    gSaveContext.unk_13EA = 0 as libc::c_int as u16_0
                }
                gSaveContext.buttonStatus[3 as libc::c_int as usize] =
                    BTN_DISABLED as libc::c_int as u8_0;
                gSaveContext.buttonStatus[2 as libc::c_int as usize] =
                    gSaveContext.buttonStatus[3 as libc::c_int as usize];
                gSaveContext.buttonStatus[1 as libc::c_int as usize] =
                    gSaveContext.buttonStatus[2 as libc::c_int as usize];
                gSaveContext.buttonStatus[0 as libc::c_int as usize] =
                    gSaveContext.buttonStatus[1 as libc::c_int as usize];
                Interface_ChangeAlpha(50 as libc::c_int as u16_0);
            }
        } else if (*msgCtx).msgMode as libc::c_int ==
                      MSGMODE_NONE as libc::c_int {
            if func_8008F2F8(globalCtx) >= 2 as libc::c_int &&
                   func_8008F2F8(globalCtx) < 5 as libc::c_int {
                if gSaveContext.buttonStatus[0 as libc::c_int as usize] as
                       libc::c_int != BTN_DISABLED as libc::c_int {
                    sp28 = 1 as libc::c_int as s16
                }
                gSaveContext.buttonStatus[0 as libc::c_int as usize] =
                    BTN_DISABLED as libc::c_int as u8_0;
                i = 1 as libc::c_int as s16;
                while (i as libc::c_int) < 4 as libc::c_int {
                    if func_8008F2F8(globalCtx) == 2 as libc::c_int {
                        if gSaveContext.equips.buttonItems[i as usize] as
                               libc::c_int != ITEM_HOOKSHOT as libc::c_int &&
                               gSaveContext.equips.buttonItems[i as usize] as
                                   libc::c_int != ITEM_LONGSHOT as libc::c_int
                           {
                            if gSaveContext.buttonStatus[i as usize] as
                                   libc::c_int == BTN_ENABLED as libc::c_int {
                                sp28 = 1 as libc::c_int as s16
                            }
                            gSaveContext.buttonStatus[i as usize] =
                                BTN_DISABLED as libc::c_int as u8_0
                        } else {
                            if gSaveContext.buttonStatus[i as usize] as
                                   libc::c_int == BTN_DISABLED as libc::c_int
                               {
                                sp28 = 1 as libc::c_int as s16
                            }
                            gSaveContext.buttonStatus[i as usize] =
                                BTN_ENABLED as libc::c_int as u8_0
                        }
                    } else {
                        if gSaveContext.buttonStatus[i as usize] as
                               libc::c_int == BTN_ENABLED as libc::c_int {
                            sp28 = 1 as libc::c_int as s16
                        }
                        gSaveContext.buttonStatus[i as usize] =
                            BTN_DISABLED as libc::c_int as u8_0
                    }
                    i += 1
                }
                if sp28 != 0 {
                    gSaveContext.unk_13EA = 0 as libc::c_int as u16_0
                }
                Interface_ChangeAlpha(50 as libc::c_int as u16_0);
            } else if (*player).stateFlags1 &
                          0x200000 as libc::c_int as libc::c_uint != 0 ||
                          (*player).stateFlags2 &
                              0x40000 as libc::c_int as libc::c_uint != 0 {
                if gSaveContext.buttonStatus[0 as libc::c_int as usize] as
                       libc::c_int != BTN_DISABLED as libc::c_int {
                    gSaveContext.buttonStatus[0 as libc::c_int as usize] =
                        BTN_DISABLED as libc::c_int as u8_0;
                    gSaveContext.buttonStatus[1 as libc::c_int as usize] =
                        BTN_DISABLED as libc::c_int as u8_0;
                    gSaveContext.buttonStatus[2 as libc::c_int as usize] =
                        BTN_DISABLED as libc::c_int as u8_0;
                    gSaveContext.buttonStatus[3 as libc::c_int as usize] =
                        BTN_DISABLED as libc::c_int as u8_0;
                    gSaveContext.unk_13EA = 0 as libc::c_int as u16_0;
                    Interface_ChangeAlpha(50 as libc::c_int as u16_0);
                }
            } else if gSaveContext.eventInf[0 as libc::c_int as usize] as
                          libc::c_int & 0xf as libc::c_int == 1 as libc::c_int
             {
                if (*player).stateFlags1 &
                       0x800000 as libc::c_int as libc::c_uint != 0 {
                    if gSaveContext.equips.buttonItems[0 as libc::c_int as
                                                           usize] as
                           libc::c_int != ITEM_NONE as libc::c_int &&
                           gSaveContext.equips.buttonItems[0 as libc::c_int as
                                                               usize] as
                               libc::c_int != ITEM_BOW as libc::c_int {
                        if gSaveContext.inventory.items[SLOT_BOW as
                                                            libc::c_int as
                                                            usize] as
                               libc::c_int == ITEM_NONE as libc::c_int {
                            gSaveContext.equips.buttonItems[0 as libc::c_int
                                                                as usize] =
                                ITEM_NONE as libc::c_int as u8_0
                        } else {
                            gSaveContext.equips.buttonItems[0 as libc::c_int
                                                                as usize] =
                                ITEM_BOW as libc::c_int as u8_0;
                            sp28 = 1 as libc::c_int as s16
                        }
                    }
                } else {
                    sp28 = 1 as libc::c_int as s16;
                    if gSaveContext.equips.buttonItems[0 as libc::c_int as
                                                           usize] as
                           libc::c_int == ITEM_NONE as libc::c_int ||
                           gSaveContext.equips.buttonItems[0 as libc::c_int as
                                                               usize] as
                               libc::c_int == ITEM_BOW as libc::c_int {
                        if gSaveContext.equips.buttonItems[0 as libc::c_int as
                                                               usize] as
                               libc::c_int != ITEM_SWORD_KOKIRI as libc::c_int
                               &&
                               gSaveContext.equips.buttonItems[0 as
                                                                   libc::c_int
                                                                   as usize]
                                   as libc::c_int !=
                                   ITEM_SWORD_MASTER as libc::c_int &&
                               gSaveContext.equips.buttonItems[0 as
                                                                   libc::c_int
                                                                   as usize]
                                   as libc::c_int !=
                                   ITEM_SWORD_BGS as libc::c_int &&
                               gSaveContext.equips.buttonItems[0 as
                                                                   libc::c_int
                                                                   as usize]
                                   as libc::c_int !=
                                   ITEM_SWORD_KNIFE as libc::c_int {
                            gSaveContext.equips.buttonItems[0 as libc::c_int
                                                                as usize] =
                                gSaveContext.buttonStatus[0 as libc::c_int as
                                                              usize]
                        } else {
                            gSaveContext.buttonStatus[0 as libc::c_int as
                                                          usize] =
                                gSaveContext.equips.buttonItems[0 as
                                                                    libc::c_int
                                                                    as usize]
                        }
                    }
                    // Necessary to match
                }
                if sp28 != 0 {
                    Interface_LoadItemIcon1(globalCtx,
                                            0 as libc::c_int as u16_0);
                    sp28 = 0 as libc::c_int as s16
                }
                i = 1 as libc::c_int as s16;
                while (i as libc::c_int) < 4 as libc::c_int {
                    if gSaveContext.equips.buttonItems[i as usize] as
                           libc::c_int != ITEM_OCARINA_FAIRY as libc::c_int &&
                           gSaveContext.equips.buttonItems[i as usize] as
                               libc::c_int != ITEM_OCARINA_TIME as libc::c_int
                       {
                        if gSaveContext.buttonStatus[i as usize] as
                               libc::c_int == BTN_ENABLED as libc::c_int {
                            sp28 = 1 as libc::c_int as s16
                        }
                        gSaveContext.buttonStatus[i as usize] =
                            BTN_DISABLED as libc::c_int as u8_0
                    } else {
                        if gSaveContext.buttonStatus[i as usize] as
                               libc::c_int == BTN_DISABLED as libc::c_int {
                            sp28 = 1 as libc::c_int as s16
                        }
                        gSaveContext.buttonStatus[i as usize] =
                            BTN_ENABLED as libc::c_int as u8_0
                    }
                    i += 1
                }
                if sp28 != 0 {
                    gSaveContext.unk_13EA = 0 as libc::c_int as u16_0
                }
                Interface_ChangeAlpha(50 as libc::c_int as u16_0);
            } else {
                if (*interfaceCtx).restrictions.bButton as libc::c_int ==
                       0 as libc::c_int {
                    if gSaveContext.equips.buttonItems[0 as libc::c_int as
                                                           usize] as
                           libc::c_int == ITEM_SLINGSHOT as libc::c_int ||
                           gSaveContext.equips.buttonItems[0 as libc::c_int as
                                                               usize] as
                               libc::c_int == ITEM_BOW as libc::c_int ||
                           gSaveContext.equips.buttonItems[0 as libc::c_int as
                                                               usize] as
                               libc::c_int == ITEM_BOMBCHU as libc::c_int ||
                           gSaveContext.equips.buttonItems[0 as libc::c_int as
                                                               usize] as
                               libc::c_int == ITEM_NONE as libc::c_int {
                        if gSaveContext.equips.buttonItems[0 as libc::c_int as
                                                               usize] as
                               libc::c_int != ITEM_NONE as libc::c_int ||
                               gSaveContext.infTable[29 as libc::c_int as
                                                         usize] as libc::c_int
                                   == 0 as libc::c_int {
                            gSaveContext.equips.buttonItems[0 as libc::c_int
                                                                as usize] =
                                gSaveContext.buttonStatus[0 as libc::c_int as
                                                              usize];
                            sp28 = 1 as libc::c_int as s16;
                            if gSaveContext.equips.buttonItems[0 as
                                                                   libc::c_int
                                                                   as usize]
                                   as libc::c_int != ITEM_NONE as libc::c_int
                               {
                                Interface_LoadItemIcon1(globalCtx,
                                                        0 as libc::c_int as
                                                            u16_0);
                            }
                        }
                    } else if gSaveContext.buttonStatus[0 as libc::c_int as
                                                            usize] as
                                  libc::c_int & 0xff as libc::c_int ==
                                  BTN_DISABLED as libc::c_int {
                        sp28 = 1 as libc::c_int as s16;
                        if gSaveContext.buttonStatus[0 as libc::c_int as
                                                         usize] as libc::c_int
                               & 0xff as libc::c_int ==
                               BTN_DISABLED as libc::c_int ||
                               gSaveContext.buttonStatus[0 as libc::c_int as
                                                             usize] as
                                   libc::c_int & 0xff as libc::c_int ==
                                   BTN_ENABLED as libc::c_int {
                            gSaveContext.buttonStatus[0 as libc::c_int as
                                                          usize] =
                                BTN_ENABLED as libc::c_int as u8_0
                        } else {
                            gSaveContext.equips.buttonItems[0 as libc::c_int
                                                                as usize] =
                                (gSaveContext.buttonStatus[0 as libc::c_int as
                                                               usize] as
                                     libc::c_int & 0xff as libc::c_int) as
                                    u8_0
                        }
                    }
                } else if (*interfaceCtx).restrictions.bButton as libc::c_int
                              == 1 as libc::c_int {
                    if gSaveContext.equips.buttonItems[0 as libc::c_int as
                                                           usize] as
                           libc::c_int == ITEM_SLINGSHOT as libc::c_int ||
                           gSaveContext.equips.buttonItems[0 as libc::c_int as
                                                               usize] as
                               libc::c_int == ITEM_BOW as libc::c_int ||
                           gSaveContext.equips.buttonItems[0 as libc::c_int as
                                                               usize] as
                               libc::c_int == ITEM_BOMBCHU as libc::c_int ||
                           gSaveContext.equips.buttonItems[0 as libc::c_int as
                                                               usize] as
                               libc::c_int == ITEM_NONE as libc::c_int {
                        if gSaveContext.equips.buttonItems[0 as libc::c_int as
                                                               usize] as
                               libc::c_int != ITEM_NONE as libc::c_int ||
                               gSaveContext.infTable[29 as libc::c_int as
                                                         usize] as libc::c_int
                                   == 0 as libc::c_int {
                            gSaveContext.equips.buttonItems[0 as libc::c_int
                                                                as usize] =
                                gSaveContext.buttonStatus[0 as libc::c_int as
                                                              usize];
                            sp28 = 1 as libc::c_int as s16;
                            if gSaveContext.equips.buttonItems[0 as
                                                                   libc::c_int
                                                                   as usize]
                                   as libc::c_int != ITEM_NONE as libc::c_int
                               {
                                Interface_LoadItemIcon1(globalCtx,
                                                        0 as libc::c_int as
                                                            u16_0);
                            }
                        }
                    } else {
                        if gSaveContext.buttonStatus[0 as libc::c_int as
                                                         usize] as libc::c_int
                               == BTN_ENABLED as libc::c_int {
                            sp28 = 1 as libc::c_int as s16
                        }
                        gSaveContext.buttonStatus[0 as libc::c_int as usize] =
                            BTN_DISABLED as libc::c_int as u8_0
                    }
                }
                if (*interfaceCtx).restrictions.bottles as libc::c_int !=
                       0 as libc::c_int {
                    i = 1 as libc::c_int as s16;
                    while (i as libc::c_int) < 4 as libc::c_int {
                        if gSaveContext.equips.buttonItems[i as usize] as
                               libc::c_int >= ITEM_BOTTLE as libc::c_int &&
                               gSaveContext.equips.buttonItems[i as usize] as
                                   libc::c_int <= ITEM_POE as libc::c_int {
                            if gSaveContext.buttonStatus[i as usize] as
                                   libc::c_int == BTN_ENABLED as libc::c_int {
                                sp28 = 1 as libc::c_int as s16
                            }
                            gSaveContext.buttonStatus[i as usize] =
                                BTN_DISABLED as libc::c_int as u8_0
                        }
                        i += 1
                    }
                } else if (*interfaceCtx).restrictions.bottles as libc::c_int
                              == 0 as libc::c_int {
                    i = 1 as libc::c_int as s16;
                    while (i as libc::c_int) < 4 as libc::c_int {
                        if gSaveContext.equips.buttonItems[i as usize] as
                               libc::c_int >= ITEM_BOTTLE as libc::c_int &&
                               gSaveContext.equips.buttonItems[i as usize] as
                                   libc::c_int <= ITEM_POE as libc::c_int {
                            if gSaveContext.buttonStatus[i as usize] as
                                   libc::c_int == BTN_DISABLED as libc::c_int
                               {
                                sp28 = 1 as libc::c_int as s16
                            }
                            gSaveContext.buttonStatus[i as usize] =
                                BTN_ENABLED as libc::c_int as u8_0
                        }
                        i += 1
                    }
                }
                if (*interfaceCtx).restrictions.tradeItems as libc::c_int !=
                       0 as libc::c_int {
                    i = 1 as libc::c_int as s16;
                    while (i as libc::c_int) < 4 as libc::c_int {
                        if gSaveContext.equips.buttonItems[i as usize] as
                               libc::c_int >= ITEM_WEIRD_EGG as libc::c_int &&
                               gSaveContext.equips.buttonItems[i as usize] as
                                   libc::c_int <=
                                   ITEM_CLAIM_CHECK as libc::c_int {
                            if gSaveContext.buttonStatus[i as usize] as
                                   libc::c_int == BTN_ENABLED as libc::c_int {
                                sp28 = 1 as libc::c_int as s16
                            }
                            gSaveContext.buttonStatus[i as usize] =
                                BTN_DISABLED as libc::c_int as u8_0
                        }
                        i += 1
                    }
                } else if (*interfaceCtx).restrictions.tradeItems as
                              libc::c_int == 0 as libc::c_int {
                    i = 1 as libc::c_int as s16;
                    while (i as libc::c_int) < 4 as libc::c_int {
                        if gSaveContext.equips.buttonItems[i as usize] as
                               libc::c_int >= ITEM_WEIRD_EGG as libc::c_int &&
                               gSaveContext.equips.buttonItems[i as usize] as
                                   libc::c_int <=
                                   ITEM_CLAIM_CHECK as libc::c_int {
                            if gSaveContext.buttonStatus[i as usize] as
                                   libc::c_int == BTN_DISABLED as libc::c_int
                               {
                                sp28 = 1 as libc::c_int as s16
                            }
                            gSaveContext.buttonStatus[i as usize] =
                                BTN_ENABLED as libc::c_int as u8_0
                        }
                        i += 1
                    }
                }
                if (*interfaceCtx).restrictions.hookshot as libc::c_int !=
                       0 as libc::c_int {
                    i = 1 as libc::c_int as s16;
                    while (i as libc::c_int) < 4 as libc::c_int {
                        if gSaveContext.equips.buttonItems[i as usize] as
                               libc::c_int == ITEM_HOOKSHOT as libc::c_int ||
                               gSaveContext.equips.buttonItems[i as usize] as
                                   libc::c_int == ITEM_LONGSHOT as libc::c_int
                           {
                            if gSaveContext.buttonStatus[i as usize] as
                                   libc::c_int == BTN_ENABLED as libc::c_int {
                                sp28 = 1 as libc::c_int as s16
                            }
                            gSaveContext.buttonStatus[i as usize] =
                                BTN_DISABLED as libc::c_int as u8_0
                        }
                        i += 1
                    }
                } else if (*interfaceCtx).restrictions.hookshot as libc::c_int
                              == 0 as libc::c_int {
                    i = 1 as libc::c_int as s16;
                    while (i as libc::c_int) < 4 as libc::c_int {
                        if gSaveContext.equips.buttonItems[i as usize] as
                               libc::c_int == ITEM_HOOKSHOT as libc::c_int ||
                               gSaveContext.equips.buttonItems[i as usize] as
                                   libc::c_int == ITEM_LONGSHOT as libc::c_int
                           {
                            if gSaveContext.buttonStatus[i as usize] as
                                   libc::c_int == BTN_DISABLED as libc::c_int
                               {
                                sp28 = 1 as libc::c_int as s16
                            }
                            gSaveContext.buttonStatus[i as usize] =
                                BTN_ENABLED as libc::c_int as u8_0
                        }
                        i += 1
                    }
                }
                if (*interfaceCtx).restrictions.ocarina as libc::c_int !=
                       0 as libc::c_int {
                    i = 1 as libc::c_int as s16;
                    while (i as libc::c_int) < 4 as libc::c_int {
                        if gSaveContext.equips.buttonItems[i as usize] as
                               libc::c_int ==
                               ITEM_OCARINA_FAIRY as libc::c_int ||
                               gSaveContext.equips.buttonItems[i as usize] as
                                   libc::c_int ==
                                   ITEM_OCARINA_TIME as libc::c_int {
                            if gSaveContext.buttonStatus[i as usize] as
                                   libc::c_int == BTN_ENABLED as libc::c_int {
                                sp28 = 1 as libc::c_int as s16
                            }
                            gSaveContext.buttonStatus[i as usize] =
                                BTN_DISABLED as libc::c_int as u8_0
                        }
                        i += 1
                    }
                } else if (*interfaceCtx).restrictions.ocarina as libc::c_int
                              == 0 as libc::c_int {
                    i = 1 as libc::c_int as s16;
                    while (i as libc::c_int) < 4 as libc::c_int {
                        if gSaveContext.equips.buttonItems[i as usize] as
                               libc::c_int ==
                               ITEM_OCARINA_FAIRY as libc::c_int ||
                               gSaveContext.equips.buttonItems[i as usize] as
                                   libc::c_int ==
                                   ITEM_OCARINA_TIME as libc::c_int {
                            if gSaveContext.buttonStatus[i as usize] as
                                   libc::c_int == BTN_DISABLED as libc::c_int
                               {
                                sp28 = 1 as libc::c_int as s16
                            }
                            gSaveContext.buttonStatus[i as usize] =
                                BTN_ENABLED as libc::c_int as u8_0
                        }
                        i += 1
                    }
                }
                if (*interfaceCtx).restrictions.farores as libc::c_int !=
                       0 as libc::c_int {
                    i = 1 as libc::c_int as s16;
                    while (i as libc::c_int) < 4 as libc::c_int {
                        if gSaveContext.equips.buttonItems[i as usize] as
                               libc::c_int == ITEM_FARORES_WIND as libc::c_int
                           {
                            if gSaveContext.buttonStatus[i as usize] as
                                   libc::c_int == BTN_ENABLED as libc::c_int {
                                sp28 = 1 as libc::c_int as s16
                            }
                            gSaveContext.buttonStatus[i as usize] =
                                BTN_DISABLED as libc::c_int as u8_0;
                            osSyncPrintf(b"***(i=%d)***  \x00" as *const u8 as
                                             *const libc::c_char,
                                         i as libc::c_int);
                        }
                        i += 1
                    }
                } else if (*interfaceCtx).restrictions.farores as libc::c_int
                              == 0 as libc::c_int {
                    i = 1 as libc::c_int as s16;
                    while (i as libc::c_int) < 4 as libc::c_int {
                        if gSaveContext.equips.buttonItems[i as usize] as
                               libc::c_int == ITEM_FARORES_WIND as libc::c_int
                           {
                            if gSaveContext.buttonStatus[i as usize] as
                                   libc::c_int == BTN_DISABLED as libc::c_int
                               {
                                sp28 = 1 as libc::c_int as s16
                            }
                            gSaveContext.buttonStatus[i as usize] =
                                BTN_ENABLED as libc::c_int as u8_0
                        }
                        i += 1
                    }
                }
                if (*interfaceCtx).restrictions.dinsNayrus as libc::c_int !=
                       0 as libc::c_int {
                    i = 1 as libc::c_int as s16;
                    while (i as libc::c_int) < 4 as libc::c_int {
                        if gSaveContext.equips.buttonItems[i as usize] as
                               libc::c_int == ITEM_DINS_FIRE as libc::c_int ||
                               gSaveContext.equips.buttonItems[i as usize] as
                                   libc::c_int ==
                                   ITEM_NAYRUS_LOVE as libc::c_int {
                            if gSaveContext.buttonStatus[i as usize] as
                                   libc::c_int == BTN_ENABLED as libc::c_int {
                                sp28 = 1 as libc::c_int as s16
                            }
                            gSaveContext.buttonStatus[i as usize] =
                                BTN_DISABLED as libc::c_int as u8_0
                        }
                        i += 1
                    }
                } else if (*interfaceCtx).restrictions.dinsNayrus as
                              libc::c_int == 0 as libc::c_int {
                    i = 1 as libc::c_int as s16;
                    while (i as libc::c_int) < 4 as libc::c_int {
                        if gSaveContext.equips.buttonItems[i as usize] as
                               libc::c_int == ITEM_DINS_FIRE as libc::c_int ||
                               gSaveContext.equips.buttonItems[i as usize] as
                                   libc::c_int ==
                                   ITEM_NAYRUS_LOVE as libc::c_int {
                            if gSaveContext.buttonStatus[i as usize] as
                                   libc::c_int == BTN_DISABLED as libc::c_int
                               {
                                sp28 = 1 as libc::c_int as s16
                            }
                            gSaveContext.buttonStatus[i as usize] =
                                BTN_ENABLED as libc::c_int as u8_0
                        }
                        i += 1
                    }
                }
                if (*interfaceCtx).restrictions.all as libc::c_int !=
                       0 as libc::c_int {
                    i = 1 as libc::c_int as s16;
                    while (i as libc::c_int) < 4 as libc::c_int {
                        if gSaveContext.equips.buttonItems[i as usize] as
                               libc::c_int !=
                               ITEM_OCARINA_FAIRY as libc::c_int &&
                               gSaveContext.equips.buttonItems[i as usize] as
                                   libc::c_int !=
                                   ITEM_OCARINA_TIME as libc::c_int &&
                               !(gSaveContext.equips.buttonItems[i as usize]
                                     as libc::c_int >=
                                     ITEM_BOTTLE as libc::c_int &&
                                     gSaveContext.equips.buttonItems[i as
                                                                         usize]
                                         as libc::c_int <=
                                         ITEM_POE as libc::c_int) &&
                               !(gSaveContext.equips.buttonItems[i as usize]
                                     as libc::c_int >=
                                     ITEM_WEIRD_EGG as libc::c_int &&
                                     gSaveContext.equips.buttonItems[i as
                                                                         usize]
                                         as libc::c_int <=
                                         ITEM_CLAIM_CHECK as libc::c_int) {
                            if (*globalCtx).sceneNum as libc::c_int !=
                                   SCENE_TAKARAYA as libc::c_int ||
                                   gSaveContext.equips.buttonItems[i as usize]
                                       as libc::c_int !=
                                       ITEM_LENS as libc::c_int {
                                if gSaveContext.buttonStatus[i as usize] as
                                       libc::c_int ==
                                       BTN_ENABLED as libc::c_int {
                                    sp28 = 1 as libc::c_int as s16
                                }
                                gSaveContext.buttonStatus[i as usize] =
                                    BTN_DISABLED as libc::c_int as u8_0
                            } else {
                                if gSaveContext.buttonStatus[i as usize] as
                                       libc::c_int ==
                                       BTN_DISABLED as libc::c_int {
                                    sp28 = 1 as libc::c_int as s16
                                }
                                gSaveContext.buttonStatus[i as usize] =
                                    BTN_ENABLED as libc::c_int as u8_0
                            }
                        }
                        i += 1
                    }
                } else if (*interfaceCtx).restrictions.all as libc::c_int ==
                              0 as libc::c_int {
                    i = 1 as libc::c_int as s16;
                    while (i as libc::c_int) < 4 as libc::c_int {
                        if gSaveContext.equips.buttonItems[i as usize] as
                               libc::c_int != ITEM_DINS_FIRE as libc::c_int &&
                               gSaveContext.equips.buttonItems[i as usize] as
                                   libc::c_int != ITEM_HOOKSHOT as libc::c_int
                               &&
                               gSaveContext.equips.buttonItems[i as usize] as
                                   libc::c_int != ITEM_LONGSHOT as libc::c_int
                               &&
                               gSaveContext.equips.buttonItems[i as usize] as
                                   libc::c_int !=
                                   ITEM_FARORES_WIND as libc::c_int &&
                               gSaveContext.equips.buttonItems[i as usize] as
                                   libc::c_int !=
                                   ITEM_NAYRUS_LOVE as libc::c_int &&
                               gSaveContext.equips.buttonItems[i as usize] as
                                   libc::c_int !=
                                   ITEM_OCARINA_FAIRY as libc::c_int &&
                               gSaveContext.equips.buttonItems[i as usize] as
                                   libc::c_int !=
                                   ITEM_OCARINA_TIME as libc::c_int &&
                               !(gSaveContext.equips.buttonItems[i as usize]
                                     as libc::c_int >=
                                     ITEM_BOTTLE as libc::c_int &&
                                     gSaveContext.equips.buttonItems[i as
                                                                         usize]
                                         as libc::c_int <=
                                         ITEM_POE as libc::c_int) &&
                               !(gSaveContext.equips.buttonItems[i as usize]
                                     as libc::c_int >=
                                     ITEM_WEIRD_EGG as libc::c_int &&
                                     gSaveContext.equips.buttonItems[i as
                                                                         usize]
                                         as libc::c_int <=
                                         ITEM_CLAIM_CHECK as libc::c_int) {
                            if gSaveContext.buttonStatus[i as usize] as
                                   libc::c_int == BTN_DISABLED as libc::c_int
                               {
                                sp28 = 1 as libc::c_int as s16
                            }
                            gSaveContext.buttonStatus[i as usize] =
                                BTN_ENABLED as libc::c_int as u8_0
                        }
                        i += 1
                    }
                }
            }
        }
    }
    if sp28 != 0 {
        gSaveContext.unk_13EA = 0 as libc::c_int as u16_0;
        if (*globalCtx).sceneLoadFlag as libc::c_int == 0 as libc::c_int &&
               (*globalCtx).transitionMode as libc::c_int == 0 as libc::c_int
           {
            Interface_ChangeAlpha(50 as libc::c_int as u16_0);
            osSyncPrintf(b"????????  alpha_change( 50 );  ?????\n\x00" as
                             *const u8 as *const libc::c_char);
        } else {
            osSyncPrintf(b"game_play->fade_direction || game_play->fbdemo_wipe_modem\x00"
                             as *const u8 as *const libc::c_char);
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn Interface_SetSceneRestrictions(mut globalCtx:
                                                            *mut GlobalContext) {
    let mut interfaceCtx: *mut InterfaceContext =
        &mut (*globalCtx).interfaceCtx;
    let mut i: s16 = 0;
    let mut currentScene: u8_0 = 0;
    // clang-format off
    (*interfaceCtx).restrictions.all = 0 as libc::c_int as u8_0;
    (*interfaceCtx).restrictions.dinsNayrus =
        (*interfaceCtx).restrictions.all;
    (*interfaceCtx).restrictions.farores =
        (*interfaceCtx).restrictions.dinsNayrus;
    (*interfaceCtx).restrictions.sunsSong =
        (*interfaceCtx).restrictions.farores;
    (*interfaceCtx).restrictions.warpSongs =
        (*interfaceCtx).restrictions.sunsSong;
    (*interfaceCtx).restrictions.ocarina =
        (*interfaceCtx).restrictions.warpSongs;
    (*interfaceCtx).restrictions.hookshot =
        (*interfaceCtx).restrictions.ocarina;
    (*interfaceCtx).restrictions.tradeItems =
        (*interfaceCtx).restrictions.hookshot;
    (*interfaceCtx).restrictions.bottles =
        (*interfaceCtx).restrictions.tradeItems;
    (*interfaceCtx).restrictions.aButton =
        (*interfaceCtx).restrictions.bottles;
    (*interfaceCtx).restrictions.bButton =
        (*interfaceCtx).restrictions.aButton;
    (*interfaceCtx).restrictions.hGauge =
        (*interfaceCtx).restrictions.bButton;
    // clang-format on
    i = 0 as libc::c_int as s16;
    // "Data settings related to button display scene_data_ID=%d\n"
    osSyncPrintf(b"\xe3\x83\x9c\xe3\x82\xbf\xe3\x83\xb3\xe8\xa1\xa8\xe7\xa4\xba\xe9\x96\xa2\xe4\xbf\x82\xe3\x83\x87\xe3\x83\xbc\xe3\x82\xbf\xe8\xa8\xad\xe5\xae\x9a scene_data_ID=%d\n\x00"
                     as *const u8 as *const libc::c_char,
                 (*globalCtx).sceneNum as libc::c_int); // "Seals = %x"
    loop  {
        currentScene = (*globalCtx).sceneNum as u8_0; // "Musical scores = %x"
        if sRestrictionFlags[i as usize].scene as libc::c_int ==
               currentScene as libc::c_int {
            (*interfaceCtx).restrictions.hGauge =
                ((sRestrictionFlags[i as usize].flags1 as libc::c_int &
                      0xc0 as libc::c_int) >> 6 as libc::c_int) as u8_0;
            (*interfaceCtx).restrictions.bButton =
                ((sRestrictionFlags[i as usize].flags1 as libc::c_int &
                      0x30 as libc::c_int) >> 4 as libc::c_int) as u8_0;
            (*interfaceCtx).restrictions.aButton =
                ((sRestrictionFlags[i as usize].flags1 as libc::c_int &
                      0xc as libc::c_int) >> 2 as libc::c_int) as u8_0;
            (*interfaceCtx).restrictions.bottles =
                ((sRestrictionFlags[i as usize].flags1 as libc::c_int &
                      0x3 as libc::c_int) >> 0 as libc::c_int) as u8_0;
            (*interfaceCtx).restrictions.tradeItems =
                ((sRestrictionFlags[i as usize].flags2 as libc::c_int &
                      0xc0 as libc::c_int) >> 6 as libc::c_int) as u8_0;
            (*interfaceCtx).restrictions.hookshot =
                ((sRestrictionFlags[i as usize].flags2 as libc::c_int &
                      0x30 as libc::c_int) >> 4 as libc::c_int) as u8_0;
            (*interfaceCtx).restrictions.ocarina =
                ((sRestrictionFlags[i as usize].flags2 as libc::c_int &
                      0xc as libc::c_int) >> 2 as libc::c_int) as u8_0;
            (*interfaceCtx).restrictions.warpSongs =
                ((sRestrictionFlags[i as usize].flags2 as libc::c_int &
                      0x3 as libc::c_int) >> 0 as libc::c_int) as u8_0;
            (*interfaceCtx).restrictions.sunsSong =
                ((sRestrictionFlags[i as usize].flags3 as libc::c_int &
                      0xc0 as libc::c_int) >> 6 as libc::c_int) as u8_0;
            (*interfaceCtx).restrictions.farores =
                ((sRestrictionFlags[i as usize].flags3 as libc::c_int &
                      0x30 as libc::c_int) >> 4 as libc::c_int) as u8_0;
            (*interfaceCtx).restrictions.dinsNayrus =
                ((sRestrictionFlags[i as usize].flags3 as libc::c_int &
                      0xc as libc::c_int) >> 2 as libc::c_int) as u8_0;
            (*interfaceCtx).restrictions.all =
                ((sRestrictionFlags[i as usize].flags3 as libc::c_int &
                      0x3 as libc::c_int) >> 0 as libc::c_int) as u8_0;
            osSyncPrintf(b"\x1b[33m\x00" as *const u8 as *const libc::c_char);
            osSyncPrintf(b"parameter->button_status = %x,%x,%x\n\x00" as
                             *const u8 as *const libc::c_char,
                         sRestrictionFlags[i as usize].flags1 as libc::c_int,
                         sRestrictionFlags[i as usize].flags2 as libc::c_int,
                         sRestrictionFlags[i as usize].flags3 as libc::c_int);
            osSyncPrintf(b"h_gage=%d, b_button=%d, a_button=%d, c_bottle=%d\n\x00"
                             as *const u8 as *const libc::c_char,
                         (*interfaceCtx).restrictions.hGauge as libc::c_int,
                         (*interfaceCtx).restrictions.bButton as libc::c_int,
                         (*interfaceCtx).restrictions.aButton as libc::c_int,
                         (*interfaceCtx).restrictions.bottles as libc::c_int);
            osSyncPrintf(b"c_warasibe=%d, c_hook=%d, c_ocarina=%d, c_warp=%d\n\x00"
                             as *const u8 as *const libc::c_char,
                         (*interfaceCtx).restrictions.tradeItems as
                             libc::c_int,
                         (*interfaceCtx).restrictions.hookshot as libc::c_int,
                         (*interfaceCtx).restrictions.ocarina as libc::c_int,
                         (*interfaceCtx).restrictions.warpSongs as
                             libc::c_int);
            osSyncPrintf(b"c_sunmoon=%d, m_wind=%d, m_magic=%d, another=%d\n\x00"
                             as *const u8 as *const libc::c_char,
                         (*interfaceCtx).restrictions.sunsSong as libc::c_int,
                         (*interfaceCtx).restrictions.farores as libc::c_int,
                         (*interfaceCtx).restrictions.dinsNayrus as
                             libc::c_int,
                         (*interfaceCtx).restrictions.all as libc::c_int);
            osSyncPrintf(b"\x1b[m\x00" as *const u8 as *const libc::c_char);
            return
        }
        i += 1;
        if !(sRestrictionFlags[i as usize].scene as libc::c_int !=
                 0xff as libc::c_int) {
            break ;
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn Gfx_TextureIA8(mut displayListHead: *mut Gfx,
                                        mut texture: *mut libc::c_void,
                                        mut textureWidth: s16,
                                        mut textureHeight: s16,
                                        mut rectLeft: s16, mut rectTop: s16,
                                        mut rectWidth: s16,
                                        mut rectHeight: s16, mut dsdx: u16_0,
                                        mut dtdy: u16_0) -> *mut Gfx {
    let fresh0 = displayListHead;
    displayListHead = displayListHead.offset(1);
    let mut _g: *mut Gfx = fresh0;
    (*_g).words.w0 =
        (0xfd as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (3 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 21 as libc::c_int
            |
            (2 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            ((1 as libc::c_int - 1 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g).words.w1 = texture as libc::c_uint;
    let fresh1 = displayListHead;
    displayListHead = displayListHead.offset(1);
    let mut _g_0: *mut Gfx = fresh1;
    (*_g_0).words.w0 =
        (0xf5 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (3 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 21 as libc::c_int
            |
            (2 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 9 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_0).words.w1 =
        (7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 20 as libc::c_int
            |
            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 18 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 14 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 10 as libc::c_int
            |
            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 4 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh2 = displayListHead;
    displayListHead = displayListHead.offset(1);
    let mut _g_1: *mut Gfx = fresh2;
    (*_g_1).words.w0 =
        (0xe6 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_1).words.w1 = 0 as libc::c_int as libc::c_uint;
    let fresh3 = displayListHead;
    displayListHead = displayListHead.offset(1);
    let mut _g_2: *mut Gfx = fresh3;
    (*_g_2).words.w0 =
        (0xf3 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_2).words.w1 =
        (7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            ((if ((textureWidth as libc::c_int * textureHeight as libc::c_int
                       + 1 as libc::c_int >> 1 as libc::c_int) -
                      1 as libc::c_int) < 2047 as libc::c_int {
                  (textureWidth as libc::c_int * textureHeight as libc::c_int
                       + 1 as libc::c_int >> 1 as libc::c_int) -
                      1 as libc::c_int
              } else { 2047 as libc::c_int }) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (((((1 as libc::c_int) << 11 as libc::c_int) +
                   (if 1 as libc::c_int >
                           textureWidth as libc::c_int * 1 as libc::c_int /
                               8 as libc::c_int {
                        1 as libc::c_int
                    } else {
                        (textureWidth as libc::c_int * 1 as libc::c_int) /
                            8 as libc::c_int
                    }) - 1 as libc::c_int) /
                  (if 1 as libc::c_int >
                          textureWidth as libc::c_int * 1 as libc::c_int /
                              8 as libc::c_int {
                       1 as libc::c_int
                   } else {
                       (textureWidth as libc::c_int * 1 as libc::c_int) /
                           8 as libc::c_int
                   })) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh4 = displayListHead;
    displayListHead = displayListHead.offset(1);
    let mut _g_3: *mut Gfx = fresh4;
    (*_g_3).words.w0 =
        (0xe7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_3).words.w1 = 0 as libc::c_int as libc::c_uint;
    let fresh5 = displayListHead;
    displayListHead = displayListHead.offset(1);
    let mut _g_4: *mut Gfx = fresh5;
    (*_g_4).words.w0 =
        (0xf5 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (3 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 21 as libc::c_int
            |
            (1 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            ((textureWidth as libc::c_int * 1 as libc::c_int +
                  7 as libc::c_int >> 3 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 9 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_4).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 20 as libc::c_int
            |
            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 18 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 14 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 10 as libc::c_int
            |
            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 4 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh6 = displayListHead;
    displayListHead = displayListHead.offset(1);
    let mut _g_5: *mut Gfx = fresh6;
    (*_g_5).words.w0 =
        (0xf2 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_5).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (((textureWidth as libc::c_int - 1 as libc::c_int) <<
                  2 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (((textureHeight as libc::c_int - 1 as libc::c_int) <<
                  2 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh7 = displayListHead;
    displayListHead = displayListHead.offset(1);
    let mut _g_6: *mut Gfx = fresh7;
    (*_g_6).words.w0 =
        (0xe4 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (((rectLeft as libc::c_int + rectWidth as libc::c_int) *
                  4 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (((rectTop as libc::c_int + rectHeight as libc::c_int) *
                  4 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_6).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            ((rectLeft as libc::c_int * 4 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            ((rectTop as libc::c_int * 4 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh8 = displayListHead;
    displayListHead = displayListHead.offset(1);
    let mut _g_7: *mut Gfx = fresh8;
    (*_g_7).words.w0 =
        (0xe1 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_7).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 16 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 16 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh9 = displayListHead;
    displayListHead = displayListHead.offset(1);
    let mut _g_8: *mut Gfx = fresh9;
    (*_g_8).words.w0 =
        (0xf1 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_8).words.w1 =
        (dsdx as u32_0 &
             (((0x1 as libc::c_int) << 16 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 16 as libc::c_int |
            (dtdy as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    return displayListHead;
}
#[no_mangle]
pub unsafe extern "C" fn Gfx_TextureI8(mut displayListHead: *mut Gfx,
                                       mut texture: *mut libc::c_void,
                                       mut textureWidth: s16,
                                       mut textureHeight: s16,
                                       mut rectLeft: s16, mut rectTop: s16,
                                       mut rectWidth: s16,
                                       mut rectHeight: s16, mut dsdx: u16_0,
                                       mut dtdy: u16_0) -> *mut Gfx {
    let fresh10 = displayListHead;
    displayListHead = displayListHead.offset(1);
    let mut _g: *mut Gfx = fresh10;
    (*_g).words.w0 =
        (0xfd as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (4 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 21 as libc::c_int
            |
            (2 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            ((1 as libc::c_int - 1 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g).words.w1 = texture as libc::c_uint;
    let fresh11 = displayListHead;
    displayListHead = displayListHead.offset(1);
    let mut _g_0: *mut Gfx = fresh11;
    (*_g_0).words.w0 =
        (0xf5 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (4 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 21 as libc::c_int
            |
            (2 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 9 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_0).words.w1 =
        (7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 20 as libc::c_int
            |
            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 18 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 14 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 10 as libc::c_int
            |
            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 4 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh12 = displayListHead;
    displayListHead = displayListHead.offset(1);
    let mut _g_1: *mut Gfx = fresh12;
    (*_g_1).words.w0 =
        (0xe6 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_1).words.w1 = 0 as libc::c_int as libc::c_uint;
    let fresh13 = displayListHead;
    displayListHead = displayListHead.offset(1);
    let mut _g_2: *mut Gfx = fresh13;
    (*_g_2).words.w0 =
        (0xf3 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_2).words.w1 =
        (7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            ((if ((textureWidth as libc::c_int * textureHeight as libc::c_int
                       + 1 as libc::c_int >> 1 as libc::c_int) -
                      1 as libc::c_int) < 2047 as libc::c_int {
                  (textureWidth as libc::c_int * textureHeight as libc::c_int
                       + 1 as libc::c_int >> 1 as libc::c_int) -
                      1 as libc::c_int
              } else { 2047 as libc::c_int }) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (((((1 as libc::c_int) << 11 as libc::c_int) +
                   (if 1 as libc::c_int >
                           textureWidth as libc::c_int * 1 as libc::c_int /
                               8 as libc::c_int {
                        1 as libc::c_int
                    } else {
                        (textureWidth as libc::c_int * 1 as libc::c_int) /
                            8 as libc::c_int
                    }) - 1 as libc::c_int) /
                  (if 1 as libc::c_int >
                          textureWidth as libc::c_int * 1 as libc::c_int /
                              8 as libc::c_int {
                       1 as libc::c_int
                   } else {
                       (textureWidth as libc::c_int * 1 as libc::c_int) /
                           8 as libc::c_int
                   })) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh14 = displayListHead;
    displayListHead = displayListHead.offset(1);
    let mut _g_3: *mut Gfx = fresh14;
    (*_g_3).words.w0 =
        (0xe7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_3).words.w1 = 0 as libc::c_int as libc::c_uint;
    let fresh15 = displayListHead;
    displayListHead = displayListHead.offset(1);
    let mut _g_4: *mut Gfx = fresh15;
    (*_g_4).words.w0 =
        (0xf5 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (4 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 21 as libc::c_int
            |
            (1 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            ((textureWidth as libc::c_int * 1 as libc::c_int +
                  7 as libc::c_int >> 3 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 9 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_4).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 20 as libc::c_int
            |
            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 18 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 14 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 10 as libc::c_int
            |
            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 4 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh16 = displayListHead;
    displayListHead = displayListHead.offset(1);
    let mut _g_5: *mut Gfx = fresh16;
    (*_g_5).words.w0 =
        (0xf2 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_5).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (((textureWidth as libc::c_int - 1 as libc::c_int) <<
                  2 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (((textureHeight as libc::c_int - 1 as libc::c_int) <<
                  2 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh17 = displayListHead;
    displayListHead = displayListHead.offset(1);
    let mut _g_6: *mut Gfx = fresh17;
    (*_g_6).words.w0 =
        (0xe4 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (((rectLeft as libc::c_int + rectWidth as libc::c_int) *
                  4 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (((rectTop as libc::c_int + rectHeight as libc::c_int) *
                  4 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_6).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            ((rectLeft as libc::c_int * 4 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            ((rectTop as libc::c_int * 4 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh18 = displayListHead;
    displayListHead = displayListHead.offset(1);
    let mut _g_7: *mut Gfx = fresh18;
    (*_g_7).words.w0 =
        (0xe1 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_7).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 16 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 16 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh19 = displayListHead;
    displayListHead = displayListHead.offset(1);
    let mut _g_8: *mut Gfx = fresh19;
    (*_g_8).words.w0 =
        (0xf1 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_8).words.w1 =
        (dsdx as u32_0 &
             (((0x1 as libc::c_int) << 16 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 16 as libc::c_int |
            (dtdy as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    return displayListHead;
}
#[no_mangle]
pub unsafe extern "C" fn Inventory_SwapAgeEquipment() {
    let mut i: s16 = 0;
    let mut temp: u16_0 = 0;
    if (if !(gSaveContext.linkAge == 0 as libc::c_int) {
            5 as libc::c_int
        } else { 17 as libc::c_int }) == 5 as libc::c_int {
        i = 0 as libc::c_int as s16;
        while (i as libc::c_int) < 4 as libc::c_int {
            if i as libc::c_int != 0 as libc::c_int {
                gSaveContext.childEquips.buttonItems[i as usize] =
                    gSaveContext.equips.buttonItems[i as usize]
            } else {
                gSaveContext.childEquips.buttonItems[i as usize] =
                    ITEM_SWORD_KOKIRI as libc::c_int as u8_0
            }
            if i as libc::c_int != 0 as libc::c_int {
                gSaveContext.childEquips.cButtonSlots[(i as libc::c_int -
                                                           1 as libc::c_int)
                                                          as usize] =
                    gSaveContext.equips.cButtonSlots[(i as libc::c_int -
                                                          1 as libc::c_int) as
                                                         usize]
            }
            i += 1
        }
        gSaveContext.childEquips.equipment = gSaveContext.equips.equipment;
        if gSaveContext.adultEquips.buttonItems[0 as libc::c_int as usize] as
               libc::c_int == ITEM_NONE as libc::c_int {
            gSaveContext.equips.buttonItems[0 as libc::c_int as usize] =
                ITEM_SWORD_MASTER as libc::c_int as u8_0;
            if gSaveContext.inventory.items[SLOT_NUT as libc::c_int as usize]
                   as libc::c_int != ITEM_NONE as libc::c_int {
                gSaveContext.equips.buttonItems[1 as libc::c_int as usize] =
                    ITEM_NUT as libc::c_int as u8_0;
                gSaveContext.equips.cButtonSlots[0 as libc::c_int as usize] =
                    SLOT_NUT as libc::c_int as u8_0
            } else {
                gSaveContext.equips.cButtonSlots[0 as libc::c_int as usize] =
                    ITEM_NONE as libc::c_int as u8_0;
                gSaveContext.equips.buttonItems[1 as libc::c_int as usize] =
                    gSaveContext.equips.cButtonSlots[0 as libc::c_int as
                                                         usize]
            }
            gSaveContext.equips.buttonItems[2 as libc::c_int as usize] =
                ITEM_BOMB as libc::c_int as u8_0;
            gSaveContext.equips.buttonItems[3 as libc::c_int as usize] =
                gSaveContext.inventory.items[SLOT_OCARINA as libc::c_int as
                                                 usize];
            gSaveContext.equips.cButtonSlots[1 as libc::c_int as usize] =
                SLOT_BOMB as libc::c_int as u8_0;
            gSaveContext.equips.cButtonSlots[2 as libc::c_int as usize] =
                SLOT_OCARINA as libc::c_int as u8_0;
            gSaveContext.equips.equipment = 0x1122 as libc::c_int as u16_0
        } else {
            i = 0 as libc::c_int as s16;
            while (i as libc::c_int) < 4 as libc::c_int {
                gSaveContext.equips.buttonItems[i as usize] =
                    gSaveContext.adultEquips.buttonItems[i as usize];
                if i as libc::c_int != 0 as libc::c_int {
                    gSaveContext.equips.cButtonSlots[(i as libc::c_int -
                                                          1 as libc::c_int) as
                                                         usize] =
                        gSaveContext.adultEquips.cButtonSlots[(i as
                                                                   libc::c_int
                                                                   -
                                                                   1 as
                                                                       libc::c_int)
                                                                  as usize]
                }
                if gSaveContext.equips.buttonItems[i as usize] as libc::c_int
                       >= ITEM_BOTTLE as libc::c_int &&
                       gSaveContext.equips.buttonItems[i as usize] as
                           libc::c_int <= ITEM_POE as libc::c_int ||
                       gSaveContext.equips.buttonItems[i as usize] as
                           libc::c_int >= ITEM_WEIRD_EGG as libc::c_int &&
                           gSaveContext.equips.buttonItems[i as usize] as
                               libc::c_int <= ITEM_CLAIM_CHECK as libc::c_int
                   {
                    osSyncPrintf(b"Register_Item_Pt(%d)=%d\n\x00" as *const u8
                                     as *const libc::c_char, i as libc::c_int,
                                 gSaveContext.equips.cButtonSlots[(i as
                                                                       libc::c_int
                                                                       -
                                                                       1 as
                                                                           libc::c_int)
                                                                      as
                                                                      usize]
                                     as libc::c_int);
                    gSaveContext.equips.buttonItems[i as usize] =
                        gSaveContext.inventory.items[gSaveContext.equips.cButtonSlots[(i
                                                                                           as
                                                                                           libc::c_int
                                                                                           -
                                                                                           1
                                                                                               as
                                                                                               libc::c_int)
                                                                                          as
                                                                                          usize]
                                                         as usize]
                }
                i += 1
            }
            gSaveContext.equips.equipment = gSaveContext.adultEquips.equipment
        }
    } else {
        i = 0 as libc::c_int as s16;
        while (i as libc::c_int) < 4 as libc::c_int {
            gSaveContext.adultEquips.buttonItems[i as usize] =
                gSaveContext.equips.buttonItems[i as usize];
            if i as libc::c_int != 0 as libc::c_int {
                gSaveContext.adultEquips.cButtonSlots[(i as libc::c_int -
                                                           1 as libc::c_int)
                                                          as usize] =
                    gSaveContext.equips.cButtonSlots[(i as libc::c_int -
                                                          1 as libc::c_int) as
                                                         usize]
            }
            i += 1
        }
        gSaveContext.adultEquips.equipment = gSaveContext.equips.equipment;
        if gSaveContext.childEquips.buttonItems[0 as libc::c_int as usize] as
               libc::c_int != ITEM_NONE as libc::c_int {
            i = 0 as libc::c_int as s16;
            while (i as libc::c_int) < 4 as libc::c_int {
                gSaveContext.equips.buttonItems[i as usize] =
                    gSaveContext.childEquips.buttonItems[i as usize];
                if i as libc::c_int != 0 as libc::c_int {
                    gSaveContext.equips.cButtonSlots[(i as libc::c_int -
                                                          1 as libc::c_int) as
                                                         usize] =
                        gSaveContext.childEquips.cButtonSlots[(i as
                                                                   libc::c_int
                                                                   -
                                                                   1 as
                                                                       libc::c_int)
                                                                  as usize]
                }
                if gSaveContext.equips.buttonItems[i as usize] as libc::c_int
                       >= ITEM_BOTTLE as libc::c_int &&
                       gSaveContext.equips.buttonItems[i as usize] as
                           libc::c_int <= ITEM_POE as libc::c_int ||
                       gSaveContext.equips.buttonItems[i as usize] as
                           libc::c_int >= ITEM_WEIRD_EGG as libc::c_int &&
                           gSaveContext.equips.buttonItems[i as usize] as
                               libc::c_int <= ITEM_CLAIM_CHECK as libc::c_int
                   {
                    osSyncPrintf(b"Register_Item_Pt(%d)=%d\n\x00" as *const u8
                                     as *const libc::c_char, i as libc::c_int,
                                 gSaveContext.equips.cButtonSlots[(i as
                                                                       libc::c_int
                                                                       -
                                                                       1 as
                                                                           libc::c_int)
                                                                      as
                                                                      usize]
                                     as libc::c_int);
                    gSaveContext.equips.buttonItems[i as usize] =
                        gSaveContext.inventory.items[gSaveContext.equips.cButtonSlots[(i
                                                                                           as
                                                                                           libc::c_int
                                                                                           -
                                                                                           1
                                                                                               as
                                                                                               libc::c_int)
                                                                                          as
                                                                                          usize]
                                                         as usize]
                }
                i += 1
            }
            gSaveContext.equips.equipment =
                gSaveContext.childEquips.equipment;
            gSaveContext.equips.equipment =
                (gSaveContext.equips.equipment as libc::c_int &
                     0xfff0 as libc::c_int) as u16_0;
            gSaveContext.equips.equipment =
                (gSaveContext.equips.equipment as libc::c_int |
                     0x1 as libc::c_int) as u16_0
        }
    }
    temp =
        (gEquipMasks[EQUIP_SHIELD as libc::c_int as usize] as libc::c_int &
             gSaveContext.equips.equipment as libc::c_int) as u16_0;
    if temp as libc::c_int != 0 as libc::c_int {
        temp =
            (temp as libc::c_int >>
                 gEquipShifts[EQUIP_SHIELD as libc::c_int as usize] as
                     libc::c_int) as u16_0;
        if gBitFlags[(temp as libc::c_int + 3 as libc::c_int) as usize] &
               gSaveContext.inventory.equipment as libc::c_uint == 0 {
            gSaveContext.equips.equipment =
                (gSaveContext.equips.equipment as libc::c_int &
                     gEquipNegMasks[EQUIP_SHIELD as libc::c_int as usize] as
                         libc::c_int) as u16_0
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn Interface_InitHorsebackArchery(mut globalCtx:
                                                            *mut GlobalContext) {
    let mut interfaceCtx: *mut InterfaceContext =
        &mut (*globalCtx).interfaceCtx;
    gSaveContext.minigameState = 1 as libc::c_int as u16_0;
    (*interfaceCtx).unk_242 = 0 as libc::c_int as u16_0;
    (*interfaceCtx).unk_240 = (*interfaceCtx).unk_242;
    (*interfaceCtx).unk_23C = (*interfaceCtx).unk_240;
    sHBAScoreTier = 0 as libc::c_int as s16;
    gSaveContext.minigameScore = sHBAScoreTier as u16_0;
    (*interfaceCtx).hbaAmmo = 20 as libc::c_int as u16_0;
}
#[no_mangle]
pub unsafe extern "C" fn func_800849EC(mut globalCtx: *mut GlobalContext) {
    gSaveContext.inventory.equipment =
        (gSaveContext.inventory.equipment as libc::c_uint |
             gBitFlags[2 as libc::c_int as usize] <<
                 gEquipShifts[EQUIP_SWORD as libc::c_int as usize] as
                     libc::c_int) as u16_0;
    gSaveContext.inventory.equipment =
        (gSaveContext.inventory.equipment as libc::c_int ^
             (8 as libc::c_int) <<
                 gEquipShifts[EQUIP_SWORD as libc::c_int as usize] as
                     libc::c_int) as u16_0;
    if gBitFlags[3 as libc::c_int as usize] &
           gSaveContext.inventory.equipment as libc::c_uint != 0 {
        gSaveContext.equips.buttonItems[0 as libc::c_int as usize] =
            ITEM_SWORD_KNIFE as libc::c_int as u8_0
    } else {
        gSaveContext.equips.buttonItems[0 as libc::c_int as usize] =
            ITEM_SWORD_BGS as libc::c_int as u8_0
    }
    Interface_LoadItemIcon1(globalCtx, 0 as libc::c_int as u16_0);
}
#[no_mangle]
pub unsafe extern "C" fn Interface_LoadItemIcon1(mut globalCtx:
                                                     *mut GlobalContext,
                                                 mut button: u16_0) {
    let mut interfaceCtx: *mut InterfaceContext =
        &mut (*globalCtx).interfaceCtx;
    osCreateMesgQueue(&mut (*interfaceCtx).loadQueue,
                      &mut (*interfaceCtx).loadMsg, 1 as libc::c_int);
    DmaMgr_SendRequest2(&mut (*interfaceCtx).dmaRequest_160,
                        (*interfaceCtx).iconItemSegment.offset((button as
                                                                    libc::c_int
                                                                    *
                                                                    0x1000 as
                                                                        libc::c_int)
                                                                   as isize)
                            as u32_0,
                        (_icon_item_staticSegmentRomStart.as_mut_ptr() as
                             u32_0).wrapping_add((gSaveContext.equips.buttonItems[button
                                                                                      as
                                                                                      usize]
                                                      as libc::c_int *
                                                      0x1000 as libc::c_int)
                                                     as libc::c_uint),
                        0x1000 as libc::c_int as u32_0,
                        0 as libc::c_int as u32_0,
                        &mut (*interfaceCtx).loadQueue,
                        0 as *mut libc::c_void,
                        b"../z_parameter.c\x00" as *const u8 as
                            *const libc::c_char, 1171 as libc::c_int);
    osRecvMesg(&mut (*interfaceCtx).loadQueue, 0 as *mut OSMesg,
               1 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn Interface_LoadItemIcon2(mut globalCtx:
                                                     *mut GlobalContext,
                                                 mut button: u16_0) {
    let mut interfaceCtx: *mut InterfaceContext =
        &mut (*globalCtx).interfaceCtx;
    osCreateMesgQueue(&mut (*interfaceCtx).loadQueue,
                      &mut (*interfaceCtx).loadMsg, 1 as libc::c_int);
    DmaMgr_SendRequest2(&mut (*interfaceCtx).dmaRequest_180,
                        (*interfaceCtx).iconItemSegment.offset((button as
                                                                    libc::c_int
                                                                    *
                                                                    0x1000 as
                                                                        libc::c_int)
                                                                   as isize)
                            as u32_0,
                        (_icon_item_staticSegmentRomStart.as_mut_ptr() as
                             u32_0).wrapping_add((gSaveContext.equips.buttonItems[button
                                                                                      as
                                                                                      usize]
                                                      as libc::c_int *
                                                      0x1000 as libc::c_int)
                                                     as libc::c_uint),
                        0x1000 as libc::c_int as u32_0,
                        0 as libc::c_int as u32_0,
                        &mut (*interfaceCtx).loadQueue,
                        0 as *mut libc::c_void,
                        b"../z_parameter.c\x00" as *const u8 as
                            *const libc::c_char, 1193 as libc::c_int);
    osRecvMesg(&mut (*interfaceCtx).loadQueue, 0 as *mut OSMesg,
               1 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn func_80084BF4(mut globalCtx: *mut GlobalContext,
                                       mut flag: u16_0) {
    if flag != 0 {
        if gSaveContext.equips.buttonItems[0 as libc::c_int as usize] as
               libc::c_int == ITEM_SLINGSHOT as libc::c_int ||
               gSaveContext.equips.buttonItems[0 as libc::c_int as usize] as
                   libc::c_int == ITEM_BOW as libc::c_int ||
               gSaveContext.equips.buttonItems[0 as libc::c_int as usize] as
                   libc::c_int == ITEM_BOMBCHU as libc::c_int ||
               gSaveContext.equips.buttonItems[0 as libc::c_int as usize] as
                   libc::c_int == ITEM_FISHING_POLE as libc::c_int ||
               gSaveContext.buttonStatus[0 as libc::c_int as usize] as
                   libc::c_int == BTN_DISABLED as libc::c_int {
            if gSaveContext.equips.buttonItems[0 as libc::c_int as usize] as
                   libc::c_int == ITEM_SLINGSHOT as libc::c_int ||
                   gSaveContext.equips.buttonItems[0 as libc::c_int as usize]
                       as libc::c_int == ITEM_BOW as libc::c_int ||
                   gSaveContext.equips.buttonItems[0 as libc::c_int as usize]
                       as libc::c_int == ITEM_BOMBCHU as libc::c_int ||
                   gSaveContext.equips.buttonItems[0 as libc::c_int as usize]
                       as libc::c_int == ITEM_FISHING_POLE as libc::c_int {
                gSaveContext.equips.buttonItems[0 as libc::c_int as usize] =
                    gSaveContext.buttonStatus[0 as libc::c_int as usize];
                Interface_LoadItemIcon1(globalCtx, 0 as libc::c_int as u16_0);
            }
        } else if gSaveContext.equips.buttonItems[0 as libc::c_int as usize]
                      as libc::c_int == ITEM_NONE as libc::c_int {
            if gSaveContext.equips.buttonItems[0 as libc::c_int as usize] as
                   libc::c_int != ITEM_NONE as libc::c_int ||
                   gSaveContext.infTable[29 as libc::c_int as usize] as
                       libc::c_int == 0 as libc::c_int {
                gSaveContext.equips.buttonItems[0 as libc::c_int as usize] =
                    gSaveContext.buttonStatus[0 as libc::c_int as usize];
                Interface_LoadItemIcon1(globalCtx, 0 as libc::c_int as u16_0);
            }
        }
        gSaveContext.buttonStatus[3 as libc::c_int as usize] =
            BTN_ENABLED as libc::c_int as u8_0;
        gSaveContext.buttonStatus[2 as libc::c_int as usize] =
            gSaveContext.buttonStatus[3 as libc::c_int as usize];
        gSaveContext.buttonStatus[1 as libc::c_int as usize] =
            gSaveContext.buttonStatus[2 as libc::c_int as usize];
        gSaveContext.buttonStatus[0 as libc::c_int as usize] =
            gSaveContext.buttonStatus[1 as libc::c_int as usize];
        Interface_ChangeAlpha(7 as libc::c_int as u16_0);
    } else {
        gSaveContext.buttonStatus[3 as libc::c_int as usize] =
            BTN_ENABLED as libc::c_int as u8_0;
        gSaveContext.buttonStatus[2 as libc::c_int as usize] =
            gSaveContext.buttonStatus[3 as libc::c_int as usize];
        gSaveContext.buttonStatus[1 as libc::c_int as usize] =
            gSaveContext.buttonStatus[2 as libc::c_int as usize];
        gSaveContext.buttonStatus[0 as libc::c_int as usize] =
            gSaveContext.buttonStatus[1 as libc::c_int as usize];
        func_80083108(globalCtx);
    };
}
#[no_mangle]
pub unsafe extern "C" fn Item_Give(mut globalCtx: *mut GlobalContext,
                                   mut item: u8_0) -> u8_0 {
    static mut sAmmoRefillCounts: [s16; 16] =
        [5 as libc::c_int as s16, 10 as libc::c_int as s16,
         20 as libc::c_int as s16, 30 as libc::c_int as s16,
         5 as libc::c_int as s16, 10 as libc::c_int as s16,
         30 as libc::c_int as s16, 0 as libc::c_int as s16,
         5 as libc::c_int as s16, 20 as libc::c_int as s16,
         1 as libc::c_int as s16, 5 as libc::c_int as s16,
         20 as libc::c_int as s16, 50 as libc::c_int as s16,
         200 as libc::c_int as s16, 10 as libc::c_int as s16];
    let mut i: s16 = 0;
    let mut slot: s16 = 0;
    let mut temp: s16 = 0;
    slot = gItemSlots[item as usize] as s16;
    if item as libc::c_int >= ITEM_STICKS_5 as libc::c_int {
        slot =
            gItemSlots[sExtraItemBases[(item as libc::c_int -
                                            ITEM_STICKS_5 as libc::c_int) as
                                           usize] as usize] as s16
    }
    osSyncPrintf(b"\x1b[33m\x00" as *const u8 as *const libc::c_char);
    osSyncPrintf(b"item_get_setting=%d  pt=%d  z=%x\n\x00" as *const u8 as
                     *const libc::c_char, item as libc::c_int,
                 slot as libc::c_int,
                 gSaveContext.inventory.items[slot as usize] as libc::c_int);
    osSyncPrintf(b"\x1b[m\x00" as *const u8 as *const libc::c_char);
    if item as libc::c_int >= ITEM_MEDALLION_FOREST as libc::c_int &&
           item as libc::c_int <= ITEM_MEDALLION_LIGHT as libc::c_int {
        gSaveContext.inventory.questItems |=
            gBitFlags[(item as libc::c_int -
                           ITEM_MEDALLION_FOREST as libc::c_int +
                           QUEST_MEDALLION_FOREST as libc::c_int) as usize];
        osSyncPrintf(b"\x1b[33m\x00" as *const u8 as *const libc::c_char);
        osSyncPrintf(b"\xe5\xb0\x81\xe5\x8d\xb0 = %x\n\x00" as *const u8 as
                         *const libc::c_char,
                     gSaveContext.inventory.questItems);
        osSyncPrintf(b"\x1b[m\x00" as *const u8 as *const libc::c_char);
        if item as libc::c_int == ITEM_MEDALLION_WATER as libc::c_int {
            func_8006D0AC(globalCtx);
        }
        return ITEM_NONE as libc::c_int as u8_0
    } else {
        if item as libc::c_int >= ITEM_SONG_MINUET as libc::c_int &&
               item as libc::c_int <= ITEM_SONG_STORMS as libc::c_int {
            gSaveContext.inventory.questItems |=
                gBitFlags[(item as libc::c_int -
                               ITEM_SONG_MINUET as libc::c_int +
                               QUEST_SONG_MINUET as libc::c_int) as usize];
            osSyncPrintf(b"\x1b[33m\x00" as *const u8 as *const libc::c_char);
            osSyncPrintf(b"\xe6\xa5\xbd\xe8\xad\x9c = %x\n\x00" as *const u8
                             as *const libc::c_char,
                         gSaveContext.inventory.questItems);
            // "Musical scores = %x (%x) (%x)"
            osSyncPrintf(b"\xe6\xa5\xbd\xe8\xad\x9c = %x (%x) (%x)\n\x00" as
                             *const u8 as *const libc::c_char,
                         gSaveContext.inventory.questItems,
                         gBitFlags[(item as libc::c_int -
                                        ITEM_SONG_MINUET as libc::c_int +
                                        QUEST_SONG_MINUET as libc::c_int) as
                                       usize],
                         gBitFlags[(item as libc::c_int -
                                        ITEM_SONG_MINUET as libc::c_int) as
                                       usize]); // "Spiritual Stones = %x"
            osSyncPrintf(b"\x1b[m\x00" as *const u8 as
                             *const libc::c_char); // "Items = %x"
            return ITEM_NONE as libc::c_int as u8_0
        } else {
            if item as libc::c_int >= ITEM_KOKIRI_EMERALD as libc::c_int &&
                   item as libc::c_int <= ITEM_ZORA_SAPPHIRE as libc::c_int {
                gSaveContext.inventory.questItems |=
                    gBitFlags[(item as libc::c_int -
                                   ITEM_KOKIRI_EMERALD as libc::c_int +
                                   QUEST_KOKIRI_EMERALD as libc::c_int) as
                                  usize];
                osSyncPrintf(b"\x1b[33m\x00" as *const u8 as
                                 *const libc::c_char);
                osSyncPrintf(b"\xe7\xb2\xbe\xe9\x9c\x8a\xe7\x9f\xb3 = %x\n\x00"
                                 as *const u8 as *const libc::c_char,
                             gSaveContext.inventory.questItems);
                osSyncPrintf(b"\x1b[m\x00" as *const u8 as
                                 *const libc::c_char);
                return ITEM_NONE as libc::c_int as u8_0
            } else {
                if item as libc::c_int == ITEM_STONE_OF_AGONY as libc::c_int
                       ||
                       item as libc::c_int == ITEM_GERUDO_CARD as libc::c_int
                   {
                    gSaveContext.inventory.questItems |=
                        gBitFlags[(item as libc::c_int -
                                       ITEM_STONE_OF_AGONY as libc::c_int +
                                       QUEST_STONE_OF_AGONY as libc::c_int) as
                                      usize];
                    osSyncPrintf(b"\x1b[33m\x00" as *const u8 as
                                     *const libc::c_char);
                    osSyncPrintf(b"\xe3\x82\xa2\xe3\x82\xa4\xe3\x83\x86\xe3\x83\xa0 = %x\n\x00"
                                     as *const u8 as *const libc::c_char,
                                 gSaveContext.inventory.questItems);
                    osSyncPrintf(b"\x1b[m\x00" as *const u8 as
                                     *const libc::c_char);
                    return ITEM_NONE as libc::c_int as u8_0
                } else {
                    if item as libc::c_int == ITEM_SKULL_TOKEN as libc::c_int
                       {
                        gSaveContext.inventory.questItems |=
                            gBitFlags[(item as libc::c_int -
                                           ITEM_SKULL_TOKEN as libc::c_int +
                                           QUEST_SKULL_TOKEN as libc::c_int)
                                          as usize];
                        gSaveContext.inventory.gsTokens += 1;
                        osSyncPrintf(b"\x1b[33m\x00" as *const u8 as
                                         *const libc::c_char);
                        // "N Coins = %x(%d)"
                        osSyncPrintf(b"\xef\xbc\xae\xe3\x82\xb3\xe3\x82\xa4\xe3\x83\xb3 = %x(%d)\n\x00"
                                         as *const u8 as *const libc::c_char,
                                     gSaveContext.inventory.questItems,
                                     gSaveContext.inventory.gsTokens as
                                         libc::c_int);
                        osSyncPrintf(b"\x1b[m\x00" as *const u8 as
                                         *const libc::c_char);
                        return ITEM_NONE as libc::c_int as u8_0
                    } else {
                        if item as libc::c_int >=
                               ITEM_SWORD_KOKIRI as libc::c_int &&
                               item as libc::c_int <=
                                   ITEM_SWORD_BGS as libc::c_int {
                            gSaveContext.inventory.equipment =
                                (gSaveContext.inventory.equipment as
                                     libc::c_uint |
                                     gBitFlags[(item as libc::c_int -
                                                    ITEM_SWORD_KOKIRI as
                                                        libc::c_int) as usize]
                                         <<
                                         gEquipShifts[EQUIP_SWORD as
                                                          libc::c_int as
                                                          usize] as
                                             libc::c_int) as u16_0;
                            if item as libc::c_int ==
                                   ITEM_SWORD_BGS as libc::c_int {
                                gSaveContext.swordHealth =
                                    8 as libc::c_int as u16_0;
                                if (gSaveContext.inventory.equipment as
                                        libc::c_int &
                                        gEquipMasks[EQUIP_SWORD as libc::c_int
                                                        as usize] as
                                            libc::c_int) >>
                                       gEquipShifts[EQUIP_SWORD as libc::c_int
                                                        as usize] as
                                           libc::c_int == 0xf as libc::c_int {
                                    gSaveContext.inventory.equipment =
                                        (gSaveContext.inventory.equipment as
                                             libc::c_int ^
                                             (8 as libc::c_int) <<
                                                 gEquipShifts[EQUIP_SWORD as
                                                                  libc::c_int
                                                                  as usize] as
                                                     libc::c_int) as u16_0;
                                    if gSaveContext.equips.buttonItems[0 as
                                                                           libc::c_int
                                                                           as
                                                                           usize]
                                           as libc::c_int ==
                                           ITEM_SWORD_KNIFE as libc::c_int {
                                        gSaveContext.equips.buttonItems[0 as
                                                                            libc::c_int
                                                                            as
                                                                            usize]
                                            =
                                            ITEM_SWORD_BGS as libc::c_int as
                                                u8_0;
                                        Interface_LoadItemIcon1(globalCtx,
                                                                0 as
                                                                    libc::c_int
                                                                    as u16_0);
                                    }
                                }
                            } else if item as libc::c_int ==
                                          ITEM_SWORD_MASTER as libc::c_int {
                                gSaveContext.equips.buttonItems[0 as
                                                                    libc::c_int
                                                                    as usize]
                                    =
                                    ITEM_SWORD_MASTER as libc::c_int as u8_0;
                                gSaveContext.equips.equipment =
                                    (gSaveContext.equips.equipment as
                                         libc::c_int & 0xfff0 as libc::c_int)
                                        as u16_0;
                                gSaveContext.equips.equipment =
                                    (gSaveContext.equips.equipment as
                                         libc::c_int | 0x2 as libc::c_int) as
                                        u16_0;
                                Interface_LoadItemIcon1(globalCtx,
                                                        0 as libc::c_int as
                                                            u16_0);
                            }
                            return ITEM_NONE as libc::c_int as u8_0
                        } else {
                            if item as libc::c_int >=
                                   ITEM_SHIELD_DEKU as libc::c_int &&
                                   item as libc::c_int <=
                                       ITEM_SHIELD_MIRROR as libc::c_int {
                                gSaveContext.inventory.equipment =
                                    (gSaveContext.inventory.equipment as
                                         libc::c_uint |
                                         gBitFlags[(item as libc::c_int -
                                                        ITEM_SHIELD_DEKU as
                                                            libc::c_int) as
                                                       usize] <<
                                             gEquipShifts[EQUIP_SHIELD as
                                                              libc::c_int as
                                                              usize] as
                                                 libc::c_int) as u16_0;
                                return ITEM_NONE as libc::c_int as u8_0
                            } else {
                                if item as libc::c_int >=
                                       ITEM_TUNIC_KOKIRI as libc::c_int &&
                                       item as libc::c_int <=
                                           ITEM_TUNIC_ZORA as libc::c_int {
                                    gSaveContext.inventory.equipment =
                                        (gSaveContext.inventory.equipment as
                                             libc::c_uint |
                                             gBitFlags[(item as libc::c_int -
                                                            ITEM_TUNIC_KOKIRI
                                                                as
                                                                libc::c_int)
                                                           as usize] <<
                                                 gEquipShifts[EQUIP_TUNIC as
                                                                  libc::c_int
                                                                  as usize] as
                                                     libc::c_int) as u16_0;
                                    return ITEM_NONE as libc::c_int as u8_0
                                } else {
                                    if item as libc::c_int >=
                                           ITEM_BOOTS_KOKIRI as libc::c_int &&
                                           item as libc::c_int <=
                                               ITEM_BOOTS_HOVER as libc::c_int
                                       {
                                        gSaveContext.inventory.equipment =
                                            (gSaveContext.inventory.equipment
                                                 as libc::c_uint |
                                                 gBitFlags[(item as
                                                                libc::c_int -
                                                                ITEM_BOOTS_KOKIRI
                                                                    as
                                                                    libc::c_int)
                                                               as usize] <<
                                                     gEquipShifts[EQUIP_BOOTS
                                                                      as
                                                                      libc::c_int
                                                                      as
                                                                      usize]
                                                         as libc::c_int) as
                                                u16_0;
                                        return ITEM_NONE as libc::c_int as
                                                   u8_0
                                    } else {
                                        if item as libc::c_int ==
                                               ITEM_KEY_BOSS as libc::c_int ||
                                               item as libc::c_int ==
                                                   ITEM_COMPASS as libc::c_int
                                               ||
                                               item as libc::c_int ==
                                                   ITEM_DUNGEON_MAP as
                                                       libc::c_int {
                                            gSaveContext.inventory.dungeonItems[gSaveContext.mapIndex
                                                                                    as
                                                                                    usize]
                                                =
                                                (gSaveContext.inventory.dungeonItems[gSaveContext.mapIndex
                                                                                         as
                                                                                         usize]
                                                     as libc::c_uint |
                                                     gBitFlags[(item as
                                                                    libc::c_int
                                                                    -
                                                                    ITEM_KEY_BOSS
                                                                        as
                                                                        libc::c_int)
                                                                   as usize])
                                                    as u8_0;
                                            return ITEM_NONE as libc::c_int as
                                                       u8_0
                                        } else {
                                            if item as libc::c_int ==
                                                   ITEM_KEY_SMALL as
                                                       libc::c_int {
                                                if (gSaveContext.inventory.dungeonKeys[gSaveContext.mapIndex
                                                                                           as
                                                                                           usize]
                                                        as libc::c_int) <
                                                       0 as libc::c_int {
                                                    gSaveContext.inventory.dungeonKeys[gSaveContext.mapIndex
                                                                                           as
                                                                                           usize]
                                                        =
                                                        1 as libc::c_int as
                                                            s8;
                                                    return ITEM_NONE as
                                                               libc::c_int as
                                                               u8_0
                                                } else {
                                                    gSaveContext.inventory.dungeonKeys[gSaveContext.mapIndex
                                                                                           as
                                                                                           usize]
                                                        += 1;
                                                    return ITEM_NONE as
                                                               libc::c_int as
                                                               u8_0
                                                }
                                            } else {
                                                if item as libc::c_int ==
                                                       ITEM_QUIVER_30 as
                                                           libc::c_int ||
                                                       item as libc::c_int ==
                                                           ITEM_BOW as
                                                               libc::c_int {
                                                    if (gSaveContext.inventory.upgrades
                                                            &
                                                            gUpgradeMasks[UPG_QUIVER
                                                                              as
                                                                              libc::c_int
                                                                              as
                                                                              usize])
                                                           as s32 >>
                                                           gUpgradeShifts[UPG_QUIVER
                                                                              as
                                                                              libc::c_int
                                                                              as
                                                                              usize]
                                                               as libc::c_int
                                                           == 0 as libc::c_int
                                                       {
                                                        Inventory_ChangeUpgrade(UPG_QUIVER
                                                                                    as
                                                                                    libc::c_int
                                                                                    as
                                                                                    s16,
                                                                                1
                                                                                    as
                                                                                    libc::c_int
                                                                                    as
                                                                                    s16);
                                                        gSaveContext.inventory.items[gItemSlots[ITEM_BOW
                                                                                                    as
                                                                                                    libc::c_int
                                                                                                    as
                                                                                                    usize]
                                                                                         as
                                                                                         usize]
                                                            =
                                                            ITEM_BOW as
                                                                libc::c_int as
                                                                u8_0;
                                                        gSaveContext.inventory.ammo[gItemSlots[ITEM_BOW
                                                                                                   as
                                                                                                   libc::c_int
                                                                                                   as
                                                                                                   usize]
                                                                                        as
                                                                                        usize]
                                                            =
                                                            gUpgradeCapacities[UPG_QUIVER
                                                                                   as
                                                                                   libc::c_int
                                                                                   as
                                                                                   usize][1
                                                                                              as
                                                                                              libc::c_int
                                                                                              as
                                                                                              usize]
                                                                as s8;
                                                        return ITEM_NONE as
                                                                   libc::c_int
                                                                   as u8_0
                                                    } else {
                                                        gSaveContext.inventory.ammo[gItemSlots[ITEM_BOW
                                                                                                   as
                                                                                                   libc::c_int
                                                                                                   as
                                                                                                   usize]
                                                                                        as
                                                                                        usize]
                                                            += 1;
                                                        if gSaveContext.inventory.ammo[gItemSlots[ITEM_BOW
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      usize]
                                                                                           as
                                                                                           usize]
                                                               as libc::c_int
                                                               >
                                                               gUpgradeCapacities[UPG_QUIVER
                                                                                      as
                                                                                      libc::c_int
                                                                                      as
                                                                                      usize][((gSaveContext.inventory.upgrades
                                                                                                   &
                                                                                                   gUpgradeMasks[UPG_QUIVER
                                                                                                                     as
                                                                                                                     libc::c_int
                                                                                                                     as
                                                                                                                     usize])
                                                                                                  as
                                                                                                  s32
                                                                                                  >>
                                                                                                  gUpgradeShifts[UPG_QUIVER
                                                                                                                     as
                                                                                                                     libc::c_int
                                                                                                                     as
                                                                                                                     usize]
                                                                                                      as
                                                                                                      libc::c_int)
                                                                                                 as
                                                                                                 usize]
                                                                   as
                                                                   libc::c_int
                                                           {
                                                            gSaveContext.inventory.ammo[gItemSlots[ITEM_BOW
                                                                                                       as
                                                                                                       libc::c_int
                                                                                                       as
                                                                                                       usize]
                                                                                            as
                                                                                            usize]
                                                                =
                                                                gUpgradeCapacities[UPG_QUIVER
                                                                                       as
                                                                                       libc::c_int
                                                                                       as
                                                                                       usize][((gSaveContext.inventory.upgrades
                                                                                                    &
                                                                                                    gUpgradeMasks[UPG_QUIVER
                                                                                                                      as
                                                                                                                      libc::c_int
                                                                                                                      as
                                                                                                                      usize])
                                                                                                   as
                                                                                                   s32
                                                                                                   >>
                                                                                                   gUpgradeShifts[UPG_QUIVER
                                                                                                                      as
                                                                                                                      libc::c_int
                                                                                                                      as
                                                                                                                      usize]
                                                                                                       as
                                                                                                       libc::c_int)
                                                                                                  as
                                                                                                  usize]
                                                                    as s8
                                                        }
                                                    }
                                                } else if item as libc::c_int
                                                              ==
                                                              ITEM_QUIVER_40
                                                                  as
                                                                  libc::c_int
                                                 {
                                                    Inventory_ChangeUpgrade(UPG_QUIVER
                                                                                as
                                                                                libc::c_int
                                                                                as
                                                                                s16,
                                                                            2
                                                                                as
                                                                                libc::c_int
                                                                                as
                                                                                s16);
                                                    gSaveContext.inventory.ammo[gItemSlots[ITEM_BOW
                                                                                               as
                                                                                               libc::c_int
                                                                                               as
                                                                                               usize]
                                                                                    as
                                                                                    usize]
                                                        =
                                                        gUpgradeCapacities[UPG_QUIVER
                                                                               as
                                                                               libc::c_int
                                                                               as
                                                                               usize][2
                                                                                          as
                                                                                          libc::c_int
                                                                                          as
                                                                                          usize]
                                                            as s8;
                                                    return ITEM_NONE as
                                                               libc::c_int as
                                                               u8_0
                                                } else {
                                                    if item as libc::c_int ==
                                                           ITEM_QUIVER_50 as
                                                               libc::c_int {
                                                        Inventory_ChangeUpgrade(UPG_QUIVER
                                                                                    as
                                                                                    libc::c_int
                                                                                    as
                                                                                    s16,
                                                                                3
                                                                                    as
                                                                                    libc::c_int
                                                                                    as
                                                                                    s16);
                                                        gSaveContext.inventory.ammo[gItemSlots[ITEM_BOW
                                                                                                   as
                                                                                                   libc::c_int
                                                                                                   as
                                                                                                   usize]
                                                                                        as
                                                                                        usize]
                                                            =
                                                            gUpgradeCapacities[UPG_QUIVER
                                                                                   as
                                                                                   libc::c_int
                                                                                   as
                                                                                   usize][3
                                                                                              as
                                                                                              libc::c_int
                                                                                              as
                                                                                              usize]
                                                                as s8;
                                                        return ITEM_NONE as
                                                                   libc::c_int
                                                                   as u8_0
                                                    } else {
                                                        if item as libc::c_int
                                                               ==
                                                               ITEM_BULLET_BAG_40
                                                                   as
                                                                   libc::c_int
                                                           {
                                                            Inventory_ChangeUpgrade(UPG_BULLET_BAG
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        s16,
                                                                                    2
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        s16);
                                                            gSaveContext.inventory.ammo[gItemSlots[ITEM_SLINGSHOT
                                                                                                       as
                                                                                                       libc::c_int
                                                                                                       as
                                                                                                       usize]
                                                                                            as
                                                                                            usize]
                                                                =
                                                                gUpgradeCapacities[UPG_BULLET_BAG
                                                                                       as
                                                                                       libc::c_int
                                                                                       as
                                                                                       usize][2
                                                                                                  as
                                                                                                  libc::c_int
                                                                                                  as
                                                                                                  usize]
                                                                    as s8;
                                                            return ITEM_NONE
                                                                       as
                                                                       libc::c_int
                                                                       as u8_0
                                                        } else {
                                                            if item as
                                                                   libc::c_int
                                                                   ==
                                                                   ITEM_BULLET_BAG_50
                                                                       as
                                                                       libc::c_int
                                                               {
                                                                Inventory_ChangeUpgrade(UPG_BULLET_BAG
                                                                                            as
                                                                                            libc::c_int
                                                                                            as
                                                                                            s16,
                                                                                        3
                                                                                            as
                                                                                            libc::c_int
                                                                                            as
                                                                                            s16);
                                                                gSaveContext.inventory.ammo[gItemSlots[ITEM_SLINGSHOT
                                                                                                           as
                                                                                                           libc::c_int
                                                                                                           as
                                                                                                           usize]
                                                                                                as
                                                                                                usize]
                                                                    =
                                                                    gUpgradeCapacities[UPG_BULLET_BAG
                                                                                           as
                                                                                           libc::c_int
                                                                                           as
                                                                                           usize][3
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      usize]
                                                                        as s8;
                                                                return ITEM_NONE
                                                                           as
                                                                           libc::c_int
                                                                           as
                                                                           u8_0
                                                            } else {
                                                                if item as
                                                                       libc::c_int
                                                                       ==
                                                                       ITEM_BOMB_BAG_20
                                                                           as
                                                                           libc::c_int
                                                                   {
                                                                    if (gSaveContext.inventory.upgrades
                                                                            &
                                                                            gUpgradeMasks[UPG_BOMB_BAG
                                                                                              as
                                                                                              libc::c_int
                                                                                              as
                                                                                              usize])
                                                                           as
                                                                           s32
                                                                           >>
                                                                           gUpgradeShifts[UPG_BOMB_BAG
                                                                                              as
                                                                                              libc::c_int
                                                                                              as
                                                                                              usize]
                                                                               as
                                                                               libc::c_int
                                                                           ==
                                                                           0
                                                                               as
                                                                               libc::c_int
                                                                       {
                                                                        Inventory_ChangeUpgrade(UPG_BOMB_BAG
                                                                                                    as
                                                                                                    libc::c_int
                                                                                                    as
                                                                                                    s16,
                                                                                                1
                                                                                                    as
                                                                                                    libc::c_int
                                                                                                    as
                                                                                                    s16);
                                                                        gSaveContext.inventory.items[gItemSlots[ITEM_BOMB
                                                                                                                    as
                                                                                                                    libc::c_int
                                                                                                                    as
                                                                                                                    usize]
                                                                                                         as
                                                                                                         usize]
                                                                            =
                                                                            ITEM_BOMB
                                                                                as
                                                                                libc::c_int
                                                                                as
                                                                                u8_0;
                                                                        gSaveContext.inventory.ammo[gItemSlots[ITEM_BOMB
                                                                                                                   as
                                                                                                                   libc::c_int
                                                                                                                   as
                                                                                                                   usize]
                                                                                                        as
                                                                                                        usize]
                                                                            =
                                                                            gUpgradeCapacities[UPG_BOMB_BAG
                                                                                                   as
                                                                                                   libc::c_int
                                                                                                   as
                                                                                                   usize][1
                                                                                                              as
                                                                                                              libc::c_int
                                                                                                              as
                                                                                                              usize]
                                                                                as
                                                                                s8;
                                                                        return ITEM_NONE
                                                                                   as
                                                                                   libc::c_int
                                                                                   as
                                                                                   u8_0
                                                                    } else {
                                                                        gSaveContext.inventory.ammo[gItemSlots[ITEM_BOMB
                                                                                                                   as
                                                                                                                   libc::c_int
                                                                                                                   as
                                                                                                                   usize]
                                                                                                        as
                                                                                                        usize]
                                                                            +=
                                                                            1;
                                                                        if gSaveContext.inventory.ammo[gItemSlots[ITEM_BOMB
                                                                                                                      as
                                                                                                                      libc::c_int
                                                                                                                      as
                                                                                                                      usize]
                                                                                                           as
                                                                                                           usize]
                                                                               as
                                                                               libc::c_int
                                                                               >
                                                                               gUpgradeCapacities[UPG_BOMB_BAG
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      usize][((gSaveContext.inventory.upgrades
                                                                                                                   &
                                                                                                                   gUpgradeMasks[UPG_BOMB_BAG
                                                                                                                                     as
                                                                                                                                     libc::c_int
                                                                                                                                     as
                                                                                                                                     usize])
                                                                                                                  as
                                                                                                                  s32
                                                                                                                  >>
                                                                                                                  gUpgradeShifts[UPG_BOMB_BAG
                                                                                                                                     as
                                                                                                                                     libc::c_int
                                                                                                                                     as
                                                                                                                                     usize]
                                                                                                                      as
                                                                                                                      libc::c_int)
                                                                                                                 as
                                                                                                                 usize]
                                                                                   as
                                                                                   libc::c_int
                                                                           {
                                                                            gSaveContext.inventory.ammo[gItemSlots[ITEM_BOMB
                                                                                                                       as
                                                                                                                       libc::c_int
                                                                                                                       as
                                                                                                                       usize]
                                                                                                            as
                                                                                                            usize]
                                                                                =
                                                                                gUpgradeCapacities[UPG_BOMB_BAG
                                                                                                       as
                                                                                                       libc::c_int
                                                                                                       as
                                                                                                       usize][((gSaveContext.inventory.upgrades
                                                                                                                    &
                                                                                                                    gUpgradeMasks[UPG_BOMB_BAG
                                                                                                                                      as
                                                                                                                                      libc::c_int
                                                                                                                                      as
                                                                                                                                      usize])
                                                                                                                   as
                                                                                                                   s32
                                                                                                                   >>
                                                                                                                   gUpgradeShifts[UPG_BOMB_BAG
                                                                                                                                      as
                                                                                                                                      libc::c_int
                                                                                                                                      as
                                                                                                                                      usize]
                                                                                                                       as
                                                                                                                       libc::c_int)
                                                                                                                  as
                                                                                                                  usize]
                                                                                    as
                                                                                    s8
                                                                        }
                                                                    }
                                                                } else if item
                                                                              as
                                                                              libc::c_int
                                                                              ==
                                                                              ITEM_BOMB_BAG_30
                                                                                  as
                                                                                  libc::c_int
                                                                 {
                                                                    Inventory_ChangeUpgrade(UPG_BOMB_BAG
                                                                                                as
                                                                                                libc::c_int
                                                                                                as
                                                                                                s16,
                                                                                            2
                                                                                                as
                                                                                                libc::c_int
                                                                                                as
                                                                                                s16);
                                                                    gSaveContext.inventory.ammo[gItemSlots[ITEM_BOMB
                                                                                                               as
                                                                                                               libc::c_int
                                                                                                               as
                                                                                                               usize]
                                                                                                    as
                                                                                                    usize]
                                                                        =
                                                                        gUpgradeCapacities[UPG_BOMB_BAG
                                                                                               as
                                                                                               libc::c_int
                                                                                               as
                                                                                               usize][2
                                                                                                          as
                                                                                                          libc::c_int
                                                                                                          as
                                                                                                          usize]
                                                                            as
                                                                            s8;
                                                                    return ITEM_NONE
                                                                               as
                                                                               libc::c_int
                                                                               as
                                                                               u8_0
                                                                } else {
                                                                    if item as
                                                                           libc::c_int
                                                                           ==
                                                                           ITEM_BOMB_BAG_40
                                                                               as
                                                                               libc::c_int
                                                                       {
                                                                        Inventory_ChangeUpgrade(UPG_BOMB_BAG
                                                                                                    as
                                                                                                    libc::c_int
                                                                                                    as
                                                                                                    s16,
                                                                                                3
                                                                                                    as
                                                                                                    libc::c_int
                                                                                                    as
                                                                                                    s16);
                                                                        gSaveContext.inventory.ammo[gItemSlots[ITEM_BOMB
                                                                                                                   as
                                                                                                                   libc::c_int
                                                                                                                   as
                                                                                                                   usize]
                                                                                                        as
                                                                                                        usize]
                                                                            =
                                                                            gUpgradeCapacities[UPG_BOMB_BAG
                                                                                                   as
                                                                                                   libc::c_int
                                                                                                   as
                                                                                                   usize][3
                                                                                                              as
                                                                                                              libc::c_int
                                                                                                              as
                                                                                                              usize]
                                                                                as
                                                                                s8;
                                                                        return ITEM_NONE
                                                                                   as
                                                                                   libc::c_int
                                                                                   as
                                                                                   u8_0
                                                                    } else {
                                                                        if item
                                                                               as
                                                                               libc::c_int
                                                                               ==
                                                                               ITEM_BRACELET
                                                                                   as
                                                                                   libc::c_int
                                                                           {
                                                                            Inventory_ChangeUpgrade(UPG_STRENGTH
                                                                                                        as
                                                                                                        libc::c_int
                                                                                                        as
                                                                                                        s16,
                                                                                                    1
                                                                                                        as
                                                                                                        libc::c_int
                                                                                                        as
                                                                                                        s16);
                                                                            return ITEM_NONE
                                                                                       as
                                                                                       libc::c_int
                                                                                       as
                                                                                       u8_0
                                                                        } else {
                                                                            if item
                                                                                   as
                                                                                   libc::c_int
                                                                                   ==
                                                                                   ITEM_GAUNTLETS_SILVER
                                                                                       as
                                                                                       libc::c_int
                                                                               {
                                                                                Inventory_ChangeUpgrade(UPG_STRENGTH
                                                                                                            as
                                                                                                            libc::c_int
                                                                                                            as
                                                                                                            s16,
                                                                                                        2
                                                                                                            as
                                                                                                            libc::c_int
                                                                                                            as
                                                                                                            s16);
                                                                                return ITEM_NONE
                                                                                           as
                                                                                           libc::c_int
                                                                                           as
                                                                                           u8_0
                                                                            } else {
                                                                                if item
                                                                                       as
                                                                                       libc::c_int
                                                                                       ==
                                                                                       ITEM_GAUNTLETS_GOLD
                                                                                           as
                                                                                           libc::c_int
                                                                                   {
                                                                                    Inventory_ChangeUpgrade(UPG_STRENGTH
                                                                                                                as
                                                                                                                libc::c_int
                                                                                                                as
                                                                                                                s16,
                                                                                                            3
                                                                                                                as
                                                                                                                libc::c_int
                                                                                                                as
                                                                                                                s16);
                                                                                    return ITEM_NONE
                                                                                               as
                                                                                               libc::c_int
                                                                                               as
                                                                                               u8_0
                                                                                } else {
                                                                                    if item
                                                                                           as
                                                                                           libc::c_int
                                                                                           ==
                                                                                           ITEM_SCALE_SILVER
                                                                                               as
                                                                                               libc::c_int
                                                                                       {
                                                                                        Inventory_ChangeUpgrade(UPG_SCALE
                                                                                                                    as
                                                                                                                    libc::c_int
                                                                                                                    as
                                                                                                                    s16,
                                                                                                                1
                                                                                                                    as
                                                                                                                    libc::c_int
                                                                                                                    as
                                                                                                                    s16);
                                                                                        return ITEM_NONE
                                                                                                   as
                                                                                                   libc::c_int
                                                                                                   as
                                                                                                   u8_0
                                                                                    } else {
                                                                                        if item
                                                                                               as
                                                                                               libc::c_int
                                                                                               ==
                                                                                               ITEM_SCALE_GOLDEN
                                                                                                   as
                                                                                                   libc::c_int
                                                                                           {
                                                                                            Inventory_ChangeUpgrade(UPG_SCALE
                                                                                                                        as
                                                                                                                        libc::c_int
                                                                                                                        as
                                                                                                                        s16,
                                                                                                                    2
                                                                                                                        as
                                                                                                                        libc::c_int
                                                                                                                        as
                                                                                                                        s16);
                                                                                            return ITEM_NONE
                                                                                                       as
                                                                                                       libc::c_int
                                                                                                       as
                                                                                                       u8_0
                                                                                        } else {
                                                                                            if item
                                                                                                   as
                                                                                                   libc::c_int
                                                                                                   ==
                                                                                                   ITEM_WALLET_ADULT
                                                                                                       as
                                                                                                       libc::c_int
                                                                                               {
                                                                                                Inventory_ChangeUpgrade(UPG_WALLET
                                                                                                                            as
                                                                                                                            libc::c_int
                                                                                                                            as
                                                                                                                            s16,
                                                                                                                        1
                                                                                                                            as
                                                                                                                            libc::c_int
                                                                                                                            as
                                                                                                                            s16);
                                                                                                return ITEM_NONE
                                                                                                           as
                                                                                                           libc::c_int
                                                                                                           as
                                                                                                           u8_0
                                                                                            } else {
                                                                                                if item
                                                                                                       as
                                                                                                       libc::c_int
                                                                                                       ==
                                                                                                       ITEM_WALLET_GIANT
                                                                                                           as
                                                                                                           libc::c_int
                                                                                                   {
                                                                                                    Inventory_ChangeUpgrade(UPG_WALLET
                                                                                                                                as
                                                                                                                                libc::c_int
                                                                                                                                as
                                                                                                                                s16,
                                                                                                                            2
                                                                                                                                as
                                                                                                                                libc::c_int
                                                                                                                                as
                                                                                                                                s16);
                                                                                                    return ITEM_NONE
                                                                                                               as
                                                                                                               libc::c_int
                                                                                                               as
                                                                                                               u8_0
                                                                                                } else {
                                                                                                    if item
                                                                                                           as
                                                                                                           libc::c_int
                                                                                                           ==
                                                                                                           ITEM_STICK_UPGRADE_20
                                                                                                               as
                                                                                                               libc::c_int
                                                                                                       {
                                                                                                        if gSaveContext.inventory.items[slot
                                                                                                                                            as
                                                                                                                                            usize]
                                                                                                               as
                                                                                                               libc::c_int
                                                                                                               ==
                                                                                                               ITEM_NONE
                                                                                                                   as
                                                                                                                   libc::c_int
                                                                                                           {
                                                                                                            gSaveContext.inventory.items[gItemSlots[ITEM_STICK
                                                                                                                                                        as
                                                                                                                                                        libc::c_int
                                                                                                                                                        as
                                                                                                                                                        usize]
                                                                                                                                             as
                                                                                                                                             usize]
                                                                                                                =
                                                                                                                ITEM_STICK
                                                                                                                    as
                                                                                                                    libc::c_int
                                                                                                                    as
                                                                                                                    u8_0
                                                                                                        }
                                                                                                        Inventory_ChangeUpgrade(UPG_STICKS
                                                                                                                                    as
                                                                                                                                    libc::c_int
                                                                                                                                    as
                                                                                                                                    s16,
                                                                                                                                2
                                                                                                                                    as
                                                                                                                                    libc::c_int
                                                                                                                                    as
                                                                                                                                    s16);
                                                                                                        gSaveContext.inventory.ammo[gItemSlots[ITEM_STICK
                                                                                                                                                   as
                                                                                                                                                   libc::c_int
                                                                                                                                                   as
                                                                                                                                                   usize]
                                                                                                                                        as
                                                                                                                                        usize]
                                                                                                            =
                                                                                                            gUpgradeCapacities[UPG_STICKS
                                                                                                                                   as
                                                                                                                                   libc::c_int
                                                                                                                                   as
                                                                                                                                   usize][2
                                                                                                                                              as
                                                                                                                                              libc::c_int
                                                                                                                                              as
                                                                                                                                              usize]
                                                                                                                as
                                                                                                                s8;
                                                                                                        return ITEM_NONE
                                                                                                                   as
                                                                                                                   libc::c_int
                                                                                                                   as
                                                                                                                   u8_0
                                                                                                    } else {
                                                                                                        if item
                                                                                                               as
                                                                                                               libc::c_int
                                                                                                               ==
                                                                                                               ITEM_STICK_UPGRADE_30
                                                                                                                   as
                                                                                                                   libc::c_int
                                                                                                           {
                                                                                                            if gSaveContext.inventory.items[slot
                                                                                                                                                as
                                                                                                                                                usize]
                                                                                                                   as
                                                                                                                   libc::c_int
                                                                                                                   ==
                                                                                                                   ITEM_NONE
                                                                                                                       as
                                                                                                                       libc::c_int
                                                                                                               {
                                                                                                                gSaveContext.inventory.items[gItemSlots[ITEM_STICK
                                                                                                                                                            as
                                                                                                                                                            libc::c_int
                                                                                                                                                            as
                                                                                                                                                            usize]
                                                                                                                                                 as
                                                                                                                                                 usize]
                                                                                                                    =
                                                                                                                    ITEM_STICK
                                                                                                                        as
                                                                                                                        libc::c_int
                                                                                                                        as
                                                                                                                        u8_0
                                                                                                            }
                                                                                                            Inventory_ChangeUpgrade(UPG_STICKS
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                        as
                                                                                                                                        s16,
                                                                                                                                    3
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                        as
                                                                                                                                        s16);
                                                                                                            gSaveContext.inventory.ammo[gItemSlots[ITEM_STICK
                                                                                                                                                       as
                                                                                                                                                       libc::c_int
                                                                                                                                                       as
                                                                                                                                                       usize]
                                                                                                                                            as
                                                                                                                                            usize]
                                                                                                                =
                                                                                                                gUpgradeCapacities[UPG_STICKS
                                                                                                                                       as
                                                                                                                                       libc::c_int
                                                                                                                                       as
                                                                                                                                       usize][3
                                                                                                                                                  as
                                                                                                                                                  libc::c_int
                                                                                                                                                  as
                                                                                                                                                  usize]
                                                                                                                    as
                                                                                                                    s8;
                                                                                                            return ITEM_NONE
                                                                                                                       as
                                                                                                                       libc::c_int
                                                                                                                       as
                                                                                                                       u8_0
                                                                                                        } else {
                                                                                                            if item
                                                                                                                   as
                                                                                                                   libc::c_int
                                                                                                                   ==
                                                                                                                   ITEM_NUT_UPGRADE_30
                                                                                                                       as
                                                                                                                       libc::c_int
                                                                                                               {
                                                                                                                if gSaveContext.inventory.items[slot
                                                                                                                                                    as
                                                                                                                                                    usize]
                                                                                                                       as
                                                                                                                       libc::c_int
                                                                                                                       ==
                                                                                                                       ITEM_NONE
                                                                                                                           as
                                                                                                                           libc::c_int
                                                                                                                   {
                                                                                                                    gSaveContext.inventory.items[gItemSlots[ITEM_NUT
                                                                                                                                                                as
                                                                                                                                                                libc::c_int
                                                                                                                                                                as
                                                                                                                                                                usize]
                                                                                                                                                     as
                                                                                                                                                     usize]
                                                                                                                        =
                                                                                                                        ITEM_NUT
                                                                                                                            as
                                                                                                                            libc::c_int
                                                                                                                            as
                                                                                                                            u8_0
                                                                                                                }
                                                                                                                Inventory_ChangeUpgrade(UPG_NUTS
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            as
                                                                                                                                            s16,
                                                                                                                                        2
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            as
                                                                                                                                            s16);
                                                                                                                gSaveContext.inventory.ammo[gItemSlots[ITEM_NUT
                                                                                                                                                           as
                                                                                                                                                           libc::c_int
                                                                                                                                                           as
                                                                                                                                                           usize]
                                                                                                                                                as
                                                                                                                                                usize]
                                                                                                                    =
                                                                                                                    gUpgradeCapacities[UPG_NUTS
                                                                                                                                           as
                                                                                                                                           libc::c_int
                                                                                                                                           as
                                                                                                                                           usize][2
                                                                                                                                                      as
                                                                                                                                                      libc::c_int
                                                                                                                                                      as
                                                                                                                                                      usize]
                                                                                                                        as
                                                                                                                        s8;
                                                                                                                return ITEM_NONE
                                                                                                                           as
                                                                                                                           libc::c_int
                                                                                                                           as
                                                                                                                           u8_0
                                                                                                            } else {
                                                                                                                if item
                                                                                                                       as
                                                                                                                       libc::c_int
                                                                                                                       ==
                                                                                                                       ITEM_NUT_UPGRADE_40
                                                                                                                           as
                                                                                                                           libc::c_int
                                                                                                                   {
                                                                                                                    if gSaveContext.inventory.items[slot
                                                                                                                                                        as
                                                                                                                                                        usize]
                                                                                                                           as
                                                                                                                           libc::c_int
                                                                                                                           ==
                                                                                                                           ITEM_NONE
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                       {
                                                                                                                        gSaveContext.inventory.items[gItemSlots[ITEM_NUT
                                                                                                                                                                    as
                                                                                                                                                                    libc::c_int
                                                                                                                                                                    as
                                                                                                                                                                    usize]
                                                                                                                                                         as
                                                                                                                                                         usize]
                                                                                                                            =
                                                                                                                            ITEM_NUT
                                                                                                                                as
                                                                                                                                libc::c_int
                                                                                                                                as
                                                                                                                                u8_0
                                                                                                                    }
                                                                                                                    Inventory_ChangeUpgrade(UPG_NUTS
                                                                                                                                                as
                                                                                                                                                libc::c_int
                                                                                                                                                as
                                                                                                                                                s16,
                                                                                                                                            3
                                                                                                                                                as
                                                                                                                                                libc::c_int
                                                                                                                                                as
                                                                                                                                                s16);
                                                                                                                    gSaveContext.inventory.ammo[gItemSlots[ITEM_NUT
                                                                                                                                                               as
                                                                                                                                                               libc::c_int
                                                                                                                                                               as
                                                                                                                                                               usize]
                                                                                                                                                    as
                                                                                                                                                    usize]
                                                                                                                        =
                                                                                                                        gUpgradeCapacities[UPG_NUTS
                                                                                                                                               as
                                                                                                                                               libc::c_int
                                                                                                                                               as
                                                                                                                                               usize][3
                                                                                                                                                          as
                                                                                                                                                          libc::c_int
                                                                                                                                                          as
                                                                                                                                                          usize]
                                                                                                                            as
                                                                                                                            s8;
                                                                                                                    return ITEM_NONE
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               u8_0
                                                                                                                } else {
                                                                                                                    if item
                                                                                                                           as
                                                                                                                           libc::c_int
                                                                                                                           ==
                                                                                                                           ITEM_LONGSHOT
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                       {
                                                                                                                        gSaveContext.inventory.items[gItemSlots[item
                                                                                                                                                                    as
                                                                                                                                                                    usize]
                                                                                                                                                         as
                                                                                                                                                         usize]
                                                                                                                            =
                                                                                                                            item;
                                                                                                                        i
                                                                                                                            =
                                                                                                                            1
                                                                                                                                as
                                                                                                                                libc::c_int
                                                                                                                                as
                                                                                                                                s16;
                                                                                                                        while (i
                                                                                                                                   as
                                                                                                                                   libc::c_int)
                                                                                                                                  <
                                                                                                                                  4
                                                                                                                                      as
                                                                                                                                      libc::c_int
                                                                                                                              {
                                                                                                                            if gSaveContext.equips.buttonItems[i
                                                                                                                                                                   as
                                                                                                                                                                   usize]
                                                                                                                                   as
                                                                                                                                   libc::c_int
                                                                                                                                   ==
                                                                                                                                   ITEM_HOOKSHOT
                                                                                                                                       as
                                                                                                                                       libc::c_int
                                                                                                                               {
                                                                                                                                gSaveContext.equips.buttonItems[i
                                                                                                                                                                    as
                                                                                                                                                                    usize]
                                                                                                                                    =
                                                                                                                                    ITEM_LONGSHOT
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                        as
                                                                                                                                        u8_0;
                                                                                                                                Interface_LoadItemIcon1(globalCtx,
                                                                                                                                                        i
                                                                                                                                                            as
                                                                                                                                                            u16_0);
                                                                                                                            }
                                                                                                                            i
                                                                                                                                +=
                                                                                                                                1
                                                                                                                        }
                                                                                                                        return ITEM_NONE
                                                                                                                                   as
                                                                                                                                   libc::c_int
                                                                                                                                   as
                                                                                                                                   u8_0
                                                                                                                    } else {
                                                                                                                        if item
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               ==
                                                                                                                               ITEM_STICK
                                                                                                                                   as
                                                                                                                                   libc::c_int
                                                                                                                           {
                                                                                                                            if gSaveContext.inventory.items[slot
                                                                                                                                                                as
                                                                                                                                                                usize]
                                                                                                                                   as
                                                                                                                                   libc::c_int
                                                                                                                                   ==
                                                                                                                                   ITEM_NONE
                                                                                                                                       as
                                                                                                                                       libc::c_int
                                                                                                                               {
                                                                                                                                Inventory_ChangeUpgrade(UPG_STICKS
                                                                                                                                                            as
                                                                                                                                                            libc::c_int
                                                                                                                                                            as
                                                                                                                                                            s16,
                                                                                                                                                        1
                                                                                                                                                            as
                                                                                                                                                            libc::c_int
                                                                                                                                                            as
                                                                                                                                                            s16);
                                                                                                                                gSaveContext.inventory.ammo[gItemSlots[ITEM_STICK
                                                                                                                                                                           as
                                                                                                                                                                           libc::c_int
                                                                                                                                                                           as
                                                                                                                                                                           usize]
                                                                                                                                                                as
                                                                                                                                                                usize]
                                                                                                                                    =
                                                                                                                                    1
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                        as
                                                                                                                                        s8
                                                                                                                            } else {
                                                                                                                                gSaveContext.inventory.ammo[gItemSlots[ITEM_STICK
                                                                                                                                                                           as
                                                                                                                                                                           libc::c_int
                                                                                                                                                                           as
                                                                                                                                                                           usize]
                                                                                                                                                                as
                                                                                                                                                                usize]
                                                                                                                                    +=
                                                                                                                                    1;
                                                                                                                                if gSaveContext.inventory.ammo[gItemSlots[ITEM_STICK
                                                                                                                                                                              as
                                                                                                                                                                              libc::c_int
                                                                                                                                                                              as
                                                                                                                                                                              usize]
                                                                                                                                                                   as
                                                                                                                                                                   usize]
                                                                                                                                       as
                                                                                                                                       libc::c_int
                                                                                                                                       >
                                                                                                                                       gUpgradeCapacities[UPG_STICKS
                                                                                                                                                              as
                                                                                                                                                              libc::c_int
                                                                                                                                                              as
                                                                                                                                                              usize][((gSaveContext.inventory.upgrades
                                                                                                                                                                           &
                                                                                                                                                                           gUpgradeMasks[UPG_STICKS
                                                                                                                                                                                             as
                                                                                                                                                                                             libc::c_int
                                                                                                                                                                                             as
                                                                                                                                                                                             usize])
                                                                                                                                                                          as
                                                                                                                                                                          s32
                                                                                                                                                                          >>
                                                                                                                                                                          gUpgradeShifts[UPG_STICKS
                                                                                                                                                                                             as
                                                                                                                                                                                             libc::c_int
                                                                                                                                                                                             as
                                                                                                                                                                                             usize]
                                                                                                                                                                              as
                                                                                                                                                                              libc::c_int)
                                                                                                                                                                         as
                                                                                                                                                                         usize]
                                                                                                                                           as
                                                                                                                                           libc::c_int
                                                                                                                                   {
                                                                                                                                    gSaveContext.inventory.ammo[gItemSlots[ITEM_STICK
                                                                                                                                                                               as
                                                                                                                                                                               libc::c_int
                                                                                                                                                                               as
                                                                                                                                                                               usize]
                                                                                                                                                                    as
                                                                                                                                                                    usize]
                                                                                                                                        =
                                                                                                                                        gUpgradeCapacities[UPG_STICKS
                                                                                                                                                               as
                                                                                                                                                               libc::c_int
                                                                                                                                                               as
                                                                                                                                                               usize][((gSaveContext.inventory.upgrades
                                                                                                                                                                            &
                                                                                                                                                                            gUpgradeMasks[UPG_STICKS
                                                                                                                                                                                              as
                                                                                                                                                                                              libc::c_int
                                                                                                                                                                                              as
                                                                                                                                                                                              usize])
                                                                                                                                                                           as
                                                                                                                                                                           s32
                                                                                                                                                                           >>
                                                                                                                                                                           gUpgradeShifts[UPG_STICKS
                                                                                                                                                                                              as
                                                                                                                                                                                              libc::c_int
                                                                                                                                                                                              as
                                                                                                                                                                                              usize]
                                                                                                                                                                               as
                                                                                                                                                                               libc::c_int)
                                                                                                                                                                          as
                                                                                                                                                                          usize]
                                                                                                                                            as
                                                                                                                                            s8
                                                                                                                                }
                                                                                                                            }
                                                                                                                        } else if item
                                                                                                                                      as
                                                                                                                                      libc::c_int
                                                                                                                                      ==
                                                                                                                                      ITEM_STICKS_5
                                                                                                                                          as
                                                                                                                                          libc::c_int
                                                                                                                                      ||
                                                                                                                                      item
                                                                                                                                          as
                                                                                                                                          libc::c_int
                                                                                                                                          ==
                                                                                                                                          ITEM_STICKS_10
                                                                                                                                              as
                                                                                                                                              libc::c_int
                                                                                                                         {
                                                                                                                            if gSaveContext.inventory.items[slot
                                                                                                                                                                as
                                                                                                                                                                usize]
                                                                                                                                   as
                                                                                                                                   libc::c_int
                                                                                                                                   ==
                                                                                                                                   ITEM_NONE
                                                                                                                                       as
                                                                                                                                       libc::c_int
                                                                                                                               {
                                                                                                                                Inventory_ChangeUpgrade(UPG_STICKS
                                                                                                                                                            as
                                                                                                                                                            libc::c_int
                                                                                                                                                            as
                                                                                                                                                            s16,
                                                                                                                                                        1
                                                                                                                                                            as
                                                                                                                                                            libc::c_int
                                                                                                                                                            as
                                                                                                                                                            s16);
                                                                                                                                gSaveContext.inventory.ammo[gItemSlots[ITEM_STICK
                                                                                                                                                                           as
                                                                                                                                                                           libc::c_int
                                                                                                                                                                           as
                                                                                                                                                                           usize]
                                                                                                                                                                as
                                                                                                                                                                usize]
                                                                                                                                    =
                                                                                                                                    sAmmoRefillCounts[(item
                                                                                                                                                           as
                                                                                                                                                           libc::c_int
                                                                                                                                                           -
                                                                                                                                                           ITEM_STICKS_5
                                                                                                                                                               as
                                                                                                                                                               libc::c_int)
                                                                                                                                                          as
                                                                                                                                                          usize]
                                                                                                                                        as
                                                                                                                                        s8
                                                                                                                            } else {
                                                                                                                                gSaveContext.inventory.ammo[gItemSlots[ITEM_STICK
                                                                                                                                                                           as
                                                                                                                                                                           libc::c_int
                                                                                                                                                                           as
                                                                                                                                                                           usize]
                                                                                                                                                                as
                                                                                                                                                                usize]
                                                                                                                                    =
                                                                                                                                    (gSaveContext.inventory.ammo[gItemSlots[ITEM_STICK
                                                                                                                                                                                as
                                                                                                                                                                                libc::c_int
                                                                                                                                                                                as
                                                                                                                                                                                usize]
                                                                                                                                                                     as
                                                                                                                                                                     usize]
                                                                                                                                         as
                                                                                                                                         libc::c_int
                                                                                                                                         +
                                                                                                                                         sAmmoRefillCounts[(item
                                                                                                                                                                as
                                                                                                                                                                libc::c_int
                                                                                                                                                                -
                                                                                                                                                                ITEM_STICKS_5
                                                                                                                                                                    as
                                                                                                                                                                    libc::c_int)
                                                                                                                                                               as
                                                                                                                                                               usize]
                                                                                                                                             as
                                                                                                                                             libc::c_int)
                                                                                                                                        as
                                                                                                                                        s8;
                                                                                                                                if gSaveContext.inventory.ammo[gItemSlots[ITEM_STICK
                                                                                                                                                                              as
                                                                                                                                                                              libc::c_int
                                                                                                                                                                              as
                                                                                                                                                                              usize]
                                                                                                                                                                   as
                                                                                                                                                                   usize]
                                                                                                                                       as
                                                                                                                                       libc::c_int
                                                                                                                                       >
                                                                                                                                       gUpgradeCapacities[UPG_STICKS
                                                                                                                                                              as
                                                                                                                                                              libc::c_int
                                                                                                                                                              as
                                                                                                                                                              usize][((gSaveContext.inventory.upgrades
                                                                                                                                                                           &
                                                                                                                                                                           gUpgradeMasks[UPG_STICKS
                                                                                                                                                                                             as
                                                                                                                                                                                             libc::c_int
                                                                                                                                                                                             as
                                                                                                                                                                                             usize])
                                                                                                                                                                          as
                                                                                                                                                                          s32
                                                                                                                                                                          >>
                                                                                                                                                                          gUpgradeShifts[UPG_STICKS
                                                                                                                                                                                             as
                                                                                                                                                                                             libc::c_int
                                                                                                                                                                                             as
                                                                                                                                                                                             usize]
                                                                                                                                                                              as
                                                                                                                                                                              libc::c_int)
                                                                                                                                                                         as
                                                                                                                                                                         usize]
                                                                                                                                           as
                                                                                                                                           libc::c_int
                                                                                                                                   {
                                                                                                                                    gSaveContext.inventory.ammo[gItemSlots[ITEM_STICK
                                                                                                                                                                               as
                                                                                                                                                                               libc::c_int
                                                                                                                                                                               as
                                                                                                                                                                               usize]
                                                                                                                                                                    as
                                                                                                                                                                    usize]
                                                                                                                                        =
                                                                                                                                        gUpgradeCapacities[UPG_STICKS
                                                                                                                                                               as
                                                                                                                                                               libc::c_int
                                                                                                                                                               as
                                                                                                                                                               usize][((gSaveContext.inventory.upgrades
                                                                                                                                                                            &
                                                                                                                                                                            gUpgradeMasks[UPG_STICKS
                                                                                                                                                                                              as
                                                                                                                                                                                              libc::c_int
                                                                                                                                                                                              as
                                                                                                                                                                                              usize])
                                                                                                                                                                           as
                                                                                                                                                                           s32
                                                                                                                                                                           >>
                                                                                                                                                                           gUpgradeShifts[UPG_STICKS
                                                                                                                                                                                              as
                                                                                                                                                                                              libc::c_int
                                                                                                                                                                                              as
                                                                                                                                                                                              usize]
                                                                                                                                                                               as
                                                                                                                                                                               libc::c_int)
                                                                                                                                                                          as
                                                                                                                                                                          usize]
                                                                                                                                            as
                                                                                                                                            s8
                                                                                                                                }
                                                                                                                            }
                                                                                                                            item
                                                                                                                                =
                                                                                                                                ITEM_STICK
                                                                                                                                    as
                                                                                                                                    libc::c_int
                                                                                                                                    as
                                                                                                                                    u8_0
                                                                                                                        } else if item
                                                                                                                                      as
                                                                                                                                      libc::c_int
                                                                                                                                      ==
                                                                                                                                      ITEM_NUT
                                                                                                                                          as
                                                                                                                                          libc::c_int
                                                                                                                         {
                                                                                                                            if gSaveContext.inventory.items[slot
                                                                                                                                                                as
                                                                                                                                                                usize]
                                                                                                                                   as
                                                                                                                                   libc::c_int
                                                                                                                                   ==
                                                                                                                                   ITEM_NONE
                                                                                                                                       as
                                                                                                                                       libc::c_int
                                                                                                                               {
                                                                                                                                Inventory_ChangeUpgrade(UPG_NUTS
                                                                                                                                                            as
                                                                                                                                                            libc::c_int
                                                                                                                                                            as
                                                                                                                                                            s16,
                                                                                                                                                        1
                                                                                                                                                            as
                                                                                                                                                            libc::c_int
                                                                                                                                                            as
                                                                                                                                                            s16);
                                                                                                                                gSaveContext.inventory.ammo[gItemSlots[ITEM_NUT
                                                                                                                                                                           as
                                                                                                                                                                           libc::c_int
                                                                                                                                                                           as
                                                                                                                                                                           usize]
                                                                                                                                                                as
                                                                                                                                                                usize]
                                                                                                                                    =
                                                                                                                                    ITEM_NUT
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                        as
                                                                                                                                        s8
                                                                                                                            } else {
                                                                                                                                gSaveContext.inventory.ammo[gItemSlots[ITEM_NUT
                                                                                                                                                                           as
                                                                                                                                                                           libc::c_int
                                                                                                                                                                           as
                                                                                                                                                                           usize]
                                                                                                                                                                as
                                                                                                                                                                usize]
                                                                                                                                    +=
                                                                                                                                    1;
                                                                                                                                if gSaveContext.inventory.ammo[gItemSlots[ITEM_NUT
                                                                                                                                                                              as
                                                                                                                                                                              libc::c_int
                                                                                                                                                                              as
                                                                                                                                                                              usize]
                                                                                                                                                                   as
                                                                                                                                                                   usize]
                                                                                                                                       as
                                                                                                                                       libc::c_int
                                                                                                                                       >
                                                                                                                                       gUpgradeCapacities[UPG_NUTS
                                                                                                                                                              as
                                                                                                                                                              libc::c_int
                                                                                                                                                              as
                                                                                                                                                              usize][((gSaveContext.inventory.upgrades
                                                                                                                                                                           &
                                                                                                                                                                           gUpgradeMasks[UPG_NUTS
                                                                                                                                                                                             as
                                                                                                                                                                                             libc::c_int
                                                                                                                                                                                             as
                                                                                                                                                                                             usize])
                                                                                                                                                                          as
                                                                                                                                                                          s32
                                                                                                                                                                          >>
                                                                                                                                                                          gUpgradeShifts[UPG_NUTS
                                                                                                                                                                                             as
                                                                                                                                                                                             libc::c_int
                                                                                                                                                                                             as
                                                                                                                                                                                             usize]
                                                                                                                                                                              as
                                                                                                                                                                              libc::c_int)
                                                                                                                                                                         as
                                                                                                                                                                         usize]
                                                                                                                                           as
                                                                                                                                           libc::c_int
                                                                                                                                   {
                                                                                                                                    gSaveContext.inventory.ammo[gItemSlots[ITEM_NUT
                                                                                                                                                                               as
                                                                                                                                                                               libc::c_int
                                                                                                                                                                               as
                                                                                                                                                                               usize]
                                                                                                                                                                    as
                                                                                                                                                                    usize]
                                                                                                                                        =
                                                                                                                                        gUpgradeCapacities[UPG_NUTS
                                                                                                                                                               as
                                                                                                                                                               libc::c_int
                                                                                                                                                               as
                                                                                                                                                               usize][((gSaveContext.inventory.upgrades
                                                                                                                                                                            &
                                                                                                                                                                            gUpgradeMasks[UPG_NUTS
                                                                                                                                                                                              as
                                                                                                                                                                                              libc::c_int
                                                                                                                                                                                              as
                                                                                                                                                                                              usize])
                                                                                                                                                                           as
                                                                                                                                                                           s32
                                                                                                                                                                           >>
                                                                                                                                                                           gUpgradeShifts[UPG_NUTS
                                                                                                                                                                                              as
                                                                                                                                                                                              libc::c_int
                                                                                                                                                                                              as
                                                                                                                                                                                              usize]
                                                                                                                                                                               as
                                                                                                                                                                               libc::c_int)
                                                                                                                                                                          as
                                                                                                                                                                          usize]
                                                                                                                                            as
                                                                                                                                            s8
                                                                                                                                }
                                                                                                                            }
                                                                                                                        } else if item
                                                                                                                                      as
                                                                                                                                      libc::c_int
                                                                                                                                      ==
                                                                                                                                      ITEM_NUTS_5
                                                                                                                                          as
                                                                                                                                          libc::c_int
                                                                                                                                      ||
                                                                                                                                      item
                                                                                                                                          as
                                                                                                                                          libc::c_int
                                                                                                                                          ==
                                                                                                                                          ITEM_NUTS_10
                                                                                                                                              as
                                                                                                                                              libc::c_int
                                                                                                                         {
                                                                                                                            if gSaveContext.inventory.items[slot
                                                                                                                                                                as
                                                                                                                                                                usize]
                                                                                                                                   as
                                                                                                                                   libc::c_int
                                                                                                                                   ==
                                                                                                                                   ITEM_NONE
                                                                                                                                       as
                                                                                                                                       libc::c_int
                                                                                                                               {
                                                                                                                                Inventory_ChangeUpgrade(UPG_NUTS
                                                                                                                                                            as
                                                                                                                                                            libc::c_int
                                                                                                                                                            as
                                                                                                                                                            s16,
                                                                                                                                                        1
                                                                                                                                                            as
                                                                                                                                                            libc::c_int
                                                                                                                                                            as
                                                                                                                                                            s16);
                                                                                                                                gSaveContext.inventory.ammo[gItemSlots[ITEM_NUT
                                                                                                                                                                           as
                                                                                                                                                                           libc::c_int
                                                                                                                                                                           as
                                                                                                                                                                           usize]
                                                                                                                                                                as
                                                                                                                                                                usize]
                                                                                                                                    =
                                                                                                                                    (gSaveContext.inventory.ammo[gItemSlots[ITEM_NUT
                                                                                                                                                                                as
                                                                                                                                                                                libc::c_int
                                                                                                                                                                                as
                                                                                                                                                                                usize]
                                                                                                                                                                     as
                                                                                                                                                                     usize]
                                                                                                                                         as
                                                                                                                                         libc::c_int
                                                                                                                                         +
                                                                                                                                         sAmmoRefillCounts[(item
                                                                                                                                                                as
                                                                                                                                                                libc::c_int
                                                                                                                                                                -
                                                                                                                                                                ITEM_NUTS_5
                                                                                                                                                                    as
                                                                                                                                                                    libc::c_int)
                                                                                                                                                               as
                                                                                                                                                               usize]
                                                                                                                                             as
                                                                                                                                             libc::c_int)
                                                                                                                                        as
                                                                                                                                        s8;
                                                                                                                                // "Deku Nuts %d(%d)=%d BS_count=%d"
                                                                                                                                osSyncPrintf(b"\xe3\x83\x87\xe3\x82\xaf\xe3\x81\xae\xe5\xae\x9f %d(%d)=%d  BS_count=%d\n\x00"
                                                                                                                                                 as
                                                                                                                                                 *const u8
                                                                                                                                                 as
                                                                                                                                                 *const libc::c_char,
                                                                                                                                             item
                                                                                                                                                 as
                                                                                                                                                 libc::c_int,
                                                                                                                                             ITEM_NUTS_5
                                                                                                                                                 as
                                                                                                                                                 libc::c_int,
                                                                                                                                             item
                                                                                                                                                 as
                                                                                                                                                 libc::c_int
                                                                                                                                                 -
                                                                                                                                                 ITEM_NUTS_5
                                                                                                                                                     as
                                                                                                                                                     libc::c_int,
                                                                                                                                             sAmmoRefillCounts[(item
                                                                                                                                                                    as
                                                                                                                                                                    libc::c_int
                                                                                                                                                                    -
                                                                                                                                                                    ITEM_NUTS_5
                                                                                                                                                                        as
                                                                                                                                                                        libc::c_int)
                                                                                                                                                                   as
                                                                                                                                                                   usize]
                                                                                                                                                 as
                                                                                                                                                 libc::c_int);
                                                                                                                            } else {
                                                                                                                                gSaveContext.inventory.ammo[gItemSlots[ITEM_NUT
                                                                                                                                                                           as
                                                                                                                                                                           libc::c_int
                                                                                                                                                                           as
                                                                                                                                                                           usize]
                                                                                                                                                                as
                                                                                                                                                                usize]
                                                                                                                                    =
                                                                                                                                    (gSaveContext.inventory.ammo[gItemSlots[ITEM_NUT
                                                                                                                                                                                as
                                                                                                                                                                                libc::c_int
                                                                                                                                                                                as
                                                                                                                                                                                usize]
                                                                                                                                                                     as
                                                                                                                                                                     usize]
                                                                                                                                         as
                                                                                                                                         libc::c_int
                                                                                                                                         +
                                                                                                                                         sAmmoRefillCounts[(item
                                                                                                                                                                as
                                                                                                                                                                libc::c_int
                                                                                                                                                                -
                                                                                                                                                                ITEM_NUTS_5
                                                                                                                                                                    as
                                                                                                                                                                    libc::c_int)
                                                                                                                                                               as
                                                                                                                                                               usize]
                                                                                                                                             as
                                                                                                                                             libc::c_int)
                                                                                                                                        as
                                                                                                                                        s8;
                                                                                                                                if gSaveContext.inventory.ammo[gItemSlots[ITEM_NUT
                                                                                                                                                                              as
                                                                                                                                                                              libc::c_int
                                                                                                                                                                              as
                                                                                                                                                                              usize]
                                                                                                                                                                   as
                                                                                                                                                                   usize]
                                                                                                                                       as
                                                                                                                                       libc::c_int
                                                                                                                                       >
                                                                                                                                       gUpgradeCapacities[UPG_NUTS
                                                                                                                                                              as
                                                                                                                                                              libc::c_int
                                                                                                                                                              as
                                                                                                                                                              usize][((gSaveContext.inventory.upgrades
                                                                                                                                                                           &
                                                                                                                                                                           gUpgradeMasks[UPG_NUTS
                                                                                                                                                                                             as
                                                                                                                                                                                             libc::c_int
                                                                                                                                                                                             as
                                                                                                                                                                                             usize])
                                                                                                                                                                          as
                                                                                                                                                                          s32
                                                                                                                                                                          >>
                                                                                                                                                                          gUpgradeShifts[UPG_NUTS
                                                                                                                                                                                             as
                                                                                                                                                                                             libc::c_int
                                                                                                                                                                                             as
                                                                                                                                                                                             usize]
                                                                                                                                                                              as
                                                                                                                                                                              libc::c_int)
                                                                                                                                                                         as
                                                                                                                                                                         usize]
                                                                                                                                           as
                                                                                                                                           libc::c_int
                                                                                                                                   {
                                                                                                                                    gSaveContext.inventory.ammo[gItemSlots[ITEM_NUT
                                                                                                                                                                               as
                                                                                                                                                                               libc::c_int
                                                                                                                                                                               as
                                                                                                                                                                               usize]
                                                                                                                                                                    as
                                                                                                                                                                    usize]
                                                                                                                                        =
                                                                                                                                        gUpgradeCapacities[UPG_NUTS
                                                                                                                                                               as
                                                                                                                                                               libc::c_int
                                                                                                                                                               as
                                                                                                                                                               usize][((gSaveContext.inventory.upgrades
                                                                                                                                                                            &
                                                                                                                                                                            gUpgradeMasks[UPG_NUTS
                                                                                                                                                                                              as
                                                                                                                                                                                              libc::c_int
                                                                                                                                                                                              as
                                                                                                                                                                                              usize])
                                                                                                                                                                           as
                                                                                                                                                                           s32
                                                                                                                                                                           >>
                                                                                                                                                                           gUpgradeShifts[UPG_NUTS
                                                                                                                                                                                              as
                                                                                                                                                                                              libc::c_int
                                                                                                                                                                                              as
                                                                                                                                                                                              usize]
                                                                                                                                                                               as
                                                                                                                                                                               libc::c_int)
                                                                                                                                                                          as
                                                                                                                                                                          usize]
                                                                                                                                            as
                                                                                                                                            s8
                                                                                                                                }
                                                                                                                            }
                                                                                                                            item
                                                                                                                                =
                                                                                                                                ITEM_NUT
                                                                                                                                    as
                                                                                                                                    libc::c_int
                                                                                                                                    as
                                                                                                                                    u8_0
                                                                                                                        } else if item
                                                                                                                                      as
                                                                                                                                      libc::c_int
                                                                                                                                      ==
                                                                                                                                      ITEM_BOMB
                                                                                                                                          as
                                                                                                                                          libc::c_int
                                                                                                                         {
                                                                                                                            // "Bomb  Bomb  Bomb  Bomb Bomb   Bomb Bomb"
                                                                                                                            osSyncPrintf(b" \xe7\x88\x86\xe5\xbc\xbe  \xe7\x88\x86\xe5\xbc\xbe  \xe7\x88\x86\xe5\xbc\xbe  \xe7\x88\x86\xe5\xbc\xbe \xe7\x88\x86\xe5\xbc\xbe   \xe7\x88\x86\xe5\xbc\xbe \xe7\x88\x86\xe5\xbc\xbe \n\x00"
                                                                                                                                             as
                                                                                                                                             *const u8
                                                                                                                                             as
                                                                                                                                             *const libc::c_char); // "Recovery Heart"
                                                                                                                            gSaveContext.inventory.ammo[gItemSlots[ITEM_BOMB
                                                                                                                                                                       as
                                                                                                                                                                       libc::c_int
                                                                                                                                                                       as
                                                                                                                                                                       usize]
                                                                                                                                                            as
                                                                                                                                                            usize]
                                                                                                                                =
                                                                                                                                (gSaveContext.inventory.ammo[gItemSlots[ITEM_BOMB
                                                                                                                                                                            as
                                                                                                                                                                            libc::c_int
                                                                                                                                                                            as
                                                                                                                                                                            usize]
                                                                                                                                                                 as
                                                                                                                                                                 usize]
                                                                                                                                     as
                                                                                                                                     libc::c_int
                                                                                                                                     +
                                                                                                                                     1
                                                                                                                                         as
                                                                                                                                         libc::c_int)
                                                                                                                                    as
                                                                                                                                    s8;
                                                                                                                            if gSaveContext.inventory.ammo[gItemSlots[ITEM_BOMB
                                                                                                                                                                          as
                                                                                                                                                                          libc::c_int
                                                                                                                                                                          as
                                                                                                                                                                          usize]
                                                                                                                                                               as
                                                                                                                                                               usize]
                                                                                                                                   as
                                                                                                                                   libc::c_int
                                                                                                                                   >
                                                                                                                                   gUpgradeCapacities[UPG_BOMB_BAG
                                                                                                                                                          as
                                                                                                                                                          libc::c_int
                                                                                                                                                          as
                                                                                                                                                          usize][((gSaveContext.inventory.upgrades
                                                                                                                                                                       &
                                                                                                                                                                       gUpgradeMasks[UPG_BOMB_BAG
                                                                                                                                                                                         as
                                                                                                                                                                                         libc::c_int
                                                                                                                                                                                         as
                                                                                                                                                                                         usize])
                                                                                                                                                                      as
                                                                                                                                                                      s32
                                                                                                                                                                      >>
                                                                                                                                                                      gUpgradeShifts[UPG_BOMB_BAG
                                                                                                                                                                                         as
                                                                                                                                                                                         libc::c_int
                                                                                                                                                                                         as
                                                                                                                                                                                         usize]
                                                                                                                                                                          as
                                                                                                                                                                          libc::c_int)
                                                                                                                                                                     as
                                                                                                                                                                     usize]
                                                                                                                                       as
                                                                                                                                       libc::c_int
                                                                                                                               {
                                                                                                                                gSaveContext.inventory.ammo[gItemSlots[ITEM_BOMB
                                                                                                                                                                           as
                                                                                                                                                                           libc::c_int
                                                                                                                                                                           as
                                                                                                                                                                           usize]
                                                                                                                                                                as
                                                                                                                                                                usize]
                                                                                                                                    =
                                                                                                                                    gUpgradeCapacities[UPG_BOMB_BAG
                                                                                                                                                           as
                                                                                                                                                           libc::c_int
                                                                                                                                                           as
                                                                                                                                                           usize][((gSaveContext.inventory.upgrades
                                                                                                                                                                        &
                                                                                                                                                                        gUpgradeMasks[UPG_BOMB_BAG
                                                                                                                                                                                          as
                                                                                                                                                                                          libc::c_int
                                                                                                                                                                                          as
                                                                                                                                                                                          usize])
                                                                                                                                                                       as
                                                                                                                                                                       s32
                                                                                                                                                                       >>
                                                                                                                                                                       gUpgradeShifts[UPG_BOMB_BAG
                                                                                                                                                                                          as
                                                                                                                                                                                          libc::c_int
                                                                                                                                                                                          as
                                                                                                                                                                                          usize]
                                                                                                                                                                           as
                                                                                                                                                                           libc::c_int)
                                                                                                                                                                      as
                                                                                                                                                                      usize]
                                                                                                                                        as
                                                                                                                                        s8
                                                                                                                            }
                                                                                                                            return ITEM_NONE
                                                                                                                                       as
                                                                                                                                       libc::c_int
                                                                                                                                       as
                                                                                                                                       u8_0
                                                                                                                        } else {
                                                                                                                            if item
                                                                                                                                   as
                                                                                                                                   libc::c_int
                                                                                                                                   >=
                                                                                                                                   ITEM_BOMBS_5
                                                                                                                                       as
                                                                                                                                       libc::c_int
                                                                                                                                   &&
                                                                                                                                   item
                                                                                                                                       as
                                                                                                                                       libc::c_int
                                                                                                                                       <=
                                                                                                                                       ITEM_BOMBS_30
                                                                                                                                           as
                                                                                                                                           libc::c_int
                                                                                                                               {
                                                                                                                                gSaveContext.inventory.ammo[gItemSlots[ITEM_BOMB
                                                                                                                                                                           as
                                                                                                                                                                           libc::c_int
                                                                                                                                                                           as
                                                                                                                                                                           usize]
                                                                                                                                                                as
                                                                                                                                                                usize]
                                                                                                                                    =
                                                                                                                                    (gSaveContext.inventory.ammo[gItemSlots[ITEM_BOMB
                                                                                                                                                                                as
                                                                                                                                                                                libc::c_int
                                                                                                                                                                                as
                                                                                                                                                                                usize]
                                                                                                                                                                     as
                                                                                                                                                                     usize]
                                                                                                                                         as
                                                                                                                                         libc::c_int
                                                                                                                                         +
                                                                                                                                         sAmmoRefillCounts[(item
                                                                                                                                                                as
                                                                                                                                                                libc::c_int
                                                                                                                                                                -
                                                                                                                                                                ITEM_BOMBS_5
                                                                                                                                                                    as
                                                                                                                                                                    libc::c_int)
                                                                                                                                                               as
                                                                                                                                                               usize]
                                                                                                                                             as
                                                                                                                                             libc::c_int)
                                                                                                                                        as
                                                                                                                                        s8;
                                                                                                                                if gSaveContext.inventory.ammo[gItemSlots[ITEM_BOMB
                                                                                                                                                                              as
                                                                                                                                                                              libc::c_int
                                                                                                                                                                              as
                                                                                                                                                                              usize]
                                                                                                                                                                   as
                                                                                                                                                                   usize]
                                                                                                                                       as
                                                                                                                                       libc::c_int
                                                                                                                                       >
                                                                                                                                       gUpgradeCapacities[UPG_BOMB_BAG
                                                                                                                                                              as
                                                                                                                                                              libc::c_int
                                                                                                                                                              as
                                                                                                                                                              usize][((gSaveContext.inventory.upgrades
                                                                                                                                                                           &
                                                                                                                                                                           gUpgradeMasks[UPG_BOMB_BAG
                                                                                                                                                                                             as
                                                                                                                                                                                             libc::c_int
                                                                                                                                                                                             as
                                                                                                                                                                                             usize])
                                                                                                                                                                          as
                                                                                                                                                                          s32
                                                                                                                                                                          >>
                                                                                                                                                                          gUpgradeShifts[UPG_BOMB_BAG
                                                                                                                                                                                             as
                                                                                                                                                                                             libc::c_int
                                                                                                                                                                                             as
                                                                                                                                                                                             usize]
                                                                                                                                                                              as
                                                                                                                                                                              libc::c_int)
                                                                                                                                                                         as
                                                                                                                                                                         usize]
                                                                                                                                           as
                                                                                                                                           libc::c_int
                                                                                                                                   {
                                                                                                                                    gSaveContext.inventory.ammo[gItemSlots[ITEM_BOMB
                                                                                                                                                                               as
                                                                                                                                                                               libc::c_int
                                                                                                                                                                               as
                                                                                                                                                                               usize]
                                                                                                                                                                    as
                                                                                                                                                                    usize]
                                                                                                                                        =
                                                                                                                                        gUpgradeCapacities[UPG_BOMB_BAG
                                                                                                                                                               as
                                                                                                                                                               libc::c_int
                                                                                                                                                               as
                                                                                                                                                               usize][((gSaveContext.inventory.upgrades
                                                                                                                                                                            &
                                                                                                                                                                            gUpgradeMasks[UPG_BOMB_BAG
                                                                                                                                                                                              as
                                                                                                                                                                                              libc::c_int
                                                                                                                                                                                              as
                                                                                                                                                                                              usize])
                                                                                                                                                                           as
                                                                                                                                                                           s32
                                                                                                                                                                           >>
                                                                                                                                                                           gUpgradeShifts[UPG_BOMB_BAG
                                                                                                                                                                                              as
                                                                                                                                                                                              libc::c_int
                                                                                                                                                                                              as
                                                                                                                                                                                              usize]
                                                                                                                                                                               as
                                                                                                                                                                               libc::c_int)
                                                                                                                                                                          as
                                                                                                                                                                          usize]
                                                                                                                                            as
                                                                                                                                            s8
                                                                                                                                }
                                                                                                                                return ITEM_NONE
                                                                                                                                           as
                                                                                                                                           libc::c_int
                                                                                                                                           as
                                                                                                                                           u8_0
                                                                                                                            } else {
                                                                                                                                if item
                                                                                                                                       as
                                                                                                                                       libc::c_int
                                                                                                                                       ==
                                                                                                                                       ITEM_BOMBCHU
                                                                                                                                           as
                                                                                                                                           libc::c_int
                                                                                                                                   {
                                                                                                                                    if gSaveContext.inventory.items[slot
                                                                                                                                                                        as
                                                                                                                                                                        usize]
                                                                                                                                           as
                                                                                                                                           libc::c_int
                                                                                                                                           ==
                                                                                                                                           ITEM_NONE
                                                                                                                                               as
                                                                                                                                               libc::c_int
                                                                                                                                       {
                                                                                                                                        gSaveContext.inventory.items[gItemSlots[ITEM_BOMBCHU
                                                                                                                                                                                    as
                                                                                                                                                                                    libc::c_int
                                                                                                                                                                                    as
                                                                                                                                                                                    usize]
                                                                                                                                                                         as
                                                                                                                                                                         usize]
                                                                                                                                            =
                                                                                                                                            ITEM_BOMBCHU
                                                                                                                                                as
                                                                                                                                                libc::c_int
                                                                                                                                                as
                                                                                                                                                u8_0;
                                                                                                                                        gSaveContext.inventory.ammo[gItemSlots[ITEM_BOMBCHU
                                                                                                                                                                                   as
                                                                                                                                                                                   libc::c_int
                                                                                                                                                                                   as
                                                                                                                                                                                   usize]
                                                                                                                                                                        as
                                                                                                                                                                        usize]
                                                                                                                                            =
                                                                                                                                            10
                                                                                                                                                as
                                                                                                                                                libc::c_int
                                                                                                                                                as
                                                                                                                                                s8;
                                                                                                                                        return ITEM_NONE
                                                                                                                                                   as
                                                                                                                                                   libc::c_int
                                                                                                                                                   as
                                                                                                                                                   u8_0
                                                                                                                                    } else {
                                                                                                                                        gSaveContext.inventory.ammo[gItemSlots[ITEM_BOMBCHU
                                                                                                                                                                                   as
                                                                                                                                                                                   libc::c_int
                                                                                                                                                                                   as
                                                                                                                                                                                   usize]
                                                                                                                                                                        as
                                                                                                                                                                        usize]
                                                                                                                                            =
                                                                                                                                            (gSaveContext.inventory.ammo[gItemSlots[ITEM_BOMBCHU
                                                                                                                                                                                        as
                                                                                                                                                                                        libc::c_int
                                                                                                                                                                                        as
                                                                                                                                                                                        usize]
                                                                                                                                                                             as
                                                                                                                                                                             usize]
                                                                                                                                                 as
                                                                                                                                                 libc::c_int
                                                                                                                                                 +
                                                                                                                                                 10
                                                                                                                                                     as
                                                                                                                                                     libc::c_int)
                                                                                                                                                as
                                                                                                                                                s8;
                                                                                                                                        if gSaveContext.inventory.ammo[gItemSlots[ITEM_BOMBCHU
                                                                                                                                                                                      as
                                                                                                                                                                                      libc::c_int
                                                                                                                                                                                      as
                                                                                                                                                                                      usize]
                                                                                                                                                                           as
                                                                                                                                                                           usize]
                                                                                                                                               as
                                                                                                                                               libc::c_int
                                                                                                                                               >
                                                                                                                                               50
                                                                                                                                                   as
                                                                                                                                                   libc::c_int
                                                                                                                                           {
                                                                                                                                            gSaveContext.inventory.ammo[gItemSlots[ITEM_BOMBCHU
                                                                                                                                                                                       as
                                                                                                                                                                                       libc::c_int
                                                                                                                                                                                       as
                                                                                                                                                                                       usize]
                                                                                                                                                                            as
                                                                                                                                                                            usize]
                                                                                                                                                =
                                                                                                                                                50
                                                                                                                                                    as
                                                                                                                                                    libc::c_int
                                                                                                                                                    as
                                                                                                                                                    s8
                                                                                                                                        }
                                                                                                                                        return ITEM_NONE
                                                                                                                                                   as
                                                                                                                                                   libc::c_int
                                                                                                                                                   as
                                                                                                                                                   u8_0
                                                                                                                                    }
                                                                                                                                } else {
                                                                                                                                    if item
                                                                                                                                           as
                                                                                                                                           libc::c_int
                                                                                                                                           ==
                                                                                                                                           ITEM_BOMBCHUS_5
                                                                                                                                               as
                                                                                                                                               libc::c_int
                                                                                                                                           ||
                                                                                                                                           item
                                                                                                                                               as
                                                                                                                                               libc::c_int
                                                                                                                                               ==
                                                                                                                                               ITEM_BOMBCHUS_20
                                                                                                                                                   as
                                                                                                                                                   libc::c_int
                                                                                                                                       {
                                                                                                                                        if gSaveContext.inventory.items[slot
                                                                                                                                                                            as
                                                                                                                                                                            usize]
                                                                                                                                               as
                                                                                                                                               libc::c_int
                                                                                                                                               ==
                                                                                                                                               ITEM_NONE
                                                                                                                                                   as
                                                                                                                                                   libc::c_int
                                                                                                                                           {
                                                                                                                                            gSaveContext.inventory.items[gItemSlots[ITEM_BOMBCHU
                                                                                                                                                                                        as
                                                                                                                                                                                        libc::c_int
                                                                                                                                                                                        as
                                                                                                                                                                                        usize]
                                                                                                                                                                             as
                                                                                                                                                                             usize]
                                                                                                                                                =
                                                                                                                                                ITEM_BOMBCHU
                                                                                                                                                    as
                                                                                                                                                    libc::c_int
                                                                                                                                                    as
                                                                                                                                                    u8_0;
                                                                                                                                            gSaveContext.inventory.ammo[gItemSlots[ITEM_BOMBCHU
                                                                                                                                                                                       as
                                                                                                                                                                                       libc::c_int
                                                                                                                                                                                       as
                                                                                                                                                                                       usize]
                                                                                                                                                                            as
                                                                                                                                                                            usize]
                                                                                                                                                =
                                                                                                                                                (gSaveContext.inventory.ammo[gItemSlots[ITEM_BOMBCHU
                                                                                                                                                                                            as
                                                                                                                                                                                            libc::c_int
                                                                                                                                                                                            as
                                                                                                                                                                                            usize]
                                                                                                                                                                                 as
                                                                                                                                                                                 usize]
                                                                                                                                                     as
                                                                                                                                                     libc::c_int
                                                                                                                                                     +
                                                                                                                                                     sAmmoRefillCounts[(item
                                                                                                                                                                            as
                                                                                                                                                                            libc::c_int
                                                                                                                                                                            -
                                                                                                                                                                            ITEM_BOMBCHUS_5
                                                                                                                                                                                as
                                                                                                                                                                                libc::c_int
                                                                                                                                                                            +
                                                                                                                                                                            8
                                                                                                                                                                                as
                                                                                                                                                                                libc::c_int)
                                                                                                                                                                           as
                                                                                                                                                                           usize]
                                                                                                                                                         as
                                                                                                                                                         libc::c_int)
                                                                                                                                                    as
                                                                                                                                                    s8;
                                                                                                                                            return ITEM_NONE
                                                                                                                                                       as
                                                                                                                                                       libc::c_int
                                                                                                                                                       as
                                                                                                                                                       u8_0
                                                                                                                                        } else {
                                                                                                                                            gSaveContext.inventory.ammo[gItemSlots[ITEM_BOMBCHU
                                                                                                                                                                                       as
                                                                                                                                                                                       libc::c_int
                                                                                                                                                                                       as
                                                                                                                                                                                       usize]
                                                                                                                                                                            as
                                                                                                                                                                            usize]
                                                                                                                                                =
                                                                                                                                                (gSaveContext.inventory.ammo[gItemSlots[ITEM_BOMBCHU
                                                                                                                                                                                            as
                                                                                                                                                                                            libc::c_int
                                                                                                                                                                                            as
                                                                                                                                                                                            usize]
                                                                                                                                                                                 as
                                                                                                                                                                                 usize]
                                                                                                                                                     as
                                                                                                                                                     libc::c_int
                                                                                                                                                     +
                                                                                                                                                     sAmmoRefillCounts[(item
                                                                                                                                                                            as
                                                                                                                                                                            libc::c_int
                                                                                                                                                                            -
                                                                                                                                                                            ITEM_BOMBCHUS_5
                                                                                                                                                                                as
                                                                                                                                                                                libc::c_int
                                                                                                                                                                            +
                                                                                                                                                                            8
                                                                                                                                                                                as
                                                                                                                                                                                libc::c_int)
                                                                                                                                                                           as
                                                                                                                                                                           usize]
                                                                                                                                                         as
                                                                                                                                                         libc::c_int)
                                                                                                                                                    as
                                                                                                                                                    s8;
                                                                                                                                            if gSaveContext.inventory.ammo[gItemSlots[ITEM_BOMBCHU
                                                                                                                                                                                          as
                                                                                                                                                                                          libc::c_int
                                                                                                                                                                                          as
                                                                                                                                                                                          usize]
                                                                                                                                                                               as
                                                                                                                                                                               usize]
                                                                                                                                                   as
                                                                                                                                                   libc::c_int
                                                                                                                                                   >
                                                                                                                                                   50
                                                                                                                                                       as
                                                                                                                                                       libc::c_int
                                                                                                                                               {
                                                                                                                                                gSaveContext.inventory.ammo[gItemSlots[ITEM_BOMBCHU
                                                                                                                                                                                           as
                                                                                                                                                                                           libc::c_int
                                                                                                                                                                                           as
                                                                                                                                                                                           usize]
                                                                                                                                                                                as
                                                                                                                                                                                usize]
                                                                                                                                                    =
                                                                                                                                                    50
                                                                                                                                                        as
                                                                                                                                                        libc::c_int
                                                                                                                                                        as
                                                                                                                                                        s8
                                                                                                                                            }
                                                                                                                                            return ITEM_NONE
                                                                                                                                                       as
                                                                                                                                                       libc::c_int
                                                                                                                                                       as
                                                                                                                                                       u8_0
                                                                                                                                        }
                                                                                                                                    } else {
                                                                                                                                        if item
                                                                                                                                               as
                                                                                                                                               libc::c_int
                                                                                                                                               >=
                                                                                                                                               ITEM_ARROWS_SMALL
                                                                                                                                                   as
                                                                                                                                                   libc::c_int
                                                                                                                                               &&
                                                                                                                                               item
                                                                                                                                                   as
                                                                                                                                                   libc::c_int
                                                                                                                                                   <=
                                                                                                                                                   ITEM_ARROWS_LARGE
                                                                                                                                                       as
                                                                                                                                                       libc::c_int
                                                                                                                                           {
                                                                                                                                            gSaveContext.inventory.ammo[gItemSlots[ITEM_BOW
                                                                                                                                                                                       as
                                                                                                                                                                                       libc::c_int
                                                                                                                                                                                       as
                                                                                                                                                                                       usize]
                                                                                                                                                                            as
                                                                                                                                                                            usize]
                                                                                                                                                =
                                                                                                                                                (gSaveContext.inventory.ammo[gItemSlots[ITEM_BOW
                                                                                                                                                                                            as
                                                                                                                                                                                            libc::c_int
                                                                                                                                                                                            as
                                                                                                                                                                                            usize]
                                                                                                                                                                                 as
                                                                                                                                                                                 usize]
                                                                                                                                                     as
                                                                                                                                                     libc::c_int
                                                                                                                                                     +
                                                                                                                                                     sAmmoRefillCounts[(item
                                                                                                                                                                            as
                                                                                                                                                                            libc::c_int
                                                                                                                                                                            -
                                                                                                                                                                            ITEM_ARROWS_SMALL
                                                                                                                                                                                as
                                                                                                                                                                                libc::c_int
                                                                                                                                                                            +
                                                                                                                                                                            4
                                                                                                                                                                                as
                                                                                                                                                                                libc::c_int)
                                                                                                                                                                           as
                                                                                                                                                                           usize]
                                                                                                                                                         as
                                                                                                                                                         libc::c_int)
                                                                                                                                                    as
                                                                                                                                                    s8;
                                                                                                                                            if gSaveContext.inventory.ammo[gItemSlots[ITEM_BOW
                                                                                                                                                                                          as
                                                                                                                                                                                          libc::c_int
                                                                                                                                                                                          as
                                                                                                                                                                                          usize]
                                                                                                                                                                               as
                                                                                                                                                                               usize]
                                                                                                                                                   as
                                                                                                                                                   libc::c_int
                                                                                                                                                   >=
                                                                                                                                                   gUpgradeCapacities[UPG_QUIVER
                                                                                                                                                                          as
                                                                                                                                                                          libc::c_int
                                                                                                                                                                          as
                                                                                                                                                                          usize][((gSaveContext.inventory.upgrades
                                                                                                                                                                                       &
                                                                                                                                                                                       gUpgradeMasks[UPG_QUIVER
                                                                                                                                                                                                         as
                                                                                                                                                                                                         libc::c_int
                                                                                                                                                                                                         as
                                                                                                                                                                                                         usize])
                                                                                                                                                                                      as
                                                                                                                                                                                      s32
                                                                                                                                                                                      >>
                                                                                                                                                                                      gUpgradeShifts[UPG_QUIVER
                                                                                                                                                                                                         as
                                                                                                                                                                                                         libc::c_int
                                                                                                                                                                                                         as
                                                                                                                                                                                                         usize]
                                                                                                                                                                                          as
                                                                                                                                                                                          libc::c_int)
                                                                                                                                                                                     as
                                                                                                                                                                                     usize]
                                                                                                                                                       as
                                                                                                                                                       libc::c_int
                                                                                                                                                   ||
                                                                                                                                                   (gSaveContext.inventory.ammo[gItemSlots[ITEM_BOW
                                                                                                                                                                                               as
                                                                                                                                                                                               libc::c_int
                                                                                                                                                                                               as
                                                                                                                                                                                               usize]
                                                                                                                                                                                    as
                                                                                                                                                                                    usize]
                                                                                                                                                        as
                                                                                                                                                        libc::c_int)
                                                                                                                                                       <
                                                                                                                                                       0
                                                                                                                                                           as
                                                                                                                                                           libc::c_int
                                                                                                                                               {
                                                                                                                                                gSaveContext.inventory.ammo[gItemSlots[ITEM_BOW
                                                                                                                                                                                           as
                                                                                                                                                                                           libc::c_int
                                                                                                                                                                                           as
                                                                                                                                                                                           usize]
                                                                                                                                                                                as
                                                                                                                                                                                usize]
                                                                                                                                                    =
                                                                                                                                                    gUpgradeCapacities[UPG_QUIVER
                                                                                                                                                                           as
                                                                                                                                                                           libc::c_int
                                                                                                                                                                           as
                                                                                                                                                                           usize][((gSaveContext.inventory.upgrades
                                                                                                                                                                                        &
                                                                                                                                                                                        gUpgradeMasks[UPG_QUIVER
                                                                                                                                                                                                          as
                                                                                                                                                                                                          libc::c_int
                                                                                                                                                                                                          as
                                                                                                                                                                                                          usize])
                                                                                                                                                                                       as
                                                                                                                                                                                       s32
                                                                                                                                                                                       >>
                                                                                                                                                                                       gUpgradeShifts[UPG_QUIVER
                                                                                                                                                                                                          as
                                                                                                                                                                                                          libc::c_int
                                                                                                                                                                                                          as
                                                                                                                                                                                                          usize]
                                                                                                                                                                                           as
                                                                                                                                                                                           libc::c_int)
                                                                                                                                                                                      as
                                                                                                                                                                                      usize]
                                                                                                                                                        as
                                                                                                                                                        s8
                                                                                                                                            }
                                                                                                                                            osSyncPrintf(b"%d\xe6\x9c\xac  Item_MaxGet=%d\n\x00"
                                                                                                                                                             as
                                                                                                                                                             *const u8
                                                                                                                                                             as
                                                                                                                                                             *const libc::c_char,
                                                                                                                                                         gSaveContext.inventory.ammo[gItemSlots[ITEM_BOW
                                                                                                                                                                                                    as
                                                                                                                                                                                                    libc::c_int
                                                                                                                                                                                                    as
                                                                                                                                                                                                    usize]
                                                                                                                                                                                         as
                                                                                                                                                                                         usize]
                                                                                                                                                             as
                                                                                                                                                             libc::c_int,
                                                                                                                                                         gUpgradeCapacities[UPG_QUIVER
                                                                                                                                                                                as
                                                                                                                                                                                libc::c_int
                                                                                                                                                                                as
                                                                                                                                                                                usize][((gSaveContext.inventory.upgrades
                                                                                                                                                                                             &
                                                                                                                                                                                             gUpgradeMasks[UPG_QUIVER
                                                                                                                                                                                                               as
                                                                                                                                                                                                               libc::c_int
                                                                                                                                                                                                               as
                                                                                                                                                                                                               usize])
                                                                                                                                                                                            as
                                                                                                                                                                                            s32
                                                                                                                                                                                            >>
                                                                                                                                                                                            gUpgradeShifts[UPG_QUIVER
                                                                                                                                                                                                               as
                                                                                                                                                                                                               libc::c_int
                                                                                                                                                                                                               as
                                                                                                                                                                                                               usize]
                                                                                                                                                                                                as
                                                                                                                                                                                                libc::c_int)
                                                                                                                                                                                           as
                                                                                                                                                                                           usize]
                                                                                                                                                             as
                                                                                                                                                             libc::c_int);
                                                                                                                                            return ITEM_BOW
                                                                                                                                                       as
                                                                                                                                                       libc::c_int
                                                                                                                                                       as
                                                                                                                                                       u8_0
                                                                                                                                        } else {
                                                                                                                                            if item
                                                                                                                                                   as
                                                                                                                                                   libc::c_int
                                                                                                                                                   ==
                                                                                                                                                   ITEM_SLINGSHOT
                                                                                                                                                       as
                                                                                                                                                       libc::c_int
                                                                                                                                               {
                                                                                                                                                Inventory_ChangeUpgrade(UPG_BULLET_BAG
                                                                                                                                                                            as
                                                                                                                                                                            libc::c_int
                                                                                                                                                                            as
                                                                                                                                                                            s16,
                                                                                                                                                                        1
                                                                                                                                                                            as
                                                                                                                                                                            libc::c_int
                                                                                                                                                                            as
                                                                                                                                                                            s16);
                                                                                                                                                gSaveContext.inventory.items[gItemSlots[ITEM_SLINGSHOT
                                                                                                                                                                                            as
                                                                                                                                                                                            libc::c_int
                                                                                                                                                                                            as
                                                                                                                                                                                            usize]
                                                                                                                                                                                 as
                                                                                                                                                                                 usize]
                                                                                                                                                    =
                                                                                                                                                    ITEM_SLINGSHOT
                                                                                                                                                        as
                                                                                                                                                        libc::c_int
                                                                                                                                                        as
                                                                                                                                                        u8_0;
                                                                                                                                                gSaveContext.inventory.ammo[gItemSlots[ITEM_SLINGSHOT
                                                                                                                                                                                           as
                                                                                                                                                                                           libc::c_int
                                                                                                                                                                                           as
                                                                                                                                                                                           usize]
                                                                                                                                                                                as
                                                                                                                                                                                usize]
                                                                                                                                                    =
                                                                                                                                                    30
                                                                                                                                                        as
                                                                                                                                                        libc::c_int
                                                                                                                                                        as
                                                                                                                                                        s8;
                                                                                                                                                return ITEM_NONE
                                                                                                                                                           as
                                                                                                                                                           libc::c_int
                                                                                                                                                           as
                                                                                                                                                           u8_0
                                                                                                                                            } else {
                                                                                                                                                if item
                                                                                                                                                       as
                                                                                                                                                       libc::c_int
                                                                                                                                                       ==
                                                                                                                                                       ITEM_SEEDS
                                                                                                                                                           as
                                                                                                                                                           libc::c_int
                                                                                                                                                   {
                                                                                                                                                    gSaveContext.inventory.ammo[gItemSlots[ITEM_SLINGSHOT
                                                                                                                                                                                               as
                                                                                                                                                                                               libc::c_int
                                                                                                                                                                                               as
                                                                                                                                                                                               usize]
                                                                                                                                                                                    as
                                                                                                                                                                                    usize]
                                                                                                                                                        =
                                                                                                                                                        (gSaveContext.inventory.ammo[gItemSlots[ITEM_SLINGSHOT
                                                                                                                                                                                                    as
                                                                                                                                                                                                    libc::c_int
                                                                                                                                                                                                    as
                                                                                                                                                                                                    usize]
                                                                                                                                                                                         as
                                                                                                                                                                                         usize]
                                                                                                                                                             as
                                                                                                                                                             libc::c_int
                                                                                                                                                             +
                                                                                                                                                             5
                                                                                                                                                                 as
                                                                                                                                                                 libc::c_int)
                                                                                                                                                            as
                                                                                                                                                            s8;
                                                                                                                                                    if gSaveContext.inventory.ammo[gItemSlots[ITEM_SLINGSHOT
                                                                                                                                                                                                  as
                                                                                                                                                                                                  libc::c_int
                                                                                                                                                                                                  as
                                                                                                                                                                                                  usize]
                                                                                                                                                                                       as
                                                                                                                                                                                       usize]
                                                                                                                                                           as
                                                                                                                                                           libc::c_int
                                                                                                                                                           >=
                                                                                                                                                           gUpgradeCapacities[UPG_BULLET_BAG
                                                                                                                                                                                  as
                                                                                                                                                                                  libc::c_int
                                                                                                                                                                                  as
                                                                                                                                                                                  usize][((gSaveContext.inventory.upgrades
                                                                                                                                                                                               &
                                                                                                                                                                                               gUpgradeMasks[UPG_BULLET_BAG
                                                                                                                                                                                                                 as
                                                                                                                                                                                                                 libc::c_int
                                                                                                                                                                                                                 as
                                                                                                                                                                                                                 usize])
                                                                                                                                                                                              as
                                                                                                                                                                                              s32
                                                                                                                                                                                              >>
                                                                                                                                                                                              gUpgradeShifts[UPG_BULLET_BAG
                                                                                                                                                                                                                 as
                                                                                                                                                                                                                 libc::c_int
                                                                                                                                                                                                                 as
                                                                                                                                                                                                                 usize]
                                                                                                                                                                                                  as
                                                                                                                                                                                                  libc::c_int)
                                                                                                                                                                                             as
                                                                                                                                                                                             usize]
                                                                                                                                                               as
                                                                                                                                                               libc::c_int
                                                                                                                                                       {
                                                                                                                                                        gSaveContext.inventory.ammo[gItemSlots[ITEM_SLINGSHOT
                                                                                                                                                                                                   as
                                                                                                                                                                                                   libc::c_int
                                                                                                                                                                                                   as
                                                                                                                                                                                                   usize]
                                                                                                                                                                                        as
                                                                                                                                                                                        usize]
                                                                                                                                                            =
                                                                                                                                                            gUpgradeCapacities[UPG_BULLET_BAG
                                                                                                                                                                                   as
                                                                                                                                                                                   libc::c_int
                                                                                                                                                                                   as
                                                                                                                                                                                   usize][((gSaveContext.inventory.upgrades
                                                                                                                                                                                                &
                                                                                                                                                                                                gUpgradeMasks[UPG_BULLET_BAG
                                                                                                                                                                                                                  as
                                                                                                                                                                                                                  libc::c_int
                                                                                                                                                                                                                  as
                                                                                                                                                                                                                  usize])
                                                                                                                                                                                               as
                                                                                                                                                                                               s32
                                                                                                                                                                                               >>
                                                                                                                                                                                               gUpgradeShifts[UPG_BULLET_BAG
                                                                                                                                                                                                                  as
                                                                                                                                                                                                                  libc::c_int
                                                                                                                                                                                                                  as
                                                                                                                                                                                                                  usize]
                                                                                                                                                                                                   as
                                                                                                                                                                                                   libc::c_int)
                                                                                                                                                                                              as
                                                                                                                                                                                              usize]
                                                                                                                                                                as
                                                                                                                                                                s8
                                                                                                                                                    }
                                                                                                                                                    if gSaveContext.itemGetInf[1
                                                                                                                                                                                   as
                                                                                                                                                                                   libc::c_int
                                                                                                                                                                                   as
                                                                                                                                                                                   usize]
                                                                                                                                                           as
                                                                                                                                                           libc::c_int
                                                                                                                                                           &
                                                                                                                                                           8
                                                                                                                                                               as
                                                                                                                                                               libc::c_int
                                                                                                                                                           ==
                                                                                                                                                           0
                                                                                                                                                       {
                                                                                                                                                        gSaveContext.itemGetInf[1
                                                                                                                                                                                    as
                                                                                                                                                                                    libc::c_int
                                                                                                                                                                                    as
                                                                                                                                                                                    usize]
                                                                                                                                                            =
                                                                                                                                                            (gSaveContext.itemGetInf[1
                                                                                                                                                                                         as
                                                                                                                                                                                         libc::c_int
                                                                                                                                                                                         as
                                                                                                                                                                                         usize]
                                                                                                                                                                 as
                                                                                                                                                                 libc::c_int
                                                                                                                                                                 |
                                                                                                                                                                 8
                                                                                                                                                                     as
                                                                                                                                                                     libc::c_int)
                                                                                                                                                                as
                                                                                                                                                                u16_0;
                                                                                                                                                        return ITEM_NONE
                                                                                                                                                                   as
                                                                                                                                                                   libc::c_int
                                                                                                                                                                   as
                                                                                                                                                                   u8_0
                                                                                                                                                    }
                                                                                                                                                    return ITEM_SEEDS
                                                                                                                                                               as
                                                                                                                                                               libc::c_int
                                                                                                                                                               as
                                                                                                                                                               u8_0
                                                                                                                                                } else {
                                                                                                                                                    if item
                                                                                                                                                           as
                                                                                                                                                           libc::c_int
                                                                                                                                                           ==
                                                                                                                                                           ITEM_SEEDS_30
                                                                                                                                                               as
                                                                                                                                                               libc::c_int
                                                                                                                                                       {
                                                                                                                                                        gSaveContext.inventory.ammo[gItemSlots[ITEM_SLINGSHOT
                                                                                                                                                                                                   as
                                                                                                                                                                                                   libc::c_int
                                                                                                                                                                                                   as
                                                                                                                                                                                                   usize]
                                                                                                                                                                                        as
                                                                                                                                                                                        usize]
                                                                                                                                                            =
                                                                                                                                                            (gSaveContext.inventory.ammo[gItemSlots[ITEM_SLINGSHOT
                                                                                                                                                                                                        as
                                                                                                                                                                                                        libc::c_int
                                                                                                                                                                                                        as
                                                                                                                                                                                                        usize]
                                                                                                                                                                                             as
                                                                                                                                                                                             usize]
                                                                                                                                                                 as
                                                                                                                                                                 libc::c_int
                                                                                                                                                                 +
                                                                                                                                                                 30
                                                                                                                                                                     as
                                                                                                                                                                     libc::c_int)
                                                                                                                                                                as
                                                                                                                                                                s8;
                                                                                                                                                        if gSaveContext.inventory.ammo[gItemSlots[ITEM_SLINGSHOT
                                                                                                                                                                                                      as
                                                                                                                                                                                                      libc::c_int
                                                                                                                                                                                                      as
                                                                                                                                                                                                      usize]
                                                                                                                                                                                           as
                                                                                                                                                                                           usize]
                                                                                                                                                               as
                                                                                                                                                               libc::c_int
                                                                                                                                                               >=
                                                                                                                                                               gUpgradeCapacities[UPG_BULLET_BAG
                                                                                                                                                                                      as
                                                                                                                                                                                      libc::c_int
                                                                                                                                                                                      as
                                                                                                                                                                                      usize][((gSaveContext.inventory.upgrades
                                                                                                                                                                                                   &
                                                                                                                                                                                                   gUpgradeMasks[UPG_BULLET_BAG
                                                                                                                                                                                                                     as
                                                                                                                                                                                                                     libc::c_int
                                                                                                                                                                                                                     as
                                                                                                                                                                                                                     usize])
                                                                                                                                                                                                  as
                                                                                                                                                                                                  s32
                                                                                                                                                                                                  >>
                                                                                                                                                                                                  gUpgradeShifts[UPG_BULLET_BAG
                                                                                                                                                                                                                     as
                                                                                                                                                                                                                     libc::c_int
                                                                                                                                                                                                                     as
                                                                                                                                                                                                                     usize]
                                                                                                                                                                                                      as
                                                                                                                                                                                                      libc::c_int)
                                                                                                                                                                                                 as
                                                                                                                                                                                                 usize]
                                                                                                                                                                   as
                                                                                                                                                                   libc::c_int
                                                                                                                                                           {
                                                                                                                                                            gSaveContext.inventory.ammo[gItemSlots[ITEM_SLINGSHOT
                                                                                                                                                                                                       as
                                                                                                                                                                                                       libc::c_int
                                                                                                                                                                                                       as
                                                                                                                                                                                                       usize]
                                                                                                                                                                                            as
                                                                                                                                                                                            usize]
                                                                                                                                                                =
                                                                                                                                                                gUpgradeCapacities[UPG_BULLET_BAG
                                                                                                                                                                                       as
                                                                                                                                                                                       libc::c_int
                                                                                                                                                                                       as
                                                                                                                                                                                       usize][((gSaveContext.inventory.upgrades
                                                                                                                                                                                                    &
                                                                                                                                                                                                    gUpgradeMasks[UPG_BULLET_BAG
                                                                                                                                                                                                                      as
                                                                                                                                                                                                                      libc::c_int
                                                                                                                                                                                                                      as
                                                                                                                                                                                                                      usize])
                                                                                                                                                                                                   as
                                                                                                                                                                                                   s32
                                                                                                                                                                                                   >>
                                                                                                                                                                                                   gUpgradeShifts[UPG_BULLET_BAG
                                                                                                                                                                                                                      as
                                                                                                                                                                                                                      libc::c_int
                                                                                                                                                                                                                      as
                                                                                                                                                                                                                      usize]
                                                                                                                                                                                                       as
                                                                                                                                                                                                       libc::c_int)
                                                                                                                                                                                                  as
                                                                                                                                                                                                  usize]
                                                                                                                                                                    as
                                                                                                                                                                    s8
                                                                                                                                                        }
                                                                                                                                                        if gSaveContext.itemGetInf[1
                                                                                                                                                                                       as
                                                                                                                                                                                       libc::c_int
                                                                                                                                                                                       as
                                                                                                                                                                                       usize]
                                                                                                                                                               as
                                                                                                                                                               libc::c_int
                                                                                                                                                               &
                                                                                                                                                               8
                                                                                                                                                                   as
                                                                                                                                                                   libc::c_int
                                                                                                                                                               ==
                                                                                                                                                               0
                                                                                                                                                           {
                                                                                                                                                            gSaveContext.itemGetInf[1
                                                                                                                                                                                        as
                                                                                                                                                                                        libc::c_int
                                                                                                                                                                                        as
                                                                                                                                                                                        usize]
                                                                                                                                                                =
                                                                                                                                                                (gSaveContext.itemGetInf[1
                                                                                                                                                                                             as
                                                                                                                                                                                             libc::c_int
                                                                                                                                                                                             as
                                                                                                                                                                                             usize]
                                                                                                                                                                     as
                                                                                                                                                                     libc::c_int
                                                                                                                                                                     |
                                                                                                                                                                     8
                                                                                                                                                                         as
                                                                                                                                                                         libc::c_int)
                                                                                                                                                                    as
                                                                                                                                                                    u16_0;
                                                                                                                                                            return ITEM_NONE
                                                                                                                                                                       as
                                                                                                                                                                       libc::c_int
                                                                                                                                                                       as
                                                                                                                                                                       u8_0
                                                                                                                                                        }
                                                                                                                                                        return ITEM_SEEDS
                                                                                                                                                                   as
                                                                                                                                                                   libc::c_int
                                                                                                                                                                   as
                                                                                                                                                                   u8_0
                                                                                                                                                    } else {
                                                                                                                                                        if item
                                                                                                                                                               as
                                                                                                                                                               libc::c_int
                                                                                                                                                               ==
                                                                                                                                                               ITEM_OCARINA_FAIRY
                                                                                                                                                                   as
                                                                                                                                                                   libc::c_int
                                                                                                                                                           {
                                                                                                                                                            gSaveContext.inventory.items[gItemSlots[ITEM_OCARINA_FAIRY
                                                                                                                                                                                                        as
                                                                                                                                                                                                        libc::c_int
                                                                                                                                                                                                        as
                                                                                                                                                                                                        usize]
                                                                                                                                                                                             as
                                                                                                                                                                                             usize]
                                                                                                                                                                =
                                                                                                                                                                ITEM_OCARINA_FAIRY
                                                                                                                                                                    as
                                                                                                                                                                    libc::c_int
                                                                                                                                                                    as
                                                                                                                                                                    u8_0;
                                                                                                                                                            return ITEM_NONE
                                                                                                                                                                       as
                                                                                                                                                                       libc::c_int
                                                                                                                                                                       as
                                                                                                                                                                       u8_0
                                                                                                                                                        } else {
                                                                                                                                                            if item
                                                                                                                                                                   as
                                                                                                                                                                   libc::c_int
                                                                                                                                                                   ==
                                                                                                                                                                   ITEM_OCARINA_TIME
                                                                                                                                                                       as
                                                                                                                                                                       libc::c_int
                                                                                                                                                               {
                                                                                                                                                                gSaveContext.inventory.items[gItemSlots[ITEM_OCARINA_TIME
                                                                                                                                                                                                            as
                                                                                                                                                                                                            libc::c_int
                                                                                                                                                                                                            as
                                                                                                                                                                                                            usize]
                                                                                                                                                                                                 as
                                                                                                                                                                                                 usize]
                                                                                                                                                                    =
                                                                                                                                                                    ITEM_OCARINA_TIME
                                                                                                                                                                        as
                                                                                                                                                                        libc::c_int
                                                                                                                                                                        as
                                                                                                                                                                        u8_0;
                                                                                                                                                                i
                                                                                                                                                                    =
                                                                                                                                                                    1
                                                                                                                                                                        as
                                                                                                                                                                        libc::c_int
                                                                                                                                                                        as
                                                                                                                                                                        s16;
                                                                                                                                                                while (i
                                                                                                                                                                           as
                                                                                                                                                                           libc::c_int)
                                                                                                                                                                          <
                                                                                                                                                                          4
                                                                                                                                                                              as
                                                                                                                                                                              libc::c_int
                                                                                                                                                                      {
                                                                                                                                                                    if gSaveContext.equips.buttonItems[i
                                                                                                                                                                                                           as
                                                                                                                                                                                                           usize]
                                                                                                                                                                           as
                                                                                                                                                                           libc::c_int
                                                                                                                                                                           ==
                                                                                                                                                                           ITEM_OCARINA_FAIRY
                                                                                                                                                                               as
                                                                                                                                                                               libc::c_int
                                                                                                                                                                       {
                                                                                                                                                                        gSaveContext.equips.buttonItems[i
                                                                                                                                                                                                            as
                                                                                                                                                                                                            usize]
                                                                                                                                                                            =
                                                                                                                                                                            ITEM_OCARINA_TIME
                                                                                                                                                                                as
                                                                                                                                                                                libc::c_int
                                                                                                                                                                                as
                                                                                                                                                                                u8_0;
                                                                                                                                                                        Interface_LoadItemIcon1(globalCtx,
                                                                                                                                                                                                i
                                                                                                                                                                                                    as
                                                                                                                                                                                                    u16_0);
                                                                                                                                                                    }
                                                                                                                                                                    i
                                                                                                                                                                        +=
                                                                                                                                                                        1
                                                                                                                                                                }
                                                                                                                                                                return ITEM_NONE
                                                                                                                                                                           as
                                                                                                                                                                           libc::c_int
                                                                                                                                                                           as
                                                                                                                                                                           u8_0
                                                                                                                                                            } else {
                                                                                                                                                                if item
                                                                                                                                                                       as
                                                                                                                                                                       libc::c_int
                                                                                                                                                                       ==
                                                                                                                                                                       ITEM_BEAN
                                                                                                                                                                           as
                                                                                                                                                                           libc::c_int
                                                                                                                                                                   {
                                                                                                                                                                    if gSaveContext.inventory.items[slot
                                                                                                                                                                                                        as
                                                                                                                                                                                                        usize]
                                                                                                                                                                           as
                                                                                                                                                                           libc::c_int
                                                                                                                                                                           ==
                                                                                                                                                                           ITEM_NONE
                                                                                                                                                                               as
                                                                                                                                                                               libc::c_int
                                                                                                                                                                       {
                                                                                                                                                                        gSaveContext.inventory.items[gItemSlots[item
                                                                                                                                                                                                                    as
                                                                                                                                                                                                                    usize]
                                                                                                                                                                                                         as
                                                                                                                                                                                                         usize]
                                                                                                                                                                            =
                                                                                                                                                                            item;
                                                                                                                                                                        gSaveContext.inventory.ammo[gItemSlots[ITEM_BEAN
                                                                                                                                                                                                                   as
                                                                                                                                                                                                                   libc::c_int
                                                                                                                                                                                                                   as
                                                                                                                                                                                                                   usize]
                                                                                                                                                                                                        as
                                                                                                                                                                                                        usize]
                                                                                                                                                                            =
                                                                                                                                                                            1
                                                                                                                                                                                as
                                                                                                                                                                                libc::c_int
                                                                                                                                                                                as
                                                                                                                                                                                s8;
                                                                                                                                                                        gSaveContext.inventory.ammo[gItemSlots[(ITEM_BEAN
                                                                                                                                                                                                                    as
                                                                                                                                                                                                                    libc::c_int
                                                                                                                                                                                                                    +
                                                                                                                                                                                                                    1
                                                                                                                                                                                                                        as
                                                                                                                                                                                                                        libc::c_int)
                                                                                                                                                                                                                   as
                                                                                                                                                                                                                   usize]
                                                                                                                                                                                                        as
                                                                                                                                                                                                        usize]
                                                                                                                                                                            =
                                                                                                                                                                            1
                                                                                                                                                                                as
                                                                                                                                                                                libc::c_int
                                                                                                                                                                                as
                                                                                                                                                                                s8
                                                                                                                                                                    } else {
                                                                                                                                                                        gSaveContext.inventory.ammo[gItemSlots[ITEM_BEAN
                                                                                                                                                                                                                   as
                                                                                                                                                                                                                   libc::c_int
                                                                                                                                                                                                                   as
                                                                                                                                                                                                                   usize]
                                                                                                                                                                                                        as
                                                                                                                                                                                                        usize]
                                                                                                                                                                            +=
                                                                                                                                                                            1;
                                                                                                                                                                        gSaveContext.inventory.ammo[gItemSlots[(ITEM_BEAN
                                                                                                                                                                                                                    as
                                                                                                                                                                                                                    libc::c_int
                                                                                                                                                                                                                    +
                                                                                                                                                                                                                    1
                                                                                                                                                                                                                        as
                                                                                                                                                                                                                        libc::c_int)
                                                                                                                                                                                                                   as
                                                                                                                                                                                                                   usize]
                                                                                                                                                                                                        as
                                                                                                                                                                                                        usize]
                                                                                                                                                                            +=
                                                                                                                                                                            1
                                                                                                                                                                    }
                                                                                                                                                                    return ITEM_NONE
                                                                                                                                                                               as
                                                                                                                                                                               libc::c_int
                                                                                                                                                                               as
                                                                                                                                                                               u8_0
                                                                                                                                                                } else {
                                                                                                                                                                    if item
                                                                                                                                                                           as
                                                                                                                                                                           libc::c_int
                                                                                                                                                                           ==
                                                                                                                                                                           ITEM_HEART_PIECE_2
                                                                                                                                                                               as
                                                                                                                                                                               libc::c_int
                                                                                                                                                                           ||
                                                                                                                                                                           item
                                                                                                                                                                               as
                                                                                                                                                                               libc::c_int
                                                                                                                                                                               ==
                                                                                                                                                                               ITEM_HEART_PIECE
                                                                                                                                                                                   as
                                                                                                                                                                                   libc::c_int
                                                                                                                                                                       {
                                                                                                                                                                        gSaveContext.inventory.questItems
                                                                                                                                                                            =
                                                                                                                                                                            (gSaveContext.inventory.questItems
                                                                                                                                                                                 as
                                                                                                                                                                                 libc::c_uint).wrapping_add(((1
                                                                                                                                                                                                                  as
                                                                                                                                                                                                                  libc::c_int)
                                                                                                                                                                                                                 <<
                                                                                                                                                                                                                 QUEST_HEART_PIECE
                                                                                                                                                                                                                     as
                                                                                                                                                                                                                     libc::c_int
                                                                                                                                                                                                                     +
                                                                                                                                                                                                                     4
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         libc::c_int)
                                                                                                                                                                                                                as
                                                                                                                                                                                                                libc::c_uint)
                                                                                                                                                                                as
                                                                                                                                                                                u32_0
                                                                                                                                                                                as
                                                                                                                                                                                u32_0;
                                                                                                                                                                        return ITEM_NONE
                                                                                                                                                                                   as
                                                                                                                                                                                   libc::c_int
                                                                                                                                                                                   as
                                                                                                                                                                                   u8_0
                                                                                                                                                                    } else {
                                                                                                                                                                        if item
                                                                                                                                                                               as
                                                                                                                                                                               libc::c_int
                                                                                                                                                                               ==
                                                                                                                                                                               ITEM_HEART_CONTAINER
                                                                                                                                                                                   as
                                                                                                                                                                                   libc::c_int
                                                                                                                                                                           {
                                                                                                                                                                            gSaveContext.healthCapacity
                                                                                                                                                                                =
                                                                                                                                                                                (gSaveContext.healthCapacity
                                                                                                                                                                                     as
                                                                                                                                                                                     libc::c_int
                                                                                                                                                                                     +
                                                                                                                                                                                     0x10
                                                                                                                                                                                         as
                                                                                                                                                                                         libc::c_int)
                                                                                                                                                                                    as
                                                                                                                                                                                    s16;
                                                                                                                                                                            gSaveContext.health
                                                                                                                                                                                =
                                                                                                                                                                                (gSaveContext.health
                                                                                                                                                                                     as
                                                                                                                                                                                     libc::c_int
                                                                                                                                                                                     +
                                                                                                                                                                                     0x10
                                                                                                                                                                                         as
                                                                                                                                                                                         libc::c_int)
                                                                                                                                                                                    as
                                                                                                                                                                                    s16;
                                                                                                                                                                            return ITEM_NONE
                                                                                                                                                                                       as
                                                                                                                                                                                       libc::c_int
                                                                                                                                                                                       as
                                                                                                                                                                                       u8_0
                                                                                                                                                                        } else {
                                                                                                                                                                            if item
                                                                                                                                                                                   as
                                                                                                                                                                                   libc::c_int
                                                                                                                                                                                   ==
                                                                                                                                                                                   ITEM_HEART
                                                                                                                                                                                       as
                                                                                                                                                                                       libc::c_int
                                                                                                                                                                               {
                                                                                                                                                                                osSyncPrintf(b"\xe5\x9b\x9e\xe5\xbe\xa9\xe3\x83\x8f\xe3\x83\xbc\xe3\x83\x88\xe5\x9b\x9e\xe5\xbe\xa9\xe3\x83\x8f\xe3\x83\xbc\xe3\x83\x88\xe5\x9b\x9e\xe5\xbe\xa9\xe3\x83\x8f\xe3\x83\xbc\xe3\x83\x88\n\x00"
                                                                                                                                                                                                 as
                                                                                                                                                                                                 *const u8
                                                                                                                                                                                                 as
                                                                                                                                                                                                 *const libc::c_char);
                                                                                                                                                                                Health_ChangeBy(globalCtx,
                                                                                                                                                                                                0x10
                                                                                                                                                                                                    as
                                                                                                                                                                                                    libc::c_int
                                                                                                                                                                                                    as
                                                                                                                                                                                                    s16);
                                                                                                                                                                                return item
                                                                                                                                                                            } else {
                                                                                                                                                                                if item
                                                                                                                                                                                       as
                                                                                                                                                                                       libc::c_int
                                                                                                                                                                                       ==
                                                                                                                                                                                       ITEM_MAGIC_SMALL
                                                                                                                                                                                           as
                                                                                                                                                                                           libc::c_int
                                                                                                                                                                                   {
                                                                                                                                                                                    if gSaveContext.unk_13F0
                                                                                                                                                                                           as
                                                                                                                                                                                           libc::c_int
                                                                                                                                                                                           !=
                                                                                                                                                                                           10
                                                                                                                                                                                               as
                                                                                                                                                                                               libc::c_int
                                                                                                                                                                                       {
                                                                                                                                                                                        Magic_Fill(globalCtx);
                                                                                                                                                                                    }
                                                                                                                                                                                    func_80087708(globalCtx,
                                                                                                                                                                                                  12
                                                                                                                                                                                                      as
                                                                                                                                                                                                      libc::c_int
                                                                                                                                                                                                      as
                                                                                                                                                                                                      s16,
                                                                                                                                                                                                  5
                                                                                                                                                                                                      as
                                                                                                                                                                                                      libc::c_int
                                                                                                                                                                                                      as
                                                                                                                                                                                                      s16);
                                                                                                                                                                                    if gSaveContext.infTable[25
                                                                                                                                                                                                                 as
                                                                                                                                                                                                                 libc::c_int
                                                                                                                                                                                                                 as
                                                                                                                                                                                                                 usize]
                                                                                                                                                                                           as
                                                                                                                                                                                           libc::c_int
                                                                                                                                                                                           &
                                                                                                                                                                                           0x100
                                                                                                                                                                                               as
                                                                                                                                                                                               libc::c_int
                                                                                                                                                                                           ==
                                                                                                                                                                                           0
                                                                                                                                                                                       {
                                                                                                                                                                                        gSaveContext.infTable[25
                                                                                                                                                                                                                  as
                                                                                                                                                                                                                  libc::c_int
                                                                                                                                                                                                                  as
                                                                                                                                                                                                                  usize]
                                                                                                                                                                                            =
                                                                                                                                                                                            (gSaveContext.infTable[25
                                                                                                                                                                                                                       as
                                                                                                                                                                                                                       libc::c_int
                                                                                                                                                                                                                       as
                                                                                                                                                                                                                       usize]
                                                                                                                                                                                                 as
                                                                                                                                                                                                 libc::c_int
                                                                                                                                                                                                 |
                                                                                                                                                                                                 0x100
                                                                                                                                                                                                     as
                                                                                                                                                                                                     libc::c_int)
                                                                                                                                                                                                as
                                                                                                                                                                                                u16_0;
                                                                                                                                                                                        return ITEM_NONE
                                                                                                                                                                                                   as
                                                                                                                                                                                                   libc::c_int
                                                                                                                                                                                                   as
                                                                                                                                                                                                   u8_0
                                                                                                                                                                                    }
                                                                                                                                                                                    return item
                                                                                                                                                                                } else {
                                                                                                                                                                                    if item
                                                                                                                                                                                           as
                                                                                                                                                                                           libc::c_int
                                                                                                                                                                                           ==
                                                                                                                                                                                           ITEM_MAGIC_LARGE
                                                                                                                                                                                               as
                                                                                                                                                                                               libc::c_int
                                                                                                                                                                                       {
                                                                                                                                                                                        if gSaveContext.unk_13F0
                                                                                                                                                                                               as
                                                                                                                                                                                               libc::c_int
                                                                                                                                                                                               !=
                                                                                                                                                                                               10
                                                                                                                                                                                                   as
                                                                                                                                                                                                   libc::c_int
                                                                                                                                                                                           {
                                                                                                                                                                                            Magic_Fill(globalCtx);
                                                                                                                                                                                        }
                                                                                                                                                                                        func_80087708(globalCtx,
                                                                                                                                                                                                      24
                                                                                                                                                                                                          as
                                                                                                                                                                                                          libc::c_int
                                                                                                                                                                                                          as
                                                                                                                                                                                                          s16,
                                                                                                                                                                                                      5
                                                                                                                                                                                                          as
                                                                                                                                                                                                          libc::c_int
                                                                                                                                                                                                          as
                                                                                                                                                                                                          s16);
                                                                                                                                                                                        if gSaveContext.infTable[25
                                                                                                                                                                                                                     as
                                                                                                                                                                                                                     libc::c_int
                                                                                                                                                                                                                     as
                                                                                                                                                                                                                     usize]
                                                                                                                                                                                               as
                                                                                                                                                                                               libc::c_int
                                                                                                                                                                                               &
                                                                                                                                                                                               0x100
                                                                                                                                                                                                   as
                                                                                                                                                                                                   libc::c_int
                                                                                                                                                                                               ==
                                                                                                                                                                                               0
                                                                                                                                                                                           {
                                                                                                                                                                                            gSaveContext.infTable[25
                                                                                                                                                                                                                      as
                                                                                                                                                                                                                      libc::c_int
                                                                                                                                                                                                                      as
                                                                                                                                                                                                                      usize]
                                                                                                                                                                                                =
                                                                                                                                                                                                (gSaveContext.infTable[25
                                                                                                                                                                                                                           as
                                                                                                                                                                                                                           libc::c_int
                                                                                                                                                                                                                           as
                                                                                                                                                                                                                           usize]
                                                                                                                                                                                                     as
                                                                                                                                                                                                     libc::c_int
                                                                                                                                                                                                     |
                                                                                                                                                                                                     0x100
                                                                                                                                                                                                         as
                                                                                                                                                                                                         libc::c_int)
                                                                                                                                                                                                    as
                                                                                                                                                                                                    u16_0;
                                                                                                                                                                                            return ITEM_NONE
                                                                                                                                                                                                       as
                                                                                                                                                                                                       libc::c_int
                                                                                                                                                                                                       as
                                                                                                                                                                                                       u8_0
                                                                                                                                                                                        }
                                                                                                                                                                                        return item
                                                                                                                                                                                    } else {
                                                                                                                                                                                        if item
                                                                                                                                                                                               as
                                                                                                                                                                                               libc::c_int
                                                                                                                                                                                               >=
                                                                                                                                                                                               ITEM_RUPEE_GREEN
                                                                                                                                                                                                   as
                                                                                                                                                                                                   libc::c_int
                                                                                                                                                                                               &&
                                                                                                                                                                                               item
                                                                                                                                                                                                   as
                                                                                                                                                                                                   libc::c_int
                                                                                                                                                                                                   <=
                                                                                                                                                                                                   ITEM_INVALID_8
                                                                                                                                                                                                       as
                                                                                                                                                                                                       libc::c_int
                                                                                                                                                                                           {
                                                                                                                                                                                            Rupees_ChangeBy(sAmmoRefillCounts[(item
                                                                                                                                                                                                                                   as
                                                                                                                                                                                                                                   libc::c_int
                                                                                                                                                                                                                                   -
                                                                                                                                                                                                                                   ITEM_RUPEE_GREEN
                                                                                                                                                                                                                                       as
                                                                                                                                                                                                                                       libc::c_int
                                                                                                                                                                                                                                   +
                                                                                                                                                                                                                                   10
                                                                                                                                                                                                                                       as
                                                                                                                                                                                                                                       libc::c_int)
                                                                                                                                                                                                                                  as
                                                                                                                                                                                                                                  usize]);
                                                                                                                                                                                            return ITEM_NONE
                                                                                                                                                                                                       as
                                                                                                                                                                                                       libc::c_int
                                                                                                                                                                                                       as
                                                                                                                                                                                                       u8_0
                                                                                                                                                                                        } else {
                                                                                                                                                                                            if item
                                                                                                                                                                                                   as
                                                                                                                                                                                                   libc::c_int
                                                                                                                                                                                                   ==
                                                                                                                                                                                                   ITEM_BOTTLE
                                                                                                                                                                                                       as
                                                                                                                                                                                                       libc::c_int
                                                                                                                                                                                               {
                                                                                                                                                                                                temp
                                                                                                                                                                                                    =
                                                                                                                                                                                                    gItemSlots[item
                                                                                                                                                                                                                   as
                                                                                                                                                                                                                   usize]
                                                                                                                                                                                                        as
                                                                                                                                                                                                        s16;
                                                                                                                                                                                                i
                                                                                                                                                                                                    =
                                                                                                                                                                                                    0
                                                                                                                                                                                                        as
                                                                                                                                                                                                        libc::c_int
                                                                                                                                                                                                        as
                                                                                                                                                                                                        s16;
                                                                                                                                                                                                while (i
                                                                                                                                                                                                           as
                                                                                                                                                                                                           libc::c_int)
                                                                                                                                                                                                          <
                                                                                                                                                                                                          4
                                                                                                                                                                                                              as
                                                                                                                                                                                                              libc::c_int
                                                                                                                                                                                                      {
                                                                                                                                                                                                    if gSaveContext.inventory.items[(temp
                                                                                                                                                                                                                                         as
                                                                                                                                                                                                                                         libc::c_int
                                                                                                                                                                                                                                         +
                                                                                                                                                                                                                                         i
                                                                                                                                                                                                                                             as
                                                                                                                                                                                                                                             libc::c_int)
                                                                                                                                                                                                                                        as
                                                                                                                                                                                                                                        usize]
                                                                                                                                                                                                           as
                                                                                                                                                                                                           libc::c_int
                                                                                                                                                                                                           ==
                                                                                                                                                                                                           ITEM_NONE
                                                                                                                                                                                                               as
                                                                                                                                                                                                               libc::c_int
                                                                                                                                                                                                       {
                                                                                                                                                                                                        gSaveContext.inventory.items[(temp
                                                                                                                                                                                                                                          as
                                                                                                                                                                                                                                          libc::c_int
                                                                                                                                                                                                                                          +
                                                                                                                                                                                                                                          i
                                                                                                                                                                                                                                              as
                                                                                                                                                                                                                                              libc::c_int)
                                                                                                                                                                                                                                         as
                                                                                                                                                                                                                                         usize]
                                                                                                                                                                                                            =
                                                                                                                                                                                                            item;
                                                                                                                                                                                                        return ITEM_NONE
                                                                                                                                                                                                                   as
                                                                                                                                                                                                                   libc::c_int
                                                                                                                                                                                                                   as
                                                                                                                                                                                                                   u8_0
                                                                                                                                                                                                    }
                                                                                                                                                                                                    i
                                                                                                                                                                                                        +=
                                                                                                                                                                                                        1
                                                                                                                                                                                                }
                                                                                                                                                                                            } else if item
                                                                                                                                                                                                          as
                                                                                                                                                                                                          libc::c_int
                                                                                                                                                                                                          >=
                                                                                                                                                                                                          ITEM_POTION_RED
                                                                                                                                                                                                              as
                                                                                                                                                                                                              libc::c_int
                                                                                                                                                                                                          &&
                                                                                                                                                                                                          item
                                                                                                                                                                                                              as
                                                                                                                                                                                                              libc::c_int
                                                                                                                                                                                                              <=
                                                                                                                                                                                                              ITEM_POE
                                                                                                                                                                                                                  as
                                                                                                                                                                                                                  libc::c_int
                                                                                                                                                                                                          ||
                                                                                                                                                                                                          item
                                                                                                                                                                                                              as
                                                                                                                                                                                                              libc::c_int
                                                                                                                                                                                                              ==
                                                                                                                                                                                                              ITEM_MILK
                                                                                                                                                                                                                  as
                                                                                                                                                                                                                  libc::c_int
                                                                                                                                                                                             {
                                                                                                                                                                                                temp
                                                                                                                                                                                                    =
                                                                                                                                                                                                    gItemSlots[item
                                                                                                                                                                                                                   as
                                                                                                                                                                                                                   usize]
                                                                                                                                                                                                        as
                                                                                                                                                                                                        s16;
                                                                                                                                                                                                if item
                                                                                                                                                                                                       as
                                                                                                                                                                                                       libc::c_int
                                                                                                                                                                                                       !=
                                                                                                                                                                                                       ITEM_MILK_BOTTLE
                                                                                                                                                                                                           as
                                                                                                                                                                                                           libc::c_int
                                                                                                                                                                                                       &&
                                                                                                                                                                                                       item
                                                                                                                                                                                                           as
                                                                                                                                                                                                           libc::c_int
                                                                                                                                                                                                           !=
                                                                                                                                                                                                           ITEM_LETTER_RUTO
                                                                                                                                                                                                               as
                                                                                                                                                                                                               libc::c_int
                                                                                                                                                                                                   {
                                                                                                                                                                                                    if item
                                                                                                                                                                                                           as
                                                                                                                                                                                                           libc::c_int
                                                                                                                                                                                                           ==
                                                                                                                                                                                                           ITEM_MILK
                                                                                                                                                                                                               as
                                                                                                                                                                                                               libc::c_int
                                                                                                                                                                                                       {
                                                                                                                                                                                                        item
                                                                                                                                                                                                            =
                                                                                                                                                                                                            ITEM_MILK_BOTTLE
                                                                                                                                                                                                                as
                                                                                                                                                                                                                libc::c_int
                                                                                                                                                                                                                as
                                                                                                                                                                                                                u8_0;
                                                                                                                                                                                                        temp
                                                                                                                                                                                                            =
                                                                                                                                                                                                            gItemSlots[item
                                                                                                                                                                                                                           as
                                                                                                                                                                                                                           usize]
                                                                                                                                                                                                                as
                                                                                                                                                                                                                s16
                                                                                                                                                                                                    }
                                                                                                                                                                                                    i
                                                                                                                                                                                                        =
                                                                                                                                                                                                        0
                                                                                                                                                                                                            as
                                                                                                                                                                                                            libc::c_int
                                                                                                                                                                                                            as
                                                                                                                                                                                                            s16;
                                                                                                                                                                                                    while (i
                                                                                                                                                                                                               as
                                                                                                                                                                                                               libc::c_int)
                                                                                                                                                                                                              <
                                                                                                                                                                                                              4
                                                                                                                                                                                                                  as
                                                                                                                                                                                                                  libc::c_int
                                                                                                                                                                                                          {
                                                                                                                                                                                                        if gSaveContext.inventory.items[(temp
                                                                                                                                                                                                                                             as
                                                                                                                                                                                                                                             libc::c_int
                                                                                                                                                                                                                                             +
                                                                                                                                                                                                                                             i
                                                                                                                                                                                                                                                 as
                                                                                                                                                                                                                                                 libc::c_int)
                                                                                                                                                                                                                                            as
                                                                                                                                                                                                                                            usize]
                                                                                                                                                                                                               as
                                                                                                                                                                                                               libc::c_int
                                                                                                                                                                                                               ==
                                                                                                                                                                                                               ITEM_BOTTLE
                                                                                                                                                                                                                   as
                                                                                                                                                                                                                   libc::c_int
                                                                                                                                                                                                           {
                                                                                                                                                                                                            // "Item_Pt(1)=%d Item_Pt(2)=%d Item_Pt(3)=%d   Empty Bottle=%d   Content=%d"
                                                                                                                                                                                                            osSyncPrintf(b"Item_Pt(1)=%d Item_Pt(2)=%d Item_Pt(3)=%d   \xe7\xa9\xba\xe7\x93\xb6=%d   \xe4\xb8\xad\xe5\x91\xb3=%d\n\x00"
                                                                                                                                                                                                                             as
                                                                                                                                                                                                                             *const u8
                                                                                                                                                                                                                             as
                                                                                                                                                                                                                             *const libc::c_char,
                                                                                                                                                                                                                         gSaveContext.equips.cButtonSlots[0
                                                                                                                                                                                                                                                              as
                                                                                                                                                                                                                                                              libc::c_int
                                                                                                                                                                                                                                                              as
                                                                                                                                                                                                                                                              usize]
                                                                                                                                                                                                                             as
                                                                                                                                                                                                                             libc::c_int,
                                                                                                                                                                                                                         gSaveContext.equips.cButtonSlots[1
                                                                                                                                                                                                                                                              as
                                                                                                                                                                                                                                                              libc::c_int
                                                                                                                                                                                                                                                              as
                                                                                                                                                                                                                                                              usize]
                                                                                                                                                                                                                             as
                                                                                                                                                                                                                             libc::c_int,
                                                                                                                                                                                                                         gSaveContext.equips.cButtonSlots[2
                                                                                                                                                                                                                                                              as
                                                                                                                                                                                                                                                              libc::c_int
                                                                                                                                                                                                                                                              as
                                                                                                                                                                                                                                                              usize]
                                                                                                                                                                                                                             as
                                                                                                                                                                                                                             libc::c_int,
                                                                                                                                                                                                                         temp
                                                                                                                                                                                                                             as
                                                                                                                                                                                                                             libc::c_int
                                                                                                                                                                                                                             +
                                                                                                                                                                                                                             i
                                                                                                                                                                                                                                 as
                                                                                                                                                                                                                                 libc::c_int,
                                                                                                                                                                                                                         item
                                                                                                                                                                                                                             as
                                                                                                                                                                                                                             libc::c_int);
                                                                                                                                                                                                            if temp
                                                                                                                                                                                                                   as
                                                                                                                                                                                                                   libc::c_int
                                                                                                                                                                                                                   +
                                                                                                                                                                                                                   i
                                                                                                                                                                                                                       as
                                                                                                                                                                                                                       libc::c_int
                                                                                                                                                                                                                   ==
                                                                                                                                                                                                                   gSaveContext.equips.cButtonSlots[0
                                                                                                                                                                                                                                                        as
                                                                                                                                                                                                                                                        libc::c_int
                                                                                                                                                                                                                                                        as
                                                                                                                                                                                                                                                        usize]
                                                                                                                                                                                                                       as
                                                                                                                                                                                                                       libc::c_int
                                                                                                                                                                                                               {
                                                                                                                                                                                                                gSaveContext.equips.buttonItems[1
                                                                                                                                                                                                                                                    as
                                                                                                                                                                                                                                                    libc::c_int
                                                                                                                                                                                                                                                    as
                                                                                                                                                                                                                                                    usize]
                                                                                                                                                                                                                    =
                                                                                                                                                                                                                    item;
                                                                                                                                                                                                                Interface_LoadItemIcon2(globalCtx,
                                                                                                                                                                                                                                        1
                                                                                                                                                                                                                                            as
                                                                                                                                                                                                                                            libc::c_int
                                                                                                                                                                                                                                            as
                                                                                                                                                                                                                                            u16_0);
                                                                                                                                                                                                                gSaveContext.buttonStatus[1
                                                                                                                                                                                                                                              as
                                                                                                                                                                                                                                              libc::c_int
                                                                                                                                                                                                                                              as
                                                                                                                                                                                                                                              usize]
                                                                                                                                                                                                                    =
                                                                                                                                                                                                                    BTN_ENABLED
                                                                                                                                                                                                                        as
                                                                                                                                                                                                                        libc::c_int
                                                                                                                                                                                                                        as
                                                                                                                                                                                                                        u8_0
                                                                                                                                                                                                            } else if temp
                                                                                                                                                                                                                          as
                                                                                                                                                                                                                          libc::c_int
                                                                                                                                                                                                                          +
                                                                                                                                                                                                                          i
                                                                                                                                                                                                                              as
                                                                                                                                                                                                                              libc::c_int
                                                                                                                                                                                                                          ==
                                                                                                                                                                                                                          gSaveContext.equips.cButtonSlots[1
                                                                                                                                                                                                                                                               as
                                                                                                                                                                                                                                                               libc::c_int
                                                                                                                                                                                                                                                               as
                                                                                                                                                                                                                                                               usize]
                                                                                                                                                                                                                              as
                                                                                                                                                                                                                              libc::c_int
                                                                                                                                                                                                             {
                                                                                                                                                                                                                gSaveContext.equips.buttonItems[2
                                                                                                                                                                                                                                                    as
                                                                                                                                                                                                                                                    libc::c_int
                                                                                                                                                                                                                                                    as
                                                                                                                                                                                                                                                    usize]
                                                                                                                                                                                                                    =
                                                                                                                                                                                                                    item;
                                                                                                                                                                                                                Interface_LoadItemIcon2(globalCtx,
                                                                                                                                                                                                                                        2
                                                                                                                                                                                                                                            as
                                                                                                                                                                                                                                            libc::c_int
                                                                                                                                                                                                                                            as
                                                                                                                                                                                                                                            u16_0);
                                                                                                                                                                                                                gSaveContext.buttonStatus[2
                                                                                                                                                                                                                                              as
                                                                                                                                                                                                                                              libc::c_int
                                                                                                                                                                                                                                              as
                                                                                                                                                                                                                                              usize]
                                                                                                                                                                                                                    =
                                                                                                                                                                                                                    BTN_ENABLED
                                                                                                                                                                                                                        as
                                                                                                                                                                                                                        libc::c_int
                                                                                                                                                                                                                        as
                                                                                                                                                                                                                        u8_0
                                                                                                                                                                                                            } else if temp
                                                                                                                                                                                                                          as
                                                                                                                                                                                                                          libc::c_int
                                                                                                                                                                                                                          +
                                                                                                                                                                                                                          i
                                                                                                                                                                                                                              as
                                                                                                                                                                                                                              libc::c_int
                                                                                                                                                                                                                          ==
                                                                                                                                                                                                                          gSaveContext.equips.cButtonSlots[2
                                                                                                                                                                                                                                                               as
                                                                                                                                                                                                                                                               libc::c_int
                                                                                                                                                                                                                                                               as
                                                                                                                                                                                                                                                               usize]
                                                                                                                                                                                                                              as
                                                                                                                                                                                                                              libc::c_int
                                                                                                                                                                                                             {
                                                                                                                                                                                                                gSaveContext.equips.buttonItems[3
                                                                                                                                                                                                                                                    as
                                                                                                                                                                                                                                                    libc::c_int
                                                                                                                                                                                                                                                    as
                                                                                                                                                                                                                                                    usize]
                                                                                                                                                                                                                    =
                                                                                                                                                                                                                    item;
                                                                                                                                                                                                                Interface_LoadItemIcon1(globalCtx,
                                                                                                                                                                                                                                        3
                                                                                                                                                                                                                                            as
                                                                                                                                                                                                                                            libc::c_int
                                                                                                                                                                                                                                            as
                                                                                                                                                                                                                                            u16_0);
                                                                                                                                                                                                                gSaveContext.buttonStatus[3
                                                                                                                                                                                                                                              as
                                                                                                                                                                                                                                              libc::c_int
                                                                                                                                                                                                                                              as
                                                                                                                                                                                                                                              usize]
                                                                                                                                                                                                                    =
                                                                                                                                                                                                                    BTN_ENABLED
                                                                                                                                                                                                                        as
                                                                                                                                                                                                                        libc::c_int
                                                                                                                                                                                                                        as
                                                                                                                                                                                                                        u8_0
                                                                                                                                                                                                            }
                                                                                                                                                                                                            gSaveContext.inventory.items[(temp
                                                                                                                                                                                                                                              as
                                                                                                                                                                                                                                              libc::c_int
                                                                                                                                                                                                                                              +
                                                                                                                                                                                                                                              i
                                                                                                                                                                                                                                                  as
                                                                                                                                                                                                                                                  libc::c_int)
                                                                                                                                                                                                                                             as
                                                                                                                                                                                                                                             usize]
                                                                                                                                                                                                                =
                                                                                                                                                                                                                item;
                                                                                                                                                                                                            return ITEM_NONE
                                                                                                                                                                                                                       as
                                                                                                                                                                                                                       libc::c_int
                                                                                                                                                                                                                       as
                                                                                                                                                                                                                       u8_0
                                                                                                                                                                                                        }
                                                                                                                                                                                                        i
                                                                                                                                                                                                            +=
                                                                                                                                                                                                            1
                                                                                                                                                                                                    }
                                                                                                                                                                                                } else {
                                                                                                                                                                                                    i
                                                                                                                                                                                                        =
                                                                                                                                                                                                        0
                                                                                                                                                                                                            as
                                                                                                                                                                                                            libc::c_int
                                                                                                                                                                                                            as
                                                                                                                                                                                                            s16;
                                                                                                                                                                                                    while (i
                                                                                                                                                                                                               as
                                                                                                                                                                                                               libc::c_int)
                                                                                                                                                                                                              <
                                                                                                                                                                                                              4
                                                                                                                                                                                                                  as
                                                                                                                                                                                                                  libc::c_int
                                                                                                                                                                                                          {
                                                                                                                                                                                                        if gSaveContext.inventory.items[(temp
                                                                                                                                                                                                                                             as
                                                                                                                                                                                                                                             libc::c_int
                                                                                                                                                                                                                                             +
                                                                                                                                                                                                                                             i
                                                                                                                                                                                                                                                 as
                                                                                                                                                                                                                                                 libc::c_int)
                                                                                                                                                                                                                                            as
                                                                                                                                                                                                                                            usize]
                                                                                                                                                                                                               as
                                                                                                                                                                                                               libc::c_int
                                                                                                                                                                                                               ==
                                                                                                                                                                                                               ITEM_NONE
                                                                                                                                                                                                                   as
                                                                                                                                                                                                                   libc::c_int
                                                                                                                                                                                                           {
                                                                                                                                                                                                            gSaveContext.inventory.items[(temp
                                                                                                                                                                                                                                              as
                                                                                                                                                                                                                                              libc::c_int
                                                                                                                                                                                                                                              +
                                                                                                                                                                                                                                              i
                                                                                                                                                                                                                                                  as
                                                                                                                                                                                                                                                  libc::c_int)
                                                                                                                                                                                                                                             as
                                                                                                                                                                                                                                             usize]
                                                                                                                                                                                                                =
                                                                                                                                                                                                                item;
                                                                                                                                                                                                            return ITEM_NONE
                                                                                                                                                                                                                       as
                                                                                                                                                                                                                       libc::c_int
                                                                                                                                                                                                                       as
                                                                                                                                                                                                                       u8_0
                                                                                                                                                                                                        }
                                                                                                                                                                                                        i
                                                                                                                                                                                                            +=
                                                                                                                                                                                                            1
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            } else if item
                                                                                                                                                                                                          as
                                                                                                                                                                                                          libc::c_int
                                                                                                                                                                                                          >=
                                                                                                                                                                                                          ITEM_WEIRD_EGG
                                                                                                                                                                                                              as
                                                                                                                                                                                                              libc::c_int
                                                                                                                                                                                                          &&
                                                                                                                                                                                                          item
                                                                                                                                                                                                              as
                                                                                                                                                                                                              libc::c_int
                                                                                                                                                                                                              <=
                                                                                                                                                                                                              ITEM_CLAIM_CHECK
                                                                                                                                                                                                                  as
                                                                                                                                                                                                                  libc::c_int
                                                                                                                                                                                             {
                                                                                                                                                                                                if item
                                                                                                                                                                                                       as
                                                                                                                                                                                                       libc::c_int
                                                                                                                                                                                                       ==
                                                                                                                                                                                                       ITEM_SAW
                                                                                                                                                                                                           as
                                                                                                                                                                                                           libc::c_int
                                                                                                                                                                                                   {
                                                                                                                                                                                                    gSaveContext.itemGetInf[1
                                                                                                                                                                                                                                as
                                                                                                                                                                                                                                libc::c_int
                                                                                                                                                                                                                                as
                                                                                                                                                                                                                                usize]
                                                                                                                                                                                                        =
                                                                                                                                                                                                        (gSaveContext.itemGetInf[1
                                                                                                                                                                                                                                     as
                                                                                                                                                                                                                                     libc::c_int
                                                                                                                                                                                                                                     as
                                                                                                                                                                                                                                     usize]
                                                                                                                                                                                                             as
                                                                                                                                                                                                             libc::c_int
                                                                                                                                                                                                             |
                                                                                                                                                                                                             0x8000
                                                                                                                                                                                                                 as
                                                                                                                                                                                                                 libc::c_int)
                                                                                                                                                                                                            as
                                                                                                                                                                                                            u16_0
                                                                                                                                                                                                }
                                                                                                                                                                                                temp
                                                                                                                                                                                                    =
                                                                                                                                                                                                    gSaveContext.inventory.items[gItemSlots[item
                                                                                                                                                                                                                                                as
                                                                                                                                                                                                                                                usize]
                                                                                                                                                                                                                                     as
                                                                                                                                                                                                                                     usize]
                                                                                                                                                                                                        as
                                                                                                                                                                                                        s16;
                                                                                                                                                                                                gSaveContext.inventory.items[gItemSlots[item
                                                                                                                                                                                                                                            as
                                                                                                                                                                                                                                            usize]
                                                                                                                                                                                                                                 as
                                                                                                                                                                                                                                 usize]
                                                                                                                                                                                                    =
                                                                                                                                                                                                    item;
                                                                                                                                                                                                if temp
                                                                                                                                                                                                       as
                                                                                                                                                                                                       libc::c_int
                                                                                                                                                                                                       !=
                                                                                                                                                                                                       ITEM_NONE
                                                                                                                                                                                                           as
                                                                                                                                                                                                           libc::c_int
                                                                                                                                                                                                   {
                                                                                                                                                                                                    i
                                                                                                                                                                                                        =
                                                                                                                                                                                                        1
                                                                                                                                                                                                            as
                                                                                                                                                                                                            libc::c_int
                                                                                                                                                                                                            as
                                                                                                                                                                                                            s16;
                                                                                                                                                                                                    while (i
                                                                                                                                                                                                               as
                                                                                                                                                                                                               libc::c_int)
                                                                                                                                                                                                              <
                                                                                                                                                                                                              4
                                                                                                                                                                                                                  as
                                                                                                                                                                                                                  libc::c_int
                                                                                                                                                                                                          {
                                                                                                                                                                                                        if temp
                                                                                                                                                                                                               as
                                                                                                                                                                                                               libc::c_int
                                                                                                                                                                                                               ==
                                                                                                                                                                                                               gSaveContext.equips.buttonItems[i
                                                                                                                                                                                                                                                   as
                                                                                                                                                                                                                                                   usize]
                                                                                                                                                                                                                   as
                                                                                                                                                                                                                   libc::c_int
                                                                                                                                                                                                           {
                                                                                                                                                                                                            if item
                                                                                                                                                                                                                   as
                                                                                                                                                                                                                   libc::c_int
                                                                                                                                                                                                                   !=
                                                                                                                                                                                                                   ITEM_SOLD_OUT
                                                                                                                                                                                                                       as
                                                                                                                                                                                                                       libc::c_int
                                                                                                                                                                                                               {
                                                                                                                                                                                                                gSaveContext.equips.buttonItems[i
                                                                                                                                                                                                                                                    as
                                                                                                                                                                                                                                                    usize]
                                                                                                                                                                                                                    =
                                                                                                                                                                                                                    item;
                                                                                                                                                                                                                Interface_LoadItemIcon1(globalCtx,
                                                                                                                                                                                                                                        i
                                                                                                                                                                                                                                            as
                                                                                                                                                                                                                                            u16_0);
                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                gSaveContext.equips.buttonItems[i
                                                                                                                                                                                                                                                    as
                                                                                                                                                                                                                                                    usize]
                                                                                                                                                                                                                    =
                                                                                                                                                                                                                    ITEM_NONE
                                                                                                                                                                                                                        as
                                                                                                                                                                                                                        libc::c_int
                                                                                                                                                                                                                        as
                                                                                                                                                                                                                        u8_0
                                                                                                                                                                                                            }
                                                                                                                                                                                                            return ITEM_NONE
                                                                                                                                                                                                                       as
                                                                                                                                                                                                                       libc::c_int
                                                                                                                                                                                                                       as
                                                                                                                                                                                                                       u8_0
                                                                                                                                                                                                        }
                                                                                                                                                                                                        i
                                                                                                                                                                                                            +=
                                                                                                                                                                                                            1
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                                return ITEM_NONE
                                                                                                                                                                                                           as
                                                                                                                                                                                                           libc::c_int
                                                                                                                                                                                                           as
                                                                                                                                                                                                           u8_0
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    temp = gSaveContext.inventory.items[slot as usize] as s16;
    osSyncPrintf(b"Item_Register(%d)=%d  %d\n\x00" as *const u8 as
                     *const libc::c_char, slot as libc::c_int,
                 item as libc::c_int, temp as libc::c_int);
    gSaveContext.inventory.items[gItemSlots[item as usize] as usize] = item;
    return temp as u8_0;
}
#[no_mangle]
pub unsafe extern "C" fn Item_CheckObtainability(mut item: u8_0) -> u8_0 {
    let mut i: s16 = 0;
    let mut slot: s16 = gItemSlots[item as usize] as s16;
    let mut temp: s32 = 0;
    if item as libc::c_int >= ITEM_STICKS_5 as libc::c_int {
        slot =
            gItemSlots[sExtraItemBases[(item as libc::c_int -
                                            ITEM_STICKS_5 as libc::c_int) as
                                           usize] as usize] as s16
    }
    osSyncPrintf(b"\x1b[32m\x00" as *const u8 as *const libc::c_char);
    osSyncPrintf(b"item_get_non_setting=%d  pt=%d  z=%x\n\x00" as *const u8 as
                     *const libc::c_char, item as libc::c_int,
                 slot as libc::c_int,
                 gSaveContext.inventory.items[slot as usize] as libc::c_int);
    osSyncPrintf(b"\x1b[m\x00" as *const u8 as *const libc::c_char);
    if item as libc::c_int >= ITEM_MEDALLION_FOREST as libc::c_int &&
           item as libc::c_int <= ITEM_MEDALLION_LIGHT as libc::c_int {
        return ITEM_NONE as libc::c_int as u8_0
    } else {
        if item as libc::c_int >= ITEM_KOKIRI_EMERALD as libc::c_int &&
               item as libc::c_int <= ITEM_SKULL_TOKEN as libc::c_int {
            return ITEM_NONE as libc::c_int as u8_0
        } else {
            if item as libc::c_int >= ITEM_SWORD_KOKIRI as libc::c_int &&
                   item as libc::c_int <= ITEM_SWORD_BGS as libc::c_int {
                if item as libc::c_int == ITEM_SWORD_BGS as libc::c_int {
                    return ITEM_NONE as libc::c_int as u8_0
                } else if gBitFlags[(item as libc::c_int -
                                         ITEM_SWORD_KOKIRI as libc::c_int) as
                                        usize] <<
                              gEquipShifts[EQUIP_SWORD as libc::c_int as
                                               usize] as libc::c_int &
                              gSaveContext.inventory.equipment as libc::c_uint
                              != 0 {
                    return item
                } else { return ITEM_NONE as libc::c_int as u8_0 }
            } else {
                if item as libc::c_int >= ITEM_SHIELD_DEKU as libc::c_int &&
                       item as libc::c_int <=
                           ITEM_SHIELD_MIRROR as libc::c_int {
                    if gBitFlags[(item as libc::c_int -
                                      ITEM_SHIELD_DEKU as libc::c_int) as
                                     usize] <<
                           gEquipShifts[EQUIP_SHIELD as libc::c_int as usize]
                               as libc::c_int &
                           gSaveContext.inventory.equipment as libc::c_uint !=
                           0 {
                        return item
                    } else { return ITEM_NONE as libc::c_int as u8_0 }
                } else {
                    if item as libc::c_int >= ITEM_TUNIC_KOKIRI as libc::c_int
                           &&
                           item as libc::c_int <=
                               ITEM_TUNIC_ZORA as libc::c_int {
                        if gBitFlags[(item as libc::c_int -
                                          ITEM_TUNIC_KOKIRI as libc::c_int) as
                                         usize] <<
                               gEquipShifts[EQUIP_TUNIC as libc::c_int as
                                                usize] as libc::c_int &
                               gSaveContext.inventory.equipment as
                                   libc::c_uint != 0 {
                            return item
                        } else { return ITEM_NONE as libc::c_int as u8_0 }
                    } else {
                        if item as libc::c_int >=
                               ITEM_BOOTS_KOKIRI as libc::c_int &&
                               item as libc::c_int <=
                                   ITEM_BOOTS_HOVER as libc::c_int {
                            if gBitFlags[(item as libc::c_int -
                                              ITEM_BOOTS_KOKIRI as
                                                  libc::c_int) as usize] <<
                                   gEquipShifts[EQUIP_BOOTS as libc::c_int as
                                                    usize] as libc::c_int &
                                   gSaveContext.inventory.equipment as
                                       libc::c_uint != 0 {
                                return item
                            } else { return ITEM_NONE as libc::c_int as u8_0 }
                        } else {
                            if item as libc::c_int ==
                                   ITEM_KEY_BOSS as libc::c_int ||
                                   item as libc::c_int ==
                                       ITEM_COMPASS as libc::c_int ||
                                   item as libc::c_int ==
                                       ITEM_DUNGEON_MAP as libc::c_int {
                                return ITEM_NONE as libc::c_int as u8_0
                            } else {
                                if item as libc::c_int ==
                                       ITEM_KEY_SMALL as libc::c_int {
                                    return ITEM_NONE as libc::c_int as u8_0
                                } else {
                                    if item as libc::c_int >=
                                           ITEM_SLINGSHOT as libc::c_int &&
                                           item as libc::c_int <=
                                               ITEM_BOMBCHU as libc::c_int {
                                        return ITEM_NONE as libc::c_int as
                                                   u8_0
                                    } else {
                                        if item as libc::c_int ==
                                               ITEM_BOMBCHUS_5 as libc::c_int
                                               ||
                                               item as libc::c_int ==
                                                   ITEM_BOMBCHUS_20 as
                                                       libc::c_int {
                                            return ITEM_NONE as libc::c_int as
                                                       u8_0
                                        } else {
                                            if item as libc::c_int ==
                                                   ITEM_QUIVER_30 as
                                                       libc::c_int ||
                                                   item as libc::c_int ==
                                                       ITEM_BOW as libc::c_int
                                               {
                                                if (gSaveContext.inventory.upgrades
                                                        &
                                                        gUpgradeMasks[UPG_QUIVER
                                                                          as
                                                                          libc::c_int
                                                                          as
                                                                          usize])
                                                       as s32 >>
                                                       gUpgradeShifts[UPG_QUIVER
                                                                          as
                                                                          libc::c_int
                                                                          as
                                                                          usize]
                                                           as libc::c_int ==
                                                       0 as libc::c_int {
                                                    return ITEM_NONE as
                                                               libc::c_int as
                                                               u8_0
                                                } else {
                                                    return 0 as libc::c_int as
                                                               u8_0
                                                }
                                            } else {
                                                if item as libc::c_int ==
                                                       ITEM_QUIVER_40 as
                                                           libc::c_int ||
                                                       item as libc::c_int ==
                                                           ITEM_QUIVER_50 as
                                                               libc::c_int {
                                                    return ITEM_NONE as
                                                               libc::c_int as
                                                               u8_0
                                                } else {
                                                    if item as libc::c_int ==
                                                           ITEM_BULLET_BAG_40
                                                               as libc::c_int
                                                           ||
                                                           item as libc::c_int
                                                               ==
                                                               ITEM_BULLET_BAG_50
                                                                   as
                                                                   libc::c_int
                                                       {
                                                        return ITEM_NONE as
                                                                   libc::c_int
                                                                   as u8_0
                                                    } else {
                                                        if item as libc::c_int
                                                               ==
                                                               ITEM_BOMB_BAG_20
                                                                   as
                                                                   libc::c_int
                                                               ||
                                                               item as
                                                                   libc::c_int
                                                                   ==
                                                                   ITEM_BOMB
                                                                       as
                                                                       libc::c_int
                                                           {
                                                            if (gSaveContext.inventory.upgrades
                                                                    &
                                                                    gUpgradeMasks[UPG_BOMB_BAG
                                                                                      as
                                                                                      libc::c_int
                                                                                      as
                                                                                      usize])
                                                                   as s32 >>
                                                                   gUpgradeShifts[UPG_BOMB_BAG
                                                                                      as
                                                                                      libc::c_int
                                                                                      as
                                                                                      usize]
                                                                       as
                                                                       libc::c_int
                                                                   ==
                                                                   0 as
                                                                       libc::c_int
                                                               {
                                                                return ITEM_NONE
                                                                           as
                                                                           libc::c_int
                                                                           as
                                                                           u8_0
                                                            } else {
                                                                return 0 as
                                                                           libc::c_int
                                                                           as
                                                                           u8_0
                                                            }
                                                        } else {
                                                            if item as
                                                                   libc::c_int
                                                                   >=
                                                                   ITEM_STICK_UPGRADE_20
                                                                       as
                                                                       libc::c_int
                                                                   &&
                                                                   item as
                                                                       libc::c_int
                                                                       <=
                                                                       ITEM_NUT_UPGRADE_40
                                                                           as
                                                                           libc::c_int
                                                               {
                                                                return ITEM_NONE
                                                                           as
                                                                           libc::c_int
                                                                           as
                                                                           u8_0
                                                            } else {
                                                                if item as
                                                                       libc::c_int
                                                                       >=
                                                                       ITEM_BOMB_BAG_30
                                                                           as
                                                                           libc::c_int
                                                                       &&
                                                                       item as
                                                                           libc::c_int
                                                                           <=
                                                                           ITEM_WALLET_GIANT
                                                                               as
                                                                               libc::c_int
                                                                   {
                                                                    return ITEM_NONE
                                                                               as
                                                                               libc::c_int
                                                                               as
                                                                               u8_0
                                                                } else {
                                                                    if item as
                                                                           libc::c_int
                                                                           ==
                                                                           ITEM_LONGSHOT
                                                                               as
                                                                               libc::c_int
                                                                       {
                                                                        return ITEM_NONE
                                                                                   as
                                                                                   libc::c_int
                                                                                   as
                                                                                   u8_0
                                                                    } else {
                                                                        if item
                                                                               as
                                                                               libc::c_int
                                                                               ==
                                                                               ITEM_SEEDS
                                                                                   as
                                                                                   libc::c_int
                                                                               ||
                                                                               item
                                                                                   as
                                                                                   libc::c_int
                                                                                   ==
                                                                                   ITEM_SEEDS_30
                                                                                       as
                                                                                       libc::c_int
                                                                           {
                                                                            if gSaveContext.itemGetInf[1
                                                                                                           as
                                                                                                           libc::c_int
                                                                                                           as
                                                                                                           usize]
                                                                                   as
                                                                                   libc::c_int
                                                                                   &
                                                                                   0x8
                                                                                       as
                                                                                       libc::c_int
                                                                                   ==
                                                                                   0
                                                                               {
                                                                                return ITEM_NONE
                                                                                           as
                                                                                           libc::c_int
                                                                                           as
                                                                                           u8_0
                                                                            } else {
                                                                                return ITEM_SEEDS
                                                                                           as
                                                                                           libc::c_int
                                                                                           as
                                                                                           u8_0
                                                                            }
                                                                        } else {
                                                                            if item
                                                                                   as
                                                                                   libc::c_int
                                                                                   ==
                                                                                   ITEM_BEAN
                                                                                       as
                                                                                       libc::c_int
                                                                               {
                                                                                return ITEM_NONE
                                                                                           as
                                                                                           libc::c_int
                                                                                           as
                                                                                           u8_0
                                                                            } else {
                                                                                if item
                                                                                       as
                                                                                       libc::c_int
                                                                                       ==
                                                                                       ITEM_HEART_PIECE_2
                                                                                           as
                                                                                           libc::c_int
                                                                                       ||
                                                                                       item
                                                                                           as
                                                                                           libc::c_int
                                                                                           ==
                                                                                           ITEM_HEART_PIECE
                                                                                               as
                                                                                               libc::c_int
                                                                                   {
                                                                                    return ITEM_NONE
                                                                                               as
                                                                                               libc::c_int
                                                                                               as
                                                                                               u8_0
                                                                                } else {
                                                                                    if item
                                                                                           as
                                                                                           libc::c_int
                                                                                           ==
                                                                                           ITEM_HEART_CONTAINER
                                                                                               as
                                                                                               libc::c_int
                                                                                       {
                                                                                        return ITEM_NONE
                                                                                                   as
                                                                                                   libc::c_int
                                                                                                   as
                                                                                                   u8_0
                                                                                    } else {
                                                                                        if item
                                                                                               as
                                                                                               libc::c_int
                                                                                               ==
                                                                                               ITEM_HEART
                                                                                                   as
                                                                                                   libc::c_int
                                                                                           {
                                                                                            return ITEM_HEART
                                                                                                       as
                                                                                                       libc::c_int
                                                                                                       as
                                                                                                       u8_0
                                                                                        } else {
                                                                                            if item
                                                                                                   as
                                                                                                   libc::c_int
                                                                                                   ==
                                                                                                   ITEM_MAGIC_SMALL
                                                                                                       as
                                                                                                       libc::c_int
                                                                                                   ||
                                                                                                   item
                                                                                                       as
                                                                                                       libc::c_int
                                                                                                       ==
                                                                                                       ITEM_MAGIC_LARGE
                                                                                                           as
                                                                                                           libc::c_int
                                                                                               {
                                                                                                // "Magic Pot Get_Inf_Table( 25, 0x0100)=%d"
                                                                                                osSyncPrintf(b"\xe9\xad\x94\xe6\xb3\x95\xe3\x81\xae\xe5\xa3\xb7 Get_Inf_Table( 25, 0x0100)=%d\n\x00"
                                                                                                                 as
                                                                                                                 *const u8
                                                                                                                 as
                                                                                                                 *const libc::c_char,
                                                                                                             gSaveContext.infTable[25
                                                                                                                                       as
                                                                                                                                       libc::c_int
                                                                                                                                       as
                                                                                                                                       usize]
                                                                                                                 as
                                                                                                                 libc::c_int
                                                                                                                 &
                                                                                                                 0x100
                                                                                                                     as
                                                                                                                     libc::c_int); // "Item Purge (%d)"
                                                                                                if gSaveContext.infTable[25
                                                                                                                             as
                                                                                                                             libc::c_int
                                                                                                                             as
                                                                                                                             usize]
                                                                                                       as
                                                                                                       libc::c_int
                                                                                                       &
                                                                                                       0x100
                                                                                                           as
                                                                                                           libc::c_int
                                                                                                       ==
                                                                                                       0
                                                                                                   {
                                                                                                    return ITEM_NONE
                                                                                                               as
                                                                                                               libc::c_int
                                                                                                               as
                                                                                                               u8_0
                                                                                                } else {
                                                                                                    return item
                                                                                                }
                                                                                            } else {
                                                                                                if item
                                                                                                       as
                                                                                                       libc::c_int
                                                                                                       >=
                                                                                                       ITEM_RUPEE_GREEN
                                                                                                           as
                                                                                                           libc::c_int
                                                                                                       &&
                                                                                                       item
                                                                                                           as
                                                                                                           libc::c_int
                                                                                                           <=
                                                                                                           ITEM_INVALID_8
                                                                                                               as
                                                                                                               libc::c_int
                                                                                                   {
                                                                                                    return ITEM_NONE
                                                                                                               as
                                                                                                               libc::c_int
                                                                                                               as
                                                                                                               u8_0
                                                                                                } else {
                                                                                                    if item
                                                                                                           as
                                                                                                           libc::c_int
                                                                                                           ==
                                                                                                           ITEM_BOTTLE
                                                                                                               as
                                                                                                               libc::c_int
                                                                                                       {
                                                                                                        return ITEM_NONE
                                                                                                                   as
                                                                                                                   libc::c_int
                                                                                                                   as
                                                                                                                   u8_0
                                                                                                    } else {
                                                                                                        if item
                                                                                                               as
                                                                                                               libc::c_int
                                                                                                               >=
                                                                                                               ITEM_POTION_RED
                                                                                                                   as
                                                                                                                   libc::c_int
                                                                                                               &&
                                                                                                               item
                                                                                                                   as
                                                                                                                   libc::c_int
                                                                                                                   <=
                                                                                                                   ITEM_POE
                                                                                                                       as
                                                                                                                       libc::c_int
                                                                                                               ||
                                                                                                               item
                                                                                                                   as
                                                                                                                   libc::c_int
                                                                                                                   ==
                                                                                                                   ITEM_MILK
                                                                                                                       as
                                                                                                                       libc::c_int
                                                                                                           {
                                                                                                            temp
                                                                                                                =
                                                                                                                gItemSlots[item
                                                                                                                               as
                                                                                                                               usize]
                                                                                                                    as
                                                                                                                    s32;
                                                                                                            if item
                                                                                                                   as
                                                                                                                   libc::c_int
                                                                                                                   !=
                                                                                                                   ITEM_MILK_BOTTLE
                                                                                                                       as
                                                                                                                       libc::c_int
                                                                                                                   &&
                                                                                                                   item
                                                                                                                       as
                                                                                                                       libc::c_int
                                                                                                                       !=
                                                                                                                       ITEM_LETTER_RUTO
                                                                                                                           as
                                                                                                                           libc::c_int
                                                                                                               {
                                                                                                                if item
                                                                                                                       as
                                                                                                                       libc::c_int
                                                                                                                       ==
                                                                                                                       ITEM_MILK
                                                                                                                           as
                                                                                                                           libc::c_int
                                                                                                                   {
                                                                                                                    item
                                                                                                                        =
                                                                                                                        ITEM_MILK_BOTTLE
                                                                                                                            as
                                                                                                                            libc::c_int
                                                                                                                            as
                                                                                                                            u8_0;
                                                                                                                    temp
                                                                                                                        =
                                                                                                                        gItemSlots[item
                                                                                                                                       as
                                                                                                                                       usize]
                                                                                                                            as
                                                                                                                            s32
                                                                                                                }
                                                                                                                i
                                                                                                                    =
                                                                                                                    0
                                                                                                                        as
                                                                                                                        libc::c_int
                                                                                                                        as
                                                                                                                        s16;
                                                                                                                while (i
                                                                                                                           as
                                                                                                                           libc::c_int)
                                                                                                                          <
                                                                                                                          4
                                                                                                                              as
                                                                                                                              libc::c_int
                                                                                                                      {
                                                                                                                    if gSaveContext.inventory.items[(temp
                                                                                                                                                         +
                                                                                                                                                         i
                                                                                                                                                             as
                                                                                                                                                             libc::c_int)
                                                                                                                                                        as
                                                                                                                                                        usize]
                                                                                                                           as
                                                                                                                           libc::c_int
                                                                                                                           ==
                                                                                                                           ITEM_BOTTLE
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                       {
                                                                                                                        return ITEM_NONE
                                                                                                                                   as
                                                                                                                                   libc::c_int
                                                                                                                                   as
                                                                                                                                   u8_0
                                                                                                                    }
                                                                                                                    i
                                                                                                                        +=
                                                                                                                        1
                                                                                                                }
                                                                                                            } else {
                                                                                                                i
                                                                                                                    =
                                                                                                                    0
                                                                                                                        as
                                                                                                                        libc::c_int
                                                                                                                        as
                                                                                                                        s16;
                                                                                                                while (i
                                                                                                                           as
                                                                                                                           libc::c_int)
                                                                                                                          <
                                                                                                                          4
                                                                                                                              as
                                                                                                                              libc::c_int
                                                                                                                      {
                                                                                                                    if gSaveContext.inventory.items[(temp
                                                                                                                                                         +
                                                                                                                                                         i
                                                                                                                                                             as
                                                                                                                                                             libc::c_int)
                                                                                                                                                        as
                                                                                                                                                        usize]
                                                                                                                           as
                                                                                                                           libc::c_int
                                                                                                                           ==
                                                                                                                           ITEM_NONE
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                       {
                                                                                                                        return ITEM_NONE
                                                                                                                                   as
                                                                                                                                   libc::c_int
                                                                                                                                   as
                                                                                                                                   u8_0
                                                                                                                    }
                                                                                                                    i
                                                                                                                        +=
                                                                                                                        1
                                                                                                                }
                                                                                                            }
                                                                                                        } else if item
                                                                                                                      as
                                                                                                                      libc::c_int
                                                                                                                      >=
                                                                                                                      ITEM_WEIRD_EGG
                                                                                                                          as
                                                                                                                          libc::c_int
                                                                                                                      &&
                                                                                                                      item
                                                                                                                          as
                                                                                                                          libc::c_int
                                                                                                                          <=
                                                                                                                          ITEM_CLAIM_CHECK
                                                                                                                              as
                                                                                                                              libc::c_int
                                                                                                         {
                                                                                                            return ITEM_NONE
                                                                                                                       as
                                                                                                                       libc::c_int
                                                                                                                       as
                                                                                                                       u8_0
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return gSaveContext.inventory.items[slot as usize];
}
#[no_mangle]
pub unsafe extern "C" fn Inventory_DeleteItem(mut item: u16_0,
                                              mut invSlot: u16_0) {
    let mut i: s16 = 0;
    if item as libc::c_int == ITEM_BEAN as libc::c_int {
        gSaveContext.inventory.ammo[gItemSlots[(ITEM_BEAN as libc::c_int +
                                                    1 as libc::c_int) as
                                                   usize] as usize] =
            0 as libc::c_int as s8
    }
    gSaveContext.inventory.items[invSlot as usize] =
        ITEM_NONE as libc::c_int as u8_0;
    osSyncPrintf(b"\nItem_Register(%d)\n\x00" as *const u8 as
                     *const libc::c_char, invSlot as libc::c_int,
                 gSaveContext.inventory.items[invSlot as usize] as
                     libc::c_int);
    i = 1 as libc::c_int as s16;
    while (i as libc::c_int) < 4 as libc::c_int {
        if gSaveContext.equips.buttonItems[i as usize] as libc::c_int ==
               item as libc::c_int {
            gSaveContext.equips.buttonItems[i as usize] =
                ITEM_NONE as libc::c_int as u8_0;
            gSaveContext.equips.cButtonSlots[(i as libc::c_int -
                                                  1 as libc::c_int) as usize]
                = SLOT_NONE as libc::c_int as u8_0
        }
        i += 1
    };
}
#[no_mangle]
pub unsafe extern "C" fn Inventory_ReplaceItem(mut globalCtx:
                                                   *mut GlobalContext,
                                               mut oldItem: u16_0,
                                               mut newItem: u16_0) -> s32 {
    let mut i: s16 = 0;
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) <
              (::std::mem::size_of::<[u8_0; 24]>() as
                   libc::c_ulong).wrapping_div(::std::mem::size_of::<u8_0>()
                                                   as libc::c_ulong) as s32 {
        if gSaveContext.inventory.items[i as usize] as libc::c_int ==
               oldItem as libc::c_int {
            gSaveContext.inventory.items[i as usize] = newItem as u8_0;
            osSyncPrintf(b"\xe3\x82\xa2\xe3\x82\xa4\xe3\x83\x86\xe3\x83\xa0\xe6\xb6\x88\xe5\x8e\xbb(%d)\n\x00"
                             as *const u8 as *const libc::c_char,
                         i as libc::c_int);
            i = 1 as libc::c_int as s16;
            while (i as libc::c_int) < 4 as libc::c_int {
                if gSaveContext.equips.buttonItems[i as usize] as libc::c_int
                       == oldItem as libc::c_int {
                    gSaveContext.equips.buttonItems[i as usize] =
                        newItem as u8_0;
                    Interface_LoadItemIcon1(globalCtx, i as u16_0);
                    break ;
                } else { i += 1 }
            }
            return 1 as libc::c_int
        }
        i += 1
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn Inventory_HasEmptyBottle() -> s32 {
    let mut items: *mut u8_0 = gSaveContext.inventory.items.as_mut_ptr();
    if *items.offset(SLOT_BOTTLE_1 as libc::c_int as isize) as libc::c_int ==
           ITEM_BOTTLE as libc::c_int {
        return 1 as libc::c_int
    } else if *items.offset(SLOT_BOTTLE_2 as libc::c_int as isize) as
                  libc::c_int == ITEM_BOTTLE as libc::c_int {
        return 1 as libc::c_int
    } else if *items.offset(SLOT_BOTTLE_3 as libc::c_int as isize) as
                  libc::c_int == ITEM_BOTTLE as libc::c_int {
        return 1 as libc::c_int
    } else if *items.offset(SLOT_BOTTLE_4 as libc::c_int as isize) as
                  libc::c_int == ITEM_BOTTLE as libc::c_int {
        return 1 as libc::c_int
    } else { return 0 as libc::c_int };
}
#[no_mangle]
pub unsafe extern "C" fn Inventory_HasSpecificBottle(mut bottleItem: u8_0)
 -> s32 {
    let mut items: *mut u8_0 = gSaveContext.inventory.items.as_mut_ptr();
    if *items.offset(SLOT_BOTTLE_1 as libc::c_int as isize) as libc::c_int ==
           bottleItem as libc::c_int {
        return 1 as libc::c_int
    } else if *items.offset(SLOT_BOTTLE_2 as libc::c_int as isize) as
                  libc::c_int == bottleItem as libc::c_int {
        return 1 as libc::c_int
    } else if *items.offset(SLOT_BOTTLE_3 as libc::c_int as isize) as
                  libc::c_int == bottleItem as libc::c_int {
        return 1 as libc::c_int
    } else if *items.offset(SLOT_BOTTLE_4 as libc::c_int as isize) as
                  libc::c_int == bottleItem as libc::c_int {
        return 1 as libc::c_int
    } else { return 0 as libc::c_int };
}
#[no_mangle]
pub unsafe extern "C" fn Inventory_UpdateBottleItem(mut globalCtx:
                                                        *mut GlobalContext,
                                                    mut item: u8_0,
                                                    mut button: u8_0) {
    osSyncPrintf(b"item_no=%x,  c_no=%x,  Pt=%x  Item_Register=%x\n\x00" as
                     *const u8 as *const libc::c_char, item as libc::c_int,
                 button as libc::c_int,
                 gSaveContext.equips.cButtonSlots[(button as libc::c_int -
                                                       1 as libc::c_int) as
                                                      usize] as libc::c_int,
                 gSaveContext.inventory.items[gSaveContext.equips.cButtonSlots[(button
                                                                                    as
                                                                                    libc::c_int
                                                                                    -
                                                                                    1
                                                                                        as
                                                                                        libc::c_int)
                                                                                   as
                                                                                   usize]
                                                  as usize] as libc::c_int);
    // Special case to only empty half of a Lon Lon Milk Bottle
    if gSaveContext.inventory.items[gSaveContext.equips.cButtonSlots[(button
                                                                          as
                                                                          libc::c_int
                                                                          -
                                                                          1 as
                                                                              libc::c_int)
                                                                         as
                                                                         usize]
                                        as usize] as libc::c_int ==
           ITEM_MILK_BOTTLE as libc::c_int &&
           item as libc::c_int == ITEM_BOTTLE as libc::c_int {
        item = ITEM_MILK_HALF as libc::c_int as u8_0
    } // "Fairy Usage＝%d"
    gSaveContext.inventory.items[gSaveContext.equips.cButtonSlots[(button as
                                                                       libc::c_int
                                                                       -
                                                                       1 as
                                                                           libc::c_int)
                                                                      as
                                                                      usize]
                                     as usize] = item;
    gSaveContext.equips.buttonItems[button as usize] = item;
    Interface_LoadItemIcon1(globalCtx, button as u16_0);
    (*globalCtx).pauseCtx.cursorItem[PAUSE_ITEM as libc::c_int as usize] =
        item as u16_0;
    gSaveContext.buttonStatus[button as usize] =
        BTN_ENABLED as libc::c_int as u8_0;
}
#[no_mangle]
pub unsafe extern "C" fn Inventory_ConsumeFairy(mut globalCtx:
                                                    *mut GlobalContext)
 -> s32 {
    let mut bottleSlot: s32 =
        gItemSlots[ITEM_FAIRY as libc::c_int as usize] as s32;
    let mut i: s16 = 0;
    let mut j: s16 = 0;
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) < 4 as libc::c_int {
        if gSaveContext.inventory.items[(bottleSlot + i as libc::c_int) as
                                            usize] as libc::c_int ==
               ITEM_FAIRY as libc::c_int {
            j = 1 as libc::c_int as s16;
            while (j as libc::c_int) < 4 as libc::c_int {
                if gSaveContext.equips.buttonItems[j as usize] as libc::c_int
                       == ITEM_FAIRY as libc::c_int {
                    gSaveContext.equips.buttonItems[j as usize] =
                        ITEM_BOTTLE as libc::c_int as u8_0;
                    Interface_LoadItemIcon1(globalCtx, j as u16_0);
                    i = 0 as libc::c_int as s16;
                    bottleSlot =
                        gSaveContext.equips.cButtonSlots[(j as libc::c_int -
                                                              1 as
                                                                  libc::c_int)
                                                             as usize] as s32;
                    break ;
                } else { j += 1 }
            }
            osSyncPrintf(b"\xe5\xa6\x96\xe7\xb2\xbe\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x9d%d\n\x00"
                             as *const u8 as *const libc::c_char, bottleSlot);
            gSaveContext.inventory.items[(bottleSlot + i as libc::c_int) as
                                             usize] =
                ITEM_BOTTLE as libc::c_int as u8_0;
            return 1 as libc::c_int
        }
        i += 1
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80086D5C(mut buf: *mut s32, mut size: u16_0) {
    let mut i: u16_0 = 0;
    i = 0 as libc::c_int as u16_0;
    while (i as libc::c_int) < size as libc::c_int {
        *buf.offset(i as isize) = 0 as libc::c_int;
        i = i.wrapping_add(1)
    };
}
#[no_mangle]
pub unsafe extern "C" fn Interface_LoadActionLabel(mut interfaceCtx:
                                                       *mut InterfaceContext,
                                                   mut action: u16_0,
                                                   mut loadOffset: s16) {
    static mut sDoActionTextures: [*mut libc::c_void; 2] =
        unsafe {
            [gAttackDoActionENGTex.as_ptr() as *mut _ as *mut libc::c_void,
             gCheckDoActionENGTex.as_ptr() as *mut _ as *mut libc::c_void]
        };
    if action as libc::c_int >= DO_ACTION_MAX as libc::c_int {
        action = DO_ACTION_NONE as libc::c_int as u16_0
    }
    if gSaveContext.language as libc::c_int != LANGUAGE_ENG as libc::c_int {
        action =
            (action as libc::c_int + DO_ACTION_MAX as libc::c_int) as u16_0
    }
    if gSaveContext.language as libc::c_int == LANGUAGE_FRA as libc::c_int {
        action =
            (action as libc::c_int + DO_ACTION_MAX as libc::c_int) as u16_0
    }
    if action as libc::c_int != DO_ACTION_NONE as libc::c_int &&
           action as libc::c_int !=
               DO_ACTION_MAX as libc::c_int + DO_ACTION_NONE as libc::c_int &&
           action as libc::c_int !=
               2 as libc::c_int * DO_ACTION_MAX as libc::c_int +
                   DO_ACTION_NONE as libc::c_int {
        osCreateMesgQueue(&mut (*interfaceCtx).loadQueue,
                          &mut (*interfaceCtx).loadMsg, 1 as libc::c_int);
        DmaMgr_SendRequest2(&mut (*interfaceCtx).dmaRequest_160,
                            (*interfaceCtx).doActionSegment.offset((loadOffset
                                                                        as
                                                                        libc::c_int
                                                                        *
                                                                        (48 as
                                                                             libc::c_int
                                                                             *
                                                                             16
                                                                                 as
                                                                                 libc::c_int
                                                                             /
                                                                             2
                                                                                 as
                                                                                 libc::c_int))
                                                                       as
                                                                       isize)
                                as u32_0,
                            (_do_action_staticSegmentRomStart.as_mut_ptr() as
                                 u32_0).wrapping_add((action as libc::c_int *
                                                          (48 as libc::c_int *
                                                               16 as
                                                                   libc::c_int
                                                               /
                                                               2 as
                                                                   libc::c_int))
                                                         as libc::c_uint),
                            (48 as libc::c_int * 16 as libc::c_int /
                                 2 as libc::c_int) as u32_0,
                            0 as libc::c_int as u32_0,
                            &mut (*interfaceCtx).loadQueue,
                            0 as *mut libc::c_void,
                            b"../z_parameter.c\x00" as *const u8 as
                                *const libc::c_char, 2145 as libc::c_int);
        osRecvMesg(&mut (*interfaceCtx).loadQueue, 0 as *mut OSMesg,
                   1 as libc::c_int);
    } else {
        gSegments[7 as libc::c_int as usize] =
            (*interfaceCtx).doActionSegment.offset(-(0x80000000 as
                                                         libc::c_uint as
                                                         isize)) as u32_0;
        func_80086D5C(gSegments[((sDoActionTextures[loadOffset as usize] as
                                      u32_0) << 4 as libc::c_int >>
                                     28 as libc::c_int) as
                                    usize].wrapping_add(sDoActionTextures[loadOffset
                                                                              as
                                                                              usize]
                                                            as u32_0 &
                                                            0xffffff as
                                                                libc::c_int as
                                                                libc::c_uint).wrapping_add(0x80000000
                                                                                               as
                                                                                               libc::c_uint)
                          as *mut libc::c_void as *mut s32,
                      (48 as libc::c_int * 16 as libc::c_int /
                           2 as libc::c_int / 4 as libc::c_int) as u16_0);
    };
}
#[no_mangle]
pub unsafe extern "C" fn Interface_SetDoAction(mut globalCtx:
                                                   *mut GlobalContext,
                                               mut action: u16_0) {
    let mut interfaceCtx: *mut InterfaceContext =
        &mut (*globalCtx).interfaceCtx;
    let mut pauseCtx: *mut PauseContext = &mut (*globalCtx).pauseCtx;
    if (*interfaceCtx).unk_1F0 as libc::c_int != action as libc::c_int {
        (*interfaceCtx).unk_1F0 = action;
        (*interfaceCtx).unk_1EC = 1 as libc::c_int as s16;
        (*interfaceCtx).unk_1F4 = 0.0f32;
        Interface_LoadActionLabel(interfaceCtx, action,
                                  1 as libc::c_int as s16);
        if (*pauseCtx).state as libc::c_int != 0 as libc::c_int {
            (*interfaceCtx).unk_1EC = 3 as libc::c_int as s16
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn Interface_SetNaviCall(mut globalCtx:
                                                   *mut GlobalContext,
                                               mut naviCallState: u16_0) {
    let mut interfaceCtx: *mut InterfaceContext =
        &mut (*globalCtx).interfaceCtx;
    if (naviCallState as libc::c_int == 0x1d as libc::c_int ||
            naviCallState as libc::c_int == 0x1e as libc::c_int) &&
           (*interfaceCtx).naviCalling == 0 &&
           (*globalCtx).csCtx.state as libc::c_int ==
               CS_STATE_IDLE as libc::c_int {
        // clang-format off
        if naviCallState as libc::c_int == 0x1e as libc::c_int {
            Audio_PlaySoundGeneral(0x6843 as libc::c_int as u16_0,
                                   &mut D_801333D4, 4 as libc::c_int as u8_0,
                                   &mut D_801333E0, &mut D_801333E0,
                                   &mut D_801333E8);
        }
        // clang-format on
        if naviCallState as libc::c_int == 0x1d as libc::c_int {
            func_800F4524(&mut D_801333D4, 0x685f as libc::c_int as u16_0,
                          32 as libc::c_int as s8);
        }
        (*interfaceCtx).naviCalling = 1 as libc::c_int as s16;
        sCUpInvisible = 0 as libc::c_int as u16_0;
        sCUpTimer = 10 as libc::c_int as u16_0
    } else if naviCallState as libc::c_int == 0x1f as libc::c_int &&
                  (*interfaceCtx).naviCalling as libc::c_int != 0 {
        (*interfaceCtx).naviCalling = 0 as libc::c_int as s16
    };
}
#[no_mangle]
pub unsafe extern "C" fn Interface_LoadActionLabelB(mut globalCtx:
                                                        *mut GlobalContext,
                                                    mut action: u16_0) {
    let mut interfaceCtx: *mut InterfaceContext =
        &mut (*globalCtx).interfaceCtx;
    if gSaveContext.language as libc::c_int != LANGUAGE_ENG as libc::c_int {
        action =
            (action as libc::c_int + DO_ACTION_MAX as libc::c_int) as u16_0
    }
    if gSaveContext.language as libc::c_int == LANGUAGE_FRA as libc::c_int {
        action =
            (action as libc::c_int + DO_ACTION_MAX as libc::c_int) as u16_0
    }
    (*interfaceCtx).unk_1FC = action as s16;
    osCreateMesgQueue(&mut (*interfaceCtx).loadQueue,
                      &mut (*interfaceCtx).loadMsg, 1 as libc::c_int);
    DmaMgr_SendRequest2(&mut (*interfaceCtx).dmaRequest_160,
                        (*interfaceCtx).doActionSegment.offset((48 as
                                                                    libc::c_int
                                                                    *
                                                                    16 as
                                                                        libc::c_int
                                                                    /
                                                                    2 as
                                                                        libc::c_int)
                                                                   as isize)
                            as u32_0,
                        (_do_action_staticSegmentRomStart.as_mut_ptr() as
                             u32_0).wrapping_add((action as libc::c_int *
                                                      (48 as libc::c_int *
                                                           16 as libc::c_int /
                                                           2 as libc::c_int))
                                                     as libc::c_uint),
                        (48 as libc::c_int * 16 as libc::c_int /
                             2 as libc::c_int) as u32_0,
                        0 as libc::c_int as u32_0,
                        &mut (*interfaceCtx).loadQueue,
                        0 as *mut libc::c_void,
                        b"../z_parameter.c\x00" as *const u8 as
                            *const libc::c_char, 2228 as libc::c_int);
    osRecvMesg(&mut (*interfaceCtx).loadQueue, 0 as *mut OSMesg,
               1 as libc::c_int);
    (*interfaceCtx).unk_1FA = 1 as libc::c_int as s16;
}
#[no_mangle]
pub unsafe extern "C" fn Health_ChangeBy(mut globalCtx: *mut GlobalContext,
                                         mut healthChange: s16) -> s32 {
    let mut heartCount: u16_0 = 0;
    let mut healthLevel: u16_0 = 0;
    // "＊＊＊＊＊ Fluctuation=%d (now=%d, max=%d) ＊＊＊"
    osSyncPrintf(b"\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a  \xe5\xa2\x97\xe6\xb8\x9b=%d (now=%d, max=%d)  \xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\x00"
                     as *const u8 as *const libc::c_char,
                 healthChange as libc::c_int,
                 gSaveContext.health as libc::c_int,
                 gSaveContext.healthCapacity as libc::c_int);
    // clang-format off
    if healthChange as libc::c_int > 0 as libc::c_int {
        Audio_PlaySoundGeneral(0x480b as libc::c_int as u16_0,
                               &mut D_801333D4, 4 as libc::c_int as u8_0,
                               &mut D_801333E0, &mut D_801333E0,
                               &mut D_801333E8);
    } else if gSaveContext.doubleDefense as libc::c_int != 0 as libc::c_int &&
                  (healthChange as libc::c_int) < 0 as libc::c_int {
        healthChange =
            (healthChange as libc::c_int >> 1 as libc::c_int) as s16;
        osSyncPrintf(b"\xe3\x83\x8f\xe3\x83\xbc\xe3\x83\x88\xe6\xb8\x9b\xe5\xb0\x91\xe5\x8d\x8a\xe5\x88\x86\xef\xbc\x81\xef\xbc\x81\xef\xbc\x9d%d\n\x00"
                         as *const u8 as *const libc::c_char,
                     healthChange as libc::c_int);
        // "Heart decrease halved!!＝%d"
    }
    // clang-format on
    gSaveContext.health =
        (gSaveContext.health as libc::c_int + healthChange as libc::c_int) as
            s16;
    if gSaveContext.health as libc::c_int >
           gSaveContext.healthCapacity as libc::c_int {
        gSaveContext.health = gSaveContext.healthCapacity
    }
    heartCount =
        (gSaveContext.health as libc::c_int % 0x10 as libc::c_int) as u16_0;
    healthLevel = heartCount;
    if heartCount as libc::c_int != 0 as libc::c_int {
        if heartCount as libc::c_int > 10 as libc::c_int {
            healthLevel = 3 as libc::c_int as u16_0
        } else if heartCount as libc::c_int > 5 as libc::c_int {
            healthLevel = 2 as libc::c_int as u16_0
        } else { healthLevel = 1 as libc::c_int as u16_0 }
    }
    // "Life=%d ＊＊＊  %d ＊＊＊＊＊＊"
    osSyncPrintf(b"  \xe3\x83\xa9\xe3\x82\xa4\xe3\x83\x95=%d  \xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a  %d  \xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\xef\xbc\x8a\n\x00"
                     as *const u8 as *const libc::c_char,
                 gSaveContext.health as libc::c_int,
                 healthLevel as libc::c_int);
    if gSaveContext.health as libc::c_int <= 0 as libc::c_int {
        gSaveContext.health = 0 as libc::c_int as s16;
        return 0 as libc::c_int
    } else { return 1 as libc::c_int };
}
#[no_mangle]
pub unsafe extern "C" fn Health_GiveHearts(mut hearts: s16) {
    gSaveContext.healthCapacity =
        (gSaveContext.healthCapacity as libc::c_int +
             hearts as libc::c_int * 0x10 as libc::c_int) as s16;
}
#[no_mangle]
pub unsafe extern "C" fn Rupees_ChangeBy(mut rupeeChange: s16) {
    gSaveContext.rupeeAccumulator =
        (gSaveContext.rupeeAccumulator as libc::c_int +
             rupeeChange as libc::c_int) as s16;
}
#[no_mangle]
pub unsafe extern "C" fn Inventory_ChangeAmmo(mut item: s16,
                                              mut ammoChange: s16) {
    // "Item = (%d)    Amount = (%d + %d)"
    osSyncPrintf(b"\xe3\x82\xa2\xe3\x82\xa4\xe3\x83\x86\xe3\x83\xa0 = (%d)    \xe6\x95\xb0 = (%d + %d)  \x00"
                     as *const u8 as *const libc::c_char, item as libc::c_int,
                 gSaveContext.inventory.ammo[gItemSlots[item as usize] as
                                                 usize] as libc::c_int,
                 ammoChange as libc::c_int);
    if item as libc::c_int == ITEM_STICK as libc::c_int {
        gSaveContext.inventory.ammo[gItemSlots[ITEM_STICK as libc::c_int as
                                                   usize] as usize] =
            (gSaveContext.inventory.ammo[gItemSlots[ITEM_STICK as libc::c_int
                                                        as usize] as usize] as
                 libc::c_int + ammoChange as libc::c_int) as s8;
        if gSaveContext.inventory.ammo[gItemSlots[ITEM_STICK as libc::c_int as
                                                      usize] as usize] as
               libc::c_int >=
               gUpgradeCapacities[UPG_STICKS as libc::c_int as
                                      usize][((gSaveContext.inventory.upgrades
                                                   &
                                                   gUpgradeMasks[UPG_STICKS as
                                                                     libc::c_int
                                                                     as
                                                                     usize])
                                                  as s32 >>
                                                  gUpgradeShifts[UPG_STICKS as
                                                                     libc::c_int
                                                                     as usize]
                                                      as libc::c_int) as
                                                 usize] as libc::c_int {
            gSaveContext.inventory.ammo[gItemSlots[ITEM_STICK as libc::c_int
                                                       as usize] as usize] =
                gUpgradeCapacities[UPG_STICKS as libc::c_int as
                                       usize][((gSaveContext.inventory.upgrades
                                                    &
                                                    gUpgradeMasks[UPG_STICKS
                                                                      as
                                                                      libc::c_int
                                                                      as
                                                                      usize])
                                                   as s32 >>
                                                   gUpgradeShifts[UPG_STICKS
                                                                      as
                                                                      libc::c_int
                                                                      as
                                                                      usize]
                                                       as libc::c_int) as
                                                  usize] as s8
        } else if (gSaveContext.inventory.ammo[gItemSlots[ITEM_STICK as
                                                              libc::c_int as
                                                              usize] as usize]
                       as libc::c_int) < 0 as libc::c_int {
            gSaveContext.inventory.ammo[gItemSlots[ITEM_STICK as libc::c_int
                                                       as usize] as usize] =
                0 as libc::c_int as s8
        }
    } else if item as libc::c_int == ITEM_NUT as libc::c_int {
        gSaveContext.inventory.ammo[gItemSlots[ITEM_NUT as libc::c_int as
                                                   usize] as usize] =
            (gSaveContext.inventory.ammo[gItemSlots[ITEM_NUT as libc::c_int as
                                                        usize] as usize] as
                 libc::c_int + ammoChange as libc::c_int) as s8;
        if gSaveContext.inventory.ammo[gItemSlots[ITEM_NUT as libc::c_int as
                                                      usize] as usize] as
               libc::c_int >=
               gUpgradeCapacities[UPG_NUTS as libc::c_int as
                                      usize][((gSaveContext.inventory.upgrades
                                                   &
                                                   gUpgradeMasks[UPG_NUTS as
                                                                     libc::c_int
                                                                     as
                                                                     usize])
                                                  as s32 >>
                                                  gUpgradeShifts[UPG_NUTS as
                                                                     libc::c_int
                                                                     as usize]
                                                      as libc::c_int) as
                                                 usize] as libc::c_int {
            gSaveContext.inventory.ammo[gItemSlots[ITEM_NUT as libc::c_int as
                                                       usize] as usize] =
                gUpgradeCapacities[UPG_NUTS as libc::c_int as
                                       usize][((gSaveContext.inventory.upgrades
                                                    &
                                                    gUpgradeMasks[UPG_NUTS as
                                                                      libc::c_int
                                                                      as
                                                                      usize])
                                                   as s32 >>
                                                   gUpgradeShifts[UPG_NUTS as
                                                                      libc::c_int
                                                                      as
                                                                      usize]
                                                       as libc::c_int) as
                                                  usize] as s8
        } else if (gSaveContext.inventory.ammo[gItemSlots[ITEM_NUT as
                                                              libc::c_int as
                                                              usize] as usize]
                       as libc::c_int) < 0 as libc::c_int {
            gSaveContext.inventory.ammo[gItemSlots[ITEM_NUT as libc::c_int as
                                                       usize] as usize] =
                0 as libc::c_int as s8
        }
    } else if item as libc::c_int == ITEM_BOMBCHU as libc::c_int {
        gSaveContext.inventory.ammo[gItemSlots[ITEM_BOMBCHU as libc::c_int as
                                                   usize] as usize] =
            (gSaveContext.inventory.ammo[gItemSlots[ITEM_BOMBCHU as
                                                        libc::c_int as usize]
                                             as usize] as libc::c_int +
                 ammoChange as libc::c_int) as s8;
        if gSaveContext.inventory.ammo[gItemSlots[ITEM_BOMBCHU as libc::c_int
                                                      as usize] as usize] as
               libc::c_int >= 50 as libc::c_int {
            gSaveContext.inventory.ammo[gItemSlots[ITEM_BOMBCHU as libc::c_int
                                                       as usize] as usize] =
                50 as libc::c_int as s8
        } else if (gSaveContext.inventory.ammo[gItemSlots[ITEM_BOMBCHU as
                                                              libc::c_int as
                                                              usize] as usize]
                       as libc::c_int) < 0 as libc::c_int {
            gSaveContext.inventory.ammo[gItemSlots[ITEM_BOMBCHU as libc::c_int
                                                       as usize] as usize] =
                0 as libc::c_int as s8
        }
    } else if item as libc::c_int == ITEM_BOW as libc::c_int {
        gSaveContext.inventory.ammo[gItemSlots[ITEM_BOW as libc::c_int as
                                                   usize] as usize] =
            (gSaveContext.inventory.ammo[gItemSlots[ITEM_BOW as libc::c_int as
                                                        usize] as usize] as
                 libc::c_int + ammoChange as libc::c_int) as s8;
        if gSaveContext.inventory.ammo[gItemSlots[ITEM_BOW as libc::c_int as
                                                      usize] as usize] as
               libc::c_int >=
               gUpgradeCapacities[UPG_QUIVER as libc::c_int as
                                      usize][((gSaveContext.inventory.upgrades
                                                   &
                                                   gUpgradeMasks[UPG_QUIVER as
                                                                     libc::c_int
                                                                     as
                                                                     usize])
                                                  as s32 >>
                                                  gUpgradeShifts[UPG_QUIVER as
                                                                     libc::c_int
                                                                     as usize]
                                                      as libc::c_int) as
                                                 usize] as libc::c_int {
            gSaveContext.inventory.ammo[gItemSlots[ITEM_BOW as libc::c_int as
                                                       usize] as usize] =
                gUpgradeCapacities[UPG_QUIVER as libc::c_int as
                                       usize][((gSaveContext.inventory.upgrades
                                                    &
                                                    gUpgradeMasks[UPG_QUIVER
                                                                      as
                                                                      libc::c_int
                                                                      as
                                                                      usize])
                                                   as s32 >>
                                                   gUpgradeShifts[UPG_QUIVER
                                                                      as
                                                                      libc::c_int
                                                                      as
                                                                      usize]
                                                       as libc::c_int) as
                                                  usize] as s8
        } else if (gSaveContext.inventory.ammo[gItemSlots[ITEM_BOW as
                                                              libc::c_int as
                                                              usize] as usize]
                       as libc::c_int) < 0 as libc::c_int {
            gSaveContext.inventory.ammo[gItemSlots[ITEM_BOW as libc::c_int as
                                                       usize] as usize] =
                0 as libc::c_int as s8
        }
    } else if item as libc::c_int == ITEM_SLINGSHOT as libc::c_int ||
                  item as libc::c_int == ITEM_SEEDS as libc::c_int {
        gSaveContext.inventory.ammo[gItemSlots[ITEM_SLINGSHOT as libc::c_int
                                                   as usize] as usize] =
            (gSaveContext.inventory.ammo[gItemSlots[ITEM_SLINGSHOT as
                                                        libc::c_int as usize]
                                             as usize] as libc::c_int +
                 ammoChange as libc::c_int) as s8;
        if gSaveContext.inventory.ammo[gItemSlots[ITEM_SLINGSHOT as
                                                      libc::c_int as usize] as
                                           usize] as libc::c_int >=
               gUpgradeCapacities[UPG_BULLET_BAG as libc::c_int as
                                      usize][((gSaveContext.inventory.upgrades
                                                   &
                                                   gUpgradeMasks[UPG_BULLET_BAG
                                                                     as
                                                                     libc::c_int
                                                                     as
                                                                     usize])
                                                  as s32 >>
                                                  gUpgradeShifts[UPG_BULLET_BAG
                                                                     as
                                                                     libc::c_int
                                                                     as usize]
                                                      as libc::c_int) as
                                                 usize] as libc::c_int {
            gSaveContext.inventory.ammo[gItemSlots[ITEM_SLINGSHOT as
                                                       libc::c_int as usize]
                                            as usize] =
                gUpgradeCapacities[UPG_BULLET_BAG as libc::c_int as
                                       usize][((gSaveContext.inventory.upgrades
                                                    &
                                                    gUpgradeMasks[UPG_BULLET_BAG
                                                                      as
                                                                      libc::c_int
                                                                      as
                                                                      usize])
                                                   as s32 >>
                                                   gUpgradeShifts[UPG_BULLET_BAG
                                                                      as
                                                                      libc::c_int
                                                                      as
                                                                      usize]
                                                       as libc::c_int) as
                                                  usize] as s8
        } else if (gSaveContext.inventory.ammo[gItemSlots[ITEM_SLINGSHOT as
                                                              libc::c_int as
                                                              usize] as usize]
                       as libc::c_int) < 0 as libc::c_int {
            gSaveContext.inventory.ammo[gItemSlots[ITEM_SLINGSHOT as
                                                       libc::c_int as usize]
                                            as usize] = 0 as libc::c_int as s8
        }
    } else if item as libc::c_int == ITEM_BOMB as libc::c_int {
        gSaveContext.inventory.ammo[gItemSlots[ITEM_BOMB as libc::c_int as
                                                   usize] as usize] =
            (gSaveContext.inventory.ammo[gItemSlots[ITEM_BOMB as libc::c_int
                                                        as usize] as usize] as
                 libc::c_int + ammoChange as libc::c_int) as s8;
        if gSaveContext.inventory.ammo[gItemSlots[ITEM_BOMB as libc::c_int as
                                                      usize] as usize] as
               libc::c_int >=
               gUpgradeCapacities[UPG_BOMB_BAG as libc::c_int as
                                      usize][((gSaveContext.inventory.upgrades
                                                   &
                                                   gUpgradeMasks[UPG_BOMB_BAG
                                                                     as
                                                                     libc::c_int
                                                                     as
                                                                     usize])
                                                  as s32 >>
                                                  gUpgradeShifts[UPG_BOMB_BAG
                                                                     as
                                                                     libc::c_int
                                                                     as usize]
                                                      as libc::c_int) as
                                                 usize] as libc::c_int {
            gSaveContext.inventory.ammo[gItemSlots[ITEM_BOMB as libc::c_int as
                                                       usize] as usize] =
                gUpgradeCapacities[UPG_BOMB_BAG as libc::c_int as
                                       usize][((gSaveContext.inventory.upgrades
                                                    &
                                                    gUpgradeMasks[UPG_BOMB_BAG
                                                                      as
                                                                      libc::c_int
                                                                      as
                                                                      usize])
                                                   as s32 >>
                                                   gUpgradeShifts[UPG_BOMB_BAG
                                                                      as
                                                                      libc::c_int
                                                                      as
                                                                      usize]
                                                       as libc::c_int) as
                                                  usize] as s8
        } else if (gSaveContext.inventory.ammo[gItemSlots[ITEM_BOMB as
                                                              libc::c_int as
                                                              usize] as usize]
                       as libc::c_int) < 0 as libc::c_int {
            gSaveContext.inventory.ammo[gItemSlots[ITEM_BOMB as libc::c_int as
                                                       usize] as usize] =
                0 as libc::c_int as s8
        }
    } else if item as libc::c_int == ITEM_BEAN as libc::c_int {
        gSaveContext.inventory.ammo[gItemSlots[ITEM_BEAN as libc::c_int as
                                                   usize] as usize] =
            (gSaveContext.inventory.ammo[gItemSlots[ITEM_BEAN as libc::c_int
                                                        as usize] as usize] as
                 libc::c_int + ammoChange as libc::c_int) as s8
    }
    osSyncPrintf(b"\xe5\x90\x88\xe8\xa8\x88 = (%d)\n\x00" as *const u8 as
                     *const libc::c_char,
                 gSaveContext.inventory.ammo[gItemSlots[item as usize] as
                                                 usize] as libc::c_int);
    // "Total = (%d)"
}
#[no_mangle]
pub unsafe extern "C" fn Magic_Fill(mut globalCtx: *mut GlobalContext) {
    if gSaveContext.magicAcquired != 0 {
        gSaveContext.unk_13F2 = gSaveContext.unk_13F0;
        gSaveContext.unk_13F6 =
            (gSaveContext.doubleMagic as libc::c_int * 0x30 as libc::c_int +
                 0x30 as libc::c_int) as s16;
        gSaveContext.unk_13F0 = 9 as libc::c_int as s16
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_800876C8(mut globalCtx: *mut GlobalContext) {
    if gSaveContext.unk_13F0 as libc::c_int != 8 as libc::c_int &&
           gSaveContext.unk_13F0 as libc::c_int != 9 as libc::c_int {
        if gSaveContext.unk_13F0 as libc::c_int == 10 as libc::c_int {
            gSaveContext.unk_13F2 = gSaveContext.unk_13F0
        }
        gSaveContext.unk_13F0 = 5 as libc::c_int as s16
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80087708(mut globalCtx: *mut GlobalContext,
                                       mut arg1: s16, mut arg2: s16) -> s32 {
    if gSaveContext.magicAcquired == 0 { return 0 as libc::c_int }
    if arg2 as libc::c_int != 5 as libc::c_int &&
           (gSaveContext.magic as libc::c_int - arg1 as libc::c_int) <
               0 as libc::c_int {
        if gSaveContext.unk_13F4 as libc::c_int != 0 as libc::c_int {
            Audio_PlaySoundGeneral(0x4806 as libc::c_int as u16_0,
                                   &mut D_801333D4, 4 as libc::c_int as u8_0,
                                   &mut D_801333E0, &mut D_801333E0,
                                   &mut D_801333E8);
        }
        return 0 as libc::c_int
    }
    match arg2 as libc::c_int {
        0 | 2 => {
            if gSaveContext.unk_13F0 as libc::c_int == 0 as libc::c_int ||
                   gSaveContext.unk_13F0 as libc::c_int == 7 as libc::c_int {
                if gSaveContext.unk_13F0 as libc::c_int == 7 as libc::c_int {
                    (*globalCtx).actorCtx.unk_03 = 0 as libc::c_int as u8_0
                }
                gSaveContext.unk_13F8 =
                    (gSaveContext.magic as libc::c_int - arg1 as libc::c_int)
                        as s16;
                gSaveContext.unk_13F0 = 1 as libc::c_int as s16;
                return 1 as libc::c_int
            } else {
                Audio_PlaySoundGeneral(0x4806 as libc::c_int as u16_0,
                                       &mut D_801333D4,
                                       4 as libc::c_int as u8_0,
                                       &mut D_801333E0, &mut D_801333E0,
                                       &mut D_801333E8);
                return 0 as libc::c_int
            }
        }
        1 => {
            if gSaveContext.unk_13F0 as libc::c_int == 0 as libc::c_int ||
                   gSaveContext.unk_13F0 as libc::c_int == 7 as libc::c_int {
                if gSaveContext.unk_13F0 as libc::c_int == 7 as libc::c_int {
                    (*globalCtx).actorCtx.unk_03 = 0 as libc::c_int as u8_0
                }
                gSaveContext.unk_13F8 =
                    (gSaveContext.magic as libc::c_int - arg1 as libc::c_int)
                        as s16;
                gSaveContext.unk_13F0 = 6 as libc::c_int as s16;
                return 1 as libc::c_int
            } else {
                Audio_PlaySoundGeneral(0x4806 as libc::c_int as u16_0,
                                       &mut D_801333D4,
                                       4 as libc::c_int as u8_0,
                                       &mut D_801333E0, &mut D_801333E0,
                                       &mut D_801333E8);
                return 0 as libc::c_int
            }
        }
        3 => {
            if gSaveContext.unk_13F0 as libc::c_int == 0 as libc::c_int {
                if gSaveContext.magic as libc::c_int != 0 as libc::c_int {
                    (*globalCtx).interfaceCtx.unk_230 =
                        80 as libc::c_int as s16;
                    gSaveContext.unk_13F0 = 7 as libc::c_int as s16;
                    return 1 as libc::c_int
                } else { return 0 as libc::c_int }
            } else if gSaveContext.unk_13F0 as libc::c_int == 7 as libc::c_int
             {
                return 1 as libc::c_int
            } else { return 0 as libc::c_int }
        }
        4 => {
            if gSaveContext.unk_13F0 as libc::c_int == 0 as libc::c_int ||
                   gSaveContext.unk_13F0 as libc::c_int == 7 as libc::c_int {
                if gSaveContext.unk_13F0 as libc::c_int == 7 as libc::c_int {
                    (*globalCtx).actorCtx.unk_03 = 0 as libc::c_int as u8_0
                }
                gSaveContext.unk_13F8 =
                    (gSaveContext.magic as libc::c_int - arg1 as libc::c_int)
                        as s16;
                gSaveContext.unk_13F0 = 4 as libc::c_int as s16;
                return 1 as libc::c_int
            } else {
                Audio_PlaySoundGeneral(0x4806 as libc::c_int as u16_0,
                                       &mut D_801333D4,
                                       4 as libc::c_int as u8_0,
                                       &mut D_801333E0, &mut D_801333E0,
                                       &mut D_801333E8);
                return 0 as libc::c_int
            }
        }
        5 => {
            if gSaveContext.unk_13F4 as libc::c_int >=
                   gSaveContext.magic as libc::c_int {
                gSaveContext.unk_13F8 =
                    (gSaveContext.magic as libc::c_int + arg1 as libc::c_int)
                        as s16;
                if gSaveContext.unk_13F8 as libc::c_int >=
                       gSaveContext.unk_13F4 as libc::c_int {
                    gSaveContext.unk_13F8 = gSaveContext.unk_13F4
                }
                gSaveContext.unk_13F0 = 10 as libc::c_int as s16;
                return 1 as libc::c_int
            }
        }
        _ => { }
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn Interface_UpdateMagicBar(mut globalCtx:
                                                      *mut GlobalContext) {
    static mut sMagicBorderColors: [[s16; 3]; 4] =
        [[255 as libc::c_int as s16, 255 as libc::c_int as s16,
          255 as libc::c_int as s16],
         [150 as libc::c_int as s16, 150 as libc::c_int as s16,
          150 as libc::c_int as s16],
         [255 as libc::c_int as s16, 255 as libc::c_int as s16,
          150 as libc::c_int as s16],
         [255 as libc::c_int as s16, 255 as libc::c_int as s16,
          50 as libc::c_int as s16]];
    static mut sMagicBorderIndexes: [s16; 4] =
        [0 as libc::c_int as s16, 1 as libc::c_int as s16,
         1 as libc::c_int as s16, 0 as libc::c_int as s16];
    static mut sMagicBorderRatio: s16 = 2 as libc::c_int as s16;
    static mut sMagicBorderStep: s16 = 1 as libc::c_int as s16;
    let mut msgCtx: *mut MessageContext = &mut (*globalCtx).msgCtx;
    let mut interfaceCtx: *mut InterfaceContext =
        &mut (*globalCtx).interfaceCtx;
    let mut borderChangeR: s16 = 0;
    let mut borderChangeG: s16 = 0;
    let mut borderChangeB: s16 = 0;
    let mut temp: s16 = 0;
    let mut current_block_116: u64;
    match gSaveContext.unk_13F0 as libc::c_int {
        8 => {
            temp =
                (gSaveContext.magicLevel as libc::c_int * 0x30 as libc::c_int)
                    as s16;
            if gSaveContext.unk_13F4 as libc::c_int != temp as libc::c_int {
                if (gSaveContext.unk_13F4 as libc::c_int) <
                       temp as libc::c_int {
                    gSaveContext.unk_13F4 =
                        (gSaveContext.unk_13F4 as libc::c_int +
                             8 as libc::c_int) as s16;
                    if gSaveContext.unk_13F4 as libc::c_int >
                           temp as libc::c_int {
                        gSaveContext.unk_13F4 = temp
                    }
                } else {
                    gSaveContext.unk_13F4 =
                        (gSaveContext.unk_13F4 as libc::c_int -
                             8 as libc::c_int) as s16;
                    if gSaveContext.unk_13F4 as libc::c_int <=
                           temp as libc::c_int {
                        gSaveContext.unk_13F4 = temp
                    }
                }
            } else { gSaveContext.unk_13F0 = 9 as libc::c_int as s16 }
            current_block_116 = 15947798178928648489;
        }
        9 => {
            gSaveContext.magic =
                (gSaveContext.magic as libc::c_int + 4 as libc::c_int) as s8;
            if gSaveContext.gameMode == 0 as libc::c_int &&
                   gSaveContext.sceneSetupIndex < 4 as libc::c_int {
                Audio_PlaySoundGeneral((0x481f as libc::c_int -
                                            0x800 as libc::c_int) as u16_0,
                                       &mut D_801333D4,
                                       4 as libc::c_int as u8_0,
                                       &mut D_801333E0, &mut D_801333E0,
                                       &mut D_801333E8);
            }
            // "Storage  MAGIC_NOW=%d (%d)"
            osSyncPrintf(b"\xe8\x93\x84\xe9\x9b\xbb  MAGIC_NOW=%d (%d)\n\x00"
                             as *const u8 as *const libc::c_char,
                         gSaveContext.magic as libc::c_int,
                         gSaveContext.unk_13F6 as libc::c_int);
            if gSaveContext.magic as libc::c_int >=
                   gSaveContext.unk_13F6 as libc::c_int {
                gSaveContext.magic = gSaveContext.unk_13F6 as s8;
                gSaveContext.unk_13F0 = gSaveContext.unk_13F2;
                gSaveContext.unk_13F2 = 0 as libc::c_int as s16
            }
            current_block_116 = 15947798178928648489;
        }
        1 => {
            sMagicBorderRatio = 2 as libc::c_int as s16;
            gSaveContext.unk_13F0 = 2 as libc::c_int as s16;
            current_block_116 = 15947798178928648489;
        }
        2 => {
            gSaveContext.magic =
                (gSaveContext.magic as libc::c_int - 2 as libc::c_int) as s8;
            if gSaveContext.magic as libc::c_int <= 0 as libc::c_int {
                gSaveContext.magic = 0 as libc::c_int as s8;
                gSaveContext.unk_13F0 = 3 as libc::c_int as s16;
                sMagicBorderB = 255 as libc::c_int as s16;
                sMagicBorderG = sMagicBorderB;
                sMagicBorderR = sMagicBorderG
            } else if gSaveContext.magic as libc::c_int ==
                          gSaveContext.unk_13F8 as libc::c_int {
                gSaveContext.unk_13F0 = 3 as libc::c_int as s16;
                sMagicBorderB = 255 as libc::c_int as s16;
                sMagicBorderG = sMagicBorderB;
                sMagicBorderR = sMagicBorderG
            }
            current_block_116 = 4456860936700197706;
        }
        3 | 4 | 6 => { current_block_116 = 4456860936700197706; }
        5 => {
            sMagicBorderB = 255 as libc::c_int as s16;
            sMagicBorderG = sMagicBorderB;
            sMagicBorderR = sMagicBorderG;
            gSaveContext.unk_13F0 = 0 as libc::c_int as s16;
            current_block_116 = 15947798178928648489;
        }
        7 => {
            if (*globalCtx).pauseCtx.state as libc::c_int == 0 as libc::c_int
                   &&
                   (*globalCtx).pauseCtx.debugState as libc::c_int ==
                       0 as libc::c_int &&
                   (*msgCtx).msgMode as libc::c_int ==
                       MSGMODE_NONE as libc::c_int &&
                   (*globalCtx).gameOverCtx.state as libc::c_int ==
                       GAMEOVER_INACTIVE as libc::c_int &&
                   (*globalCtx).sceneLoadFlag as libc::c_int ==
                       0 as libc::c_int &&
                   (*globalCtx).transitionMode as libc::c_int ==
                       0 as libc::c_int && Gameplay_InCsMode(globalCtx) == 0 {
                if gSaveContext.magic as libc::c_int == 0 as libc::c_int ||
                       func_8008F2F8(globalCtx) >= 2 as libc::c_int &&
                           func_8008F2F8(globalCtx) < 5 as libc::c_int ||
                       gSaveContext.equips.buttonItems[1 as libc::c_int as
                                                           usize] as
                           libc::c_int != ITEM_LENS as libc::c_int &&
                           gSaveContext.equips.buttonItems[2 as libc::c_int as
                                                               usize] as
                               libc::c_int != ITEM_LENS as libc::c_int &&
                           gSaveContext.equips.buttonItems[3 as libc::c_int as
                                                               usize] as
                               libc::c_int != ITEM_LENS as libc::c_int ||
                       (*globalCtx).actorCtx.unk_03 as libc::c_int ==
                           0 as libc::c_int {
                    (*globalCtx).actorCtx.unk_03 = 0 as libc::c_int as u8_0;
                    Audio_PlaySoundGeneral(0x482b as libc::c_int as u16_0,
                                           &mut D_801333D4,
                                           4 as libc::c_int as u8_0,
                                           &mut D_801333E0, &mut D_801333E0,
                                           &mut D_801333E8);
                    gSaveContext.unk_13F0 = 0 as libc::c_int as s16;
                    sMagicBorderB = 255 as libc::c_int as s16;
                    sMagicBorderG = sMagicBorderB;
                    sMagicBorderR = sMagicBorderG;
                    current_block_116 = 15947798178928648489;
                } else {
                    (*interfaceCtx).unk_230 -= 1;
                    if (*interfaceCtx).unk_230 as libc::c_int ==
                           0 as libc::c_int {
                        gSaveContext.magic -= 1;
                        (*interfaceCtx).unk_230 = 80 as libc::c_int as s16
                    }
                    current_block_116 = 5722677567366458307;
                }
            } else { current_block_116 = 5722677567366458307; }
            match current_block_116 {
                15947798178928648489 => { }
                _ => {
                    temp = sMagicBorderIndexes[sMagicBorderStep as usize];
                    borderChangeR =
                        ((if sMagicBorderR as libc::c_int -
                                 sMagicBorderColors[temp as
                                                        usize][0 as
                                                                   libc::c_int
                                                                   as usize]
                                     as libc::c_int >= 0 as libc::c_int {
                              (sMagicBorderR as libc::c_int) -
                                  sMagicBorderColors[temp as
                                                         usize][0 as
                                                                    libc::c_int
                                                                    as usize]
                                      as libc::c_int
                          } else {
                              -(sMagicBorderR as libc::c_int -
                                    sMagicBorderColors[temp as
                                                           usize][0 as
                                                                      libc::c_int
                                                                      as
                                                                      usize]
                                        as libc::c_int)
                          }) / sMagicBorderRatio as libc::c_int) as s16;
                    borderChangeG =
                        ((if sMagicBorderG as libc::c_int -
                                 sMagicBorderColors[temp as
                                                        usize][1 as
                                                                   libc::c_int
                                                                   as usize]
                                     as libc::c_int >= 0 as libc::c_int {
                              (sMagicBorderG as libc::c_int) -
                                  sMagicBorderColors[temp as
                                                         usize][1 as
                                                                    libc::c_int
                                                                    as usize]
                                      as libc::c_int
                          } else {
                              -(sMagicBorderG as libc::c_int -
                                    sMagicBorderColors[temp as
                                                           usize][1 as
                                                                      libc::c_int
                                                                      as
                                                                      usize]
                                        as libc::c_int)
                          }) / sMagicBorderRatio as libc::c_int) as s16;
                    borderChangeB =
                        ((if sMagicBorderB as libc::c_int -
                                 sMagicBorderColors[temp as
                                                        usize][2 as
                                                                   libc::c_int
                                                                   as usize]
                                     as libc::c_int >= 0 as libc::c_int {
                              (sMagicBorderB as libc::c_int) -
                                  sMagicBorderColors[temp as
                                                         usize][2 as
                                                                    libc::c_int
                                                                    as usize]
                                      as libc::c_int
                          } else {
                              -(sMagicBorderB as libc::c_int -
                                    sMagicBorderColors[temp as
                                                           usize][2 as
                                                                      libc::c_int
                                                                      as
                                                                      usize]
                                        as libc::c_int)
                          }) / sMagicBorderRatio as libc::c_int) as s16;
                    if sMagicBorderR as libc::c_int >=
                           sMagicBorderColors[temp as
                                                  usize][0 as libc::c_int as
                                                             usize] as
                               libc::c_int {
                        sMagicBorderR =
                            (sMagicBorderR as libc::c_int -
                                 borderChangeR as libc::c_int) as s16
                    } else {
                        sMagicBorderR =
                            (sMagicBorderR as libc::c_int +
                                 borderChangeR as libc::c_int) as s16
                    }
                    if sMagicBorderG as libc::c_int >=
                           sMagicBorderColors[temp as
                                                  usize][1 as libc::c_int as
                                                             usize] as
                               libc::c_int {
                        sMagicBorderG =
                            (sMagicBorderG as libc::c_int -
                                 borderChangeG as libc::c_int) as s16
                    } else {
                        sMagicBorderG =
                            (sMagicBorderG as libc::c_int +
                                 borderChangeG as libc::c_int) as s16
                    }
                    if sMagicBorderB as libc::c_int >=
                           sMagicBorderColors[temp as
                                                  usize][2 as libc::c_int as
                                                             usize] as
                               libc::c_int {
                        sMagicBorderB =
                            (sMagicBorderB as libc::c_int -
                                 borderChangeB as libc::c_int) as s16
                    } else {
                        sMagicBorderB =
                            (sMagicBorderB as libc::c_int +
                                 borderChangeB as libc::c_int) as s16
                    }
                    sMagicBorderRatio -= 1;
                    if sMagicBorderRatio as libc::c_int == 0 as libc::c_int {
                        sMagicBorderR =
                            sMagicBorderColors[temp as
                                                   usize][0 as libc::c_int as
                                                              usize];
                        sMagicBorderG =
                            sMagicBorderColors[temp as
                                                   usize][1 as libc::c_int as
                                                              usize];
                        sMagicBorderB =
                            sMagicBorderColors[temp as
                                                   usize][2 as libc::c_int as
                                                              usize];
                        sMagicBorderRatio =
                            (*gGameInfo).data[(6 as libc::c_int *
                                                   6 as libc::c_int *
                                                   16 as libc::c_int +
                                                   40 as libc::c_int +
                                                   sMagicBorderStep as
                                                       libc::c_int) as usize];
                        sMagicBorderStep += 1;
                        if sMagicBorderStep as libc::c_int >= 4 as libc::c_int
                           {
                            sMagicBorderStep = 0 as libc::c_int as s16
                        }
                    }
                    current_block_116 = 15947798178928648489;
                }
            }
        }
        10 => {
            gSaveContext.magic =
                (gSaveContext.magic as libc::c_int + 4 as libc::c_int) as s8;
            Audio_PlaySoundGeneral((0x481f as libc::c_int -
                                        0x800 as libc::c_int) as u16_0,
                                   &mut D_801333D4, 4 as libc::c_int as u8_0,
                                   &mut D_801333E0, &mut D_801333E0,
                                   &mut D_801333E8);
            if gSaveContext.magic as libc::c_int >=
                   gSaveContext.unk_13F8 as libc::c_int {
                gSaveContext.magic = gSaveContext.unk_13F8 as s8;
                gSaveContext.unk_13F0 = gSaveContext.unk_13F2;
                gSaveContext.unk_13F2 = 0 as libc::c_int as s16
            }
            current_block_116 = 15947798178928648489;
        }
        _ => {
            gSaveContext.unk_13F0 = 0 as libc::c_int as s16;
            current_block_116 = 15947798178928648489;
        }
    }
    match current_block_116 {
        4456860936700197706 => {
            temp = sMagicBorderIndexes[sMagicBorderStep as usize];
            borderChangeR =
                ((if sMagicBorderR as libc::c_int -
                         sMagicBorderColors[temp as
                                                usize][0 as libc::c_int as
                                                           usize] as
                             libc::c_int >= 0 as libc::c_int {
                      (sMagicBorderR as libc::c_int) -
                          sMagicBorderColors[temp as
                                                 usize][0 as libc::c_int as
                                                            usize] as
                              libc::c_int
                  } else {
                      -(sMagicBorderR as libc::c_int -
                            sMagicBorderColors[temp as
                                                   usize][0 as libc::c_int as
                                                              usize] as
                                libc::c_int)
                  }) / sMagicBorderRatio as libc::c_int) as s16;
            borderChangeG =
                ((if sMagicBorderG as libc::c_int -
                         sMagicBorderColors[temp as
                                                usize][1 as libc::c_int as
                                                           usize] as
                             libc::c_int >= 0 as libc::c_int {
                      (sMagicBorderG as libc::c_int) -
                          sMagicBorderColors[temp as
                                                 usize][1 as libc::c_int as
                                                            usize] as
                              libc::c_int
                  } else {
                      -(sMagicBorderG as libc::c_int -
                            sMagicBorderColors[temp as
                                                   usize][1 as libc::c_int as
                                                              usize] as
                                libc::c_int)
                  }) / sMagicBorderRatio as libc::c_int) as s16;
            borderChangeB =
                ((if sMagicBorderB as libc::c_int -
                         sMagicBorderColors[temp as
                                                usize][2 as libc::c_int as
                                                           usize] as
                             libc::c_int >= 0 as libc::c_int {
                      (sMagicBorderB as libc::c_int) -
                          sMagicBorderColors[temp as
                                                 usize][2 as libc::c_int as
                                                            usize] as
                              libc::c_int
                  } else {
                      -(sMagicBorderB as libc::c_int -
                            sMagicBorderColors[temp as
                                                   usize][2 as libc::c_int as
                                                              usize] as
                                libc::c_int)
                  }) / sMagicBorderRatio as libc::c_int) as s16;
            if sMagicBorderR as libc::c_int >=
                   sMagicBorderColors[temp as
                                          usize][0 as libc::c_int as usize] as
                       libc::c_int {
                sMagicBorderR =
                    (sMagicBorderR as libc::c_int -
                         borderChangeR as libc::c_int) as s16
            } else {
                sMagicBorderR =
                    (sMagicBorderR as libc::c_int +
                         borderChangeR as libc::c_int) as s16
            }
            if sMagicBorderG as libc::c_int >=
                   sMagicBorderColors[temp as
                                          usize][1 as libc::c_int as usize] as
                       libc::c_int {
                sMagicBorderG =
                    (sMagicBorderG as libc::c_int -
                         borderChangeG as libc::c_int) as s16
            } else {
                sMagicBorderG =
                    (sMagicBorderG as libc::c_int +
                         borderChangeG as libc::c_int) as s16
            }
            if sMagicBorderB as libc::c_int >=
                   sMagicBorderColors[temp as
                                          usize][2 as libc::c_int as usize] as
                       libc::c_int {
                sMagicBorderB =
                    (sMagicBorderB as libc::c_int -
                         borderChangeB as libc::c_int) as s16
            } else {
                sMagicBorderB =
                    (sMagicBorderB as libc::c_int +
                         borderChangeB as libc::c_int) as s16
            }
            sMagicBorderRatio -= 1;
            if sMagicBorderRatio as libc::c_int == 0 as libc::c_int {
                sMagicBorderR =
                    sMagicBorderColors[temp as
                                           usize][0 as libc::c_int as usize];
                sMagicBorderG =
                    sMagicBorderColors[temp as
                                           usize][1 as libc::c_int as usize];
                sMagicBorderB =
                    sMagicBorderColors[temp as
                                           usize][2 as libc::c_int as usize];
                sMagicBorderRatio =
                    (*gGameInfo).data[(6 as libc::c_int * 6 as libc::c_int *
                                           16 as libc::c_int +
                                           40 as libc::c_int +
                                           sMagicBorderStep as libc::c_int) as
                                          usize];
                sMagicBorderStep += 1;
                if sMagicBorderStep as libc::c_int >= 4 as libc::c_int {
                    sMagicBorderStep = 0 as libc::c_int as s16
                }
            }
        }
        _ => { }
    };
}
#[no_mangle]
pub unsafe extern "C" fn Interface_DrawMagicBar(mut globalCtx:
                                                    *mut GlobalContext) {
    let mut interfaceCtx: *mut InterfaceContext =
        &mut (*globalCtx).interfaceCtx;
    let mut magicBarY: s16 = 0;
    let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
    let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
    __gfxCtx = (*globalCtx).state.gfxCtx;
    Graph_OpenDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                    b"../z_parameter.c\x00" as *const u8 as
                        *const libc::c_char, 2650 as libc::c_int);
    if gSaveContext.magicLevel as libc::c_int != 0 as libc::c_int {
        if gSaveContext.healthCapacity as libc::c_int > 0xa0 as libc::c_int {
            magicBarY =
                (*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int *
                                       16 as libc::c_int + 50 as libc::c_int)
                                      as usize]
        } else {
            magicBarY =
                (*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int *
                                       16 as libc::c_int + 48 as libc::c_int)
                                      as usize]
        }
        func_80094520((*globalCtx).state.gfxCtx);
        let fresh20 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g: *mut Gfx = fresh20;
        (*_g).words.w0 =
            (0xfa as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g).words.w1 =
            (sMagicBorderR as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (sMagicBorderG as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (sMagicBorderB as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                ((*interfaceCtx).magicAlpha as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh21 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_0: *mut Gfx = fresh21;
        (*_g_0).words.w0 =
            (0xfb as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_0).words.w1 =
            (100 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (50 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (50 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*__gfxCtx).overlay.p =
            Gfx_TextureIA8((*__gfxCtx).overlay.p,
                           gMagicBarEndTex.as_mut_ptr() as *mut libc::c_void,
                           8 as libc::c_int as s16, 16 as libc::c_int as s16,
                           (*gGameInfo).data[(14 as libc::c_int *
                                                  6 as libc::c_int *
                                                  16 as libc::c_int +
                                                  49 as libc::c_int) as
                                                 usize], magicBarY,
                           8 as libc::c_int as s16, 16 as libc::c_int as s16,
                           ((1 as libc::c_int) << 10 as libc::c_int) as u16_0,
                           ((1 as libc::c_int) << 10 as libc::c_int) as
                               u16_0);
        (*__gfxCtx).overlay.p =
            Gfx_TextureIA8((*__gfxCtx).overlay.p,
                           gMagicBarMidTex.as_mut_ptr() as *mut libc::c_void,
                           24 as libc::c_int as s16, 16 as libc::c_int as s16,
                           ((*gGameInfo).data[(14 as libc::c_int *
                                                   6 as libc::c_int *
                                                   16 as libc::c_int +
                                                   49 as libc::c_int) as
                                                  usize] as libc::c_int +
                                8 as libc::c_int) as s16, magicBarY,
                           gSaveContext.unk_13F4, 16 as libc::c_int as s16,
                           ((1 as libc::c_int) << 10 as libc::c_int) as u16_0,
                           ((1 as libc::c_int) << 10 as libc::c_int) as
                               u16_0);
        let fresh22 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_1: *mut Gfx = fresh22;
        (*_g_1).words.w0 =
            (0xfd as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (3 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    21 as libc::c_int |
                (2 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((1 as libc::c_int - 1 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_1).words.w1 = gMagicBarEndTex.as_mut_ptr() as libc::c_uint;
        let fresh23 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_2: *mut Gfx = fresh23;
        (*_g_2).words.w0 =
            (0xf5 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (3 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    21 as libc::c_int |
                (2 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 9 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    9 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 9 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_2).words.w1 =
            (7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    20 as libc::c_int |
                ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    18 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    14 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    10 as libc::c_int |
                ((0x1 as libc::c_int | 0 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (3 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    4 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh24 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_3: *mut Gfx = fresh24;
        (*_g_3).words.w0 =
            (0xe6 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_3).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh25 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_4: *mut Gfx = fresh25;
        (*_g_4).words.w0 =
            (0xf3 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_4).words.w1 =
            (7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((if ((8 as libc::c_int * 16 as libc::c_int + 1 as libc::c_int
                           >> 1 as libc::c_int) - 1 as libc::c_int) <
                         2047 as libc::c_int {
                      (8 as libc::c_int * 16 as libc::c_int + 1 as libc::c_int
                           >> 1 as libc::c_int) - 1 as libc::c_int
                  } else { 2047 as libc::c_int }) as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (((((1 as libc::c_int) << 11 as libc::c_int) +
                       (if 1 as libc::c_int >
                               8 as libc::c_int * 1 as libc::c_int /
                                   8 as libc::c_int {
                            1 as libc::c_int
                        } else {
                            (8 as libc::c_int * 1 as libc::c_int) /
                                8 as libc::c_int
                        }) - 1 as libc::c_int) /
                      (if 1 as libc::c_int >
                              8 as libc::c_int * 1 as libc::c_int /
                                  8 as libc::c_int {
                           1 as libc::c_int
                       } else {
                           (8 as libc::c_int * 1 as libc::c_int) /
                               8 as libc::c_int
                       })) as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh26 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_5: *mut Gfx = fresh26;
        (*_g_5).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_5).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh27 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_6: *mut Gfx = fresh27;
        (*_g_6).words.w0 =
            (0xf5 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (3 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    21 as libc::c_int |
                (1 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((8 as libc::c_int * 1 as libc::c_int + 7 as libc::c_int >>
                      3 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 9 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    9 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 9 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_6).words.w1 =
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    20 as libc::c_int |
                ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    18 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    14 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    10 as libc::c_int |
                ((0x1 as libc::c_int | 0 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 2 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (3 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    4 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh28 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_7: *mut Gfx = fresh28;
        (*_g_7).words.w0 =
            (0xf2 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_7).words.w1 =
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (((8 as libc::c_int - 1 as libc::c_int) << 2 as libc::c_int)
                     as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (((16 as libc::c_int - 1 as libc::c_int) << 2 as libc::c_int)
                     as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh29 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_8: *mut Gfx = fresh29;
        (*_g_8).words.w0 =
            (0xe4 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((((*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int *
                                          16 as libc::c_int +
                                          49 as libc::c_int) as usize] as
                       libc::c_int + gSaveContext.unk_13F4 as libc::c_int +
                       16 as libc::c_int) << 2 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (((magicBarY as libc::c_int + 16 as libc::c_int) <<
                      2 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_8).words.w1 =
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((((*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int *
                                          16 as libc::c_int +
                                          49 as libc::c_int) as usize] as
                       libc::c_int + gSaveContext.unk_13F4 as libc::c_int +
                       8 as libc::c_int) << 2 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (((magicBarY as libc::c_int) << 2 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 12 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh30 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_9: *mut Gfx = fresh30;
        (*_g_9).words.w0 =
            (0xe1 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_9).words.w1 =
            (256 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh31 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_10: *mut Gfx = fresh31;
        (*_g_10).words.w0 =
            (0xf1 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_10).words.w1 =
            (((1 as libc::c_int) << 10 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
                |
                (((1 as libc::c_int) << 10 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh32 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_11: *mut Gfx = fresh32;
        (*_g_11).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_11).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh33 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_12: *mut Gfx = fresh33;
        (*_g_12).words.w0 =
            (0xfc as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (((3 as libc::c_int as u32_0 &
                       (((0x1 as libc::c_int) << 4 as libc::c_int) -
                            1 as libc::c_int) as libc::c_uint) <<
                      20 as libc::c_int |
                      (1 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          15 as libc::c_int |
                      (7 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          12 as libc::c_int |
                      (7 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          9 as libc::c_int |
                      ((3 as libc::c_int as u32_0 &
                            (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                 1 as libc::c_int) as libc::c_uint) <<
                           5 as libc::c_int |
                           (1 as libc::c_int as u32_0 &
                                (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                     1 as libc::c_int) as libc::c_uint) <<
                               0 as libc::c_int)) &
                     (((0x1 as libc::c_int) << 24 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_12).words.w1 =
            (5 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 28 as libc::c_int
                |
                (5 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    15 as libc::c_int |
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (3 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    9 as libc::c_int |
                ((5 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 4 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     24 as libc::c_int |
                     (7 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         21 as libc::c_int |
                     (7 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         18 as libc::c_int |
                     (5 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         6 as libc::c_int |
                     (7 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         3 as libc::c_int |
                     (3 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         0 as libc::c_int);
        let fresh34 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_13: *mut Gfx = fresh34;
        (*_g_13).words.w0 =
            (0xfb as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_13).words.w1 =
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        if gSaveContext.unk_13F0 as libc::c_int == 4 as libc::c_int {
            // Yellow part of the bar indicating the amount of magic to be subtracted
            let fresh35 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_14: *mut Gfx = fresh35;
            (*_g_14).words.w0 =
                (0xfa as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_14).words.w1 =
                (250 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (250 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    ((*interfaceCtx).magicAlpha as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh36 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_15: *mut Gfx = fresh36;
            (*_g_15).words.w0 =
                (0xfd as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (4 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        21 as libc::c_int |
                    (2 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    ((1 as libc::c_int - 1 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_15).words.w1 = gMagicBarFillTex.as_mut_ptr() as libc::c_uint;
            let fresh37 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_16: *mut Gfx = fresh37;
            (*_g_16).words.w0 =
                (0xf5 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (4 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        21 as libc::c_int |
                    (2 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 9 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        9 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 9 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_16).words.w1 =
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        20 as libc::c_int |
                    ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        18 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        14 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        10 as libc::c_int |
                    ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        4 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh38 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_17: *mut Gfx = fresh38;
            (*_g_17).words.w0 =
                (0xe6 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_17).words.w1 = 0 as libc::c_int as libc::c_uint;
            let fresh39 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_18: *mut Gfx = fresh39;
            (*_g_18).words.w0 =
                (0xf3 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_18).words.w1 =
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((if ((16 as libc::c_int * 16 as libc::c_int +
                               3 as libc::c_int >> 2 as libc::c_int) -
                              1 as libc::c_int) < 2047 as libc::c_int {
                          (16 as libc::c_int * 16 as libc::c_int +
                               3 as libc::c_int >> 2 as libc::c_int) -
                              1 as libc::c_int
                      } else { 2047 as libc::c_int }) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (((((1 as libc::c_int) << 11 as libc::c_int) +
                           (if 1 as libc::c_int >
                                   16 as libc::c_int / 16 as libc::c_int {
                                1 as libc::c_int
                            } else {
                                (16 as libc::c_int) / 16 as libc::c_int
                            }) - 1 as libc::c_int) /
                          (if 1 as libc::c_int >
                                  16 as libc::c_int / 16 as libc::c_int {
                               1 as libc::c_int
                           } else {
                               (16 as libc::c_int) / 16 as libc::c_int
                           })) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh40 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_19: *mut Gfx = fresh40;
            (*_g_19).words.w0 =
                (0xe7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_19).words.w1 = 0 as libc::c_int as libc::c_uint;
            let fresh41 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_20: *mut Gfx = fresh41;
            (*_g_20).words.w0 =
                (0xf5 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (4 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        21 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    (((16 as libc::c_int >> 1 as libc::c_int) +
                          7 as libc::c_int >> 3 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 9 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        9 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 9 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_20).words.w1 =
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        20 as libc::c_int |
                    ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        18 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        14 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        10 as libc::c_int |
                    ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        4 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh42 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_21: *mut Gfx = fresh42;
            (*_g_21).words.w0 =
                (0xf2 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_21).words.w1 =
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (((16 as libc::c_int - 1 as libc::c_int) <<
                          2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (((16 as libc::c_int - 1 as libc::c_int) <<
                          2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh43 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_22: *mut Gfx = fresh43;
            (*_g_22).words.w0 =
                (0xe4 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((((*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int
                                              * 16 as libc::c_int +
                                              51 as libc::c_int) as usize] as
                           libc::c_int + gSaveContext.magic as libc::c_int) <<
                          2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (((magicBarY as libc::c_int + 10 as libc::c_int) <<
                          2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_22).words.w1 =
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((((*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int
                                              * 16 as libc::c_int +
                                              51 as libc::c_int) as usize] as
                           libc::c_int) << 2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (((magicBarY as libc::c_int + 3 as libc::c_int) <<
                          2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh44 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_23: *mut Gfx = fresh44;
            (*_g_23).words.w0 =
                (0xe1 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_23).words.w1 =
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh45 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_24: *mut Gfx = fresh45;
            (*_g_24).words.w0 =
                (0xf1 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_24).words.w1 =
                (((1 as libc::c_int) << 10 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                    (((1 as libc::c_int) << 10 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            // Fill the rest of the bar with the normal magic color
            let fresh46 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_25: *mut Gfx = fresh46;
            (*_g_25).words.w0 =
                (0xe7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_25).words.w1 = 0 as libc::c_int as libc::c_uint;
            let fresh47 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_26: *mut Gfx = fresh47;
            (*_g_26).words.w0 =
                (0xfa as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_26).words.w1 =
                ((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                        16 as libc::c_int + 0 as libc::c_int +
                                        0 as libc::c_int) as usize] as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                            16 as libc::c_int +
                                            0 as libc::c_int +
                                            1 as libc::c_int) as usize] as
                         u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    ((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                            16 as libc::c_int +
                                            0 as libc::c_int +
                                            2 as libc::c_int) as usize] as
                         u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    ((*interfaceCtx).magicAlpha as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh48 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_27: *mut Gfx = fresh48;
            (*_g_27).words.w0 =
                (0xe4 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((((*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int
                                              * 16 as libc::c_int +
                                              51 as libc::c_int) as usize] as
                           libc::c_int + gSaveContext.unk_13F8 as libc::c_int)
                          << 2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (((magicBarY as libc::c_int + 10 as libc::c_int) <<
                          2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_27).words.w1 =
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((((*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int
                                              * 16 as libc::c_int +
                                              51 as libc::c_int) as usize] as
                           libc::c_int) << 2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (((magicBarY as libc::c_int + 3 as libc::c_int) <<
                          2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh49 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_28: *mut Gfx = fresh49;
            (*_g_28).words.w0 =
                (0xe1 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_28).words.w1 =
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh50 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_29: *mut Gfx = fresh50;
            (*_g_29).words.w0 =
                (0xf1 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_29).words.w1 =
                (((1 as libc::c_int) << 10 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                    (((1 as libc::c_int) << 10 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
        } else {
            // Fill the whole bar with the normal magic color
            let fresh51 =
                (*__gfxCtx).overlay.p; // Used as both an alpha value and a button index
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_30: *mut Gfx = fresh51;
            (*_g_30).words.w0 =
                (0xfa as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_30).words.w1 =
                ((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                        16 as libc::c_int + 0 as libc::c_int +
                                        0 as libc::c_int) as usize] as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                            16 as libc::c_int +
                                            0 as libc::c_int +
                                            1 as libc::c_int) as usize] as
                         u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    ((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                            16 as libc::c_int +
                                            0 as libc::c_int +
                                            2 as libc::c_int) as usize] as
                         u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    ((*interfaceCtx).magicAlpha as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh52 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_31: *mut Gfx = fresh52;
            (*_g_31).words.w0 =
                (0xfd as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (4 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        21 as libc::c_int |
                    (2 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    ((1 as libc::c_int - 1 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_31).words.w1 = gMagicBarFillTex.as_mut_ptr() as libc::c_uint;
            let fresh53 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_32: *mut Gfx = fresh53;
            (*_g_32).words.w0 =
                (0xf5 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (4 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        21 as libc::c_int |
                    (2 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 9 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        9 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 9 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_32).words.w1 =
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        20 as libc::c_int |
                    ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        18 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        14 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        10 as libc::c_int |
                    ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        4 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh54 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_33: *mut Gfx = fresh54;
            (*_g_33).words.w0 =
                (0xe6 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_33).words.w1 = 0 as libc::c_int as libc::c_uint;
            let fresh55 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_34: *mut Gfx = fresh55;
            (*_g_34).words.w0 =
                (0xf3 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_34).words.w1 =
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((if ((16 as libc::c_int * 16 as libc::c_int +
                               3 as libc::c_int >> 2 as libc::c_int) -
                              1 as libc::c_int) < 2047 as libc::c_int {
                          (16 as libc::c_int * 16 as libc::c_int +
                               3 as libc::c_int >> 2 as libc::c_int) -
                              1 as libc::c_int
                      } else { 2047 as libc::c_int }) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (((((1 as libc::c_int) << 11 as libc::c_int) +
                           (if 1 as libc::c_int >
                                   16 as libc::c_int / 16 as libc::c_int {
                                1 as libc::c_int
                            } else {
                                (16 as libc::c_int) / 16 as libc::c_int
                            }) - 1 as libc::c_int) /
                          (if 1 as libc::c_int >
                                  16 as libc::c_int / 16 as libc::c_int {
                               1 as libc::c_int
                           } else {
                               (16 as libc::c_int) / 16 as libc::c_int
                           })) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh56 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_35: *mut Gfx = fresh56;
            (*_g_35).words.w0 =
                (0xe7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_35).words.w1 = 0 as libc::c_int as libc::c_uint;
            let fresh57 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_36: *mut Gfx = fresh57;
            (*_g_36).words.w0 =
                (0xf5 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (4 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        21 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    (((16 as libc::c_int >> 1 as libc::c_int) +
                          7 as libc::c_int >> 3 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 9 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        9 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 9 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_36).words.w1 =
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        20 as libc::c_int |
                    ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        18 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        14 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        10 as libc::c_int |
                    ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        4 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh58 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_37: *mut Gfx = fresh58;
            (*_g_37).words.w0 =
                (0xf2 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_37).words.w1 =
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (((16 as libc::c_int - 1 as libc::c_int) <<
                          2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (((16 as libc::c_int - 1 as libc::c_int) <<
                          2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh59 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_38: *mut Gfx = fresh59;
            (*_g_38).words.w0 =
                (0xe4 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((((*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int
                                              * 16 as libc::c_int +
                                              51 as libc::c_int) as usize] as
                           libc::c_int + gSaveContext.magic as libc::c_int) <<
                          2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (((magicBarY as libc::c_int + 10 as libc::c_int) <<
                          2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_38).words.w1 =
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((((*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int
                                              * 16 as libc::c_int +
                                              51 as libc::c_int) as usize] as
                           libc::c_int) << 2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (((magicBarY as libc::c_int + 3 as libc::c_int) <<
                          2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh60 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_39: *mut Gfx = fresh60;
            (*_g_39).words.w0 =
                (0xe1 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_39).words.w1 =
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh61 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_40: *mut Gfx = fresh61;
            (*_g_40).words.w0 =
                (0xf1 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_40).words.w1 =
                (((1 as libc::c_int) << 10 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                    (((1 as libc::c_int) << 10 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
        }
    }
    Graph_CloseDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                     b"../z_parameter.c\x00" as *const u8 as
                         *const libc::c_char, 2731 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn func_80088AA0(mut arg0: s16) {
    gSaveContext.timerX[1 as libc::c_int as usize] =
        140 as libc::c_int as s16;
    gSaveContext.timerY[1 as libc::c_int as usize] = 80 as libc::c_int as s16;
    D_80125A5C = 0 as libc::c_int as s16;
    gSaveContext.timer2Value = arg0;
    if arg0 as libc::c_int != 0 as libc::c_int {
        gSaveContext.timer2State = 1 as libc::c_int as s16
    } else { gSaveContext.timer2State = 7 as libc::c_int as s16 };
}
#[no_mangle]
pub unsafe extern "C" fn func_80088AF0(mut globalCtx: *mut GlobalContext) {
    if gSaveContext.timer2State as libc::c_int != 0 as libc::c_int {
        if gSaveContext.eventInf[1 as libc::c_int as usize] as libc::c_int &
               1 as libc::c_int != 0 {
            gSaveContext.timer2Value = 239 as libc::c_int as s16
        } else { gSaveContext.timer2Value = 1 as libc::c_int as s16 }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80088B34(mut arg0: s16) {
    gSaveContext.timerX[0 as libc::c_int as usize] =
        140 as libc::c_int as s16;
    gSaveContext.timerY[0 as libc::c_int as usize] = 80 as libc::c_int as s16;
    D_80125A5C = 0 as libc::c_int as s16;
    gSaveContext.timer1Value = arg0;
    if arg0 as libc::c_int != 0 as libc::c_int {
        gSaveContext.timer1State = 5 as libc::c_int as s16
    } else { gSaveContext.timer1State = 11 as libc::c_int as s16 };
}
#[no_mangle]
pub unsafe extern "C" fn Interface_DrawActionLabel(mut gfxCtx:
                                                       *mut GraphicsContext,
                                                   mut texture:
                                                       *mut libc::c_void) {
    let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
    let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
    __gfxCtx = gfxCtx;
    Graph_OpenDisps(dispRefs.as_mut_ptr(), gfxCtx,
                    b"../z_parameter.c\x00" as *const u8 as
                        *const libc::c_char, 2820 as libc::c_int);
    let fresh62 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g: *mut Gfx = fresh62;
    (*_g).words.w0 =
        (0xfd as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (3 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 21 as libc::c_int
            |
            (2 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            ((1 as libc::c_int - 1 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g).words.w1 = texture as libc::c_uint;
    let fresh63 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_0: *mut Gfx = fresh63;
    (*_g_0).words.w0 =
        (0xf5 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (3 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 21 as libc::c_int
            |
            (2 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 9 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_0).words.w1 =
        (7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 20 as libc::c_int
            |
            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 18 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 14 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 10 as libc::c_int
            |
            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 4 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh64 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_1: *mut Gfx = fresh64;
    (*_g_1).words.w0 =
        (0xe6 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_1).words.w1 = 0 as libc::c_int as libc::c_uint;
    let fresh65 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_2: *mut Gfx = fresh65;
    (*_g_2).words.w0 =
        (0xf3 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_2).words.w1 =
        (7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            ((if ((48 as libc::c_int * 16 as libc::c_int + 3 as libc::c_int >>
                       2 as libc::c_int) - 1 as libc::c_int) <
                     2047 as libc::c_int {
                  (48 as libc::c_int * 16 as libc::c_int + 3 as libc::c_int >>
                       2 as libc::c_int) - 1 as libc::c_int
              } else { 2047 as libc::c_int }) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (((((1 as libc::c_int) << 11 as libc::c_int) +
                   (if 1 as libc::c_int >
                           48 as libc::c_int / 16 as libc::c_int {
                        1 as libc::c_int
                    } else { (48 as libc::c_int) / 16 as libc::c_int }) -
                   1 as libc::c_int) /
                  (if 1 as libc::c_int > 48 as libc::c_int / 16 as libc::c_int
                      {
                       1 as libc::c_int
                   } else { (48 as libc::c_int) / 16 as libc::c_int })) as
                 u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh66 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_3: *mut Gfx = fresh66;
    (*_g_3).words.w0 =
        (0xe7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_3).words.w1 = 0 as libc::c_int as libc::c_uint;
    let fresh67 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_4: *mut Gfx = fresh67;
    (*_g_4).words.w0 =
        (0xf5 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (3 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 21 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            (((48 as libc::c_int >> 1 as libc::c_int) + 7 as libc::c_int >>
                  3 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 9 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_4).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 20 as libc::c_int
            |
            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 18 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 14 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 10 as libc::c_int
            |
            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 4 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh68 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_5: *mut Gfx = fresh68;
    (*_g_5).words.w0 =
        (0xf2 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_5).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (((48 as libc::c_int - 1 as libc::c_int) << 2 as libc::c_int) as
                 u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (((16 as libc::c_int - 1 as libc::c_int) << 2 as libc::c_int) as
                 u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh69 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_6: *mut Gfx = fresh69;
    (*_g_6).words.w0 =
        (0x7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (if 0 as libc::c_int == 0 as libc::c_int {
                 (((0 as libc::c_int * 2 as libc::c_int) as u32_0 &
                       (((0x1 as libc::c_int) << 8 as libc::c_int) -
                            1 as libc::c_int) as libc::c_uint) <<
                      16 as libc::c_int |
                      ((2 as libc::c_int * 2 as libc::c_int) as u32_0 &
                           (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          8 as libc::c_int) |
                     ((3 as libc::c_int * 2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         0 as libc::c_int
             } else {
                 (if 0 as libc::c_int == 1 as libc::c_int {
                      (((2 as libc::c_int * 2 as libc::c_int) as u32_0 &
                            (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                 1 as libc::c_int) as libc::c_uint) <<
                           16 as libc::c_int |
                           ((3 as libc::c_int * 2 as libc::c_int) as u32_0 &
                                (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                     1 as libc::c_int) as libc::c_uint) <<
                               8 as libc::c_int) |
                          ((1 as libc::c_int * 2 as libc::c_int) as u32_0 &
                               (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              0 as libc::c_int
                  } else {
                      (if 0 as libc::c_int == 2 as libc::c_int {
                           (((3 as libc::c_int * 2 as libc::c_int) as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                16 as libc::c_int |
                                ((1 as libc::c_int * 2 as libc::c_int) as
                                     u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 8 as libc::c_int) |
                               ((0 as libc::c_int * 2 as libc::c_int) as u32_0
                                    &
                                    (((0x1 as libc::c_int) <<
                                          8 as libc::c_int) -
                                         1 as libc::c_int) as libc::c_uint) <<
                                   0 as libc::c_int
                       } else {
                           (((1 as libc::c_int * 2 as libc::c_int) as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                16 as libc::c_int |
                                ((0 as libc::c_int * 2 as libc::c_int) as
                                     u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 8 as libc::c_int) |
                               ((2 as libc::c_int * 2 as libc::c_int) as u32_0
                                    &
                                    (((0x1 as libc::c_int) <<
                                          8 as libc::c_int) -
                                         1 as libc::c_int) as libc::c_uint) <<
                                   0 as libc::c_int
                       })
                  })
             });
    (*_g_6).words.w1 =
        if 0 as libc::c_int == 0 as libc::c_int {
            (((0 as libc::c_int * 2 as libc::c_int) as u32_0 &
                  (((0x1 as libc::c_int) << 8 as libc::c_int) -
                       1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
                 |
                 ((3 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     8 as libc::c_int) |
                ((1 as libc::c_int * 2 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int
        } else if 0 as libc::c_int == 1 as libc::c_int {
            (((2 as libc::c_int * 2 as libc::c_int) as u32_0 &
                  (((0x1 as libc::c_int) << 8 as libc::c_int) -
                       1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
                 |
                 ((1 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     8 as libc::c_int) |
                ((0 as libc::c_int * 2 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int
        } else if 0 as libc::c_int == 2 as libc::c_int {
            (((3 as libc::c_int * 2 as libc::c_int) as u32_0 &
                  (((0x1 as libc::c_int) << 8 as libc::c_int) -
                       1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
                 |
                 ((0 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     8 as libc::c_int) |
                ((2 as libc::c_int * 2 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int
        } else {
            (((1 as libc::c_int * 2 as libc::c_int) as u32_0 &
                  (((0x1 as libc::c_int) << 8 as libc::c_int) -
                       1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
                 |
                 ((2 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     8 as libc::c_int) |
                ((3 as libc::c_int * 2 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int
        };
    Graph_CloseDisps(dispRefs.as_mut_ptr(), gfxCtx,
                     b"../z_parameter.c\x00" as *const u8 as
                         *const libc::c_char, 2829 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn Interface_DrawItemButtons(mut globalCtx:
                                                       *mut GlobalContext) {
    static mut cUpLabelTextures: [*mut libc::c_void; 3] =
        unsafe {
            [gNaviCUpENGTex.as_ptr() as *mut _ as *mut libc::c_void,
             gNaviCUpENGTex.as_ptr() as *mut _ as *mut libc::c_void,
             gNaviCUpENGTex.as_ptr() as *mut _ as *mut libc::c_void]
        };
    static mut startButtonLeftPos: [s16; 3] =
        [132 as libc::c_int as s16, 130 as libc::c_int as s16,
         130 as libc::c_int as s16];
    let mut interfaceCtx: *mut InterfaceContext =
        &mut (*globalCtx).interfaceCtx;
    let mut player: *mut Player =
        (*globalCtx).actorCtx.actorLists[ACTORCAT_PLAYER as libc::c_int as
                                             usize].head as *mut Player;
    let mut pauseCtx: *mut PauseContext = &mut (*globalCtx).pauseCtx;
    let mut temp: s16 = 0;
    let mut dxdy: s16 = 0;
    let mut width: s16 = 0;
    let mut height: s16 = 0;
    let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
    let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
    __gfxCtx = (*globalCtx).state.gfxCtx;
    Graph_OpenDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                    b"../z_parameter.c\x00" as *const u8 as
                        *const libc::c_char, 2900 as libc::c_int);
    // B Button Color & Texture
    // Also loads the Item Button Texture reused by other buttons afterwards
    let fresh70 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g: *mut Gfx = fresh70;
    (*_g).words.w0 =
        (0xe7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g).words.w1 = 0 as libc::c_int as libc::c_uint;
    let fresh71 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_0: *mut Gfx = fresh71;
    (*_g_0).words.w0 =
        (0xfc as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (((1 as libc::c_int as u32_0 &
                   (((0x1 as libc::c_int) << 4 as libc::c_int) -
                        1 as libc::c_int) as libc::c_uint) <<
                  20 as libc::c_int |
                  (3 as libc::c_int as u32_0 &
                       (((0x1 as libc::c_int) << 5 as libc::c_int) -
                            1 as libc::c_int) as libc::c_uint) <<
                      15 as libc::c_int |
                  (1 as libc::c_int as u32_0 &
                       (((0x1 as libc::c_int) << 3 as libc::c_int) -
                            1 as libc::c_int) as libc::c_uint) <<
                      12 as libc::c_int |
                  (3 as libc::c_int as u32_0 &
                       (((0x1 as libc::c_int) << 3 as libc::c_int) -
                            1 as libc::c_int) as libc::c_uint) <<
                      9 as libc::c_int |
                  ((1 as libc::c_int as u32_0 &
                        (((0x1 as libc::c_int) << 4 as libc::c_int) -
                             1 as libc::c_int) as libc::c_uint) <<
                       5 as libc::c_int |
                       (3 as libc::c_int as u32_0 &
                            (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                 1 as libc::c_int) as libc::c_uint) <<
                           0 as libc::c_int)) &
                 (((0x1 as libc::c_int) << 24 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_0).words.w1 =
        (31 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 4 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 28 as libc::c_int |
            (31 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 15 as libc::c_int
            |
            (7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 9 as libc::c_int |
            ((31 as libc::c_int as u32_0 &
                  (((0x1 as libc::c_int) << 4 as libc::c_int) -
                       1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                 |
                 (1 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 3 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     21 as libc::c_int |
                 (3 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 3 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     18 as libc::c_int |
                 (31 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 3 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     6 as libc::c_int |
                 (7 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 3 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     3 as libc::c_int |
                 (7 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 3 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     0 as libc::c_int);
    let fresh72 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_1: *mut Gfx = fresh72;
    (*_g_1).words.w0 =
        (0xfa as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_1).words.w1 =
        ((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                16 as libc::c_int + 43 as libc::c_int +
                                0 as libc::c_int) as usize] as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            ((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                    16 as libc::c_int + 43 as libc::c_int +
                                    1 as libc::c_int) as usize] as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            ((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                    16 as libc::c_int + 43 as libc::c_int +
                                    2 as libc::c_int) as usize] as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            ((*interfaceCtx).bAlpha as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh73 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_2: *mut Gfx = fresh73;
    (*_g_2).words.w0 =
        (0xfb as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_2).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*__gfxCtx).overlay.p =
        Gfx_TextureIA8((*__gfxCtx).overlay.p,
                       gButtonBackgroundTex.as_mut_ptr() as *mut libc::c_void,
                       32 as libc::c_int as s16, 32 as libc::c_int as s16,
                       (*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int
                                              * 16 as libc::c_int +
                                              70 as libc::c_int +
                                              0 as libc::c_int) as usize],
                       (*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int
                                              * 16 as libc::c_int +
                                              74 as libc::c_int +
                                              0 as libc::c_int) as usize],
                       (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int
                                              * 16 as libc::c_int +
                                              80 as libc::c_int +
                                              0 as libc::c_int) as usize],
                       (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int
                                              * 16 as libc::c_int +
                                              80 as libc::c_int +
                                              0 as libc::c_int) as usize],
                       (((*gGameInfo).data[(10 as libc::c_int *
                                                6 as libc::c_int *
                                                16 as libc::c_int +
                                                78 as libc::c_int +
                                                0 as libc::c_int) as usize] as
                             libc::c_int) << 1 as libc::c_int) as u16_0,
                       (((*gGameInfo).data[(10 as libc::c_int *
                                                6 as libc::c_int *
                                                16 as libc::c_int +
                                                78 as libc::c_int +
                                                0 as libc::c_int) as usize] as
                             libc::c_int) << 1 as libc::c_int) as u16_0);
    // C-Left Button Color & Texture
    let fresh74 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_3: *mut Gfx = fresh74;
    (*_g_3).words.w0 =
        (0xe7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_3).words.w1 = 0 as libc::c_int as libc::c_uint;
    let fresh75 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_4: *mut Gfx = fresh75;
    (*_g_4).words.w0 =
        (0xfa as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_4).words.w1 =
        ((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                16 as libc::c_int + 39 as libc::c_int +
                                0 as libc::c_int) as usize] as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            ((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                    16 as libc::c_int + 39 as libc::c_int +
                                    1 as libc::c_int) as usize] as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            ((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                    16 as libc::c_int + 39 as libc::c_int +
                                    2 as libc::c_int) as usize] as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            ((*interfaceCtx).cLeftAlpha as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh76 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_5: *mut Gfx = fresh76;
    (*_g_5).words.w0 =
        (0xe4 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            ((((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                      16 as libc::c_int + 70 as libc::c_int +
                                      1 as libc::c_int) as usize] as
                   libc::c_int +
                   (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                                          16 as libc::c_int +
                                          80 as libc::c_int +
                                          1 as libc::c_int) as usize] as
                       libc::c_int) << 2 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            ((((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                      16 as libc::c_int + 74 as libc::c_int +
                                      1 as libc::c_int) as usize] as
                   libc::c_int +
                   (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                                          16 as libc::c_int +
                                          80 as libc::c_int +
                                          1 as libc::c_int) as usize] as
                       libc::c_int) << 2 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_5).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            ((((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                      16 as libc::c_int + 70 as libc::c_int +
                                      1 as libc::c_int) as usize] as
                   libc::c_int) << 2 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            ((((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                      16 as libc::c_int + 74 as libc::c_int +
                                      1 as libc::c_int) as usize] as
                   libc::c_int) << 2 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh77 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_6: *mut Gfx = fresh77;
    (*_g_6).words.w0 =
        (0xe1 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_6).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 16 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 16 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh78 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_7: *mut Gfx = fresh78;
    (*_g_7).words.w0 =
        (0xf1 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_7).words.w1 =
        ((((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                  16 as libc::c_int + 78 as libc::c_int +
                                  1 as libc::c_int) as usize] as libc::c_int)
              << 1 as libc::c_int) as u32_0 &
             (((0x1 as libc::c_int) << 16 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 16 as libc::c_int |
            ((((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                      16 as libc::c_int + 78 as libc::c_int +
                                      1 as libc::c_int) as usize] as
                   libc::c_int) << 1 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    // C-Down Button Color & Texture
    let fresh79 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_8: *mut Gfx = fresh79;
    (*_g_8).words.w0 =
        (0xfa as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_8).words.w1 =
        ((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                16 as libc::c_int + 39 as libc::c_int +
                                0 as libc::c_int) as usize] as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            ((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                    16 as libc::c_int + 39 as libc::c_int +
                                    1 as libc::c_int) as usize] as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            ((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                    16 as libc::c_int + 39 as libc::c_int +
                                    2 as libc::c_int) as usize] as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            ((*interfaceCtx).cDownAlpha as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh80 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_9: *mut Gfx = fresh80;
    (*_g_9).words.w0 =
        (0xe4 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            ((((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                      16 as libc::c_int + 70 as libc::c_int +
                                      2 as libc::c_int) as usize] as
                   libc::c_int +
                   (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                                          16 as libc::c_int +
                                          80 as libc::c_int +
                                          2 as libc::c_int) as usize] as
                       libc::c_int) << 2 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            ((((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                      16 as libc::c_int + 74 as libc::c_int +
                                      2 as libc::c_int) as usize] as
                   libc::c_int +
                   (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                                          16 as libc::c_int +
                                          80 as libc::c_int +
                                          2 as libc::c_int) as usize] as
                       libc::c_int) << 2 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_9).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            ((((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                      16 as libc::c_int + 70 as libc::c_int +
                                      2 as libc::c_int) as usize] as
                   libc::c_int) << 2 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            ((((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                      16 as libc::c_int + 74 as libc::c_int +
                                      2 as libc::c_int) as usize] as
                   libc::c_int) << 2 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh81 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_10: *mut Gfx = fresh81;
    (*_g_10).words.w0 =
        (0xe1 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_10).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 16 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 16 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh82 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_11: *mut Gfx = fresh82;
    (*_g_11).words.w0 =
        (0xf1 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_11).words.w1 =
        ((((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                  16 as libc::c_int + 78 as libc::c_int +
                                  2 as libc::c_int) as usize] as libc::c_int)
              << 1 as libc::c_int) as u32_0 &
             (((0x1 as libc::c_int) << 16 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 16 as libc::c_int |
            ((((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                      16 as libc::c_int + 78 as libc::c_int +
                                      2 as libc::c_int) as usize] as
                   libc::c_int) << 1 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    // C-Right Button Color & Texture
    let fresh83 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_12: *mut Gfx = fresh83;
    (*_g_12).words.w0 =
        (0xfa as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_12).words.w1 =
        ((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                16 as libc::c_int + 39 as libc::c_int +
                                0 as libc::c_int) as usize] as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            ((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                    16 as libc::c_int + 39 as libc::c_int +
                                    1 as libc::c_int) as usize] as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            ((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                    16 as libc::c_int + 39 as libc::c_int +
                                    2 as libc::c_int) as usize] as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            ((*interfaceCtx).cRightAlpha as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh84 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_13: *mut Gfx = fresh84;
    (*_g_13).words.w0 =
        (0xe4 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            ((((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                      16 as libc::c_int + 70 as libc::c_int +
                                      3 as libc::c_int) as usize] as
                   libc::c_int +
                   (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                                          16 as libc::c_int +
                                          80 as libc::c_int +
                                          3 as libc::c_int) as usize] as
                       libc::c_int) << 2 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            ((((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                      16 as libc::c_int + 74 as libc::c_int +
                                      3 as libc::c_int) as usize] as
                   libc::c_int +
                   (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                                          16 as libc::c_int +
                                          80 as libc::c_int +
                                          3 as libc::c_int) as usize] as
                       libc::c_int) << 2 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_13).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            ((((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                      16 as libc::c_int + 70 as libc::c_int +
                                      3 as libc::c_int) as usize] as
                   libc::c_int) << 2 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            ((((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                      16 as libc::c_int + 74 as libc::c_int +
                                      3 as libc::c_int) as usize] as
                   libc::c_int) << 2 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh85 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_14: *mut Gfx = fresh85;
    (*_g_14).words.w0 =
        (0xe1 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_14).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 16 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 16 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh86 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_15: *mut Gfx = fresh86;
    (*_g_15).words.w0 =
        (0xf1 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_15).words.w1 =
        ((((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                  16 as libc::c_int + 78 as libc::c_int +
                                  3 as libc::c_int) as usize] as libc::c_int)
              << 1 as libc::c_int) as u32_0 &
             (((0x1 as libc::c_int) << 16 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 16 as libc::c_int |
            ((((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                      16 as libc::c_int + 78 as libc::c_int +
                                      3 as libc::c_int) as usize] as
                   libc::c_int) << 1 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    if ((*pauseCtx).state as libc::c_int) < 8 as libc::c_int ||
           (*pauseCtx).state as libc::c_int >= 18 as libc::c_int {
        if (*globalCtx).pauseCtx.state as libc::c_int != 0 as libc::c_int ||
               (*globalCtx).pauseCtx.debugState as libc::c_int !=
                   0 as libc::c_int {
            // Start Button Texture, Color & Label
            let fresh87 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_16: *mut Gfx = fresh87;
            (*_g_16).words.w0 =
                (0xe7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_16).words.w1 = 0 as libc::c_int as libc::c_uint;
            let fresh88 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_17: *mut Gfx = fresh88;
            (*_g_17).words.w0 =
                (0xfa as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_17).words.w1 =
                (120 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (120 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (120 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    ((*interfaceCtx).startAlpha as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh89 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_18: *mut Gfx = fresh89;
            (*_g_18).words.w0 =
                (0xe4 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (((startButtonLeftPos[gSaveContext.language as usize] as
                           libc::c_int + 22 as libc::c_int) <<
                          2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (156 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_18).words.w1 =
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (((startButtonLeftPos[gSaveContext.language as usize] as
                           libc::c_int) << 2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (68 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh90 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_19: *mut Gfx = fresh90;
            (*_g_19).words.w0 =
                (0xe1 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_19).words.w1 =
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh91 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_20: *mut Gfx = fresh91;
            (*_g_20).words.w0 =
                (0xf1 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_20).words.w1 =
                (1462 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                    (1462 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh92 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_21: *mut Gfx = fresh92;
            (*_g_21).words.w0 =
                (0xe7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_21).words.w1 = 0 as libc::c_int as libc::c_uint;
            let fresh93 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_22: *mut Gfx = fresh93;
            (*_g_22).words.w0 =
                (0xfa as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_22).words.w1 =
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    ((*interfaceCtx).startAlpha as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh94 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_23: *mut Gfx = fresh94;
            (*_g_23).words.w0 =
                (0xfb as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_23).words.w1 =
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh95 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_24: *mut Gfx = fresh95;
            (*_g_24).words.w0 =
                (0xfc as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (((3 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          20 as libc::c_int |
                          (1 as libc::c_int as u32_0 &
                               (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              15 as libc::c_int |
                          (1 as libc::c_int as u32_0 &
                               (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              12 as libc::c_int |
                          (3 as libc::c_int as u32_0 &
                               (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              9 as libc::c_int |
                          ((3 as libc::c_int as u32_0 &
                                (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                     1 as libc::c_int) as libc::c_uint) <<
                               5 as libc::c_int |
                               (1 as libc::c_int as u32_0 &
                                    (((0x1 as libc::c_int) <<
                                          5 as libc::c_int) -
                                         1 as libc::c_int) as libc::c_uint) <<
                                   0 as libc::c_int)) &
                         (((0x1 as libc::c_int) << 24 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_24).words.w1 =
                (5 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    28 as libc::c_int |
                    (5 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        15 as libc::c_int |
                    (7 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (7 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        9 as libc::c_int |
                    ((5 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 4 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         24 as libc::c_int |
                         (1 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             21 as libc::c_int |
                         (3 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             18 as libc::c_int |
                         (5 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             6 as libc::c_int |
                         (7 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             3 as libc::c_int |
                         (7 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             0 as libc::c_int);
            let fresh96 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_25: *mut Gfx = fresh96;
            (*_g_25).words.w0 =
                (0xfd as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (3 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        21 as libc::c_int |
                    (2 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    ((1 as libc::c_int - 1 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_25).words.w1 =
                (*interfaceCtx).doActionSegment.offset((48 as libc::c_int *
                                                            16 as libc::c_int
                                                            / 2 as libc::c_int
                                                            *
                                                            2 as libc::c_int)
                                                           as isize) as
                    libc::c_uint;
            let fresh97 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_26: *mut Gfx = fresh97;
            (*_g_26).words.w0 =
                (0xf5 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (3 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        21 as libc::c_int |
                    (2 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 9 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        9 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 9 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_26).words.w1 =
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        20 as libc::c_int |
                    ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        18 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        14 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        10 as libc::c_int |
                    ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        4 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh98 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_27: *mut Gfx = fresh98;
            (*_g_27).words.w0 =
                (0xe6 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_27).words.w1 = 0 as libc::c_int as libc::c_uint;
            let fresh99 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_28: *mut Gfx = fresh99;
            (*_g_28).words.w0 =
                (0xf3 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_28).words.w1 =
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((if ((48 as libc::c_int * 16 as libc::c_int +
                               3 as libc::c_int >> 2 as libc::c_int) -
                              1 as libc::c_int) < 2047 as libc::c_int {
                          (48 as libc::c_int * 16 as libc::c_int +
                               3 as libc::c_int >> 2 as libc::c_int) -
                              1 as libc::c_int
                      } else { 2047 as libc::c_int }) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (((((1 as libc::c_int) << 11 as libc::c_int) +
                           (if 1 as libc::c_int >
                                   48 as libc::c_int / 16 as libc::c_int {
                                1 as libc::c_int
                            } else {
                                (48 as libc::c_int) / 16 as libc::c_int
                            }) - 1 as libc::c_int) /
                          (if 1 as libc::c_int >
                                  48 as libc::c_int / 16 as libc::c_int {
                               1 as libc::c_int
                           } else {
                               (48 as libc::c_int) / 16 as libc::c_int
                           })) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh100 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_29: *mut Gfx = fresh100;
            (*_g_29).words.w0 =
                (0xe7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_29).words.w1 = 0 as libc::c_int as libc::c_uint;
            let fresh101 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_30: *mut Gfx = fresh101;
            (*_g_30).words.w0 =
                (0xf5 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (3 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        21 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    (((48 as libc::c_int >> 1 as libc::c_int) +
                          7 as libc::c_int >> 3 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 9 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        9 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 9 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_30).words.w1 =
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        20 as libc::c_int |
                    ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        18 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        14 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        10 as libc::c_int |
                    ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        4 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh102 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_31: *mut Gfx = fresh102;
            (*_g_31).words.w0 =
                (0xf2 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_31).words.w1 =
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (((48 as libc::c_int - 1 as libc::c_int) <<
                          2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (((16 as libc::c_int - 1 as libc::c_int) <<
                          2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            dxdy =
                (((1 as libc::c_int) << 10 as libc::c_int) as libc::c_float /
                     ((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int
                                             * 16 as libc::c_int +
                                             48 as libc::c_int +
                                             gSaveContext.language as
                                                 libc::c_int) as usize] as
                          libc::c_int as libc::c_float / 100.0f32)) as s16;
            width =
                (48 as libc::c_int as libc::c_float /
                     ((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int
                                             * 16 as libc::c_int +
                                             48 as libc::c_int +
                                             gSaveContext.language as
                                                 libc::c_int) as usize] as
                          libc::c_int as libc::c_float / 100.0f32)) as s16;
            height =
                (16 as libc::c_int as libc::c_float /
                     ((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int
                                             * 16 as libc::c_int +
                                             48 as libc::c_int +
                                             gSaveContext.language as
                                                 libc::c_int) as usize] as
                          libc::c_int as libc::c_float / 100.0f32)) as s16;
            let fresh103 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_32: *mut Gfx = fresh103;
            (*_g_32).words.w0 =
                (0xe4 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int
                                              * 16 as libc::c_int +
                                              54 as libc::c_int +
                                              gSaveContext.language as
                                                  libc::c_int) as usize] as
                           libc::c_int + width as libc::c_int) <<
                          2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    ((((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int
                                              * 16 as libc::c_int +
                                              51 as libc::c_int +
                                              gSaveContext.language as
                                                  libc::c_int) as usize] as
                           libc::c_int + height as libc::c_int) <<
                          2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_32).words.w1 =
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int
                                              * 16 as libc::c_int +
                                              54 as libc::c_int +
                                              gSaveContext.language as
                                                  libc::c_int) as usize] as
                           libc::c_int) << 2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    ((((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int
                                              * 16 as libc::c_int +
                                              51 as libc::c_int +
                                              gSaveContext.language as
                                                  libc::c_int) as usize] as
                           libc::c_int) << 2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh104 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_33: *mut Gfx = fresh104;
            (*_g_33).words.w0 =
                (0xe1 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_33).words.w1 =
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh105 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_34: *mut Gfx = fresh105;
            (*_g_34).words.w0 =
                (0xf1 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_34).words.w1 =
                (dxdy as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                    (dxdy as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
        }
    }
    if (*interfaceCtx).naviCalling as libc::c_int != 0 &&
           (*globalCtx).pauseCtx.state as libc::c_int == 0 as libc::c_int &&
           (*globalCtx).pauseCtx.debugState as libc::c_int == 0 as libc::c_int
           &&
           (*globalCtx).csCtx.state as libc::c_int ==
               CS_STATE_IDLE as libc::c_int {
        if sCUpInvisible == 0 {
            // C-Up Button Texture, Color & Label (Navi Text)
            let fresh106 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_35: *mut Gfx = fresh106;
            (*_g_35).words.w0 =
                (0xe7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_35).words.w1 = 0 as libc::c_int as libc::c_uint;
            if gSaveContext.unk_13EA as libc::c_int == 1 as libc::c_int ||
                   gSaveContext.unk_13EA as libc::c_int == 2 as libc::c_int ||
                   gSaveContext.unk_13EA as libc::c_int == 5 as libc::c_int {
                temp = 0 as libc::c_int as s16
            } else if (*player).stateFlags1 &
                          0x200000 as libc::c_int as libc::c_uint != 0 ||
                          func_8008F2F8(globalCtx) == 4 as libc::c_int ||
                          (*player).stateFlags2 &
                              0x40000 as libc::c_int as libc::c_uint != 0 {
                temp = 70 as libc::c_int as s16
            } else { temp = (*interfaceCtx).healthAlpha as s16 }
            let fresh107 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_36: *mut Gfx = fresh107;
            (*_g_36).words.w0 =
                (0xfa as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_36).words.w1 =
                ((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                        16 as libc::c_int + 39 as libc::c_int
                                        + 0 as libc::c_int) as usize] as u32_0
                     &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                            16 as libc::c_int +
                                            39 as libc::c_int +
                                            1 as libc::c_int) as usize] as
                         u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    ((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                            16 as libc::c_int +
                                            39 as libc::c_int +
                                            2 as libc::c_int) as usize] as
                         u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (temp as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh108 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_37: *mut Gfx = fresh108;
            (*_g_37).words.w0 =
                (0xfc as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (((1 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          20 as libc::c_int |
                          (3 as libc::c_int as u32_0 &
                               (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              15 as libc::c_int |
                          (1 as libc::c_int as u32_0 &
                               (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              12 as libc::c_int |
                          (3 as libc::c_int as u32_0 &
                               (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              9 as libc::c_int |
                          ((1 as libc::c_int as u32_0 &
                                (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                     1 as libc::c_int) as libc::c_uint) <<
                               5 as libc::c_int |
                               (3 as libc::c_int as u32_0 &
                                    (((0x1 as libc::c_int) <<
                                          5 as libc::c_int) -
                                         1 as libc::c_int) as libc::c_uint) <<
                                   0 as libc::c_int)) &
                         (((0x1 as libc::c_int) << 24 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_37).words.w1 =
                (31 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    28 as libc::c_int |
                    (31 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        15 as libc::c_int |
                    (7 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (7 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        9 as libc::c_int |
                    ((31 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 4 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         24 as libc::c_int |
                         (1 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             21 as libc::c_int |
                         (3 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             18 as libc::c_int |
                         (31 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             6 as libc::c_int |
                         (7 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             3 as libc::c_int |
                         (7 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             0 as libc::c_int);
            let fresh109 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_38: *mut Gfx = fresh109;
            (*_g_38).words.w0 =
                (0xe4 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int
                                              * 16 as libc::c_int +
                                              62 as libc::c_int) as usize] as
                           libc::c_int + 16 as libc::c_int) <<
                          2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    ((((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int
                                              * 16 as libc::c_int +
                                              63 as libc::c_int) as usize] as
                           libc::c_int + 16 as libc::c_int) <<
                          2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_38).words.w1 =
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int
                                              * 16 as libc::c_int +
                                              62 as libc::c_int) as usize] as
                           libc::c_int) << 2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    ((((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int
                                              * 16 as libc::c_int +
                                              63 as libc::c_int) as usize] as
                           libc::c_int) << 2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh110 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_39: *mut Gfx = fresh110;
            (*_g_39).words.w0 =
                (0xe1 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_39).words.w1 =
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh111 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_40: *mut Gfx = fresh111;
            (*_g_40).words.w0 =
                (0xf1 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_40).words.w1 =
                (((2 as libc::c_int) << 10 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                    (((2 as libc::c_int) << 10 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh112 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_41: *mut Gfx = fresh112;
            (*_g_41).words.w0 =
                (0xe7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_41).words.w1 = 0 as libc::c_int as libc::c_uint;
            let fresh113 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_42: *mut Gfx = fresh113;
            (*_g_42).words.w0 =
                (0xfa as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_42).words.w1 =
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (temp as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh114 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_43: *mut Gfx = fresh114;
            (*_g_43).words.w0 =
                (0xfb as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_43).words.w1 =
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh115 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_44: *mut Gfx = fresh115;
            (*_g_44).words.w0 =
                (0xfc as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (((3 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          20 as libc::c_int |
                          (1 as libc::c_int as u32_0 &
                               (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              15 as libc::c_int |
                          (1 as libc::c_int as u32_0 &
                               (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              12 as libc::c_int |
                          (3 as libc::c_int as u32_0 &
                               (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              9 as libc::c_int |
                          ((3 as libc::c_int as u32_0 &
                                (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                     1 as libc::c_int) as libc::c_uint) <<
                               5 as libc::c_int |
                               (1 as libc::c_int as u32_0 &
                                    (((0x1 as libc::c_int) <<
                                          5 as libc::c_int) -
                                         1 as libc::c_int) as libc::c_uint) <<
                                   0 as libc::c_int)) &
                         (((0x1 as libc::c_int) << 24 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_44).words.w1 =
                (5 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    28 as libc::c_int |
                    (5 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        15 as libc::c_int |
                    (7 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (7 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        9 as libc::c_int |
                    ((5 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 4 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         24 as libc::c_int |
                         (1 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             21 as libc::c_int |
                         (3 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             18 as libc::c_int |
                         (5 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             6 as libc::c_int |
                         (7 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             3 as libc::c_int |
                         (7 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             0 as libc::c_int);
            let fresh116 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_45: *mut Gfx = fresh116;
            (*_g_45).words.w0 =
                (0xfd as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (3 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        21 as libc::c_int |
                    (2 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    ((1 as libc::c_int - 1 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_45).words.w1 =
                cUpLabelTextures[gSaveContext.language as usize] as
                    libc::c_uint;
            let fresh117 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_46: *mut Gfx = fresh117;
            (*_g_46).words.w0 =
                (0xf5 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (3 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        21 as libc::c_int |
                    (2 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 9 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        9 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 9 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_46).words.w1 =
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        20 as libc::c_int |
                    ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        18 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        14 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        10 as libc::c_int |
                    ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        4 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh118 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_47: *mut Gfx = fresh118;
            (*_g_47).words.w0 =
                (0xe6 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_47).words.w1 = 0 as libc::c_int as libc::c_uint;
            let fresh119 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_48: *mut Gfx = fresh119;
            (*_g_48).words.w0 =
                (0xf3 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_48).words.w1 =
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((if ((32 as libc::c_int * 8 as libc::c_int +
                               3 as libc::c_int >> 2 as libc::c_int) -
                              1 as libc::c_int) < 2047 as libc::c_int {
                          (32 as libc::c_int * 8 as libc::c_int +
                               3 as libc::c_int >> 2 as libc::c_int) -
                              1 as libc::c_int
                      } else { 2047 as libc::c_int }) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (((((1 as libc::c_int) << 11 as libc::c_int) +
                           (if 1 as libc::c_int >
                                   32 as libc::c_int / 16 as libc::c_int {
                                1 as libc::c_int
                            } else {
                                (32 as libc::c_int) / 16 as libc::c_int
                            }) - 1 as libc::c_int) /
                          (if 1 as libc::c_int >
                                  32 as libc::c_int / 16 as libc::c_int {
                               1 as libc::c_int
                           } else {
                               (32 as libc::c_int) / 16 as libc::c_int
                           })) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh120 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_49: *mut Gfx = fresh120;
            (*_g_49).words.w0 =
                (0xe7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_49).words.w1 = 0 as libc::c_int as libc::c_uint;
            let fresh121 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_50: *mut Gfx = fresh121;
            (*_g_50).words.w0 =
                (0xf5 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (3 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        21 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    (((32 as libc::c_int >> 1 as libc::c_int) +
                          7 as libc::c_int >> 3 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 9 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        9 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 9 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_50).words.w1 =
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        20 as libc::c_int |
                    ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        18 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        14 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        10 as libc::c_int |
                    ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        4 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh122 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_51: *mut Gfx = fresh122;
            (*_g_51).words.w0 =
                (0xf2 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_51).words.w1 =
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (((32 as libc::c_int - 1 as libc::c_int) <<
                          2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (((8 as libc::c_int - 1 as libc::c_int) <<
                          2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh123 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_52: *mut Gfx = fresh123;
            (*_g_52).words.w0 =
                (0xe4 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((((*gGameInfo).data[(6 as libc::c_int * 6 as libc::c_int
                                              * 16 as libc::c_int +
                                              88 as libc::c_int) as usize] as
                           libc::c_int + 32 as libc::c_int) <<
                          2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    ((((*gGameInfo).data[(6 as libc::c_int * 6 as libc::c_int
                                              * 16 as libc::c_int +
                                              89 as libc::c_int) as usize] as
                           libc::c_int + 8 as libc::c_int) <<
                          2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_52).words.w1 =
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((((*gGameInfo).data[(6 as libc::c_int * 6 as libc::c_int
                                              * 16 as libc::c_int +
                                              88 as libc::c_int) as usize] as
                           libc::c_int) << 2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    ((((*gGameInfo).data[(6 as libc::c_int * 6 as libc::c_int
                                              * 16 as libc::c_int +
                                              89 as libc::c_int) as usize] as
                           libc::c_int) << 2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh124 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_53: *mut Gfx = fresh124;
            (*_g_53).words.w0 =
                (0xe1 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_53).words.w1 =
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh125 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_54: *mut Gfx = fresh125;
            (*_g_54).words.w0 =
                (0xf1 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_54).words.w1 =
                (((1 as libc::c_int) << 10 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                    (((1 as libc::c_int) << 10 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
        }
        sCUpTimer = sCUpTimer.wrapping_sub(1);
        if sCUpTimer as libc::c_int == 0 as libc::c_int {
            sCUpInvisible =
                (sCUpInvisible as libc::c_int ^ 1 as libc::c_int) as u16_0;
            sCUpTimer = 10 as libc::c_int as u16_0
        }
    }
    let fresh126 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_55: *mut Gfx = fresh126;
    (*_g_55).words.w0 =
        (0xe7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_55).words.w1 = 0 as libc::c_int as libc::c_uint;
    // Empty C Button Arrows
    temp = 1 as libc::c_int as s16;
    while (temp as libc::c_int) < 4 as libc::c_int {
        if gSaveContext.equips.buttonItems[temp as usize] as libc::c_int >
               0xf0 as libc::c_int {
            if temp as libc::c_int == 1 as libc::c_int {
                let fresh127 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_56: *mut Gfx = fresh127;
                (*_g_56).words.w0 =
                    (0xfa as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            8 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                (*_g_56).words.w1 =
                    ((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                            16 as libc::c_int +
                                            39 as libc::c_int +
                                            0 as libc::c_int) as usize] as
                         u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        ((*gGameInfo).data[(10 as libc::c_int *
                                                6 as libc::c_int *
                                                16 as libc::c_int +
                                                39 as libc::c_int +
                                                1 as libc::c_int) as usize] as
                             u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            16 as libc::c_int |
                        ((*gGameInfo).data[(10 as libc::c_int *
                                                6 as libc::c_int *
                                                16 as libc::c_int +
                                                39 as libc::c_int +
                                                2 as libc::c_int) as usize] as
                             u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            8 as libc::c_int |
                        ((*interfaceCtx).cLeftAlpha as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int
            } else if temp as libc::c_int == 2 as libc::c_int {
                let fresh128 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_57: *mut Gfx = fresh128;
                (*_g_57).words.w0 =
                    (0xfa as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            8 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                (*_g_57).words.w1 =
                    ((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                            16 as libc::c_int +
                                            39 as libc::c_int +
                                            0 as libc::c_int) as usize] as
                         u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        ((*gGameInfo).data[(10 as libc::c_int *
                                                6 as libc::c_int *
                                                16 as libc::c_int +
                                                39 as libc::c_int +
                                                1 as libc::c_int) as usize] as
                             u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            16 as libc::c_int |
                        ((*gGameInfo).data[(10 as libc::c_int *
                                                6 as libc::c_int *
                                                16 as libc::c_int +
                                                39 as libc::c_int +
                                                2 as libc::c_int) as usize] as
                             u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            8 as libc::c_int |
                        ((*interfaceCtx).cDownAlpha as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int
            } else {
                let fresh129 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_58: *mut Gfx = fresh129;
                (*_g_58).words.w0 =
                    (0xfa as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            8 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                (*_g_58).words.w1 =
                    ((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                            16 as libc::c_int +
                                            39 as libc::c_int +
                                            0 as libc::c_int) as usize] as
                         u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        ((*gGameInfo).data[(10 as libc::c_int *
                                                6 as libc::c_int *
                                                16 as libc::c_int +
                                                39 as libc::c_int +
                                                1 as libc::c_int) as usize] as
                             u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            16 as libc::c_int |
                        ((*gGameInfo).data[(10 as libc::c_int *
                                                6 as libc::c_int *
                                                16 as libc::c_int +
                                                39 as libc::c_int +
                                                2 as libc::c_int) as usize] as
                             u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            8 as libc::c_int |
                        ((*interfaceCtx).cRightAlpha as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int
            }
            (*__gfxCtx).overlay.p =
                Gfx_TextureIA8((*__gfxCtx).overlay.p,
                               (gButtonBackgroundTex.as_mut_ptr() as
                                    *mut u8_0).offset((32 as libc::c_int *
                                                           32 as libc::c_int *
                                                           (temp as
                                                                libc::c_int +
                                                                1 as
                                                                    libc::c_int))
                                                          as isize) as
                                   *mut libc::c_void,
                               32 as libc::c_int as s16,
                               32 as libc::c_int as s16,
                               (*gGameInfo).data[(10 as libc::c_int *
                                                      6 as libc::c_int *
                                                      16 as libc::c_int +
                                                      70 as libc::c_int +
                                                      temp as libc::c_int) as
                                                     usize],
                               (*gGameInfo).data[(10 as libc::c_int *
                                                      6 as libc::c_int *
                                                      16 as libc::c_int +
                                                      74 as libc::c_int +
                                                      temp as libc::c_int) as
                                                     usize],
                               (*gGameInfo).data[(20 as libc::c_int *
                                                      6 as libc::c_int *
                                                      16 as libc::c_int +
                                                      80 as libc::c_int +
                                                      temp as libc::c_int) as
                                                     usize],
                               (*gGameInfo).data[(20 as libc::c_int *
                                                      6 as libc::c_int *
                                                      16 as libc::c_int +
                                                      80 as libc::c_int +
                                                      temp as libc::c_int) as
                                                     usize],
                               (((*gGameInfo).data[(10 as libc::c_int *
                                                        6 as libc::c_int *
                                                        16 as libc::c_int +
                                                        78 as libc::c_int +
                                                        temp as libc::c_int)
                                                       as usize] as
                                     libc::c_int) << 1 as libc::c_int) as
                                   u16_0,
                               (((*gGameInfo).data[(10 as libc::c_int *
                                                        6 as libc::c_int *
                                                        16 as libc::c_int +
                                                        78 as libc::c_int +
                                                        temp as libc::c_int)
                                                       as usize] as
                                     libc::c_int) << 1 as libc::c_int) as
                                   u16_0)
        }
        temp += 1
    }
    Graph_CloseDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                     b"../z_parameter.c\x00" as *const u8 as
                         *const libc::c_char, 3071 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn Interface_DrawItemIconTexture(mut globalCtx:
                                                           *mut GlobalContext,
                                                       mut texture:
                                                           *mut libc::c_void,
                                                       mut button: s16) {
    let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
    let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
    __gfxCtx = (*globalCtx).state.gfxCtx;
    Graph_OpenDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                    b"../z_parameter.c\x00" as *const u8 as
                        *const libc::c_char, 3079 as libc::c_int);
    let fresh130 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g: *mut Gfx = fresh130;
    (*_g).words.w0 =
        (0xfd as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 21 as libc::c_int
            |
            (3 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            ((1 as libc::c_int - 1 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g).words.w1 = texture as libc::c_uint;
    let fresh131 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_0: *mut Gfx = fresh131;
    (*_g_0).words.w0 =
        (0xf5 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 21 as libc::c_int
            |
            (3 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 9 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_0).words.w1 =
        (7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 20 as libc::c_int
            |
            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 18 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 14 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 10 as libc::c_int
            |
            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 4 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh132 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_1: *mut Gfx = fresh132;
    (*_g_1).words.w0 =
        (0xe6 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_1).words.w1 = 0 as libc::c_int as libc::c_uint;
    let fresh133 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_2: *mut Gfx = fresh133;
    (*_g_2).words.w0 =
        (0xf3 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_2).words.w1 =
        (7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            ((if ((32 as libc::c_int * 32 as libc::c_int + 0 as libc::c_int >>
                       0 as libc::c_int) - 1 as libc::c_int) <
                     2047 as libc::c_int {
                  (32 as libc::c_int * 32 as libc::c_int + 0 as libc::c_int >>
                       0 as libc::c_int) - 1 as libc::c_int
              } else { 2047 as libc::c_int }) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (((((1 as libc::c_int) << 11 as libc::c_int) +
                   (if 1 as libc::c_int >
                           32 as libc::c_int * 4 as libc::c_int /
                               8 as libc::c_int {
                        1 as libc::c_int
                    } else {
                        (32 as libc::c_int * 4 as libc::c_int) /
                            8 as libc::c_int
                    }) - 1 as libc::c_int) /
                  (if 1 as libc::c_int >
                          32 as libc::c_int * 4 as libc::c_int /
                              8 as libc::c_int {
                       1 as libc::c_int
                   } else {
                       (32 as libc::c_int * 4 as libc::c_int) /
                           8 as libc::c_int
                   })) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh134 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_3: *mut Gfx = fresh134;
    (*_g_3).words.w0 =
        (0xe7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_3).words.w1 = 0 as libc::c_int as libc::c_uint;
    let fresh135 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_4: *mut Gfx = fresh135;
    (*_g_4).words.w0 =
        (0xf5 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 21 as libc::c_int
            |
            (3 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            ((32 as libc::c_int * 2 as libc::c_int + 7 as libc::c_int >>
                  3 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 9 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_4).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 20 as libc::c_int
            |
            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 18 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 14 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 10 as libc::c_int
            |
            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 4 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh136 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_5: *mut Gfx = fresh136;
    (*_g_5).words.w0 =
        (0xf2 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_5).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (((32 as libc::c_int - 1 as libc::c_int) << 2 as libc::c_int) as
                 u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (((32 as libc::c_int - 1 as libc::c_int) << 2 as libc::c_int) as
                 u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh137 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_6: *mut Gfx = fresh137;
    (*_g_6).words.w0 =
        (0xe4 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            ((((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                      16 as libc::c_int + 82 as libc::c_int +
                                      button as libc::c_int) as usize] as
                   libc::c_int +
                   (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                                          16 as libc::c_int +
                                          76 as libc::c_int +
                                          button as libc::c_int) as usize] as
                       libc::c_int) << 2 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            ((((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                      16 as libc::c_int + 86 as libc::c_int +
                                      button as libc::c_int) as usize] as
                   libc::c_int +
                   (*gGameInfo).data[(20 as libc::c_int * 6 as libc::c_int *
                                          16 as libc::c_int +
                                          76 as libc::c_int +
                                          button as libc::c_int) as usize] as
                       libc::c_int) << 2 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_6).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            ((((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                      16 as libc::c_int + 82 as libc::c_int +
                                      button as libc::c_int) as usize] as
                   libc::c_int) << 2 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            ((((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                      16 as libc::c_int + 86 as libc::c_int +
                                      button as libc::c_int) as usize] as
                   libc::c_int) << 2 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh138 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_7: *mut Gfx = fresh138;
    (*_g_7).words.w0 =
        (0xe1 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_7).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 16 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 16 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh139 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_8: *mut Gfx = fresh139;
    (*_g_8).words.w0 =
        (0xf1 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_8).words.w1 =
        ((((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                  16 as libc::c_int + 90 as libc::c_int +
                                  button as libc::c_int) as usize] as
               libc::c_int) << 1 as libc::c_int) as u32_0 &
             (((0x1 as libc::c_int) << 16 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 16 as libc::c_int |
            ((((*gGameInfo).data[(10 as libc::c_int * 6 as libc::c_int *
                                      16 as libc::c_int + 90 as libc::c_int +
                                      button as libc::c_int) as usize] as
                   libc::c_int) << 1 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    Graph_CloseDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                     b"../z_parameter.c\x00" as *const u8 as
                         *const libc::c_char, 3094 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn Interface_DrawAmmoCount(mut globalCtx:
                                                     *mut GlobalContext,
                                                 mut button: s16,
                                                 mut alpha: s16) {
    let mut i: s16 = 0;
    let mut ammo: s16 = 0;
    let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
    let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
    __gfxCtx = (*globalCtx).state.gfxCtx;
    Graph_OpenDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                    b"../z_parameter.c\x00" as *const u8 as
                        *const libc::c_char, 3105 as libc::c_int);
    i = gSaveContext.equips.buttonItems[button as usize] as s16;
    if i as libc::c_int == ITEM_STICK as libc::c_int ||
           i as libc::c_int == ITEM_NUT as libc::c_int ||
           i as libc::c_int == ITEM_BOMB as libc::c_int ||
           i as libc::c_int == ITEM_BOW as libc::c_int ||
           i as libc::c_int >= ITEM_BOW_ARROW_FIRE as libc::c_int &&
               i as libc::c_int <= ITEM_BOW_ARROW_LIGHT as libc::c_int ||
           i as libc::c_int == ITEM_SLINGSHOT as libc::c_int ||
           i as libc::c_int == ITEM_BOMBCHU as libc::c_int ||
           i as libc::c_int == ITEM_BEAN as libc::c_int {
        if i as libc::c_int >= ITEM_BOW_ARROW_FIRE as libc::c_int &&
               i as libc::c_int <= ITEM_BOW_ARROW_LIGHT as libc::c_int {
            i = ITEM_BOW as libc::c_int as s16
        }
        ammo =
            gSaveContext.inventory.ammo[gItemSlots[i as usize] as usize] as
                s16;
        let fresh140 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g: *mut Gfx = fresh140;
        (*_g).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g).words.w1 = 0 as libc::c_int as libc::c_uint;
        if button as libc::c_int == 0 as libc::c_int &&
               gSaveContext.minigameState as libc::c_int == 1 as libc::c_int {
            ammo = (*globalCtx).interfaceCtx.hbaAmmo as s16
        } else if button as libc::c_int == 0 as libc::c_int &&
                      (*globalCtx).shootingGalleryStatus as libc::c_int >
                          1 as libc::c_int {
            ammo =
                ((*globalCtx).shootingGalleryStatus as libc::c_int -
                     1 as libc::c_int) as s16
        } else if button as libc::c_int == 0 as libc::c_int &&
                      (*globalCtx).sceneNum as libc::c_int ==
                          SCENE_BOWLING as libc::c_int &&
                      Flags_GetSwitch(globalCtx, 0x38 as libc::c_int) != 0 {
            ammo = (*globalCtx).bombchuBowlingStatus as s16;
            if (ammo as libc::c_int) < 0 as libc::c_int {
                ammo = 0 as libc::c_int as s16
            }
        } else if i as libc::c_int == ITEM_BOW as libc::c_int &&
                      gSaveContext.inventory.ammo[gItemSlots[i as usize] as
                                                      usize] as libc::c_int ==
                          gUpgradeCapacities[UPG_QUIVER as libc::c_int as
                                                 usize][((gSaveContext.inventory.upgrades
                                                              &
                                                              gUpgradeMasks[UPG_QUIVER
                                                                                as
                                                                                libc::c_int
                                                                                as
                                                                                usize])
                                                             as s32 >>
                                                             gUpgradeShifts[UPG_QUIVER
                                                                                as
                                                                                libc::c_int
                                                                                as
                                                                                usize]
                                                                 as
                                                                 libc::c_int)
                                                            as usize] as
                              libc::c_int ||
                      i as libc::c_int == ITEM_BOMB as libc::c_int &&
                          gSaveContext.inventory.ammo[gItemSlots[i as usize]
                                                          as usize] as
                              libc::c_int ==
                              gUpgradeCapacities[UPG_BOMB_BAG as libc::c_int
                                                     as
                                                     usize][((gSaveContext.inventory.upgrades
                                                                  &
                                                                  gUpgradeMasks[UPG_BOMB_BAG
                                                                                    as
                                                                                    libc::c_int
                                                                                    as
                                                                                    usize])
                                                                 as s32 >>
                                                                 gUpgradeShifts[UPG_BOMB_BAG
                                                                                    as
                                                                                    libc::c_int
                                                                                    as
                                                                                    usize]
                                                                     as
                                                                     libc::c_int)
                                                                as usize] as
                                  libc::c_int ||
                      i as libc::c_int == ITEM_SLINGSHOT as libc::c_int &&
                          gSaveContext.inventory.ammo[gItemSlots[i as usize]
                                                          as usize] as
                              libc::c_int ==
                              gUpgradeCapacities[UPG_BULLET_BAG as libc::c_int
                                                     as
                                                     usize][((gSaveContext.inventory.upgrades
                                                                  &
                                                                  gUpgradeMasks[UPG_BULLET_BAG
                                                                                    as
                                                                                    libc::c_int
                                                                                    as
                                                                                    usize])
                                                                 as s32 >>
                                                                 gUpgradeShifts[UPG_BULLET_BAG
                                                                                    as
                                                                                    libc::c_int
                                                                                    as
                                                                                    usize]
                                                                     as
                                                                     libc::c_int)
                                                                as usize] as
                                  libc::c_int ||
                      i as libc::c_int == ITEM_STICK as libc::c_int &&
                          gSaveContext.inventory.ammo[gItemSlots[i as usize]
                                                          as usize] as
                              libc::c_int ==
                              gUpgradeCapacities[UPG_STICKS as libc::c_int as
                                                     usize][((gSaveContext.inventory.upgrades
                                                                  &
                                                                  gUpgradeMasks[UPG_STICKS
                                                                                    as
                                                                                    libc::c_int
                                                                                    as
                                                                                    usize])
                                                                 as s32 >>
                                                                 gUpgradeShifts[UPG_STICKS
                                                                                    as
                                                                                    libc::c_int
                                                                                    as
                                                                                    usize]
                                                                     as
                                                                     libc::c_int)
                                                                as usize] as
                                  libc::c_int ||
                      i as libc::c_int == ITEM_NUT as libc::c_int &&
                          gSaveContext.inventory.ammo[gItemSlots[i as usize]
                                                          as usize] as
                              libc::c_int ==
                              gUpgradeCapacities[UPG_NUTS as libc::c_int as
                                                     usize][((gSaveContext.inventory.upgrades
                                                                  &
                                                                  gUpgradeMasks[UPG_NUTS
                                                                                    as
                                                                                    libc::c_int
                                                                                    as
                                                                                    usize])
                                                                 as s32 >>
                                                                 gUpgradeShifts[UPG_NUTS
                                                                                    as
                                                                                    libc::c_int
                                                                                    as
                                                                                    usize]
                                                                     as
                                                                     libc::c_int)
                                                                as usize] as
                                  libc::c_int ||
                      i as libc::c_int == ITEM_BOMBCHU as libc::c_int &&
                          ammo as libc::c_int == 50 as libc::c_int ||
                      i as libc::c_int == ITEM_BEAN as libc::c_int &&
                          ammo as libc::c_int == 15 as libc::c_int {
            let fresh141 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_0: *mut Gfx = fresh141;
            (*_g_0).words.w0 =
                (0xfa as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_0).words.w1 =
                (120 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (alpha as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
        }
        if ammo as libc::c_int == 0 as libc::c_int {
            let fresh142 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_1: *mut Gfx = fresh142;
            (*_g_1).words.w0 =
                (0xfa as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_1).words.w1 =
                (100 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (100 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (100 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (alpha as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
        }
        i = 0 as libc::c_int as s16;
        while ammo as libc::c_int >= 10 as libc::c_int {
            ammo = (ammo as libc::c_int - 10 as libc::c_int) as s16;
            i += 1
        }
        if i as libc::c_int != 0 as libc::c_int {
            (*__gfxCtx).overlay.p =
                Gfx_TextureIA8((*__gfxCtx).overlay.p,
                               (gAmmoDigit0Tex.as_mut_ptr() as
                                    *mut u8_0).offset((8 as libc::c_int *
                                                           8 as libc::c_int *
                                                           i as libc::c_int)
                                                          as isize) as
                                   *mut libc::c_void, 8 as libc::c_int as s16,
                               8 as libc::c_int as s16,
                               (*gGameInfo).data[(20 as libc::c_int *
                                                      6 as libc::c_int *
                                                      16 as libc::c_int +
                                                      64 as libc::c_int +
                                                      button as libc::c_int)
                                                     as usize],
                               (*gGameInfo).data[(20 as libc::c_int *
                                                      6 as libc::c_int *
                                                      16 as libc::c_int +
                                                      68 as libc::c_int +
                                                      button as libc::c_int)
                                                     as usize],
                               8 as libc::c_int as s16,
                               8 as libc::c_int as s16,
                               ((1 as libc::c_int) << 10 as libc::c_int) as
                                   u16_0,
                               ((1 as libc::c_int) << 10 as libc::c_int) as
                                   u16_0)
        }
        (*__gfxCtx).overlay.p =
            Gfx_TextureIA8((*__gfxCtx).overlay.p,
                           (gAmmoDigit0Tex.as_mut_ptr() as
                                *mut u8_0).offset((8 as libc::c_int *
                                                       8 as libc::c_int *
                                                       ammo as libc::c_int) as
                                                      isize) as
                               *mut libc::c_void, 8 as libc::c_int as s16,
                           8 as libc::c_int as s16,
                           ((*gGameInfo).data[(20 as libc::c_int *
                                                   6 as libc::c_int *
                                                   16 as libc::c_int +
                                                   64 as libc::c_int +
                                                   button as libc::c_int) as
                                                  usize] as libc::c_int +
                                6 as libc::c_int) as s16,
                           (*gGameInfo).data[(20 as libc::c_int *
                                                  6 as libc::c_int *
                                                  16 as libc::c_int +
                                                  68 as libc::c_int +
                                                  button as libc::c_int) as
                                                 usize],
                           8 as libc::c_int as s16, 8 as libc::c_int as s16,
                           ((1 as libc::c_int) << 10 as libc::c_int) as u16_0,
                           ((1 as libc::c_int) << 10 as libc::c_int) as u16_0)
    }
    Graph_CloseDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                     b"../z_parameter.c\x00" as *const u8 as
                         *const libc::c_char, 3158 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn Interface_DrawActionButton(mut globalCtx:
                                                        *mut GlobalContext) {
    let mut interfaceCtx: *mut InterfaceContext =
        &mut (*globalCtx).interfaceCtx;
    let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
    let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
    __gfxCtx = (*globalCtx).state.gfxCtx;
    Graph_OpenDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                    b"../z_parameter.c\x00" as *const u8 as
                        *const libc::c_char, 3172 as libc::c_int);
    Matrix_Translate(0.0f32, 0.0f32,
                     (*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int *
                                            16 as libc::c_int +
                                            18 as libc::c_int) as usize] as
                         libc::c_int as libc::c_float / 10.0f32,
                     MTXMODE_NEW as libc::c_int as u8_0);
    Matrix_Scale(1.0f32, 1.0f32, 1.0f32,
                 MTXMODE_APPLY as libc::c_int as u8_0);
    Matrix_RotateX((*interfaceCtx).unk_1F4 / 10000.0f32,
                   MTXMODE_APPLY as libc::c_int as u8_0);
    let fresh143 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g: *mut Gfx = fresh143;
    (*_g).words.w0 =
        (0xda as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            ((::std::mem::size_of::<Mtx>() as
                  libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                  libc::c_uint).wrapping_div(8
                                                                                 as
                                                                                 libc::c_int
                                                                                 as
                                                                                 libc::c_uint)
                 &
                 (((0x1 as libc::c_int) << 5 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (((0 as libc::c_int | 0x2 as libc::c_int) ^ 0x1 as libc::c_int) as
                 u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g).words.w1 =
        Matrix_NewMtx((*globalCtx).state.gfxCtx,
                      b"../z_parameter.c\x00" as *const u8 as
                          *const libc::c_char as *mut libc::c_char,
                      3177 as libc::c_int) as libc::c_uint;
    let fresh144 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_0: *mut Gfx = fresh144;
    (*_g_0).words.w0 =
        (0x1 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (4 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            ((0 as libc::c_int + 4 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 7 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 1 as libc::c_int;
    (*_g_0).words.w1 =
        &mut *(*interfaceCtx).actionVtx.offset(0 as libc::c_int as isize) as
            *mut Vtx as libc::c_uint;
    let fresh145 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_1: *mut Gfx = fresh145;
    (*_g_1).words.w0 =
        (0xfd as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (3 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 21 as libc::c_int
            |
            (2 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            ((1 as libc::c_int - 1 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_1).words.w1 = gButtonBackgroundTex.as_mut_ptr() as libc::c_uint;
    let fresh146 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_2: *mut Gfx = fresh146;
    (*_g_2).words.w0 =
        (0xf5 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (3 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 21 as libc::c_int
            |
            (2 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 9 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_2).words.w1 =
        (7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 20 as libc::c_int
            |
            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 18 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 14 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 10 as libc::c_int
            |
            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 4 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh147 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_3: *mut Gfx = fresh147;
    (*_g_3).words.w0 =
        (0xe6 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_3).words.w1 = 0 as libc::c_int as libc::c_uint;
    let fresh148 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_4: *mut Gfx = fresh148;
    (*_g_4).words.w0 =
        (0xf3 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_4).words.w1 =
        (7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            ((if ((32 as libc::c_int * 32 as libc::c_int + 1 as libc::c_int >>
                       1 as libc::c_int) - 1 as libc::c_int) <
                     2047 as libc::c_int {
                  (32 as libc::c_int * 32 as libc::c_int + 1 as libc::c_int >>
                       1 as libc::c_int) - 1 as libc::c_int
              } else { 2047 as libc::c_int }) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (((((1 as libc::c_int) << 11 as libc::c_int) +
                   (if 1 as libc::c_int >
                           32 as libc::c_int * 1 as libc::c_int /
                               8 as libc::c_int {
                        1 as libc::c_int
                    } else {
                        (32 as libc::c_int * 1 as libc::c_int) /
                            8 as libc::c_int
                    }) - 1 as libc::c_int) /
                  (if 1 as libc::c_int >
                          32 as libc::c_int * 1 as libc::c_int /
                              8 as libc::c_int {
                       1 as libc::c_int
                   } else {
                       (32 as libc::c_int * 1 as libc::c_int) /
                           8 as libc::c_int
                   })) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh149 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_5: *mut Gfx = fresh149;
    (*_g_5).words.w0 =
        (0xe7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_5).words.w1 = 0 as libc::c_int as libc::c_uint;
    let fresh150 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_6: *mut Gfx = fresh150;
    (*_g_6).words.w0 =
        (0xf5 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (3 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 21 as libc::c_int
            |
            (1 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            ((32 as libc::c_int * 1 as libc::c_int + 7 as libc::c_int >>
                  3 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 9 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_6).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 20 as libc::c_int
            |
            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 18 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 14 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 10 as libc::c_int
            |
            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 4 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh151 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_7: *mut Gfx = fresh151;
    (*_g_7).words.w0 =
        (0xf2 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_7).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (((32 as libc::c_int - 1 as libc::c_int) << 2 as libc::c_int) as
                 u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (((32 as libc::c_int - 1 as libc::c_int) << 2 as libc::c_int) as
                 u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh152 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_8: *mut Gfx = fresh152;
    (*_g_8).words.w0 =
        (0x7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (if 0 as libc::c_int == 0 as libc::c_int {
                 (((0 as libc::c_int * 2 as libc::c_int) as u32_0 &
                       (((0x1 as libc::c_int) << 8 as libc::c_int) -
                            1 as libc::c_int) as libc::c_uint) <<
                      16 as libc::c_int |
                      ((2 as libc::c_int * 2 as libc::c_int) as u32_0 &
                           (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          8 as libc::c_int) |
                     ((3 as libc::c_int * 2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         0 as libc::c_int
             } else {
                 (if 0 as libc::c_int == 1 as libc::c_int {
                      (((2 as libc::c_int * 2 as libc::c_int) as u32_0 &
                            (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                 1 as libc::c_int) as libc::c_uint) <<
                           16 as libc::c_int |
                           ((3 as libc::c_int * 2 as libc::c_int) as u32_0 &
                                (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                     1 as libc::c_int) as libc::c_uint) <<
                               8 as libc::c_int) |
                          ((1 as libc::c_int * 2 as libc::c_int) as u32_0 &
                               (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              0 as libc::c_int
                  } else {
                      (if 0 as libc::c_int == 2 as libc::c_int {
                           (((3 as libc::c_int * 2 as libc::c_int) as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                16 as libc::c_int |
                                ((1 as libc::c_int * 2 as libc::c_int) as
                                     u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 8 as libc::c_int) |
                               ((0 as libc::c_int * 2 as libc::c_int) as u32_0
                                    &
                                    (((0x1 as libc::c_int) <<
                                          8 as libc::c_int) -
                                         1 as libc::c_int) as libc::c_uint) <<
                                   0 as libc::c_int
                       } else {
                           (((1 as libc::c_int * 2 as libc::c_int) as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                16 as libc::c_int |
                                ((0 as libc::c_int * 2 as libc::c_int) as
                                     u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 8 as libc::c_int) |
                               ((2 as libc::c_int * 2 as libc::c_int) as u32_0
                                    &
                                    (((0x1 as libc::c_int) <<
                                          8 as libc::c_int) -
                                         1 as libc::c_int) as libc::c_uint) <<
                                   0 as libc::c_int
                       })
                  })
             });
    (*_g_8).words.w1 =
        if 0 as libc::c_int == 0 as libc::c_int {
            (((0 as libc::c_int * 2 as libc::c_int) as u32_0 &
                  (((0x1 as libc::c_int) << 8 as libc::c_int) -
                       1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
                 |
                 ((3 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     8 as libc::c_int) |
                ((1 as libc::c_int * 2 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int
        } else if 0 as libc::c_int == 1 as libc::c_int {
            (((2 as libc::c_int * 2 as libc::c_int) as u32_0 &
                  (((0x1 as libc::c_int) << 8 as libc::c_int) -
                       1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
                 |
                 ((1 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     8 as libc::c_int) |
                ((0 as libc::c_int * 2 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int
        } else if 0 as libc::c_int == 2 as libc::c_int {
            (((3 as libc::c_int * 2 as libc::c_int) as u32_0 &
                  (((0x1 as libc::c_int) << 8 as libc::c_int) -
                       1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
                 |
                 ((0 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     8 as libc::c_int) |
                ((2 as libc::c_int * 2 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int
        } else {
            (((1 as libc::c_int * 2 as libc::c_int) as u32_0 &
                  (((0x1 as libc::c_int) << 8 as libc::c_int) -
                       1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
                 |
                 ((2 as libc::c_int * 2 as libc::c_int) as u32_0 &
                      (((0x1 as libc::c_int) << 8 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     8 as libc::c_int) |
                ((3 as libc::c_int * 2 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int
        };
    Graph_CloseDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                     b"../z_parameter.c\x00" as *const u8 as
                         *const libc::c_char, 3187 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn Interface_InitVertices(mut globalCtx:
                                                    *mut GlobalContext) {
    let mut interfaceCtx: *mut InterfaceContext =
        &mut (*globalCtx).interfaceCtx;
    let mut i: s16 = 0;
    (*interfaceCtx).actionVtx =
        Graph_Alloc((*globalCtx).state.gfxCtx,
                    (8 as libc::c_int as
                         libc::c_uint).wrapping_mul(::std::mem::size_of::<Vtx>()
                                                        as libc::c_ulong) as
                        size_t) as *mut Vtx;
    // clang-format off
    let ref mut fresh153 =
        (*(*interfaceCtx).actionVtx.offset(2 as libc::c_int as
                                               isize)).v.ob[0 as libc::c_int
                                                                as usize];
    *fresh153 = -(14 as libc::c_int) as libc::c_short;
    (*(*interfaceCtx).actionVtx.offset(0 as libc::c_int as
                                           isize)).v.ob[0 as libc::c_int as
                                                            usize] =
        *fresh153;
    let ref mut fresh154 =
        (*(*interfaceCtx).actionVtx.offset(3 as libc::c_int as
                                               isize)).v.ob[0 as libc::c_int
                                                                as usize];
    *fresh154 =
        ((*(*interfaceCtx).actionVtx.offset(0 as libc::c_int as
                                                isize)).v.ob[0 as libc::c_int
                                                                 as usize] as
             libc::c_int + 28 as libc::c_int) as libc::c_short;
    (*(*interfaceCtx).actionVtx.offset(1 as libc::c_int as
                                           isize)).v.ob[0 as libc::c_int as
                                                            usize] =
        *fresh154;
    let ref mut fresh155 =
        (*(*interfaceCtx).actionVtx.offset(1 as libc::c_int as
                                               isize)).v.ob[1 as libc::c_int
                                                                as usize];
    *fresh155 = 14 as libc::c_int as libc::c_short;
    (*(*interfaceCtx).actionVtx.offset(0 as libc::c_int as
                                           isize)).v.ob[1 as libc::c_int as
                                                            usize] =
        *fresh155;
    let ref mut fresh156 =
        (*(*interfaceCtx).actionVtx.offset(3 as libc::c_int as
                                               isize)).v.ob[1 as libc::c_int
                                                                as usize];
    *fresh156 =
        ((*(*interfaceCtx).actionVtx.offset(0 as libc::c_int as
                                                isize)).v.ob[1 as libc::c_int
                                                                 as usize] as
             libc::c_int - 28 as libc::c_int) as libc::c_short;
    (*(*interfaceCtx).actionVtx.offset(2 as libc::c_int as
                                           isize)).v.ob[1 as libc::c_int as
                                                            usize] =
        *fresh156;
    let ref mut fresh157 =
        (*(*interfaceCtx).actionVtx.offset(6 as libc::c_int as
                                               isize)).v.ob[0 as libc::c_int
                                                                as usize];
    *fresh157 =
        -((*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int *
                                 16 as libc::c_int + 21 as libc::c_int) as
                                usize] as libc::c_int / 2 as libc::c_int) as
            libc::c_short;
    (*(*interfaceCtx).actionVtx.offset(4 as libc::c_int as
                                           isize)).v.ob[0 as libc::c_int as
                                                            usize] =
        *fresh157;
    let ref mut fresh158 =
        (*(*interfaceCtx).actionVtx.offset(7 as libc::c_int as
                                               isize)).v.ob[0 as libc::c_int
                                                                as usize];
    *fresh158 =
        ((*(*interfaceCtx).actionVtx.offset(4 as libc::c_int as
                                                isize)).v.ob[0 as libc::c_int
                                                                 as usize] as
             libc::c_int +
             (*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int *
                                    16 as libc::c_int + 21 as libc::c_int) as
                                   usize] as libc::c_int) as libc::c_short;
    (*(*interfaceCtx).actionVtx.offset(5 as libc::c_int as
                                           isize)).v.ob[0 as libc::c_int as
                                                            usize] =
        *fresh158;
    let ref mut fresh159 =
        (*(*interfaceCtx).actionVtx.offset(5 as libc::c_int as
                                               isize)).v.ob[1 as libc::c_int
                                                                as usize];
    *fresh159 =
        ((*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int *
                                16 as libc::c_int + 28 as libc::c_int) as
                               usize] as libc::c_int / 2 as libc::c_int) as
            libc::c_short;
    (*(*interfaceCtx).actionVtx.offset(4 as libc::c_int as
                                           isize)).v.ob[1 as libc::c_int as
                                                            usize] =
        *fresh159;
    let ref mut fresh160 =
        (*(*interfaceCtx).actionVtx.offset(7 as libc::c_int as
                                               isize)).v.ob[1 as libc::c_int
                                                                as usize];
    *fresh160 =
        ((*(*interfaceCtx).actionVtx.offset(4 as libc::c_int as
                                                isize)).v.ob[1 as libc::c_int
                                                                 as usize] as
             libc::c_int -
             (*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int *
                                    16 as libc::c_int + 28 as libc::c_int) as
                                   usize] as libc::c_int) as libc::c_short;
    (*(*interfaceCtx).actionVtx.offset(6 as libc::c_int as
                                           isize)).v.ob[1 as libc::c_int as
                                                            usize] =
        *fresh160;
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) < 8 as libc::c_int {
        let ref mut fresh161 =
            (*(*interfaceCtx).actionVtx.offset((i as libc::c_int +
                                                    3 as libc::c_int) as
                                                   isize)).v.ob[2 as
                                                                    libc::c_int
                                                                    as usize];
        *fresh161 = 0 as libc::c_int as libc::c_short;
        let ref mut fresh162 =
            (*(*interfaceCtx).actionVtx.offset((i as libc::c_int +
                                                    2 as libc::c_int) as
                                                   isize)).v.ob[2 as
                                                                    libc::c_int
                                                                    as usize];
        *fresh162 = *fresh161;
        let ref mut fresh163 =
            (*(*interfaceCtx).actionVtx.offset((i as libc::c_int +
                                                    1 as libc::c_int) as
                                                   isize)).v.ob[2 as
                                                                    libc::c_int
                                                                    as usize];
        *fresh163 = *fresh162;
        (*(*interfaceCtx).actionVtx.offset(i as
                                               isize)).v.ob[2 as libc::c_int
                                                                as usize] =
            *fresh163;
        let ref mut fresh164 =
            (*(*interfaceCtx).actionVtx.offset((i as libc::c_int +
                                                    3 as libc::c_int) as
                                                   isize)).v.flag;
        *fresh164 = 0 as libc::c_int as libc::c_ushort;
        let ref mut fresh165 =
            (*(*interfaceCtx).actionVtx.offset((i as libc::c_int +
                                                    2 as libc::c_int) as
                                                   isize)).v.flag;
        *fresh165 = *fresh164;
        let ref mut fresh166 =
            (*(*interfaceCtx).actionVtx.offset((i as libc::c_int +
                                                    1 as libc::c_int) as
                                                   isize)).v.flag;
        *fresh166 = *fresh165;
        (*(*interfaceCtx).actionVtx.offset(i as isize)).v.flag = *fresh166;
        let ref mut fresh167 =
            (*(*interfaceCtx).actionVtx.offset((i as libc::c_int +
                                                    2 as libc::c_int) as
                                                   isize)).v.tc[0 as
                                                                    libc::c_int
                                                                    as usize];
        *fresh167 = 0 as libc::c_int as libc::c_short;
        let ref mut fresh168 =
            (*(*interfaceCtx).actionVtx.offset((i as libc::c_int +
                                                    1 as libc::c_int) as
                                                   isize)).v.tc[1 as
                                                                    libc::c_int
                                                                    as usize];
        *fresh168 = *fresh167;
        let ref mut fresh169 =
            (*(*interfaceCtx).actionVtx.offset(i as
                                                   isize)).v.tc[1 as
                                                                    libc::c_int
                                                                    as usize];
        *fresh169 = *fresh168;
        (*(*interfaceCtx).actionVtx.offset(i as
                                               isize)).v.tc[0 as libc::c_int
                                                                as usize] =
            *fresh169;
        let ref mut fresh170 =
            (*(*interfaceCtx).actionVtx.offset((i as libc::c_int +
                                                    3 as libc::c_int) as
                                                   isize)).v.tc[1 as
                                                                    libc::c_int
                                                                    as usize];
        *fresh170 = 1024 as libc::c_int as libc::c_short;
        let ref mut fresh171 =
            (*(*interfaceCtx).actionVtx.offset((i as libc::c_int +
                                                    3 as libc::c_int) as
                                                   isize)).v.tc[0 as
                                                                    libc::c_int
                                                                    as usize];
        *fresh171 = *fresh170;
        let ref mut fresh172 =
            (*(*interfaceCtx).actionVtx.offset((i as libc::c_int +
                                                    2 as libc::c_int) as
                                                   isize)).v.tc[1 as
                                                                    libc::c_int
                                                                    as usize];
        *fresh172 = *fresh171;
        (*(*interfaceCtx).actionVtx.offset((i as libc::c_int +
                                                1 as libc::c_int) as
                                               isize)).v.tc[0 as libc::c_int
                                                                as usize] =
            *fresh172;
        let ref mut fresh173 =
            (*(*interfaceCtx).actionVtx.offset((i as libc::c_int +
                                                    3 as libc::c_int) as
                                                   isize)).v.cn[2 as
                                                                    libc::c_int
                                                                    as usize];
        *fresh173 = 255 as libc::c_int as libc::c_uchar;
        let ref mut fresh174 =
            (*(*interfaceCtx).actionVtx.offset((i as libc::c_int +
                                                    2 as libc::c_int) as
                                                   isize)).v.cn[2 as
                                                                    libc::c_int
                                                                    as usize];
        *fresh174 = *fresh173;
        let ref mut fresh175 =
            (*(*interfaceCtx).actionVtx.offset((i as libc::c_int +
                                                    1 as libc::c_int) as
                                                   isize)).v.cn[2 as
                                                                    libc::c_int
                                                                    as usize];
        *fresh175 = *fresh174;
        let ref mut fresh176 =
            (*(*interfaceCtx).actionVtx.offset(i as
                                                   isize)).v.cn[2 as
                                                                    libc::c_int
                                                                    as usize];
        *fresh176 = *fresh175;
        let ref mut fresh177 =
            (*(*interfaceCtx).actionVtx.offset((i as libc::c_int +
                                                    3 as libc::c_int) as
                                                   isize)).v.cn[1 as
                                                                    libc::c_int
                                                                    as usize];
        *fresh177 = *fresh176;
        let ref mut fresh178 =
            (*(*interfaceCtx).actionVtx.offset((i as libc::c_int +
                                                    2 as libc::c_int) as
                                                   isize)).v.cn[1 as
                                                                    libc::c_int
                                                                    as usize];
        *fresh178 = *fresh177;
        let ref mut fresh179 =
            (*(*interfaceCtx).actionVtx.offset((i as libc::c_int +
                                                    1 as libc::c_int) as
                                                   isize)).v.cn[1 as
                                                                    libc::c_int
                                                                    as usize];
        *fresh179 = *fresh178;
        let ref mut fresh180 =
            (*(*interfaceCtx).actionVtx.offset(i as
                                                   isize)).v.cn[1 as
                                                                    libc::c_int
                                                                    as usize];
        *fresh180 = *fresh179;
        let ref mut fresh181 =
            (*(*interfaceCtx).actionVtx.offset((i as libc::c_int +
                                                    3 as libc::c_int) as
                                                   isize)).v.cn[0 as
                                                                    libc::c_int
                                                                    as usize];
        *fresh181 = *fresh180;
        let ref mut fresh182 =
            (*(*interfaceCtx).actionVtx.offset((i as libc::c_int +
                                                    2 as libc::c_int) as
                                                   isize)).v.cn[0 as
                                                                    libc::c_int
                                                                    as usize];
        *fresh182 = *fresh181;
        let ref mut fresh183 =
            (*(*interfaceCtx).actionVtx.offset((i as libc::c_int +
                                                    1 as libc::c_int) as
                                                   isize)).v.cn[0 as
                                                                    libc::c_int
                                                                    as usize];
        *fresh183 = *fresh182;
        (*(*interfaceCtx).actionVtx.offset(i as
                                               isize)).v.cn[0 as libc::c_int
                                                                as usize] =
            *fresh183;
        let ref mut fresh184 =
            (*(*interfaceCtx).actionVtx.offset((i as libc::c_int +
                                                    3 as libc::c_int) as
                                                   isize)).v.cn[3 as
                                                                    libc::c_int
                                                                    as usize];
        *fresh184 = 255 as libc::c_int as libc::c_uchar;
        let ref mut fresh185 =
            (*(*interfaceCtx).actionVtx.offset((i as libc::c_int +
                                                    2 as libc::c_int) as
                                                   isize)).v.cn[3 as
                                                                    libc::c_int
                                                                    as usize];
        *fresh185 = *fresh184;
        let ref mut fresh186 =
            (*(*interfaceCtx).actionVtx.offset((i as libc::c_int +
                                                    1 as libc::c_int) as
                                                   isize)).v.cn[3 as
                                                                    libc::c_int
                                                                    as usize];
        *fresh186 = *fresh185;
        (*(*interfaceCtx).actionVtx.offset(i as
                                               isize)).v.cn[3 as libc::c_int
                                                                as usize] =
            *fresh186;
        i = (i as libc::c_int + 4 as libc::c_int) as s16
    }
    let ref mut fresh187 =
        (*(*interfaceCtx).actionVtx.offset(7 as libc::c_int as
                                               isize)).v.tc[0 as libc::c_int
                                                                as usize];
    *fresh187 = 1536 as libc::c_int as libc::c_short;
    (*(*interfaceCtx).actionVtx.offset(5 as libc::c_int as
                                           isize)).v.tc[0 as libc::c_int as
                                                            usize] =
        *fresh187;
    let ref mut fresh188 =
        (*(*interfaceCtx).actionVtx.offset(7 as libc::c_int as
                                               isize)).v.tc[1 as libc::c_int
                                                                as usize];
    *fresh188 = 512 as libc::c_int as libc::c_short;
    (*(*interfaceCtx).actionVtx.offset(6 as libc::c_int as
                                           isize)).v.tc[1 as libc::c_int as
                                                            usize] =
        *fresh188;
    (*interfaceCtx).beatingHeartVtx =
        Graph_Alloc((*globalCtx).state.gfxCtx,
                    (4 as libc::c_int as
                         libc::c_uint).wrapping_mul(::std::mem::size_of::<Vtx>()
                                                        as libc::c_ulong) as
                        size_t) as *mut Vtx;
    let ref mut fresh189 =
        (*(*interfaceCtx).beatingHeartVtx.offset(2 as libc::c_int as
                                                     isize)).v.ob[0 as
                                                                      libc::c_int
                                                                      as
                                                                      usize];
    *fresh189 = -(8 as libc::c_int) as libc::c_short;
    (*(*interfaceCtx).beatingHeartVtx.offset(0 as libc::c_int as
                                                 isize)).v.ob[0 as libc::c_int
                                                                  as usize] =
        *fresh189;
    let ref mut fresh190 =
        (*(*interfaceCtx).beatingHeartVtx.offset(3 as libc::c_int as
                                                     isize)).v.ob[0 as
                                                                      libc::c_int
                                                                      as
                                                                      usize];
    *fresh190 = 8 as libc::c_int as libc::c_short;
    (*(*interfaceCtx).beatingHeartVtx.offset(1 as libc::c_int as
                                                 isize)).v.ob[0 as libc::c_int
                                                                  as usize] =
        *fresh190;
    let ref mut fresh191 =
        (*(*interfaceCtx).beatingHeartVtx.offset(1 as libc::c_int as
                                                     isize)).v.ob[1 as
                                                                      libc::c_int
                                                                      as
                                                                      usize];
    *fresh191 = 8 as libc::c_int as libc::c_short;
    (*(*interfaceCtx).beatingHeartVtx.offset(0 as libc::c_int as
                                                 isize)).v.ob[1 as libc::c_int
                                                                  as usize] =
        *fresh191;
    let ref mut fresh192 =
        (*(*interfaceCtx).beatingHeartVtx.offset(3 as libc::c_int as
                                                     isize)).v.ob[1 as
                                                                      libc::c_int
                                                                      as
                                                                      usize];
    *fresh192 = -(8 as libc::c_int) as libc::c_short;
    (*(*interfaceCtx).beatingHeartVtx.offset(2 as libc::c_int as
                                                 isize)).v.ob[1 as libc::c_int
                                                                  as usize] =
        *fresh192;
    let ref mut fresh193 =
        (*(*interfaceCtx).beatingHeartVtx.offset(3 as libc::c_int as
                                                     isize)).v.ob[2 as
                                                                      libc::c_int
                                                                      as
                                                                      usize];
    *fresh193 = 0 as libc::c_int as libc::c_short;
    let ref mut fresh194 =
        (*(*interfaceCtx).beatingHeartVtx.offset(2 as libc::c_int as
                                                     isize)).v.ob[2 as
                                                                      libc::c_int
                                                                      as
                                                                      usize];
    *fresh194 = *fresh193;
    let ref mut fresh195 =
        (*(*interfaceCtx).beatingHeartVtx.offset(1 as libc::c_int as
                                                     isize)).v.ob[2 as
                                                                      libc::c_int
                                                                      as
                                                                      usize];
    *fresh195 = *fresh194;
    (*(*interfaceCtx).beatingHeartVtx.offset(0 as libc::c_int as
                                                 isize)).v.ob[2 as libc::c_int
                                                                  as usize] =
        *fresh195;
    let ref mut fresh196 =
        (*(*interfaceCtx).beatingHeartVtx.offset(3 as libc::c_int as
                                                     isize)).v.flag;
    *fresh196 = 0 as libc::c_int as libc::c_ushort;
    let ref mut fresh197 =
        (*(*interfaceCtx).beatingHeartVtx.offset(2 as libc::c_int as
                                                     isize)).v.flag;
    *fresh197 = *fresh196;
    let ref mut fresh198 =
        (*(*interfaceCtx).beatingHeartVtx.offset(1 as libc::c_int as
                                                     isize)).v.flag;
    *fresh198 = *fresh197;
    (*(*interfaceCtx).beatingHeartVtx.offset(0 as libc::c_int as
                                                 isize)).v.flag = *fresh198;
    let ref mut fresh199 =
        (*(*interfaceCtx).beatingHeartVtx.offset(2 as libc::c_int as
                                                     isize)).v.tc[0 as
                                                                      libc::c_int
                                                                      as
                                                                      usize];
    *fresh199 = 0 as libc::c_int as libc::c_short;
    let ref mut fresh200 =
        (*(*interfaceCtx).beatingHeartVtx.offset(1 as libc::c_int as
                                                     isize)).v.tc[1 as
                                                                      libc::c_int
                                                                      as
                                                                      usize];
    *fresh200 = *fresh199;
    let ref mut fresh201 =
        (*(*interfaceCtx).beatingHeartVtx.offset(0 as libc::c_int as
                                                     isize)).v.tc[1 as
                                                                      libc::c_int
                                                                      as
                                                                      usize];
    *fresh201 = *fresh200;
    (*(*interfaceCtx).beatingHeartVtx.offset(0 as libc::c_int as
                                                 isize)).v.tc[0 as libc::c_int
                                                                  as usize] =
        *fresh201;
    let ref mut fresh202 =
        (*(*interfaceCtx).beatingHeartVtx.offset(3 as libc::c_int as
                                                     isize)).v.tc[1 as
                                                                      libc::c_int
                                                                      as
                                                                      usize];
    *fresh202 = 512 as libc::c_int as libc::c_short;
    let ref mut fresh203 =
        (*(*interfaceCtx).beatingHeartVtx.offset(3 as libc::c_int as
                                                     isize)).v.tc[0 as
                                                                      libc::c_int
                                                                      as
                                                                      usize];
    *fresh203 = *fresh202;
    let ref mut fresh204 =
        (*(*interfaceCtx).beatingHeartVtx.offset(2 as libc::c_int as
                                                     isize)).v.tc[1 as
                                                                      libc::c_int
                                                                      as
                                                                      usize];
    *fresh204 = *fresh203;
    (*(*interfaceCtx).beatingHeartVtx.offset(1 as libc::c_int as
                                                 isize)).v.tc[0 as libc::c_int
                                                                  as usize] =
        *fresh204;
    let ref mut fresh205 =
        (*(*interfaceCtx).beatingHeartVtx.offset(3 as libc::c_int as
                                                     isize)).v.cn[3 as
                                                                      libc::c_int
                                                                      as
                                                                      usize];
    *fresh205 = 255 as libc::c_int as libc::c_uchar;
    let ref mut fresh206 =
        (*(*interfaceCtx).beatingHeartVtx.offset(2 as libc::c_int as
                                                     isize)).v.cn[3 as
                                                                      libc::c_int
                                                                      as
                                                                      usize];
    *fresh206 = *fresh205;
    let ref mut fresh207 =
        (*(*interfaceCtx).beatingHeartVtx.offset(1 as libc::c_int as
                                                     isize)).v.cn[3 as
                                                                      libc::c_int
                                                                      as
                                                                      usize];
    *fresh207 = *fresh206;
    let ref mut fresh208 =
        (*(*interfaceCtx).beatingHeartVtx.offset(0 as libc::c_int as
                                                     isize)).v.cn[3 as
                                                                      libc::c_int
                                                                      as
                                                                      usize];
    *fresh208 = *fresh207;
    let ref mut fresh209 =
        (*(*interfaceCtx).beatingHeartVtx.offset(3 as libc::c_int as
                                                     isize)).v.cn[2 as
                                                                      libc::c_int
                                                                      as
                                                                      usize];
    *fresh209 = *fresh208;
    let ref mut fresh210 =
        (*(*interfaceCtx).beatingHeartVtx.offset(2 as libc::c_int as
                                                     isize)).v.cn[2 as
                                                                      libc::c_int
                                                                      as
                                                                      usize];
    *fresh210 = *fresh209;
    let ref mut fresh211 =
        (*(*interfaceCtx).beatingHeartVtx.offset(1 as libc::c_int as
                                                     isize)).v.cn[2 as
                                                                      libc::c_int
                                                                      as
                                                                      usize];
    *fresh211 = *fresh210;
    let ref mut fresh212 =
        (*(*interfaceCtx).beatingHeartVtx.offset(0 as libc::c_int as
                                                     isize)).v.cn[2 as
                                                                      libc::c_int
                                                                      as
                                                                      usize];
    *fresh212 = *fresh211;
    let ref mut fresh213 =
        (*(*interfaceCtx).beatingHeartVtx.offset(3 as libc::c_int as
                                                     isize)).v.cn[1 as
                                                                      libc::c_int
                                                                      as
                                                                      usize];
    *fresh213 = *fresh212;
    let ref mut fresh214 =
        (*(*interfaceCtx).beatingHeartVtx.offset(2 as libc::c_int as
                                                     isize)).v.cn[1 as
                                                                      libc::c_int
                                                                      as
                                                                      usize];
    *fresh214 = *fresh213;
    let ref mut fresh215 =
        (*(*interfaceCtx).beatingHeartVtx.offset(1 as libc::c_int as
                                                     isize)).v.cn[1 as
                                                                      libc::c_int
                                                                      as
                                                                      usize];
    *fresh215 = *fresh214;
    let ref mut fresh216 =
        (*(*interfaceCtx).beatingHeartVtx.offset(0 as libc::c_int as
                                                     isize)).v.cn[1 as
                                                                      libc::c_int
                                                                      as
                                                                      usize];
    *fresh216 = *fresh215;
    let ref mut fresh217 =
        (*(*interfaceCtx).beatingHeartVtx.offset(3 as libc::c_int as
                                                     isize)).v.cn[0 as
                                                                      libc::c_int
                                                                      as
                                                                      usize];
    *fresh217 = *fresh216;
    let ref mut fresh218 =
        (*(*interfaceCtx).beatingHeartVtx.offset(2 as libc::c_int as
                                                     isize)).v.cn[0 as
                                                                      libc::c_int
                                                                      as
                                                                      usize];
    *fresh218 = *fresh217;
    let ref mut fresh219 =
        (*(*interfaceCtx).beatingHeartVtx.offset(1 as libc::c_int as
                                                     isize)).v.cn[0 as
                                                                      libc::c_int
                                                                      as
                                                                      usize];
    *fresh219 = *fresh218;
    (*(*interfaceCtx).beatingHeartVtx.offset(0 as libc::c_int as
                                                 isize)).v.cn[0 as libc::c_int
                                                                  as usize] =
        *fresh219;
    // clang-format on
}
#[no_mangle]
pub unsafe extern "C" fn func_8008A8B8(mut globalCtx: *mut GlobalContext,
                                       mut topY: s32, mut bottomY: s32,
                                       mut leftX: s32, mut rightX: s32) {
    let mut interfaceCtx: *mut InterfaceContext =
        &mut (*globalCtx).interfaceCtx;
    let mut eye: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut lookAt: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut up: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    eye.z = 0.0f32;
    eye.y = eye.z;
    eye.x = eye.y;
    lookAt.y = 0.0f32;
    lookAt.x = lookAt.y;
    lookAt.z = -1.0f32;
    up.z = 0.0f32;
    up.x = up.z;
    up.y = 1.0f32;
    func_800AA358(&mut (*interfaceCtx).view, &mut eye, &mut lookAt, &mut up);
    (*interfaceCtx).viewport.topY = topY;
    (*interfaceCtx).viewport.bottomY = bottomY;
    (*interfaceCtx).viewport.leftX = leftX;
    (*interfaceCtx).viewport.rightX = rightX;
    View_SetViewport(&mut (*interfaceCtx).view,
                     &mut (*interfaceCtx).viewport);
    func_800AA460(&mut (*interfaceCtx).view, 60.0f32, 10.0f32, 60.0f32);
    func_800AB560(&mut (*interfaceCtx).view);
}
#[no_mangle]
pub unsafe extern "C" fn func_8008A994(mut interfaceCtx:
                                           *mut InterfaceContext) {
    let mut viewport: Viewport =
        Viewport{topY: 0, bottomY: 0, leftX: 0, rightX: 0,};
    viewport.bottomY = 240 as libc::c_int;
    viewport.rightX = 320 as libc::c_int;
    viewport.topY = 0 as libc::c_int;
    viewport.leftX = 0 as libc::c_int;
    View_SetViewport(&mut (*interfaceCtx).view, &mut viewport);
    func_800AB2C4(&mut (*interfaceCtx).view);
}
#[no_mangle]
pub unsafe extern "C" fn Interface_Draw(mut globalCtx: *mut GlobalContext) {
    static mut magicArrowEffectsR: [s16; 3] =
        [255 as libc::c_int as s16, 100 as libc::c_int as s16,
         255 as libc::c_int as s16];
    static mut magicArrowEffectsG: [s16; 3] =
        [0 as libc::c_int as s16, 100 as libc::c_int as s16,
         255 as libc::c_int as s16];
    static mut magicArrowEffectsB: [s16; 3] =
        [0 as libc::c_int as s16, 255 as libc::c_int as s16,
         100 as libc::c_int as s16];
    static mut timerDigitLeftPos: [s16; 5] =
        [16 as libc::c_int as s16, 25 as libc::c_int as s16,
         34 as libc::c_int as s16, 42 as libc::c_int as s16,
         51 as libc::c_int as s16];
    static mut digitWidth: [s16; 5] =
        [9 as libc::c_int as s16, 9 as libc::c_int as s16,
         8 as libc::c_int as s16, 9 as libc::c_int as s16,
         9 as libc::c_int as s16];
    // unused, most likely colors
    static mut D_80125B1C: [[s16; 3]; 5] =
        [[0 as libc::c_int as s16, 150 as libc::c_int as s16,
          0 as libc::c_int as s16],
         [100 as libc::c_int as s16, 255 as libc::c_int as s16,
          0 as libc::c_int as s16],
         [255 as libc::c_int as s16, 255 as libc::c_int as s16,
          255 as libc::c_int as s16],
         [0 as libc::c_int as s16, 0 as libc::c_int as s16,
          0 as libc::c_int as s16],
         [255 as libc::c_int as s16, 255 as libc::c_int as s16,
          255 as libc::c_int as s16]]; // unused
    static mut rupeeDigitsFirst: [s16; 3] =
        [1 as libc::c_int as s16, 0 as libc::c_int as s16,
         0 as libc::c_int as s16]; // unused
    static mut rupeeDigitsCount: [s16; 3] =
        [2 as libc::c_int as s16, 3 as libc::c_int as s16,
         3 as libc::c_int as s16];
    static mut spoilingItemEntrances: [s16; 3] =
        [0x1ad as libc::c_int as s16, 0x153 as libc::c_int as s16,
         0x153 as libc::c_int as s16];
    static mut D_80125B54: [f32_0; 2] = [-40.0f32, -35.0f32];
    static mut D_80125B5C: [s16; 2] =
        [91 as libc::c_int as s16, 91 as libc::c_int as s16];
    static mut D_8015FFE0: s16 = 0;
    static mut D_8015FFE2: s16 = 0;
    static mut D_8015FFE4: s16 = 0;
    static mut D_8015FFE6: s16 = 0;
    static mut timerDigits: [s16; 5] = [0; 5];
    let mut interfaceCtx: *mut InterfaceContext =
        &mut (*globalCtx).interfaceCtx;
    let mut pauseCtx: *mut PauseContext = &mut (*globalCtx).pauseCtx;
    let mut msgCtx: *mut MessageContext = &mut (*globalCtx).msgCtx;
    let mut player: *mut Player =
        (*globalCtx).actorCtx.actorLists[ACTORCAT_PLAYER as libc::c_int as
                                             usize].head as *mut Player;
    let mut svar1: s16 = 0;
    let mut svar2: s16 = 0;
    let mut svar3: s16 = 0;
    let mut svar4: s16 = 0;
    let mut svar5: s16 = 0;
    let mut svar6: s16 = 0;
    let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
    let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
    __gfxCtx = (*globalCtx).state.gfxCtx;
    Graph_OpenDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                    b"../z_parameter.c\x00" as *const u8 as
                        *const libc::c_char, 3405 as libc::c_int);
    let fresh220 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g: *mut Gfx = fresh220;
    (*_g).words.w0 =
        (0xdb as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0x6 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            ((0x2 as libc::c_int * 4 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g).words.w1 = (*interfaceCtx).parameterSegment as libc::c_uint;
    let fresh221 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_0: *mut Gfx = fresh221;
    (*_g_0).words.w0 =
        (0xdb as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0x6 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            ((0x7 as libc::c_int * 4 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_0).words.w1 = (*interfaceCtx).doActionSegment as libc::c_uint;
    let fresh222 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_1: *mut Gfx = fresh222;
    (*_g_1).words.w0 =
        (0xdb as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0x6 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            ((0x8 as libc::c_int * 4 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_1).words.w1 = (*interfaceCtx).iconItemSegment as libc::c_uint;
    let fresh223 = (*__gfxCtx).overlay.p;
    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
    let mut _g_2: *mut Gfx = fresh223;
    (*_g_2).words.w0 =
        (0xdb as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0x6 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            ((0xb as libc::c_int * 4 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_2).words.w1 = (*interfaceCtx).mapSegment as libc::c_uint;
    if (*pauseCtx).debugState as libc::c_int == 0 as libc::c_int {
        Interface_InitVertices(globalCtx);
        func_8008A994(interfaceCtx);
        HealthMeter_Draw(globalCtx);
        func_80094520((*globalCtx).state.gfxCtx);
        // Rupee Icon
        let fresh224 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_3: *mut Gfx = fresh224;
        (*_g_3).words.w0 =
            (0xfa as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_3).words.w1 =
            (200 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (100 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                ((*interfaceCtx).magicAlpha as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh225 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_4: *mut Gfx = fresh225;
        (*_g_4).words.w0 =
            (0xfb as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_4).words.w1 =
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (80 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*__gfxCtx).overlay.p =
            Gfx_TextureIA8((*__gfxCtx).overlay.p,
                           gRupeeCounterIconTex.as_mut_ptr() as
                               *mut libc::c_void, 16 as libc::c_int as s16,
                           16 as libc::c_int as s16, 26 as libc::c_int as s16,
                           206 as libc::c_int as s16,
                           16 as libc::c_int as s16, 16 as libc::c_int as s16,
                           ((1 as libc::c_int) << 10 as libc::c_int) as u16_0,
                           ((1 as libc::c_int) << 10 as libc::c_int) as
                               u16_0);
        match (*globalCtx).sceneNum as libc::c_int {
            3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 => {
                if gSaveContext.inventory.dungeonKeys[gSaveContext.mapIndex as
                                                          usize] as
                       libc::c_int >= 0 as libc::c_int {
                    // Small Key Icon
                    let fresh226 = (*__gfxCtx).overlay.p;
                    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                    let mut _g_5: *mut Gfx = fresh226;
                    (*_g_5).words.w0 =
                        (0xe7 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int;
                    (*_g_5).words.w1 = 0 as libc::c_int as libc::c_uint;
                    let fresh227 = (*__gfxCtx).overlay.p;
                    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                    let mut _g_6: *mut Gfx = fresh227;
                    (*_g_6).words.w0 =
                        (0xfa as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                8 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int;
                    (*_g_6).words.w1 =
                        (200 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (230 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                16 as libc::c_int |
                            (255 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                8 as libc::c_int |
                            ((*interfaceCtx).magicAlpha as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int;
                    let fresh228 = (*__gfxCtx).overlay.p;
                    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                    let mut _g_7: *mut Gfx = fresh228;
                    (*_g_7).words.w0 =
                        (0xfb as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int;
                    (*_g_7).words.w1 =
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                16 as libc::c_int |
                            (20 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                8 as libc::c_int |
                            (255 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int;
                    (*__gfxCtx).overlay.p =
                        Gfx_TextureIA8((*__gfxCtx).overlay.p,
                                       gSmallKeyCounterIconTex.as_mut_ptr() as
                                           *mut libc::c_void,
                                       16 as libc::c_int as s16,
                                       16 as libc::c_int as s16,
                                       26 as libc::c_int as s16,
                                       190 as libc::c_int as s16,
                                       16 as libc::c_int as s16,
                                       16 as libc::c_int as s16,
                                       ((1 as libc::c_int) <<
                                            10 as libc::c_int) as u16_0,
                                       ((1 as libc::c_int) <<
                                            10 as libc::c_int) as u16_0);
                    // Small Key Counter
                    let fresh229 = (*__gfxCtx).overlay.p;
                    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                    let mut _g_8: *mut Gfx = fresh229;
                    (*_g_8).words.w0 =
                        (0xe7 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int;
                    (*_g_8).words.w1 = 0 as libc::c_int as libc::c_uint;
                    let fresh230 = (*__gfxCtx).overlay.p;
                    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                    let mut _g_9: *mut Gfx = fresh230;
                    (*_g_9).words.w0 =
                        (0xfa as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                8 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int;
                    (*_g_9).words.w1 =
                        (255 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (255 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                16 as libc::c_int |
                            (255 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                8 as libc::c_int |
                            ((*interfaceCtx).magicAlpha as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int;
                    let fresh231 = (*__gfxCtx).overlay.p;
                    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                    let mut _g_10: *mut Gfx = fresh231;
                    (*_g_10).words.w0 =
                        (0xfc as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (((31 as libc::c_int as u32_0 &
                                   (((0x1 as libc::c_int) << 4 as libc::c_int)
                                        - 1 as libc::c_int) as libc::c_uint)
                                  << 20 as libc::c_int |
                                  (31 as libc::c_int as u32_0 &
                                       (((0x1 as libc::c_int) <<
                                             5 as libc::c_int) -
                                            1 as libc::c_int) as libc::c_uint)
                                      << 15 as libc::c_int |
                                  (1 as libc::c_int as u32_0 &
                                       (((0x1 as libc::c_int) <<
                                             3 as libc::c_int) -
                                            1 as libc::c_int) as libc::c_uint)
                                      << 12 as libc::c_int |
                                  (3 as libc::c_int as u32_0 &
                                       (((0x1 as libc::c_int) <<
                                             3 as libc::c_int) -
                                            1 as libc::c_int) as libc::c_uint)
                                      << 9 as libc::c_int |
                                  ((31 as libc::c_int as u32_0 &
                                        (((0x1 as libc::c_int) <<
                                              4 as libc::c_int) -
                                             1 as libc::c_int) as
                                            libc::c_uint) << 5 as libc::c_int
                                       |
                                       (31 as libc::c_int as u32_0 &
                                            (((0x1 as libc::c_int) <<
                                                  5 as libc::c_int) -
                                                 1 as libc::c_int) as
                                                libc::c_uint) <<
                                           0 as libc::c_int)) &
                                 (((0x1 as libc::c_int) << 24 as libc::c_int)
                                      - 1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int;
                    (*_g_10).words.w1 =
                        (31 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            28 as libc::c_int |
                            (3 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                15 as libc::c_int |
                            (7 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                12 as libc::c_int |
                            (7 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                9 as libc::c_int |
                            ((31 as libc::c_int as u32_0 &
                                  (((0x1 as libc::c_int) << 4 as libc::c_int)
                                       - 1 as libc::c_int) as libc::c_uint) <<
                                 24 as libc::c_int |
                                 (1 as libc::c_int as u32_0 &
                                      (((0x1 as libc::c_int) <<
                                            3 as libc::c_int) -
                                           1 as libc::c_int) as libc::c_uint)
                                     << 21 as libc::c_int |
                                 (3 as libc::c_int as u32_0 &
                                      (((0x1 as libc::c_int) <<
                                            3 as libc::c_int) -
                                           1 as libc::c_int) as libc::c_uint)
                                     << 18 as libc::c_int |
                                 (3 as libc::c_int as u32_0 &
                                      (((0x1 as libc::c_int) <<
                                            3 as libc::c_int) -
                                           1 as libc::c_int) as libc::c_uint)
                                     << 6 as libc::c_int |
                                 (7 as libc::c_int as u32_0 &
                                      (((0x1 as libc::c_int) <<
                                            3 as libc::c_int) -
                                           1 as libc::c_int) as libc::c_uint)
                                     << 3 as libc::c_int |
                                 (7 as libc::c_int as u32_0 &
                                      (((0x1 as libc::c_int) <<
                                            3 as libc::c_int) -
                                           1 as libc::c_int) as libc::c_uint)
                                     << 0 as libc::c_int);
                    (*interfaceCtx).counterDigits[2 as libc::c_int as usize] =
                        0 as libc::c_int as s16;
                    (*interfaceCtx).counterDigits[3 as libc::c_int as usize] =
                        gSaveContext.inventory.dungeonKeys[gSaveContext.mapIndex
                                                               as usize] as
                            s16;
                    while (*interfaceCtx).counterDigits[3 as libc::c_int as
                                                            usize] as
                              libc::c_int >= 10 as libc::c_int {
                        (*interfaceCtx).counterDigits[2 as libc::c_int as
                                                          usize] += 1;
                        (*interfaceCtx).counterDigits[3 as libc::c_int as
                                                          usize] =
                            ((*interfaceCtx).counterDigits[3 as libc::c_int as
                                                               usize] as
                                 libc::c_int - 10 as libc::c_int) as s16
                    }
                    svar3 = 42 as libc::c_int as s16;
                    if (*interfaceCtx).counterDigits[2 as libc::c_int as
                                                         usize] as libc::c_int
                           != 0 as libc::c_int {
                        (*__gfxCtx).overlay.p =
                            Gfx_TextureI8((*__gfxCtx).overlay.p,
                                          (gCounterDigit0Tex.as_mut_ptr() as
                                               *mut u8_0).offset((8 as
                                                                      libc::c_int
                                                                      *
                                                                      16 as
                                                                          libc::c_int
                                                                      *
                                                                      (*interfaceCtx).counterDigits[2
                                                                                                        as
                                                                                                        libc::c_int
                                                                                                        as
                                                                                                        usize]
                                                                          as
                                                                          libc::c_int)
                                                                     as isize)
                                              as *mut libc::c_void,
                                          8 as libc::c_int as s16,
                                          16 as libc::c_int as s16, svar3,
                                          190 as libc::c_int as s16,
                                          8 as libc::c_int as s16,
                                          16 as libc::c_int as s16,
                                          ((1 as libc::c_int) <<
                                               10 as libc::c_int) as u16_0,
                                          ((1 as libc::c_int) <<
                                               10 as libc::c_int) as u16_0);
                        svar3 =
                            (svar3 as libc::c_int + 8 as libc::c_int) as s16
                    }
                    (*__gfxCtx).overlay.p =
                        Gfx_TextureI8((*__gfxCtx).overlay.p,
                                      (gCounterDigit0Tex.as_mut_ptr() as
                                           *mut u8_0).offset((8 as libc::c_int
                                                                  *
                                                                  16 as
                                                                      libc::c_int
                                                                  *
                                                                  (*interfaceCtx).counterDigits[3
                                                                                                    as
                                                                                                    libc::c_int
                                                                                                    as
                                                                                                    usize]
                                                                      as
                                                                      libc::c_int)
                                                                 as isize) as
                                          *mut libc::c_void,
                                      8 as libc::c_int as s16,
                                      16 as libc::c_int as s16, svar3,
                                      190 as libc::c_int as s16,
                                      8 as libc::c_int as s16,
                                      16 as libc::c_int as s16,
                                      ((1 as libc::c_int) <<
                                           10 as libc::c_int) as u16_0,
                                      ((1 as libc::c_int) <<
                                           10 as libc::c_int) as u16_0)
                }
            }
            _ => { }
        }
        // Rupee Counter
        let fresh232 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_11: *mut Gfx = fresh232;
        (*_g_11).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_11).words.w1 = 0 as libc::c_int as libc::c_uint;
        if gSaveContext.rupees as libc::c_int ==
               gUpgradeCapacities[UPG_WALLET as libc::c_int as
                                      usize][((gSaveContext.inventory.upgrades
                                                   &
                                                   gUpgradeMasks[UPG_WALLET as
                                                                     libc::c_int
                                                                     as
                                                                     usize])
                                                  as s32 >>
                                                  gUpgradeShifts[UPG_WALLET as
                                                                     libc::c_int
                                                                     as usize]
                                                      as libc::c_int) as
                                                 usize] as libc::c_int {
            let fresh233 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_12: *mut Gfx = fresh233;
            (*_g_12).words.w0 =
                (0xfa as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_12).words.w1 =
                (120 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    ((*interfaceCtx).magicAlpha as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
        } else if gSaveContext.rupees as libc::c_int != 0 as libc::c_int {
            let fresh234 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_13: *mut Gfx = fresh234;
            (*_g_13).words.w0 =
                (0xfa as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_13).words.w1 =
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    ((*interfaceCtx).magicAlpha as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
        } else {
            let fresh235 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_14: *mut Gfx = fresh235;
            (*_g_14).words.w0 =
                (0xfa as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_14).words.w1 =
                (100 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (100 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (100 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    ((*interfaceCtx).magicAlpha as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
        }
        let fresh236 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_15: *mut Gfx = fresh236;
        (*_g_15).words.w0 =
            (0xfc as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (((31 as libc::c_int as u32_0 &
                       (((0x1 as libc::c_int) << 4 as libc::c_int) -
                            1 as libc::c_int) as libc::c_uint) <<
                      20 as libc::c_int |
                      (31 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          15 as libc::c_int |
                      (1 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          12 as libc::c_int |
                      (3 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          9 as libc::c_int |
                      ((31 as libc::c_int as u32_0 &
                            (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                 1 as libc::c_int) as libc::c_uint) <<
                           5 as libc::c_int |
                           (31 as libc::c_int as u32_0 &
                                (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                     1 as libc::c_int) as libc::c_uint) <<
                               0 as libc::c_int)) &
                     (((0x1 as libc::c_int) << 24 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_15).words.w1 =
            (31 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 28 as libc::c_int
                |
                (3 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    15 as libc::c_int |
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    9 as libc::c_int |
                ((31 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 4 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     24 as libc::c_int |
                     (1 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         21 as libc::c_int |
                     (3 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         18 as libc::c_int |
                     (3 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         6 as libc::c_int |
                     (7 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         3 as libc::c_int |
                     (7 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         0 as libc::c_int);
        (*interfaceCtx).counterDigits[1 as libc::c_int as usize] =
            0 as libc::c_int as s16;
        (*interfaceCtx).counterDigits[0 as libc::c_int as usize] =
            (*interfaceCtx).counterDigits[1 as libc::c_int as usize];
        (*interfaceCtx).counterDigits[2 as libc::c_int as usize] =
            gSaveContext.rupees;
        if (*interfaceCtx).counterDigits[2 as libc::c_int as usize] as
               libc::c_int > 9999 as libc::c_int ||
               ((*interfaceCtx).counterDigits[2 as libc::c_int as usize] as
                    libc::c_int) < 0 as libc::c_int {
            (*interfaceCtx).counterDigits[2 as libc::c_int as usize] =
                ((*interfaceCtx).counterDigits[2 as libc::c_int as usize] as
                     libc::c_int & 0xddd as libc::c_int) as s16
        }
        while (*interfaceCtx).counterDigits[2 as libc::c_int as usize] as
                  libc::c_int >= 100 as libc::c_int {
            (*interfaceCtx).counterDigits[0 as libc::c_int as usize] += 1;
            (*interfaceCtx).counterDigits[2 as libc::c_int as usize] =
                ((*interfaceCtx).counterDigits[2 as libc::c_int as usize] as
                     libc::c_int - 100 as libc::c_int) as s16
        }
        while (*interfaceCtx).counterDigits[2 as libc::c_int as usize] as
                  libc::c_int >= 10 as libc::c_int {
            (*interfaceCtx).counterDigits[1 as libc::c_int as usize] += 1;
            (*interfaceCtx).counterDigits[2 as libc::c_int as usize] =
                ((*interfaceCtx).counterDigits[2 as libc::c_int as usize] as
                     libc::c_int - 10 as libc::c_int) as s16
        }
        svar2 =
            rupeeDigitsFirst[((gSaveContext.inventory.upgrades &
                                   gUpgradeMasks[UPG_WALLET as libc::c_int as
                                                     usize]) as s32 >>
                                  gUpgradeShifts[UPG_WALLET as libc::c_int as
                                                     usize] as libc::c_int) as
                                 usize];
        svar5 =
            rupeeDigitsCount[((gSaveContext.inventory.upgrades &
                                   gUpgradeMasks[UPG_WALLET as libc::c_int as
                                                     usize]) as s32 >>
                                  gUpgradeShifts[UPG_WALLET as libc::c_int as
                                                     usize] as libc::c_int) as
                                 usize];
        svar1 = 0 as libc::c_int as s16;
        svar3 = 42 as libc::c_int as s16;
        while (svar1 as libc::c_int) < svar5 as libc::c_int {
            (*__gfxCtx).overlay.p =
                Gfx_TextureI8((*__gfxCtx).overlay.p,
                              (gCounterDigit0Tex.as_mut_ptr() as
                                   *mut u8_0).offset((8 as libc::c_int *
                                                          16 as libc::c_int *
                                                          (*interfaceCtx).counterDigits[svar2
                                                                                            as
                                                                                            usize]
                                                              as libc::c_int)
                                                         as isize) as
                                  *mut libc::c_void, 8 as libc::c_int as s16,
                              16 as libc::c_int as s16, svar3,
                              206 as libc::c_int as s16,
                              8 as libc::c_int as s16,
                              16 as libc::c_int as s16,
                              ((1 as libc::c_int) << 10 as libc::c_int) as
                                  u16_0,
                              ((1 as libc::c_int) << 10 as libc::c_int) as
                                  u16_0);
            svar1 += 1;
            svar2 += 1;
            svar3 = (svar3 as libc::c_int + 8 as libc::c_int) as s16
        }
        Interface_DrawMagicBar(globalCtx);
        Minimap_Draw(globalCtx);
        if (*gGameInfo).data[(1 as libc::c_int * 6 as libc::c_int *
                                  16 as libc::c_int + 94 as libc::c_int) as
                                 usize] as libc::c_int != 2 as libc::c_int &&
               (*gGameInfo).data[(1 as libc::c_int * 6 as libc::c_int *
                                      16 as libc::c_int + 94 as libc::c_int)
                                     as usize] as libc::c_int !=
                   3 as libc::c_int {
            func_8002C124(&mut (*globalCtx).actorCtx.targetCtx, globalCtx);
            // Draw Z-Target
        }
        func_80094520((*globalCtx).state.gfxCtx);
        Interface_DrawItemButtons(globalCtx);
        let fresh237 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_16: *mut Gfx = fresh237;
        (*_g_16).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_16).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh238 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_17: *mut Gfx = fresh238;
        (*_g_17).words.w0 =
            (0xfa as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_17).words.w1 =
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                ((*interfaceCtx).bAlpha as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh239 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_18: *mut Gfx = fresh239;
        (*_g_18).words.w0 =
            (0xfc as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (((1 as libc::c_int as u32_0 &
                       (((0x1 as libc::c_int) << 4 as libc::c_int) -
                            1 as libc::c_int) as libc::c_uint) <<
                      20 as libc::c_int |
                      (3 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          15 as libc::c_int |
                      (1 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          12 as libc::c_int |
                      (3 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          9 as libc::c_int |
                      ((1 as libc::c_int as u32_0 &
                            (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                 1 as libc::c_int) as libc::c_uint) <<
                           5 as libc::c_int |
                           (3 as libc::c_int as u32_0 &
                                (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                     1 as libc::c_int) as libc::c_uint) <<
                               0 as libc::c_int)) &
                     (((0x1 as libc::c_int) << 24 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_18).words.w1 =
            (31 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 28 as libc::c_int
                |
                (31 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    15 as libc::c_int |
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    9 as libc::c_int |
                ((31 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 4 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     24 as libc::c_int |
                     (1 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         21 as libc::c_int |
                     (3 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         18 as libc::c_int |
                     (31 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         6 as libc::c_int |
                     (7 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         3 as libc::c_int |
                     (7 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         0 as libc::c_int);
        if (*interfaceCtx).unk_1FA == 0 {
            // B Button Icon & Ammo Count
            if gSaveContext.equips.buttonItems[0 as libc::c_int as usize] as
                   libc::c_int != ITEM_NONE as libc::c_int {
                Interface_DrawItemIconTexture(globalCtx,
                                              (*interfaceCtx).iconItemSegment
                                                  as *mut libc::c_void,
                                              0 as libc::c_int as s16);
                if (*player).stateFlags1 &
                       0x800000 as libc::c_int as libc::c_uint != 0 ||
                       (*globalCtx).shootingGalleryStatus as libc::c_int >
                           1 as libc::c_int ||
                       (*globalCtx).sceneNum as libc::c_int ==
                           SCENE_BOWLING as libc::c_int &&
                           Flags_GetSwitch(globalCtx, 0x38 as libc::c_int) !=
                               0 {
                    let fresh240 = (*__gfxCtx).overlay.p;
                    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                    let mut _g_19: *mut Gfx = fresh240;
                    (*_g_19).words.w0 =
                        (0xe7 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int;
                    (*_g_19).words.w1 = 0 as libc::c_int as libc::c_uint;
                    let fresh241 = (*__gfxCtx).overlay.p;
                    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                    let mut _g_20: *mut Gfx = fresh241;
                    (*_g_20).words.w0 =
                        (0xfc as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (((3 as libc::c_int as u32_0 &
                                   (((0x1 as libc::c_int) << 4 as libc::c_int)
                                        - 1 as libc::c_int) as libc::c_uint)
                                  << 20 as libc::c_int |
                                  (1 as libc::c_int as u32_0 &
                                       (((0x1 as libc::c_int) <<
                                             5 as libc::c_int) -
                                            1 as libc::c_int) as libc::c_uint)
                                      << 15 as libc::c_int |
                                  (1 as libc::c_int as u32_0 &
                                       (((0x1 as libc::c_int) <<
                                             3 as libc::c_int) -
                                            1 as libc::c_int) as libc::c_uint)
                                      << 12 as libc::c_int |
                                  (3 as libc::c_int as u32_0 &
                                       (((0x1 as libc::c_int) <<
                                             3 as libc::c_int) -
                                            1 as libc::c_int) as libc::c_uint)
                                      << 9 as libc::c_int |
                                  ((3 as libc::c_int as u32_0 &
                                        (((0x1 as libc::c_int) <<
                                              4 as libc::c_int) -
                                             1 as libc::c_int) as
                                            libc::c_uint) << 5 as libc::c_int
                                       |
                                       (1 as libc::c_int as u32_0 &
                                            (((0x1 as libc::c_int) <<
                                                  5 as libc::c_int) -
                                                 1 as libc::c_int) as
                                                libc::c_uint) <<
                                           0 as libc::c_int)) &
                                 (((0x1 as libc::c_int) << 24 as libc::c_int)
                                      - 1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int;
                    (*_g_20).words.w1 =
                        (5 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            28 as libc::c_int |
                            (5 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                15 as libc::c_int |
                            (7 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                12 as libc::c_int |
                            (7 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                9 as libc::c_int |
                            ((5 as libc::c_int as u32_0 &
                                  (((0x1 as libc::c_int) << 4 as libc::c_int)
                                       - 1 as libc::c_int) as libc::c_uint) <<
                                 24 as libc::c_int |
                                 (1 as libc::c_int as u32_0 &
                                      (((0x1 as libc::c_int) <<
                                            3 as libc::c_int) -
                                           1 as libc::c_int) as libc::c_uint)
                                     << 21 as libc::c_int |
                                 (3 as libc::c_int as u32_0 &
                                      (((0x1 as libc::c_int) <<
                                            3 as libc::c_int) -
                                           1 as libc::c_int) as libc::c_uint)
                                     << 18 as libc::c_int |
                                 (5 as libc::c_int as u32_0 &
                                      (((0x1 as libc::c_int) <<
                                            3 as libc::c_int) -
                                           1 as libc::c_int) as libc::c_uint)
                                     << 6 as libc::c_int |
                                 (7 as libc::c_int as u32_0 &
                                      (((0x1 as libc::c_int) <<
                                            3 as libc::c_int) -
                                           1 as libc::c_int) as libc::c_uint)
                                     << 3 as libc::c_int |
                                 (7 as libc::c_int as u32_0 &
                                      (((0x1 as libc::c_int) <<
                                            3 as libc::c_int) -
                                           1 as libc::c_int) as libc::c_uint)
                                     << 0 as libc::c_int);
                    Interface_DrawAmmoCount(globalCtx,
                                            0 as libc::c_int as s16,
                                            (*interfaceCtx).bAlpha as s16);
                }
            }
        } else {
            // B Button Do Action Label
            let fresh242 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_21: *mut Gfx = fresh242;
            (*_g_21).words.w0 =
                (0xe7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_21).words.w1 = 0 as libc::c_int as libc::c_uint;
            let fresh243 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_22: *mut Gfx = fresh243;
            (*_g_22).words.w0 =
                (0xfc as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (((3 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          20 as libc::c_int |
                          (1 as libc::c_int as u32_0 &
                               (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              15 as libc::c_int |
                          (1 as libc::c_int as u32_0 &
                               (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              12 as libc::c_int |
                          (3 as libc::c_int as u32_0 &
                               (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              9 as libc::c_int |
                          ((3 as libc::c_int as u32_0 &
                                (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                     1 as libc::c_int) as libc::c_uint) <<
                               5 as libc::c_int |
                               (1 as libc::c_int as u32_0 &
                                    (((0x1 as libc::c_int) <<
                                          5 as libc::c_int) -
                                         1 as libc::c_int) as libc::c_uint) <<
                                   0 as libc::c_int)) &
                         (((0x1 as libc::c_int) << 24 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_22).words.w1 =
                (5 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    28 as libc::c_int |
                    (5 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        15 as libc::c_int |
                    (7 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (7 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        9 as libc::c_int |
                    ((5 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 4 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         24 as libc::c_int |
                         (1 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             21 as libc::c_int |
                         (3 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             18 as libc::c_int |
                         (5 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             6 as libc::c_int |
                         (7 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             3 as libc::c_int |
                         (7 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             0 as libc::c_int);
            let fresh244 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_23: *mut Gfx = fresh244;
            (*_g_23).words.w0 =
                (0xfa as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_23).words.w1 =
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    ((*interfaceCtx).bAlpha as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh245 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_24: *mut Gfx = fresh245;
            (*_g_24).words.w0 =
                (0xfd as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (3 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        21 as libc::c_int |
                    (2 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    ((1 as libc::c_int - 1 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_24).words.w1 =
                (*interfaceCtx).doActionSegment.offset((48 as libc::c_int *
                                                            16 as libc::c_int
                                                            /
                                                            2 as libc::c_int)
                                                           as isize) as
                    libc::c_uint;
            let fresh246 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_25: *mut Gfx = fresh246;
            (*_g_25).words.w0 =
                (0xf5 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (3 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        21 as libc::c_int |
                    (2 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 9 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        9 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 9 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_25).words.w1 =
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        20 as libc::c_int |
                    ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        18 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        14 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        10 as libc::c_int |
                    ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        4 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh247 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_26: *mut Gfx = fresh247;
            (*_g_26).words.w0 =
                (0xe6 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_26).words.w1 = 0 as libc::c_int as libc::c_uint;
            let fresh248 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_27: *mut Gfx = fresh248;
            (*_g_27).words.w0 =
                (0xf3 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_27).words.w1 =
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((if ((48 as libc::c_int * 16 as libc::c_int +
                               3 as libc::c_int >> 2 as libc::c_int) -
                              1 as libc::c_int) < 2047 as libc::c_int {
                          (48 as libc::c_int * 16 as libc::c_int +
                               3 as libc::c_int >> 2 as libc::c_int) -
                              1 as libc::c_int
                      } else { 2047 as libc::c_int }) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (((((1 as libc::c_int) << 11 as libc::c_int) +
                           (if 1 as libc::c_int >
                                   48 as libc::c_int / 16 as libc::c_int {
                                1 as libc::c_int
                            } else {
                                (48 as libc::c_int) / 16 as libc::c_int
                            }) - 1 as libc::c_int) /
                          (if 1 as libc::c_int >
                                  48 as libc::c_int / 16 as libc::c_int {
                               1 as libc::c_int
                           } else {
                               (48 as libc::c_int) / 16 as libc::c_int
                           })) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh249 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_28: *mut Gfx = fresh249;
            (*_g_28).words.w0 =
                (0xe7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_28).words.w1 = 0 as libc::c_int as libc::c_uint;
            let fresh250 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_29: *mut Gfx = fresh250;
            (*_g_29).words.w0 =
                (0xf5 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (3 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        21 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    (((48 as libc::c_int >> 1 as libc::c_int) +
                          7 as libc::c_int >> 3 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 9 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        9 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 9 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_29).words.w1 =
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        20 as libc::c_int |
                    ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        18 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        14 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        10 as libc::c_int |
                    ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 2 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        4 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh251 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_30: *mut Gfx = fresh251;
            (*_g_30).words.w0 =
                (0xf2 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_30).words.w1 =
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (((48 as libc::c_int - 1 as libc::c_int) <<
                          2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (((16 as libc::c_int - 1 as libc::c_int) <<
                          2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*gGameInfo).data[(18 as libc::c_int * 6 as libc::c_int *
                                   16 as libc::c_int + 0 as libc::c_int) as
                                  usize] =
                (((1 as libc::c_int) << 10 as libc::c_int) as libc::c_float /
                     ((*gGameInfo).data[(18 as libc::c_int * 6 as libc::c_int
                                             * 16 as libc::c_int +
                                             37 as libc::c_int +
                                             gSaveContext.language as
                                                 libc::c_int) as usize] as
                          libc::c_int as libc::c_float / 100.0f32)) as s16;
            let fresh252 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_31: *mut Gfx = fresh252;
            (*_g_31).words.w0 =
                (0xe4 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((((*gGameInfo).data[(18 as libc::c_int * 6 as libc::c_int
                                              * 16 as libc::c_int +
                                              40 as libc::c_int +
                                              gSaveContext.language as
                                                  libc::c_int) as usize] as
                           libc::c_int + 48 as libc::c_int) <<
                          2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    ((((*gGameInfo).data[(18 as libc::c_int * 6 as libc::c_int
                                              * 16 as libc::c_int +
                                              43 as libc::c_int +
                                              gSaveContext.language as
                                                  libc::c_int) as usize] as
                           libc::c_int + 16 as libc::c_int) <<
                          2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_31).words.w1 =
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((((*gGameInfo).data[(18 as libc::c_int * 6 as libc::c_int
                                              * 16 as libc::c_int +
                                              40 as libc::c_int +
                                              gSaveContext.language as
                                                  libc::c_int) as usize] as
                           libc::c_int) << 2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    ((((*gGameInfo).data[(18 as libc::c_int * 6 as libc::c_int
                                              * 16 as libc::c_int +
                                              43 as libc::c_int +
                                              gSaveContext.language as
                                                  libc::c_int) as usize] as
                           libc::c_int) << 2 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 12 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh253 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_32: *mut Gfx = fresh253;
            (*_g_32).words.w0 =
                (0xe1 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_32).words.w1 =
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh254 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_33: *mut Gfx = fresh254;
            (*_g_33).words.w0 =
                (0xf1 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_33).words.w1 =
                ((*gGameInfo).data[(18 as libc::c_int * 6 as libc::c_int *
                                        16 as libc::c_int + 0 as libc::c_int)
                                       as usize] as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                    ((*gGameInfo).data[(18 as libc::c_int * 6 as libc::c_int *
                                            16 as libc::c_int +
                                            0 as libc::c_int) as usize] as
                         u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
        }
        let fresh255 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_34: *mut Gfx = fresh255;
        (*_g_34).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_34).words.w1 = 0 as libc::c_int as libc::c_uint;
        // C-Left Button Icon & Ammo Count
        if (gSaveContext.equips.buttonItems[1 as libc::c_int as usize] as
                libc::c_int) < 0xf0 as libc::c_int {
            let fresh256 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_35: *mut Gfx = fresh256;
            (*_g_35).words.w0 =
                (0xfa as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_35).words.w1 =
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    ((*interfaceCtx).cLeftAlpha as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh257 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_36: *mut Gfx = fresh257;
            (*_g_36).words.w0 =
                (0xfc as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (((1 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          20 as libc::c_int |
                          (3 as libc::c_int as u32_0 &
                               (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              15 as libc::c_int |
                          (1 as libc::c_int as u32_0 &
                               (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              12 as libc::c_int |
                          (3 as libc::c_int as u32_0 &
                               (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              9 as libc::c_int |
                          ((1 as libc::c_int as u32_0 &
                                (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                     1 as libc::c_int) as libc::c_uint) <<
                               5 as libc::c_int |
                               (3 as libc::c_int as u32_0 &
                                    (((0x1 as libc::c_int) <<
                                          5 as libc::c_int) -
                                         1 as libc::c_int) as libc::c_uint) <<
                                   0 as libc::c_int)) &
                         (((0x1 as libc::c_int) << 24 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_36).words.w1 =
                (31 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    28 as libc::c_int |
                    (31 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        15 as libc::c_int |
                    (7 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (7 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        9 as libc::c_int |
                    ((31 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 4 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         24 as libc::c_int |
                         (1 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             21 as libc::c_int |
                         (3 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             18 as libc::c_int |
                         (31 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             6 as libc::c_int |
                         (7 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             3 as libc::c_int |
                         (7 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             0 as libc::c_int);
            Interface_DrawItemIconTexture(globalCtx,
                                          (*interfaceCtx).iconItemSegment.offset(0x1000
                                                                                     as
                                                                                     libc::c_int
                                                                                     as
                                                                                     isize)
                                              as *mut libc::c_void,
                                          1 as libc::c_int as s16);
            let fresh258 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_37: *mut Gfx = fresh258;
            (*_g_37).words.w0 =
                (0xe7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_37).words.w1 = 0 as libc::c_int as libc::c_uint;
            let fresh259 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_38: *mut Gfx = fresh259;
            (*_g_38).words.w0 =
                (0xfc as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (((3 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          20 as libc::c_int |
                          (1 as libc::c_int as u32_0 &
                               (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              15 as libc::c_int |
                          (1 as libc::c_int as u32_0 &
                               (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              12 as libc::c_int |
                          (3 as libc::c_int as u32_0 &
                               (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              9 as libc::c_int |
                          ((3 as libc::c_int as u32_0 &
                                (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                     1 as libc::c_int) as libc::c_uint) <<
                               5 as libc::c_int |
                               (1 as libc::c_int as u32_0 &
                                    (((0x1 as libc::c_int) <<
                                          5 as libc::c_int) -
                                         1 as libc::c_int) as libc::c_uint) <<
                                   0 as libc::c_int)) &
                         (((0x1 as libc::c_int) << 24 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_38).words.w1 =
                (5 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    28 as libc::c_int |
                    (5 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        15 as libc::c_int |
                    (7 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (7 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        9 as libc::c_int |
                    ((5 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 4 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         24 as libc::c_int |
                         (1 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             21 as libc::c_int |
                         (3 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             18 as libc::c_int |
                         (5 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             6 as libc::c_int |
                         (7 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             3 as libc::c_int |
                         (7 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             0 as libc::c_int);
            Interface_DrawAmmoCount(globalCtx, 1 as libc::c_int as s16,
                                    (*interfaceCtx).cLeftAlpha as s16);
        }
        let fresh260 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_39: *mut Gfx = fresh260;
        (*_g_39).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_39).words.w1 = 0 as libc::c_int as libc::c_uint;
        // C-Down Button Icon & Ammo Count
        if (gSaveContext.equips.buttonItems[2 as libc::c_int as usize] as
                libc::c_int) < 0xf0 as libc::c_int {
            let fresh261 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_40: *mut Gfx = fresh261;
            (*_g_40).words.w0 =
                (0xfa as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_40).words.w1 =
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    ((*interfaceCtx).cDownAlpha as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh262 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_41: *mut Gfx = fresh262;
            (*_g_41).words.w0 =
                (0xfc as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (((1 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          20 as libc::c_int |
                          (3 as libc::c_int as u32_0 &
                               (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              15 as libc::c_int |
                          (1 as libc::c_int as u32_0 &
                               (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              12 as libc::c_int |
                          (3 as libc::c_int as u32_0 &
                               (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              9 as libc::c_int |
                          ((1 as libc::c_int as u32_0 &
                                (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                     1 as libc::c_int) as libc::c_uint) <<
                               5 as libc::c_int |
                               (3 as libc::c_int as u32_0 &
                                    (((0x1 as libc::c_int) <<
                                          5 as libc::c_int) -
                                         1 as libc::c_int) as libc::c_uint) <<
                                   0 as libc::c_int)) &
                         (((0x1 as libc::c_int) << 24 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_41).words.w1 =
                (31 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    28 as libc::c_int |
                    (31 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        15 as libc::c_int |
                    (7 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (7 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        9 as libc::c_int |
                    ((31 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 4 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         24 as libc::c_int |
                         (1 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             21 as libc::c_int |
                         (3 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             18 as libc::c_int |
                         (31 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             6 as libc::c_int |
                         (7 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             3 as libc::c_int |
                         (7 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             0 as libc::c_int);
            Interface_DrawItemIconTexture(globalCtx,
                                          (*interfaceCtx).iconItemSegment.offset(0x2000
                                                                                     as
                                                                                     libc::c_int
                                                                                     as
                                                                                     isize)
                                              as *mut libc::c_void,
                                          2 as libc::c_int as s16);
            let fresh263 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_42: *mut Gfx = fresh263;
            (*_g_42).words.w0 =
                (0xe7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_42).words.w1 = 0 as libc::c_int as libc::c_uint;
            let fresh264 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_43: *mut Gfx = fresh264;
            (*_g_43).words.w0 =
                (0xfc as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (((3 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          20 as libc::c_int |
                          (1 as libc::c_int as u32_0 &
                               (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              15 as libc::c_int |
                          (1 as libc::c_int as u32_0 &
                               (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              12 as libc::c_int |
                          (3 as libc::c_int as u32_0 &
                               (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              9 as libc::c_int |
                          ((3 as libc::c_int as u32_0 &
                                (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                     1 as libc::c_int) as libc::c_uint) <<
                               5 as libc::c_int |
                               (1 as libc::c_int as u32_0 &
                                    (((0x1 as libc::c_int) <<
                                          5 as libc::c_int) -
                                         1 as libc::c_int) as libc::c_uint) <<
                                   0 as libc::c_int)) &
                         (((0x1 as libc::c_int) << 24 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_43).words.w1 =
                (5 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    28 as libc::c_int |
                    (5 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        15 as libc::c_int |
                    (7 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (7 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        9 as libc::c_int |
                    ((5 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 4 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         24 as libc::c_int |
                         (1 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             21 as libc::c_int |
                         (3 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             18 as libc::c_int |
                         (5 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             6 as libc::c_int |
                         (7 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             3 as libc::c_int |
                         (7 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             0 as libc::c_int);
            Interface_DrawAmmoCount(globalCtx, 2 as libc::c_int as s16,
                                    (*interfaceCtx).cDownAlpha as s16);
        }
        let fresh265 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_44: *mut Gfx = fresh265;
        (*_g_44).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_44).words.w1 = 0 as libc::c_int as libc::c_uint;
        // C-Right Button Icon & Ammo Count
        if (gSaveContext.equips.buttonItems[3 as libc::c_int as usize] as
                libc::c_int) < 0xf0 as libc::c_int {
            let fresh266 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_45: *mut Gfx = fresh266;
            (*_g_45).words.w0 =
                (0xfa as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_45).words.w1 =
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    ((*interfaceCtx).cRightAlpha as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh267 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_46: *mut Gfx = fresh267;
            (*_g_46).words.w0 =
                (0xfc as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (((1 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          20 as libc::c_int |
                          (3 as libc::c_int as u32_0 &
                               (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              15 as libc::c_int |
                          (1 as libc::c_int as u32_0 &
                               (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              12 as libc::c_int |
                          (3 as libc::c_int as u32_0 &
                               (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              9 as libc::c_int |
                          ((1 as libc::c_int as u32_0 &
                                (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                     1 as libc::c_int) as libc::c_uint) <<
                               5 as libc::c_int |
                               (3 as libc::c_int as u32_0 &
                                    (((0x1 as libc::c_int) <<
                                          5 as libc::c_int) -
                                         1 as libc::c_int) as libc::c_uint) <<
                                   0 as libc::c_int)) &
                         (((0x1 as libc::c_int) << 24 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_46).words.w1 =
                (31 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    28 as libc::c_int |
                    (31 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        15 as libc::c_int |
                    (7 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (7 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        9 as libc::c_int |
                    ((31 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 4 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         24 as libc::c_int |
                         (1 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             21 as libc::c_int |
                         (3 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             18 as libc::c_int |
                         (31 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             6 as libc::c_int |
                         (7 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             3 as libc::c_int |
                         (7 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             0 as libc::c_int);
            Interface_DrawItemIconTexture(globalCtx,
                                          (*interfaceCtx).iconItemSegment.offset(0x3000
                                                                                     as
                                                                                     libc::c_int
                                                                                     as
                                                                                     isize)
                                              as *mut libc::c_void,
                                          3 as libc::c_int as s16);
            let fresh268 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_47: *mut Gfx = fresh268;
            (*_g_47).words.w0 =
                (0xe7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_47).words.w1 = 0 as libc::c_int as libc::c_uint;
            let fresh269 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_48: *mut Gfx = fresh269;
            (*_g_48).words.w0 =
                (0xfc as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (((3 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          20 as libc::c_int |
                          (1 as libc::c_int as u32_0 &
                               (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              15 as libc::c_int |
                          (1 as libc::c_int as u32_0 &
                               (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              12 as libc::c_int |
                          (3 as libc::c_int as u32_0 &
                               (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              9 as libc::c_int |
                          ((3 as libc::c_int as u32_0 &
                                (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                     1 as libc::c_int) as libc::c_uint) <<
                               5 as libc::c_int |
                               (1 as libc::c_int as u32_0 &
                                    (((0x1 as libc::c_int) <<
                                          5 as libc::c_int) -
                                         1 as libc::c_int) as libc::c_uint) <<
                                   0 as libc::c_int)) &
                         (((0x1 as libc::c_int) << 24 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_48).words.w1 =
                (5 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    28 as libc::c_int |
                    (5 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        15 as libc::c_int |
                    (7 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (7 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        9 as libc::c_int |
                    ((5 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 4 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         24 as libc::c_int |
                         (1 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             21 as libc::c_int |
                         (3 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             18 as libc::c_int |
                         (5 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             6 as libc::c_int |
                         (7 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             3 as libc::c_int |
                         (7 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             0 as libc::c_int);
            Interface_DrawAmmoCount(globalCtx, 3 as libc::c_int as s16,
                                    (*interfaceCtx).cRightAlpha as s16);
        }
        // A Button
        func_80094A14((*globalCtx).state.gfxCtx);
        func_8008A8B8(globalCtx,
                      (*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int
                                             * 16 as libc::c_int +
                                             16 as libc::c_int) as usize] as
                          s32,
                      (*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int
                                             * 16 as libc::c_int +
                                             16 as libc::c_int) as usize] as
                          libc::c_int + 45 as libc::c_int,
                      (*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int
                                             * 16 as libc::c_int +
                                             17 as libc::c_int) as usize] as
                          s32,
                      (*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int
                                             * 16 as libc::c_int +
                                             17 as libc::c_int) as usize] as
                          libc::c_int + 45 as libc::c_int);
        let fresh270 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_49: *mut Gfx = fresh270;
        (*_g_49).words.w0 =
            (0xd9 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (!(0x600 as libc::c_int as u32_0) &
                     (((0x1 as libc::c_int) << 24 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_49).words.w1 = 0 as libc::c_int as u32_0;
        let fresh271 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_50: *mut Gfx = fresh271;
        (*_g_50).words.w0 =
            (0xfc as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (((1 as libc::c_int as u32_0 &
                       (((0x1 as libc::c_int) << 4 as libc::c_int) -
                            1 as libc::c_int) as libc::c_uint) <<
                      20 as libc::c_int |
                      (3 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          15 as libc::c_int |
                      (1 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          12 as libc::c_int |
                      (3 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          9 as libc::c_int |
                      ((1 as libc::c_int as u32_0 &
                            (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                 1 as libc::c_int) as libc::c_uint) <<
                           5 as libc::c_int |
                           (3 as libc::c_int as u32_0 &
                                (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                     1 as libc::c_int) as libc::c_uint) <<
                               0 as libc::c_int)) &
                     (((0x1 as libc::c_int) << 24 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_50).words.w1 =
            (31 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 28 as libc::c_int
                |
                (31 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    15 as libc::c_int |
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    9 as libc::c_int |
                ((31 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 4 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     24 as libc::c_int |
                     (1 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         21 as libc::c_int |
                     (3 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         18 as libc::c_int |
                     (31 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         6 as libc::c_int |
                     (7 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         3 as libc::c_int |
                     (7 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         0 as libc::c_int);
        let fresh272 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_51: *mut Gfx = fresh272;
        (*_g_51).words.w0 =
            (0xfa as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_51).words.w1 =
            ((*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int *
                                    16 as libc::c_int + 22 as libc::c_int +
                                    0 as libc::c_int) as usize] as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int *
                                        16 as libc::c_int + 22 as libc::c_int
                                        + 1 as libc::c_int) as usize] as u32_0
                     &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                ((*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int *
                                        16 as libc::c_int + 22 as libc::c_int
                                        + 2 as libc::c_int) as usize] as u32_0
                     &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                ((*interfaceCtx).aAlpha as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        Interface_DrawActionButton(globalCtx);
        let fresh273 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_52: *mut Gfx = fresh273;
        (*_g_52).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_52).words.w1 = 0 as libc::c_int as libc::c_uint;
        func_8008A8B8(globalCtx,
                      (*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int
                                             * 16 as libc::c_int +
                                             19 as libc::c_int) as usize] as
                          s32,
                      (*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int
                                             * 16 as libc::c_int +
                                             19 as libc::c_int) as usize] as
                          libc::c_int + 45 as libc::c_int,
                      (*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int
                                             * 16 as libc::c_int +
                                             20 as libc::c_int) as usize] as
                          s32,
                      (*gGameInfo).data[(14 as libc::c_int * 6 as libc::c_int
                                             * 16 as libc::c_int +
                                             20 as libc::c_int) as usize] as
                          libc::c_int + 45 as libc::c_int);
        let fresh274 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_53: *mut Gfx = fresh274;
        (*_g_53).words.w0 =
            (0xd9 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (!(0 as libc::c_int as u32_0) &
                     (((0x1 as libc::c_int) << 24 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_53).words.w1 = 0x400 as libc::c_int as u32_0;
        let fresh275 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_54: *mut Gfx = fresh275;
        (*_g_54).words.w0 =
            (0xfc as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (((3 as libc::c_int as u32_0 &
                       (((0x1 as libc::c_int) << 4 as libc::c_int) -
                            1 as libc::c_int) as libc::c_uint) <<
                      20 as libc::c_int |
                      (1 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          15 as libc::c_int |
                      (1 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          12 as libc::c_int |
                      (3 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          9 as libc::c_int |
                      ((3 as libc::c_int as u32_0 &
                            (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                 1 as libc::c_int) as libc::c_uint) <<
                           5 as libc::c_int |
                           (1 as libc::c_int as u32_0 &
                                (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                     1 as libc::c_int) as libc::c_uint) <<
                               0 as libc::c_int)) &
                     (((0x1 as libc::c_int) << 24 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_54).words.w1 =
            (5 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 28 as libc::c_int
                |
                (5 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    15 as libc::c_int |
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                (7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 3 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    9 as libc::c_int |
                ((5 as libc::c_int as u32_0 &
                      (((0x1 as libc::c_int) << 4 as libc::c_int) -
                           1 as libc::c_int) as libc::c_uint) <<
                     24 as libc::c_int |
                     (1 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         21 as libc::c_int |
                     (3 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         18 as libc::c_int |
                     (5 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         6 as libc::c_int |
                     (7 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         3 as libc::c_int |
                     (7 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 3 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         0 as libc::c_int);
        let fresh276 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_55: *mut Gfx = fresh276;
        (*_g_55).words.w0 =
            (0xfa as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_55).words.w1 =
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                ((*interfaceCtx).aAlpha as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh277 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_56: *mut Gfx = fresh277;
        (*_g_56).words.w0 =
            (0xfb as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_56).words.w1 =
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        Matrix_Translate(0.0f32, 0.0f32,
                         (*gGameInfo).data[(18 as libc::c_int *
                                                6 as libc::c_int *
                                                16 as libc::c_int +
                                                46 as libc::c_int +
                                                gSaveContext.language as
                                                    libc::c_int) as usize] as
                             libc::c_int as libc::c_float / 10.0f32,
                         MTXMODE_NEW as libc::c_int as u8_0);
        Matrix_Scale(1.0f32, 1.0f32, 1.0f32,
                     MTXMODE_APPLY as libc::c_int as u8_0);
        Matrix_RotateX((*interfaceCtx).unk_1F4 / 10000.0f32,
                       MTXMODE_APPLY as libc::c_int as u8_0);
        let fresh278 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_57: *mut Gfx = fresh278;
        (*_g_57).words.w0 =
            (0xda as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((::std::mem::size_of::<Mtx>() as
                      libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                      libc::c_uint).wrapping_div(8
                                                                                     as
                                                                                     libc::c_int
                                                                                     as
                                                                                     libc::c_uint)
                     &
                     (((0x1 as libc::c_int) << 5 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (((0 as libc::c_int | 0x2 as libc::c_int) ^
                      0x1 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_57).words.w1 =
            Matrix_NewMtx((*globalCtx).state.gfxCtx,
                          b"../z_parameter.c\x00" as *const u8 as
                              *const libc::c_char as *mut libc::c_char,
                          3701 as libc::c_int) as libc::c_uint;
        let fresh279 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_58: *mut Gfx = fresh279;
        (*_g_58).words.w0 =
            (0x1 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (4 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    12 as libc::c_int |
                ((0 as libc::c_int + 4 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 7 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    1 as libc::c_int;
        (*_g_58).words.w1 =
            &mut *(*interfaceCtx).actionVtx.offset(4 as libc::c_int as isize)
                as *mut Vtx as libc::c_uint;
        if ((*interfaceCtx).unk_1EC as libc::c_int) < 2 as libc::c_int ||
               (*interfaceCtx).unk_1EC as libc::c_int == 3 as libc::c_int {
            Interface_DrawActionLabel((*globalCtx).state.gfxCtx,
                                      (*interfaceCtx).doActionSegment as
                                          *mut libc::c_void);
        } else {
            Interface_DrawActionLabel((*globalCtx).state.gfxCtx,
                                      (*interfaceCtx).doActionSegment.offset((48
                                                                                  as
                                                                                  libc::c_int
                                                                                  *
                                                                                  16
                                                                                      as
                                                                                      libc::c_int
                                                                                  /
                                                                                  2
                                                                                      as
                                                                                      libc::c_int)
                                                                                 as
                                                                                 isize)
                                          as *mut libc::c_void);
        }
        let fresh280 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_59: *mut Gfx = fresh280;
        (*_g_59).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_59).words.w1 = 0 as libc::c_int as libc::c_uint;
        func_8008A994(interfaceCtx);
        svar3 = 16 as libc::c_int as s16;
        if (*pauseCtx).state as libc::c_int == 6 as libc::c_int &&
               (*pauseCtx).unk_1E4 as libc::c_int == 3 as libc::c_int {
            // Inventory Equip Effects
            let fresh281 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_60: *mut Gfx = fresh281;
            (*_g_60).words.w0 =
                (0xdb as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0x6 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    ((0x8 as libc::c_int * 4 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_60).words.w1 = (*pauseCtx).iconItemSegment as libc::c_uint;
            func_80094A14((*globalCtx).state.gfxCtx);
            let fresh282 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_61: *mut Gfx = fresh282;
            (*_g_61).words.w0 =
                (0xfc as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (((1 as libc::c_int as u32_0 &
                           (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                1 as libc::c_int) as libc::c_uint) <<
                          20 as libc::c_int |
                          (3 as libc::c_int as u32_0 &
                               (((0x1 as libc::c_int) << 5 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              15 as libc::c_int |
                          (1 as libc::c_int as u32_0 &
                               (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              12 as libc::c_int |
                          (3 as libc::c_int as u32_0 &
                               (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              9 as libc::c_int |
                          ((1 as libc::c_int as u32_0 &
                                (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                     1 as libc::c_int) as libc::c_uint) <<
                               5 as libc::c_int |
                               (3 as libc::c_int as u32_0 &
                                    (((0x1 as libc::c_int) <<
                                          5 as libc::c_int) -
                                         1 as libc::c_int) as libc::c_uint) <<
                                   0 as libc::c_int)) &
                         (((0x1 as libc::c_int) << 24 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_61).words.w1 =
                (31 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 4 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    28 as libc::c_int |
                    (31 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        15 as libc::c_int |
                    (7 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        12 as libc::c_int |
                    (7 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        9 as libc::c_int |
                    ((31 as libc::c_int as u32_0 &
                          (((0x1 as libc::c_int) << 4 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         24 as libc::c_int |
                         (1 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             21 as libc::c_int |
                         (3 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             18 as libc::c_int |
                         (31 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             6 as libc::c_int |
                         (7 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             3 as libc::c_int |
                         (7 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             0 as libc::c_int);
            let fresh283 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_62: *mut Gfx = fresh283;
            (*_g_62).words.w0 =
                (0xda as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((::std::mem::size_of::<Mtx>() as
                          libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                          libc::c_uint).wrapping_div(8
                                                                                         as
                                                                                         libc::c_int
                                                                                         as
                                                                                         libc::c_uint)
                         &
                         (((0x1 as libc::c_int) << 5 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (((0 as libc::c_int | 0x2 as libc::c_int) ^
                          0x1 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_62).words.w1 = &mut gMtxClear as *mut Mtx as libc::c_uint;
            svar2 =
                ((*pauseCtx).equipAnimX as libc::c_int / 10 as libc::c_int) as
                    s16;
            let ref mut fresh284 =
                (*(*pauseCtx).cursorVtx.offset(18 as libc::c_int as
                                                   isize)).v.ob[0 as
                                                                    libc::c_int
                                                                    as usize];
            *fresh284 = svar2;
            (*(*pauseCtx).cursorVtx.offset(svar3 as
                                               isize)).v.ob[0 as libc::c_int
                                                                as usize] =
                *fresh284;
            svar2 =
                ((*(*pauseCtx).cursorVtx.offset(svar3 as
                                                    isize)).v.ob[0 as
                                                                     libc::c_int
                                                                     as usize]
                     as libc::c_int +
                     (*gGameInfo).data[(18 as libc::c_int * 6 as libc::c_int *
                                            16 as libc::c_int +
                                            90 as libc::c_int) as usize] as
                         libc::c_int / 10 as libc::c_int) as s16;
            let ref mut fresh285 =
                (*(*pauseCtx).cursorVtx.offset(19 as libc::c_int as
                                                   isize)).v.ob[0 as
                                                                    libc::c_int
                                                                    as usize];
            *fresh285 = svar2;
            (*(*pauseCtx).cursorVtx.offset(17 as libc::c_int as
                                               isize)).v.ob[0 as libc::c_int
                                                                as usize] =
                *fresh285;
            svar2 =
                ((*pauseCtx).equipAnimY as libc::c_int / 10 as libc::c_int) as
                    s16;
            let ref mut fresh286 =
                (*(*pauseCtx).cursorVtx.offset(17 as libc::c_int as
                                                   isize)).v.ob[1 as
                                                                    libc::c_int
                                                                    as usize];
            *fresh286 = svar2;
            (*(*pauseCtx).cursorVtx.offset(svar3 as
                                               isize)).v.ob[1 as libc::c_int
                                                                as usize] =
                *fresh286;
            svar2 =
                ((*(*pauseCtx).cursorVtx.offset(svar3 as
                                                    isize)).v.ob[1 as
                                                                     libc::c_int
                                                                     as usize]
                     as libc::c_int -
                     (*gGameInfo).data[(18 as libc::c_int * 6 as libc::c_int *
                                            16 as libc::c_int +
                                            90 as libc::c_int) as usize] as
                         libc::c_int / 10 as libc::c_int) as s16;
            let ref mut fresh287 =
                (*(*pauseCtx).cursorVtx.offset(19 as libc::c_int as
                                                   isize)).v.ob[1 as
                                                                    libc::c_int
                                                                    as usize];
            *fresh287 = svar2;
            (*(*pauseCtx).cursorVtx.offset(18 as libc::c_int as
                                               isize)).v.ob[1 as libc::c_int
                                                                as usize] =
                *fresh287;
            if ((*pauseCtx).equipTargetItem as libc::c_int) <
                   0xbf as libc::c_int {
                // Normal Equip (icon goes from the inventory slot to the C button when equipping it)
                let fresh288 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_63: *mut Gfx = fresh288;
                (*_g_63).words.w0 =
                    (0xfa as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            8 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                (*_g_63).words.w1 =
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (255 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            16 as libc::c_int |
                        (255 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            8 as libc::c_int |
                        ((*pauseCtx).equipAnimAlpha as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                let fresh289 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_64: *mut Gfx = fresh289;
                (*_g_64).words.w0 =
                    (0x1 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (4 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            12 as libc::c_int |
                        ((0 as libc::c_int + 4 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 7 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            1 as libc::c_int;
                (*_g_64).words.w1 =
                    &mut *(*pauseCtx).cursorVtx.offset(16 as libc::c_int as
                                                           isize) as *mut Vtx
                        as libc::c_uint;
                let fresh290 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_65: *mut Gfx = fresh290;
                (*_g_65).words.w0 =
                    (0xfd as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            21 as libc::c_int |
                        (3 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 2 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            19 as libc::c_int |
                        ((1 as libc::c_int - 1 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 12 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                (*_g_65).words.w1 =
                    gItemIcons[(*pauseCtx).equipTargetItem as usize] as
                        libc::c_uint;
                let fresh291 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_66: *mut Gfx = fresh291;
                (*_g_66).words.w0 =
                    (0xf5 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            21 as libc::c_int |
                        (3 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 2 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            19 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 9 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            9 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 9 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                (*_g_66).words.w1 =
                    (7 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            20 as libc::c_int |
                        ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 2 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            18 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            14 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            10 as libc::c_int |
                        ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 2 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            8 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            4 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                let fresh292 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_67: *mut Gfx = fresh292;
                (*_g_67).words.w0 =
                    (0xe6 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int;
                (*_g_67).words.w1 = 0 as libc::c_int as libc::c_uint;
                let fresh293 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_68: *mut Gfx = fresh293;
                (*_g_68).words.w0 =
                    (0xf3 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 12 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            12 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 12 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                (*_g_68).words.w1 =
                    (7 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        ((if ((32 as libc::c_int * 32 as libc::c_int +
                                   0 as libc::c_int >> 0 as libc::c_int) -
                                  1 as libc::c_int) < 2047 as libc::c_int {
                              (32 as libc::c_int * 32 as libc::c_int +
                                   0 as libc::c_int >> 0 as libc::c_int) -
                                  1 as libc::c_int
                          } else { 2047 as libc::c_int }) as u32_0 &
                             (((0x1 as libc::c_int) << 12 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            12 as libc::c_int |
                        (((((1 as libc::c_int) << 11 as libc::c_int) +
                               (if 1 as libc::c_int >
                                       32 as libc::c_int * 4 as libc::c_int /
                                           8 as libc::c_int {
                                    1 as libc::c_int
                                } else {
                                    (32 as libc::c_int * 4 as libc::c_int) /
                                        8 as libc::c_int
                                }) - 1 as libc::c_int) /
                              (if 1 as libc::c_int >
                                      32 as libc::c_int * 4 as libc::c_int /
                                          8 as libc::c_int {
                                   1 as libc::c_int
                               } else {
                                   (32 as libc::c_int * 4 as libc::c_int) /
                                       8 as libc::c_int
                               })) as u32_0 &
                             (((0x1 as libc::c_int) << 12 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                let fresh294 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_69: *mut Gfx = fresh294;
                (*_g_69).words.w0 =
                    (0xe7 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int;
                (*_g_69).words.w1 = 0 as libc::c_int as libc::c_uint;
                let fresh295 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_70: *mut Gfx = fresh295;
                (*_g_70).words.w0 =
                    (0xf5 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            21 as libc::c_int |
                        (3 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 2 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            19 as libc::c_int |
                        ((32 as libc::c_int * 2 as libc::c_int +
                              7 as libc::c_int >> 3 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 9 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            9 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 9 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                (*_g_70).words.w1 =
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            20 as libc::c_int |
                        ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 2 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            18 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            14 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            10 as libc::c_int |
                        ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 2 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            8 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            4 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                let fresh296 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_71: *mut Gfx = fresh296;
                (*_g_71).words.w0 =
                    (0xf2 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 12 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            12 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 12 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                (*_g_71).words.w1 =
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (((32 as libc::c_int - 1 as libc::c_int) <<
                              2 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 12 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            12 as libc::c_int |
                        (((32 as libc::c_int - 1 as libc::c_int) <<
                              2 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 12 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int
            } else {
                // Magic Arrow Equip Effect
                svar1 =
                    ((*pauseCtx).equipTargetItem as libc::c_int -
                         0xbf as libc::c_int) as s16;
                let fresh297 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_72: *mut Gfx = fresh297;
                (*_g_72).words.w0 =
                    (0xfa as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            8 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                (*_g_72).words.w1 =
                    (magicArrowEffectsR[svar1 as usize] as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (magicArrowEffectsG[svar1 as usize] as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            16 as libc::c_int |
                        (magicArrowEffectsB[svar1 as usize] as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            8 as libc::c_int |
                        ((*pauseCtx).equipAnimAlpha as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                if (*pauseCtx).equipAnimAlpha as libc::c_int >
                       0 as libc::c_int &&
                       ((*pauseCtx).equipAnimAlpha as libc::c_int) <
                           255 as libc::c_int {
                    svar1 =
                        ((*pauseCtx).equipAnimAlpha as libc::c_int /
                             8 as libc::c_int / 2 as libc::c_int) as s16;
                    svar2 =
                        ((*(*pauseCtx).cursorVtx.offset(16 as libc::c_int as
                                                            isize)).v.ob[0 as
                                                                             libc::c_int
                                                                             as
                                                                             usize]
                             as libc::c_int - svar1 as libc::c_int) as s16;
                    let ref mut fresh298 =
                        (*(*pauseCtx).cursorVtx.offset(18 as libc::c_int as
                                                           isize)).v.ob[0 as
                                                                            libc::c_int
                                                                            as
                                                                            usize];
                    *fresh298 = svar2;
                    (*(*pauseCtx).cursorVtx.offset(16 as libc::c_int as
                                                       isize)).v.ob[0 as
                                                                        libc::c_int
                                                                        as
                                                                        usize]
                        = *fresh298;
                    svar2 =
                        ((*(*pauseCtx).cursorVtx.offset(16 as libc::c_int as
                                                            isize)).v.ob[0 as
                                                                             libc::c_int
                                                                             as
                                                                             usize]
                             as libc::c_int +
                             svar1 as libc::c_int * 2 as libc::c_int +
                             32 as libc::c_int) as s16;
                    let ref mut fresh299 =
                        (*(*pauseCtx).cursorVtx.offset(19 as libc::c_int as
                                                           isize)).v.ob[0 as
                                                                            libc::c_int
                                                                            as
                                                                            usize];
                    *fresh299 = svar2;
                    (*(*pauseCtx).cursorVtx.offset(17 as libc::c_int as
                                                       isize)).v.ob[0 as
                                                                        libc::c_int
                                                                        as
                                                                        usize]
                        = *fresh299;
                    svar2 =
                        ((*(*pauseCtx).cursorVtx.offset(16 as libc::c_int as
                                                            isize)).v.ob[1 as
                                                                             libc::c_int
                                                                             as
                                                                             usize]
                             as libc::c_int + svar1 as libc::c_int) as s16;
                    let ref mut fresh300 =
                        (*(*pauseCtx).cursorVtx.offset(17 as libc::c_int as
                                                           isize)).v.ob[1 as
                                                                            libc::c_int
                                                                            as
                                                                            usize];
                    *fresh300 = svar2;
                    (*(*pauseCtx).cursorVtx.offset(16 as libc::c_int as
                                                       isize)).v.ob[1 as
                                                                        libc::c_int
                                                                        as
                                                                        usize]
                        = *fresh300;
                    svar2 =
                        ((*(*pauseCtx).cursorVtx.offset(16 as libc::c_int as
                                                            isize)).v.ob[1 as
                                                                             libc::c_int
                                                                             as
                                                                             usize]
                             as libc::c_int -
                             svar1 as libc::c_int * 2 as libc::c_int -
                             32 as libc::c_int) as s16;
                    let ref mut fresh301 =
                        (*(*pauseCtx).cursorVtx.offset(19 as libc::c_int as
                                                           isize)).v.ob[1 as
                                                                            libc::c_int
                                                                            as
                                                                            usize];
                    *fresh301 = svar2;
                    (*(*pauseCtx).cursorVtx.offset(18 as libc::c_int as
                                                       isize)).v.ob[1 as
                                                                        libc::c_int
                                                                        as
                                                                        usize]
                        = *fresh301
                }
                let fresh302 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_73: *mut Gfx = fresh302;
                (*_g_73).words.w0 =
                    (0x1 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (4 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            12 as libc::c_int |
                        ((0 as libc::c_int + 4 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 7 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            1 as libc::c_int;
                (*_g_73).words.w1 =
                    &mut *(*pauseCtx).cursorVtx.offset(16 as libc::c_int as
                                                           isize) as *mut Vtx
                        as libc::c_uint;
                let fresh303 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_74: *mut Gfx = fresh303;
                (*_g_74).words.w0 =
                    (0xfd as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (3 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            21 as libc::c_int |
                        (2 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 2 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            19 as libc::c_int |
                        ((1 as libc::c_int - 1 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 12 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                (*_g_74).words.w1 =
                    gMagicArrowEquipEffectTex.as_mut_ptr() as libc::c_uint;
                let fresh304 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_75: *mut Gfx = fresh304;
                (*_g_75).words.w0 =
                    (0xf5 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (3 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            21 as libc::c_int |
                        (2 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 2 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            19 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 9 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            9 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 9 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                (*_g_75).words.w1 =
                    (7 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            20 as libc::c_int |
                        ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 2 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            18 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            14 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            10 as libc::c_int |
                        ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 2 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            8 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            4 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                let fresh305 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_76: *mut Gfx = fresh305;
                (*_g_76).words.w0 =
                    (0xe6 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int;
                (*_g_76).words.w1 = 0 as libc::c_int as libc::c_uint;
                let fresh306 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_77: *mut Gfx = fresh306;
                (*_g_77).words.w0 =
                    (0xf3 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 12 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            12 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 12 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                (*_g_77).words.w1 =
                    (7 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        ((if ((32 as libc::c_int * 32 as libc::c_int +
                                   1 as libc::c_int >> 1 as libc::c_int) -
                                  1 as libc::c_int) < 2047 as libc::c_int {
                              (32 as libc::c_int * 32 as libc::c_int +
                                   1 as libc::c_int >> 1 as libc::c_int) -
                                  1 as libc::c_int
                          } else { 2047 as libc::c_int }) as u32_0 &
                             (((0x1 as libc::c_int) << 12 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            12 as libc::c_int |
                        (((((1 as libc::c_int) << 11 as libc::c_int) +
                               (if 1 as libc::c_int >
                                       32 as libc::c_int * 1 as libc::c_int /
                                           8 as libc::c_int {
                                    1 as libc::c_int
                                } else {
                                    (32 as libc::c_int * 1 as libc::c_int) /
                                        8 as libc::c_int
                                }) - 1 as libc::c_int) /
                              (if 1 as libc::c_int >
                                      32 as libc::c_int * 1 as libc::c_int /
                                          8 as libc::c_int {
                                   1 as libc::c_int
                               } else {
                                   (32 as libc::c_int * 1 as libc::c_int) /
                                       8 as libc::c_int
                               })) as u32_0 &
                             (((0x1 as libc::c_int) << 12 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                let fresh307 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_78: *mut Gfx = fresh307;
                (*_g_78).words.w0 =
                    (0xe7 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int;
                (*_g_78).words.w1 = 0 as libc::c_int as libc::c_uint;
                let fresh308 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_79: *mut Gfx = fresh308;
                (*_g_79).words.w0 =
                    (0xf5 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (3 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            21 as libc::c_int |
                        (1 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 2 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            19 as libc::c_int |
                        ((32 as libc::c_int * 1 as libc::c_int +
                              7 as libc::c_int >> 3 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 9 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            9 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 9 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                (*_g_79).words.w1 =
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            20 as libc::c_int |
                        ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 2 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            18 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            14 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            10 as libc::c_int |
                        ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 2 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            8 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            4 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                let fresh309 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_80: *mut Gfx = fresh309;
                (*_g_80).words.w0 =
                    (0xf2 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 12 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            12 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 12 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                (*_g_80).words.w1 =
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (((32 as libc::c_int - 1 as libc::c_int) <<
                              2 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 12 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            12 as libc::c_int |
                        (((32 as libc::c_int - 1 as libc::c_int) <<
                              2 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 12 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int
            }
            let fresh310 = (*__gfxCtx).overlay.p;
            (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
            let mut _g_81: *mut Gfx = fresh310;
            (*_g_81).words.w0 =
                (0x7 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (if 0 as libc::c_int == 0 as libc::c_int {
                         (((0 as libc::c_int * 2 as libc::c_int) as u32_0 &
                               (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              16 as libc::c_int |
                              ((2 as libc::c_int * 2 as libc::c_int) as u32_0
                                   &
                                   (((0x1 as libc::c_int) << 8 as libc::c_int)
                                        - 1 as libc::c_int) as libc::c_uint)
                                  << 8 as libc::c_int) |
                             ((3 as libc::c_int * 2 as libc::c_int) as u32_0 &
                                  (((0x1 as libc::c_int) << 8 as libc::c_int)
                                       - 1 as libc::c_int) as libc::c_uint) <<
                                 0 as libc::c_int
                     } else {
                         (if 0 as libc::c_int == 1 as libc::c_int {
                              (((2 as libc::c_int * 2 as libc::c_int) as u32_0
                                    &
                                    (((0x1 as libc::c_int) <<
                                          8 as libc::c_int) -
                                         1 as libc::c_int) as libc::c_uint) <<
                                   16 as libc::c_int |
                                   ((3 as libc::c_int * 2 as libc::c_int) as
                                        u32_0 &
                                        (((0x1 as libc::c_int) <<
                                              8 as libc::c_int) -
                                             1 as libc::c_int) as
                                            libc::c_uint) << 8 as libc::c_int)
                                  |
                                  ((1 as libc::c_int * 2 as libc::c_int) as
                                       u32_0 &
                                       (((0x1 as libc::c_int) <<
                                             8 as libc::c_int) -
                                            1 as libc::c_int) as libc::c_uint)
                                      << 0 as libc::c_int
                          } else {
                              (if 0 as libc::c_int == 2 as libc::c_int {
                                   (((3 as libc::c_int * 2 as libc::c_int) as
                                         u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                        ((1 as libc::c_int * 2 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int) |
                                       ((0 as libc::c_int * 2 as libc::c_int)
                                            as u32_0 &
                                            (((0x1 as libc::c_int) <<
                                                  8 as libc::c_int) -
                                                 1 as libc::c_int) as
                                                libc::c_uint) <<
                                           0 as libc::c_int
                               } else {
                                   (((1 as libc::c_int * 2 as libc::c_int) as
                                         u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                        ((0 as libc::c_int * 2 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int) |
                                       ((2 as libc::c_int * 2 as libc::c_int)
                                            as u32_0 &
                                            (((0x1 as libc::c_int) <<
                                                  8 as libc::c_int) -
                                                 1 as libc::c_int) as
                                                libc::c_uint) <<
                                           0 as libc::c_int
                               })
                          })
                     });
            (*_g_81).words.w1 =
                if 0 as libc::c_int == 0 as libc::c_int {
                    (((0 as libc::c_int * 2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         16 as libc::c_int |
                         ((3 as libc::c_int * 2 as libc::c_int) as u32_0 &
                              (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             8 as libc::c_int) |
                        ((1 as libc::c_int * 2 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int
                } else if 0 as libc::c_int == 1 as libc::c_int {
                    (((2 as libc::c_int * 2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         16 as libc::c_int |
                         ((1 as libc::c_int * 2 as libc::c_int) as u32_0 &
                              (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             8 as libc::c_int) |
                        ((0 as libc::c_int * 2 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int
                } else if 0 as libc::c_int == 2 as libc::c_int {
                    (((3 as libc::c_int * 2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         16 as libc::c_int |
                         ((0 as libc::c_int * 2 as libc::c_int) as u32_0 &
                              (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             8 as libc::c_int) |
                        ((2 as libc::c_int * 2 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int
                } else {
                    (((1 as libc::c_int * 2 as libc::c_int) as u32_0 &
                          (((0x1 as libc::c_int) << 8 as libc::c_int) -
                               1 as libc::c_int) as libc::c_uint) <<
                         16 as libc::c_int |
                         ((2 as libc::c_int * 2 as libc::c_int) as u32_0 &
                              (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             8 as libc::c_int) |
                        ((3 as libc::c_int * 2 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int
                }
        }
        func_80094520((*globalCtx).state.gfxCtx);
        if (*globalCtx).pauseCtx.state as libc::c_int == 0 as libc::c_int &&
               (*globalCtx).pauseCtx.debugState as libc::c_int ==
                   0 as libc::c_int {
            if gSaveContext.minigameState as libc::c_int != 1 as libc::c_int {
                // Carrots rendering if the action corresponds to riding a horse
                if (*interfaceCtx).unk_1EE as libc::c_int == 8 as libc::c_int
                   {
                    // Load Carrot Icon
                    let fresh311 = (*__gfxCtx).overlay.p;
                    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                    let mut _g_82: *mut Gfx = fresh311;
                    (*_g_82).words.w0 =
                        (0xfd as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                21 as libc::c_int |
                            (3 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                19 as libc::c_int |
                            ((1 as libc::c_int - 1 as libc::c_int) as u32_0 &
                                 (((0x1 as libc::c_int) << 12 as libc::c_int)
                                      - 1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int;
                    (*_g_82).words.w1 =
                        gCarrotIconTex.as_mut_ptr() as libc::c_uint;
                    let fresh312 = (*__gfxCtx).overlay.p;
                    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                    let mut _g_83: *mut Gfx = fresh312;
                    (*_g_83).words.w0 =
                        (0xf5 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                21 as libc::c_int |
                            (3 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                19 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                9 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int;
                    (*_g_83).words.w1 =
                        (7 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                20 as libc::c_int |
                            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                18 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                14 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                10 as libc::c_int |
                            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                8 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                4 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int;
                    let fresh313 = (*__gfxCtx).overlay.p;
                    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                    let mut _g_84: *mut Gfx = fresh313;
                    (*_g_84).words.w0 =
                        (0xe6 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int;
                    (*_g_84).words.w1 = 0 as libc::c_int as libc::c_uint;
                    let fresh314 = (*__gfxCtx).overlay.p;
                    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                    let mut _g_85: *mut Gfx = fresh314;
                    (*_g_85).words.w0 =
                        (0xf3 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 12 as libc::c_int)
                                      - 1 as libc::c_int) as libc::c_uint) <<
                                12 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 12 as libc::c_int)
                                      - 1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int;
                    (*_g_85).words.w1 =
                        (7 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            ((if ((16 as libc::c_int * 16 as libc::c_int +
                                       0 as libc::c_int >> 0 as libc::c_int) -
                                      1 as libc::c_int) < 2047 as libc::c_int
                                 {
                                  (16 as libc::c_int * 16 as libc::c_int +
                                       0 as libc::c_int >> 0 as libc::c_int) -
                                      1 as libc::c_int
                              } else { 2047 as libc::c_int }) as u32_0 &
                                 (((0x1 as libc::c_int) << 12 as libc::c_int)
                                      - 1 as libc::c_int) as libc::c_uint) <<
                                12 as libc::c_int |
                            (((((1 as libc::c_int) << 11 as libc::c_int) +
                                   (if 1 as libc::c_int >
                                           16 as libc::c_int *
                                               4 as libc::c_int /
                                               8 as libc::c_int {
                                        1 as libc::c_int
                                    } else {
                                        (16 as libc::c_int * 4 as libc::c_int)
                                            / 8 as libc::c_int
                                    }) - 1 as libc::c_int) /
                                  (if 1 as libc::c_int >
                                          16 as libc::c_int * 4 as libc::c_int
                                              / 8 as libc::c_int {
                                       1 as libc::c_int
                                   } else {
                                       (16 as libc::c_int * 4 as libc::c_int)
                                           / 8 as libc::c_int
                                   })) as u32_0 &
                                 (((0x1 as libc::c_int) << 12 as libc::c_int)
                                      - 1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int;
                    let fresh315 = (*__gfxCtx).overlay.p;
                    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                    let mut _g_86: *mut Gfx = fresh315;
                    (*_g_86).words.w0 =
                        (0xe7 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int;
                    (*_g_86).words.w1 = 0 as libc::c_int as libc::c_uint;
                    let fresh316 = (*__gfxCtx).overlay.p;
                    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                    let mut _g_87: *mut Gfx = fresh316;
                    (*_g_87).words.w0 =
                        (0xf5 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                21 as libc::c_int |
                            (3 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                19 as libc::c_int |
                            ((16 as libc::c_int * 2 as libc::c_int +
                                  7 as libc::c_int >> 3 as libc::c_int) as
                                 u32_0 &
                                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                9 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int;
                    (*_g_87).words.w1 =
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                20 as libc::c_int |
                            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                18 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                14 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                10 as libc::c_int |
                            ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                8 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                4 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int;
                    let fresh317 = (*__gfxCtx).overlay.p;
                    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                    let mut _g_88: *mut Gfx = fresh317;
                    (*_g_88).words.w0 =
                        (0xf2 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 12 as libc::c_int)
                                      - 1 as libc::c_int) as libc::c_uint) <<
                                12 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 12 as libc::c_int)
                                      - 1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int;
                    (*_g_88).words.w1 =
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (((16 as libc::c_int - 1 as libc::c_int) <<
                                  2 as libc::c_int) as u32_0 &
                                 (((0x1 as libc::c_int) << 12 as libc::c_int)
                                      - 1 as libc::c_int) as libc::c_uint) <<
                                12 as libc::c_int |
                            (((16 as libc::c_int - 1 as libc::c_int) <<
                                  2 as libc::c_int) as u32_0 &
                                 (((0x1 as libc::c_int) << 12 as libc::c_int)
                                      - 1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int;
                    // Draw 6 carrots
                    svar1 = 1 as libc::c_int as s16;
                    svar5 =
                        (*gGameInfo).data[(10 as libc::c_int *
                                               6 as libc::c_int *
                                               16 as libc::c_int +
                                               14 as libc::c_int) as usize];
                    while (svar1 as libc::c_int) < 7 as libc::c_int {
                        // Carrot Color (based on availability)
                        if (*interfaceCtx).numHorseBoosts as libc::c_int ==
                               0 as libc::c_int ||
                               ((*interfaceCtx).numHorseBoosts as libc::c_int)
                                   < svar1 as libc::c_int {
                            let fresh318 = (*__gfxCtx).overlay.p;
                            (*__gfxCtx).overlay.p =
                                (*__gfxCtx).overlay.p.offset(1);
                            let mut _g_89: *mut Gfx = fresh318;
                            (*_g_89).words.w0 =
                                (0xfa as libc::c_int as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 24 as libc::c_int |
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) << 8 as libc::c_int
                                    |
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        0 as libc::c_int;
                            (*_g_89).words.w1 =
                                (0 as libc::c_int as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 24 as libc::c_int |
                                    (150 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                    (255 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) << 8 as libc::c_int
                                    |
                                    ((*interfaceCtx).aAlpha as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) << 0 as libc::c_int
                        } else {
                            let fresh319 = (*__gfxCtx).overlay.p;
                            (*__gfxCtx).overlay.p =
                                (*__gfxCtx).overlay.p.offset(1);
                            let mut _g_90: *mut Gfx = fresh319;
                            (*_g_90).words.w0 =
                                (0xfa as libc::c_int as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 24 as libc::c_int |
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) << 8 as libc::c_int
                                    |
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        0 as libc::c_int;
                            (*_g_90).words.w1 =
                                (255 as libc::c_int as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 24 as libc::c_int |
                                    (255 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                    (255 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) << 8 as libc::c_int
                                    |
                                    ((*interfaceCtx).aAlpha as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) << 0 as libc::c_int
                        }
                        let fresh320 = (*__gfxCtx).overlay.p;
                        (*__gfxCtx).overlay.p =
                            (*__gfxCtx).overlay.p.offset(1);
                        let mut _g_91: *mut Gfx = fresh320;
                        (*_g_91).words.w0 =
                            (0xe4 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                24 as libc::c_int |
                                (((svar5 as libc::c_int + 16 as libc::c_int)
                                      << 2 as libc::c_int) as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           12 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 12 as libc::c_int |
                                ((((*gGameInfo).data[(10 as libc::c_int *
                                                          6 as libc::c_int *
                                                          16 as libc::c_int +
                                                          15 as libc::c_int)
                                                         as usize] as
                                       libc::c_int + 16 as libc::c_int) <<
                                      2 as libc::c_int) as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           12 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 0 as libc::c_int;
                        (*_g_91).words.w1 =
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                24 as libc::c_int |
                                (((svar5 as libc::c_int) << 2 as libc::c_int)
                                     as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           12 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 12 as libc::c_int |
                                ((((*gGameInfo).data[(10 as libc::c_int *
                                                          6 as libc::c_int *
                                                          16 as libc::c_int +
                                                          15 as libc::c_int)
                                                         as usize] as
                                       libc::c_int) << 2 as libc::c_int) as
                                     u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           12 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 0 as libc::c_int;
                        let fresh321 = (*__gfxCtx).overlay.p;
                        (*__gfxCtx).overlay.p =
                            (*__gfxCtx).overlay.p.offset(1);
                        let mut _g_92: *mut Gfx = fresh321;
                        (*_g_92).words.w0 =
                            (0xe1 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                24 as libc::c_int;
                        (*_g_92).words.w1 =
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 16 as libc::c_int)
                                      - 1 as libc::c_int) as libc::c_uint) <<
                                16 as libc::c_int |
                                (0 as libc::c_int as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           16 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 0 as libc::c_int;
                        let fresh322 = (*__gfxCtx).overlay.p;
                        (*__gfxCtx).overlay.p =
                            (*__gfxCtx).overlay.p.offset(1);
                        let mut _g_93: *mut Gfx = fresh322;
                        (*_g_93).words.w0 =
                            (0xf1 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                24 as libc::c_int;
                        (*_g_93).words.w1 =
                            (((1 as libc::c_int) << 10 as libc::c_int) as
                                 u32_0 &
                                 (((0x1 as libc::c_int) << 16 as libc::c_int)
                                      - 1 as libc::c_int) as libc::c_uint) <<
                                16 as libc::c_int |
                                (((1 as libc::c_int) << 10 as libc::c_int) as
                                     u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           16 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 0 as libc::c_int;
                        svar1 += 1;
                        svar5 =
                            (svar5 as libc::c_int + 16 as libc::c_int) as s16
                    }
                }
            } else {
                // Score for the Horseback Archery
                svar5 =
                    (*gGameInfo).data[(18 as libc::c_int * 6 as libc::c_int *
                                           16 as libc::c_int +
                                           32 as libc::c_int) as usize];
                let fresh323 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_94: *mut Gfx = fresh323;
                (*_g_94).words.w0 =
                    (0xfa as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            8 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                (*_g_94).words.w1 =
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (255 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            16 as libc::c_int |
                        (255 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            8 as libc::c_int |
                        ((*interfaceCtx).bAlpha as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                // Target Icon
                let fresh324 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_95: *mut Gfx = fresh324;
                (*_g_95).words.w0 =
                    (0xfd as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            21 as libc::c_int |
                        (2 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 2 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            19 as libc::c_int |
                        ((1 as libc::c_int - 1 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 12 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                (*_g_95).words.w1 =
                    gArcheryScoreIconTex.as_mut_ptr() as libc::c_uint;
                let fresh325 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_96: *mut Gfx = fresh325;
                (*_g_96).words.w0 =
                    (0xf5 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            21 as libc::c_int |
                        (2 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 2 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            19 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 9 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            9 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 9 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                (*_g_96).words.w1 =
                    (7 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            20 as libc::c_int |
                        ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 2 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            18 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            14 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            10 as libc::c_int |
                        ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 2 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            8 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            4 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                let fresh326 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_97: *mut Gfx = fresh326;
                (*_g_97).words.w0 =
                    (0xe6 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int;
                (*_g_97).words.w1 = 0 as libc::c_int as libc::c_uint;
                let fresh327 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_98: *mut Gfx = fresh327;
                (*_g_98).words.w0 =
                    (0xf3 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 12 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            12 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 12 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                (*_g_98).words.w1 =
                    (7 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        ((if ((24 as libc::c_int * 16 as libc::c_int +
                                   0 as libc::c_int >> 0 as libc::c_int) -
                                  1 as libc::c_int) < 2047 as libc::c_int {
                              (24 as libc::c_int * 16 as libc::c_int +
                                   0 as libc::c_int >> 0 as libc::c_int) -
                                  1 as libc::c_int
                          } else { 2047 as libc::c_int }) as u32_0 &
                             (((0x1 as libc::c_int) << 12 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            12 as libc::c_int |
                        (((((1 as libc::c_int) << 11 as libc::c_int) +
                               (if 1 as libc::c_int >
                                       24 as libc::c_int * 2 as libc::c_int /
                                           8 as libc::c_int {
                                    1 as libc::c_int
                                } else {
                                    (24 as libc::c_int * 2 as libc::c_int) /
                                        8 as libc::c_int
                                }) - 1 as libc::c_int) /
                              (if 1 as libc::c_int >
                                      24 as libc::c_int * 2 as libc::c_int /
                                          8 as libc::c_int {
                                   1 as libc::c_int
                               } else {
                                   (24 as libc::c_int * 2 as libc::c_int) /
                                       8 as libc::c_int
                               })) as u32_0 &
                             (((0x1 as libc::c_int) << 12 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                let fresh328 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_99: *mut Gfx = fresh328;
                (*_g_99).words.w0 =
                    (0xe7 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int;
                (*_g_99).words.w1 = 0 as libc::c_int as libc::c_uint;
                let fresh329 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_100: *mut Gfx = fresh329;
                (*_g_100).words.w0 =
                    (0xf5 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            21 as libc::c_int |
                        (2 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 2 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            19 as libc::c_int |
                        ((24 as libc::c_int * 2 as libc::c_int +
                              7 as libc::c_int >> 3 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 9 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            9 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 9 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                (*_g_100).words.w1 =
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            20 as libc::c_int |
                        ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 2 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            18 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            14 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            10 as libc::c_int |
                        ((0 as libc::c_int | 0 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 2 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            8 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            4 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                let fresh330 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_101: *mut Gfx = fresh330;
                (*_g_101).words.w0 =
                    (0xf2 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 12 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            12 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 12 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                (*_g_101).words.w1 =
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (((24 as libc::c_int - 1 as libc::c_int) <<
                              2 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 12 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            12 as libc::c_int |
                        (((16 as libc::c_int - 1 as libc::c_int) <<
                              2 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 12 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                let fresh331 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_102: *mut Gfx = fresh331;
                (*_g_102).words.w0 =
                    (0xe4 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (((svar5 as libc::c_int + 52 as libc::c_int) <<
                              2 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 12 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            12 as libc::c_int |
                        ((((*gGameInfo).data[(10 as libc::c_int *
                                                  6 as libc::c_int *
                                                  16 as libc::c_int +
                                                  15 as libc::c_int) as usize]
                               as libc::c_int + 16 as libc::c_int) <<
                              2 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 12 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                (*_g_102).words.w1 =
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 3 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (((svar5 as libc::c_int + 28 as libc::c_int) <<
                              2 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 12 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            12 as libc::c_int |
                        ((((*gGameInfo).data[(10 as libc::c_int *
                                                  6 as libc::c_int *
                                                  16 as libc::c_int +
                                                  15 as libc::c_int) as usize]
                               as libc::c_int) << 2 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 12 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                let fresh332 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_103: *mut Gfx = fresh332;
                (*_g_103).words.w0 =
                    (0xe1 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int;
                (*_g_103).words.w1 =
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 16 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                let fresh333 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_104: *mut Gfx = fresh333;
                (*_g_104).words.w0 =
                    (0xf1 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int;
                (*_g_104).words.w1 =
                    (((1 as libc::c_int) << 10 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                        (((1 as libc::c_int) << 10 as libc::c_int) as u32_0 &
                             (((0x1 as libc::c_int) << 16 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                // Score Counter
                let fresh334 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_105: *mut Gfx = fresh334;
                (*_g_105).words.w0 =
                    (0xe7 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int;
                (*_g_105).words.w1 = 0 as libc::c_int as libc::c_uint;
                let fresh335 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_106: *mut Gfx = fresh335;
                (*_g_106).words.w0 =
                    (0xfc as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (((31 as libc::c_int as u32_0 &
                               (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              20 as libc::c_int |
                              (31 as libc::c_int as u32_0 &
                                   (((0x1 as libc::c_int) << 5 as libc::c_int)
                                        - 1 as libc::c_int) as libc::c_uint)
                                  << 15 as libc::c_int |
                              (1 as libc::c_int as u32_0 &
                                   (((0x1 as libc::c_int) << 3 as libc::c_int)
                                        - 1 as libc::c_int) as libc::c_uint)
                                  << 12 as libc::c_int |
                              (3 as libc::c_int as u32_0 &
                                   (((0x1 as libc::c_int) << 3 as libc::c_int)
                                        - 1 as libc::c_int) as libc::c_uint)
                                  << 9 as libc::c_int |
                              ((31 as libc::c_int as u32_0 &
                                    (((0x1 as libc::c_int) <<
                                          4 as libc::c_int) -
                                         1 as libc::c_int) as libc::c_uint) <<
                                   5 as libc::c_int |
                                   (31 as libc::c_int as u32_0 &
                                        (((0x1 as libc::c_int) <<
                                              5 as libc::c_int) -
                                             1 as libc::c_int) as
                                            libc::c_uint) <<
                                       0 as libc::c_int)) &
                             (((0x1 as libc::c_int) << 24 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                (*_g_106).words.w1 =
                    (31 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        28 as libc::c_int |
                        (3 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            15 as libc::c_int |
                        (7 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            12 as libc::c_int |
                        (7 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            9 as libc::c_int |
                        ((31 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             24 as libc::c_int |
                             (1 as libc::c_int as u32_0 &
                                  (((0x1 as libc::c_int) << 3 as libc::c_int)
                                       - 1 as libc::c_int) as libc::c_uint) <<
                                 21 as libc::c_int |
                             (3 as libc::c_int as u32_0 &
                                  (((0x1 as libc::c_int) << 3 as libc::c_int)
                                       - 1 as libc::c_int) as libc::c_uint) <<
                                 18 as libc::c_int |
                             (3 as libc::c_int as u32_0 &
                                  (((0x1 as libc::c_int) << 3 as libc::c_int)
                                       - 1 as libc::c_int) as libc::c_uint) <<
                                 6 as libc::c_int |
                             (7 as libc::c_int as u32_0 &
                                  (((0x1 as libc::c_int) << 3 as libc::c_int)
                                       - 1 as libc::c_int) as libc::c_uint) <<
                                 3 as libc::c_int |
                             (7 as libc::c_int as u32_0 &
                                  (((0x1 as libc::c_int) << 3 as libc::c_int)
                                       - 1 as libc::c_int) as libc::c_uint) <<
                                 0 as libc::c_int);
                svar5 =
                    ((*gGameInfo).data[(18 as libc::c_int * 6 as libc::c_int *
                                            16 as libc::c_int +
                                            32 as libc::c_int) as usize] as
                         libc::c_int + 6 as libc::c_int * 9 as libc::c_int) as
                        s16;
                svar2 = 0 as libc::c_int as s16;
                svar1 = svar2;
                while (svar1 as libc::c_int) < 4 as libc::c_int {
                    if sHBAScoreDigits[svar1 as usize] as libc::c_int !=
                           0 as libc::c_int ||
                           svar2 as libc::c_int != 0 as libc::c_int ||
                           svar1 as libc::c_int >= 3 as libc::c_int {
                        (*__gfxCtx).overlay.p =
                            Gfx_TextureI8((*__gfxCtx).overlay.p,
                                          (gCounterDigit0Tex.as_mut_ptr() as
                                               *mut u8_0).offset((8 as
                                                                      libc::c_int
                                                                      *
                                                                      16 as
                                                                          libc::c_int
                                                                      *
                                                                      sHBAScoreDigits[svar1
                                                                                          as
                                                                                          usize]
                                                                          as
                                                                          libc::c_int)
                                                                     as isize)
                                              as *mut libc::c_void,
                                          8 as libc::c_int as s16,
                                          16 as libc::c_int as s16, svar5,
                                          ((*gGameInfo).data[(10 as
                                                                  libc::c_int
                                                                  *
                                                                  6 as
                                                                      libc::c_int
                                                                  *
                                                                  16 as
                                                                      libc::c_int
                                                                  +
                                                                  15 as
                                                                      libc::c_int)
                                                                 as usize] as
                                               libc::c_int - 2 as libc::c_int)
                                              as s16,
                                          digitWidth[0 as libc::c_int as
                                                         usize],
                                          (*gGameInfo).data[(20 as libc::c_int
                                                                 *
                                                                 6 as
                                                                     libc::c_int
                                                                 *
                                                                 16 as
                                                                     libc::c_int
                                                                 +
                                                                 42 as
                                                                     libc::c_int)
                                                                as usize],
                                          (((*gGameInfo).data[(20 as
                                                                   libc::c_int
                                                                   *
                                                                   6 as
                                                                       libc::c_int
                                                                   *
                                                                   16 as
                                                                       libc::c_int
                                                                   +
                                                                   43 as
                                                                       libc::c_int)
                                                                  as usize] as
                                                libc::c_int) <<
                                               1 as libc::c_int) as u16_0,
                                          (((*gGameInfo).data[(20 as
                                                                   libc::c_int
                                                                   *
                                                                   6 as
                                                                       libc::c_int
                                                                   *
                                                                   16 as
                                                                       libc::c_int
                                                                   +
                                                                   43 as
                                                                       libc::c_int)
                                                                  as usize] as
                                                libc::c_int) <<
                                               1 as libc::c_int) as u16_0);
                        svar5 =
                            (svar5 as libc::c_int + 9 as libc::c_int) as s16;
                        svar2 += 1
                    }
                    svar1 += 1
                }
                let fresh336 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_107: *mut Gfx = fresh336;
                (*_g_107).words.w0 =
                    (0xe7 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int;
                (*_g_107).words.w1 = 0 as libc::c_int as libc::c_uint;
                let fresh337 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_108: *mut Gfx = fresh337;
                (*_g_108).words.w0 =
                    (0xfc as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (((1 as libc::c_int as u32_0 &
                               (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              20 as libc::c_int |
                              (3 as libc::c_int as u32_0 &
                                   (((0x1 as libc::c_int) << 5 as libc::c_int)
                                        - 1 as libc::c_int) as libc::c_uint)
                                  << 15 as libc::c_int |
                              (1 as libc::c_int as u32_0 &
                                   (((0x1 as libc::c_int) << 3 as libc::c_int)
                                        - 1 as libc::c_int) as libc::c_uint)
                                  << 12 as libc::c_int |
                              (3 as libc::c_int as u32_0 &
                                   (((0x1 as libc::c_int) << 3 as libc::c_int)
                                        - 1 as libc::c_int) as libc::c_uint)
                                  << 9 as libc::c_int |
                              ((1 as libc::c_int as u32_0 &
                                    (((0x1 as libc::c_int) <<
                                          4 as libc::c_int) -
                                         1 as libc::c_int) as libc::c_uint) <<
                                   5 as libc::c_int |
                                   (3 as libc::c_int as u32_0 &
                                        (((0x1 as libc::c_int) <<
                                              5 as libc::c_int) -
                                             1 as libc::c_int) as
                                            libc::c_uint) <<
                                       0 as libc::c_int)) &
                             (((0x1 as libc::c_int) << 24 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                (*_g_108).words.w1 =
                    (31 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        28 as libc::c_int |
                        (31 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            15 as libc::c_int |
                        (7 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            12 as libc::c_int |
                        (7 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            9 as libc::c_int |
                        ((31 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             24 as libc::c_int |
                             (1 as libc::c_int as u32_0 &
                                  (((0x1 as libc::c_int) << 3 as libc::c_int)
                                       - 1 as libc::c_int) as libc::c_uint) <<
                                 21 as libc::c_int |
                             (3 as libc::c_int as u32_0 &
                                  (((0x1 as libc::c_int) << 3 as libc::c_int)
                                       - 1 as libc::c_int) as libc::c_uint) <<
                                 18 as libc::c_int |
                             (31 as libc::c_int as u32_0 &
                                  (((0x1 as libc::c_int) << 3 as libc::c_int)
                                       - 1 as libc::c_int) as libc::c_uint) <<
                                 6 as libc::c_int |
                             (7 as libc::c_int as u32_0 &
                                  (((0x1 as libc::c_int) << 3 as libc::c_int)
                                       - 1 as libc::c_int) as libc::c_uint) <<
                                 3 as libc::c_int |
                             (7 as libc::c_int as u32_0 &
                                  (((0x1 as libc::c_int) << 3 as libc::c_int)
                                       - 1 as libc::c_int) as libc::c_uint) <<
                                 0 as libc::c_int)
            }
        }
        if gSaveContext.timer2State as libc::c_int == 5 as libc::c_int &&
               Message_GetState(&mut (*globalCtx).msgCtx) as libc::c_int ==
                   TEXT_STATE_EVENT as libc::c_int {
            // Trade quest timer reached 0
            D_8015FFE6 = 40 as libc::c_int as s16;
            gSaveContext.cutsceneIndex = 0 as libc::c_int;
            (*globalCtx).sceneLoadFlag = 0x14 as libc::c_int as s8;
            (*globalCtx).fadeTransition = 3 as libc::c_int as u8_0;
            gSaveContext.timer2State = 0 as libc::c_int as s16;
            if gSaveContext.equips.buttonItems[0 as libc::c_int as usize] as
                   libc::c_int != ITEM_SWORD_KOKIRI as libc::c_int &&
                   gSaveContext.equips.buttonItems[0 as libc::c_int as usize]
                       as libc::c_int != ITEM_SWORD_MASTER as libc::c_int &&
                   gSaveContext.equips.buttonItems[0 as libc::c_int as usize]
                       as libc::c_int != ITEM_SWORD_BGS as libc::c_int &&
                   gSaveContext.equips.buttonItems[0 as libc::c_int as usize]
                       as libc::c_int != ITEM_SWORD_KNIFE as libc::c_int {
                if gSaveContext.buttonStatus[0 as libc::c_int as usize] as
                       libc::c_int != BTN_ENABLED as libc::c_int {
                    gSaveContext.equips.buttonItems[0 as libc::c_int as usize]
                        = gSaveContext.buttonStatus[0 as libc::c_int as usize]
                } else {
                    gSaveContext.equips.buttonItems[0 as libc::c_int as usize]
                        = ITEM_NONE as libc::c_int as u8_0
                }
            }
            // Revert any spoiling trade quest items
            svar1 =
                0 as libc::c_int as s16; // digit 10 is used as ':' (colon)
            while (svar1 as libc::c_int) <
                      (::std::mem::size_of::<[s16; 3]>() as
                           libc::c_ulong).wrapping_div(::std::mem::size_of::<s16>()
                                                           as libc::c_ulong)
                          as s32 {
                if gSaveContext.inventory.items[gItemSlots[ITEM_POCKET_EGG as
                                                               libc::c_int as
                                                               usize] as
                                                    usize] as libc::c_int ==
                       gSpoilingItems[svar1 as usize] as libc::c_int {
                    gSaveContext.eventInf[0 as libc::c_int as usize] =
                        (gSaveContext.eventInf[0 as libc::c_int as usize] as
                             libc::c_int & 0x7f80 as libc::c_int) as u16_0;
                    osSyncPrintf(b"EVENT_INF=%x\n\x00" as *const u8 as
                                     *const libc::c_char,
                                 gSaveContext.eventInf[0 as libc::c_int as
                                                           usize] as
                                     libc::c_int);
                    (*globalCtx).nextEntranceIndex =
                        spoilingItemEntrances[svar1 as usize];
                    gSaveContext.inventory.items[gItemSlots[gSpoilingItemReverts[svar1
                                                                                     as
                                                                                     usize]
                                                                as usize] as
                                                     usize] =
                        gSpoilingItemReverts[svar1 as usize] as u8_0;
                    svar2 = 1 as libc::c_int as s16;
                    while (svar2 as libc::c_int) < 4 as libc::c_int {
                        if gSaveContext.equips.buttonItems[svar2 as usize] as
                               libc::c_int ==
                               gSpoilingItems[svar1 as usize] as libc::c_int {
                            gSaveContext.equips.buttonItems[svar2 as usize] =
                                gSpoilingItemReverts[svar1 as usize] as u8_0;
                            Interface_LoadItemIcon1(globalCtx,
                                                    svar2 as u16_0);
                        }
                        svar2 += 1
                    }
                }
                svar1 += 1
            }
        }
        if (*globalCtx).pauseCtx.state as libc::c_int == 0 as libc::c_int &&
               (*globalCtx).pauseCtx.debugState as libc::c_int ==
                   0 as libc::c_int &&
               (*globalCtx).gameOverCtx.state as libc::c_int ==
                   GAMEOVER_INACTIVE as libc::c_int &&
               (*msgCtx).msgMode as libc::c_int == MSGMODE_NONE as libc::c_int
               &&
               (*player).stateFlags2 &
                   0x1000000 as libc::c_int as libc::c_uint == 0 &&
               (*globalCtx).sceneLoadFlag as libc::c_int == 0 as libc::c_int
               &&
               (*globalCtx).transitionMode as libc::c_int == 0 as libc::c_int
               && Gameplay_InCsMode(globalCtx) == 0 &&
               gSaveContext.minigameState as libc::c_int != 1 as libc::c_int
               &&
               (*globalCtx).shootingGalleryStatus as libc::c_int <=
                   1 as libc::c_int &&
               !((*globalCtx).sceneNum as libc::c_int ==
                     SCENE_BOWLING as libc::c_int &&
                     Flags_GetSwitch(globalCtx, 0x38 as libc::c_int) != 0) {
            svar6 = 0 as libc::c_int as s16;
            let mut current_block_966: u64;
            match gSaveContext.timer1State as libc::c_int {
                1 => {
                    D_8015FFE2 = 20 as libc::c_int as s16;
                    D_8015FFE0 = 20 as libc::c_int as s16;
                    gSaveContext.timer1Value =
                        (gSaveContext.health as libc::c_int >>
                             1 as libc::c_int) as s16;
                    gSaveContext.timer1State = 2 as libc::c_int as s16;
                    current_block_966 = 12627493295989912296;
                }
                2 => {
                    D_8015FFE2 -= 1;
                    if D_8015FFE2 as libc::c_int == 0 as libc::c_int {
                        D_8015FFE2 = 20 as libc::c_int as s16;
                        gSaveContext.timer1State = 3 as libc::c_int as s16
                    }
                    current_block_966 = 12627493295989912296;
                }
                5 | 11 => {
                    D_8015FFE2 = 20 as libc::c_int as s16;
                    D_8015FFE0 = 20 as libc::c_int as s16;
                    if gSaveContext.timer1State as libc::c_int ==
                           5 as libc::c_int {
                        gSaveContext.timer1State = 6 as libc::c_int as s16
                    } else {
                        gSaveContext.timer1State = 12 as libc::c_int as s16
                    }
                    current_block_966 = 12627493295989912296;
                }
                6 | 12 => {
                    D_8015FFE2 -= 1;
                    if D_8015FFE2 as libc::c_int == 0 as libc::c_int {
                        D_8015FFE2 = 20 as libc::c_int as s16;
                        if gSaveContext.timer1State as libc::c_int ==
                               6 as libc::c_int {
                            gSaveContext.timer1State = 7 as libc::c_int as s16
                        } else {
                            gSaveContext.timer1State =
                                13 as libc::c_int as s16
                        }
                    }
                    current_block_966 = 12627493295989912296;
                }
                3 | 7 => {
                    svar1 =
                        ((gSaveContext.timerX[0 as libc::c_int as usize] as
                              libc::c_int - 26 as libc::c_int) /
                             D_8015FFE2 as libc::c_int) as s16;
                    gSaveContext.timerX[0 as libc::c_int as usize] =
                        (gSaveContext.timerX[0 as libc::c_int as usize] as
                             libc::c_int - svar1 as libc::c_int) as s16;
                    if gSaveContext.healthCapacity as libc::c_int >
                           0xa0 as libc::c_int {
                        svar1 =
                            ((gSaveContext.timerY[0 as libc::c_int as usize]
                                  as libc::c_int - 54 as libc::c_int) /
                                 D_8015FFE2 as libc::c_int) as s16
                    } else {
                        svar1 =
                            ((gSaveContext.timerY[0 as libc::c_int as usize]
                                  as libc::c_int - 46 as libc::c_int) /
                                 D_8015FFE2 as libc::c_int) as s16
                    }
                    gSaveContext.timerY[0 as libc::c_int as usize] =
                        (gSaveContext.timerY[0 as libc::c_int as usize] as
                             libc::c_int - svar1 as libc::c_int) as s16;
                    D_8015FFE2 -= 1;
                    if D_8015FFE2 as libc::c_int == 0 as libc::c_int {
                        D_8015FFE2 = 20 as libc::c_int as s16;
                        gSaveContext.timerX[0 as libc::c_int as usize] =
                            26 as libc::c_int as s16;
                        if gSaveContext.healthCapacity as libc::c_int >
                               0xa0 as libc::c_int {
                            gSaveContext.timerY[0 as libc::c_int as usize] =
                                54 as libc::c_int as s16
                        } else {
                            gSaveContext.timerY[0 as libc::c_int as usize] =
                                46 as libc::c_int as s16
                        }
                        if gSaveContext.timer1State as libc::c_int ==
                               3 as libc::c_int {
                            gSaveContext.timer1State = 4 as libc::c_int as s16
                        } else {
                            gSaveContext.timer1State = 8 as libc::c_int as s16
                        }
                    }
                    current_block_966 = 16151697837493776533;
                }
                4 | 8 => { current_block_966 = 16151697837493776533; }
                13 => {
                    svar1 =
                        ((gSaveContext.timerX[0 as libc::c_int as usize] as
                              libc::c_int - 26 as libc::c_int) /
                             D_8015FFE2 as libc::c_int) as s16;
                    gSaveContext.timerX[0 as libc::c_int as usize] =
                        (gSaveContext.timerX[0 as libc::c_int as usize] as
                             libc::c_int - svar1 as libc::c_int) as s16;
                    if gSaveContext.healthCapacity as libc::c_int >
                           0xa0 as libc::c_int {
                        svar1 =
                            ((gSaveContext.timerY[0 as libc::c_int as usize]
                                  as libc::c_int - 54 as libc::c_int) /
                                 D_8015FFE2 as libc::c_int) as s16
                    } else {
                        svar1 =
                            ((gSaveContext.timerY[0 as libc::c_int as usize]
                                  as libc::c_int - 46 as libc::c_int) /
                                 D_8015FFE2 as libc::c_int) as s16
                    }
                    gSaveContext.timerY[0 as libc::c_int as usize] =
                        (gSaveContext.timerY[0 as libc::c_int as usize] as
                             libc::c_int - svar1 as libc::c_int) as s16;
                    D_8015FFE2 -= 1;
                    if D_8015FFE2 as libc::c_int == 0 as libc::c_int {
                        D_8015FFE2 = 20 as libc::c_int as s16;
                        gSaveContext.timerX[0 as libc::c_int as usize] =
                            26 as libc::c_int as s16;
                        if gSaveContext.healthCapacity as libc::c_int >
                               0xa0 as libc::c_int {
                            gSaveContext.timerY[0 as libc::c_int as usize] =
                                54 as libc::c_int as s16
                        } else {
                            gSaveContext.timerY[0 as libc::c_int as usize] =
                                46 as libc::c_int as s16
                        }
                        gSaveContext.timer1State = 14 as libc::c_int as s16
                    }
                    current_block_966 = 8427384903308627819;
                }
                14 => { current_block_966 = 8427384903308627819; }
                10 => {
                    if gSaveContext.timer2State as libc::c_int !=
                           0 as libc::c_int {
                        D_8015FFE6 = 20 as libc::c_int as s16;
                        D_8015FFE4 = 20 as libc::c_int as s16;
                        gSaveContext.timerX[1 as libc::c_int as usize] =
                            140 as libc::c_int as s16;
                        gSaveContext.timerY[1 as libc::c_int as usize] =
                            80 as libc::c_int as s16;
                        if (gSaveContext.timer2State as libc::c_int) <
                               7 as libc::c_int {
                            gSaveContext.timer2State = 2 as libc::c_int as s16
                        } else {
                            gSaveContext.timer2State = 8 as libc::c_int as s16
                        }
                        gSaveContext.timer1State = 0 as libc::c_int as s16
                    } else {
                        gSaveContext.timer1State = 0 as libc::c_int as s16
                    }
                    current_block_966 = 12627493295989912296;
                }
                15 => { current_block_966 = 12627493295989912296; }
                _ => {
                    svar6 = 1 as libc::c_int as s16;
                    let mut current_block_965: u64;
                    match gSaveContext.timer2State as libc::c_int {
                        1 | 7 => {
                            D_8015FFE6 = 20 as libc::c_int as s16;
                            D_8015FFE4 = 20 as libc::c_int as s16;
                            gSaveContext.timerX[1 as libc::c_int as usize] =
                                140 as libc::c_int as s16;
                            gSaveContext.timerY[1 as libc::c_int as usize] =
                                80 as libc::c_int as s16;
                            if gSaveContext.timer2State as libc::c_int ==
                                   1 as libc::c_int {
                                gSaveContext.timer2State =
                                    2 as libc::c_int as s16
                            } else {
                                gSaveContext.timer2State =
                                    8 as libc::c_int as s16
                            }
                            current_block_965 = 6349786747810493944;
                        }
                        2 | 8 => {
                            D_8015FFE6 -= 1;
                            if D_8015FFE6 as libc::c_int == 0 as libc::c_int {
                                D_8015FFE6 = 20 as libc::c_int as s16;
                                if gSaveContext.timer2State as libc::c_int ==
                                       2 as libc::c_int {
                                    gSaveContext.timer2State =
                                        3 as libc::c_int as s16
                                } else {
                                    gSaveContext.timer2State =
                                        9 as libc::c_int as s16
                                }
                            }
                            current_block_965 = 6349786747810493944;
                        }
                        3 | 9 => {
                            svar5 =
                                gSaveContext.timerX[1 as libc::c_int as
                                                        usize];
                            svar2 =
                                gSaveContext.timerY[1 as libc::c_int as
                                                        usize];
                            osSyncPrintf(b"event_xp[1]=%d,  event_yp[1]=%d  TOTAL_EVENT_TM=%d\n\x00"
                                             as *const u8 as
                                             *const libc::c_char,
                                         svar5 as libc::c_int,
                                         svar2 as libc::c_int,
                                         gSaveContext.timer2Value as
                                             libc::c_int);
                            svar1 =
                                ((gSaveContext.timerX[1 as libc::c_int as
                                                          usize] as
                                      libc::c_int - 26 as libc::c_int) /
                                     D_8015FFE6 as libc::c_int) as s16;
                            gSaveContext.timerX[1 as libc::c_int as usize] =
                                (gSaveContext.timerX[1 as libc::c_int as
                                                         usize] as libc::c_int
                                     - svar1 as libc::c_int) as s16;
                            if gSaveContext.healthCapacity as libc::c_int >
                                   0xa0 as libc::c_int {
                                svar1 =
                                    ((gSaveContext.timerY[1 as libc::c_int as
                                                              usize] as
                                          libc::c_int - 54 as libc::c_int) /
                                         D_8015FFE6 as libc::c_int) as s16
                            } else {
                                svar1 =
                                    ((gSaveContext.timerY[1 as libc::c_int as
                                                              usize] as
                                          libc::c_int - 46 as libc::c_int) /
                                         D_8015FFE6 as libc::c_int) as s16
                            }
                            gSaveContext.timerY[1 as libc::c_int as usize] =
                                (gSaveContext.timerY[1 as libc::c_int as
                                                         usize] as libc::c_int
                                     - svar1 as libc::c_int) as s16;
                            D_8015FFE6 -= 1;
                            if D_8015FFE6 as libc::c_int == 0 as libc::c_int {
                                D_8015FFE6 = 20 as libc::c_int as s16;
                                gSaveContext.timerX[1 as libc::c_int as usize]
                                    = 26 as libc::c_int as s16;
                                if gSaveContext.healthCapacity as libc::c_int
                                       > 0xa0 as libc::c_int {
                                    gSaveContext.timerY[1 as libc::c_int as
                                                            usize] =
                                        54 as libc::c_int as s16
                                } else {
                                    gSaveContext.timerY[1 as libc::c_int as
                                                            usize] =
                                        46 as libc::c_int as s16
                                }
                                if gSaveContext.timer2State as libc::c_int ==
                                       3 as libc::c_int {
                                    gSaveContext.timer2State =
                                        4 as libc::c_int as s16
                                } else {
                                    gSaveContext.timer2State =
                                        10 as libc::c_int as s16
                                }
                            }
                            current_block_965 = 10696532389645557298;
                        }
                        4 | 10 => {
                            current_block_965 = 10696532389645557298;
                        }
                        6 => {
                            D_8015FFE6 -= 1;
                            if D_8015FFE6 as libc::c_int == 0 as libc::c_int {
                                gSaveContext.timer2State =
                                    0 as libc::c_int as s16
                            }
                            current_block_965 = 6349786747810493944;
                        }
                        _ => { current_block_965 = 6349786747810493944; }
                    }
                    match current_block_965 {
                        10696532389645557298 => {
                            if gSaveContext.timer2State as libc::c_int ==
                                   4 as libc::c_int ||
                                   gSaveContext.timer2State as libc::c_int ==
                                       10 as libc::c_int {
                                if gSaveContext.healthCapacity as libc::c_int
                                       > 0xa0 as libc::c_int {
                                    gSaveContext.timerY[1 as libc::c_int as
                                                            usize] =
                                        54 as libc::c_int as s16
                                } else {
                                    gSaveContext.timerY[1 as libc::c_int as
                                                            usize] =
                                        46 as libc::c_int as s16
                                }
                            }
                            if gSaveContext.timer2State as libc::c_int >=
                                   3 as libc::c_int {
                                D_8015FFE4 -= 1;
                                if D_8015FFE4 as libc::c_int ==
                                       0 as libc::c_int {
                                    D_8015FFE4 = 20 as libc::c_int as s16;
                                    if gSaveContext.timer2State as libc::c_int
                                           == 4 as libc::c_int {
                                        gSaveContext.timer2Value -= 1;
                                        osSyncPrintf(b"TOTAL_EVENT_TM=%d\n\x00"
                                                         as *const u8 as
                                                         *const libc::c_char,
                                                     gSaveContext.timer2Value
                                                         as libc::c_int);
                                        if gSaveContext.timer2Value as
                                               libc::c_int <= 0 as libc::c_int
                                           {
                                            if Flags_GetSwitch(globalCtx,
                                                               0x37 as
                                                                   libc::c_int)
                                                   == 0 ||
                                                   (*globalCtx).sceneNum as
                                                       libc::c_int !=
                                                       SCENE_GANON_DEMO as
                                                           libc::c_int &&
                                                       (*globalCtx).sceneNum
                                                           as libc::c_int !=
                                                           SCENE_GANON_FINAL
                                                               as libc::c_int
                                                       &&
                                                       (*globalCtx).sceneNum
                                                           as libc::c_int !=
                                                           SCENE_GANON_SONOGO
                                                               as libc::c_int
                                                       &&
                                                       (*globalCtx).sceneNum
                                                           as libc::c_int !=
                                                           SCENE_GANONTIKA_SONOGO
                                                               as libc::c_int
                                               {
                                                D_8015FFE6 =
                                                    40 as libc::c_int as s16;
                                                gSaveContext.timer2State =
                                                    5 as libc::c_int as s16;
                                                gSaveContext.cutsceneIndex =
                                                    0 as libc::c_int;
                                                Message_StartTextbox(globalCtx,
                                                                     0x71b0 as
                                                                         libc::c_int
                                                                         as
                                                                         u16_0,
                                                                     0 as
                                                                         *mut Actor);
                                                func_8002DF54(globalCtx,
                                                              0 as *mut Actor,
                                                              8 as libc::c_int
                                                                  as u8_0);
                                            } else {
                                                D_8015FFE6 =
                                                    40 as libc::c_int as s16;
                                                gSaveContext.timer2State =
                                                    6 as libc::c_int as s16
                                            }
                                        } else if gSaveContext.timer2Value as
                                                      libc::c_int >
                                                      60 as libc::c_int {
                                            if timerDigits[4 as libc::c_int as
                                                               usize] as
                                                   libc::c_int ==
                                                   1 as libc::c_int {
                                                Audio_PlaySoundGeneral(0x4804
                                                                           as
                                                                           libc::c_int
                                                                           as
                                                                           u16_0,
                                                                       &mut D_801333D4,
                                                                       4 as
                                                                           libc::c_int
                                                                           as
                                                                           u8_0,
                                                                       &mut D_801333E0,
                                                                       &mut D_801333E0,
                                                                       &mut D_801333E8);
                                            }
                                        } else if gSaveContext.timer2Value as
                                                      libc::c_int >
                                                      10 as libc::c_int {
                                            if timerDigits[4 as libc::c_int as
                                                               usize] as
                                                   libc::c_int &
                                                   1 as libc::c_int != 0 {
                                                Audio_PlaySoundGeneral(0x4819
                                                                           as
                                                                           libc::c_int
                                                                           as
                                                                           u16_0,
                                                                       &mut D_801333D4,
                                                                       4 as
                                                                           libc::c_int
                                                                           as
                                                                           u8_0,
                                                                       &mut D_801333E0,
                                                                       &mut D_801333E0,
                                                                       &mut D_801333E8);
                                            }
                                        } else {
                                            Audio_PlaySoundGeneral(0x481a as
                                                                       libc::c_int
                                                                       as
                                                                       u16_0,
                                                                   &mut D_801333D4,
                                                                   4 as
                                                                       libc::c_int
                                                                       as
                                                                       u8_0,
                                                                   &mut D_801333E0,
                                                                   &mut D_801333E0,
                                                                   &mut D_801333E8);
                                        }
                                    } else {
                                        gSaveContext.timer2Value += 1;
                                        if gSaveContext.eventInf[1 as
                                                                     libc::c_int
                                                                     as usize]
                                               as libc::c_int &
                                               1 as libc::c_int != 0 {
                                            if gSaveContext.timer2Value as
                                                   libc::c_int ==
                                                   240 as libc::c_int {
                                                Message_StartTextbox(globalCtx,
                                                                     0x6083 as
                                                                         libc::c_int
                                                                         as
                                                                         u16_0,
                                                                     0 as
                                                                         *mut Actor);
                                                gSaveContext.eventInf[1 as
                                                                          libc::c_int
                                                                          as
                                                                          usize]
                                                    =
                                                    (gSaveContext.eventInf[1
                                                                               as
                                                                               libc::c_int
                                                                               as
                                                                               usize]
                                                         as libc::c_int &
                                                         !(1 as libc::c_int))
                                                        as u16_0;
                                                gSaveContext.timer2State =
                                                    0 as libc::c_int as s16
                                            }
                                        }
                                    }
                                    if gSaveContext.timer2Value as libc::c_int
                                           % 60 as libc::c_int ==
                                           0 as libc::c_int {
                                        Audio_PlaySoundGeneral(0x4819 as
                                                                   libc::c_int
                                                                   as u16_0,
                                                               &mut D_801333D4,
                                                               4 as
                                                                   libc::c_int
                                                                   as u8_0,
                                                               &mut D_801333E0,
                                                               &mut D_801333E0,
                                                               &mut D_801333E8);
                                    }
                                }
                            }
                        }
                        _ => { }
                    }
                    current_block_966 = 12627493295989912296;
                }
            }
            match current_block_966 {
                8427384903308627819 => {
                    if gSaveContext.timer1State as libc::c_int ==
                           14 as libc::c_int {
                        if gSaveContext.healthCapacity as libc::c_int >
                               0xa0 as libc::c_int {
                            gSaveContext.timerY[0 as libc::c_int as usize] =
                                54 as libc::c_int as s16
                        } else {
                            gSaveContext.timerY[0 as libc::c_int as usize] =
                                46 as libc::c_int as s16
                        }
                    }
                    if gSaveContext.timer1State as libc::c_int >=
                           3 as libc::c_int {
                        D_8015FFE0 -= 1;
                        if D_8015FFE0 as libc::c_int == 0 as libc::c_int {
                            gSaveContext.timer1Value += 1;
                            D_8015FFE0 = 20 as libc::c_int as s16;
                            if gSaveContext.timer1Value as libc::c_int ==
                                   3599 as libc::c_int {
                                D_8015FFE2 = 40 as libc::c_int as s16;
                                gSaveContext.timer1State =
                                    15 as libc::c_int as s16
                            } else {
                                Audio_PlaySoundGeneral(0x4819 as libc::c_int
                                                           as u16_0,
                                                       &mut D_801333D4,
                                                       4 as libc::c_int as
                                                           u8_0,
                                                       &mut D_801333E0,
                                                       &mut D_801333E0,
                                                       &mut D_801333E8);
                            }
                        }
                    }
                }
                16151697837493776533 => {
                    if gSaveContext.timer1State as libc::c_int ==
                           4 as libc::c_int ||
                           gSaveContext.timer1State as libc::c_int ==
                               8 as libc::c_int {
                        if gSaveContext.healthCapacity as libc::c_int >
                               0xa0 as libc::c_int {
                            gSaveContext.timerY[0 as libc::c_int as usize] =
                                54 as libc::c_int as s16
                        } else {
                            gSaveContext.timerY[0 as libc::c_int as usize] =
                                46 as libc::c_int as s16
                        }
                    }
                    if gSaveContext.timer1State as libc::c_int >=
                           3 as libc::c_int &&
                           (*msgCtx).msgLength == 0 as libc::c_int {
                        D_8015FFE0 -= 1;
                        if D_8015FFE0 as libc::c_int == 0 as libc::c_int {
                            if gSaveContext.timer1Value as libc::c_int !=
                                   0 as libc::c_int {
                                gSaveContext.timer1Value -= 1
                            }
                            D_8015FFE0 = 20 as libc::c_int as s16;
                            if gSaveContext.timer1Value as libc::c_int ==
                                   0 as libc::c_int {
                                gSaveContext.timer1State =
                                    10 as libc::c_int as s16;
                                if D_80125A5C as libc::c_int !=
                                       0 as libc::c_int {
                                    gSaveContext.health =
                                        0 as libc::c_int as s16;
                                    (*globalCtx).damagePlayer.expect("non-null function pointer")(globalCtx,
                                                                                                  -(gSaveContext.health
                                                                                                        as
                                                                                                        libc::c_int
                                                                                                        +
                                                                                                        2
                                                                                                            as
                                                                                                            libc::c_int));
                                }
                                D_80125A5C = 0 as libc::c_int as s16
                            } else if gSaveContext.timer1Value as libc::c_int
                                          > 60 as libc::c_int {
                                if timerDigits[4 as libc::c_int as usize] as
                                       libc::c_int == 1 as libc::c_int {
                                    Audio_PlaySoundGeneral(0x4804 as
                                                               libc::c_int as
                                                               u16_0,
                                                           &mut D_801333D4,
                                                           4 as libc::c_int as
                                                               u8_0,
                                                           &mut D_801333E0,
                                                           &mut D_801333E0,
                                                           &mut D_801333E8);
                                }
                            } else if gSaveContext.timer1Value as libc::c_int
                                          >= 11 as libc::c_int {
                                if timerDigits[4 as libc::c_int as usize] as
                                       libc::c_int & 1 as libc::c_int != 0 {
                                    Audio_PlaySoundGeneral(0x4819 as
                                                               libc::c_int as
                                                               u16_0,
                                                           &mut D_801333D4,
                                                           4 as libc::c_int as
                                                               u8_0,
                                                           &mut D_801333E0,
                                                           &mut D_801333E0,
                                                           &mut D_801333E8);
                                }
                            } else {
                                Audio_PlaySoundGeneral(0x481a as libc::c_int
                                                           as u16_0,
                                                       &mut D_801333D4,
                                                       4 as libc::c_int as
                                                           u8_0,
                                                       &mut D_801333E0,
                                                       &mut D_801333E0,
                                                       &mut D_801333E8);
                            }
                        }
                    }
                }
                _ => { }
            }
            if gSaveContext.timer1State as libc::c_int != 0 as libc::c_int &&
                   gSaveContext.timer1State as libc::c_int !=
                       10 as libc::c_int ||
                   gSaveContext.timer2State as libc::c_int != 0 as libc::c_int
               {
                timerDigits[3 as libc::c_int as usize] =
                    0 as libc::c_int as s16;
                svar2 = timerDigits[3 as libc::c_int as usize];
                timerDigits[1 as libc::c_int as usize] = svar2;
                timerDigits[0 as libc::c_int as usize] =
                    timerDigits[1 as libc::c_int as usize];
                timerDigits[2 as libc::c_int as usize] =
                    10 as libc::c_int as s16;
                if gSaveContext.timer1State as libc::c_int != 0 as libc::c_int
                   {
                    timerDigits[4 as libc::c_int as usize] =
                        gSaveContext.timer1Value
                } else {
                    timerDigits[4 as libc::c_int as usize] =
                        gSaveContext.timer2Value
                }
                while timerDigits[4 as libc::c_int as usize] as libc::c_int >=
                          60 as libc::c_int {
                    timerDigits[1 as libc::c_int as usize] += 1;
                    if timerDigits[1 as libc::c_int as usize] as libc::c_int
                           >= 10 as libc::c_int {
                        timerDigits[0 as libc::c_int as usize] += 1;
                        timerDigits[1 as libc::c_int as usize] =
                            (timerDigits[1 as libc::c_int as usize] as
                                 libc::c_int - 10 as libc::c_int) as s16
                    }
                    timerDigits[4 as libc::c_int as usize] =
                        (timerDigits[4 as libc::c_int as usize] as libc::c_int
                             - 60 as libc::c_int) as s16
                }
                while timerDigits[4 as libc::c_int as usize] as libc::c_int >=
                          10 as libc::c_int {
                    timerDigits[3 as libc::c_int as usize] += 1;
                    timerDigits[4 as libc::c_int as usize] =
                        (timerDigits[4 as libc::c_int as usize] as libc::c_int
                             - 10 as libc::c_int) as s16
                }
                // Clock Icon
                let fresh338 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_109: *mut Gfx = fresh338;
                (*_g_109).words.w0 =
                    (0xe7 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int;
                (*_g_109).words.w1 = 0 as libc::c_int as libc::c_uint;
                let fresh339 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_110: *mut Gfx = fresh339;
                (*_g_110).words.w0 =
                    (0xfa as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            8 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                (*_g_110).words.w1 =
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (255 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            16 as libc::c_int |
                        (255 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            8 as libc::c_int |
                        (255 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                let fresh340 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_111: *mut Gfx = fresh340;
                (*_g_111).words.w0 =
                    (0xfb as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int;
                (*_g_111).words.w1 =
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            16 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            8 as libc::c_int |
                        (0 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                svar5 = gSaveContext.timerX[svar6 as usize];
                svar2 = gSaveContext.timerY[svar6 as usize];
                (*__gfxCtx).overlay.p =
                    Gfx_TextureIA8((*__gfxCtx).overlay.p,
                                   gClockIconTex.as_mut_ptr() as
                                       *mut libc::c_void,
                                   16 as libc::c_int as s16,
                                   16 as libc::c_int as s16, svar5,
                                   (svar2 as libc::c_int + 2 as libc::c_int)
                                       as s16, 16 as libc::c_int as s16,
                                   16 as libc::c_int as s16,
                                   ((1 as libc::c_int) << 10 as libc::c_int)
                                       as u16_0,
                                   ((1 as libc::c_int) << 10 as libc::c_int)
                                       as u16_0);
                // Timer Counter
                let fresh341 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_112: *mut Gfx = fresh341;
                (*_g_112).words.w0 =
                    (0xe7 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int;
                (*_g_112).words.w1 = 0 as libc::c_int as libc::c_uint;
                let fresh342 = (*__gfxCtx).overlay.p;
                (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                let mut _g_113: *mut Gfx = fresh342;
                (*_g_113).words.w0 =
                    (0xfc as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        24 as libc::c_int |
                        (((31 as libc::c_int as u32_0 &
                               (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                    1 as libc::c_int) as libc::c_uint) <<
                              20 as libc::c_int |
                              (31 as libc::c_int as u32_0 &
                                   (((0x1 as libc::c_int) << 5 as libc::c_int)
                                        - 1 as libc::c_int) as libc::c_uint)
                                  << 15 as libc::c_int |
                              (1 as libc::c_int as u32_0 &
                                   (((0x1 as libc::c_int) << 3 as libc::c_int)
                                        - 1 as libc::c_int) as libc::c_uint)
                                  << 12 as libc::c_int |
                              (3 as libc::c_int as u32_0 &
                                   (((0x1 as libc::c_int) << 3 as libc::c_int)
                                        - 1 as libc::c_int) as libc::c_uint)
                                  << 9 as libc::c_int |
                              ((31 as libc::c_int as u32_0 &
                                    (((0x1 as libc::c_int) <<
                                          4 as libc::c_int) -
                                         1 as libc::c_int) as libc::c_uint) <<
                                   5 as libc::c_int |
                                   (31 as libc::c_int as u32_0 &
                                        (((0x1 as libc::c_int) <<
                                              5 as libc::c_int) -
                                             1 as libc::c_int) as
                                            libc::c_uint) <<
                                       0 as libc::c_int)) &
                             (((0x1 as libc::c_int) << 24 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            0 as libc::c_int;
                (*_g_113).words.w1 =
                    (31 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 4 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        28 as libc::c_int |
                        (3 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            15 as libc::c_int |
                        (7 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            12 as libc::c_int |
                        (7 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 3 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            9 as libc::c_int |
                        ((31 as libc::c_int as u32_0 &
                              (((0x1 as libc::c_int) << 4 as libc::c_int) -
                                   1 as libc::c_int) as libc::c_uint) <<
                             24 as libc::c_int |
                             (1 as libc::c_int as u32_0 &
                                  (((0x1 as libc::c_int) << 3 as libc::c_int)
                                       - 1 as libc::c_int) as libc::c_uint) <<
                                 21 as libc::c_int |
                             (3 as libc::c_int as u32_0 &
                                  (((0x1 as libc::c_int) << 3 as libc::c_int)
                                       - 1 as libc::c_int) as libc::c_uint) <<
                                 18 as libc::c_int |
                             (3 as libc::c_int as u32_0 &
                                  (((0x1 as libc::c_int) << 3 as libc::c_int)
                                       - 1 as libc::c_int) as libc::c_uint) <<
                                 6 as libc::c_int |
                             (7 as libc::c_int as u32_0 &
                                  (((0x1 as libc::c_int) << 3 as libc::c_int)
                                       - 1 as libc::c_int) as libc::c_uint) <<
                                 3 as libc::c_int |
                             (7 as libc::c_int as u32_0 &
                                  (((0x1 as libc::c_int) << 3 as libc::c_int)
                                       - 1 as libc::c_int) as libc::c_uint) <<
                                 0 as libc::c_int);
                if gSaveContext.timer1State as libc::c_int != 0 as libc::c_int
                   {
                    if (gSaveContext.timer1Value as libc::c_int) <
                           10 as libc::c_int &&
                           (gSaveContext.timer1State as libc::c_int) <
                               11 as libc::c_int {
                        let fresh343 = (*__gfxCtx).overlay.p;
                        (*__gfxCtx).overlay.p =
                            (*__gfxCtx).overlay.p.offset(1);
                        let mut _g_114: *mut Gfx = fresh343;
                        (*_g_114).words.w0 =
                            (0xfa as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                24 as libc::c_int |
                                (0 as libc::c_int as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 8 as libc::c_int |
                                (0 as libc::c_int as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 0 as libc::c_int;
                        (*_g_114).words.w1 =
                            (255 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                24 as libc::c_int |
                                (50 as libc::c_int as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 16 as libc::c_int |
                                (0 as libc::c_int as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 8 as libc::c_int |
                                (255 as libc::c_int as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 0 as libc::c_int
                    } else {
                        let fresh344 = (*__gfxCtx).overlay.p;
                        (*__gfxCtx).overlay.p =
                            (*__gfxCtx).overlay.p.offset(1);
                        let mut _g_115: *mut Gfx = fresh344;
                        (*_g_115).words.w0 =
                            (0xfa as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                24 as libc::c_int |
                                (0 as libc::c_int as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 8 as libc::c_int |
                                (0 as libc::c_int as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 0 as libc::c_int;
                        (*_g_115).words.w1 =
                            (255 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                24 as libc::c_int |
                                (255 as libc::c_int as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 16 as libc::c_int |
                                (255 as libc::c_int as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 8 as libc::c_int |
                                (255 as libc::c_int as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 0 as libc::c_int
                    }
                } else if (gSaveContext.timer2Value as libc::c_int) <
                              10 as libc::c_int &&
                              (gSaveContext.timer2State as libc::c_int) <
                                  6 as libc::c_int {
                    let fresh345 = (*__gfxCtx).overlay.p;
                    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                    let mut _g_116: *mut Gfx = fresh345;
                    (*_g_116).words.w0 =
                        (0xfa as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                8 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int;
                    (*_g_116).words.w1 =
                        (255 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (50 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                16 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                8 as libc::c_int |
                            (255 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int
                } else {
                    let fresh346 = (*__gfxCtx).overlay.p;
                    (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
                    let mut _g_117: *mut Gfx = fresh346;
                    (*_g_117).words.w0 =
                        (0xfa as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                8 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int;
                    (*_g_117).words.w1 =
                        (255 as libc::c_int as u32_0 &
                             (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                  1 as libc::c_int) as libc::c_uint) <<
                            24 as libc::c_int |
                            (255 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                16 as libc::c_int |
                            (0 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                8 as libc::c_int |
                            (255 as libc::c_int as u32_0 &
                                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                                      1 as libc::c_int) as libc::c_uint) <<
                                0 as libc::c_int
                }
                svar1 = 0 as libc::c_int as s16;
                while (svar1 as libc::c_int) < 5 as libc::c_int {
                    // clang-format off
                    svar5 = gSaveContext.timerX[svar6 as usize];
                    svar2 = gSaveContext.timerY[svar6 as usize];
                    (*__gfxCtx).overlay.p =
                        Gfx_TextureI8((*__gfxCtx).overlay.p,
                                      (gCounterDigit0Tex.as_mut_ptr() as
                                           *mut u8_0).offset((8 as libc::c_int
                                                                  *
                                                                  16 as
                                                                      libc::c_int
                                                                  *
                                                                  timerDigits[svar1
                                                                                  as
                                                                                  usize]
                                                                      as
                                                                      libc::c_int)
                                                                 as isize) as
                                          *mut libc::c_void,
                                      8 as libc::c_int as s16,
                                      16 as libc::c_int as s16,
                                      (svar5 as libc::c_int +
                                           timerDigitLeftPos[svar1 as usize]
                                               as libc::c_int) as s16, svar2,
                                      digitWidth[svar1 as usize],
                                      (*gGameInfo).data[(20 as libc::c_int *
                                                             6 as libc::c_int
                                                             *
                                                             16 as libc::c_int
                                                             +
                                                             42 as
                                                                 libc::c_int)
                                                            as usize],
                                      (((*gGameInfo).data[(20 as libc::c_int *
                                                               6 as
                                                                   libc::c_int
                                                               *
                                                               16 as
                                                                   libc::c_int
                                                               +
                                                               43 as
                                                                   libc::c_int)
                                                              as usize] as
                                            libc::c_int) << 1 as libc::c_int)
                                          as u16_0,
                                      (((*gGameInfo).data[(20 as libc::c_int *
                                                               6 as
                                                                   libc::c_int
                                                               *
                                                               16 as
                                                                   libc::c_int
                                                               +
                                                               43 as
                                                                   libc::c_int)
                                                              as usize] as
                                            libc::c_int) << 1 as libc::c_int)
                                          as u16_0);
                    svar1 += 1
                    // clang-format on
                }
            }
        }
    }
    if (*pauseCtx).debugState as libc::c_int == 3 as libc::c_int {
        FlagSet_Update(globalCtx);
    }
    if (*interfaceCtx).unk_244 as libc::c_int != 0 as libc::c_int {
        let fresh347 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_118: *mut Gfx = fresh347;
        (*_g_118).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_118).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh348 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_119: *mut Gfx = fresh348;
        (*_g_119).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_119).words.w1 = sSetupDL_80125A60.as_mut_ptr() as libc::c_uint;
        let fresh349 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_120: *mut Gfx = fresh349;
        (*_g_120).words.w0 =
            (0xfa as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_120).words.w1 =
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                ((*interfaceCtx).unk_244 as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh350 = (*__gfxCtx).overlay.p;
        (*__gfxCtx).overlay.p = (*__gfxCtx).overlay.p.offset(1);
        let mut _g_121: *mut Gfx = fresh350;
        (*_g_121).words.w0 =
            (0xf6 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((gScreenWidth - 1 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 10 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    14 as libc::c_int |
                ((gScreenHeight - 1 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 10 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    2 as libc::c_int;
        (*_g_121).words.w1 =
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 10 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 14 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 10 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    2 as libc::c_int
    }
    Graph_CloseDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                     b"../z_parameter.c\x00" as *const u8 as
                         *const libc::c_char, 4269 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn Interface_Update(mut globalCtx: *mut GlobalContext) {
    static mut D_80125B60: u8_0 = 0 as libc::c_int as u8_0;
    static mut sPrevTimeIncrement: s16 = 0 as libc::c_int as s16;
    let mut msgCtx: *mut MessageContext = &mut (*globalCtx).msgCtx;
    let mut interfaceCtx: *mut InterfaceContext =
        &mut (*globalCtx).interfaceCtx;
    let mut player: *mut Player =
        (*globalCtx).actorCtx.actorLists[ACTORCAT_PLAYER as libc::c_int as
                                             usize].head as *mut Player;
    let mut alpha: s16 = 0;
    let mut alpha1: s16 = 0;
    let mut action: u16_0 = 0;
    let mut debugInput: *mut Input =
        &mut *(*globalCtx).state.input.as_mut_ptr().offset(2 as libc::c_int as
                                                               isize) as
            *mut Input;
    if !((*debugInput).press.button as libc::c_int | !(0x200 as libc::c_int))
           == 0 as libc::c_int {
        gSaveContext.language = LANGUAGE_ENG as libc::c_int as u8_0;
        osSyncPrintf(b"J_N=%x J_N=%x\n\x00" as *const u8 as
                         *const libc::c_char,
                     gSaveContext.language as libc::c_int,
                     &mut gSaveContext.language as *mut u8_0);
    } else if !((*debugInput).press.button as libc::c_int |
                    !(0x800 as libc::c_int)) == 0 as libc::c_int {
        gSaveContext.language = LANGUAGE_GER as libc::c_int as u8_0;
        osSyncPrintf(b"J_N=%x J_N=%x\n\x00" as *const u8 as
                         *const libc::c_char,
                     gSaveContext.language as libc::c_int,
                     &mut gSaveContext.language as *mut u8_0);
    } else if !((*debugInput).press.button as libc::c_int |
                    !(0x100 as libc::c_int)) == 0 as libc::c_int {
        gSaveContext.language = LANGUAGE_FRA as libc::c_int as u8_0;
        osSyncPrintf(b"J_N=%x J_N=%x\n\x00" as *const u8 as
                         *const libc::c_char,
                     gSaveContext.language as libc::c_int,
                     &mut gSaveContext.language as *mut u8_0);
    }
    if (*globalCtx).pauseCtx.state as libc::c_int == 0 as libc::c_int &&
           (*globalCtx).pauseCtx.debugState as libc::c_int == 0 as libc::c_int
       {
        if gSaveContext.minigameState as libc::c_int == 1 as libc::c_int ||
               gSaveContext.sceneSetupIndex < 4 as libc::c_int ||
               (*globalCtx).sceneNum as libc::c_int ==
                   SCENE_SPOT20 as libc::c_int &&
                   gSaveContext.sceneSetupIndex == 4 as libc::c_int {
            if (*msgCtx).msgMode as libc::c_int == MSGMODE_NONE as libc::c_int
                   ||
                   (*msgCtx).msgMode as libc::c_int !=
                       MSGMODE_NONE as libc::c_int &&
                       (*globalCtx).sceneNum as libc::c_int ==
                           SCENE_BOWLING as libc::c_int {
                if (*globalCtx).gameOverCtx.state as libc::c_int ==
                       GAMEOVER_INACTIVE as libc::c_int {
                    func_80083108(globalCtx);
                }
            }
        }
    }
    match gSaveContext.unk_13E8 as libc::c_int {
        1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 => {
            alpha =
                (255 as libc::c_int -
                     ((gSaveContext.unk_13EC as libc::c_int) <<
                          5 as libc::c_int)) as s16;
            if (alpha as libc::c_int) < 0 as libc::c_int {
                alpha = 0 as libc::c_int as s16
            }
            func_80082850(globalCtx, alpha);
            gSaveContext.unk_13EC = gSaveContext.unk_13EC.wrapping_add(1);
            if alpha as libc::c_int == 0 as libc::c_int {
                gSaveContext.unk_13E8 = 0 as libc::c_int as u16_0
            }
        }
        50 => {
            alpha =
                (255 as libc::c_int -
                     ((gSaveContext.unk_13EC as libc::c_int) <<
                          5 as libc::c_int)) as s16;
            if (alpha as libc::c_int) < 0 as libc::c_int {
                alpha = 0 as libc::c_int as s16
            }
            alpha1 = (0xff as libc::c_int - alpha as libc::c_int) as s16;
            if alpha1 as libc::c_int >= 0xff as libc::c_int {
                alpha1 = 0xff as libc::c_int as s16
            }
            osSyncPrintf(b"case 50 : alpha=%d  alpha1=%d\n\x00" as *const u8
                             as *const libc::c_char, alpha as libc::c_int,
                         alpha1 as libc::c_int);
            func_80082644(globalCtx, alpha1);
            if (*interfaceCtx).healthAlpha as libc::c_int !=
                   255 as libc::c_int {
                (*interfaceCtx).healthAlpha = alpha1 as u16_0
            }
            if (*interfaceCtx).magicAlpha as libc::c_int != 255 as libc::c_int
               {
                (*interfaceCtx).magicAlpha = alpha1 as u16_0
            }
            match (*globalCtx).sceneNum as libc::c_int {
                81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93
                | 94 | 95 | 96 | 97 | 98 | 99 | 100 => {
                    if ((*interfaceCtx).minimapAlpha as libc::c_int) <
                           170 as libc::c_int {
                        (*interfaceCtx).minimapAlpha = alpha1 as u16_0
                    } else {
                        (*interfaceCtx).minimapAlpha =
                            170 as libc::c_int as u16_0
                    }
                }
                _ => {
                    if (*interfaceCtx).minimapAlpha as libc::c_int !=
                           255 as libc::c_int {
                        (*interfaceCtx).minimapAlpha = alpha1 as u16_0
                    }
                }
            }
            gSaveContext.unk_13EC = gSaveContext.unk_13EC.wrapping_add(1);
            if alpha1 as libc::c_int == 0xff as libc::c_int {
                gSaveContext.unk_13E8 = 0 as libc::c_int as u16_0
            }
        }
        52 => {
            gSaveContext.unk_13E8 = 1 as libc::c_int as u16_0;
            func_80082850(globalCtx, 0 as libc::c_int as s16);
            gSaveContext.unk_13E8 = 0 as libc::c_int as u16_0
        }
        _ => { }
    }
    Map_Update(globalCtx);
    if gSaveContext.healthAccumulator as libc::c_int != 0 as libc::c_int {
        gSaveContext.healthAccumulator =
            (gSaveContext.healthAccumulator as libc::c_int - 4 as libc::c_int)
                as s16;
        gSaveContext.health =
            (gSaveContext.health as libc::c_int + 4 as libc::c_int) as s16;
        if (gSaveContext.health as libc::c_int & 0xf as libc::c_int) <
               4 as libc::c_int {
            Audio_PlaySoundGeneral(0x480b as libc::c_int as u16_0,
                                   &mut D_801333D4, 4 as libc::c_int as u8_0,
                                   &mut D_801333E0, &mut D_801333E0,
                                   &mut D_801333E8);
        }
        osSyncPrintf(b"now_life=%d  max_life=%d\n\x00" as *const u8 as
                         *const libc::c_char,
                     gSaveContext.health as libc::c_int,
                     gSaveContext.healthCapacity as libc::c_int);
        if gSaveContext.health as libc::c_int >=
               gSaveContext.healthCapacity as libc::c_int {
            gSaveContext.health = gSaveContext.healthCapacity;
            osSyncPrintf(b"S_Private.now_life=%d  S_Private.max_life=%d\n\x00"
                             as *const u8 as *const libc::c_char,
                         gSaveContext.health as libc::c_int,
                         gSaveContext.healthCapacity as libc::c_int);
            gSaveContext.healthAccumulator = 0 as libc::c_int as s16
        }
    }
    HealthMeter_HandleCriticalAlarm(globalCtx);
    D_80125A58 = func_8008F2F8(globalCtx) as s16;
    if D_80125A58 as libc::c_int == 1 as libc::c_int {
        if (gSaveContext.equips.equipment as libc::c_int &
                gEquipMasks[EQUIP_TUNIC as libc::c_int as usize] as
                    libc::c_int) >>
               gEquipShifts[EQUIP_TUNIC as libc::c_int as usize] as
                   libc::c_int == 2 as libc::c_int {
            D_80125A58 = 0 as libc::c_int as s16
        }
    } else if func_8008F2F8(globalCtx) >= 2 as libc::c_int &&
                  func_8008F2F8(globalCtx) < 5 as libc::c_int {
        if (gSaveContext.equips.equipment as libc::c_int &
                gEquipMasks[EQUIP_TUNIC as libc::c_int as usize] as
                    libc::c_int) >>
               gEquipShifts[EQUIP_TUNIC as libc::c_int as usize] as
                   libc::c_int == 3 as libc::c_int {
            D_80125A58 = 0 as libc::c_int as s16
        }
    }
    HealthMeter_Update(globalCtx);
    (gSaveContext.timer1State as libc::c_int >= 3 as libc::c_int &&
         (*globalCtx).pauseCtx.state as libc::c_int == 0 as libc::c_int &&
         (*globalCtx).pauseCtx.debugState as libc::c_int == 0 as libc::c_int
         && (*msgCtx).msgMode as libc::c_int == MSGMODE_NONE as libc::c_int &&
         (*player).stateFlags2 & 0x1000000 as libc::c_int as libc::c_uint == 0
         && (*globalCtx).sceneLoadFlag as libc::c_int == 0 as libc::c_int &&
         (*globalCtx).transitionMode as libc::c_int == 0 as libc::c_int) &&
        Gameplay_InCsMode(globalCtx) == 0;
    if gSaveContext.rupeeAccumulator as libc::c_int != 0 as libc::c_int {
        if gSaveContext.rupeeAccumulator as libc::c_int > 0 as libc::c_int {
            if (gSaveContext.rupees as libc::c_int) <
                   gUpgradeCapacities[UPG_WALLET as libc::c_int as
                                          usize][((gSaveContext.inventory.upgrades
                                                       &
                                                       gUpgradeMasks[UPG_WALLET
                                                                         as
                                                                         libc::c_int
                                                                         as
                                                                         usize])
                                                      as s32 >>
                                                      gUpgradeShifts[UPG_WALLET
                                                                         as
                                                                         libc::c_int
                                                                         as
                                                                         usize]
                                                          as libc::c_int) as
                                                     usize] as libc::c_int {
                gSaveContext.rupeeAccumulator -= 1;
                gSaveContext.rupees += 1;
                Audio_PlaySoundGeneral(0x482f as libc::c_int as u16_0,
                                       &mut D_801333D4,
                                       4 as libc::c_int as u8_0,
                                       &mut D_801333E0, &mut D_801333E0,
                                       &mut D_801333E8);
            } else {
                // "Rupee Amount MAX = %d"
                osSyncPrintf(b"\xe3\x83\xab\xe3\x83\x94\xe3\x83\xbc\xe6\x95\xb0\xef\xbc\xad\xef\xbc\xa1\xef\xbc\xb8 = %d\n\x00"
                                 as *const u8 as *const libc::c_char,
                             gUpgradeCapacities[UPG_WALLET as libc::c_int as
                                                    usize][((gSaveContext.inventory.upgrades
                                                                 &
                                                                 gUpgradeMasks[UPG_WALLET
                                                                                   as
                                                                                   libc::c_int
                                                                                   as
                                                                                   usize])
                                                                as s32 >>
                                                                gUpgradeShifts[UPG_WALLET
                                                                                   as
                                                                                   libc::c_int
                                                                                   as
                                                                                   usize]
                                                                    as
                                                                    libc::c_int)
                                                               as usize] as
                                 libc::c_int); // "Magic Start!!!!!!!!!"
                gSaveContext.rupees =
                    gUpgradeCapacities[UPG_WALLET as libc::c_int as
                                           usize][((gSaveContext.inventory.upgrades
                                                        &
                                                        gUpgradeMasks[UPG_WALLET
                                                                          as
                                                                          libc::c_int
                                                                          as
                                                                          usize])
                                                       as s32 >>
                                                       gUpgradeShifts[UPG_WALLET
                                                                          as
                                                                          libc::c_int
                                                                          as
                                                                          usize]
                                                           as libc::c_int) as
                                                      usize] as s16;
                gSaveContext.rupeeAccumulator = 0 as libc::c_int as s16
            }
        } else if gSaveContext.rupees as libc::c_int != 0 as libc::c_int {
            if gSaveContext.rupeeAccumulator as libc::c_int <=
                   -(50 as libc::c_int) {
                gSaveContext.rupeeAccumulator =
                    (gSaveContext.rupeeAccumulator as libc::c_int +
                         10 as libc::c_int) as s16;
                gSaveContext.rupees =
                    (gSaveContext.rupees as libc::c_int - 10 as libc::c_int)
                        as s16;
                if (gSaveContext.rupees as libc::c_int) < 0 as libc::c_int {
                    gSaveContext.rupees = 0 as libc::c_int as s16
                }
                Audio_PlaySoundGeneral(0x482f as libc::c_int as u16_0,
                                       &mut D_801333D4,
                                       4 as libc::c_int as u8_0,
                                       &mut D_801333E0, &mut D_801333E0,
                                       &mut D_801333E8);
            } else {
                gSaveContext.rupeeAccumulator += 1;
                gSaveContext.rupees -= 1;
                Audio_PlaySoundGeneral(0x482f as libc::c_int as u16_0,
                                       &mut D_801333D4,
                                       4 as libc::c_int as u8_0,
                                       &mut D_801333E0, &mut D_801333E0,
                                       &mut D_801333E8);
            }
        } else { gSaveContext.rupeeAccumulator = 0 as libc::c_int as s16 }
    }
    match (*interfaceCtx).unk_1EC as libc::c_int {
        1 => {
            (*interfaceCtx).unk_1F4 +=
                31400.0f32 /
                    (*gGameInfo).data[(18 as libc::c_int * 6 as libc::c_int *
                                           16 as libc::c_int +
                                           5 as libc::c_int) as usize] as
                        libc::c_int as libc::c_float;
            if (*interfaceCtx).unk_1F4 >= 15700.0f32 {
                (*interfaceCtx).unk_1F4 = -15700.0f32;
                (*interfaceCtx).unk_1EC = 2 as libc::c_int as s16
            }
        }
        2 => {
            (*interfaceCtx).unk_1F4 +=
                31400.0f32 /
                    (*gGameInfo).data[(18 as libc::c_int * 6 as libc::c_int *
                                           16 as libc::c_int +
                                           5 as libc::c_int) as usize] as
                        libc::c_int as libc::c_float;
            if (*interfaceCtx).unk_1F4 >= 0.0f32 {
                (*interfaceCtx).unk_1F4 = 0.0f32;
                (*interfaceCtx).unk_1EC = 0 as libc::c_int as s16;
                (*interfaceCtx).unk_1EE = (*interfaceCtx).unk_1F0;
                action = (*interfaceCtx).unk_1EE;
                if action as libc::c_int == DO_ACTION_MAX as libc::c_int ||
                       action as libc::c_int ==
                           DO_ACTION_MAX as libc::c_int + 1 as libc::c_int {
                    action = DO_ACTION_NONE as libc::c_int as u16_0
                }
                Interface_LoadActionLabel(interfaceCtx, action,
                                          0 as libc::c_int as s16);
            }
        }
        3 => {
            (*interfaceCtx).unk_1F4 +=
                31400.0f32 /
                    (*gGameInfo).data[(18 as libc::c_int * 6 as libc::c_int *
                                           16 as libc::c_int +
                                           5 as libc::c_int) as usize] as
                        libc::c_int as libc::c_float;
            if (*interfaceCtx).unk_1F4 >= 15700.0f32 {
                (*interfaceCtx).unk_1F4 = -15700.0f32;
                (*interfaceCtx).unk_1EC = 2 as libc::c_int as s16
            }
        }
        4 => {
            (*interfaceCtx).unk_1F4 +=
                31400.0f32 /
                    (*gGameInfo).data[(18 as libc::c_int * 6 as libc::c_int *
                                           16 as libc::c_int +
                                           5 as libc::c_int) as usize] as
                        libc::c_int as libc::c_float;
            if (*interfaceCtx).unk_1F4 >= 0.0f32 {
                (*interfaceCtx).unk_1F4 = 0.0f32;
                (*interfaceCtx).unk_1EC = 0 as libc::c_int as s16;
                (*interfaceCtx).unk_1EE = (*interfaceCtx).unk_1F0;
                action = (*interfaceCtx).unk_1EE;
                if action as libc::c_int == DO_ACTION_MAX as libc::c_int ||
                       action as libc::c_int ==
                           DO_ACTION_MAX as libc::c_int + 1 as libc::c_int {
                    action = DO_ACTION_NONE as libc::c_int as u16_0
                }
                Interface_LoadActionLabel(interfaceCtx, action,
                                          0 as libc::c_int as s16);
            }
        }
        _ => { }
    }
    (*gGameInfo).data[(18 as libc::c_int * 6 as libc::c_int *
                           16 as libc::c_int + 7 as libc::c_int) as usize] =
        (*interfaceCtx).unk_1F4 as s16;
    if (*globalCtx).pauseCtx.state as libc::c_int == 0 as libc::c_int &&
           (*globalCtx).pauseCtx.debugState as libc::c_int == 0 as libc::c_int
           && (*msgCtx).msgMode as libc::c_int == MSGMODE_NONE as libc::c_int
           && (*globalCtx).sceneLoadFlag as libc::c_int == 0 as libc::c_int &&
           (*globalCtx).gameOverCtx.state as libc::c_int ==
               GAMEOVER_INACTIVE as libc::c_int &&
           (*globalCtx).transitionMode as libc::c_int == 0 as libc::c_int &&
           ((*globalCtx).csCtx.state as libc::c_int ==
                CS_STATE_IDLE as libc::c_int ||
                Player_InCsMode(globalCtx) == 0) {
        if gSaveContext.magicAcquired as libc::c_int != 0 as libc::c_int &&
               gSaveContext.magicLevel as libc::c_int == 0 as libc::c_int {
            gSaveContext.magicLevel =
                (gSaveContext.doubleMagic as libc::c_int + 1 as libc::c_int)
                    as s8;
            gSaveContext.unk_13F0 = 8 as libc::c_int as s16;
            osSyncPrintf(b"\x1b[33m\x00" as *const u8 as *const libc::c_char);
            osSyncPrintf(b"\xe9\xad\x94\xe6\xb3\x95\xe3\x82\xb9\xe3\x82\xbf\xe3\x83\xbc\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe3\x83\x88\xef\xbc\x81\xef\xbc\x81\xef\xbc\x81\xef\xbc\x81\xef\xbc\x81\xef\xbc\x81\xef\xbc\x81\xef\xbc\x81\xef\xbc\x81\n\x00"
                             as *const u8 as *const libc::c_char);
            osSyncPrintf(b"MAGIC_MAX=%d\n\x00" as *const u8 as
                             *const libc::c_char,
                         gSaveContext.magicLevel as libc::c_int);
            osSyncPrintf(b"MAGIC_NOW=%d\n\x00" as *const u8 as
                             *const libc::c_char,
                         gSaveContext.magic as libc::c_int);
            osSyncPrintf(b"Z_MAGIC_NOW_NOW=%d\n\x00" as *const u8 as
                             *const libc::c_char,
                         gSaveContext.unk_13F6 as libc::c_int);
            osSyncPrintf(b"Z_MAGIC_NOW_MAX=%d\n\x00" as *const u8 as
                             *const libc::c_char,
                         gSaveContext.unk_13F4 as libc::c_int);
            osSyncPrintf(b"\x1b[m\x00" as *const u8 as *const libc::c_char);
        }
        Interface_UpdateMagicBar(globalCtx);
    }
    if gSaveContext.timer1State as libc::c_int == 0 as libc::c_int {
        if (D_80125A58 as libc::c_int == 1 as libc::c_int ||
                D_80125A58 as libc::c_int == 2 as libc::c_int ||
                D_80125A58 as libc::c_int == 4 as libc::c_int) &&
               gSaveContext.health as libc::c_int >> 1 as libc::c_int !=
                   0 as libc::c_int {
            gSaveContext.timer1State = 1 as libc::c_int as s16;
            gSaveContext.timerX[0 as libc::c_int as usize] =
                140 as libc::c_int as s16;
            gSaveContext.timerY[0 as libc::c_int as usize] =
                80 as libc::c_int as s16;
            D_80125A5C = 1 as libc::c_int as s16
        }
    } else if (D_80125A58 as libc::c_int == 0 as libc::c_int ||
                   D_80125A58 as libc::c_int == 3 as libc::c_int) &&
                  (gSaveContext.timer1State as libc::c_int) < 5 as libc::c_int
     {
        gSaveContext.timer1State = 0 as libc::c_int as s16
    }
    if gSaveContext.minigameState as libc::c_int == 1 as libc::c_int {
        gSaveContext.minigameScore =
            (gSaveContext.minigameScore as libc::c_int +
                 (*interfaceCtx).unk_23C as libc::c_int) as u16_0;
        (*interfaceCtx).unk_23C = 0 as libc::c_int as u16_0;
        if sHBAScoreTier as libc::c_int == 0 as libc::c_int {
            if gSaveContext.minigameScore as libc::c_int >=
                   1000 as libc::c_int {
                sHBAScoreTier += 1
            }
        } else if sHBAScoreTier as libc::c_int == 1 as libc::c_int {
            if gSaveContext.minigameScore as libc::c_int >=
                   1500 as libc::c_int {
                sHBAScoreTier += 1
            }
        }
        sHBAScoreDigits[1 as libc::c_int as usize] =
            0 as libc::c_int as u16_0;
        sHBAScoreDigits[0 as libc::c_int as usize] =
            sHBAScoreDigits[1 as libc::c_int as usize];
        sHBAScoreDigits[2 as libc::c_int as usize] =
            0 as libc::c_int as u16_0;
        sHBAScoreDigits[3 as libc::c_int as usize] =
            gSaveContext.minigameScore;
        while sHBAScoreDigits[3 as libc::c_int as usize] as libc::c_int >=
                  1000 as libc::c_int {
            sHBAScoreDigits[0 as libc::c_int as usize] =
                sHBAScoreDigits[0 as libc::c_int as usize].wrapping_add(1);
            sHBAScoreDigits[3 as libc::c_int as usize] =
                (sHBAScoreDigits[3 as libc::c_int as usize] as libc::c_int -
                     1000 as libc::c_int) as u16_0
        }
        while sHBAScoreDigits[3 as libc::c_int as usize] as libc::c_int >=
                  100 as libc::c_int {
            sHBAScoreDigits[1 as libc::c_int as usize] =
                sHBAScoreDigits[1 as libc::c_int as usize].wrapping_add(1);
            sHBAScoreDigits[3 as libc::c_int as usize] =
                (sHBAScoreDigits[3 as libc::c_int as usize] as libc::c_int -
                     100 as libc::c_int) as u16_0
        }
        while sHBAScoreDigits[3 as libc::c_int as usize] as libc::c_int >=
                  10 as libc::c_int {
            sHBAScoreDigits[2 as libc::c_int as usize] =
                sHBAScoreDigits[2 as libc::c_int as usize].wrapping_add(1);
            sHBAScoreDigits[3 as libc::c_int as usize] =
                (sHBAScoreDigits[3 as libc::c_int as usize] as libc::c_int -
                     10 as libc::c_int) as u16_0
        }
    }
    if gSaveContext.sunsSongState as libc::c_int !=
           SUNSSONG_INACTIVE as libc::c_int {
        // exit out of ocarina mode after suns song finishes playing
        if (*msgCtx).ocarinaAction as libc::c_int !=
               OCARINA_ACTION_CHECK_NOWARP_DONE as libc::c_int &&
               gSaveContext.sunsSongState as libc::c_int ==
                   SUNSSONG_START as libc::c_int {
            (*globalCtx).msgCtx.ocarinaMode =
                OCARINA_MODE_04 as libc::c_int as u16_0
        }
        // handle suns song in areas where time moves
        if (*globalCtx).envCtx.timeIncrement as libc::c_int !=
               0 as libc::c_int {
            if gSaveContext.sunsSongState as libc::c_int !=
                   SUNSSONG_SPEED_TIME as libc::c_int {
                D_80125B60 = 0 as libc::c_int as u8_0;
                if gSaveContext.dayTime as libc::c_int >=
                       0x4555 as libc::c_int &&
                       gSaveContext.dayTime as libc::c_int <=
                           0xc001 as libc::c_int {
                    D_80125B60 = 1 as libc::c_int as u8_0
                }
                gSaveContext.sunsSongState =
                    SUNSSONG_SPEED_TIME as libc::c_int as s16;
                sPrevTimeIncrement = gTimeIncrement as s16;
                gTimeIncrement = 400 as libc::c_int as u16_0
            } else if D_80125B60 as libc::c_int == 0 as libc::c_int {
                if gSaveContext.dayTime as libc::c_int >=
                       0x4555 as libc::c_int &&
                       gSaveContext.dayTime as libc::c_int <=
                           0xc001 as libc::c_int {
                    gSaveContext.sunsSongState =
                        SUNSSONG_INACTIVE as libc::c_int as s16;
                    gTimeIncrement = sPrevTimeIncrement as u16_0;
                    (*globalCtx).msgCtx.ocarinaMode =
                        OCARINA_MODE_04 as libc::c_int as u16_0
                }
            } else if gSaveContext.dayTime as libc::c_int >
                          0xc001 as libc::c_int {
                gSaveContext.sunsSongState =
                    SUNSSONG_INACTIVE as libc::c_int as s16;
                gTimeIncrement = sPrevTimeIncrement as u16_0;
                (*globalCtx).msgCtx.ocarinaMode =
                    OCARINA_MODE_04 as libc::c_int as u16_0
            }
        } else if (*globalCtx).roomCtx.curRoom.unk_03 as libc::c_int !=
                      1 as libc::c_int &&
                      (*interfaceCtx).restrictions.sunsSong as libc::c_int !=
                          3 as libc::c_int {
            if gSaveContext.dayTime as libc::c_int >= 0x4555 as libc::c_int &&
                   (gSaveContext.dayTime as libc::c_int) <
                       0xc001 as libc::c_int {
                gSaveContext.nextDayTime = 0 as libc::c_int as u16_0;
                (*globalCtx).fadeTransition = 4 as libc::c_int as u8_0;
                gSaveContext.nextTransition = 2 as libc::c_int as u8_0;
                (*globalCtx).unk_11DE9 = 1 as libc::c_int as u8_0
            } else {
                gSaveContext.nextDayTime = 0x8001 as libc::c_int as u16_0;
                (*globalCtx).fadeTransition = 5 as libc::c_int as u8_0;
                gSaveContext.nextTransition = 3 as libc::c_int as u8_0;
                (*globalCtx).unk_11DE9 = 1 as libc::c_int as u8_0
            }
            if (*globalCtx).sceneNum as libc::c_int ==
                   SCENE_SPOT13 as libc::c_int {
                (*globalCtx).fadeTransition = 14 as libc::c_int as u8_0;
                gSaveContext.nextTransition = 14 as libc::c_int as u8_0
            }
            gSaveContext.respawnFlag = -(2 as libc::c_int);
            (*globalCtx).nextEntranceIndex =
                gSaveContext.entranceIndex as s16;
            (*globalCtx).sceneLoadFlag = 0x14 as libc::c_int as s8;
            gSaveContext.sunsSongState =
                SUNSSONG_INACTIVE as libc::c_int as s16;
            func_800F6964(30 as libc::c_int as u16_0);
            gSaveContext.seqId = 0xffff as libc::c_int as u8_0;
            gSaveContext.natureAmbienceId = 0xff as libc::c_int as u8_0
        } else {
            gSaveContext.sunsSongState =
                SUNSSONG_SPECIAL as libc::c_int as s16
        }
    };
}
