#![allow(dead_code, mutable_transmutes, non_camel_case_types, non_snake_case,
         non_upper_case_globals, unused_assignments, unused_mut)]
#![register_tool(c2rust)]
#![feature(const_raw_ptr_to_usize_cast, const_transmute, register_tool)]
extern "C" {
    #[no_mangle]
    fn fabsf(f: f32_0) -> f32_0;
    #[no_mangle]
    fn sqrtf(f: f32_0) -> f32_0;
    #[no_mangle]
    fn DmaMgr_SendRequest2(req: *mut DmaRequest, ram: u32_0, vrom: u32_0,
                           size: u32_0, unk5: u32_0, queue: *mut OSMesgQueue,
                           msg: OSMesg, file: *const libc::c_char, line: s32)
     -> s32;
    #[no_mangle]
    fn __assert(exp: *const libc::c_char, file: *const libc::c_char,
                line: s32);
    #[no_mangle]
    fn osSyncPrintf(fmt: *const libc::c_char, _: ...);
    #[no_mangle]
    fn LogUtils_LogThreadId(name: *const libc::c_char, line: s32);
    #[no_mangle]
    fn bzero(__s: *mut libc::c_void, __n: u32_0);
    #[no_mangle]
    fn osCreateMesgQueue(mq: *mut OSMesgQueue, msg: *mut OSMesg, count: s32);
    #[no_mangle]
    fn Item_DropCollectible(globalCtx: *mut GlobalContext,
                            spawnPos: *mut Vec3f, params: s16)
     -> *mut EnItem00;
    #[no_mangle]
    fn Effect_Add(globalCtx: *mut GlobalContext, pIndex: *mut s32,
                  type_0: s32, arg3: u8_0, arg4: u8_0,
                  initParams: *mut libc::c_void);
    #[no_mangle]
    fn Effect_Delete(globalCtx: *mut GlobalContext, index: s32);
    #[no_mangle]
    fn func_8002836C(globalCtx: *mut GlobalContext, pos: *mut Vec3f,
                     velocity: *mut Vec3f, accel: *mut Vec3f,
                     primColor: *mut Color_RGBA8, envColor: *mut Color_RGBA8,
                     scale: s16, scaleStep: s16, life: s16);
    #[no_mangle]
    fn func_800286CC(globalCtx: *mut GlobalContext, pos: *mut Vec3f,
                     velocity: *mut Vec3f, accel: *mut Vec3f, scale: s16,
                     scaleStep: s16);
    #[no_mangle]
    fn EffectSsKiraKira_SpawnDispersed(globalCtx: *mut GlobalContext,
                                       pos: *mut Vec3f, velocity: *mut Vec3f,
                                       accel: *mut Vec3f,
                                       primColor: *mut Color_RGBA8,
                                       envColor: *mut Color_RGBA8, scale: s16,
                                       life: s32);
    #[no_mangle]
    fn EffectSsBlast_SpawnWhiteShockwave(globalCtx: *mut GlobalContext,
                                         pos: *mut Vec3f,
                                         velocity: *mut Vec3f,
                                         accel: *mut Vec3f);
    #[no_mangle]
    fn EffectSsBubble_Spawn(globalCtx: *mut GlobalContext, pos: *mut Vec3f,
                            yPosOffset: f32_0, yPosRandScale: f32_0,
                            xzPosRandScale: f32_0, scale: f32_0);
    #[no_mangle]
    fn EffectSsGRipple_Spawn(globalCtx: *mut GlobalContext, pos: *mut Vec3f,
                             radius: s16, radiusMax: s16, life: s16);
    #[no_mangle]
    fn EffectSsGSplash_Spawn(globalCtx: *mut GlobalContext, pos: *mut Vec3f,
                             primColor: *mut Color_RGBA8,
                             envColor: *mut Color_RGBA8, type_0: s16,
                             scale: s16);
    #[no_mangle]
    fn EffectSsStick_Spawn(globalCtx: *mut GlobalContext, pos: *mut Vec3f,
                           yaw: s16);
    #[no_mangle]
    fn EffectSsFhgFlash_SpawnShock(globalCtx: *mut GlobalContext,
                                   actor: *mut Actor, pos: *mut Vec3f,
                                   scale: s16, param: u8_0);
    #[no_mangle]
    fn EffectSsIcePiece_SpawnBurst(globalCtx: *mut GlobalContext,
                                   refPos: *mut Vec3f, scale: f32_0);
    #[no_mangle]
    fn EffectSsFireTail_SpawnFlameOnPlayer(globalCtx: *mut GlobalContext,
                                           scale: f32_0, bodyPart: s16,
                                           colorIntensity: f32_0);
    #[no_mangle]
    fn ActorShape_Init(shape: *mut ActorShape, yOffset: f32_0,
                       shadowDraw: ActorShadowFunc, shadowScale: f32_0);
    #[no_mangle]
    fn ActorShadow_DrawFeet(actor: *mut Actor, lights: *mut Lights,
                            globalCtx: *mut GlobalContext);
    #[no_mangle]
    fn Flags_SetTempClear(globalCtx: *mut GlobalContext, flag: s32);
    #[no_mangle]
    fn TitleCard_InitPlaceName(globalCtx: *mut GlobalContext,
                               titleCtx: *mut TitleCardContext,
                               texture: *mut libc::c_void, x: s32, y: s32,
                               width: s32, height: s32, delay: s32);
    #[no_mangle]
    fn func_8002D53C(globalCtx: *mut GlobalContext,
                     titleCtx: *mut TitleCardContext) -> s32;
    #[no_mangle]
    fn Actor_Kill(actor: *mut Actor);
    #[no_mangle]
    fn func_8002D7EC(actor: *mut Actor);
    #[no_mangle]
    fn func_8002D868(actor: *mut Actor);
    #[no_mangle]
    fn Actor_MoveForward(actor: *mut Actor);
    #[no_mangle]
    fn Actor_WorldYawTowardActor(actorA: *mut Actor, actorB: *mut Actor)
     -> s16;
    #[no_mangle]
    fn func_8002DBD0(actor: *mut Actor, result: *mut Vec3f, arg2: *mut Vec3f);
    #[no_mangle]
    fn Player_GetHeight(player: *mut Player) -> f32_0;
    #[no_mangle]
    fn func_8002DD6C(player: *mut Player) -> s32;
    #[no_mangle]
    fn func_8002DD78(player: *mut Player) -> s32;
    #[no_mangle]
    fn func_8002DE74(globalCtx: *mut GlobalContext, player: *mut Player);
    #[no_mangle]
    fn Actor_MountHorse(globalCtx: *mut GlobalContext, player: *mut Player,
                        horse: *mut Actor);
    #[no_mangle]
    fn func_8002DF54(globalCtx: *mut GlobalContext, actor: *mut Actor,
                     arg2: u8_0) -> s32;
    #[no_mangle]
    fn func_8002DFA4(dynaActor: *mut DynaPolyActor, arg1: f32_0, arg2: s16);
    #[no_mangle]
    fn Actor_UpdateBgCheckInfo(globalCtx: *mut GlobalContext,
                               actor: *mut Actor, wallCheckHeight: f32_0,
                               wallCheckRadius: f32_0,
                               ceilingCheckHeight: f32_0, flags: s32);
    #[no_mangle]
    fn func_8002EBCC(actor: *mut Actor, globalCtx: *mut GlobalContext,
                     flag: s32);
    #[no_mangle]
    fn func_8002ED80(actor: *mut Actor, globalCtx: *mut GlobalContext,
                     flag: s32);
    #[no_mangle]
    fn func_8002F0C8(actor: *mut Actor, player: *mut Player, arg2: s32)
     -> s32;
    #[no_mangle]
    fn func_8002F7DC(actor: *mut Actor, sfxId: u16_0);
    #[no_mangle]
    fn Audio_PlayActorSound2(actor: *mut Actor, sfxId: u16_0);
    #[no_mangle]
    fn func_8002F8F0(actor: *mut Actor, sfxId: u16_0);
    #[no_mangle]
    fn func_8002F9EC(globalCtx: *mut GlobalContext, actor: *mut Actor,
                     poly: *mut CollisionPoly, bgId: s32, pos: *mut Vec3f)
     -> s32;
    #[no_mangle]
    fn func_800304B0(globalCtx: *mut GlobalContext);
    #[no_mangle]
    fn Actor_Spawn(actorCtx: *mut ActorContext, globalCtx: *mut GlobalContext,
                   actorId: s16, posX: f32_0, posY: f32_0, posZ: f32_0,
                   rotX: s16, rotY: s16, rotZ: s16, params: s16)
     -> *mut Actor;
    #[no_mangle]
    fn Actor_SpawnAsChild(actorCtx: *mut ActorContext, parent: *mut Actor,
                          globalCtx: *mut GlobalContext, actorId: s16,
                          posX: f32_0, posY: f32_0, posZ: f32_0, rotX: s16,
                          rotY: s16, rotZ: s16, params: s16) -> *mut Actor;
    #[no_mangle]
    fn func_80032CB4(arg0: *mut s16, arg1: s16, arg2: s16, arg3: s16) -> s16;
    #[no_mangle]
    fn Rand_ZeroFloat(f: f32_0) -> f32_0;
    #[no_mangle]
    fn Rand_CenteredFloat(f: f32_0) -> f32_0;
    #[no_mangle]
    fn Flags_GetEventChkInf(flag: s32) -> s32;
    #[no_mangle]
    fn CollisionPoly_GetVerticesByBgId(poly: *mut CollisionPoly, bgId: s32,
                                       colCtx: *mut CollisionContext,
                                       dest: *mut Vec3f);
    #[no_mangle]
    fn BgCheck_EntityRaycastFloor1(colCtx: *mut CollisionContext,
                                   outPoly: *mut *mut CollisionPoly,
                                   pos: *mut Vec3f) -> f32_0;
    #[no_mangle]
    fn BgCheck_EntityRaycastFloor3(colCtx: *mut CollisionContext,
                                   outPoly: *mut *mut CollisionPoly,
                                   bgId: *mut s32, pos: *mut Vec3f) -> f32_0;
    #[no_mangle]
    fn BgCheck_EntityCheckCeiling(colCtx: *mut CollisionContext,
                                  arg1: *mut f32_0, arg2: *mut Vec3f,
                                  arg3: f32_0,
                                  outPoly: *mut *mut CollisionPoly,
                                  outBgId: *mut s32, actor: *mut Actor)
     -> s32;
    #[no_mangle]
    fn BgCheck_EntityLineTest1(colCtx: *mut CollisionContext,
                               posA: *mut Vec3f, posB: *mut Vec3f,
                               posResult: *mut Vec3f,
                               outPoly: *mut *mut CollisionPoly, chkWall: s32,
                               chkFloor: s32, chkCeil: s32, chkOneFace: s32,
                               bgId: *mut s32) -> s32;
    #[no_mangle]
    fn BgCheck_SphVsFirstPoly(colCtx: *mut CollisionContext,
                              center: *mut Vec3f, radius: f32_0) -> s32;
    #[no_mangle]
    fn DynaPoly_GetActor(colCtx: *mut CollisionContext, bgId: s32)
     -> *mut DynaPolyActor;
    #[no_mangle]
    fn SurfaceType_GetSceneExitIndex(colCtx: *mut CollisionContext,
                                     poly: *mut CollisionPoly, bgId: s32)
     -> u32_0;
    #[no_mangle]
    fn func_80041D4C(colCtx: *mut CollisionContext, poly: *mut CollisionPoly,
                     bgId: s32) -> u32_0;
    #[no_mangle]
    fn func_80041DB8(colCtx: *mut CollisionContext, poly: *mut CollisionPoly,
                     bgId: s32) -> s32;
    #[no_mangle]
    fn func_80041DE4(colCtx: *mut CollisionContext, poly: *mut CollisionPoly,
                     bgId: s32) -> s32;
    #[no_mangle]
    fn func_80041E18(colCtx: *mut CollisionContext, poly: *mut CollisionPoly,
                     bgId: s32) -> s32;
    #[no_mangle]
    fn func_80041E4C(colCtx: *mut CollisionContext, poly: *mut CollisionPoly,
                     bgId: s32) -> s32;
    #[no_mangle]
    fn func_80041EA4(colCtx: *mut CollisionContext, poly: *mut CollisionPoly,
                     bgId: s32) -> u32_0;
    #[no_mangle]
    fn func_80041F10(colCtx: *mut CollisionContext, poly: *mut CollisionPoly,
                     bgId: s32) -> u32_0;
    #[no_mangle]
    fn SurfaceType_GetSfx(colCtx: *mut CollisionContext,
                          poly: *mut CollisionPoly, bgId: s32) -> u16_0;
    #[no_mangle]
    fn SurfaceType_GetSlope(colCtx: *mut CollisionContext,
                            poly: *mut CollisionPoly, bgId: s32) -> u32_0;
    #[no_mangle]
    fn SurfaceType_GetLightSettingIndex(colCtx: *mut CollisionContext,
                                        poly: *mut CollisionPoly, bgId: s32)
     -> u32_0;
    #[no_mangle]
    fn SurfaceType_GetEcho(colCtx: *mut CollisionContext,
                           poly: *mut CollisionPoly, bgId: s32) -> u32_0;
    #[no_mangle]
    fn SurfaceType_IsIgnoredByEntities(colCtx: *mut CollisionContext,
                                       poly: *mut CollisionPoly, bgId: s32)
     -> s32;
    #[no_mangle]
    fn SurfaceType_IsConveyor(colCtx: *mut CollisionContext,
                              poly: *mut CollisionPoly, bgId: s32) -> s32;
    #[no_mangle]
    fn SurfaceType_GetConveyorSpeed(colCtx: *mut CollisionContext,
                                    poly: *mut CollisionPoly, bgId: s32)
     -> u32_0;
    #[no_mangle]
    fn SurfaceType_GetConveyorDirection(colCtx: *mut CollisionContext,
                                        poly: *mut CollisionPoly, bgId: s32)
     -> u32_0;
    #[no_mangle]
    fn SurfaceType_IsWallDamage(colCtx: *mut CollisionContext,
                                poly: *mut CollisionPoly, bgId: s32) -> u32_0;
    #[no_mangle]
    fn WaterBox_GetSurface1(globalCtx: *mut GlobalContext,
                            colCtx: *mut CollisionContext, x: f32_0, z: f32_0,
                            ySurface: *mut f32_0,
                            outWaterBox: *mut *mut WaterBox) -> s32;
    #[no_mangle]
    fn func_800434C8(colCtx: *mut CollisionContext, floorBgId: s32);
    #[no_mangle]
    fn func_80043508(colCtx: *mut CollisionContext, floorBgId: s32);
    #[no_mangle]
    fn Camera_ChangeMode(camera: *mut Camera, mode: s16) -> s32;
    #[no_mangle]
    fn Camera_CheckValidMode(camera: *mut Camera, mode: s16) -> s32;
    #[no_mangle]
    fn Camera_ChangeSetting(camera: *mut Camera, setting: s16) -> s32;
    #[no_mangle]
    fn Camera_GetInputDirYaw(camera: *mut Camera) -> s16;
    #[no_mangle]
    fn Camera_GetCamDirYaw(camera: *mut Camera) -> s16;
    #[no_mangle]
    fn Camera_SetParam(camera: *mut Camera, param: s32,
                       value: *mut libc::c_void) -> s32;
    #[no_mangle]
    fn Camera_ChangeDoorCam(camera: *mut Camera, doorActor: *mut Actor,
                            camDataIdx: s16, arg3: f32_0, timer1: s16,
                            timer2: s16, timer3: s16) -> s32;
    #[no_mangle]
    fn Camera_SetCameraData(camera: *mut Camera, setDataFlags: s16,
                            data0: *mut libc::c_void,
                            data1: *mut libc::c_void, data2: s16, data3: s16,
                            arg6: s32);
    #[no_mangle]
    fn func_8005B1A4(camera: *mut Camera) -> s16;
    #[no_mangle]
    fn Collider_InitCylinder(globalCtx: *mut GlobalContext,
                             collider: *mut ColliderCylinder) -> s32;
    #[no_mangle]
    fn Collider_DestroyCylinder(globalCtx: *mut GlobalContext,
                                collider: *mut ColliderCylinder) -> s32;
    #[no_mangle]
    fn Collider_SetCylinder(globalCtx: *mut GlobalContext,
                            collider: *mut ColliderCylinder,
                            actor: *mut Actor, src: *mut ColliderCylinderInit)
     -> s32;
    #[no_mangle]
    fn Collider_ResetCylinderAC(globalCtx: *mut GlobalContext,
                                collider: *mut Collider) -> s32;
    #[no_mangle]
    fn Collider_InitQuad(globalCtx: *mut GlobalContext,
                         collider: *mut ColliderQuad) -> s32;
    #[no_mangle]
    fn Collider_DestroyQuad(globalCtx: *mut GlobalContext,
                            collider: *mut ColliderQuad) -> s32;
    #[no_mangle]
    fn Collider_SetQuad(globalCtx: *mut GlobalContext,
                        collider: *mut ColliderQuad, actor: *mut Actor,
                        src: *mut ColliderQuadInit) -> s32;
    #[no_mangle]
    fn Collider_ResetQuadAT(globalCtx: *mut GlobalContext,
                            collider: *mut Collider) -> s32;
    #[no_mangle]
    fn Collider_ResetQuadAC(globalCtx: *mut GlobalContext,
                            collider: *mut Collider) -> s32;
    #[no_mangle]
    fn CollisionCheck_SetAT(globalCtx: *mut GlobalContext,
                            colChkCtx: *mut CollisionCheckContext,
                            collider: *mut Collider) -> s32;
    #[no_mangle]
    fn CollisionCheck_SetAC(globalCtx: *mut GlobalContext,
                            colChkCtx: *mut CollisionCheckContext,
                            collider: *mut Collider) -> s32;
    #[no_mangle]
    fn CollisionCheck_SetOC(globalCtx: *mut GlobalContext,
                            colChkCtx: *mut CollisionCheckContext,
                            collider: *mut Collider) -> s32;
    #[no_mangle]
    fn Collider_UpdateCylinder(actor: *mut Actor,
                               collider: *mut ColliderCylinder);
    #[no_mangle]
    fn CollisionCheck_SpawnShieldParticles(globalCtx: *mut GlobalContext,
                                           v: *mut Vec3f);
    #[no_mangle]
    fn CollisionCheck_SpawnShieldParticlesWood(globalCtx: *mut GlobalContext,
                                               b: *mut Vec3f,
                                               actorPos: *mut Vec3f);
    #[no_mangle]
    fn func_8006375C(arg0: s32, arg1: s32, text: *const libc::c_char);
    #[no_mangle]
    fn func_80074CE8(globalCtx: *mut GlobalContext, arg1: u32_0);
    #[no_mangle]
    fn Environment_WarpSongLeave(globalCtx: *mut GlobalContext);
    #[no_mangle]
    fn Math_CosS(angle: s16) -> f32_0;
    #[no_mangle]
    fn Math_SinS(angle: s16) -> f32_0;
    #[no_mangle]
    fn Math_ScaledStepToS(pValue: *mut s16, target: s16, step: s16) -> s32;
    #[no_mangle]
    fn Math_StepToS(pValue: *mut s16, target: s16, step: s16) -> s32;
    #[no_mangle]
    fn Math_StepToF(pValue: *mut f32_0, target: f32_0, step: f32_0) -> s32;
    #[no_mangle]
    fn Math_AsymStepToF(pValue: *mut f32_0, target: f32_0, incrStep: f32_0,
                        decrStep: f32_0) -> s32;
    #[no_mangle]
    fn func_80077D10(arg0: *mut f32_0, arg1: *mut s16, input: *mut Input);
    #[no_mangle]
    fn Rand_S16Offset(base: s16, range: s16) -> s16;
    #[no_mangle]
    fn Math_Vec3f_Copy(dest: *mut Vec3f, src: *mut Vec3f);
    #[no_mangle]
    fn Math_Vec3f_Sum(a: *mut Vec3f, b: *mut Vec3f, dest: *mut Vec3f);
    #[no_mangle]
    fn Math_Vec3f_Diff(a: *mut Vec3f, b: *mut Vec3f, dest: *mut Vec3f);
    #[no_mangle]
    fn Math_Vec3f_DistXYZAndStoreDiff(a: *mut Vec3f, b: *mut Vec3f,
                                      dest: *mut Vec3f) -> f32_0;
    #[no_mangle]
    fn Math_Vec3f_Yaw(a: *mut Vec3f, b: *mut Vec3f) -> s16;
    #[no_mangle]
    fn Math_Vec3f_Pitch(a: *mut Vec3f, b: *mut Vec3f) -> s16;
    #[no_mangle]
    fn Actor_ProcessInitChain(actor: *mut Actor,
                              initChain: *mut InitChainEntry);
    #[no_mangle]
    fn Math_SmoothStepToF(pValue: *mut f32_0, target: f32_0, fraction: f32_0,
                          step: f32_0, minStep: f32_0) -> f32_0;
    #[no_mangle]
    fn Math_SmoothStepToS(pValue: *mut s16, target: s16, scale: s16,
                          step: s16, minStep: s16) -> s16;
    #[no_mangle]
    fn func_80078884(sfxId: u16_0);
    #[no_mangle]
    fn func_800788CC(sfxId: u16_0);
    #[no_mangle]
    fn func_80078914(arg0: *mut Vec3f, sfxId: u16_0);
    #[no_mangle]
    fn HealthMeter_IsCritical() -> u32_0;
    #[no_mangle]
    fn ZeldaArena_MallocDebug(size: u32_0, file: *const libc::c_char,
                              line: s32) -> *mut libc::c_void;
    #[no_mangle]
    fn OnePointCutscene_Init(globalCtx: *mut GlobalContext, csId: s16,
                             timer: s16, actor: *mut Actor, camIdx: s16)
     -> s16;
    #[no_mangle]
    fn OnePointCutscene_EndCutscene(globalCtx: *mut GlobalContext,
                                    camIdx: s16) -> s16;
    #[no_mangle]
    fn Map_SavePlayerInitialInfo(globalCtx: *mut GlobalContext);
    #[no_mangle]
    fn Interface_ChangeAlpha(alphaType: u16_0);
    #[no_mangle]
    fn func_800849EC(globalCtx: *mut GlobalContext);
    #[no_mangle]
    fn Item_Give(globalCtx: *mut GlobalContext, item: u8_0) -> u8_0;
    #[no_mangle]
    fn Item_CheckObtainability(item: u8_0) -> u8_0;
    #[no_mangle]
    fn Inventory_ConsumeFairy(globalCtx: *mut GlobalContext) -> s32;
    #[no_mangle]
    fn Interface_SetDoAction(globalCtx: *mut GlobalContext, action: u16_0);
    #[no_mangle]
    fn Interface_SetNaviCall(globalCtx: *mut GlobalContext,
                             naviCallState: u16_0);
    #[no_mangle]
    fn Health_ChangeBy(globalCtx: *mut GlobalContext, healthChange: s16)
     -> s32;
    #[no_mangle]
    fn Inventory_ChangeAmmo(item: s16, ammoChange: s16);
    #[no_mangle]
    fn Magic_Fill(globalCtx: *mut GlobalContext);
    #[no_mangle]
    fn func_800876C8(globalCtx: *mut GlobalContext);
    #[no_mangle]
    fn func_80087708(globalCtx: *mut GlobalContext, arg1: s16, arg2: s16)
     -> s32;
    #[no_mangle]
    fn func_80088AF0(globalCtx: *mut GlobalContext);
    #[no_mangle]
    fn Player_SetBootData(globalCtx: *mut GlobalContext, player: *mut Player);
    #[no_mangle]
    fn Player_InBlockingCsMode(globalCtx: *mut GlobalContext,
                               player: *mut Player) -> s32;
    #[no_mangle]
    fn Player_InCsMode(globalCtx: *mut GlobalContext) -> s32;
    #[no_mangle]
    fn func_8008E9C4(player: *mut Player) -> s32;
    #[no_mangle]
    fn Player_IsChildWithHylianShield(player: *mut Player) -> s32;
    #[no_mangle]
    fn Player_ActionToModelGroup(player: *mut Player, actionParam: s32)
     -> s32;
    #[no_mangle]
    fn Player_SetModelsForHoldingShield(player: *mut Player);
    #[no_mangle]
    fn Player_SetModels(player: *mut Player, modelGroup: s32);
    #[no_mangle]
    fn Player_SetModelGroup(player: *mut Player, modelGroup: s32);
    #[no_mangle]
    fn func_8008EC70(player: *mut Player);
    #[no_mangle]
    fn Player_SetEquipmentData(globalCtx: *mut GlobalContext,
                               player: *mut Player);
    #[no_mangle]
    fn Player_UpdateBottleHeld(globalCtx: *mut GlobalContext,
                               player: *mut Player, item: s32,
                               actionParam: s32);
    #[no_mangle]
    fn func_8008EDF0(player: *mut Player);
    #[no_mangle]
    fn func_8008EE08(player: *mut Player);
    #[no_mangle]
    fn Player_GetStrength() -> s32;
    #[no_mangle]
    fn Player_ActionToMagicSpell(player: *mut Player, actionParam: s32)
     -> s32;
    #[no_mangle]
    fn Player_HoldsHookshot(player: *mut Player) -> s32;
    #[no_mangle]
    fn func_8008F128(player: *mut Player) -> s32;
    #[no_mangle]
    fn Player_ActionToSword(actionParam: s32) -> s32;
    #[no_mangle]
    fn Player_GetSwordHeld(player: *mut Player) -> s32;
    #[no_mangle]
    fn Player_HoldsTwoHandedWeapon(player: *mut Player) -> s32;
    #[no_mangle]
    fn Player_HoldsBrokenKnife(player: *mut Player) -> s32;
    #[no_mangle]
    fn Player_ActionToBottle(player: *mut Player, actionParam: s32) -> s32;
    #[no_mangle]
    fn Player_GetBottleHeld(player: *mut Player) -> s32;
    #[no_mangle]
    fn Player_ActionToExplosive(player: *mut Player, actionParam: s32) -> s32;
    #[no_mangle]
    fn Player_GetExplosiveHeld(player: *mut Player) -> s32;
    #[no_mangle]
    fn func_8008F2BC(player: *mut Player, actionParam: s32) -> s32;
    #[no_mangle]
    fn func_8008F470(globalCtx: *mut GlobalContext,
                     skeleton: *mut *mut libc::c_void, jointTable: *mut Vec3s,
                     dListCount: s32, lod: s32, tunic: s32, boots: s32,
                     face: s32, overrideLimbDraw: OverrideLimbDrawOpa,
                     postLimbDraw: PostLimbDrawOpa, this: *mut libc::c_void);
    #[no_mangle]
    fn func_80090014(globalCtx: *mut GlobalContext, limbIndex: s32,
                     dList: *mut *mut Gfx, pos: *mut Vec3f, rot: *mut Vec3s,
                     data: *mut libc::c_void) -> s32;
    #[no_mangle]
    fn func_800902F0(globalCtx: *mut GlobalContext, limbIndex: s32,
                     dList: *mut *mut Gfx, pos: *mut Vec3f, rot: *mut Vec3s,
                     data: *mut libc::c_void) -> s32;
    #[no_mangle]
    fn func_80090440(globalCtx: *mut GlobalContext, limbIndex: s32,
                     dList: *mut *mut Gfx, pos: *mut Vec3f, rot: *mut Vec3s,
                     data: *mut libc::c_void) -> s32;
    #[no_mangle]
    fn Player_DrawGetItem(globalCtx: *mut GlobalContext, player: *mut Player);
    #[no_mangle]
    fn func_80090D20(globalCtx: *mut GlobalContext, limbIndex: s32,
                     dList: *mut *mut Gfx, rot: *mut Vec3s,
                     data: *mut libc::c_void);
    #[no_mangle]
    fn Quake_SetSpeed(idx: s16, value: s16) -> u32_0;
    #[no_mangle]
    fn Quake_SetCountdown(idx: s16, value: s16) -> u32_0;
    #[no_mangle]
    fn Quake_SetQuakeValues(idx: s16, y: s16, x: s16, zoom: s16, rotZ: s16)
     -> u32_0;
    #[no_mangle]
    fn Quake_Add(cam: *mut Camera, callbackIdx: u32_0) -> s16;
    #[no_mangle]
    fn Gfx_SetFog2(gfx: *mut Gfx, r: s32, g: s32, b: s32, a: s32, near: s32,
                   far: s32) -> *mut Gfx;
    #[no_mangle]
    fn func_80093C80(globalCtx: *mut GlobalContext);
    #[no_mangle]
    fn func_80093D84(gfxCtx: *mut GraphicsContext);
    #[no_mangle]
    fn Gfx_TwoTexScroll(gfxCtx: *mut GraphicsContext, tile1: s32, x1: u32_0,
                        y1: u32_0, width1: s32, height1: s32, tile2: s32,
                        x2: u32_0, y2: u32_0, width2: s32, height2: s32)
     -> *mut Gfx;
    #[no_mangle]
    fn func_8009728C(globalCtx: *mut GlobalContext, roomCtx: *mut RoomContext,
                     roomNum: s32) -> s32;
    #[no_mangle]
    fn func_80097534(globalCtx: *mut GlobalContext,
                     roomCtx: *mut RoomContext);
    #[no_mangle]
    fn Inventory_ChangeEquipment(equipment: s16, value: u16_0);
    #[no_mangle]
    fn Inventory_DeleteEquipment(globalCtx: *mut GlobalContext,
                                 equipment: s16) -> u8_0;
    #[no_mangle]
    fn Object_GetIndex(objectCtx: *mut ObjectContext, objectId: s16) -> s32;
    #[no_mangle]
    fn func_800994A0(globalCtx: *mut GlobalContext);
    #[no_mangle]
    fn Animation_GetLastFrame(animation: *mut libc::c_void) -> s16;
    #[no_mangle]
    fn AnimationContext_SetNextQueue(globalCtx: *mut GlobalContext);
    #[no_mangle]
    fn AnimationContext_DisableQueue(globalCtx: *mut GlobalContext);
    #[no_mangle]
    fn AnimationContext_SetLoadFrame(globalCtx: *mut GlobalContext,
                                     animation: *mut LinkAnimationHeader,
                                     frame: s32, limbCount: s32,
                                     frameTable: *mut Vec3s);
    #[no_mangle]
    fn AnimationContext_SetCopyAll(globalCtx: *mut GlobalContext,
                                   vecCount: s32, dst: *mut Vec3s,
                                   src: *mut Vec3s);
    #[no_mangle]
    fn AnimationContext_SetInterp(globalCtx: *mut GlobalContext,
                                  vecCount: s32, base: *mut Vec3s,
                                  mod_0: *mut Vec3s, weight: f32_0);
    #[no_mangle]
    fn AnimationContext_SetCopyTrue(globalCtx: *mut GlobalContext,
                                    vecCount: s32, dst: *mut Vec3s,
                                    src: *mut Vec3s, copyFlag: *mut u8_0);
    #[no_mangle]
    fn AnimationContext_SetCopyFalse(globalCtx: *mut GlobalContext,
                                     vecCount: s32, dst: *mut Vec3s,
                                     src: *mut Vec3s, copyFlag: *mut u8_0);
    #[no_mangle]
    fn AnimationContext_SetMoveActor(globalCtx: *mut GlobalContext,
                                     actor: *mut Actor,
                                     skelAnime: *mut SkelAnime, arg3: f32_0);
    #[no_mangle]
    fn SkelAnime_InitLink(globalCtx: *mut GlobalContext,
                          skelAnime: *mut SkelAnime,
                          skeletonHeaderSeg: *mut FlexSkeletonHeader,
                          animation: *mut LinkAnimationHeader, initFlags: s32,
                          jointTable: *mut Vec3s, morphTable: *mut Vec3s,
                          limbCount: s32);
    #[no_mangle]
    fn LinkAnimation_SetUpdateFunction(skelAnime: *mut SkelAnime);
    #[no_mangle]
    fn LinkAnimation_Update(globalCtx: *mut GlobalContext,
                            skelAnime: *mut SkelAnime) -> s32;
    #[no_mangle]
    fn LinkAnimation_AnimateFrame(globalCtx: *mut GlobalContext,
                                  skelAnime: *mut SkelAnime);
    #[no_mangle]
    fn Animation_SetMorph(globalCtx: *mut GlobalContext,
                          skelAnime: *mut SkelAnime, morphFrames: f32_0);
    #[no_mangle]
    fn LinkAnimation_Change(globalCtx: *mut GlobalContext,
                            skelAnime: *mut SkelAnime,
                            animation: *mut LinkAnimationHeader,
                            playSpeed: f32_0, startFrame: f32_0,
                            endFrame: f32_0, mode: u8_0, morphFrames: f32_0);
    #[no_mangle]
    fn LinkAnimation_PlayOnce(globalCtx: *mut GlobalContext,
                              skelAnime: *mut SkelAnime,
                              animation: *mut LinkAnimationHeader);
    #[no_mangle]
    fn LinkAnimation_PlayOnceSetSpeed(globalCtx: *mut GlobalContext,
                                      skelAnime: *mut SkelAnime,
                                      animation: *mut LinkAnimationHeader,
                                      playSpeed: f32_0);
    #[no_mangle]
    fn LinkAnimation_PlayLoop(globalCtx: *mut GlobalContext,
                              skelAnime: *mut SkelAnime,
                              animation: *mut LinkAnimationHeader);
    #[no_mangle]
    fn LinkAnimation_PlayLoopSetSpeed(globalCtx: *mut GlobalContext,
                                      skelAnime: *mut SkelAnime,
                                      animation: *mut LinkAnimationHeader,
                                      playSpeed: f32_0);
    #[no_mangle]
    fn LinkAnimation_CopyJointToMorph(globalCtx: *mut GlobalContext,
                                      skelAnime: *mut SkelAnime);
    #[no_mangle]
    fn LinkAnimation_LoadToMorph(globalCtx: *mut GlobalContext,
                                 skelAnime: *mut SkelAnime,
                                 animation: *mut LinkAnimationHeader,
                                 frame: f32_0);
    #[no_mangle]
    fn LinkAnimation_LoadToJoint(globalCtx: *mut GlobalContext,
                                 skelAnime: *mut SkelAnime,
                                 animation: *mut LinkAnimationHeader,
                                 frame: f32_0);
    #[no_mangle]
    fn LinkAnimation_InterpJointMorph(globalCtx: *mut GlobalContext,
                                      skelAnime: *mut SkelAnime,
                                      frame: f32_0);
    #[no_mangle]
    fn LinkAnimation_BlendToJoint(globalCtx: *mut GlobalContext,
                                  skelAnime: *mut SkelAnime,
                                  animation1: *mut LinkAnimationHeader,
                                  frame1: f32_0,
                                  animation2: *mut LinkAnimationHeader,
                                  frame2: f32_0, weight: f32_0,
                                  blendTable: *mut Vec3s);
    #[no_mangle]
    fn LinkAnimation_BlendToMorph(globalCtx: *mut GlobalContext,
                                  skelAnime: *mut SkelAnime,
                                  animation1: *mut LinkAnimationHeader,
                                  frame1: f32_0,
                                  animation2: *mut LinkAnimationHeader,
                                  frame2: f32_0, weight: f32_0,
                                  blendTable: *mut Vec3s);
    #[no_mangle]
    fn LinkAnimation_OnFrame(skelAnime: *mut SkelAnime, frame: f32_0) -> s32;
    #[no_mangle]
    fn Animation_Reverse(skelAnime: *mut SkelAnime);
    #[no_mangle]
    fn SkelAnime_UpdateTranslation(skelAnime: *mut SkelAnime, pos: *mut Vec3f,
                                   angle: s16);
    #[no_mangle]
    fn SkinMatrix_Vec3fMtxFMultXYZ(mf: *mut MtxF, src: *mut Vec3f,
                                   dest: *mut Vec3f);
    #[no_mangle]
    fn func_800AA000(_: f32_0, _: u8_0, _: u8_0, _: u8_0);
    #[no_mangle]
    fn ShrinkWindow_SetVal(value: s32);
    #[no_mangle]
    fn Gameplay_SetFog(globalCtx: *mut GlobalContext, gfx: *mut Gfx)
     -> *mut Gfx;
    #[no_mangle]
    fn Gameplay_GetCamera(globalCtx: *mut GlobalContext, camId: s16)
     -> *mut Camera;
    #[no_mangle]
    fn Gameplay_SetupRespawnPoint(globalCtx: *mut GlobalContext,
                                  respawnMode: s32, playerParams: s32);
    #[no_mangle]
    fn Gameplay_TriggerVoidOut(globalCtx: *mut GlobalContext);
    #[no_mangle]
    fn Gameplay_TriggerRespawn(globalCtx: *mut GlobalContext);
    #[no_mangle]
    fn func_800C0CB8(globalCtx: *mut GlobalContext) -> s32;
    #[no_mangle]
    fn Graph_Alloc(gfxCtx: *mut GraphicsContext, size: size_t)
     -> *mut libc::c_void;
    #[no_mangle]
    fn Graph_OpenDisps(dispRefs: *mut *mut Gfx, gfxCtx: *mut GraphicsContext,
                       file: *const libc::c_char, line: s32);
    #[no_mangle]
    fn Graph_CloseDisps(dispRefs: *mut *mut Gfx, gfxCtx: *mut GraphicsContext,
                        file: *const libc::c_char, line: s32);
    #[no_mangle]
    fn Math3D_UDistPlaneToPos(nx: f32_0, ny: f32_0, nz: f32_0,
                              originDist: f32_0, p: *mut Vec3f) -> f32_0;
    #[no_mangle]
    fn Math_Atan2S(x: f32_0, y: f32_0) -> s16;
    #[no_mangle]
    fn Matrix_Push();
    #[no_mangle]
    fn Matrix_Pop();
    #[no_mangle]
    fn Matrix_Scale(x: f32_0, y: f32_0, z: f32_0, mode: u8_0);
    #[no_mangle]
    fn Matrix_RotateX(x: f32_0, mode: u8_0);
    #[no_mangle]
    fn Matrix_RotateY(y: f32_0, mode: u8_0);
    #[no_mangle]
    fn func_800D1694(x: f32_0, y: f32_0, z: f32_0, vec: *mut Vec3s);
    #[no_mangle]
    fn Matrix_ToMtx(dest: *mut Mtx, file: *mut libc::c_char, line: s32)
     -> *mut Mtx;
    #[no_mangle]
    fn Matrix_NewMtx(gfxCtx: *mut GraphicsContext, file: *mut libc::c_char,
                     line: s32) -> *mut Mtx;
    #[no_mangle]
    fn Audio_OcaSetInstrument(_: u8_0);
    #[no_mangle]
    fn func_800F4010(pos: *mut Vec3f, sfxId: u16_0, _: f32_0);
    #[no_mangle]
    fn func_800F4138(pos: *mut Vec3f, sfxId: u16_0, _: f32_0);
    #[no_mangle]
    fn func_800F4190(pos: *mut Vec3f, sfxId: u16_0);
    #[no_mangle]
    fn func_800F47BC();
    #[no_mangle]
    fn func_800F47FC();
    #[no_mangle]
    fn Audio_PlayFanfare(_: u16_0);
    #[no_mangle]
    fn Audio_SetSequenceMode(seqMode: u8_0);
    #[no_mangle]
    fn Audio_SetBgmEnemyVolume(dist: f32_0);
    #[no_mangle]
    fn Audio_SetCodeReverb(reverb: s8);
    #[no_mangle]
    fn Audio_SetBaseFilter(_: u8_0);
    #[no_mangle]
    fn func_800F6964(_: u16_0);
    #[no_mangle]
    fn func_800F6AB0(_: u16_0);
    #[no_mangle]
    fn Audio_PlaySoundGeneral(sfxId: u16_0, pos: *mut Vec3f, token: u8_0,
                              freqScale: *mut f32_0, a4: *mut f32_0,
                              reverbAdd: *mut s8);
    #[no_mangle]
    fn Audio_StopSfxById(sfxId: u32_0);
    #[no_mangle]
    fn Rand_ZeroOne() -> f32_0;
    #[no_mangle]
    fn Message_StartTextbox(globalCtx: *mut GlobalContext, textId: u16_0,
                            actor: *mut Actor);
    #[no_mangle]
    fn func_8010BD58(globalCtx: *mut GlobalContext, arg1: u16_0);
    #[no_mangle]
    fn Message_GetState(msgCtx: *mut MessageContext) -> u8_0;
    #[no_mangle]
    static mut gPlayerSkelHeaders: [*mut FlexSkeletonHeader; 2];
    #[no_mangle]
    static mut gPlayerModelTypes: [[u8_0; 5]; 0];
    #[no_mangle]
    static mut D_80125DE8: [*mut Gfx; 0];
    #[no_mangle]
    static mut D_80125E08: [*mut Gfx; 0];
    #[no_mangle]
    static mut D_80125E18: [*mut Gfx; 0];
    #[no_mangle]
    static mut D_80125EF8: [*mut Gfx; 0];
    #[no_mangle]
    static mut gCullBackDList: [Gfx; 0];
    #[no_mangle]
    static mut gCullFrontDList: [Gfx; 0];
    #[no_mangle]
    static mut gBitFlags: [u32_0; 32];
    #[no_mangle]
    static mut gUpgradeMasks: [u32_0; 8];
    #[no_mangle]
    static mut gUpgradeShifts: [u8_0; 8];
    #[no_mangle]
    static mut gItemSlots: [u8_0; 56];
    #[no_mangle]
    static mut gObjectTable: [RomFile; 402];
    #[no_mangle]
    static mut gEntranceTable: [EntranceInfo; 1556];
    #[no_mangle]
    static mut D_801333D4: Vec3f;
    #[no_mangle]
    static mut D_801333E0: f32_0;
    #[no_mangle]
    static mut D_801333E8: s8;
    #[no_mangle]
    static mut gSaveContext: SaveContext;
    #[no_mangle]
    static mut gGameInfo: *mut GameInfo;
    #[no_mangle]
    static mut gPlayerAnim_002318: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002320: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002328: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002330: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002338: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002340: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002348: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002350: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002358: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002360: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002368: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002370: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002378: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002380: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002388: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002390: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002398: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0023A0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0023A8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0023B0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0023B8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0023C0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0023C8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0023D0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0023D8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0023E0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0023E8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0023F0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0023F8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002400: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002408: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002410: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002418: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002420: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002428: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002430: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002438: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002440: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002448: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002450: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002458: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002460: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002468: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002470: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002478: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002480: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002488: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002490: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002498: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0024A0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0024A8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0024B0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0024B8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0024C0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0024C8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0024D0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0024D8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0024E0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0024E8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0024F0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0024F8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002510: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002518: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002520: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002528: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002538: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002540: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002548: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002550: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002560: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002568: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002570: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002580: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002588: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002590: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0025C0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0025C8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0025D0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0025F8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002600: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002608: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002618: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002620: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002628: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002630: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002638: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002640: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002648: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002650: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002660: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002668: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002670: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002678: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002680: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002688: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002690: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002698: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0026A0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0026B0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0026B8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0026C0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0026C8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0026D0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0026E8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0026F0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002700: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002708: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002718: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002720: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002728: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002730: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002738: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002740: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002748: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002750: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002758: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002760: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002768: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002770: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002778: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002780: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002788: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002790: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002798: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0027A0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0027A8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0027B0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0027B8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0027C0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0027C8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0027D0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0027D8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0027E0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0027E8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0027F0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0027F8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002800: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002808: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002810: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002818: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002820: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002828: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002830: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002838: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002848: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002850: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002858: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002860: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002868: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002870: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002878: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002880: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002888: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002890: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002898: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0028A0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0028A8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0028B0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0028B8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0028C0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0028C8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0028D0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0028D8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0028E0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0028E8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0028F0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0028F8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002900: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002908: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002910: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002918: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002920: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002928: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002930: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002938: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002940: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002948: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002950: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002958: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002960: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002968: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002970: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002978: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002980: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002988: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002990: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002998: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0029A0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0029A8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0029B0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0029B8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0029C0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0029C8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0029D0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0029D8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0029E0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0029E8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0029F0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002A08: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002A20: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002A28: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002A30: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002A38: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002A40: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002A50: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002A58: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002A60: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002A68: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002A80: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002A88: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002A90: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002A98: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002AA0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002AA8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002AB0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002AB8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002AC0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002AC8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002AD8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002AE0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002AE8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002AF0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002AF8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002B00: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002B08: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002B10: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002B18: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002B20: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002B28: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002B30: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002B38: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002B40: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002B58: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002B60: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002B68: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002B70: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002B78: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002B80: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002B88: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002BB0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002BB8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002BC0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002BC8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002BD0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002BE0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002BE8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002BF0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002BF8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002C00: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002C08: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002C10: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002C18: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002C20: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002C28: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002C30: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002C38: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002C40: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002C48: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002C50: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002C58: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002C60: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002C68: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002C70: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002C78: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002C80: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002C88: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002C90: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002C98: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002CA0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002CC0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002CC8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002CD0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002CD8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002CE0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002CE8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002CF0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002CF8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002D00: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002D08: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002D10: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002D18: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002D20: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002D28: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002D38: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002D40: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002D48: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002D58: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002D60: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002D68: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002D70: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002D78: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002D80: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002D88: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002D90: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002D98: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002DA0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002DA8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002DB0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002DB8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002DC0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002DC8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002DD0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002DD8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002DE0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002DE8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002DF0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002DF8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002E00: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002E08: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002E10: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002E18: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002E20: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002E28: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002E30: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002E38: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002E40: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002E48: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002E50: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002E58: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002E60: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002E68: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002E70: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002E78: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002E80: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002E88: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002E90: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002E98: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002EA0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002EA8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002EB0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002EB8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002EC0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002EC8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002ED0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002ED8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002EE0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002EE8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002EF0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002EF8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002F00: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002F08: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002F10: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002F18: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002F20: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002F28: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002F30: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002F38: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002F40: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002F48: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002F50: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002F58: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002F60: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002F68: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002F70: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002F78: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002F80: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002F88: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002F90: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002F98: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002FA0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002FA8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002FB0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002FB8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002FC0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002FC8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002FD0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002FE0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002FE8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002FF0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_002FF8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003000: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003008: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003010: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003020: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003028: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003030: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003038: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003040: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003048: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003050: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003058: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003060: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003068: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003070: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003078: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003080: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003088: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003090: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003098: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0030A0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0030A8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0030B0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0030B8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0030C0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0030C8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0030D0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0030D8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0030E0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0030F0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0030F8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003100: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003108: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003110: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003118: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003120: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003128: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003138: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003140: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003148: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003150: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003158: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003160: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003168: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003170: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003178: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003180: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003188: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003190: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003198: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0031A0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0031A8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0031C0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0031C8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0031D0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0031D8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0031E0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0031E8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0031F8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003200: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003208: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003210: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003218: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003220: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003228: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003230: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003238: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003240: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003248: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003250: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003258: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003268: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003270: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003278: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003280: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003288: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003290: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003298: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0032A0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0032A8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0032B0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0032B8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0032C0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0032C8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0032D0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0032D8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0032E0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0032E8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0032F0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003300: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003308: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003310: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003318: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003320: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003328: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003330: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003338: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003340: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003348: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003350: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003358: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003360: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003368: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003370: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003380: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003388: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003390: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003398: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0033A0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0033A8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0033B0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0033B8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0033C0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0033C8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0033D0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0033D8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0033E0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0033E8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0033F0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0033F8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003400: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003408: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003410: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003418: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003420: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003428: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003430: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003438: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003440: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003448: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003450: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003458: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003460: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003468: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003470: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003478: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003480: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003488: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003490: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_003498: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0034A0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0034A8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0034B0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0034B8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0034C0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0034C8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0034D0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0034D8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0034E0: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0034E8: LinkAnimationHeader;
    #[no_mangle]
    static mut gPlayerAnim_0034F0: LinkAnimationHeader;
    #[no_mangle]
    static mut gEffIceFragment3DL: [Gfx; 0];
    #[no_mangle]
    static mut gHoverBootsCircleDL: [Gfx; 0];
    #[no_mangle]
    static mut gLinkChildSkullMaskDL: [Gfx; 0];
    #[no_mangle]
    static mut gLinkChildSpookyMaskDL: [Gfx; 0];
    #[no_mangle]
    static mut gLinkChildKeatonMaskDL: [Gfx; 0];
    #[no_mangle]
    static mut gLinkChildMaskOfTruthDL: [Gfx; 0];
    #[no_mangle]
    static mut gLinkChildGoronMaskDL: [Gfx; 0];
    #[no_mangle]
    static mut gLinkChildZoraMaskDL: [Gfx; 0];
    #[no_mangle]
    static mut gLinkChildGerudoMaskDL: [Gfx; 0];
    #[no_mangle]
    static mut gLinkChildBunnyHoodDL: [Gfx; 0];
}
pub type s8 = libc::c_schar;
pub type u8_0 = libc::c_uchar;
pub type s16 = libc::c_short;
pub type u16_0 = libc::c_ushort;
pub type s32 = libc::c_int;
pub type u32_0 = libc::c_uint;
pub type u64_0 = libc::c_ulonglong;
pub type f32_0 = libc::c_float;
pub type Mtx_t = [[libc::c_long; 4]; 4];
#[derive(Copy, Clone)]
#[repr(C)]
pub union Mtx {
    pub m: Mtx_t,
    pub c2rust_unnamed: C2RustUnnamed,
    pub forc_structure_alignment: libc::c_longlong,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed {
    pub intPart: [[u16_0; 4]; 4],
    pub fracPart: [[u16_0; 4]; 4],
}
pub type MtxF_t = [[libc::c_float; 4]; 4];
#[derive(Copy, Clone)]
#[repr(C)]
pub union MtxF {
    pub mf: MtxF_t,
    pub c2rust_unnamed: C2RustUnnamed_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_0 {
    pub xx: libc::c_float,
    pub yx: libc::c_float,
    pub zx: libc::c_float,
    pub wx: libc::c_float,
    pub xy: libc::c_float,
    pub yy: libc::c_float,
    pub zy: libc::c_float,
    pub wy: libc::c_float,
    pub xz: libc::c_float,
    pub yz: libc::c_float,
    pub zz: libc::c_float,
    pub wz: libc::c_float,
    pub xw: libc::c_float,
    pub yw: libc::c_float,
    pub zw: libc::c_float,
    pub ww: libc::c_float,
}
pub type size_t = libc::c_ulong;
pub type OSPri = s32;
pub type OSId = s32;
#[derive(Copy, Clone)]
#[repr(C)]
pub union __OSfp {
    pub f: C2RustUnnamed_1,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_1 {
    pub f_odd: f32_0,
    pub f_even: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __OSThreadContext {
    pub at: u64_0,
    pub v0: u64_0,
    pub v1: u64_0,
    pub a0: u64_0,
    pub a1: u64_0,
    pub a2: u64_0,
    pub a3: u64_0,
    pub t0: u64_0,
    pub t1: u64_0,
    pub t2: u64_0,
    pub t3: u64_0,
    pub t4: u64_0,
    pub t5: u64_0,
    pub t6: u64_0,
    pub t7: u64_0,
    pub s0: u64_0,
    pub s1: u64_0,
    pub s2: u64_0,
    pub s3: u64_0,
    pub s4: u64_0,
    pub s5: u64_0,
    pub s6: u64_0,
    pub s7: u64_0,
    pub t8: u64_0,
    pub t9: u64_0,
    pub gp: u64_0,
    pub sp: u64_0,
    pub s8: u64_0,
    pub ra: u64_0,
    pub lo: u64_0,
    pub hi: u64_0,
    pub sr: u32_0,
    pub pc: u32_0,
    pub cause: u32_0,
    pub badvaddr: u32_0,
    pub rcp: u32_0,
    pub fpcsr: u32_0,
    pub fp0: __OSfp,
    pub fp2: __OSfp,
    pub fp4: __OSfp,
    pub fp6: __OSfp,
    pub fp8: __OSfp,
    pub fp10: __OSfp,
    pub fp12: __OSfp,
    pub fp14: __OSfp,
    pub fp16: __OSfp,
    pub fp18: __OSfp,
    pub fp20: __OSfp,
    pub fp22: __OSfp,
    pub fp24: __OSfp,
    pub fp26: __OSfp,
    pub fp28: __OSfp,
    pub fp30: __OSfp,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __OSThreadprofile {
    pub flag: u32_0,
    pub count: u32_0,
    pub time: u64_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSThread {
    pub next: *mut OSThread,
    pub priority: OSPri,
    pub queue: *mut *mut OSThread,
    pub tlnext: *mut OSThread,
    pub state: u16_0,
    pub flags: u16_0,
    pub id: OSId,
    pub fp: s32,
    pub thprof: *mut __OSThreadprofile,
    pub context: __OSThreadContext,
}
pub type OSMesg = *mut libc::c_void;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSMesgQueue {
    pub mtqueue: *mut OSThread,
    pub fullqueue: *mut OSThread,
    pub validCount: s32,
    pub first: s32,
    pub msgCount: s32,
    pub msg: *mut OSMesg,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSTask_t {
    pub type_0: u32_0,
    pub flags: u32_0,
    pub ucode_boot: *mut u64_0,
    pub ucode_boot_size: u32_0,
    pub ucode: *mut u64_0,
    pub ucode_size: u32_0,
    pub ucode_data: *mut u64_0,
    pub ucode_data_size: u32_0,
    pub dram_stack: *mut u64_0,
    pub dram_stack_size: u32_0,
    pub output_buff: *mut u64_0,
    pub output_buff_size: *mut u64_0,
    pub data_ptr: *mut u64_0,
    pub data_size: u32_0,
    pub yield_data_ptr: *mut u64_0,
    pub yield_data_size: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union OSTask {
    pub t: OSTask_t,
    pub force_structure_alignment: libc::c_longlong,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSViCommonRegs {
    pub ctrl: u32_0,
    pub width: u32_0,
    pub burst: u32_0,
    pub vSync: u32_0,
    pub hSync: u32_0,
    pub leap: u32_0,
    pub hStart: u32_0,
    pub xScale: u32_0,
    pub vCurrent: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSViFieldRegs {
    pub origin: u32_0,
    pub yScale: u32_0,
    pub vStart: u32_0,
    pub vBurst: u32_0,
    pub vIntr: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSViMode {
    pub type_0: u8_0,
    pub comRegs: OSViCommonRegs,
    pub fldRegs: [OSViFieldRegs; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSContPad {
    pub button: u16_0,
    pub stick_x: s8,
    pub stick_y: s8,
    pub errno: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Vtx_t {
    pub ob: [libc::c_short; 3],
    pub flag: libc::c_ushort,
    pub tc: [libc::c_short; 2],
    pub cn: [libc::c_uchar; 4],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Vtx_tn {
    pub ob: [libc::c_short; 3],
    pub flag: libc::c_ushort,
    pub tc: [libc::c_short; 2],
    pub n: [libc::c_schar; 3],
    pub a: libc::c_uchar,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union Vtx {
    pub v: Vtx_t,
    pub n: Vtx_tn,
    pub force_structure_alignment: libc::c_longlong,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Tri {
    pub flag: libc::c_uchar,
    pub v: [libc::c_uchar; 3],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Vp_t {
    pub vscale: [libc::c_short; 4],
    pub vtrans: [libc::c_short; 4],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union Vp {
    pub vp: Vp_t,
    pub force_structure_alignment: libc::c_longlong,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Light_t {
    pub col: [libc::c_uchar; 3],
    pub pad1: libc::c_char,
    pub colc: [libc::c_uchar; 3],
    pub pad2: libc::c_char,
    pub dir: [libc::c_schar; 3],
    pub pad3: libc::c_char,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Ambient_t {
    pub col: [libc::c_uchar; 3],
    pub pad1: libc::c_char,
    pub colc: [libc::c_uchar; 3],
    pub pad2: libc::c_char,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union Light {
    pub l: Light_t,
    pub force_structure_alignment: [libc::c_longlong; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union Ambient {
    pub l: Ambient_t,
    pub force_structure_alignment: [libc::c_longlong; 1],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Lightsn {
    pub a: Ambient,
    pub l: [Light; 7],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gdma {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "par", ty = "libc::c_uint", bits = "8..=15")]
    #[bitfield(name = "len", ty = "libc::c_uint", bits = "16..=31")]
    pub cmd_par_len: [u8; 4],
    pub addr: libc::c_uint,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gtri {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "pad", ty = "libc::c_int", bits = "8..=31")]
    pub cmd_pad: [u8; 4],
    pub tri: Tri,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gpopmtx {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "pad1", ty = "libc::c_int", bits = "8..=31")]
    #[bitfield(name = "pad2", ty = "libc::c_int", bits = "32..=55")]
    #[bitfield(name = "param", ty = "libc::c_uchar", bits = "56..=63")]
    pub cmd_pad1_pad2_param: [u8; 8],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gsegment {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "pad0", ty = "libc::c_int", bits = "8..=15")]
    #[bitfield(name = "mw_index", ty = "libc::c_int", bits = "16..=23")]
    #[bitfield(name = "number", ty = "libc::c_int", bits = "24..=31")]
    #[bitfield(name = "pad1", ty = "libc::c_int", bits = "32..=39")]
    #[bitfield(name = "base", ty = "libc::c_int", bits = "40..=63")]
    pub cmd_pad0_mw_index_number_pad1_base: [u8; 8],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct GsetothermodeL {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "pad0", ty = "libc::c_int", bits = "8..=15")]
    #[bitfield(name = "sft", ty = "libc::c_int", bits = "16..=23")]
    #[bitfield(name = "len", ty = "libc::c_int", bits = "24..=31")]
    #[bitfield(name = "data", ty = "libc::c_uint", bits = "32..=63")]
    pub cmd_pad0_sft_len_data: [u8; 8],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct GsetothermodeH {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "pad0", ty = "libc::c_int", bits = "8..=15")]
    #[bitfield(name = "sft", ty = "libc::c_int", bits = "16..=23")]
    #[bitfield(name = "len", ty = "libc::c_int", bits = "24..=31")]
    #[bitfield(name = "data", ty = "libc::c_uint", bits = "32..=63")]
    pub cmd_pad0_sft_len_data: [u8; 8],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Gtexture {
    pub cmd: libc::c_uchar,
    pub lodscale: libc::c_uchar,
    pub tile: libc::c_uchar,
    pub on: libc::c_uchar,
    pub s: libc::c_ushort,
    pub t: libc::c_ushort,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gline3D {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "pad", ty = "libc::c_int", bits = "8..=31")]
    pub cmd_pad: [u8; 4],
    pub line: Tri,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gperspnorm {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "pad1", ty = "libc::c_int", bits = "8..=31")]
    pub cmd_pad1: [u8; 4],
    pub pad2: libc::c_short,
    pub scale: libc::c_short,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gsetimg {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "fmt", ty = "libc::c_uint", bits = "8..=10")]
    #[bitfield(name = "siz", ty = "libc::c_uint", bits = "11..=12")]
    #[bitfield(name = "pad", ty = "libc::c_uint", bits = "13..=19")]
    #[bitfield(name = "wd", ty = "libc::c_uint", bits = "20..=31")]
    pub cmd_fmt_siz_pad_wd: [u8; 4],
    pub dram: libc::c_uint,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gsetcombine {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "muxs0", ty = "libc::c_uint", bits = "8..=31")]
    #[bitfield(name = "muxs1", ty = "libc::c_uint", bits = "32..=63")]
    pub cmd_muxs0_muxs1: [u8; 8],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gsetcolor {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    pub cmd: [u8; 1],
    pub pad: libc::c_uchar,
    pub prim_min_level: libc::c_uchar,
    pub prim_level: libc::c_uchar,
    pub color: libc::c_ulong,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gfillrect {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "x0", ty = "libc::c_int", bits = "8..=17")]
    #[bitfield(name = "x0frac", ty = "libc::c_int", bits = "18..=19")]
    #[bitfield(name = "y0", ty = "libc::c_int", bits = "20..=29")]
    #[bitfield(name = "y0frac", ty = "libc::c_int", bits = "30..=31")]
    #[bitfield(name = "pad", ty = "libc::c_uint", bits = "32..=39")]
    #[bitfield(name = "x1", ty = "libc::c_int", bits = "40..=49")]
    #[bitfield(name = "x1frac", ty = "libc::c_int", bits = "50..=51")]
    #[bitfield(name = "y1", ty = "libc::c_int", bits = "52..=61")]
    #[bitfield(name = "y1frac", ty = "libc::c_int", bits = "62..=63")]
    pub cmd_x0_x0frac_y0_y0frac_pad_x1_x1frac_y1_y1frac: [u8; 8],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gsettile {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "fmt", ty = "libc::c_uint", bits = "8..=10")]
    #[bitfield(name = "siz", ty = "libc::c_uint", bits = "11..=12")]
    #[bitfield(name = "pad0", ty = "libc::c_uint", bits = "13..=13")]
    #[bitfield(name = "line", ty = "libc::c_uint", bits = "14..=22")]
    #[bitfield(name = "tmem", ty = "libc::c_uint", bits = "23..=31")]
    #[bitfield(name = "pad1", ty = "libc::c_uint", bits = "32..=36")]
    #[bitfield(name = "tile", ty = "libc::c_uint", bits = "37..=39")]
    #[bitfield(name = "palette", ty = "libc::c_uint", bits = "40..=43")]
    #[bitfield(name = "ct", ty = "libc::c_uint", bits = "44..=44")]
    #[bitfield(name = "mt", ty = "libc::c_uint", bits = "45..=45")]
    #[bitfield(name = "maskt", ty = "libc::c_uint", bits = "46..=49")]
    #[bitfield(name = "shiftt", ty = "libc::c_uint", bits = "50..=53")]
    #[bitfield(name = "cs", ty = "libc::c_uint", bits = "54..=54")]
    #[bitfield(name = "ms", ty = "libc::c_uint", bits = "55..=55")]
    #[bitfield(name = "masks", ty = "libc::c_uint", bits = "56..=59")]
    #[bitfield(name = "shifts", ty = "libc::c_uint", bits = "60..=63")]
    pub cmd_fmt_siz_pad0_line_tmem_pad1_tile_palette_ct_mt_maskt_shiftt_cs_ms_masks_shifts: [u8; 8],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gloadtile {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "sl", ty = "libc::c_uint", bits = "8..=19")]
    #[bitfield(name = "tl", ty = "libc::c_uint", bits = "20..=31")]
    #[bitfield(name = "pad", ty = "libc::c_int", bits = "32..=36")]
    #[bitfield(name = "tile", ty = "libc::c_uint", bits = "37..=39")]
    #[bitfield(name = "sh", ty = "libc::c_uint", bits = "40..=51")]
    #[bitfield(name = "th", ty = "libc::c_uint", bits = "52..=63")]
    pub cmd_sl_tl_pad_tile_sh_th: [u8; 8],
}
pub type Gsettilesize = Gloadtile;
pub type Gloadtlut = Gloadtile;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Gwords {
    pub w0: libc::c_uint,
    pub w1: libc::c_uint,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union Gfx {
    pub words: Gwords,
    pub dma: Gdma,
    pub tri: Gtri,
    pub line: Gline3D,
    pub popmtx: Gpopmtx,
    pub segment: Gsegment,
    pub setothermodeH: GsetothermodeH,
    pub setothermodeL: GsetothermodeL,
    pub texture: Gtexture,
    pub perspnorm: Gperspnorm,
    pub setimg: Gsetimg,
    pub setcombine: Gsetcombine,
    pub setcolor: Gsetcolor,
    pub fillrect: Gfillrect,
    pub settile: Gsettile,
    pub loadtile: Gloadtile,
    pub settilesize: Gsettilesize,
    pub loadtlut: Gloadtlut,
    pub force_structure_alignment: libc::c_longlong,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Vec2f {
    pub x: f32_0,
    pub y: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Vec3f {
    pub x: f32_0,
    pub y: f32_0,
    pub z: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Vec3us {
    pub x: u16_0,
    pub y: u16_0,
    pub z: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Vec3s {
    pub x: s16,
    pub y: s16,
    pub z: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Vec3i {
    pub x: s32,
    pub y: s32,
    pub z: s32,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Sphere16 {
    pub center: Vec3s,
    pub radius: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Cylinder16 {
    pub radius: s16,
    pub height: s16,
    pub yShift: s16,
    pub pos: Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Linef {
    pub a: Vec3f,
    pub b: Vec3f,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ItemEquips {
    pub buttonItems: [u8_0; 4],
    pub cButtonSlots: [u8_0; 3],
    pub equipment: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Inventory {
    pub items: [u8_0; 24],
    pub ammo: [s8; 16],
    pub equipment: u16_0,
    pub upgrades: u32_0,
    pub questItems: u32_0,
    pub dungeonItems: [u8_0; 20],
    pub dungeonKeys: [s8; 19],
    pub defenseHearts: s8,
    pub gsTokens: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SavedSceneFlags {
    pub chest: u32_0,
    pub swch: u32_0,
    pub clear: u32_0,
    pub collect: u32_0,
    pub unk: u32_0,
    pub rooms: u32_0,
    pub floors: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct HorseData {
    pub scene: s16,
    pub pos: Vec3s,
    pub angle: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct RespawnData {
    pub pos: Vec3f,
    pub yaw: s16,
    pub playerParams: s16,
    pub entranceIndex: s16,
    pub roomIndex: u8_0,
    pub data: s8,
    pub tempSwchFlags: u32_0,
    pub tempCollectFlags: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct FaroresWindData {
    pub pos: Vec3i,
    pub yaw: s32,
    pub playerParams: s32,
    pub entranceIndex: s32,
    pub roomIndex: s32,
    pub set: s32,
    pub tempSwchFlags: s32,
    pub tempCollectFlags: s32,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SaveContext {
    pub entranceIndex: s32,
    pub linkAge: s32,
    pub cutsceneIndex: s32,
    pub dayTime: u16_0,
    pub nightFlag: s32,
    pub totalDays: s32,
    pub bgsDayCount: s32,
    pub newf: [libc::c_char; 6],
    pub deaths: u16_0,
    pub playerName: [libc::c_char; 8],
    pub n64ddFlag: s16,
    pub healthCapacity: s16,
    pub health: s16,
    pub magicLevel: s8,
    pub magic: s8,
    pub rupees: s16,
    pub swordHealth: u16_0,
    pub naviTimer: u16_0,
    pub magicAcquired: u8_0,
    pub unk_3B: [libc::c_char; 1],
    pub doubleMagic: u8_0,
    pub doubleDefense: u8_0,
    pub bgsFlag: u8_0,
    pub ocarinaGameRoundNum: u8_0,
    pub childEquips: ItemEquips,
    pub adultEquips: ItemEquips,
    pub unk_54: u32_0,
    pub unk_58: [libc::c_char; 14],
    pub savedSceneNum: s16,
    pub equips: ItemEquips,
    pub inventory: Inventory,
    pub sceneFlags: [SavedSceneFlags; 124],
    pub fw: FaroresWindData,
    pub unk_E8C: [libc::c_char; 16],
    pub gsFlags: [s32; 6],
    pub unk_EB4: [libc::c_char; 4],
    pub highScores: [s32; 7],
    pub eventChkInf: [u16_0; 14],
    pub itemGetInf: [u16_0; 4],
    pub infTable: [u16_0; 30],
    pub unk_F34: [libc::c_char; 4],
    pub worldMapAreaData: u32_0,
    pub unk_F3C: [libc::c_char; 4],
    pub scarecrowCustomSongSet: u8_0,
    pub scarecrowCustomSong: [u8_0; 864],
    pub unk_12A1: [libc::c_char; 36],
    pub scarecrowSpawnSongSet: u8_0,
    pub scarecrowSpawnSong: [u8_0; 128],
    pub unk_1346: [libc::c_char; 2],
    pub horseData: HorseData,
    pub checksum: u16_0,
    pub fileNum: s32,
    pub unk_1358: [libc::c_char; 4],
    pub gameMode: s32,
    pub sceneSetupIndex: s32,
    pub respawnFlag: s32,
    pub respawn: [RespawnData; 3],
    pub entranceSpeed: f32_0,
    pub entranceSound: u16_0,
    pub unk_13C2: [libc::c_char; 1],
    pub unk_13C3: u8_0,
    pub dogParams: s16,
    pub textTriggerFlags: u8_0,
    pub showTitleCard: u8_0,
    pub nayrusLoveTimer: s16,
    pub unk_13CA: [libc::c_char; 2],
    pub rupeeAccumulator: s16,
    pub timer1State: s16,
    pub timer1Value: s16,
    pub timer2State: s16,
    pub timer2Value: s16,
    pub timerX: [s16; 2],
    pub timerY: [s16; 2],
    pub unk_13DE: [libc::c_char; 2],
    pub seqId: u8_0,
    pub natureAmbienceId: u8_0,
    pub buttonStatus: [u8_0; 5],
    pub unk_13E7: u8_0,
    pub unk_13E8: u16_0,
    pub unk_13EA: u16_0,
    pub unk_13EC: u16_0,
    pub unk_13EE: u16_0,
    pub unk_13F0: s16,
    pub unk_13F2: s16,
    pub unk_13F4: s16,
    pub unk_13F6: s16,
    pub unk_13F8: s16,
    pub eventInf: [u16_0; 4],
    pub mapIndex: u16_0,
    pub minigameState: u16_0,
    pub minigameScore: u16_0,
    pub unk_1408: [libc::c_char; 1],
    pub language: u8_0,
    pub audioSetting: u8_0,
    pub unk_140B: [libc::c_char; 1],
    pub zTargetSetting: u8_0,
    pub forcedSeqId: u16_0,
    pub unk_1410: u8_0,
    pub unk_1411: [libc::c_char; 1],
    pub nextCutsceneIndex: u16_0,
    pub cutsceneTrigger: u8_0,
    pub chamberCutsceneNum: u8_0,
    pub nextDayTime: u16_0,
    pub fadeDuration: u8_0,
    pub unk_1419: u8_0,
    pub skyboxTime: u16_0,
    pub dogIsLost: u8_0,
    pub nextTransition: u8_0,
    pub unk_141E: [libc::c_char; 2],
    pub worldMapArea: s16,
    pub sunsSongState: s16,
    pub healthAccumulator: s16,
}
pub type C2RustUnnamed_2 = libc::c_uint;
pub const RESPAWN_MODE_TOP: C2RustUnnamed_2 = 2;
pub const RESPAWN_MODE_RETURN: C2RustUnnamed_2 = 1;
pub const RESPAWN_MODE_DOWN: C2RustUnnamed_2 = 0;
pub type C2RustUnnamed_3 = libc::c_uint;
pub const BTN_DISABLED: C2RustUnnamed_3 = 255;
pub const BTN_ENABLED: C2RustUnnamed_3 = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Color_RGB8 {
    pub r: u8_0,
    pub g: u8_0,
    pub b: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Color_RGBA8 {
    pub r: u8_0,
    pub g: u8_0,
    pub b: u8_0,
    pub a: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union Color_RGBA8_u32 {
    pub c2rust_unnamed: C2RustUnnamed_4,
    pub rgba: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_4 {
    pub r: u8_0,
    pub g: u8_0,
    pub b: u8_0,
    pub a: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Color_RGBAf {
    pub r: f32_0,
    pub g: f32_0,
    pub b: f32_0,
    pub a: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct LightPoint {
    pub x: s16,
    pub y: s16,
    pub z: s16,
    pub color: [u8_0; 3],
    pub drawGlow: u8_0,
    pub radius: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct LightDirectional {
    pub x: s8,
    pub y: s8,
    pub z: s8,
    pub color: [u8_0; 3],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union LightParams {
    pub point: LightPoint,
    pub dir: LightDirectional,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct LightInfo {
    pub type_0: u8_0,
    pub params: LightParams,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Lights {
    pub numLights: u8_0,
    pub l: Lightsn,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct LightNode {
    pub info: *mut LightInfo,
    pub prev: *mut LightNode,
    pub next: *mut LightNode,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct LightContext {
    pub listHead: *mut LightNode,
    pub ambientColor: [u8_0; 3],
    pub fogColor: [u8_0; 3],
    pub fogNear: s16,
    pub fogFar: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GlobalContext {
    pub state: GameState,
    pub sceneNum: s16,
    pub sceneConfig: u8_0,
    pub unk_A7: [libc::c_char; 9],
    pub sceneSegment: *mut libc::c_void,
    pub view: View,
    pub mainCamera: Camera,
    pub subCameras: [Camera; 3],
    pub cameraPtrs: [*mut Camera; 4],
    pub activeCamera: s16,
    pub nextCamera: s16,
    pub sequenceCtx: SequenceContext,
    pub lightCtx: LightContext,
    pub frameAdvCtx: FrameAdvanceContext,
    pub colCtx: CollisionContext,
    pub actorCtx: ActorContext,
    pub csCtx: CutsceneContext,
    pub soundSources: [SoundSource; 16],
    pub sramCtx: SramContext,
    pub skyboxCtx: SkyboxContext,
    pub msgCtx: MessageContext,
    pub interfaceCtx: InterfaceContext,
    pub pauseCtx: PauseContext,
    pub gameOverCtx: GameOverContext,
    pub envCtx: EnvironmentContext,
    pub animationCtx: AnimationContext,
    pub objectCtx: ObjectContext,
    pub roomCtx: RoomContext,
    pub transiActorCtx: TransitionActorContext,
    pub playerInit: Option<unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext,
                                                _: *mut FlexSkeletonHeader)
                               -> ()>,
    pub playerUpdate: Option<unsafe extern "C" fn(_: *mut Player,
                                                  _: *mut GlobalContext,
                                                  _: *mut Input) -> ()>,
    pub isPlayerDroppingFish: Option<unsafe extern "C" fn(_:
                                                              *mut GlobalContext)
                                         -> s32>,
    pub startPlayerFishing: Option<unsafe extern "C" fn(_: *mut GlobalContext)
                                       -> s32>,
    pub grabPlayer: Option<unsafe extern "C" fn(_: *mut GlobalContext,
                                                _: *mut Player) -> s32>,
    pub startPlayerCutscene: Option<unsafe extern "C" fn(_:
                                                             *mut GlobalContext,
                                                         _: *mut Actor,
                                                         _: s32) -> s32>,
    pub func_11D54: Option<unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()>,
    pub damagePlayer: Option<unsafe extern "C" fn(_: *mut GlobalContext,
                                                  _: s32) -> s32>,
    pub talkWithPlayer: Option<unsafe extern "C" fn(_: *mut GlobalContext,
                                                    _: *mut Actor) -> ()>,
    pub viewProjectionMtxF: MtxF,
    pub billboardMtxF: MtxF,
    pub billboardMtx: *mut Mtx,
    pub gameplayFrames: u32_0,
    pub linkAgeOnLoad: u8_0,
    pub unk_11DE9: u8_0,
    pub curSpawn: u8_0,
    pub numSetupActors: u8_0,
    pub numRooms: u8_0,
    pub roomList: *mut RomFile,
    pub linkActorEntry: *mut ActorEntry,
    pub setupActorList: *mut ActorEntry,
    pub unk_11DFC: *mut libc::c_void,
    pub setupEntranceList: *mut EntranceEntry,
    pub setupExitList: *mut s16,
    pub setupPathList: *mut Path,
    pub cUpElfMsgs: *mut ElfMessage,
    pub specialEffects: *mut libc::c_void,
    pub skyboxId: u8_0,
    pub sceneLoadFlag: s8,
    pub unk_11E16: s16,
    pub unk_11E18: s16,
    pub nextEntranceIndex: s16,
    pub unk_11E1C: [libc::c_char; 64],
    pub shootingGalleryStatus: s8,
    pub bombchuBowlingStatus: s8,
    pub fadeTransition: u8_0,
    pub colChkCtx: CollisionCheckContext,
    pub envFlags: [u16_0; 20],
    pub pauseBgPreRender: PreRender,
    pub unk_12174: [libc::c_char; 83],
    pub unk_121C7: s8,
    pub transitionCtx: TransitionContext,
    pub unk_12418: [libc::c_char; 3],
    pub transitionMode: u8_0,
    pub transitionFade: TransitionFade,
    pub unk_12428: [libc::c_char; 3],
    pub unk_1242B: u8_0,
    pub loadedScene: *mut SceneTableEntry,
    pub unk_12430: [libc::c_char; 232],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SceneTableEntry {
    pub sceneFile: RomFile,
    pub titleFile: RomFile,
    pub unk_10: u8_0,
    pub config: u8_0,
    pub unk_12: u8_0,
    pub unk_13: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct RomFile {
    pub vromStart: u32_0,
    pub vromEnd: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TransitionFade {
    pub fadeType: u8_0,
    pub isDone: u8_0,
    pub fadeDirection: u8_0,
    pub fadeColor: Color_RGBA8_u32,
    pub fadeTimer: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TransitionContext {
    pub c2rust_unnamed: C2RustUnnamed_5,
    pub transitionType: s32,
    pub init: Option<unsafe extern "C" fn(_: *mut libc::c_void)
                         -> *mut libc::c_void>,
    pub destroy: Option<unsafe extern "C" fn(_: *mut libc::c_void) -> ()>,
    pub update: Option<unsafe extern "C" fn(_: *mut libc::c_void, _: s32)
                           -> ()>,
    pub draw: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                          _: *mut *mut Gfx) -> ()>,
    pub start: Option<unsafe extern "C" fn(_: *mut libc::c_void) -> ()>,
    pub setType: Option<unsafe extern "C" fn(_: *mut libc::c_void, _: s32)
                            -> ()>,
    pub setColor: Option<unsafe extern "C" fn(_: *mut libc::c_void, _: u32_0)
                             -> ()>,
    pub setEnvColor: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                                 _: u32_0) -> ()>,
    pub isDone: Option<unsafe extern "C" fn(_: *mut libc::c_void) -> s32>,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_5 {
    pub fade: TransitionFade,
    pub circle: TransitionCircle,
    pub triforce: TransitionTriforce,
    pub wipe: TransitionWipe,
    pub data: [libc::c_char; 552],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TransitionWipe {
    pub color: Color_RGBA8_u32,
    pub envColor: Color_RGBA8_u32,
    pub direction: u8_0,
    pub frame: u8_0,
    pub isDone: u8_0,
    pub texX: u16_0,
    pub texY: u16_0,
    pub normal: u16_0,
    pub projection: Mtx,
    pub lookAt: Mtx,
    pub modelView: [[Mtx; 3]; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TransitionTriforce {
    pub color: Color_RGBA8_u32,
    pub transPos: f32_0,
    pub step: f32_0,
    pub state: s32,
    pub fadeDirection: s32,
    pub projection: Mtx,
    pub frame: s32,
    pub modelView: [[Mtx; 3]; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TransitionCircle {
    pub color: Color_RGBA8_u32,
    pub envColor: Color_RGBA8_u32,
    pub texX: s32,
    pub texY: s32,
    pub step: s32,
    pub unk_14: u8_0,
    pub typeColor: u8_0,
    pub speed: u8_0,
    pub effect: u8_0,
    pub isDone: u8_0,
    pub frame: u8_0,
    pub normal: u16_0,
    pub projection: Mtx,
    pub lookAt: Mtx,
    pub texture: *mut libc::c_void,
    pub modelView: [[Mtx; 3]; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PreRender {
    pub width: s32,
    pub height: s32,
    pub widthSave: s32,
    pub heightSave: s32,
    pub fbuf: *mut u16_0,
    pub fbufSave: *mut u16_0,
    pub cvgSave: *mut u8_0,
    pub zbuf: *mut u16_0,
    pub zbufSave: *mut u16_0,
    pub ulxSave: s32,
    pub ulySave: s32,
    pub lrxSave: s32,
    pub lrySave: s32,
    pub ulx: s32,
    pub uly: s32,
    pub lrx: s32,
    pub lry: s32,
    pub alloc: ListAlloc,
    pub unk_4C: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ListAlloc {
    pub prev: *mut ListAlloc,
    pub next: *mut ListAlloc,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CollisionCheckContext {
    pub colATCount: s16,
    pub sacFlags: u16_0,
    pub colAT: [*mut Collider; 50],
    pub colACCount: s32,
    pub colAC: [*mut Collider; 60],
    pub colOCCount: s32,
    pub colOC: [*mut Collider; 50],
    pub colLineCount: s32,
    pub colLine: [*mut OcLine; 3],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OcLine {
    pub line: Linef,
    pub ocFlags: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Collider {
    pub actor: *mut Actor,
    pub at: *mut Actor,
    pub ac: *mut Actor,
    pub oc: *mut Actor,
    pub atFlags: u8_0,
    pub acFlags: u8_0,
    pub ocFlags1: u8_0,
    pub ocFlags2: u8_0,
    pub colType: u8_0,
    pub shape: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Actor {
    pub id: s16,
    pub category: u8_0,
    pub room: s8,
    pub flags: u32_0,
    pub home: PosRot,
    pub params: s16,
    pub objBankIndex: s8,
    pub targetMode: s8,
    pub sfx: u16_0,
    pub world: PosRot,
    pub focus: PosRot,
    pub targetArrowOffset: f32_0,
    pub scale: Vec3f,
    pub velocity: Vec3f,
    pub speedXZ: f32_0,
    pub gravity: f32_0,
    pub minVelocityY: f32_0,
    pub wallPoly: *mut CollisionPoly,
    pub floorPoly: *mut CollisionPoly,
    pub wallBgId: u8_0,
    pub floorBgId: u8_0,
    pub wallYaw: s16,
    pub floorHeight: f32_0,
    pub yDistToWater: f32_0,
    pub bgCheckFlags: u16_0,
    pub yawTowardsPlayer: s16,
    pub xyzDistToPlayerSq: f32_0,
    pub xzDistToPlayer: f32_0,
    pub yDistToPlayer: f32_0,
    pub colChkInfo: CollisionCheckInfo,
    pub shape: ActorShape,
    pub projectedPos: Vec3f,
    pub projectedW: f32_0,
    pub uncullZoneForward: f32_0,
    pub uncullZoneScale: f32_0,
    pub uncullZoneDownward: f32_0,
    pub prevPos: Vec3f,
    pub isTargeted: u8_0,
    pub targetPriority: u8_0,
    pub textId: u16_0,
    pub freezeTimer: u16_0,
    pub colorFilterParams: u16_0,
    pub colorFilterTimer: u8_0,
    pub isDrawn: u8_0,
    pub dropFlag: u8_0,
    pub naviEnemyId: u8_0,
    pub parent: *mut Actor,
    pub child: *mut Actor,
    pub prev: *mut Actor,
    pub next: *mut Actor,
    pub init: ActorFunc,
    pub destroy: ActorFunc,
    pub update: ActorFunc,
    pub draw: ActorFunc,
    pub overlayEntry: *mut ActorOverlay,
    pub dbgPad: [libc::c_char; 16],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ActorOverlay {
    pub vromStart: u32_0,
    pub vromEnd: u32_0,
    pub vramStart: *mut libc::c_void,
    pub vramEnd: *mut libc::c_void,
    pub loadedRamAddr: *mut libc::c_void,
    pub initInfo: *mut ActorInit,
    pub name: *mut libc::c_char,
    pub allocType: u16_0,
    pub numLoaded: s8,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ActorInit {
    pub id: s16,
    pub category: u8_0,
    pub flags: u32_0,
    pub objectId: s16,
    pub instanceSize: u32_0,
    pub init: ActorFunc,
    pub destroy: ActorFunc,
    pub update: ActorFunc,
    pub draw: ActorFunc,
}
pub type ActorFunc
    =
    Option<unsafe extern "C" fn(_: *mut Actor, _: *mut GlobalContext) -> ()>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ActorShape {
    pub rot: Vec3s,
    pub face: s16,
    pub yOffset: f32_0,
    pub shadowDraw: ActorShadowFunc,
    pub shadowScale: f32_0,
    pub shadowAlpha: u8_0,
    pub feetFloorFlags: u8_0,
    pub feetPos: [Vec3f; 2],
}
pub type ActorShadowFunc
    =
    Option<unsafe extern "C" fn(_: *mut Actor, _: *mut Lights,
                                _: *mut GlobalContext) -> ()>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CollisionCheckInfo {
    pub damageTable: *mut DamageTable,
    pub displacement: Vec3f,
    pub cylRadius: s16,
    pub cylHeight: s16,
    pub cylYShift: s16,
    pub mass: u8_0,
    pub health: u8_0,
    pub damage: u8_0,
    pub damageEffect: u8_0,
    pub atHitEffect: u8_0,
    pub acHitEffect: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct DamageTable {
    pub table: [u8_0; 32],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CollisionPoly {
    pub type_0: u16_0,
    pub c2rust_unnamed: C2RustUnnamed_6,
    pub normal: Vec3s,
    pub dist: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_6 {
    pub vtxData: [u16_0; 3],
    pub c2rust_unnamed: C2RustUnnamed_7,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_7 {
    pub flags_vIA: u16_0,
    pub flags_vIB: u16_0,
    pub vIC: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PosRot {
    pub pos: Vec3f,
    pub rot: Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ElfMessage {
    pub byte0: u8_0,
    pub byte1: u8_0,
    pub byte2: u8_0,
    pub byte3: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Path {
    pub count: u8_0,
    pub points: *mut Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct EntranceEntry {
    pub spawn: u8_0,
    pub room: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ActorEntry {
    pub id: s16,
    pub pos: Vec3s,
    pub rot: Vec3s,
    pub params: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Player {
    pub actor: Actor,
    pub currentTunic: s8,
    pub currentSword: s8,
    pub currentShield: s8,
    pub currentBoots: s8,
    pub heldItemButton: s8,
    pub heldItemActionParam: s8,
    pub heldItemId: u8_0,
    pub prevBoots: s8,
    pub itemActionParam: s8,
    pub unk_155: [libc::c_char; 3],
    pub modelGroup: u8_0,
    pub nextModelGroup: u8_0,
    pub unk_15A: s8,
    pub modelAnimType: u8_0,
    pub leftHandType: u8_0,
    pub rightHandType: u8_0,
    pub sheathType: u8_0,
    pub currentMask: u8_0,
    pub rightHandDLists: *mut *mut Gfx,
    pub leftHandDLists: *mut *mut Gfx,
    pub sheathDLists: *mut *mut Gfx,
    pub waistDLists: *mut *mut Gfx,
    pub giObjectLoading: u8_0,
    pub giObjectDmaRequest: DmaRequest,
    pub giObjectLoadQueue: OSMesgQueue,
    pub giObjectLoadMsg: OSMesg,
    pub giObjectSegment: *mut libc::c_void,
    pub skelAnime: SkelAnime,
    pub jointTable: [Vec3s; 24],
    pub morphTable: [Vec3s; 24],
    pub blendTable: [Vec3s; 24],
    pub unk_3A8: [s16; 2],
    pub heldActor: *mut Actor,
    pub leftHandPos: Vec3f,
    pub unk_3BC: Vec3s,
    pub unk_3C4: *mut Actor,
    pub unk_3C8: Vec3f,
    pub unk_3D4: [libc::c_char; 88],
    pub doorType: s8,
    pub doorDirection: s8,
    pub doorTimer: s16,
    pub doorActor: *mut Actor,
    pub getItemId: s8,
    pub getItemDirection: u16_0,
    pub interactRangeActor: *mut Actor,
    pub mountSide: s8,
    pub unk_43D: [libc::c_char; 3],
    pub rideActor: *mut Actor,
    pub csMode: u8_0,
    pub prevCsMode: u8_0,
    pub unk_446: u8_0,
    pub unk_447: u8_0,
    pub unk_448: *mut Actor,
    pub unk_44C: [libc::c_char; 4],
    pub unk_450: Vec3f,
    pub unk_45C: Vec3f,
    pub unk_468: [libc::c_char; 2],
    pub unk_46A: s16,
    pub unk_46C: s16,
    pub unk_46E: [libc::c_char; 42],
    pub cylinder: ColliderCylinder,
    pub swordQuads: [ColliderQuad; 2],
    pub shieldQuad: ColliderQuad,
    pub unk_664: *mut Actor,
    pub unk_668: [libc::c_char; 4],
    pub unk_66C: s32,
    pub swordEffectIndex: s32,
    pub func_674: PlayerFunc674,
    pub ageProperties: *mut PlayerAgeProperties,
    pub stateFlags1: u32_0,
    pub stateFlags2: u32_0,
    pub unk_684: *mut Actor,
    pub boomerangActor: *mut Actor,
    pub naviActor: *mut Actor,
    pub naviTextId: s16,
    pub stateFlags3: u8_0,
    pub exchangeItemId: s8,
    pub targetActor: *mut Actor,
    pub targetActorDistance: f32_0,
    pub unk_69C: [libc::c_char; 4],
    pub unk_6A0: f32_0,
    pub unk_6A4: f32_0,
    pub unk_6A8: *mut Actor,
    pub unk_6AC: s8,
    pub unk_6AD: u8_0,
    pub unk_6AE: u16_0,
    pub unk_6B0: s16,
    pub unk_6B4: [libc::c_char; 4],
    pub unk_6B6: s16,
    pub unk_6B8: s16,
    pub unk_6BA: s16,
    pub unk_6BC: s16,
    pub unk_6BE: s16,
    pub unk_6C0: s16,
    pub unk_6C2: s16,
    pub unk_6C4: f32_0,
    pub skelAnime2: SkelAnime,
    pub jointTable2: [Vec3s; 24],
    pub morphTable2: [Vec3s; 24],
    pub func_82C: PlayerFunc82C,
    pub unk_830: f32_0,
    pub unk_834: s16,
    pub unk_836: s8,
    pub unk_837: u8_0,
    pub linearVelocity: f32_0,
    pub currentYaw: s16,
    pub targetYaw: s16,
    pub unk_840: u16_0,
    pub swordAnimation: s8,
    pub swordState: s8,
    pub unk_844: s8,
    pub unk_845: u8_0,
    pub unk_846: u8_0,
    pub unk_847: [s8; 4],
    pub unk_84B: [s8; 4],
    pub unk_84F: s8,
    pub unk_850: s16,
    pub unk_854: f32_0,
    pub unk_858: f32_0,
    pub unk_85C: f32_0,
    pub unk_860: s16,
    pub unk_862: s8,
    pub unk_864: f32_0,
    pub unk_868: f32_0,
    pub unk_86C: f32_0,
    pub unk_870: f32_0,
    pub unk_874: f32_0,
    pub unk_878: f32_0,
    pub unk_87C: s16,
    pub unk_87E: s16,
    pub unk_880: f32_0,
    pub wallHeight: f32_0,
    pub wallDistance: f32_0,
    pub unk_88C: u8_0,
    pub unk_88D: u8_0,
    pub unk_88E: u8_0,
    pub unk_88F: u8_0,
    pub unk_890: u8_0,
    pub shockTimer: u8_0,
    pub unk_892: u8_0,
    pub hoverBootsTimer: u8_0,
    pub fallStartHeight: s16,
    pub fallDistance: s16,
    pub unk_898: s16,
    pub unk_89A: s16,
    pub unk_89C: s16,
    pub unk_89E: u16_0,
    pub unk_8A0: u8_0,
    pub unk_8A1: u8_0,
    pub unk_8A2: s16,
    pub unk_8A4: f32_0,
    pub unk_8A8: f32_0,
    pub windSpeed: f32_0,
    pub windDirection: s16,
    pub swordInfo: [WeaponInfo; 3],
    pub bodyPartsPos: [Vec3f; 18],
    pub mf_9E0: MtxF,
    pub shieldMf: MtxF,
    pub isBurning: u8_0,
    pub flameTimers: [u8_0; 18],
    pub unk_A73: u8_0,
    pub func_A74: PlayerFuncA74,
    pub invincibilityTimer: s8,
    pub unk_A79: u8_0,
    pub unk_A7A: u8_0,
    pub unk_A7B: u8_0,
    pub unk_A7C: f32_0,
    pub unk_A80: s16,
    pub unk_A82: u16_0,
    pub unk_A84: s16,
    pub unk_A86: s8,
    pub unk_A87: u8_0,
    pub unk_A88: Vec3f,
}
pub type PlayerFuncA74
    =
    Option<unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player) -> ()>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct WeaponInfo {
    pub active: s32,
    pub tip: Vec3f,
    pub base: Vec3f,
}
pub type PlayerFunc82C
    =
    Option<unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
               -> s32>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SkelAnime {
    pub limbCount: u8_0,
    pub mode: u8_0,
    pub dListCount: u8_0,
    pub taper: s8,
    pub skeleton: *mut *mut libc::c_void,
    pub animation: *mut libc::c_void,
    pub startFrame: f32_0,
    pub endFrame: f32_0,
    pub animLength: f32_0,
    pub curFrame: f32_0,
    pub playSpeed: f32_0,
    pub jointTable: *mut Vec3s,
    pub morphTable: *mut Vec3s,
    pub morphWeight: f32_0,
    pub morphRate: f32_0,
    pub update: Option<unsafe extern "C" fn() -> s32>,
    pub initFlags: s8,
    pub moveFlags: u8_0,
    pub prevRot: s16,
    pub prevTransl: Vec3s,
    pub baseTransl: Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PlayerAgeProperties {
    pub unk_00: f32_0,
    pub unk_04: f32_0,
    pub unk_08: f32_0,
    pub unk_0C: f32_0,
    pub unk_10: f32_0,
    pub unk_14: f32_0,
    pub unk_18: f32_0,
    pub unk_1C: f32_0,
    pub unk_20: f32_0,
    pub unk_24: f32_0,
    pub unk_28: f32_0,
    pub unk_2C: f32_0,
    pub unk_30: f32_0,
    pub unk_34: f32_0,
    pub unk_38: f32_0,
    pub unk_3C: f32_0,
    pub unk_40: f32_0,
    pub unk_44: Vec3s,
    pub unk_4A: [Vec3s; 4],
    pub unk_62: [Vec3s; 4],
    pub unk_7A: [Vec3s; 2],
    pub unk_86: [Vec3s; 2],
    pub unk_92: u16_0,
    pub unk_94: u16_0,
    pub unk_98: *mut LinkAnimationHeader,
    pub unk_9C: *mut LinkAnimationHeader,
    pub unk_A0: *mut LinkAnimationHeader,
    pub unk_A4: *mut LinkAnimationHeader,
    pub unk_A8: *mut LinkAnimationHeader,
    pub unk_AC: [*mut LinkAnimationHeader; 4],
    pub unk_BC: [*mut LinkAnimationHeader; 2],
    pub unk_C4: [*mut LinkAnimationHeader; 2],
    pub unk_CC: [*mut LinkAnimationHeader; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct LinkAnimationHeader {
    pub common: AnimationHeaderCommon,
    pub segment: *mut libc::c_void,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimationHeaderCommon {
    pub frameCount: s16,
}
pub type PlayerFunc674
    =
    Option<unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext) -> ()>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderQuad {
    pub base: Collider,
    pub info: ColliderInfo,
    pub dim: ColliderQuadDim,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderQuadDim {
    pub quad: [Vec3f; 4],
    pub dcMid: Vec3s,
    pub baMid: Vec3s,
    pub acDist: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderInfo {
    pub toucher: ColliderTouch,
    pub bumper: ColliderBump,
    pub elemType: u8_0,
    pub toucherFlags: u8_0,
    pub bumperFlags: u8_0,
    pub ocElemFlags: u8_0,
    pub atHit: *mut Collider,
    pub acHit: *mut Collider,
    pub atHitInfo: *mut ColliderInfo,
    pub acHitInfo: *mut ColliderInfo,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderBump {
    pub dmgFlags: u32_0,
    pub effect: u8_0,
    pub defense: u8_0,
    pub hitPos: Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderTouch {
    pub dmgFlags: u32_0,
    pub effect: u8_0,
    pub damage: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderCylinder {
    pub base: Collider,
    pub info: ColliderInfo,
    pub dim: Cylinder16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct DmaRequest {
    pub vromAddr: u32_0,
    pub dramAddr: *mut libc::c_void,
    pub size: u32_0,
    pub filename: *const libc::c_char,
    pub line: s32,
    pub unk_14: s32,
    pub notifyQueue: *mut OSMesgQueue,
    pub notifyMsg: OSMesg,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Input {
    pub cur: OSContPad,
    pub prev: OSContPad,
    pub press: OSContPad,
    pub rel: OSContPad,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct FlexSkeletonHeader {
    pub sh: SkeletonHeader,
    pub dListCount: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SkeletonHeader {
    pub segment: *mut *mut libc::c_void,
    pub limbCount: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TransitionActorContext {
    pub numActors: u8_0,
    pub list: *mut TransitionActorEntry,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TransitionActorEntry {
    pub sides: [C2RustUnnamed_8; 2],
    pub id: s16,
    pub pos: Vec3s,
    pub rotY: s16,
    pub params: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_8 {
    pub room: s8,
    pub effects: s8,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct RoomContext {
    pub curRoom: Room,
    pub prevRoom: Room,
    pub bufPtrs: [*mut libc::c_void; 2],
    pub unk_30: u8_0,
    pub status: s8,
    pub unk_34: *mut libc::c_void,
    pub dmaRequest: DmaRequest,
    pub loadQueue: OSMesgQueue,
    pub loadMsg: OSMesg,
    pub unk_74: [s16; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Room {
    pub num: s8,
    pub unk_01: u8_0,
    pub unk_02: u8_0,
    pub unk_03: u8_0,
    pub echo: s8,
    pub showInvisActors: u8_0,
    pub mesh: *mut Mesh,
    pub segment: *mut libc::c_void,
    pub unk_10: [libc::c_char; 4],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union Mesh {
    pub polygon: Polygon,
    pub polygon0: PolygonType0,
    pub polygon1: PolygonType1,
    pub polygon2: PolygonType2,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PolygonType2 {
    pub type_0: u8_0,
    pub num: u8_0,
    pub start: *mut libc::c_void,
    pub end: *mut libc::c_void,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PolygonType1 {
    pub type_0: u8_0,
    pub format: u8_0,
    pub dlist: *mut Gfx,
    pub c2rust_unnamed: C2RustUnnamed_9,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_9 {
    pub single: C2RustUnnamed_11,
    pub multi: C2RustUnnamed_10,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_10 {
    pub count: u8_0,
    pub list: *mut BgImage,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct BgImage {
    pub unk_00: u16_0,
    pub id: u8_0,
    pub source: u32_0,
    pub unk_0C: u32_0,
    pub tlut: u32_0,
    pub width: u16_0,
    pub height: u16_0,
    pub fmt: u8_0,
    pub siz: u8_0,
    pub mode0: u16_0,
    pub tlutCount: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_11 {
    pub source: *mut libc::c_void,
    pub unk_0C: u32_0,
    pub tlut: *mut libc::c_void,
    pub width: u16_0,
    pub height: u16_0,
    pub fmt: u8_0,
    pub siz: u8_0,
    pub mode0: u16_0,
    pub tlutCount: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PolygonType0 {
    pub type_0: u8_0,
    pub num: u8_0,
    pub start: *mut libc::c_void,
    pub end: *mut libc::c_void,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Polygon {
    pub type_0: u8_0,
    pub num: u8_0,
    pub start: *mut libc::c_void,
    pub end: *mut libc::c_void,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ObjectContext {
    pub spaceStart: *mut libc::c_void,
    pub spaceEnd: *mut libc::c_void,
    pub num: u8_0,
    pub unk_09: u8_0,
    pub mainKeepIndex: u8_0,
    pub subKeepIndex: u8_0,
    pub status: [ObjectStatus; 19],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ObjectStatus {
    pub id: s16,
    pub segment: *mut libc::c_void,
    pub dmaRequest: DmaRequest,
    pub loadQueue: OSMesgQueue,
    pub loadMsg: OSMesg,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimationContext {
    pub animationCount: s16,
    pub entries: [AnimationEntry; 50],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimationEntry {
    pub type_0: u8_0,
    pub data: AnimationEntryData,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union AnimationEntryData {
    pub load: AnimEntryLoadFrame,
    pub copy: AnimEntryCopyAll,
    pub interp: AnimEntryInterp,
    pub copy1: AnimEntryCopyTrue,
    pub copy0: AnimEntryCopyFalse,
    pub move_0: AnimEntryMoveActor,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimEntryMoveActor {
    pub actor: *mut Actor,
    pub skelAnime: *mut SkelAnime,
    pub unk_08: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimEntryCopyFalse {
    pub queueFlag: u8_0,
    pub vecCount: u8_0,
    pub dst: *mut Vec3s,
    pub src: *mut Vec3s,
    pub copyFlag: *mut u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimEntryCopyTrue {
    pub queueFlag: u8_0,
    pub vecCount: u8_0,
    pub dst: *mut Vec3s,
    pub src: *mut Vec3s,
    pub copyFlag: *mut u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimEntryInterp {
    pub queueFlag: u8_0,
    pub vecCount: u8_0,
    pub base: *mut Vec3s,
    pub mod_0: *mut Vec3s,
    pub weight: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimEntryCopyAll {
    pub queueFlag: u8_0,
    pub vecCount: u8_0,
    pub dst: *mut Vec3s,
    pub src: *mut Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimEntryLoadFrame {
    pub req: DmaRequest,
    pub msgQueue: OSMesgQueue,
    pub msg: OSMesg,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct EnvironmentContext {
    pub unk_00: [libc::c_char; 2],
    pub timeIncrement: u16_0,
    pub sunPos: Vec3f,
    pub skybox1Index: u8_0,
    pub skybox2Index: u8_0,
    pub unk_12: [libc::c_char; 1],
    pub skyboxBlend: u8_0,
    pub unk_14: [libc::c_char; 1],
    pub skyboxDisabled: u8_0,
    pub sunMoonDisabled: u8_0,
    pub unk_17: u8_0,
    pub unk_18: u8_0,
    pub unk_19: u8_0,
    pub unk_1A: u16_0,
    pub unk_1C: [libc::c_char; 2],
    pub indoors: u8_0,
    pub unk_1F: u8_0,
    pub unk_20: u8_0,
    pub unk_21: u8_0,
    pub unk_22: u16_0,
    pub unk_24: u16_0,
    pub unk_26: [libc::c_char; 2],
    pub dirLight1: LightInfo,
    pub dirLight2: LightInfo,
    pub skyboxDmaState: s8,
    pub dmaRequest: DmaRequest,
    pub loadQueue: OSMesgQueue,
    pub loadMsg: OSMesg,
    pub unk_84: f32_0,
    pub unk_88: f32_0,
    pub adjAmbientColor: [s16; 3],
    pub adjLight1Color: [s16; 3],
    pub adjFogColor: [s16; 3],
    pub adjFogNear: s16,
    pub adjFogFar: s16,
    pub unk_A2: [libc::c_char; 6],
    pub windDirection: Vec3s,
    pub windSpeed: f32_0,
    pub numLightSettings: u8_0,
    pub lightSettingsList: *mut EnvLightSettings,
    pub blendIndoorLights: u8_0,
    pub unk_BD: u8_0,
    pub unk_BE: u8_0,
    pub unk_BF: u8_0,
    pub lightSettings: EnvLightSettings,
    pub unk_D6: u16_0,
    pub unk_D8: f32_0,
    pub unk_DC: u8_0,
    pub gloomySkyMode: u8_0,
    pub unk_DE: u8_0,
    pub lightningMode: u8_0,
    pub unk_E0: u8_0,
    pub fillScreen: u8_0,
    pub screenFillColor: [u8_0; 4],
    pub sandstormState: u8_0,
    pub sandstormPrimA: u8_0,
    pub sandstormEnvA: u8_0,
    pub customSkyboxFilter: u8_0,
    pub skyboxFilterColor: [u8_0; 4],
    pub unk_EE: [u8_0; 4],
    pub unk_F2: [u8_0; 4],
    pub unk_F6: [libc::c_char; 6],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct EnvLightSettings {
    pub ambientColor: [u8_0; 3],
    pub light1Dir: [s8; 3],
    pub light1Color: [u8_0; 3],
    pub light2Dir: [s8; 3],
    pub light2Color: [u8_0; 3],
    pub fogColor: [u8_0; 3],
    pub fogNear: s16,
    pub fogFar: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GameOverContext {
    pub state: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PauseContext {
    pub view: View,
    pub iconItemSegment: *mut u8_0,
    pub iconItem24Segment: *mut u8_0,
    pub iconItemAltSegment: *mut u8_0,
    pub iconItemLangSegment: *mut u8_0,
    pub nameSegment: *mut u8_0,
    pub playerSegment: *mut u8_0,
    pub unk_140: [libc::c_char; 4],
    pub itemPageVtx: *mut Vtx,
    pub equipPageVtx: *mut Vtx,
    pub mapPageVtx: *mut Vtx,
    pub questPageVtx: *mut Vtx,
    pub infoPanelVtx: *mut Vtx,
    pub itemVtx: *mut Vtx,
    pub equipVtx: *mut Vtx,
    pub unk_160: [libc::c_char; 4],
    pub questVtx: *mut Vtx,
    pub cursorVtx: *mut Vtx,
    pub saveVtx: *mut Vtx,
    pub unk_170: [libc::c_char; 36],
    pub ocarinaStaff: *mut OcarinaStaff,
    pub unk_198: [libc::c_char; 32],
    pub loadQueue: OSMesgQueue,
    pub loadMsg: OSMesg,
    pub state: u16_0,
    pub debugState: u16_0,
    pub eye: Vec3f,
    pub unk_1E4: u16_0,
    pub mode: u16_0,
    pub pageIndex: u16_0,
    pub unk_1EA: u16_0,
    pub unk_1EC: u16_0,
    pub unk_1F0: f32_0,
    pub unk_1F4: f32_0,
    pub unk_1F8: f32_0,
    pub unk_1FC: f32_0,
    pub unk_200: f32_0,
    pub unk_204: f32_0,
    pub alpha: u16_0,
    pub offsetY: s16,
    pub unk_20C: [libc::c_char; 8],
    pub stickRelX: s16,
    pub stickRelY: s16,
    pub cursorPoint: [s16; 5],
    pub cursorX: [s16; 5],
    pub cursorY: [s16; 5],
    pub dungeonMapSlot: s16,
    pub cursorSpecialPos: s16,
    pub pageSwitchTimer: s16,
    pub namedItem: u16_0,
    pub cursorItem: [u16_0; 4],
    pub cursorSlot: [u16_0; 4],
    pub equipTargetItem: u16_0,
    pub equipTargetSlot: u16_0,
    pub equipTargetCBtn: u16_0,
    pub equipAnimX: s16,
    pub equipAnimY: s16,
    pub equipAnimAlpha: s16,
    pub infoPanelOffsetY: s16,
    pub nameDisplayTimer: u16_0,
    pub nameColorSet: u16_0,
    pub cursorColorSet: s16,
    pub promptChoice: s16,
    pub ocarinaSongIdx: s16,
    pub worldMapPoints: [u8_0; 20],
    pub tradeQuestLocation: u8_0,
    pub playerSkelAnime: SkelAnime,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OcarinaStaff {
    pub noteIdx: u8_0,
    pub state: u8_0,
    pub pos: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct View {
    pub magic: s32,
    pub gfxCtx: *mut GraphicsContext,
    pub viewport: Viewport,
    pub fovy: f32_0,
    pub zNear: f32_0,
    pub zFar: f32_0,
    pub scale: f32_0,
    pub eye: Vec3f,
    pub lookAt: Vec3f,
    pub up: Vec3f,
    pub vp: Vp,
    pub projection: Mtx,
    pub viewing: Mtx,
    pub projectionPtr: *mut Mtx,
    pub viewingPtr: *mut Mtx,
    pub unk_E8: Vec3f,
    pub unk_F4: Vec3f,
    pub unk_100: f32_0,
    pub unk_104: Vec3f,
    pub unk_110: Vec3f,
    pub normal: u16_0,
    pub flags: s32,
    pub unk_124: s32,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Viewport {
    pub topY: s32,
    pub bottomY: s32,
    pub leftX: s32,
    pub rightX: s32,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraphicsContext {
    pub polyOpaBuffer: *mut Gfx,
    pub polyXluBuffer: *mut Gfx,
    pub unk_008: [libc::c_char; 8],
    pub overlayBuffer: *mut Gfx,
    pub unk_014: u32_0,
    pub unk_018: [libc::c_char; 32],
    pub msgBuff: [OSMesg; 8],
    pub schedMsgQ: *mut OSMesgQueue,
    pub queue: OSMesgQueue,
    pub unk_074: [libc::c_char; 4],
    pub task: OSScTask,
    pub unk_0D0: [libc::c_char; 224],
    pub workBuffer: *mut Gfx,
    pub work: TwoHeadGfxArena,
    pub unk_01C4: [libc::c_char; 192],
    pub viMode: *mut OSViMode,
    pub unk_0288: [libc::c_char; 32],
    pub overlay: TwoHeadGfxArena,
    pub polyOpa: TwoHeadGfxArena,
    pub polyXlu: TwoHeadGfxArena,
    pub gfxPoolIdx: u32_0,
    pub curFrameBuffer: *mut u16_0,
    pub unk_2E0: [libc::c_char; 4],
    pub viFeatures: u32_0,
    pub fbIdx: s32,
    pub callback: Option<unsafe extern "C" fn(_: *mut GraphicsContext,
                                              _: *mut libc::c_void) -> ()>,
    pub callbackParam: *mut libc::c_void,
    pub xScale: f32_0,
    pub yScale: f32_0,
    pub unk_2FC: [libc::c_char; 4],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TwoHeadGfxArena {
    pub size: u32_0,
    pub bufp: *mut Gfx,
    pub p: *mut Gfx,
    pub d: *mut Gfx,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSScTask {
    pub next: *mut OSScTask,
    pub state: u32_0,
    pub flags: u32_0,
    pub framebuffer: *mut CfbInfo,
    pub list: OSTask,
    pub msgQ: *mut OSMesgQueue,
    pub msg: OSMesg,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CfbInfo {
    pub fb1: *mut u16_0,
    pub swapBuffer: *mut u16_0,
    pub viMode: *mut OSViMode,
    pub features: u32_0,
    pub unk_10: u8_0,
    pub updateRate: s8,
    pub updateRate2: s8,
    pub unk_13: u8_0,
    pub xScale: f32_0,
    pub yScale: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct InterfaceContext {
    pub view: View,
    pub actionVtx: *mut Vtx,
    pub beatingHeartVtx: *mut Vtx,
    pub parameterSegment: *mut u8_0,
    pub doActionSegment: *mut u8_0,
    pub iconItemSegment: *mut u8_0,
    pub mapSegment: *mut u8_0,
    pub mapPalette: [u8_0; 32],
    pub dmaRequest_160: DmaRequest,
    pub dmaRequest_180: DmaRequest,
    pub unk_1A0: [libc::c_char; 32],
    pub loadQueue: OSMesgQueue,
    pub loadMsg: OSMesg,
    pub viewport: Viewport,
    pub unk_1EC: s16,
    pub unk_1EE: u16_0,
    pub unk_1F0: u16_0,
    pub unk_1F4: f32_0,
    pub naviCalling: s16,
    pub unk_1FA: s16,
    pub unk_1FC: s16,
    pub unk_1FE: s16,
    pub unk_200: s16,
    pub beatingHeartPrim: [s16; 3],
    pub beatingHeartEnv: [s16; 3],
    pub heartsPrimR: [s16; 2],
    pub heartsPrimG: [s16; 2],
    pub heartsPrimB: [s16; 2],
    pub heartsEnvR: [s16; 2],
    pub heartsEnvG: [s16; 2],
    pub heartsEnvB: [s16; 2],
    pub unk_226: s16,
    pub unk_228: s16,
    pub unk_22A: s16,
    pub unk_22C: s16,
    pub unk_22E: s16,
    pub unk_230: s16,
    pub counterDigits: [s16; 4],
    pub numHorseBoosts: u8_0,
    pub unk_23C: u16_0,
    pub hbaAmmo: u16_0,
    pub unk_240: u16_0,
    pub unk_242: u16_0,
    pub unk_244: u16_0,
    pub aAlpha: u16_0,
    pub bAlpha: u16_0,
    pub cLeftAlpha: u16_0,
    pub cDownAlpha: u16_0,
    pub cRightAlpha: u16_0,
    pub healthAlpha: u16_0,
    pub magicAlpha: u16_0,
    pub minimapAlpha: u16_0,
    pub startAlpha: s16,
    pub unk_258: s16,
    pub unk_25A: s16,
    pub mapRoomNum: s16,
    pub mapPaletteIndex: s16,
    pub unk_260: u8_0,
    pub unk_261: u8_0,
    pub restrictions: C2RustUnnamed_12,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_12 {
    pub hGauge: u8_0,
    pub bButton: u8_0,
    pub aButton: u8_0,
    pub bottles: u8_0,
    pub tradeItems: u8_0,
    pub hookshot: u8_0,
    pub ocarina: u8_0,
    pub warpSongs: u8_0,
    pub sunsSong: u8_0,
    pub farores: u8_0,
    pub dinsNayrus: u8_0,
    pub all: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct MessageContext {
    pub view: View,
    pub font: Font,
    pub textboxSegment: *mut libc::c_void,
    pub unk_E2B4: [libc::c_char; 4],
    pub ocarinaStaff: *mut OcarinaStaff,
    pub unk_E2BC: [libc::c_char; 60],
    pub textId: u16_0,
    pub choiceTextId: u16_0,
    pub textBoxProperties: u8_0,
    pub textBoxType: u8_0,
    pub textBoxPos: u8_0,
    pub msgLength: s32,
    pub msgMode: u8_0,
    pub unk_E305: [libc::c_char; 1],
    pub msgBufDecoded: [u8_0; 200],
    pub msgBufPos: u16_0,
    pub unk_E3D0: u16_0,
    pub textDrawPos: u16_0,
    pub decodedTextLen: u16_0,
    pub textUnskippable: u16_0,
    pub textPosX: s16,
    pub textPosY: s16,
    pub textColorR: s16,
    pub textColorG: s16,
    pub textColorB: s16,
    pub textColorAlpha: s16,
    pub textboxEndType: u8_0,
    pub choiceIndex: u8_0,
    pub choiceNum: u8_0,
    pub stateTimer: u8_0,
    pub textDelayTimer: u16_0,
    pub textDelay: u16_0,
    pub lastPlayedSong: u16_0,
    pub ocarinaMode: u16_0,
    pub ocarinaAction: u16_0,
    pub unk_E3F2: u16_0,
    pub unk_E3F4: u16_0,
    pub textboxBackgroundIdx: u16_0,
    pub textboxBackgroundForeColorIdx: u8_0,
    pub textboxBackgroundBackColorIdx: u8_0,
    pub textboxBackgroundYOffsetIdx: u8_0,
    pub textboxBackgroundUnkArg: u8_0,
    pub unk_E3FC: [libc::c_char; 2],
    pub textboxColorRed: s16,
    pub textboxColorGreen: s16,
    pub textboxColorBlue: s16,
    pub textboxColorAlphaTarget: s16,
    pub textboxColorAlphaCurrent: s16,
    pub talkActor: *mut Actor,
    pub disableWarpSongs: s16,
    pub unk_E40E: s16,
    pub lastOcaNoteIdx: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Font {
    pub msgOffset: u32_0,
    pub msgLength: u32_0,
    pub charTexBuf: [u8_0; 15360],
    pub iconBuf: [u8_0; 128],
    pub fontBuf: [u8_0; 40960],
    pub c2rust_unnamed: C2RustUnnamed_13,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_13 {
    pub msgBuf: [libc::c_char; 1280],
    pub msgBufWide: [u16_0; 640],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SkyboxContext {
    pub unk_00: [libc::c_char; 296],
    pub staticSegments: [*mut libc::c_void; 2],
    pub palettes: *mut [u16_0; 256],
    pub dListBuf: *mut [Gfx; 150],
    pub unk_138: *mut Gfx,
    pub roomVtx: *mut Vtx,
    pub unk_140: s16,
    pub rot: Vec3f,
    pub unk_150: [libc::c_char; 16],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SramContext {
    pub readBuff: *mut u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SoundSource {
    pub countdown: u16_0,
    pub originPos: Vec3f,
    pub relativePos: Vec3f,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CutsceneContext {
    pub unk_00: [libc::c_char; 4],
    pub segment: *mut libc::c_void,
    pub state: u8_0,
    pub unk_0C: f32_0,
    pub frames: u16_0,
    pub unk_12: u16_0,
    pub unk_14: s32,
    pub unk_18: u16_0,
    pub unk_1A: u8_0,
    pub unk_1B: u8_0,
    pub cameraFocus: *mut CutsceneCameraPoint,
    pub cameraPosition: *mut CutsceneCameraPoint,
    pub linkAction: *mut CsCmdActorAction,
    pub npcActions: [*mut CsCmdActorAction; 10],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CsCmdActorAction {
    pub action: u16_0,
    pub startFrame: u16_0,
    pub endFrame: u16_0,
    pub c2rust_unnamed: C2RustUnnamed_14,
    pub startPos: Vec3i,
    pub endPos: Vec3i,
    pub normal: Vec3i,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_14 {
    pub rot: Vec3s,
    pub urot: Vec3us,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CutsceneCameraPoint {
    pub continueFlag: s8,
    pub cameraRoll: s8,
    pub nextPointFrame: u16_0,
    pub viewAngle: f32_0,
    pub pos: Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ActorContext {
    pub freezeFlashTimer: u8_0,
    pub unk_01: [libc::c_char; 1],
    pub unk_02: u8_0,
    pub unk_03: u8_0,
    pub unk_04: [libc::c_char; 4],
    pub total: u8_0,
    pub unk_09: [libc::c_char; 3],
    pub actorLists: [ActorListEntry; 12],
    pub targetCtx: TargetContext,
    pub flags: C2RustUnnamed_15,
    pub titleCtx: TitleCardContext,
    pub unk_138: [libc::c_char; 4],
    pub absoluteSpace: *mut libc::c_void,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TitleCardContext {
    pub texture: *mut libc::c_void,
    pub x: s16,
    pub y: s16,
    pub width: u8_0,
    pub height: u8_0,
    pub durationTimer: u8_0,
    pub delayTimer: u8_0,
    pub alpha: s16,
    pub intensity: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_15 {
    pub swch: u32_0,
    pub tempSwch: u32_0,
    pub unk0: u32_0,
    pub unk1: u32_0,
    pub chest: u32_0,
    pub clear: u32_0,
    pub tempClear: u32_0,
    pub collect: u32_0,
    pub tempCollect: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TargetContext {
    pub naviRefPos: Vec3f,
    pub targetCenterPos: Vec3f,
    pub naviInner: Color_RGBAf,
    pub naviOuter: Color_RGBAf,
    pub arrowPointedActor: *mut Actor,
    pub targetedActor: *mut Actor,
    pub unk_40: f32_0,
    pub unk_44: f32_0,
    pub unk_48: s16,
    pub activeCategory: u8_0,
    pub unk_4B: u8_0,
    pub unk_4C: s8,
    pub unk_4D: [libc::c_char; 3],
    pub arr_50: [TargetContextEntry; 3],
    pub unk_8C: *mut Actor,
    pub bgmEnemy: *mut Actor,
    pub unk_94: *mut Actor,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TargetContextEntry {
    pub pos: Vec3f,
    pub unk_0C: f32_0,
    pub color: Color_RGB8,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ActorListEntry {
    pub length: s32,
    pub head: *mut Actor,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CollisionContext {
    pub colHeader: *mut CollisionHeader,
    pub minBounds: Vec3f,
    pub maxBounds: Vec3f,
    pub subdivAmount: Vec3i,
    pub subdivLength: Vec3f,
    pub subdivLengthInv: Vec3f,
    pub lookupTbl: *mut StaticLookup,
    pub polyNodes: SSNodeList,
    pub dyna: DynaCollisionContext,
    pub memSize: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct DynaCollisionContext {
    pub bitFlag: u8_0,
    pub bgActors: [BgActor; 50],
    pub bgActorFlags: [u16_0; 50],
    pub polyList: *mut CollisionPoly,
    pub vtxList: *mut Vec3s,
    pub polyNodes: DynaSSNodeList,
    pub polyNodesMax: s32,
    pub polyListMax: s32,
    pub vtxListMax: s32,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct DynaSSNodeList {
    pub tbl: *mut SSNode,
    pub count: s32,
    pub max: s32,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SSNode {
    pub polyId: s16,
    pub next: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct BgActor {
    pub actor: *mut Actor,
    pub colHeader: *mut CollisionHeader,
    pub dynaLookup: DynaLookup,
    pub vtxStartIndex: u16_0,
    pub prevTransform: ScaleRotPos,
    pub curTransform: ScaleRotPos,
    pub boundingSphere: Sphere16,
    pub minY: f32_0,
    pub maxY: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ScaleRotPos {
    pub scale: Vec3f,
    pub rot: Vec3s,
    pub pos: Vec3f,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct DynaLookup {
    pub polyStartIndex: u16_0,
    pub ceiling: SSList,
    pub wall: SSList,
    pub floor: SSList,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SSList {
    pub head: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CollisionHeader {
    pub minBounds: Vec3s,
    pub maxBounds: Vec3s,
    pub numVertices: u16_0,
    pub vtxList: *mut Vec3s,
    pub numPolygons: u16_0,
    pub polyList: *mut CollisionPoly,
    pub surfaceTypeList: *mut SurfaceType,
    pub cameraDataList: *mut CamData,
    pub numWaterBoxes: u16_0,
    pub waterBoxes: *mut WaterBox,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct WaterBox {
    pub xMin: s16,
    pub ySurface: s16,
    pub zMin: s16,
    pub xLength: s16,
    pub zLength: s16,
    pub properties: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CamData {
    pub cameraSType: u16_0,
    pub numCameras: s16,
    pub camPosData: *mut Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SurfaceType {
    pub data: [u32_0; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SSNodeList {
    pub max: u16_0,
    pub count: u16_0,
    pub tbl: *mut SSNode,
    pub polyCheckTbl: *mut u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct StaticLookup {
    pub floor: SSList,
    pub wall: SSList,
    pub ceiling: SSList,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct FrameAdvanceContext {
    pub enabled: s32,
    pub timer: s32,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SequenceContext {
    pub seqId: u8_0,
    pub natureAmbienceId: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Camera {
    pub paramData: [libc::c_char; 80],
    pub at: Vec3f,
    pub eye: Vec3f,
    pub up: Vec3f,
    pub eyeNext: Vec3f,
    pub skyboxOffset: Vec3f,
    pub globalCtx: *mut GlobalContext,
    pub player: *mut Player,
    pub playerPosRot: PosRot,
    pub target: *mut Actor,
    pub targetPosRot: PosRot,
    pub rUpdateRateInv: f32_0,
    pub pitchUpdateRateInv: f32_0,
    pub yawUpdateRateInv: f32_0,
    pub xzOffsetUpdateRate: f32_0,
    pub yOffsetUpdateRate: f32_0,
    pub fovUpdateRate: f32_0,
    pub xzSpeed: f32_0,
    pub dist: f32_0,
    pub speedRatio: f32_0,
    pub posOffset: Vec3f,
    pub playerPosDelta: Vec3f,
    pub fov: f32_0,
    pub atLERPStepScale: f32_0,
    pub playerGroundY: f32_0,
    pub floorNorm: Vec3f,
    pub waterYPos: f32_0,
    pub waterPrevCamIdx: s32,
    pub waterPrevCamSetting: s32,
    pub waterQuakeId: s32,
    pub data0: *mut libc::c_void,
    pub data1: *mut libc::c_void,
    pub data2: s16,
    pub data3: s16,
    pub uid: s16,
    pub unk_132: [libc::c_char; 2],
    pub inputDir: Vec3s,
    pub camDir: Vec3s,
    pub status: s16,
    pub setting: s16,
    pub mode: s16,
    pub bgCheckId: s16,
    pub camDataIdx: s16,
    pub unk_14A: s16,
    pub unk_14C: s16,
    pub childCamIdx: s16,
    pub unk_150: s16,
    pub unk_152: s16,
    pub prevSetting: s16,
    pub nextCamDataIdx: s16,
    pub nextBGCheckId: s16,
    pub roll: s16,
    pub paramFlags: s16,
    pub animState: s16,
    pub timer: s16,
    pub parentCamIdx: s16,
    pub thisIdx: s16,
    pub prevCamDataIdx: s16,
    pub csId: s16,
    pub unk_16A: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GameState {
    pub gfxCtx: *mut GraphicsContext,
    pub main: GameStateFunc,
    pub destroy: GameStateFunc,
    pub init: GameStateFunc,
    pub size: u32_0,
    pub input: [Input; 4],
    pub tha: TwoHeadArena,
    pub alloc: GameAlloc,
    pub running: u32_0,
    pub frames: u32_0,
    pub unk_A0: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GameAlloc {
    pub base: GameAllocEntry,
    pub head: *mut GameAllocEntry,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GameAllocEntry {
    pub next: *mut GameAllocEntry,
    pub prev: *mut GameAllocEntry,
    pub size: u32_0,
    pub unk_0C: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TwoHeadArena {
    pub size: u32_0,
    pub bufp: *mut libc::c_void,
    pub head: *mut libc::c_void,
    pub tail: *mut libc::c_void,
}
pub type GameStateFunc
    =
    Option<unsafe extern "C" fn(_: *mut GameState) -> ()>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct DynaPolyActor {
    pub actor: Actor,
    pub bgId: s32,
    pub unk_150: f32_0,
    pub unk_154: f32_0,
    pub unk_158: s16,
    pub unk_15A: u16_0,
    pub unk_15C: u32_0,
    pub unk_160: u8_0,
    pub unk_162: s16,
}
pub type C2RustUnnamed_16 = libc::c_uint;
pub const ANIMMODE_LOOP_PARTIAL_INTERP: C2RustUnnamed_16 = 5;
pub const ANIMMODE_LOOP_PARTIAL: C2RustUnnamed_16 = 4;
pub const ANIMMODE_ONCE_INTERP: C2RustUnnamed_16 = 3;
pub const ANIMMODE_ONCE: C2RustUnnamed_16 = 2;
pub const ANIMMODE_LOOP_INTERP: C2RustUnnamed_16 = 1;
pub const ANIMMODE_LOOP: C2RustUnnamed_16 = 0;
pub type OverrideLimbDrawOpa
    =
    Option<unsafe extern "C" fn(_: *mut GlobalContext, _: s32,
                                _: *mut *mut Gfx, _: *mut Vec3f,
                                _: *mut Vec3s, _: *mut libc::c_void) -> s32>;
pub type PostLimbDrawOpa
    =
    Option<unsafe extern "C" fn(_: *mut GlobalContext, _: s32,
                                _: *mut *mut Gfx, _: *mut Vec3s,
                                _: *mut libc::c_void) -> ()>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SkinAvb {
    pub unk_0: u8_0,
    pub buf: [*mut Vtx; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PSkinAwb {
    pub skeletonHeader: *mut SkeletonHeader,
    pub mtx: MtxF,
    pub avbCount: s32,
    pub avbTbl: *mut SkinAvb,
    pub skelAnime: SkelAnime,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderInit {
    pub colType: u8_0,
    pub atFlags: u8_0,
    pub acFlags: u8_0,
    pub ocFlags1: u8_0,
    pub ocFlags2: u8_0,
    pub shape: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderBumpInit {
    pub dmgFlags: u32_0,
    pub effect: u8_0,
    pub defense: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderInfoInit {
    pub elemType: u8_0,
    pub toucher: ColliderTouch,
    pub bumper: ColliderBumpInit,
    pub toucherFlags: u8_0,
    pub bumperFlags: u8_0,
    pub ocElemFlags: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderJntSphElementDim {
    pub modelSphere: Sphere16,
    pub worldSphere: Sphere16,
    pub scale: f32_0,
    pub limb: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderJntSphElement {
    pub info: ColliderInfo,
    pub dim: ColliderJntSphElementDim,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderJntSph {
    pub base: Collider,
    pub count: s32,
    pub elements: *mut ColliderJntSphElement,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderCylinderInit {
    pub base: ColliderInit,
    pub info: ColliderInfoInit,
    pub dim: Cylinder16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderQuadDimInit {
    pub quad: [Vec3f; 4],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderQuadInit {
    pub base: ColliderInit,
    pub info: ColliderInfoInit,
    pub dim: ColliderQuadDimInit,
}
pub type C2RustUnnamed_17 = libc::c_uint;
pub const COLTYPE_TREE: C2RustUnnamed_17 = 13;
pub const COLTYPE_HARD: C2RustUnnamed_17 = 12;
pub const COLTYPE_WOOD: C2RustUnnamed_17 = 11;
pub const COLTYPE_NONE: C2RustUnnamed_17 = 10;
pub const COLTYPE_METAL: C2RustUnnamed_17 = 9;
pub const COLTYPE_HIT8: C2RustUnnamed_17 = 8;
pub const COLTYPE_HIT7: C2RustUnnamed_17 = 7;
pub const COLTYPE_HIT6: C2RustUnnamed_17 = 6;
pub const COLTYPE_HIT5: C2RustUnnamed_17 = 5;
pub const COLTYPE_HIT4: C2RustUnnamed_17 = 4;
pub const COLTYPE_HIT3: C2RustUnnamed_17 = 3;
pub const COLTYPE_HIT2: C2RustUnnamed_17 = 2;
pub const COLTYPE_HIT1: C2RustUnnamed_17 = 1;
pub const COLTYPE_HIT0: C2RustUnnamed_17 = 0;
pub type C2RustUnnamed_18 = libc::c_uint;
pub const COLSHAPE_INVALID: C2RustUnnamed_18 = 4;
pub const COLSHAPE_QUAD: C2RustUnnamed_18 = 3;
pub const COLSHAPE_TRIS: C2RustUnnamed_18 = 2;
pub const COLSHAPE_CYLINDER: C2RustUnnamed_18 = 1;
pub const COLSHAPE_JNTSPH: C2RustUnnamed_18 = 0;
pub type C2RustUnnamed_19 = libc::c_uint;
pub const ELEMTYPE_UNK7: C2RustUnnamed_19 = 7;
pub const ELEMTYPE_UNK6: C2RustUnnamed_19 = 6;
pub const ELEMTYPE_UNK5: C2RustUnnamed_19 = 5;
pub const ELEMTYPE_UNK4: C2RustUnnamed_19 = 4;
pub const ELEMTYPE_UNK3: C2RustUnnamed_19 = 3;
pub const ELEMTYPE_UNK2: C2RustUnnamed_19 = 2;
pub const ELEMTYPE_UNK1: C2RustUnnamed_19 = 1;
pub const ELEMTYPE_UNK0: C2RustUnnamed_19 = 0;
pub type C2RustUnnamed_20 = libc::c_uint;
pub const FOOT_RIGHT: C2RustUnnamed_20 = 1;
pub const FOOT_LEFT: C2RustUnnamed_20 = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct EnItem00 {
    pub actor: Actor,
    pub actionFunc: EnItem00ActionFunc,
    pub collectibleFlag: s16,
    pub getItemId: s16,
    pub unk_154: s16,
    pub unk_156: s16,
    pub unk_158: s16,
    pub unk_15A: s16,
    pub scale: f32_0,
    pub collider: ColliderCylinder,
}
pub type EnItem00ActionFunc
    =
    Option<unsafe extern "C" fn(_: *mut EnItem00, _: *mut GlobalContext)
               -> ()>;
pub type C2RustUnnamed_21 = libc::c_uint;
pub const ACTORCAT_CHEST: C2RustUnnamed_21 = 11;
pub const ACTORCAT_DOOR: C2RustUnnamed_21 = 10;
pub const ACTORCAT_BOSS: C2RustUnnamed_21 = 9;
pub const ACTORCAT_MISC: C2RustUnnamed_21 = 8;
pub const ACTORCAT_ITEMACTION: C2RustUnnamed_21 = 7;
pub const ACTORCAT_PROP: C2RustUnnamed_21 = 6;
pub const ACTORCAT_ENEMY: C2RustUnnamed_21 = 5;
pub const ACTORCAT_NPC: C2RustUnnamed_21 = 4;
pub const ACTORCAT_EXPLOSIVE: C2RustUnnamed_21 = 3;
pub const ACTORCAT_PLAYER: C2RustUnnamed_21 = 2;
pub const ACTORCAT_BG: C2RustUnnamed_21 = 1;
pub const ACTORCAT_SWITCH: C2RustUnnamed_21 = 0;
pub type C2RustUnnamed_22 = libc::c_uint;
pub const ACTOR_ID_MAX: C2RustUnnamed_22 = 471;
pub const ACTOR_OBJ_WARP2BLOCK: C2RustUnnamed_22 = 470;
pub const ACTOR_BG_JYA_BLOCK: C2RustUnnamed_22 = 469;
pub const ACTOR_EN_MM2: C2RustUnnamed_22 = 468;
pub const ACTOR_EN_ZL4: C2RustUnnamed_22 = 467;
pub const ACTOR_OBJ_HAMISHI: C2RustUnnamed_22 = 466;
pub const ACTOR_OBJ_TIMEBLOCK: C2RustUnnamed_22 = 465;
pub const ACTOR_EN_GE3: C2RustUnnamed_22 = 464;
pub const ACTOR_OBJ_MAKEKINSUTA: C2RustUnnamed_22 = 463;
pub const ACTOR_EN_ZO: C2RustUnnamed_22 = 462;
pub const ACTOR_BG_MENKURI_NISEKABE: C2RustUnnamed_22 = 461;
pub const ACTOR_EN_EG: C2RustUnnamed_22 = 460;
pub const ACTOR_OCEFF_WIPE4: C2RustUnnamed_22 = 459;
pub const ACTOR_EN_KAKASI3: C2RustUnnamed_22 = 458;
pub const ACTOR_EN_KAKASI2: C2RustUnnamed_22 = 457;
pub const ACTOR_BG_ICE_SHUTTER: C2RustUnnamed_22 = 456;
pub const ACTOR_BG_ICE_TURARA: C2RustUnnamed_22 = 455;
pub const ACTOR_EN_COW: C2RustUnnamed_22 = 454;
pub const ACTOR_EN_MA3: C2RustUnnamed_22 = 453;
pub const ACTOR_BG_SPOT18_SHUTTER: C2RustUnnamed_22 = 452;
pub const ACTOR_BG_SPOT18_FUTA: C2RustUnnamed_22 = 451;
pub const ACTOR_BG_SPOT11_OASIS: C2RustUnnamed_22 = 450;
pub const ACTOR_DOOR_KILLER: C2RustUnnamed_22 = 449;
pub const ACTOR_EN_CROW: C2RustUnnamed_22 = 448;
pub const ACTOR_EN_PO_DESERT: C2RustUnnamed_22 = 447;
pub const ACTOR_EN_WALL_TUBO: C2RustUnnamed_22 = 446;
pub const ACTOR_BG_BOWL_WALL: C2RustUnnamed_22 = 445;
pub const ACTOR_EN_DAIKU_KAKARIKO: C2RustUnnamed_22 = 444;
pub const ACTOR_BG_MIZU_SHUTTER: C2RustUnnamed_22 = 443;
pub const ACTOR_BG_MIZU_BWALL: C2RustUnnamed_22 = 442;
pub const ACTOR_EN_GS: C2RustUnnamed_22 = 441;
pub const ACTOR_EN_GB: C2RustUnnamed_22 = 440;
pub const ACTOR_BG_GND_ICEBLOCK: C2RustUnnamed_22 = 439;
pub const ACTOR_BG_GND_NISEKABE: C2RustUnnamed_22 = 438;
pub const ACTOR_BG_GND_SOULMEIRO: C2RustUnnamed_22 = 437;
pub const ACTOR_BG_GND_DARKMEIRO: C2RustUnnamed_22 = 436;
pub const ACTOR_BG_GND_FIREMEIRO: C2RustUnnamed_22 = 435;
pub const ACTOR_DEMO_GEFF: C2RustUnnamed_22 = 434;
pub const ACTOR_DEMO_GJ: C2RustUnnamed_22 = 433;
pub const ACTOR_EN_SKB: C2RustUnnamed_22 = 432;
pub const ACTOR_EN_WF: C2RustUnnamed_22 = 431;
pub const ACTOR_EN_GO2: C2RustUnnamed_22 = 430;
pub const ACTOR_EN_MU: C2RustUnnamed_22 = 429;
pub const ACTOR_EN_TG: C2RustUnnamed_22 = 428;
pub const ACTOR_OBJ_MURE3: C2RustUnnamed_22 = 427;
pub const ACTOR_UNSET_1AA: C2RustUnnamed_22 = 426;
pub const ACTOR_BG_SPOT17_BAKUDANKABE: C2RustUnnamed_22 = 425;
pub const ACTOR_BG_SPOT08_BAKUDANKABE: C2RustUnnamed_22 = 424;
pub const ACTOR_DEMO_KEKKAI: C2RustUnnamed_22 = 423;
pub const ACTOR_EN_HS2: C2RustUnnamed_22 = 422;
pub const ACTOR_BG_BOM_GUARD: C2RustUnnamed_22 = 421;
pub const ACTOR_EN_GUEST: C2RustUnnamed_22 = 420;
pub const ACTOR_EN_DNT_NOMAL: C2RustUnnamed_22 = 419;
pub const ACTOR_EN_DNT_JIJI: C2RustUnnamed_22 = 418;
pub const ACTOR_EN_DNT_DEMO: C2RustUnnamed_22 = 417;
pub const ACTOR_OBJ_KIBAKO2: C2RustUnnamed_22 = 416;
pub const ACTOR_BG_SPOT11_BAKUDANKABE: C2RustUnnamed_22 = 415;
pub const ACTOR_OBJ_COMB: C2RustUnnamed_22 = 414;
pub const ACTOR_BG_SPOT01_OBJECTS2: C2RustUnnamed_22 = 413;
pub const ACTOR_EN_SI: C2RustUnnamed_22 = 412;
pub const ACTOR_EN_DOG: C2RustUnnamed_22 = 411;
pub const ACTOR_EN_NIW_GIRL: C2RustUnnamed_22 = 410;
pub const ACTOR_OCEFF_WIPE3: C2RustUnnamed_22 = 409;
pub const ACTOR_OCEFF_WIPE2: C2RustUnnamed_22 = 408;
pub const ACTOR_EN_GELDB: C2RustUnnamed_22 = 407;
pub const ACTOR_EN_IT: C2RustUnnamed_22 = 406;
pub const ACTOR_EN_SHOPNUTS: C2RustUnnamed_22 = 405;
pub const ACTOR_BG_SPOT00_BREAK: C2RustUnnamed_22 = 404;
pub const ACTOR_EN_NUTSBALL: C2RustUnnamed_22 = 403;
pub const ACTOR_EN_HINTNUTS: C2RustUnnamed_22 = 402;
pub const ACTOR_BG_SPOT12_SAKU: C2RustUnnamed_22 = 401;
pub const ACTOR_BG_SPOT12_GATE: C2RustUnnamed_22 = 400;
pub const ACTOR_BG_JYA_HAHENIRON: C2RustUnnamed_22 = 399;
pub const ACTOR_BG_JYA_1FLIFT: C2RustUnnamed_22 = 398;
pub const ACTOR_BG_SPOT05_SOKO: C2RustUnnamed_22 = 397;
pub const ACTOR_EN_WEIYER: C2RustUnnamed_22 = 396;
pub const ACTOR_OCEFF_STORM: C2RustUnnamed_22 = 395;
pub const ACTOR_OCEFF_WIPE: C2RustUnnamed_22 = 394;
pub const ACTOR_EN_STH: C2RustUnnamed_22 = 393;
pub const ACTOR_EN_SSH: C2RustUnnamed_22 = 392;
pub const ACTOR_OBJ_ROOMTIMER: C2RustUnnamed_22 = 391;
pub const ACTOR_EN_GE2: C2RustUnnamed_22 = 390;
pub const ACTOR_EN_WONDER_TALK2: C2RustUnnamed_22 = 389;
pub const ACTOR_EN_DY_EXTRA: C2RustUnnamed_22 = 388;
pub const ACTOR_SHOT_SUN: C2RustUnnamed_22 = 387;
pub const ACTOR_DEMO_EC: C2RustUnnamed_22 = 386;
pub const ACTOR_EN_TORCH: C2RustUnnamed_22 = 385;
pub const ACTOR_UNSET_180: C2RustUnnamed_22 = 384;
pub const ACTOR_END_TITLE: C2RustUnnamed_22 = 383;
pub const ACTOR_OCEFF_SPOT: C2RustUnnamed_22 = 382;
pub const ACTOR_OBJ_MAKEOSHIHIKI: C2RustUnnamed_22 = 381;
pub const ACTOR_EN_TAKARA_MAN: C2RustUnnamed_22 = 380;
pub const ACTOR_EN_KAKASI: C2RustUnnamed_22 = 379;
pub const ACTOR_BOSS_GANON2: C2RustUnnamed_22 = 378;
pub const ACTOR_EN_ZL3: C2RustUnnamed_22 = 377;
pub const ACTOR_EN_HEISHI4: C2RustUnnamed_22 = 376;
pub const ACTOR_BG_ZG: C2RustUnnamed_22 = 375;
pub const ACTOR_EFC_ERUPC: C2RustUnnamed_22 = 374;
pub const ACTOR_EN_PO_FIELD: C2RustUnnamed_22 = 373;
pub const ACTOR_DEMO_GT: C2RustUnnamed_22 = 372;
pub const ACTOR_ELF_MSG2: C2RustUnnamed_22 = 371;
pub const ACTOR_DOOR_GERUDO: C2RustUnnamed_22 = 370;
pub const ACTOR_EN_MAG: C2RustUnnamed_22 = 369;
pub const ACTOR_EN_OKARINA_EFFECT: C2RustUnnamed_22 = 368;
pub const ACTOR_EN_GANON_MANT: C2RustUnnamed_22 = 367;
pub const ACTOR_EN_HY: C2RustUnnamed_22 = 366;
pub const ACTOR_EN_MD: C2RustUnnamed_22 = 365;
pub const ACTOR_EN_CS: C2RustUnnamed_22 = 364;
pub const ACTOR_EN_JSJUTAN: C2RustUnnamed_22 = 363;
pub const ACTOR_EN_JS: C2RustUnnamed_22 = 362;
pub const ACTOR_BG_JYA_IRONOBJ: C2RustUnnamed_22 = 361;
pub const ACTOR_EN_EX_ITEM: C2RustUnnamed_22 = 360;
pub const ACTOR_EN_ANI: C2RustUnnamed_22 = 359;
pub const ACTOR_BG_SST_FLOOR: C2RustUnnamed_22 = 358;
pub const ACTOR_EN_WEATHER_TAG: C2RustUnnamed_22 = 357;
pub const ACTOR_EN_KZ: C2RustUnnamed_22 = 356;
pub const ACTOR_EN_KO: C2RustUnnamed_22 = 355;
pub const ACTOR_EN_MM: C2RustUnnamed_22 = 354;
pub const ACTOR_UNSET_161: C2RustUnnamed_22 = 353;
pub const ACTOR_EN_STREAM: C2RustUnnamed_22 = 352;
pub const ACTOR_EN_SIOFUKI: C2RustUnnamed_22 = 351;
pub const ACTOR_EN_GANON_ORGAN: C2RustUnnamed_22 = 350;
pub const ACTOR_UNSET_15D: C2RustUnnamed_22 = 349;
pub const ACTOR_BG_SPOT18_BASKET: C2RustUnnamed_22 = 348;
pub const ACTOR_BG_JYA_BOMBIWA: C2RustUnnamed_22 = 347;
pub const ACTOR_BG_JYA_AMISHUTTER: C2RustUnnamed_22 = 346;
pub const ACTOR_BG_JYA_BOMBCHUIWA: C2RustUnnamed_22 = 345;
pub const ACTOR_BG_JYA_BIGMIRROR: C2RustUnnamed_22 = 344;
pub const ACTOR_BG_JYA_LIFT: C2RustUnnamed_22 = 343;
pub const ACTOR_BG_JYA_MEGAMI: C2RustUnnamed_22 = 342;
pub const ACTOR_EN_CHANGER: C2RustUnnamed_22 = 341;
pub const ACTOR_UNSET_154: C2RustUnnamed_22 = 340;
pub const ACTOR_EN_FU: C2RustUnnamed_22 = 339;
pub const ACTOR_EN_GO: C2RustUnnamed_22 = 338;
pub const ACTOR_OBJ_MURE2: C2RustUnnamed_22 = 337;
pub const ACTOR_OBJ_LIGHTSWITCH: C2RustUnnamed_22 = 336;
pub const ACTOR_OBJ_HANA: C2RustUnnamed_22 = 335;
pub const ACTOR_EN_ISHI: C2RustUnnamed_22 = 334;
pub const ACTOR_EN_OWL: C2RustUnnamed_22 = 333;
pub const ACTOR_EN_BOM_BOWL_PIT: C2RustUnnamed_22 = 332;
pub const ACTOR_EN_BOM_BOWL_MAN: C2RustUnnamed_22 = 331;
pub const ACTOR_EN_MK: C2RustUnnamed_22 = 330;
pub const ACTOR_EN_DS: C2RustUnnamed_22 = 329;
pub const ACTOR_BG_GJYO_BRIDGE: C2RustUnnamed_22 = 328;
pub const ACTOR_EN_WONDER_TALK: C2RustUnnamed_22 = 327;
pub const ACTOR_EN_SA: C2RustUnnamed_22 = 326;
pub const ACTOR_BG_SPOT01_IDOSOKO: C2RustUnnamed_22 = 325;
pub const ACTOR_EN_ATTACK_NIW: C2RustUnnamed_22 = 324;
pub const ACTOR_EN_SYATEKI_NIW: C2RustUnnamed_22 = 323;
pub const ACTOR_EN_HEISHI3: C2RustUnnamed_22 = 322;
pub const ACTOR_EN_KANBAN: C2RustUnnamed_22 = 321;
pub const ACTOR_BG_INGATE: C2RustUnnamed_22 = 320;
pub const ACTOR_EN_HS: C2RustUnnamed_22 = 319;
pub const ACTOR_EN_MS: C2RustUnnamed_22 = 318;
pub const ACTOR_EN_GM: C2RustUnnamed_22 = 317;
pub const ACTOR_EN_NIW_LADY: C2RustUnnamed_22 = 316;
pub const ACTOR_EN_CLEAR_TAG: C2RustUnnamed_22 = 315;
pub const ACTOR_EN_SDA: C2RustUnnamed_22 = 314;
pub const ACTOR_OBJ_BLOCKSTOP: C2RustUnnamed_22 = 313;
pub const ACTOR_EN_GE1: C2RustUnnamed_22 = 312;
pub const ACTOR_ITEM_INBOX: C2RustUnnamed_22 = 311;
pub const ACTOR_EN_BLKOBJ: C2RustUnnamed_22 = 310;
pub const ACTOR_EN_NWC: C2RustUnnamed_22 = 309;
pub const ACTOR_UNSET_134: C2RustUnnamed_22 = 308;
pub const ACTOR_EN_DAIKU: C2RustUnnamed_22 = 307;
pub const ACTOR_EN_TORYO: C2RustUnnamed_22 = 306;
pub const ACTOR_EN_EX_RUPPY: C2RustUnnamed_22 = 305;
pub const ACTOR_EN_GOROIWA: C2RustUnnamed_22 = 304;
pub const ACTOR_EN_YABUSAME_MARK: C2RustUnnamed_22 = 303;
pub const ACTOR_EN_OKARINA_TAG: C2RustUnnamed_22 = 302;
pub const ACTOR_OBJ_HSBLOCK: C2RustUnnamed_22 = 301;
pub const ACTOR_OBJ_LIFT: C2RustUnnamed_22 = 300;
pub const ACTOR_OBJ_ELEVATOR: C2RustUnnamed_22 = 299;
pub const ACTOR_OBJ_SWITCH: C2RustUnnamed_22 = 298;
pub const ACTOR_UNSET_129: C2RustUnnamed_22 = 297;
pub const ACTOR_UNSET_128: C2RustUnnamed_22 = 296;
pub const ACTOR_OBJ_BOMBIWA: C2RustUnnamed_22 = 295;
pub const ACTOR_OBJ_BEAN: C2RustUnnamed_22 = 294;
pub const ACTOR_EN_KUSA: C2RustUnnamed_22 = 293;
pub const ACTOR_EN_DIVING_GAME: C2RustUnnamed_22 = 292;
pub const ACTOR_BG_RELAY_OBJECTS: C2RustUnnamed_22 = 291;
pub const ACTOR_EN_PO_RELAY: C2RustUnnamed_22 = 290;
pub const ACTOR_EN_FZ: C2RustUnnamed_22 = 289;
pub const ACTOR_BG_SPOT07_TAKI: C2RustUnnamed_22 = 288;
pub const ACTOR_BG_SPOT03_TAKI: C2RustUnnamed_22 = 287;
pub const ACTOR_OBJ_ICE_POLY: C2RustUnnamed_22 = 286;
pub const ACTOR_EN_TUBO_TRAP: C2RustUnnamed_22 = 285;
pub const ACTOR_EN_HONOTRAP: C2RustUnnamed_22 = 284;
pub const ACTOR_ELF_MSG: C2RustUnnamed_22 = 283;
pub const ACTOR_EN_DNS: C2RustUnnamed_22 = 282;
pub const ACTOR_DEMO_SHD: C2RustUnnamed_22 = 281;
pub const ACTOR_DEMO_EXT: C2RustUnnamed_22 = 280;
pub const ACTOR_EN_G_SWITCH: C2RustUnnamed_22 = 279;
pub const ACTOR_EN_SKJNEEDLE: C2RustUnnamed_22 = 278;
pub const ACTOR_EN_SKJ: C2RustUnnamed_22 = 277;
pub const ACTOR_DEMO_IK: C2RustUnnamed_22 = 276;
pub const ACTOR_EN_IK: C2RustUnnamed_22 = 275;
pub const ACTOR_EN_WONDER_ITEM: C2RustUnnamed_22 = 274;
pub const ACTOR_OBJ_TSUBO: C2RustUnnamed_22 = 273;
pub const ACTOR_OBJ_KIBAKO: C2RustUnnamed_22 = 272;
pub const ACTOR_ITEM_ETCETERA: C2RustUnnamed_22 = 271;
pub const ACTOR_UNSET_10E: C2RustUnnamed_22 = 270;
pub const ACTOR_UNSET_10D: C2RustUnnamed_22 = 269;
pub const ACTOR_ARROW_LIGHT: C2RustUnnamed_22 = 268;
pub const ACTOR_ARROW_ICE: C2RustUnnamed_22 = 267;
pub const ACTOR_ARROW_FIRE: C2RustUnnamed_22 = 266;
pub const ACTOR_UNSET_109: C2RustUnnamed_22 = 265;
pub const ACTOR_BG_UMAJUMP: C2RustUnnamed_22 = 264;
pub const ACTOR_BG_SPOT15_RRBOX: C2RustUnnamed_22 = 263;
pub const ACTOR_BG_GANON_OTYUKA: C2RustUnnamed_22 = 262;
pub const ACTOR_BG_PO_SYOKUDAI: C2RustUnnamed_22 = 261;
pub const ACTOR_BG_SPOT01_IDOMIZU: C2RustUnnamed_22 = 260;
pub const ACTOR_BG_SPOT01_IDOHASHIRA: C2RustUnnamed_22 = 259;
pub const ACTOR_BG_SPOT01_FUSYA: C2RustUnnamed_22 = 258;
pub const ACTOR_EFF_DUST: C2RustUnnamed_22 = 257;
pub const ACTOR_BG_GATE_SHUTTER: C2RustUnnamed_22 = 256;
pub const ACTOR_OBJ_OSHIHIKI: C2RustUnnamed_22 = 255;
pub const ACTOR_FISHING: C2RustUnnamed_22 = 254;
pub const ACTOR_BG_JYA_KANAAMI: C2RustUnnamed_22 = 253;
pub const ACTOR_BG_JYA_COBRA: C2RustUnnamed_22 = 252;
pub const ACTOR_UNSET_FB: C2RustUnnamed_22 = 251;
pub const ACTOR_BG_JYA_ZURERUKABE: C2RustUnnamed_22 = 250;
pub const ACTOR_BG_JYA_GOROIWA: C2RustUnnamed_22 = 249;
pub const ACTOR_BG_SPOT15_SAKU: C2RustUnnamed_22 = 248;
pub const ACTOR_BG_HAKA_GATE: C2RustUnnamed_22 = 247;
pub const ACTOR_EN_ANUBICE_TAG: C2RustUnnamed_22 = 246;
pub const ACTOR_DEMO_6K: C2RustUnnamed_22 = 245;
pub const ACTOR_MAGIC_DARK: C2RustUnnamed_22 = 244;
pub const ACTOR_UNSET_F3: C2RustUnnamed_22 = 243;
pub const ACTOR_UNSET_F2: C2RustUnnamed_22 = 242;
pub const ACTOR_ITEM_OCARINA: C2RustUnnamed_22 = 241;
pub const ACTOR_EN_ICE_HONO: C2RustUnnamed_22 = 240;
pub const ACTOR_BG_ICE_SHELTER: C2RustUnnamed_22 = 239;
pub const ACTOR_ITEM_SHIELD: C2RustUnnamed_22 = 238;
pub const ACTOR_EN_FR: C2RustUnnamed_22 = 237;
pub const ACTOR_EN_NY: C2RustUnnamed_22 = 236;
pub const ACTOR_UNSET_EB: C2RustUnnamed_22 = 235;
pub const ACTOR_UNSET_EA: C2RustUnnamed_22 = 234;
pub const ACTOR_BOSS_SST: C2RustUnnamed_22 = 233;
pub const ACTOR_BOSS_GANON: C2RustUnnamed_22 = 232;
pub const ACTOR_EN_MA1: C2RustUnnamed_22 = 231;
pub const ACTOR_BG_BDAN_SWITCH: C2RustUnnamed_22 = 230;
pub const ACTOR_BG_SPOT16_DOUGHNUT: C2RustUnnamed_22 = 229;
pub const ACTOR_BG_MORI_IDOMIZU: C2RustUnnamed_22 = 228;
pub const ACTOR_BG_MORI_HASHIRA4: C2RustUnnamed_22 = 227;
pub const ACTOR_BG_MORI_HASHIGO: C2RustUnnamed_22 = 226;
pub const ACTOR_EN_ANUBICE_FIRE: C2RustUnnamed_22 = 225;
pub const ACTOR_EN_ANUBICE: C2RustUnnamed_22 = 224;
pub const ACTOR_EN_BX: C2RustUnnamed_22 = 223;
pub const ACTOR_EN_BA: C2RustUnnamed_22 = 222;
pub const ACTOR_EN_RR: C2RustUnnamed_22 = 221;
pub const ACTOR_BOSS_TW: C2RustUnnamed_22 = 220;
pub const ACTOR_EN_HORSE_GAME_CHECK: C2RustUnnamed_22 = 219;
pub const ACTOR_EN_BOM_CHU: C2RustUnnamed_22 = 218;
pub const ACTOR_EN_MA2: C2RustUnnamed_22 = 217;
pub const ACTOR_UNSET_D8: C2RustUnnamed_22 = 216;
pub const ACTOR_BG_HAKA_WATER: C2RustUnnamed_22 = 215;
pub const ACTOR_BG_ICE_OBJECTS: C2RustUnnamed_22 = 214;
pub const ACTOR_BG_SPOT06_OBJECTS: C2RustUnnamed_22 = 213;
pub const ACTOR_BG_MIZU_UZU: C2RustUnnamed_22 = 212;
pub const ACTOR_OBJ_DEKUJR: C2RustUnnamed_22 = 211;
pub const ACTOR_EN_RU2: C2RustUnnamed_22 = 210;
pub const ACTOR_BG_SPOT08_ICEBLOCK: C2RustUnnamed_22 = 209;
pub const ACTOR_BG_BOMBWALL: C2RustUnnamed_22 = 208;
pub const ACTOR_BG_HIDAN_KOWARERUKABE: C2RustUnnamed_22 = 207;
pub const ACTOR_UNSET_CE: C2RustUnnamed_22 = 206;
pub const ACTOR_BG_SPOT16_BOMBSTONE: C2RustUnnamed_22 = 205;
pub const ACTOR_EN_TR: C2RustUnnamed_22 = 204;
pub const ACTOR_EN_IN: C2RustUnnamed_22 = 203;
pub const ACTOR_DEMO_GO: C2RustUnnamed_22 = 202;
pub const ACTOR_DEMO_SA: C2RustUnnamed_22 = 201;
pub const ACTOR_BG_BDAN_OBJECTS: C2RustUnnamed_22 = 200;
pub const ACTOR_EN_KAREBABA: C2RustUnnamed_22 = 199;
pub const ACTOR_EN_BIGOKUTA: C2RustUnnamed_22 = 198;
pub const ACTOR_EN_SB: C2RustUnnamed_22 = 197;
pub const ACTOR_BOSS_MO: C2RustUnnamed_22 = 196;
pub const ACTOR_EN_NB: C2RustUnnamed_22 = 195;
pub const ACTOR_EN_TANA: C2RustUnnamed_22 = 194;
pub const ACTOR_EN_SYATEKI_MAN: C2RustUnnamed_22 = 193;
pub const ACTOR_EN_SYATEKI_ITM: C2RustUnnamed_22 = 192;
pub const ACTOR_BG_SPOT17_FUNEN: C2RustUnnamed_22 = 191;
pub const ACTOR_BG_HAKA_ZOU: C2RustUnnamed_22 = 190;
pub const ACTOR_BG_HAKA_HUTA: C2RustUnnamed_22 = 189;
pub const ACTOR_BG_HAKA_TRAP: C2RustUnnamed_22 = 188;
pub const ACTOR_BG_HAKA_TUBO: C2RustUnnamed_22 = 187;
pub const ACTOR_BOSS_VA: C2RustUnnamed_22 = 186;
pub const ACTOR_BG_SPOT18_OBJ: C2RustUnnamed_22 = 185;
pub const ACTOR_BG_SPOT09_OBJ: C2RustUnnamed_22 = 184;
pub const ACTOR_MIR_RAY: C2RustUnnamed_22 = 183;
pub const ACTOR_EN_BROB: C2RustUnnamed_22 = 182;
pub const ACTOR_EN_FIRE_ROCK: C2RustUnnamed_22 = 181;
pub const ACTOR_EN_ENCOUNT2: C2RustUnnamed_22 = 180;
pub const ACTOR_EN_HEISHI2: C2RustUnnamed_22 = 179;
pub const ACTOR_UNSET_B2: C2RustUnnamed_22 = 178;
pub const ACTOR_BG_HAKA_SGAMI: C2RustUnnamed_22 = 177;
pub const ACTOR_BG_HAKA_SHIP: C2RustUnnamed_22 = 176;
pub const ACTOR_BG_HAKA_MEGANEBG: C2RustUnnamed_22 = 175;
pub const ACTOR_BG_HAKA_MEGANE: C2RustUnnamed_22 = 174;
pub const ACTOR_EN_VB_BALL: C2RustUnnamed_22 = 173;
pub const ACTOR_BG_VB_SIMA: C2RustUnnamed_22 = 172;
pub const ACTOR_EN_FW: C2RustUnnamed_22 = 171;
pub const ACTOR_DEMO_TRE_LGT: C2RustUnnamed_22 = 170;
pub const ACTOR_DEMO_IM: C2RustUnnamed_22 = 169;
pub const ACTOR_DEMO_DU: C2RustUnnamed_22 = 168;
pub const ACTOR_EN_ENCOUNT1: C2RustUnnamed_22 = 167;
pub const ACTOR_EN_RL: C2RustUnnamed_22 = 166;
pub const ACTOR_EN_DHA: C2RustUnnamed_22 = 165;
pub const ACTOR_EN_DH: C2RustUnnamed_22 = 164;
pub const ACTOR_EN_FD_FIRE: C2RustUnnamed_22 = 163;
pub const ACTOR_BOSS_FD2: C2RustUnnamed_22 = 162;
pub const ACTOR_EN_RU1: C2RustUnnamed_22 = 161;
pub const ACTOR_UNSET_A0: C2RustUnnamed_22 = 160;
pub const ACTOR_MAGIC_FIRE: C2RustUnnamed_22 = 159;
pub const ACTOR_MAGIC_WIND: C2RustUnnamed_22 = 158;
pub const ACTOR_BG_HAKA: C2RustUnnamed_22 = 157;
pub const ACTOR_BG_SPOT02_OBJECTS: C2RustUnnamed_22 = 156;
pub const ACTOR_DOOR_ANA: C2RustUnnamed_22 = 155;
pub const ACTOR_EN_HORSE_LINK_CHILD: C2RustUnnamed_22 = 154;
pub const ACTOR_EN_FD: C2RustUnnamed_22 = 153;
pub const ACTOR_EN_DU: C2RustUnnamed_22 = 152;
pub const ACTOR_OBJECT_KANKYO: C2RustUnnamed_22 = 151;
pub const ACTOR_BOSS_FD: C2RustUnnamed_22 = 150;
pub const ACTOR_EN_SW: C2RustUnnamed_22 = 149;
pub const ACTOR_OBJ_MURE: C2RustUnnamed_22 = 148;
pub const ACTOR_BG_PO_EVENT: C2RustUnnamed_22 = 147;
pub const ACTOR_BG_HEAVY_BLOCK: C2RustUnnamed_22 = 146;
pub const ACTOR_EN_PO_SISTERS: C2RustUnnamed_22 = 145;
pub const ACTOR_EN_RD: C2RustUnnamed_22 = 144;
pub const ACTOR_EN_HEISHI1: C2RustUnnamed_22 = 143;
pub const ACTOR_EN_FLOORMAS: C2RustUnnamed_22 = 142;
pub const ACTOR_BG_HIDAN_FWBIG: C2RustUnnamed_22 = 141;
pub const ACTOR_DEMO_KANKYO: C2RustUnnamed_22 = 140;
pub const ACTOR_DEMO_EFFECT: C2RustUnnamed_22 = 139;
pub const ACTOR_EN_VM: C2RustUnnamed_22 = 138;
pub const ACTOR_BG_MORI_RAKKATENJO: C2RustUnnamed_22 = 137;
pub const ACTOR_BG_MORI_KAITENKABE: C2RustUnnamed_22 = 136;
pub const ACTOR_BG_MORI_ELEVATOR: C2RustUnnamed_22 = 135;
pub const ACTOR_BG_MORI_BIGST: C2RustUnnamed_22 = 134;
pub const ACTOR_EN_TK: C2RustUnnamed_22 = 133;
pub const ACTOR_EN_TA: C2RustUnnamed_22 = 132;
pub const ACTOR_UNSET_83: C2RustUnnamed_22 = 131;
pub const ACTOR_EN_VASE: C2RustUnnamed_22 = 130;
pub const ACTOR_EN_AROW_TRAP: C2RustUnnamed_22 = 129;
pub const ACTOR_EN_TRAP: C2RustUnnamed_22 = 128;
pub const ACTOR_UNSET_7F: C2RustUnnamed_22 = 127;
pub const ACTOR_UNSET_7E: C2RustUnnamed_22 = 126;
pub const ACTOR_EN_PU_BOX: C2RustUnnamed_22 = 125;
pub const ACTOR_EN_LIGHTBOX: C2RustUnnamed_22 = 124;
pub const ACTOR_UNSET_7B: C2RustUnnamed_22 = 123;
pub const ACTOR_UNSET_7A: C2RustUnnamed_22 = 122;
pub const ACTOR_UNSET_79: C2RustUnnamed_22 = 121;
pub const ACTOR_UNSET_78: C2RustUnnamed_22 = 120;
pub const ACTOR_EN_WOOD02: C2RustUnnamed_22 = 119;
pub const ACTOR_UNSET_76: C2RustUnnamed_22 = 118;
pub const ACTOR_UNSET_75: C2RustUnnamed_22 = 117;
pub const ACTOR_UNSET_74: C2RustUnnamed_22 = 116;
pub const ACTOR_UNSET_73: C2RustUnnamed_22 = 115;
pub const ACTOR_EN_BIRD: C2RustUnnamed_22 = 114;
pub const ACTOR_BG_HIDAN_HAMSTEP: C2RustUnnamed_22 = 113;
pub const ACTOR_DOOR_TOKI: C2RustUnnamed_22 = 112;
pub const ACTOR_BG_HIDAN_KOUSI: C2RustUnnamed_22 = 111;
pub const ACTOR_BG_MJIN: C2RustUnnamed_22 = 110;
pub const ACTOR_EN_FHG_FIRE: C2RustUnnamed_22 = 109;
pub const ACTOR_BG_TOKI_SWD: C2RustUnnamed_22 = 108;
pub const ACTOR_EN_YUKABYUN: C2RustUnnamed_22 = 107;
pub const ACTOR_BG_TOKI_HIKARI: C2RustUnnamed_22 = 106;
pub const ACTOR_EN_BB: C2RustUnnamed_22 = 105;
pub const ACTOR_BG_MORI_HINERI: C2RustUnnamed_22 = 104;
pub const ACTOR_EN_FHG: C2RustUnnamed_22 = 103;
pub const ACTOR_ARMS_HOOK: C2RustUnnamed_22 = 102;
pub const ACTOR_BG_MIZU_WATER: C2RustUnnamed_22 = 101;
pub const ACTOR_BG_MIZU_MOVEBG: C2RustUnnamed_22 = 100;
pub const ACTOR_EN_VALI: C2RustUnnamed_22 = 99;
pub const ACTOR_BG_MENKURI_EYE: C2RustUnnamed_22 = 98;
pub const ACTOR_BG_MENKURI_KAITEN: C2RustUnnamed_22 = 97;
pub const ACTOR_EN_DEKUNUTS: C2RustUnnamed_22 = 96;
pub const ACTOR_ITEM_B_HEART: C2RustUnnamed_22 = 95;
pub const ACTOR_OBJ_SYOKUDAI: C2RustUnnamed_22 = 94;
pub const ACTOR_DOOR_WARP1: C2RustUnnamed_22 = 93;
pub const ACTOR_BG_DDAN_KD: C2RustUnnamed_22 = 92;
pub const ACTOR_EN_HORSE_ZELDA: C2RustUnnamed_22 = 91;
pub const ACTOR_EN_JJ: C2RustUnnamed_22 = 90;
pub const ACTOR_BG_BREAKWALL: C2RustUnnamed_22 = 89;
pub const ACTOR_BG_DDAN_JD: C2RustUnnamed_22 = 88;
pub const ACTOR_EN_M_THUNDER: C2RustUnnamed_22 = 87;
pub const ACTOR_EN_M_FIRE1: C2RustUnnamed_22 = 86;
pub const ACTOR_EN_DEKUBABA: C2RustUnnamed_22 = 85;
pub const ACTOR_EN_AM: C2RustUnnamed_22 = 84;
pub const ACTOR_UNSET_53: C2RustUnnamed_22 = 83;
pub const ACTOR_BOSS_GANONDROF: C2RustUnnamed_22 = 82;
pub const ACTOR_BG_YDAN_MARUTA: C2RustUnnamed_22 = 81;
pub const ACTOR_BG_YDAN_HASI: C2RustUnnamed_22 = 80;
pub const ACTOR_EN_OE2: C2RustUnnamed_22 = 79;
pub const ACTOR_BG_HIDAN_FSLIFT: C2RustUnnamed_22 = 78;
pub const ACTOR_EN_ZL2: C2RustUnnamed_22 = 77;
pub const ACTOR_EN_BOMBF: C2RustUnnamed_22 = 76;
pub const ACTOR_EN_MB: C2RustUnnamed_22 = 75;
pub const ACTOR_BG_SPOT00_HANEBASI: C2RustUnnamed_22 = 74;
pub const ACTOR_BG_HIDAN_CURTAIN: C2RustUnnamed_22 = 73;
pub const ACTOR_EN_XC: C2RustUnnamed_22 = 72;
pub const ACTOR_BG_HIDAN_SYOKU: C2RustUnnamed_22 = 71;
pub const ACTOR_BG_HIDAN_SIMA: C2RustUnnamed_22 = 70;
pub const ACTOR_BG_HIDAN_SEKIZOU: C2RustUnnamed_22 = 69;
pub const ACTOR_BG_HIDAN_RSEKIZOU: C2RustUnnamed_22 = 68;
pub const ACTOR_BG_HIDAN_ROCK: C2RustUnnamed_22 = 67;
pub const ACTOR_EN_HORSE_GANON: C2RustUnnamed_22 = 66;
pub const ACTOR_BG_HIDAN_HROCK: C2RustUnnamed_22 = 65;
pub const ACTOR_BG_HIDAN_DALM: C2RustUnnamed_22 = 64;
pub const ACTOR_BG_DODOAGO: C2RustUnnamed_22 = 63;
pub const ACTOR_BG_TREEMOUTH: C2RustUnnamed_22 = 62;
pub const ACTOR_EN_OSSAN: C2RustUnnamed_22 = 61;
pub const ACTOR_EN_HORSE_NORMAL: C2RustUnnamed_22 = 60;
pub const ACTOR_EN_RIVER_SOUND: C2RustUnnamed_22 = 59;
pub const ACTOR_EN_EIYER: C2RustUnnamed_22 = 58;
pub const ACTOR_EN_A_OBJ: C2RustUnnamed_22 = 57;
pub const ACTOR_EN_BW: C2RustUnnamed_22 = 56;
pub const ACTOR_EN_ST: C2RustUnnamed_22 = 55;
pub const ACTOR_UNSET_36: C2RustUnnamed_22 = 54;
pub const ACTOR_EN_TP: C2RustUnnamed_22 = 53;
pub const ACTOR_EN_BILI: C2RustUnnamed_22 = 52;
pub const ACTOR_EN_TORCH2: C2RustUnnamed_22 = 51;
pub const ACTOR_EN_BOOM: C2RustUnnamed_22 = 50;
pub const ACTOR_UNSET_31: C2RustUnnamed_22 = 49;
pub const ACTOR_EN_BDFIRE: C2RustUnnamed_22 = 48;
pub const ACTOR_EN_DODOJR: C2RustUnnamed_22 = 47;
pub const ACTOR_DOOR_SHUTTER: C2RustUnnamed_22 = 46;
pub const ACTOR_EN_BUBBLE: C2RustUnnamed_22 = 45;
pub const ACTOR_BG_PUSHBOX: C2RustUnnamed_22 = 44;
pub const ACTOR_EN_GOMA: C2RustUnnamed_22 = 43;
pub const ACTOR_EN_VIEWER: C2RustUnnamed_22 = 42;
pub const ACTOR_EN_ZL1: C2RustUnnamed_22 = 41;
pub const ACTOR_BOSS_GOMA: C2RustUnnamed_22 = 40;
pub const ACTOR_BOSS_DODONGO: C2RustUnnamed_22 = 39;
pub const ACTOR_EN_HATA: C2RustUnnamed_22 = 38;
pub const ACTOR_EN_ZF: C2RustUnnamed_22 = 37;
pub const ACTOR_EN_SCENE_CHANGE: C2RustUnnamed_22 = 36;
pub const ACTOR_EN_HOLL: C2RustUnnamed_22 = 35;
pub const ACTOR_UNSET_22: C2RustUnnamed_22 = 34;
pub const ACTOR_EN_FISH: C2RustUnnamed_22 = 33;
pub const ACTOR_EN_INSECT: C2RustUnnamed_22 = 32;
pub const ACTOR_UNSET_1F: C2RustUnnamed_22 = 31;
pub const ACTOR_EN_BUTTE: C2RustUnnamed_22 = 30;
pub const ACTOR_EN_PEEHAT: C2RustUnnamed_22 = 29;
pub const ACTOR_EN_REEBA: C2RustUnnamed_22 = 28;
pub const ACTOR_EN_TITE: C2RustUnnamed_22 = 27;
pub const ACTOR_UNSET_1A: C2RustUnnamed_22 = 26;
pub const ACTOR_EN_NIW: C2RustUnnamed_22 = 25;
pub const ACTOR_EN_ELF: C2RustUnnamed_22 = 24;
pub const ACTOR_UNSET_17: C2RustUnnamed_22 = 23;
pub const ACTOR_EN_ARROW: C2RustUnnamed_22 = 22;
pub const ACTOR_EN_ITEM00: C2RustUnnamed_22 = 21;
pub const ACTOR_EN_HORSE: C2RustUnnamed_22 = 20;
pub const ACTOR_EN_FIREFLY: C2RustUnnamed_22 = 19;
pub const ACTOR_EN_DODONGO: C2RustUnnamed_22 = 18;
pub const ACTOR_EN_WALLMAS: C2RustUnnamed_22 = 17;
pub const ACTOR_EN_BOM: C2RustUnnamed_22 = 16;
pub const ACTOR_BG_YDAN_SP: C2RustUnnamed_22 = 15;
pub const ACTOR_EN_OKUTA: C2RustUnnamed_22 = 14;
pub const ACTOR_EN_POH: C2RustUnnamed_22 = 13;
pub const ACTOR_BG_HIDAN_FIREWALL: C2RustUnnamed_22 = 12;
pub const ACTOR_BG_DY_YOSEIZO: C2RustUnnamed_22 = 11;
pub const ACTOR_EN_BOX: C2RustUnnamed_22 = 10;
pub const ACTOR_EN_DOOR: C2RustUnnamed_22 = 9;
pub const ACTOR_EN_LIGHT: C2RustUnnamed_22 = 8;
pub const ACTOR_EN_PART: C2RustUnnamed_22 = 7;
pub const ACTOR_UNSET_6: C2RustUnnamed_22 = 6;
pub const ACTOR_UNSET_5: C2RustUnnamed_22 = 5;
pub const ACTOR_EN_GIRLA: C2RustUnnamed_22 = 4;
pub const ACTOR_UNSET_3: C2RustUnnamed_22 = 3;
pub const ACTOR_EN_TEST: C2RustUnnamed_22 = 2;
pub const ACTOR_UNSET_1: C2RustUnnamed_22 = 1;
pub const ACTOR_PLAYER: C2RustUnnamed_22 = 0;
pub type C2RustUnnamed_23 = libc::c_uint;
pub const PLAYER_SHIELD_MAX: C2RustUnnamed_23 = 4;
pub const PLAYER_SHIELD_MIRROR: C2RustUnnamed_23 = 3;
pub const PLAYER_SHIELD_HYLIAN: C2RustUnnamed_23 = 2;
pub const PLAYER_SHIELD_DEKU: C2RustUnnamed_23 = 1;
pub const PLAYER_SHIELD_NONE: C2RustUnnamed_23 = 0;
pub type C2RustUnnamed_24 = libc::c_uint;
pub const PLAYER_TUNIC_MAX: C2RustUnnamed_24 = 3;
pub const PLAYER_TUNIC_ZORA: C2RustUnnamed_24 = 2;
pub const PLAYER_TUNIC_GORON: C2RustUnnamed_24 = 1;
pub const PLAYER_TUNIC_KOKIRI: C2RustUnnamed_24 = 0;
pub type C2RustUnnamed_25 = libc::c_uint;
pub const PLAYER_BOOTS_MAX: C2RustUnnamed_25 = 6;
pub const PLAYER_BOOTS_NORMAL_CHILD: C2RustUnnamed_25 = 5;
pub const PLAYER_BOOTS_IRON_UNDERWATER: C2RustUnnamed_25 = 4;
pub const PLAYER_BOOTS_INDOOR: C2RustUnnamed_25 = 3;
pub const PLAYER_BOOTS_HOVER: C2RustUnnamed_25 = 2;
pub const PLAYER_BOOTS_IRON: C2RustUnnamed_25 = 1;
pub const PLAYER_BOOTS_NORMAL: C2RustUnnamed_25 = 0;
pub type C2RustUnnamed_26 = libc::c_uint;
pub const PLAYER_STR_MAX: C2RustUnnamed_26 = 4;
pub const PLAYER_STR_GOLD_G: C2RustUnnamed_26 = 3;
pub const PLAYER_STR_SILVER_G: C2RustUnnamed_26 = 2;
pub const PLAYER_STR_BRACELET: C2RustUnnamed_26 = 1;
pub const PLAYER_STR_NONE: C2RustUnnamed_26 = 0;
pub type C2RustUnnamed_27 = libc::c_uint;
pub const PLAYER_MASK_MAX: C2RustUnnamed_27 = 9;
pub const PLAYER_MASK_TRUTH: C2RustUnnamed_27 = 8;
pub const PLAYER_MASK_GERUDO: C2RustUnnamed_27 = 7;
pub const PLAYER_MASK_ZORA: C2RustUnnamed_27 = 6;
pub const PLAYER_MASK_GORON: C2RustUnnamed_27 = 5;
pub const PLAYER_MASK_BUNNY: C2RustUnnamed_27 = 4;
pub const PLAYER_MASK_SPOOKY: C2RustUnnamed_27 = 3;
pub const PLAYER_MASK_SKULL: C2RustUnnamed_27 = 2;
pub const PLAYER_MASK_KEATON: C2RustUnnamed_27 = 1;
pub const PLAYER_MASK_NONE: C2RustUnnamed_27 = 0;
pub type C2RustUnnamed_28 = libc::c_uint;
pub const PLAYER_AP_MAX: C2RustUnnamed_28 = 67;
pub const PLAYER_AP_LENS: C2RustUnnamed_28 = 66;
pub const PLAYER_AP_MASK_TRUTH: C2RustUnnamed_28 = 65;
pub const PLAYER_AP_MASK_GERUDO: C2RustUnnamed_28 = 64;
pub const PLAYER_AP_MASK_ZORA: C2RustUnnamed_28 = 63;
pub const PLAYER_AP_MASK_GORON: C2RustUnnamed_28 = 62;
pub const PLAYER_AP_MASK_BUNNY: C2RustUnnamed_28 = 61;
pub const PLAYER_AP_MASK_SPOOKY: C2RustUnnamed_28 = 60;
pub const PLAYER_AP_MASK_SKULL: C2RustUnnamed_28 = 59;
pub const PLAYER_AP_MASK_KEATON: C2RustUnnamed_28 = 58;
pub const PLAYER_AP_CLAIM_CHECK: C2RustUnnamed_28 = 57;
pub const PLAYER_AP_EYEDROPS: C2RustUnnamed_28 = 56;
pub const PLAYER_AP_FROG: C2RustUnnamed_28 = 55;
pub const PLAYER_AP_PRESCRIPTION: C2RustUnnamed_28 = 54;
pub const PLAYER_AP_SWORD_BROKEN: C2RustUnnamed_28 = 53;
pub const PLAYER_AP_SAW: C2RustUnnamed_28 = 52;
pub const PLAYER_AP_ODD_POTION: C2RustUnnamed_28 = 51;
pub const PLAYER_AP_ODD_MUSHROOM: C2RustUnnamed_28 = 50;
pub const PLAYER_AP_COJIRO: C2RustUnnamed_28 = 49;
pub const PLAYER_AP_POCKET_CUCCO: C2RustUnnamed_28 = 48;
pub const PLAYER_AP_POCKET_EGG: C2RustUnnamed_28 = 47;
pub const PLAYER_AP_BEAN: C2RustUnnamed_28 = 46;
pub const PLAYER_AP_CHICKEN: C2RustUnnamed_28 = 45;
pub const PLAYER_AP_WEIRD_EGG: C2RustUnnamed_28 = 44;
pub const PLAYER_AP_LETTER_ZELDA: C2RustUnnamed_28 = 43;
pub const PLAYER_AP_BOTTLE_FAIRY: C2RustUnnamed_28 = 42;
pub const PLAYER_AP_BOTTLE_MILK_HALF: C2RustUnnamed_28 = 41;
pub const PLAYER_AP_BOTTLE_MILK: C2RustUnnamed_28 = 40;
pub const PLAYER_AP_BOTTLE_POTION_GREEN: C2RustUnnamed_28 = 39;
pub const PLAYER_AP_BOTTLE_POTION_BLUE: C2RustUnnamed_28 = 38;
pub const PLAYER_AP_BOTTLE_POTION_RED: C2RustUnnamed_28 = 37;
pub const PLAYER_AP_BOTTLE_LETTER: C2RustUnnamed_28 = 36;
pub const PLAYER_AP_BOTTLE_BIG_POE: C2RustUnnamed_28 = 35;
pub const PLAYER_AP_BOTTLE_POE: C2RustUnnamed_28 = 34;
pub const PLAYER_AP_BOTTLE_BUG: C2RustUnnamed_28 = 33;
pub const PLAYER_AP_BOTTLE_FIRE: C2RustUnnamed_28 = 32;
pub const PLAYER_AP_BOTTLE_FISH: C2RustUnnamed_28 = 31;
pub const PLAYER_AP_BOTTLE: C2RustUnnamed_28 = 30;
pub const PLAYER_AP_OCARINA_TIME: C2RustUnnamed_28 = 29;
pub const PLAYER_AP_OCARINA_FAIRY: C2RustUnnamed_28 = 28;
pub const PLAYER_AP_NUT: C2RustUnnamed_28 = 27;
pub const PLAYER_AP_DINS_FIRE: C2RustUnnamed_28 = 26;
pub const PLAYER_AP_NAYRUS_LOVE: C2RustUnnamed_28 = 25;
pub const PLAYER_AP_FARORES_WIND: C2RustUnnamed_28 = 24;
pub const PLAYER_AP_MAGIC_SPELL_17: C2RustUnnamed_28 = 23;
pub const PLAYER_AP_MAGIC_SPELL_16: C2RustUnnamed_28 = 22;
pub const PLAYER_AP_MAGIC_SPELL_15: C2RustUnnamed_28 = 21;
pub const PLAYER_AP_BOOMERANG: C2RustUnnamed_28 = 20;
pub const PLAYER_AP_BOMBCHU: C2RustUnnamed_28 = 19;
pub const PLAYER_AP_BOMB: C2RustUnnamed_28 = 18;
pub const PLAYER_AP_LONGSHOT: C2RustUnnamed_28 = 17;
pub const PLAYER_AP_HOOKSHOT: C2RustUnnamed_28 = 16;
pub const PLAYER_AP_SLINGSHOT: C2RustUnnamed_28 = 15;
pub const PLAYER_AP_BOW_0E: C2RustUnnamed_28 = 14;
pub const PLAYER_AP_BOW_0D: C2RustUnnamed_28 = 13;
pub const PLAYER_AP_BOW_0C: C2RustUnnamed_28 = 12;
pub const PLAYER_AP_BOW_LIGHT: C2RustUnnamed_28 = 11;
pub const PLAYER_AP_BOW_ICE: C2RustUnnamed_28 = 10;
pub const PLAYER_AP_BOW_FIRE: C2RustUnnamed_28 = 9;
pub const PLAYER_AP_BOW: C2RustUnnamed_28 = 8;
pub const PLAYER_AP_HAMMER: C2RustUnnamed_28 = 7;
pub const PLAYER_AP_STICK: C2RustUnnamed_28 = 6;
pub const PLAYER_AP_SWORD_BGS: C2RustUnnamed_28 = 5;
pub const PLAYER_AP_SWORD_KOKIRI: C2RustUnnamed_28 = 4;
pub const PLAYER_AP_SWORD_MASTER: C2RustUnnamed_28 = 3;
pub const PLAYER_AP_FISHING_POLE: C2RustUnnamed_28 = 2;
pub const PLAYER_AP_LAST_USED: C2RustUnnamed_28 = 1;
pub const PLAYER_AP_NONE: C2RustUnnamed_28 = 0;
pub type C2RustUnnamed_29 = libc::c_uint;
pub const PLAYER_LIMB_MAX: C2RustUnnamed_29 = 22;
pub const PLAYER_LIMB_TORSO: C2RustUnnamed_29 = 21;
pub const PLAYER_LIMB_SHEATH: C2RustUnnamed_29 = 20;
pub const PLAYER_LIMB_R_HAND: C2RustUnnamed_29 = 19;
pub const PLAYER_LIMB_R_FOREARM: C2RustUnnamed_29 = 18;
pub const PLAYER_LIMB_R_SHOULDER: C2RustUnnamed_29 = 17;
pub const PLAYER_LIMB_L_HAND: C2RustUnnamed_29 = 16;
pub const PLAYER_LIMB_L_FOREARM: C2RustUnnamed_29 = 15;
pub const PLAYER_LIMB_L_SHOULDER: C2RustUnnamed_29 = 14;
pub const PLAYER_LIMB_COLLAR: C2RustUnnamed_29 = 13;
pub const PLAYER_LIMB_HAT: C2RustUnnamed_29 = 12;
pub const PLAYER_LIMB_HEAD: C2RustUnnamed_29 = 11;
pub const PLAYER_LIMB_UPPER: C2RustUnnamed_29 = 10;
pub const PLAYER_LIMB_L_FOOT: C2RustUnnamed_29 = 9;
pub const PLAYER_LIMB_L_SHIN: C2RustUnnamed_29 = 8;
pub const PLAYER_LIMB_L_THIGH: C2RustUnnamed_29 = 7;
pub const PLAYER_LIMB_R_FOOT: C2RustUnnamed_29 = 6;
pub const PLAYER_LIMB_R_SHIN: C2RustUnnamed_29 = 5;
pub const PLAYER_LIMB_R_THIGH: C2RustUnnamed_29 = 4;
pub const PLAYER_LIMB_LOWER: C2RustUnnamed_29 = 3;
pub const PLAYER_LIMB_WAIST: C2RustUnnamed_29 = 2;
pub const PLAYER_LIMB_ROOT: C2RustUnnamed_29 = 1;
pub const PLAYER_LIMB_NONE: C2RustUnnamed_29 = 0;
pub type C2RustUnnamed_30 = libc::c_int;
pub const PLAYER_DOORTYPE_FAKE: C2RustUnnamed_30 = 3;
pub const PLAYER_DOORTYPE_SLIDING: C2RustUnnamed_30 = 2;
pub const PLAYER_DOORTYPE_HANDLE: C2RustUnnamed_30 = 1;
pub const PLAYER_DOORTYPE_NONE: C2RustUnnamed_30 = 0;
pub const PLAYER_DOORTYPE_AJAR: C2RustUnnamed_30 = -1;
pub type C2RustUnnamed_31 = libc::c_uint;
pub const OBJECT_ID_MAX: C2RustUnnamed_31 = 402;
pub const OBJECT_ZL4: C2RustUnnamed_31 = 401;
pub const OBJECT_TIMEBLOCK: C2RustUnnamed_31 = 400;
pub const OBJECT_OUKE_HAKA: C2RustUnnamed_31 = 399;
pub const OBJECT_DOOR_KILLER: C2RustUnnamed_31 = 398;
pub const OBJECT_GI_SWORD_1: C2RustUnnamed_31 = 397;
pub const OBJECT_COB: C2RustUnnamed_31 = 396;
pub const OBJECT_COW: C2RustUnnamed_31 = 395;
pub const OBJECT_BWALL: C2RustUnnamed_31 = 394;
pub const OBJECT_PS: C2RustUnnamed_31 = 393;
pub const OBJECT_GS: C2RustUnnamed_31 = 392;
pub const OBJECT_HAKA_DOOR: C2RustUnnamed_31 = 391;
pub const OBJECT_GEFF: C2RustUnnamed_31 = 390;
pub const OBJECT_GJ: C2RustUnnamed_31 = 389;
pub const OBJECT_SKB: C2RustUnnamed_31 = 388;
pub const OBJECT_WF: C2RustUnnamed_31 = 387;
pub const OBJECT_MU: C2RustUnnamed_31 = 386;
pub const OBJECT_SPOT01_MATOYAB: C2RustUnnamed_31 = 385;
pub const OBJECT_SPOT01_MATOYA: C2RustUnnamed_31 = 384;
pub const OBJECT_GI_RUPY: C2RustUnnamed_31 = 383;
pub const OBJECT_GANON_ANIME3: C2RustUnnamed_31 = 382;
pub const OBJECT_GANON_ANIME2: C2RustUnnamed_31 = 381;
pub const OBJECT_GANON_ANIME1: C2RustUnnamed_31 = 380;
pub const OBJECT_GI_DEKUPOUCH: C2RustUnnamed_31 = 379;
pub const OBJECT_EFC_DOUGHNUT: C2RustUnnamed_31 = 378;
pub const OBJECT_DEMO_KEKKAI: C2RustUnnamed_31 = 377;
pub const OBJECT_BOWL: C2RustUnnamed_31 = 376;
pub const OBJECT_GI_SOUL: C2RustUnnamed_31 = 375;
pub const OBJECT_GI_GHOST: C2RustUnnamed_31 = 374;
pub const OBJECT_GI_BUTTERFLY: C2RustUnnamed_31 = 373;
pub const OBJECT_GI_INSECT: C2RustUnnamed_31 = 372;
pub const OBJECT_GI_FIRE: C2RustUnnamed_31 = 371;
pub const OBJECT_DNK: C2RustUnnamed_31 = 370;
pub const OBJECT_DNS: C2RustUnnamed_31 = 369;
pub const OBJECT_KIBAKO2: C2RustUnnamed_31 = 368;
pub const OBJECT_SPOT11_OBJ: C2RustUnnamed_31 = 367;
pub const OBJECT_UNSET_16E: C2RustUnnamed_31 = 366;
pub const OBJECT_JYA_DOOR: C2RustUnnamed_31 = 365;
pub const OBJECT_JYA_IRON: C2RustUnnamed_31 = 364;
pub const OBJECT_DOG: C2RustUnnamed_31 = 363;
pub const OBJECT_GR: C2RustUnnamed_31 = 362;
pub const OBJECT_GELDB: C2RustUnnamed_31 = 361;
pub const OBJECT_SHOPNUTS: C2RustUnnamed_31 = 360;
pub const OBJECT_GLA: C2RustUnnamed_31 = 359;
pub const OBJECT_SPOT00_BREAK: C2RustUnnamed_31 = 358;
pub const OBJECT_RS: C2RustUnnamed_31 = 357;
pub const OBJECT_HINTNUTS: C2RustUnnamed_31 = 356;
pub const OBJECT_BOMBIWA: C2RustUnnamed_31 = 355;
pub const OBJECT_SPOT12_OBJ: C2RustUnnamed_31 = 354;
pub const OBJECT_SPOT05_OBJECTS: C2RustUnnamed_31 = 353;
pub const OBJECT_BG: C2RustUnnamed_31 = 352;
pub const OBJECT_BIGOKUTA: C2RustUnnamed_31 = 351;
pub const OBJECT_SSH: C2RustUnnamed_31 = 350;
pub const OBJECT_GI_GODDESS: C2RustUnnamed_31 = 349;
pub const OBJECT_GI_SUTARU: C2RustUnnamed_31 = 348;
pub const OBJECT_FISH: C2RustUnnamed_31 = 347;
pub const OBJECT_EC: C2RustUnnamed_31 = 346;
pub const OBJECT_DS2: C2RustUnnamed_31 = 345;
pub const OBJECT_GI_M_ARROW: C2RustUnnamed_31 = 344;
pub const OBJECT_GI_HOVERBOOTS: C2RustUnnamed_31 = 343;
pub const OBJECT_ZG: C2RustUnnamed_31 = 342;
pub const OBJECT_TS: C2RustUnnamed_31 = 341;
pub const OBJECT_KA: C2RustUnnamed_31 = 340;
pub const OBJECT_GANON2: C2RustUnnamed_31 = 339;
pub const OBJECT_GI_GERUDOMASK: C2RustUnnamed_31 = 338;
pub const OBJECT_GI_ZORAMASK: C2RustUnnamed_31 = 337;
pub const OBJECT_GI_GOLONMASK: C2RustUnnamed_31 = 336;
pub const OBJECT_ZL2_ANIME2: C2RustUnnamed_31 = 335;
pub const OBJECT_ZL2_ANIME1: C2RustUnnamed_31 = 334;
pub const OBJECT_EFC_ERUPC: C2RustUnnamed_31 = 333;
pub const OBJECT_GT: C2RustUnnamed_31 = 332;
pub const OBJECT_DOOR_GERUDO: C2RustUnnamed_31 = 331;
pub const OBJECT_MAG: C2RustUnnamed_31 = 330;
pub const OBJECT_GI_FROG: C2RustUnnamed_31 = 329;
pub const OBJECT_GI_SOLDOUT: C2RustUnnamed_31 = 328;
pub const OBJECT_GI_BRACELET: C2RustUnnamed_31 = 327;
pub const OBJECT_GI_PRESCRIPTION: C2RustUnnamed_31 = 326;
pub const OBJECT_CS: C2RustUnnamed_31 = 325;
pub const OBJECT_JS: C2RustUnnamed_31 = 324;
pub const OBJECT_GI_BROKENSWORD: C2RustUnnamed_31 = 323;
pub const OBJECT_GI_TICKETSTONE: C2RustUnnamed_31 = 322;
pub const OBJECT_GI_MUSHROOM: C2RustUnnamed_31 = 321;
pub const OBJECT_GI_POWDER: C2RustUnnamed_31 = 320;
pub const OBJECT_GI_EYE_LOTION: C2RustUnnamed_31 = 319;
pub const OBJECT_OS: C2RustUnnamed_31 = 318;
pub const OBJECT_FA: C2RustUnnamed_31 = 317;
pub const OBJECT_MM: C2RustUnnamed_31 = 316;
pub const OBJECT_STREAM: C2RustUnnamed_31 = 315;
pub const OBJECT_SIOFUKI: C2RustUnnamed_31 = 314;
pub const OBJECT_GANON_OBJECTS: C2RustUnnamed_31 = 313;
pub const OBJECT_GI_TRUTH_MASK: C2RustUnnamed_31 = 312;
pub const OBJECT_GI_RABIT_MASK: C2RustUnnamed_31 = 311;
pub const OBJECT_GI_SKJ_MASK: C2RustUnnamed_31 = 310;
pub const OBJECT_GI_REDEAD_MASK: C2RustUnnamed_31 = 309;
pub const OBJECT_GI_KI_TAN_MASK: C2RustUnnamed_31 = 308;
pub const OBJECT_FU: C2RustUnnamed_31 = 307;
pub const OBJECT_MK: C2RustUnnamed_31 = 306;
pub const OBJECT_OWL: C2RustUnnamed_31 = 305;
pub const OBJECT_GJYO_OBJECTS: C2RustUnnamed_31 = 304;
pub const OBJECT_KANBAN: C2RustUnnamed_31 = 303;
pub const OBJECT_GI_COIN: C2RustUnnamed_31 = 302;
pub const OBJECT_GI_GLOVES: C2RustUnnamed_31 = 301;
pub const OBJECT_TSUBO: C2RustUnnamed_31 = 300;
pub const OBJECT_KUSA: C2RustUnnamed_31 = 299;
pub const OBJECT_LIGHTSWITCH: C2RustUnnamed_31 = 298;
pub const OBJECT_INGATE: C2RustUnnamed_31 = 297;
pub const OBJECT_HS: C2RustUnnamed_31 = 296;
pub const OBJECT_MS: C2RustUnnamed_31 = 295;
pub const OBJECT_GM: C2RustUnnamed_31 = 294;
pub const OBJECT_BLKOBJ: C2RustUnnamed_31 = 293;
pub const OBJECT_NWC: C2RustUnnamed_31 = 292;
pub const OBJECT_UNSET_123: C2RustUnnamed_31 = 291;
pub const OBJECT_DAIKU: C2RustUnnamed_31 = 290;
pub const OBJECT_TORYO: C2RustUnnamed_31 = 289;
pub const OBJECT_UNSET_120: C2RustUnnamed_31 = 288;
pub const OBJECT_GOROIWA: C2RustUnnamed_31 = 287;
pub const OBJECT_MAMENOKI: C2RustUnnamed_31 = 286;
pub const OBJECT_D_LIFT: C2RustUnnamed_31 = 285;
pub const OBJECT_D_HSBLOCK: C2RustUnnamed_31 = 284;
pub const OBJECT_D_ELEVATOR: C2RustUnnamed_31 = 283;
pub const OBJECT_GND_MAGIC: C2RustUnnamed_31 = 282;
pub const OBJECT_GI_SEED: C2RustUnnamed_31 = 281;
pub const OBJECT_GI_BOOTS_2: C2RustUnnamed_31 = 280;
pub const OBJECT_YABUSAME_POINT: C2RustUnnamed_31 = 279;
pub const OBJECT_GE1: C2RustUnnamed_31 = 278;
pub const OBJECT_BOB: C2RustUnnamed_31 = 277;
pub const OBJECT_FZ: C2RustUnnamed_31 = 276;
pub const OBJECT_SPOT07_OBJECT: C2RustUnnamed_31 = 275;
pub const OBJECT_SPOT03_OBJECT: C2RustUnnamed_31 = 274;
pub const OBJECT_BOJ: C2RustUnnamed_31 = 273;
pub const OBJECT_ANE: C2RustUnnamed_31 = 272;
pub const OBJECT_DS: C2RustUnnamed_31 = 271;
pub const OBJECT_GI_OCARINA_0: C2RustUnnamed_31 = 270;
pub const OBJECT_BBA: C2RustUnnamed_31 = 269;
pub const OBJECT_BJI: C2RustUnnamed_31 = 268;
pub const OBJECT_GI_BOTTLE_LETTER: C2RustUnnamed_31 = 267;
pub const OBJECT_SKJ: C2RustUnnamed_31 = 266;
pub const OBJECT_GI_NIWATORI: C2RustUnnamed_31 = 265;
pub const OBJECT_CNE: C2RustUnnamed_31 = 264;
pub const OBJECT_AHG: C2RustUnnamed_31 = 263;
pub const OBJECT_IK: C2RustUnnamed_31 = 262;
pub const OBJECT_AOB: C2RustUnnamed_31 = 261;
pub const OBJECT_MASTERZOORA: C2RustUnnamed_31 = 260;
pub const OBJECT_MASTERGOLON: C2RustUnnamed_31 = 259;
pub const OBJECT_MASTERKOKIRIHEAD: C2RustUnnamed_31 = 258;
pub const OBJECT_MASTERKOKIRI: C2RustUnnamed_31 = 257;
pub const OBJECT_UMAJUMP: C2RustUnnamed_31 = 256;
pub const OBJECT_KZ: C2RustUnnamed_31 = 255;
pub const OBJECT_ZO: C2RustUnnamed_31 = 254;
pub const OBJECT_KW1: C2RustUnnamed_31 = 253;
pub const OBJECT_KM1: C2RustUnnamed_31 = 252;
pub const OBJECT_MD: C2RustUnnamed_31 = 251;
pub const OBJECT_MD_UNUSED: C2RustUnnamed_31 = 250;
pub const OBJECT_SPOT01_OBJECTS: C2RustUnnamed_31 = 249;
pub const OBJECT_GI_LONGSWORD: C2RustUnnamed_31 = 248;
pub const OBJECT_GI_GRASS: C2RustUnnamed_31 = 247;
pub const OBJECT_GI_HAMMER: C2RustUnnamed_31 = 246;
pub const OBJECT_GI_SAW: C2RustUnnamed_31 = 245;
pub const OBJECT_GI_FISH: C2RustUnnamed_31 = 244;
pub const OBJECT_GI_BEAN: C2RustUnnamed_31 = 243;
pub const OBJECT_GI_CLOTHES: C2RustUnnamed_31 = 242;
pub const OBJECT_JYA_OBJ: C2RustUnnamed_31 = 241;
pub const OBJECT_SPOT15_OBJ: C2RustUnnamed_31 = 240;
pub const OBJECT_GI_LETTER: C2RustUnnamed_31 = 239;
pub const OBJECT_GI_SHIELD_3: C2RustUnnamed_31 = 238;
pub const OBJECT_DEMO_6K: C2RustUnnamed_31 = 237;
pub const OBJECT_ANI: C2RustUnnamed_31 = 236;
pub const OBJECT_GI_LIQUID: C2RustUnnamed_31 = 235;
pub const OBJECT_GI_GLASSES: C2RustUnnamed_31 = 234;
pub const OBJECT_GI_BOW: C2RustUnnamed_31 = 233;
pub const OBJECT_GI_BOOMERANG: C2RustUnnamed_31 = 232;
pub const OBJECT_GI_PACHINKO: C2RustUnnamed_31 = 231;
pub const OBJECT_FR: C2RustUnnamed_31 = 230;
pub const OBJECT_NY: C2RustUnnamed_31 = 229;
pub const OBJECT_UNSET_E4: C2RustUnnamed_31 = 228;
pub const OBJECT_NY_UNUSED: C2RustUnnamed_31 = 227;
pub const OBJECT_SST: C2RustUnnamed_31 = 226;
pub const OBJECT_GANON: C2RustUnnamed_31 = 225;
pub const OBJECT_MA1: C2RustUnnamed_31 = 224;
pub const OBJECT_GI_MILK: C2RustUnnamed_31 = 223;
pub const OBJECT_GI_OCARINA: C2RustUnnamed_31 = 222;
pub const OBJECT_GI_HOOKSHOT: C2RustUnnamed_31 = 221;
pub const OBJECT_GI_SHIELD_2: C2RustUnnamed_31 = 220;
pub const OBJECT_GI_SCALE: C2RustUnnamed_31 = 219;
pub const OBJECT_GI_EGG: C2RustUnnamed_31 = 218;
pub const OBJECT_GI_BOMB_2: C2RustUnnamed_31 = 217;
pub const OBJECT_GI_ARROW: C2RustUnnamed_31 = 216;
pub const OBJECT_GI_GERUDO: C2RustUnnamed_31 = 215;
pub const OBJECT_ANUBICE: C2RustUnnamed_31 = 214;
pub const OBJECT_BXA: C2RustUnnamed_31 = 213;
pub const OBJECT_RR: C2RustUnnamed_31 = 212;
pub const OBJECT_TW: C2RustUnnamed_31 = 211;
pub const OBJECT_HNI: C2RustUnnamed_31 = 210;
pub const OBJECT_GI_PURSE: C2RustUnnamed_31 = 209;
pub const OBJECT_MA2: C2RustUnnamed_31 = 208;
pub const OBJECT_OF1S: C2RustUnnamed_31 = 207;
pub const OBJECT_GI_BOMB_1: C2RustUnnamed_31 = 206;
pub const OBJECT_GI_MAGICPOT: C2RustUnnamed_31 = 205;
pub const OBJECT_DEKUJR: C2RustUnnamed_31 = 204;
pub const OBJECT_GI_SHIELD_1: C2RustUnnamed_31 = 203;
pub const OBJECT_RU2: C2RustUnnamed_31 = 202;
pub const OBJECT_OF1D_MAP: C2RustUnnamed_31 = 201;
pub const OBJECT_GI_MAP: C2RustUnnamed_31 = 200;
pub const OBJECT_GI_STICK: C2RustUnnamed_31 = 199;
pub const OBJECT_GI_BOTTLE: C2RustUnnamed_31 = 198;
pub const OBJECT_OS_ANIME: C2RustUnnamed_31 = 197;
pub const OBJECT_OE4S: C2RustUnnamed_31 = 196;
pub const OBJECT_OE1S: C2RustUnnamed_31 = 195;
pub const OBJECT_SPOT16_OBJ: C2RustUnnamed_31 = 194;
pub const OBJECT_TR: C2RustUnnamed_31 = 193;
pub const OBJECT_IN: C2RustUnnamed_31 = 192;
pub const OBJECT_GI_BOMBPOUCH: C2RustUnnamed_31 = 191;
pub const OBJECT_GI_ARROWCASE: C2RustUnnamed_31 = 190;
pub const OBJECT_GI_HEARTS: C2RustUnnamed_31 = 189;
pub const OBJECT_SA: C2RustUnnamed_31 = 188;
pub const OBJECT_GI_NUTS: C2RustUnnamed_31 = 187;
pub const OBJECT_GI_MEDAL: C2RustUnnamed_31 = 186;
pub const OBJECT_GI_BOSSKEY: C2RustUnnamed_31 = 185;
pub const OBJECT_GI_COMPASS: C2RustUnnamed_31 = 184;
pub const OBJECT_GI_HEART: C2RustUnnamed_31 = 183;
pub const OBJECT_GI_MELODY: C2RustUnnamed_31 = 182;
pub const OBJECT_SB: C2RustUnnamed_31 = 181;
pub const OBJECT_MO: C2RustUnnamed_31 = 180;
pub const OBJECT_NB: C2RustUnnamed_31 = 179;
pub const OBJECT_SHOP_DUNGEN: C2RustUnnamed_31 = 178;
pub const OBJECT_SPOT17_OBJ: C2RustUnnamed_31 = 177;
pub const OBJECT_BDOOR: C2RustUnnamed_31 = 176;
pub const OBJECT_SPOT18_OBJ: C2RustUnnamed_31 = 175;
pub const OBJECT_SPOT09_OBJ: C2RustUnnamed_31 = 174;
pub const OBJECT_GI_JEWEL: C2RustUnnamed_31 = 173;
pub const OBJECT_BROB: C2RustUnnamed_31 = 172;
pub const OBJECT_MIR_RAY: C2RustUnnamed_31 = 171;
pub const OBJECT_GI_KEY: C2RustUnnamed_31 = 170;
pub const OBJECT_DEMO_TRE_LGT: C2RustUnnamed_31 = 169;
pub const OBJECT_EFC_TW: C2RustUnnamed_31 = 168;
pub const OBJECT_RL: C2RustUnnamed_31 = 167;
pub const OBJECT_DH: C2RustUnnamed_31 = 166;
pub const OBJECT_FD2: C2RustUnnamed_31 = 165;
pub const OBJECT_SYOKUDAI: C2RustUnnamed_31 = 164;
pub const OBJECT_RU1: C2RustUnnamed_31 = 163;
pub const OBJECT_HAKA: C2RustUnnamed_31 = 162;
pub const OBJECT_SPOT02_OBJECTS: C2RustUnnamed_31 = 161;
pub const OBJECT_HORSE_LINK_CHILD: C2RustUnnamed_31 = 160;
pub const OBJECT_MEDAL: C2RustUnnamed_31 = 159;
pub const OBJECT_FW: C2RustUnnamed_31 = 158;
pub const OBJECT_DU: C2RustUnnamed_31 = 157;
pub const OBJECT_FD: C2RustUnnamed_31 = 156;
pub const OBJECT_GNDD: C2RustUnnamed_31 = 155;
pub const OBJECT_HEAVY_OBJECT: C2RustUnnamed_31 = 154;
pub const OBJECT_PO_SISTERS: C2RustUnnamed_31 = 153;
pub const OBJECT_RD: C2RustUnnamed_31 = 152;
pub const OBJECT_SD: C2RustUnnamed_31 = 151;
pub const OBJECT_BDAN_OBJECTS: C2RustUnnamed_31 = 150;
pub const OBJECT_TRIFORCE_SPOT: C2RustUnnamed_31 = 149;
pub const OBJECT_LIGHT_RING: C2RustUnnamed_31 = 148;
pub const OBJECT_GOD_LGT: C2RustUnnamed_31 = 147;
pub const OBJECT_EFC_STAR_FIELD: C2RustUnnamed_31 = 146;
pub const OBJECT_EFC_LGT_SHOWER: C2RustUnnamed_31 = 145;
pub const OBJECT_EFC_FLASH: C2RustUnnamed_31 = 144;
pub const OBJECT_EFC_FIRE_BALL: C2RustUnnamed_31 = 143;
pub const OBJECT_EFC_CRYSTAL_LIGHT: C2RustUnnamed_31 = 142;
pub const OBJECT_HAKACH_OBJECTS: C2RustUnnamed_31 = 141;
pub const OBJECT_BV: C2RustUnnamed_31 = 140;
pub const OBJECT_VM: C2RustUnnamed_31 = 139;
pub const OBJECT_XC: C2RustUnnamed_31 = 138;
pub const OBJECT_TK: C2RustUnnamed_31 = 137;
pub const OBJECT_TA: C2RustUnnamed_31 = 136;
pub const OBJECT_IM: C2RustUnnamed_31 = 135;
pub const OBJECT_VASE: C2RustUnnamed_31 = 134;
pub const OBJECT_TRAP: C2RustUnnamed_31 = 133;
pub const OBJECT_UNSET_84: C2RustUnnamed_31 = 132;
pub const OBJECT_UNSET_83: C2RustUnnamed_31 = 131;
pub const OBJECT_PU_BOX: C2RustUnnamed_31 = 130;
pub const OBJECT_LIGHTBOX: C2RustUnnamed_31 = 129;
pub const OBJECT_UNSET_80: C2RustUnnamed_31 = 128;
pub const OBJECT_UNSET_7F: C2RustUnnamed_31 = 127;
pub const OBJECT_UNSET_7E: C2RustUnnamed_31 = 126;
pub const OBJECT_UNSET_7D: C2RustUnnamed_31 = 125;
pub const OBJECT_WOOD02: C2RustUnnamed_31 = 124;
pub const OBJECT_UNSET_7B: C2RustUnnamed_31 = 123;
pub const OBJECT_UNSET_7A: C2RustUnnamed_31 = 122;
pub const OBJECT_UNSET_79: C2RustUnnamed_31 = 121;
pub const OBJECT_UNSET_78: C2RustUnnamed_31 = 120;
pub const OBJECT_BIRD: C2RustUnnamed_31 = 119;
pub const OBJECT_HATA: C2RustUnnamed_31 = 118;
pub const OBJECT_WARP2: C2RustUnnamed_31 = 117;
pub const OBJECT_SPOT08_OBJ: C2RustUnnamed_31 = 116;
pub const OBJECT_MORI_TEX: C2RustUnnamed_31 = 115;
pub const OBJECT_MORI_OBJECTS: C2RustUnnamed_31 = 114;
pub const OBJECT_MORI_HINERI2A: C2RustUnnamed_31 = 113;
pub const OBJECT_MORI_HINERI2: C2RustUnnamed_31 = 112;
pub const OBJECT_MORI_HINERI1A: C2RustUnnamed_31 = 111;
pub const OBJECT_PO_COMPOSER: C2RustUnnamed_31 = 110;
pub const OBJECT_PO_FIELD: C2RustUnnamed_31 = 109;
pub const OBJECT_RELAY_OBJECTS: C2RustUnnamed_31 = 108;
pub const OBJECT_ICE_OBJECTS: C2RustUnnamed_31 = 107;
pub const OBJECT_SPOT06_OBJECTS: C2RustUnnamed_31 = 106;
pub const OBJECT_HAKA_OBJECTS: C2RustUnnamed_31 = 105;
pub const OBJECT_MJIN_OKA: C2RustUnnamed_31 = 104;
pub const OBJECT_MJIN_WIND: C2RustUnnamed_31 = 103;
pub const OBJECT_MJIN_SOUL: C2RustUnnamed_31 = 102;
pub const OBJECT_MJIN_ICE: C2RustUnnamed_31 = 101;
pub const OBJECT_MJIN_FLAME: C2RustUnnamed_31 = 100;
pub const OBJECT_MJIN_DARK: C2RustUnnamed_31 = 99;
pub const OBJECT_MJIN_FLASH: C2RustUnnamed_31 = 98;
pub const OBJECT_MJIN: C2RustUnnamed_31 = 97;
pub const OBJECT_ZL2: C2RustUnnamed_31 = 96;
pub const OBJECT_YUKABYUN: C2RustUnnamed_31 = 95;
pub const OBJECT_TOKI_OBJECTS: C2RustUnnamed_31 = 94;
pub const OBJECT_BB: C2RustUnnamed_31 = 93;
pub const OBJECT_MORI_HINERI1: C2RustUnnamed_31 = 92;
pub const OBJECT_OSSAN: C2RustUnnamed_31 = 91;
pub const OBJECT_FHG: C2RustUnnamed_31 = 90;
pub const OBJECT_MIZU_OBJECTS: C2RustUnnamed_31 = 89;
pub const OBJECT_OA11: C2RustUnnamed_31 = 88;
pub const OBJECT_OA10: C2RustUnnamed_31 = 87;
pub const OBJECT_VALI: C2RustUnnamed_31 = 86;
pub const OBJECT_OE12: C2RustUnnamed_31 = 85;
pub const OBJECT_OE11: C2RustUnnamed_31 = 84;
pub const OBJECT_OE10: C2RustUnnamed_31 = 83;
pub const OBJECT_OE9: C2RustUnnamed_31 = 82;
pub const OBJECT_OE8: C2RustUnnamed_31 = 81;
pub const OBJECT_OE7: C2RustUnnamed_31 = 80;
pub const OBJECT_OE6: C2RustUnnamed_31 = 79;
pub const OBJECT_OE5: C2RustUnnamed_31 = 78;
pub const OBJECT_MENKURI_OBJECTS: C2RustUnnamed_31 = 77;
pub const OBJECT_OE4: C2RustUnnamed_31 = 76;
pub const OBJECT_OE3: C2RustUnnamed_31 = 75;
pub const OBJECT_DEKUNUTS: C2RustUnnamed_31 = 74;
pub const OBJECT_B_HEART: C2RustUnnamed_31 = 73;
pub const OBJECT_WARP1: C2RustUnnamed_31 = 72;
pub const OBJECT_OPENING_DEMO1: C2RustUnnamed_31 = 71;
pub const OBJECT_HORSE_ZELDA: C2RustUnnamed_31 = 70;
pub const OBJECT_OB4: C2RustUnnamed_31 = 69;
pub const OBJECT_OB3: C2RustUnnamed_31 = 68;
pub const OBJECT_OB2: C2RustUnnamed_31 = 67;
pub const OBJECT_OA9: C2RustUnnamed_31 = 66;
pub const OBJECT_OA8: C2RustUnnamed_31 = 65;
pub const OBJECT_JJ: C2RustUnnamed_31 = 64;
pub const OBJECT_OA7: C2RustUnnamed_31 = 63;
pub const OBJECT_OA6: C2RustUnnamed_31 = 62;
pub const OBJECT_OA5: C2RustUnnamed_31 = 61;
pub const OBJECT_OA4: C2RustUnnamed_31 = 60;
pub const OBJECT_OA3: C2RustUnnamed_31 = 59;
pub const OBJECT_UNSET_3A: C2RustUnnamed_31 = 58;
pub const OBJECT_DEKUBABA: C2RustUnnamed_31 = 57;
pub const OBJECT_AM: C2RustUnnamed_31 = 56;
pub const OBJECT_GND: C2RustUnnamed_31 = 55;
pub const OBJECT_YDAN_OBJECTS: C2RustUnnamed_31 = 54;
pub const OBJECT_OE2: C2RustUnnamed_31 = 53;
pub const OBJECT_OE_ANIME: C2RustUnnamed_31 = 52;
pub const OBJECT_OE1: C2RustUnnamed_31 = 51;
pub const OBJECT_SK2: C2RustUnnamed_31 = 50;
pub const OBJECT_BOMBF: C2RustUnnamed_31 = 49;
pub const OBJECT_MB: C2RustUnnamed_31 = 48;
pub const OBJECT_SPOT00_OBJECTS: C2RustUnnamed_31 = 47;
pub const OBJECT_OA2: C2RustUnnamed_31 = 46;
pub const OBJECT_HORSE_GANON: C2RustUnnamed_31 = 45;
pub const OBJECT_HIDAN_OBJECTS: C2RustUnnamed_31 = 44;
pub const OBJECT_DDAN_OBJECTS: C2RustUnnamed_31 = 43;
pub const OBJECT_SPOT04_OBJECTS: C2RustUnnamed_31 = 42;
pub const OBJECT_O_ANIME: C2RustUnnamed_31 = 41;
pub const OBJECT_OB1: C2RustUnnamed_31 = 40;
pub const OBJECT_HORSE_NORMAL: C2RustUnnamed_31 = 39;
pub const OBJECT_EI: C2RustUnnamed_31 = 38;
pub const OBJECT_BW: C2RustUnnamed_31 = 37;
pub const OBJECT_ST: C2RustUnnamed_31 = 36;
pub const OBJECT_OA1: C2RustUnnamed_31 = 35;
pub const OBJECT_TP: C2RustUnnamed_31 = 34;
pub const OBJECT_BL: C2RustUnnamed_31 = 33;
pub const OBJECT_TORCH2: C2RustUnnamed_31 = 32;
pub const OBJECT_DODOJR: C2RustUnnamed_31 = 31;
pub const OBJECT_GOL: C2RustUnnamed_31 = 30;
pub const OBJECT_ZL1: C2RustUnnamed_31 = 29;
pub const OBJECT_GOMA: C2RustUnnamed_31 = 28;
pub const OBJECT_ZF: C2RustUnnamed_31 = 27;
pub const OBJECT_HORSE: C2RustUnnamed_31 = 26;
pub const OBJECT_KINGDODONGO: C2RustUnnamed_31 = 25;
pub const OBJECT_PEEHAT: C2RustUnnamed_31 = 24;
pub const OBJECT_REEBA: C2RustUnnamed_31 = 23;
pub const OBJECT_TITE: C2RustUnnamed_31 = 22;
pub const OBJECT_LINK_CHILD: C2RustUnnamed_31 = 21;
pub const OBJECT_LINK_BOY: C2RustUnnamed_31 = 20;
pub const OBJECT_NIW: C2RustUnnamed_31 = 19;
pub const OBJECT_BUBBLE: C2RustUnnamed_31 = 18;
pub const OBJECT_UNSET_11: C2RustUnnamed_31 = 17;
pub const OBJECT_UNSET_10: C2RustUnnamed_31 = 16;
pub const OBJECT_FIRE: C2RustUnnamed_31 = 15;
pub const OBJECT_BOX: C2RustUnnamed_31 = 14;
pub const OBJECT_FIREFLY: C2RustUnnamed_31 = 13;
pub const OBJECT_DODONGO: C2RustUnnamed_31 = 12;
pub const OBJECT_WALLMASTER: C2RustUnnamed_31 = 11;
pub const OBJECT_DY_OBJ: C2RustUnnamed_31 = 10;
pub const OBJECT_POH: C2RustUnnamed_31 = 9;
pub const OBJECT_CROW: C2RustUnnamed_31 = 8;
pub const OBJECT_OKUTA: C2RustUnnamed_31 = 7;
pub const OBJECT_HUMAN: C2RustUnnamed_31 = 6;
pub const OBJECT_UNSET_5: C2RustUnnamed_31 = 5;
pub const OBJECT_UNSET_4: C2RustUnnamed_31 = 4;
pub const OBJECT_GAMEPLAY_DANGEON_KEEP: C2RustUnnamed_31 = 3;
pub const OBJECT_GAMEPLAY_FIELD_KEEP: C2RustUnnamed_31 = 2;
pub const OBJECT_GAMEPLAY_KEEP: C2RustUnnamed_31 = 1;
pub const OBJECT_INVALID: C2RustUnnamed_31 = 0;
pub type C2RustUnnamed_32 = libc::c_uint;
pub const CS_STATE_UNSKIPPABLE_EXEC: C2RustUnnamed_32 = 4;
pub const CS_STATE_UNSKIPPABLE_INIT: C2RustUnnamed_32 = 3;
pub const CS_STATE_SKIPPABLE_EXEC: C2RustUnnamed_32 = 2;
pub const CS_STATE_SKIPPABLE_INIT: C2RustUnnamed_32 = 1;
pub const CS_STATE_IDLE: C2RustUnnamed_32 = 0;
pub type C2RustUnnamed_33 = libc::c_uint;
pub const CAM_SET_MAX: C2RustUnnamed_33 = 66;
pub const CAM_SET_NORMAL4: C2RustUnnamed_33 = 65;
pub const CAM_SET_PIVOT_FROM_SIDE: C2RustUnnamed_33 = 64;
pub const CAM_SET_DIRECTED_YAW: C2RustUnnamed_33 = 63;
pub const CAM_SET_DUNGEON2: C2RustUnnamed_33 = 62;
pub const CAM_SET_JABU_TENTACLE: C2RustUnnamed_33 = 61;
pub const CAM_SET_CS_C: C2RustUnnamed_33 = 60;
pub const CAM_SET_FISHING: C2RustUnnamed_33 = 59;
pub const CAM_SET_NORMAL2: C2RustUnnamed_33 = 58;
pub const CAM_SET_PIVOT_VERTICAL: C2RustUnnamed_33 = 57;
pub const CAM_SET_TURN_AROUND: C2RustUnnamed_33 = 56;
pub const CAM_SET_FIRE_BIRDS_EYE: C2RustUnnamed_33 = 55;
pub const CAM_SET_MEADOW_UNUSED: C2RustUnnamed_33 = 54;
pub const CAM_SET_MEADOW_BIRDS_EYE: C2RustUnnamed_33 = 53;
pub const CAM_SET_BIG_OCTO: C2RustUnnamed_33 = 52;
pub const CAM_SET_FOREST_DEFEAT_POE: C2RustUnnamed_33 = 51;
pub const CAM_SET_FOREST_UNUSED: C2RustUnnamed_33 = 50;
pub const CAM_SET_FIRE_STAIRCASE: C2RustUnnamed_33 = 49;
pub const CAM_SET_FIRE_PLATFORM: C2RustUnnamed_33 = 48;
pub const CAM_SET_SCENE_TRANSITION: C2RustUnnamed_33 = 47;
pub const CAM_SET_SCENE_UNUSED: C2RustUnnamed_33 = 46;
pub const CAM_SET_BEAN_LOST_WOODS: C2RustUnnamed_33 = 45;
pub const CAM_SET_BEAN_GENERIC: C2RustUnnamed_33 = 44;
pub const CAM_SET_CS_ATTENTION: C2RustUnnamed_33 = 43;
pub const CAM_SET_CS_3: C2RustUnnamed_33 = 42;
pub const CAM_SET_ITEM_UNUSED: C2RustUnnamed_33 = 41;
pub const CAM_SET_SLOW_CHEST_CS: C2RustUnnamed_33 = 40;
pub const CAM_SET_FOREST_BIRDS_EYE: C2RustUnnamed_33 = 39;
pub const CAM_SET_CS_TWISTED_HALLWAY: C2RustUnnamed_33 = 38;
pub const CAM_SET_CS_0: C2RustUnnamed_33 = 37;
pub const CAM_SET_PIVOT_WATER_SURFACE: C2RustUnnamed_33 = 36;
pub const CAM_SET_PIVOT_CORNER: C2RustUnnamed_33 = 35;
pub const CAM_SET_FREE2: C2RustUnnamed_33 = 34;
pub const CAM_SET_FREE0: C2RustUnnamed_33 = 33;
pub const CAM_SET_START1: C2RustUnnamed_33 = 32;
pub const CAM_SET_START0: C2RustUnnamed_33 = 31;
pub const CAM_SET_CRAWLSPACE: C2RustUnnamed_33 = 30;
pub const CAM_SET_DOORC: C2RustUnnamed_33 = 29;
pub const CAM_SET_DOOR0: C2RustUnnamed_33 = 28;
pub const CAM_SET_PREREND_SIDE_SCROLL: C2RustUnnamed_33 = 27;
pub const CAM_SET_PREREND_PIVET: C2RustUnnamed_33 = 26;
pub const CAM_SET_PREREND_FIXED: C2RustUnnamed_33 = 25;
pub const CAM_SET_PIVOT_IN_FRONT: C2RustUnnamed_33 = 24;
pub const CAM_SET_PIVOT_SHOP_BROWSING: C2RustUnnamed_33 = 23;
pub const CAM_SET_PIVOT_CRAWLSPACE: C2RustUnnamed_33 = 22;
pub const CAM_SET_CHU_BOWLING: C2RustUnnamed_33 = 21;
pub const CAM_SET_MARKET_BALCONY: C2RustUnnamed_33 = 20;
pub const CAM_SET_TOWER_UNUSED: C2RustUnnamed_33 = 19;
pub const CAM_SET_TOWER_CLIMB: C2RustUnnamed_33 = 18;
pub const CAM_SET_BOSS_GANON: C2RustUnnamed_33 = 17;
pub const CAM_SET_BOSS_GANONDORF: C2RustUnnamed_33 = 16;
pub const CAM_SET_BOSS_TWINROVA_FLOOR: C2RustUnnamed_33 = 15;
pub const CAM_SET_BOSS_TWINROVA_PLATFORM: C2RustUnnamed_33 = 14;
pub const CAM_SET_BOSS_MORPHA: C2RustUnnamed_33 = 13;
pub const CAM_SET_BOSS_BONGO: C2RustUnnamed_33 = 12;
pub const CAM_SET_BOSS_VOLVAGIA: C2RustUnnamed_33 = 11;
pub const CAM_SET_BOSS_PHANTOM_GANON: C2RustUnnamed_33 = 10;
pub const CAM_SET_BOSS_BARINADE: C2RustUnnamed_33 = 9;
pub const CAM_SET_BOSS_DODONGO: C2RustUnnamed_33 = 8;
pub const CAM_SET_BOSS_GOHMA: C2RustUnnamed_33 = 7;
pub const CAM_SET_HORSE: C2RustUnnamed_33 = 6;
pub const CAM_SET_NORMAL3: C2RustUnnamed_33 = 5;
pub const CAM_SET_DUNGEON1: C2RustUnnamed_33 = 4;
pub const CAM_SET_DUNGEON0: C2RustUnnamed_33 = 3;
pub const CAM_SET_NORMAL1: C2RustUnnamed_33 = 2;
pub const CAM_SET_NORMAL0: C2RustUnnamed_33 = 1;
pub const CAM_SET_NONE: C2RustUnnamed_33 = 0;
pub type C2RustUnnamed_34 = libc::c_uint;
pub const CAM_MODE_MAX: C2RustUnnamed_34 = 21;
pub const CAM_MODE_FOLLOWBOOMERANG: C2RustUnnamed_34 = 20;
pub const CAM_MODE_PUSHPULL: C2RustUnnamed_34 = 19;
pub const CAM_MODE_STILL: C2RustUnnamed_34 = 18;
pub const CAM_MODE_CHARGE: C2RustUnnamed_34 = 17;
pub const CAM_MODE_FREEFALL: C2RustUnnamed_34 = 16;
pub const CAM_MODE_HANGZ: C2RustUnnamed_34 = 15;
pub const CAM_MODE_HANG: C2RustUnnamed_34 = 14;
pub const CAM_MODE_JUMP: C2RustUnnamed_34 = 13;
pub const CAM_MODE_CLIMBZ: C2RustUnnamed_34 = 12;
pub const CAM_MODE_SLINGSHOT: C2RustUnnamed_34 = 11;
pub const CAM_MODE_BOOMERANG: C2RustUnnamed_34 = 10;
pub const CAM_MODE_HOOKSHOT: C2RustUnnamed_34 = 9;
pub const CAM_MODE_BOWARROWZ: C2RustUnnamed_34 = 8;
pub const CAM_MODE_BOWARROW: C2RustUnnamed_34 = 7;
pub const CAM_MODE_FIRSTPERSON: C2RustUnnamed_34 = 6;
pub const CAM_MODE_CLIMB: C2RustUnnamed_34 = 5;
pub const CAM_MODE_BATTLE: C2RustUnnamed_34 = 4;
pub const CAM_MODE_TALK: C2RustUnnamed_34 = 3;
pub const CAM_MODE_FOLLOWTARGET: C2RustUnnamed_34 = 2;
pub const CAM_MODE_TARGET: C2RustUnnamed_34 = 1;
pub const CAM_MODE_NORMAL: C2RustUnnamed_34 = 0;
pub type C2RustUnnamed_35 = libc::c_uint;
pub const SCENE_ID_MAX: C2RustUnnamed_35 = 110;
pub const SCENE_TESTROOM: C2RustUnnamed_35 = 109;
pub const SCENE_SASATEST: C2RustUnnamed_35 = 108;
pub const SCENE_HAIRAL_NIWA2: C2RustUnnamed_35 = 107;
pub const SCENE_SUTARU: C2RustUnnamed_35 = 106;
pub const SCENE_SYOTES2: C2RustUnnamed_35 = 105;
pub const SCENE_SYOTES: C2RustUnnamed_35 = 104;
pub const SCENE_DEPTH_TEST: C2RustUnnamed_35 = 103;
pub const SCENE_BESITU: C2RustUnnamed_35 = 102;
pub const SCENE_TEST01: C2RustUnnamed_35 = 101;
pub const SCENE_GANON_TOU: C2RustUnnamed_35 = 100;
pub const SCENE_SPOT20: C2RustUnnamed_35 = 99;
pub const SCENE_SPOT18: C2RustUnnamed_35 = 98;
pub const SCENE_SPOT17: C2RustUnnamed_35 = 97;
pub const SCENE_SPOT16: C2RustUnnamed_35 = 96;
pub const SCENE_SPOT15: C2RustUnnamed_35 = 95;
pub const SCENE_SPOT13: C2RustUnnamed_35 = 94;
pub const SCENE_SPOT12: C2RustUnnamed_35 = 93;
pub const SCENE_SPOT11: C2RustUnnamed_35 = 92;
pub const SCENE_SPOT10: C2RustUnnamed_35 = 91;
pub const SCENE_SPOT09: C2RustUnnamed_35 = 90;
pub const SCENE_SPOT08: C2RustUnnamed_35 = 89;
pub const SCENE_SPOT07: C2RustUnnamed_35 = 88;
pub const SCENE_SPOT06: C2RustUnnamed_35 = 87;
pub const SCENE_SPOT05: C2RustUnnamed_35 = 86;
pub const SCENE_SPOT04: C2RustUnnamed_35 = 85;
pub const SCENE_SPOT03: C2RustUnnamed_35 = 84;
pub const SCENE_SPOT02: C2RustUnnamed_35 = 83;
pub const SCENE_SPOT01: C2RustUnnamed_35 = 82;
pub const SCENE_SPOT00: C2RustUnnamed_35 = 81;
pub const SCENE_KINSUTA: C2RustUnnamed_35 = 80;
pub const SCENE_GANON_DEMO: C2RustUnnamed_35 = 79;
pub const SCENE_MAHOUYA: C2RustUnnamed_35 = 78;
pub const SCENE_MIHARIGOYA: C2RustUnnamed_35 = 77;
pub const SCENE_SOUKO: C2RustUnnamed_35 = 76;
pub const SCENE_BOWLING: C2RustUnnamed_35 = 75;
pub const SCENE_NAKANIWA: C2RustUnnamed_35 = 74;
pub const SCENE_TURIBORI: C2RustUnnamed_35 = 73;
pub const SCENE_HAKASITARELAY: C2RustUnnamed_35 = 72;
pub const SCENE_HIRAL_DEMO: C2RustUnnamed_35 = 71;
pub const SCENE_HAIRAL_NIWA_N: C2RustUnnamed_35 = 70;
pub const SCENE_HAIRAL_NIWA: C2RustUnnamed_35 = 69;
pub const SCENE_KENJYANOMA: C2RustUnnamed_35 = 68;
pub const SCENE_TOKINOMA: C2RustUnnamed_35 = 67;
pub const SCENE_SYATEKIJYOU: C2RustUnnamed_35 = 66;
pub const SCENE_HAKAANA_OUKE: C2RustUnnamed_35 = 65;
pub const SCENE_HAKAANA2: C2RustUnnamed_35 = 64;
pub const SCENE_HAKAANA: C2RustUnnamed_35 = 63;
pub const SCENE_KAKUSIANA: C2RustUnnamed_35 = 62;
pub const SCENE_YOUSEI_IZUMI_YOKO: C2RustUnnamed_35 = 61;
pub const SCENE_YOUSEI_IZUMI_TATE: C2RustUnnamed_35 = 60;
pub const SCENE_DAIYOUSEI_IZUMI: C2RustUnnamed_35 = 59;
pub const SCENE_HUT: C2RustUnnamed_35 = 58;
pub const SCENE_TENT: C2RustUnnamed_35 = 57;
pub const SCENE_HYLIA_LABO: C2RustUnnamed_35 = 56;
pub const SCENE_LABO: C2RustUnnamed_35 = 55;
pub const SCENE_MALON_STABLE: C2RustUnnamed_35 = 54;
pub const SCENE_IMPA: C2RustUnnamed_35 = 53;
pub const SCENE_LINK_HOME: C2RustUnnamed_35 = 52;
pub const SCENE_FACE_SHOP: C2RustUnnamed_35 = 51;
pub const SCENE_NIGHT_SHOP: C2RustUnnamed_35 = 50;
pub const SCENE_ALLEY_SHOP: C2RustUnnamed_35 = 49;
pub const SCENE_DRAG: C2RustUnnamed_35 = 48;
pub const SCENE_ZOORA: C2RustUnnamed_35 = 47;
pub const SCENE_GOLON: C2RustUnnamed_35 = 46;
pub const SCENE_KOKIRI_SHOP: C2RustUnnamed_35 = 45;
pub const SCENE_SHOP1: C2RustUnnamed_35 = 44;
pub const SCENE_KAKARIKO3: C2RustUnnamed_35 = 43;
pub const SCENE_KAKARIKO: C2RustUnnamed_35 = 42;
pub const SCENE_KOKIRI_HOME5: C2RustUnnamed_35 = 41;
pub const SCENE_KOKIRI_HOME4: C2RustUnnamed_35 = 40;
pub const SCENE_KOKIRI_HOME3: C2RustUnnamed_35 = 39;
pub const SCENE_KOKIRI_HOME: C2RustUnnamed_35 = 38;
pub const SCENE_SHRINE_R: C2RustUnnamed_35 = 37;
pub const SCENE_SHRINE_N: C2RustUnnamed_35 = 36;
pub const SCENE_SHRINE: C2RustUnnamed_35 = 35;
pub const SCENE_MARKET_RUINS: C2RustUnnamed_35 = 34;
pub const SCENE_MARKET_NIGHT: C2RustUnnamed_35 = 33;
pub const SCENE_MARKET_DAY: C2RustUnnamed_35 = 32;
pub const SCENE_MARKET_ALLEY_N: C2RustUnnamed_35 = 31;
pub const SCENE_MARKET_ALLEY: C2RustUnnamed_35 = 30;
pub const SCENE_ENRUI: C2RustUnnamed_35 = 29;
pub const SCENE_ENTRA_N: C2RustUnnamed_35 = 28;
pub const SCENE_ENTRA: C2RustUnnamed_35 = 27;
pub const SCENE_GANON_FINAL: C2RustUnnamed_35 = 26;
pub const SCENE_GANON_BOSS: C2RustUnnamed_35 = 25;
pub const SCENE_HAKADAN_BS: C2RustUnnamed_35 = 24;
pub const SCENE_JYASINBOSS: C2RustUnnamed_35 = 23;
pub const SCENE_MIZUSIN_BS: C2RustUnnamed_35 = 22;
pub const SCENE_FIRE_BS: C2RustUnnamed_35 = 21;
pub const SCENE_MORIBOSSROOM: C2RustUnnamed_35 = 20;
pub const SCENE_BDAN_BOSS: C2RustUnnamed_35 = 19;
pub const SCENE_DDAN_BOSS: C2RustUnnamed_35 = 18;
pub const SCENE_YDAN_BOSS: C2RustUnnamed_35 = 17;
pub const SCENE_TAKARAYA: C2RustUnnamed_35 = 16;
pub const SCENE_GANONTIKA_SONOGO: C2RustUnnamed_35 = 15;
pub const SCENE_GANON_SONOGO: C2RustUnnamed_35 = 14;
pub const SCENE_GANONTIKA: C2RustUnnamed_35 = 13;
pub const SCENE_GERUDOWAY: C2RustUnnamed_35 = 12;
pub const SCENE_MEN: C2RustUnnamed_35 = 11;
pub const SCENE_GANON: C2RustUnnamed_35 = 10;
pub const SCENE_ICE_DOUKUTO: C2RustUnnamed_35 = 9;
pub const SCENE_HAKADANCH: C2RustUnnamed_35 = 8;
pub const SCENE_HAKADAN: C2RustUnnamed_35 = 7;
pub const SCENE_JYASINZOU: C2RustUnnamed_35 = 6;
pub const SCENE_MIZUSIN: C2RustUnnamed_35 = 5;
pub const SCENE_HIDAN: C2RustUnnamed_35 = 4;
pub const SCENE_BMORI1: C2RustUnnamed_35 = 3;
pub const SCENE_BDAN: C2RustUnnamed_35 = 2;
pub const SCENE_DDAN: C2RustUnnamed_35 = 1;
pub const SCENE_YDAN: C2RustUnnamed_35 = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct EffectBlureInit2 {
    pub calcMode: s32,
    pub flags: u16_0,
    pub addAngleChange: s16,
    pub p1StartColor: [u8_0; 4],
    pub p2StartColor: [u8_0; 4],
    pub p1EndColor: [u8_0; 4],
    pub p2EndColor: [u8_0; 4],
    pub elemDuration: u8_0,
    pub unkFlag: u8_0,
    pub drawMode: u8_0,
    pub mode4Param: u8_0,
    pub altPrimColor: Color_RGBA8,
    pub altEnvColor: Color_RGBA8,
}
pub type C2RustUnnamed_36 = libc::c_uint;
pub const EFFECT_SHIELD_PARTICLE: C2RustUnnamed_36 = 3;
pub const EFFECT_BLURE2: C2RustUnnamed_36 = 2;
pub const EFFECT_BLURE1: C2RustUnnamed_36 = 1;
pub const EFFECT_SPARK: C2RustUnnamed_36 = 0;
pub type C2RustUnnamed_37 = libc::c_uint;
pub const EQUIP_BOOTS: C2RustUnnamed_37 = 3;
pub const EQUIP_TUNIC: C2RustUnnamed_37 = 2;
pub const EQUIP_SHIELD: C2RustUnnamed_37 = 1;
pub const EQUIP_SWORD: C2RustUnnamed_37 = 0;
pub type C2RustUnnamed_38 = libc::c_uint;
pub const UPG_NUTS: C2RustUnnamed_38 = 7;
pub const UPG_STICKS: C2RustUnnamed_38 = 6;
pub const UPG_BULLET_BAG: C2RustUnnamed_38 = 5;
pub const UPG_WALLET: C2RustUnnamed_38 = 4;
pub const UPG_SCALE: C2RustUnnamed_38 = 3;
pub const UPG_STRENGTH: C2RustUnnamed_38 = 2;
pub const UPG_BOMB_BAG: C2RustUnnamed_38 = 1;
pub const UPG_QUIVER: C2RustUnnamed_38 = 0;
pub type C2RustUnnamed_39 = libc::c_uint;
pub const QUEST_HEART_PIECE: C2RustUnnamed_39 = 24;
pub const QUEST_SKULL_TOKEN: C2RustUnnamed_39 = 23;
pub const QUEST_GERUDO_CARD: C2RustUnnamed_39 = 22;
pub const QUEST_STONE_OF_AGONY: C2RustUnnamed_39 = 21;
pub const QUEST_ZORA_SAPPHIRE: C2RustUnnamed_39 = 20;
pub const QUEST_GORON_RUBY: C2RustUnnamed_39 = 19;
pub const QUEST_KOKIRI_EMERALD: C2RustUnnamed_39 = 18;
pub const QUEST_SONG_STORMS: C2RustUnnamed_39 = 17;
pub const QUEST_SONG_TIME: C2RustUnnamed_39 = 16;
pub const QUEST_SONG_SUN: C2RustUnnamed_39 = 15;
pub const QUEST_SONG_SARIA: C2RustUnnamed_39 = 14;
pub const QUEST_SONG_EPONA: C2RustUnnamed_39 = 13;
pub const QUEST_SONG_LULLABY: C2RustUnnamed_39 = 12;
pub const QUEST_SONG_PRELUDE: C2RustUnnamed_39 = 11;
pub const QUEST_SONG_NOCTURNE: C2RustUnnamed_39 = 10;
pub const QUEST_SONG_REQUIEM: C2RustUnnamed_39 = 9;
pub const QUEST_SONG_SERENADE: C2RustUnnamed_39 = 8;
pub const QUEST_SONG_BOLERO: C2RustUnnamed_39 = 7;
pub const QUEST_SONG_MINUET: C2RustUnnamed_39 = 6;
pub const QUEST_MEDALLION_LIGHT: C2RustUnnamed_39 = 5;
pub const QUEST_MEDALLION_SHADOW: C2RustUnnamed_39 = 4;
pub const QUEST_MEDALLION_SPIRIT: C2RustUnnamed_39 = 3;
pub const QUEST_MEDALLION_WATER: C2RustUnnamed_39 = 2;
pub const QUEST_MEDALLION_FIRE: C2RustUnnamed_39 = 1;
pub const QUEST_MEDALLION_FOREST: C2RustUnnamed_39 = 0;
pub type C2RustUnnamed_40 = libc::c_uint;
pub const ITEM_NONE: C2RustUnnamed_40 = 255;
pub const ITEM_NONE_FE: C2RustUnnamed_40 = 254;
pub const ITEM_LAST_USED: C2RustUnnamed_40 = 252;
pub const ITEM_NUT_UPGRADE_40: C2RustUnnamed_40 = 155;
pub const ITEM_NUT_UPGRADE_30: C2RustUnnamed_40 = 154;
pub const ITEM_STICK_UPGRADE_30: C2RustUnnamed_40 = 153;
pub const ITEM_STICK_UPGRADE_20: C2RustUnnamed_40 = 152;
pub const ITEM_BOMBCHUS_20: C2RustUnnamed_40 = 151;
pub const ITEM_BOMBCHUS_5: C2RustUnnamed_40 = 150;
pub const ITEM_SEEDS_30: C2RustUnnamed_40 = 149;
pub const ITEM_ARROWS_LARGE: C2RustUnnamed_40 = 148;
pub const ITEM_ARROWS_MEDIUM: C2RustUnnamed_40 = 147;
pub const ITEM_ARROWS_SMALL: C2RustUnnamed_40 = 146;
pub const ITEM_BOMBS_30: C2RustUnnamed_40 = 145;
pub const ITEM_BOMBS_20: C2RustUnnamed_40 = 144;
pub const ITEM_BOMBS_10: C2RustUnnamed_40 = 143;
pub const ITEM_BOMBS_5: C2RustUnnamed_40 = 142;
pub const ITEM_NUTS_10: C2RustUnnamed_40 = 141;
pub const ITEM_NUTS_5: C2RustUnnamed_40 = 140;
pub const ITEM_STICKS_10: C2RustUnnamed_40 = 139;
pub const ITEM_STICKS_5: C2RustUnnamed_40 = 138;
pub const ITEM_INVALID_8: C2RustUnnamed_40 = 137;
pub const ITEM_RUPEE_GOLD: C2RustUnnamed_40 = 136;
pub const ITEM_RUPEE_PURPLE: C2RustUnnamed_40 = 135;
pub const ITEM_RUPEE_RED: C2RustUnnamed_40 = 134;
pub const ITEM_RUPEE_BLUE: C2RustUnnamed_40 = 133;
pub const ITEM_RUPEE_GREEN: C2RustUnnamed_40 = 132;
pub const ITEM_HEART: C2RustUnnamed_40 = 131;
pub const ITEM_MILK: C2RustUnnamed_40 = 130;
pub const ITEM_INVALID_7: C2RustUnnamed_40 = 129;
pub const ITEM_INVALID_6: C2RustUnnamed_40 = 128;
pub const ITEM_INVALID_5: C2RustUnnamed_40 = 127;
pub const ITEM_INVALID_4: C2RustUnnamed_40 = 126;
pub const ITEM_INVALID_3: C2RustUnnamed_40 = 125;
pub const ITEM_INVALID_2: C2RustUnnamed_40 = 124;
pub const ITEM_INVALID_1: C2RustUnnamed_40 = 123;
pub const ITEM_HEART_PIECE_2: C2RustUnnamed_40 = 122;
pub const ITEM_MAGIC_LARGE: C2RustUnnamed_40 = 121;
pub const ITEM_MAGIC_SMALL: C2RustUnnamed_40 = 120;
pub const ITEM_KEY_SMALL: C2RustUnnamed_40 = 119;
pub const ITEM_DUNGEON_MAP: C2RustUnnamed_40 = 118;
pub const ITEM_COMPASS: C2RustUnnamed_40 = 117;
pub const ITEM_KEY_BOSS: C2RustUnnamed_40 = 116;
pub const ITEM_HEART_PIECE: C2RustUnnamed_40 = 115;
pub const ITEM_HEART_CONTAINER: C2RustUnnamed_40 = 114;
pub const ITEM_SKULL_TOKEN: C2RustUnnamed_40 = 113;
pub const ITEM_GERUDO_CARD: C2RustUnnamed_40 = 112;
pub const ITEM_STONE_OF_AGONY: C2RustUnnamed_40 = 111;
pub const ITEM_ZORA_SAPPHIRE: C2RustUnnamed_40 = 110;
pub const ITEM_GORON_RUBY: C2RustUnnamed_40 = 109;
pub const ITEM_KOKIRI_EMERALD: C2RustUnnamed_40 = 108;
pub const ITEM_MEDALLION_LIGHT: C2RustUnnamed_40 = 107;
pub const ITEM_MEDALLION_SHADOW: C2RustUnnamed_40 = 106;
pub const ITEM_MEDALLION_SPIRIT: C2RustUnnamed_40 = 105;
pub const ITEM_MEDALLION_WATER: C2RustUnnamed_40 = 104;
pub const ITEM_MEDALLION_FIRE: C2RustUnnamed_40 = 103;
pub const ITEM_MEDALLION_FOREST: C2RustUnnamed_40 = 102;
pub const ITEM_SONG_STORMS: C2RustUnnamed_40 = 101;
pub const ITEM_SONG_TIME: C2RustUnnamed_40 = 100;
pub const ITEM_SONG_SUN: C2RustUnnamed_40 = 99;
pub const ITEM_SONG_SARIA: C2RustUnnamed_40 = 98;
pub const ITEM_SONG_EPONA: C2RustUnnamed_40 = 97;
pub const ITEM_SONG_LULLABY: C2RustUnnamed_40 = 96;
pub const ITEM_SONG_PRELUDE: C2RustUnnamed_40 = 95;
pub const ITEM_SONG_NOCTURNE: C2RustUnnamed_40 = 94;
pub const ITEM_SONG_REQUIEM: C2RustUnnamed_40 = 93;
pub const ITEM_SONG_SERENADE: C2RustUnnamed_40 = 92;
pub const ITEM_SONG_BOLERO: C2RustUnnamed_40 = 91;
pub const ITEM_SONG_MINUET: C2RustUnnamed_40 = 90;
pub const ITEM_FISHING_POLE: C2RustUnnamed_40 = 89;
pub const ITEM_SEEDS: C2RustUnnamed_40 = 88;
pub const ITEM_WALLET_GIANT: C2RustUnnamed_40 = 87;
pub const ITEM_WALLET_ADULT: C2RustUnnamed_40 = 86;
pub const ITEM_SWORD_KNIFE: C2RustUnnamed_40 = 85;
pub const ITEM_SCALE_GOLDEN: C2RustUnnamed_40 = 84;
pub const ITEM_SCALE_SILVER: C2RustUnnamed_40 = 83;
pub const ITEM_GAUNTLETS_GOLD: C2RustUnnamed_40 = 82;
pub const ITEM_GAUNTLETS_SILVER: C2RustUnnamed_40 = 81;
pub const ITEM_BRACELET: C2RustUnnamed_40 = 80;
pub const ITEM_BOMB_BAG_40: C2RustUnnamed_40 = 79;
pub const ITEM_BOMB_BAG_30: C2RustUnnamed_40 = 78;
pub const ITEM_BOMB_BAG_20: C2RustUnnamed_40 = 77;
pub const ITEM_QUIVER_50: C2RustUnnamed_40 = 76;
pub const ITEM_QUIVER_40: C2RustUnnamed_40 = 75;
pub const ITEM_QUIVER_30: C2RustUnnamed_40 = 74;
pub const ITEM_BULLET_BAG_50: C2RustUnnamed_40 = 73;
pub const ITEM_BULLET_BAG_40: C2RustUnnamed_40 = 72;
pub const ITEM_BULLET_BAG_30: C2RustUnnamed_40 = 71;
pub const ITEM_BOOTS_HOVER: C2RustUnnamed_40 = 70;
pub const ITEM_BOOTS_IRON: C2RustUnnamed_40 = 69;
pub const ITEM_BOOTS_KOKIRI: C2RustUnnamed_40 = 68;
pub const ITEM_TUNIC_ZORA: C2RustUnnamed_40 = 67;
pub const ITEM_TUNIC_GORON: C2RustUnnamed_40 = 66;
pub const ITEM_TUNIC_KOKIRI: C2RustUnnamed_40 = 65;
pub const ITEM_SHIELD_MIRROR: C2RustUnnamed_40 = 64;
pub const ITEM_SHIELD_HYLIAN: C2RustUnnamed_40 = 63;
pub const ITEM_SHIELD_DEKU: C2RustUnnamed_40 = 62;
pub const ITEM_SWORD_BGS: C2RustUnnamed_40 = 61;
pub const ITEM_SWORD_MASTER: C2RustUnnamed_40 = 60;
pub const ITEM_SWORD_KOKIRI: C2RustUnnamed_40 = 59;
pub const ITEM_BOW_ARROW_LIGHT: C2RustUnnamed_40 = 58;
pub const ITEM_BOW_ARROW_ICE: C2RustUnnamed_40 = 57;
pub const ITEM_BOW_ARROW_FIRE: C2RustUnnamed_40 = 56;
pub const ITEM_CLAIM_CHECK: C2RustUnnamed_40 = 55;
pub const ITEM_EYEDROPS: C2RustUnnamed_40 = 54;
pub const ITEM_FROG: C2RustUnnamed_40 = 53;
pub const ITEM_PRESCRIPTION: C2RustUnnamed_40 = 52;
pub const ITEM_SWORD_BROKEN: C2RustUnnamed_40 = 51;
pub const ITEM_SAW: C2RustUnnamed_40 = 50;
pub const ITEM_ODD_POTION: C2RustUnnamed_40 = 49;
pub const ITEM_ODD_MUSHROOM: C2RustUnnamed_40 = 48;
pub const ITEM_COJIRO: C2RustUnnamed_40 = 47;
pub const ITEM_POCKET_CUCCO: C2RustUnnamed_40 = 46;
pub const ITEM_POCKET_EGG: C2RustUnnamed_40 = 45;
pub const ITEM_SOLD_OUT: C2RustUnnamed_40 = 44;
pub const ITEM_MASK_TRUTH: C2RustUnnamed_40 = 43;
pub const ITEM_MASK_GERUDO: C2RustUnnamed_40 = 42;
pub const ITEM_MASK_ZORA: C2RustUnnamed_40 = 41;
pub const ITEM_MASK_GORON: C2RustUnnamed_40 = 40;
pub const ITEM_MASK_BUNNY: C2RustUnnamed_40 = 39;
pub const ITEM_MASK_SPOOKY: C2RustUnnamed_40 = 38;
pub const ITEM_MASK_SKULL: C2RustUnnamed_40 = 37;
pub const ITEM_MASK_KEATON: C2RustUnnamed_40 = 36;
pub const ITEM_LETTER_ZELDA: C2RustUnnamed_40 = 35;
pub const ITEM_CHICKEN: C2RustUnnamed_40 = 34;
pub const ITEM_WEIRD_EGG: C2RustUnnamed_40 = 33;
pub const ITEM_POE: C2RustUnnamed_40 = 32;
pub const ITEM_MILK_HALF: C2RustUnnamed_40 = 31;
pub const ITEM_BIG_POE: C2RustUnnamed_40 = 30;
pub const ITEM_BUG: C2RustUnnamed_40 = 29;
pub const ITEM_BLUE_FIRE: C2RustUnnamed_40 = 28;
pub const ITEM_LETTER_RUTO: C2RustUnnamed_40 = 27;
pub const ITEM_MILK_BOTTLE: C2RustUnnamed_40 = 26;
pub const ITEM_FISH: C2RustUnnamed_40 = 25;
pub const ITEM_FAIRY: C2RustUnnamed_40 = 24;
pub const ITEM_POTION_BLUE: C2RustUnnamed_40 = 23;
pub const ITEM_POTION_GREEN: C2RustUnnamed_40 = 22;
pub const ITEM_POTION_RED: C2RustUnnamed_40 = 21;
pub const ITEM_BOTTLE: C2RustUnnamed_40 = 20;
pub const ITEM_NAYRUS_LOVE: C2RustUnnamed_40 = 19;
pub const ITEM_ARROW_LIGHT: C2RustUnnamed_40 = 18;
pub const ITEM_HAMMER: C2RustUnnamed_40 = 17;
pub const ITEM_BEAN: C2RustUnnamed_40 = 16;
pub const ITEM_LENS: C2RustUnnamed_40 = 15;
pub const ITEM_BOOMERANG: C2RustUnnamed_40 = 14;
pub const ITEM_FARORES_WIND: C2RustUnnamed_40 = 13;
pub const ITEM_ARROW_ICE: C2RustUnnamed_40 = 12;
pub const ITEM_LONGSHOT: C2RustUnnamed_40 = 11;
pub const ITEM_HOOKSHOT: C2RustUnnamed_40 = 10;
pub const ITEM_BOMBCHU: C2RustUnnamed_40 = 9;
pub const ITEM_OCARINA_TIME: C2RustUnnamed_40 = 8;
pub const ITEM_OCARINA_FAIRY: C2RustUnnamed_40 = 7;
pub const ITEM_SLINGSHOT: C2RustUnnamed_40 = 6;
pub const ITEM_DINS_FIRE: C2RustUnnamed_40 = 5;
pub const ITEM_ARROW_FIRE: C2RustUnnamed_40 = 4;
pub const ITEM_BOW: C2RustUnnamed_40 = 3;
pub const ITEM_BOMB: C2RustUnnamed_40 = 2;
pub const ITEM_NUT: C2RustUnnamed_40 = 1;
pub const ITEM_STICK: C2RustUnnamed_40 = 0;
pub type C2RustUnnamed_41 = libc::c_uint;
pub const GI_MAX: C2RustUnnamed_41 = 126;
pub const GI_TEXT_0: C2RustUnnamed_41 = 125;
pub const GI_ICE_TRAP: C2RustUnnamed_41 = 124;
pub const GI_BULLET_BAG_50: C2RustUnnamed_41 = 123;
pub const GI_NUT_UPGRADE_40: C2RustUnnamed_41 = 122;
pub const GI_NUT_UPGRADE_30: C2RustUnnamed_41 = 121;
pub const GI_STICK_UPGRADE_30: C2RustUnnamed_41 = 120;
pub const GI_STICK_UPGRADE_20: C2RustUnnamed_41 = 119;
pub const GI_HEART_PIECE_WIN: C2RustUnnamed_41 = 118;
pub const GI_RUPEE_PURPLE_LOSE: C2RustUnnamed_41 = 117;
pub const GI_RUPEE_RED_LOSE: C2RustUnnamed_41 = 116;
pub const GI_RUPEE_BLUE_LOSE: C2RustUnnamed_41 = 115;
pub const GI_RUPEE_GREEN_LOSE: C2RustUnnamed_41 = 114;
pub const GI_DOOR_KEY: C2RustUnnamed_41 = 113;
pub const GI_BIG_POE: C2RustUnnamed_41 = 112;
pub const GI_POE: C2RustUnnamed_41 = 111;
pub const GI_BLUE_FIRE: C2RustUnnamed_41 = 110;
pub const GI_BUGS: C2RustUnnamed_41 = 109;
pub const GI_FISH: C2RustUnnamed_41 = 108;
pub const GI_BOMBCHUS_20: C2RustUnnamed_41 = 107;
pub const GI_BOMBCHUS_5: C2RustUnnamed_41 = 106;
pub const GI_SEEDS_30: C2RustUnnamed_41 = 105;
pub const GI_BOMBS_30: C2RustUnnamed_41 = 104;
pub const GI_BOMBS_20: C2RustUnnamed_41 = 103;
pub const GI_BOMBS_10: C2RustUnnamed_41 = 102;
pub const GI_BOMBS_1: C2RustUnnamed_41 = 101;
pub const GI_NUTS_10: C2RustUnnamed_41 = 100;
pub const GI_NUTS_5_2: C2RustUnnamed_41 = 99;
pub const GI_STICKS_10: C2RustUnnamed_41 = 98;
pub const GI_STICKS_5: C2RustUnnamed_41 = 97;
pub const GI_BULLET_BAG_40: C2RustUnnamed_41 = 96;
pub const GI_BULLET_BAG_30: C2RustUnnamed_41 = 95;
pub const GI_NAYRUS_LOVE: C2RustUnnamed_41 = 94;
pub const GI_FARORES_WIND: C2RustUnnamed_41 = 93;
pub const GI_DINS_FIRE: C2RustUnnamed_41 = 92;
pub const GI_SKULL_TOKEN: C2RustUnnamed_41 = 91;
pub const GI_ARROW_LIGHT: C2RustUnnamed_41 = 90;
pub const GI_ARROW_ICE: C2RustUnnamed_41 = 89;
pub const GI_ARROW_FIRE: C2RustUnnamed_41 = 88;
pub const GI_SWORD_BGS: C2RustUnnamed_41 = 87;
pub const GI_RUPEE_GOLD: C2RustUnnamed_41 = 86;
pub const GI_RUPEE_PURPLE: C2RustUnnamed_41 = 85;
pub const GI_BRACELET: C2RustUnnamed_41 = 84;
pub const GI_MASK_GERUDO: C2RustUnnamed_41 = 83;
pub const GI_MASK_ZORA: C2RustUnnamed_41 = 82;
pub const GI_MASK_GORON: C2RustUnnamed_41 = 81;
pub const GI_MILK: C2RustUnnamed_41 = 80;
pub const GI_HEART_CONTAINER_2: C2RustUnnamed_41 = 79;
pub const GI_RUPEE_RED: C2RustUnnamed_41 = 78;
pub const GI_RUPEE_BLUE: C2RustUnnamed_41 = 77;
pub const GI_RUPEE_GREEN: C2RustUnnamed_41 = 76;
pub const GI_ARROWS_LARGE: C2RustUnnamed_41 = 75;
pub const GI_ARROWS_MEDIUM: C2RustUnnamed_41 = 74;
pub const GI_ARROWS_SMALL: C2RustUnnamed_41 = 73;
pub const GI_HEART: C2RustUnnamed_41 = 72;
pub const GI_WEIRD_EGG: C2RustUnnamed_41 = 71;
pub const GI_WALLET_GIANT: C2RustUnnamed_41 = 70;
pub const GI_WALLET_ADULT: C2RustUnnamed_41 = 69;
pub const GI_MAGIC_LARGE: C2RustUnnamed_41 = 68;
pub const GI_MAGIC_SMALL: C2RustUnnamed_41 = 67;
pub const GI_KEY_SMALL: C2RustUnnamed_41 = 66;
pub const GI_MAP: C2RustUnnamed_41 = 65;
pub const GI_COMPASS: C2RustUnnamed_41 = 64;
pub const GI_KEY_BOSS: C2RustUnnamed_41 = 63;
pub const GI_HEART_PIECE: C2RustUnnamed_41 = 62;
pub const GI_HEART_CONTAINER: C2RustUnnamed_41 = 61;
pub const GI_SEEDS_5: C2RustUnnamed_41 = 60;
pub const GI_OCARINA_FAIRY: C2RustUnnamed_41 = 59;
pub const GI_GERUDO_CARD: C2RustUnnamed_41 = 58;
pub const GI_STONE_OF_AGONY: C2RustUnnamed_41 = 57;
pub const GI_SCALE_GOLD: C2RustUnnamed_41 = 56;
pub const GI_SCALE_SILVER: C2RustUnnamed_41 = 55;
pub const GI_GAUNTLETS_GOLD: C2RustUnnamed_41 = 54;
pub const GI_GAUNTLETS_SILVER: C2RustUnnamed_41 = 53;
pub const GI_BOMB_BAG_40: C2RustUnnamed_41 = 52;
pub const GI_BOMB_BAG_30: C2RustUnnamed_41 = 51;
pub const GI_BOMB_BAG_20: C2RustUnnamed_41 = 50;
pub const GI_QUIVER_50: C2RustUnnamed_41 = 49;
pub const GI_QUIVER_40: C2RustUnnamed_41 = 48;
pub const GI_BOOTS_HOVER: C2RustUnnamed_41 = 47;
pub const GI_BOOTS_IRON: C2RustUnnamed_41 = 46;
pub const GI_TUNIC_ZORA: C2RustUnnamed_41 = 45;
pub const GI_TUNIC_GORON: C2RustUnnamed_41 = 44;
pub const GI_SHIELD_MIRROR: C2RustUnnamed_41 = 43;
pub const GI_SHIELD_HYLIAN: C2RustUnnamed_41 = 42;
pub const GI_SHIELD_DEKU: C2RustUnnamed_41 = 41;
pub const GI_SWORD_KNIFE: C2RustUnnamed_41 = 40;
pub const GI_SWORD_KOKIRI: C2RustUnnamed_41 = 39;
pub const GI_CLAIM_CHECK: C2RustUnnamed_41 = 38;
pub const GI_EYEDROPS: C2RustUnnamed_41 = 37;
pub const GI_FROG: C2RustUnnamed_41 = 36;
pub const GI_PRESCRIPTION: C2RustUnnamed_41 = 35;
pub const GI_SWORD_BROKEN: C2RustUnnamed_41 = 34;
pub const GI_SAW: C2RustUnnamed_41 = 33;
pub const GI_ODD_POTION: C2RustUnnamed_41 = 32;
pub const GI_ODD_MUSHROOM: C2RustUnnamed_41 = 31;
pub const GI_POCKET_CUCCO: C2RustUnnamed_41 = 30;
pub const GI_POCKET_EGG: C2RustUnnamed_41 = 29;
pub const GI_MASK_TRUTH: C2RustUnnamed_41 = 28;
pub const GI_MASK_BUNNY: C2RustUnnamed_41 = 27;
pub const GI_MASK_KEATON: C2RustUnnamed_41 = 26;
pub const GI_CHICKEN: C2RustUnnamed_41 = 25;
pub const GI_MASK_SPOOKY: C2RustUnnamed_41 = 24;
pub const GI_MASK_SKULL: C2RustUnnamed_41 = 23;
pub const GI_BEAN: C2RustUnnamed_41 = 22;
pub const GI_LETTER_RUTO: C2RustUnnamed_41 = 21;
pub const GI_MILK_BOTTLE: C2RustUnnamed_41 = 20;
pub const GI_FAIRY: C2RustUnnamed_41 = 19;
pub const GI_POTION_BLUE: C2RustUnnamed_41 = 18;
pub const GI_POTION_GREEN: C2RustUnnamed_41 = 17;
pub const GI_POTION_RED: C2RustUnnamed_41 = 16;
pub const GI_BOTTLE: C2RustUnnamed_41 = 15;
pub const GI_COJIRO: C2RustUnnamed_41 = 14;
pub const GI_HAMMER: C2RustUnnamed_41 = 13;
pub const GI_OCARINA_OOT: C2RustUnnamed_41 = 12;
pub const GI_LETTER_ZELDA: C2RustUnnamed_41 = 11;
pub const GI_LENS: C2RustUnnamed_41 = 10;
pub const GI_LONGSHOT: C2RustUnnamed_41 = 9;
pub const GI_HOOKSHOT: C2RustUnnamed_41 = 8;
pub const GI_STICKS_1: C2RustUnnamed_41 = 7;
pub const GI_BOOMERANG: C2RustUnnamed_41 = 6;
pub const GI_SLINGSHOT: C2RustUnnamed_41 = 5;
pub const GI_BOW: C2RustUnnamed_41 = 4;
pub const GI_BOMBCHUS_10: C2RustUnnamed_41 = 3;
pub const GI_NUTS_5: C2RustUnnamed_41 = 2;
pub const GI_BOMBS_5: C2RustUnnamed_41 = 1;
pub const GI_NONE: C2RustUnnamed_41 = 0;
pub type C2RustUnnamed_42 = libc::c_uint;
pub const GID_MAX: C2RustUnnamed_42 = 117;
pub const GID_SKULL_TOKEN_2: C2RustUnnamed_42 = 116;
pub const GID_SWORD_KOKIRI: C2RustUnnamed_42 = 115;
pub const GID_BULLET_BAG_50: C2RustUnnamed_42 = 114;
pub const GID_RUPEE_GOLD: C2RustUnnamed_42 = 113;
pub const GID_RUPEE_PURPLE: C2RustUnnamed_42 = 112;
pub const GID_BIG_POE: C2RustUnnamed_42 = 111;
pub const GID_RUPEE_RED: C2RustUnnamed_42 = 110;
pub const GID_RUPEE_BLUE: C2RustUnnamed_42 = 109;
pub const GID_RUPEE_GREEN: C2RustUnnamed_42 = 108;
pub const GID_BULLET_BAG: C2RustUnnamed_42 = 107;
pub const GID_FAIRY: C2RustUnnamed_42 = 106;
pub const GID_POE: C2RustUnnamed_42 = 105;
pub const GID_BUTTERFLY: C2RustUnnamed_42 = 104;
pub const GID_BUG: C2RustUnnamed_42 = 103;
pub const GID_BLUE_FIRE: C2RustUnnamed_42 = 102;
pub const GID_NAYRUS_LOVE: C2RustUnnamed_42 = 101;
pub const GID_FARORES_WIND: C2RustUnnamed_42 = 100;
pub const GID_DINS_FIRE: C2RustUnnamed_42 = 99;
pub const GID_SKULL_TOKEN: C2RustUnnamed_42 = 98;
pub const GID_ARROW_LIGHT: C2RustUnnamed_42 = 97;
pub const GID_ARROW_ICE: C2RustUnnamed_42 = 96;
pub const GID_ARROW_FIRE: C2RustUnnamed_42 = 95;
pub const GID_BOOTS_HOVER: C2RustUnnamed_42 = 94;
pub const GID_COJIRO: C2RustUnnamed_42 = 93;
pub const GID_MASK_GERUDO: C2RustUnnamed_42 = 92;
pub const GID_MASK_ZORA: C2RustUnnamed_42 = 91;
pub const GID_MASK_GORON: C2RustUnnamed_42 = 90;
pub const GID_FROG: C2RustUnnamed_42 = 89;
pub const GID_SOLDOUT: C2RustUnnamed_42 = 88;
pub const GID_BRACELET: C2RustUnnamed_42 = 87;
pub const GID_PRESCRIPTION: C2RustUnnamed_42 = 86;
pub const GID_SWORD_BROKEN: C2RustUnnamed_42 = 85;
pub const GID_CLAIM_CHECK: C2RustUnnamed_42 = 84;
pub const GID_ODD_MUSHROOM: C2RustUnnamed_42 = 83;
pub const GID_ODD_POTION: C2RustUnnamed_42 = 82;
pub const GID_EYEDROPS: C2RustUnnamed_42 = 81;
pub const GID_MASK_TRUTH: C2RustUnnamed_42 = 80;
pub const GID_MASK_BUNNY: C2RustUnnamed_42 = 79;
pub const GID_MASK_SKULL: C2RustUnnamed_42 = 78;
pub const GID_NCOIN_BLUE: C2RustUnnamed_42 = 77;
pub const GID_NCOIN_GREEN: C2RustUnnamed_42 = 76;
pub const GID_NCOIN_RED: C2RustUnnamed_42 = 75;
pub const GID_NCOIN_YELLOW: C2RustUnnamed_42 = 74;
pub const GID_GAUNTLETS_GOLD: C2RustUnnamed_42 = 73;
pub const GID_GAUNTLETS_SILVER: C2RustUnnamed_42 = 72;
pub const GID_SEEDS: C2RustUnnamed_42 = 71;
pub const GID_BOOTS_IRON: C2RustUnnamed_42 = 70;
pub const GID_OCARINA_FAIRY: C2RustUnnamed_42 = 69;
pub const GID_LETTER_RUTO: C2RustUnnamed_42 = 68;
pub const GID_CHICKEN: C2RustUnnamed_42 = 67;
pub const GID_SWORD_BGS: C2RustUnnamed_42 = 66;
pub const GID_GRASS: C2RustUnnamed_42 = 65;
pub const GID_HAMMER: C2RustUnnamed_42 = 64;
pub const GID_SAW: C2RustUnnamed_42 = 63;
pub const GID_FISH: C2RustUnnamed_42 = 62;
pub const GID_BEAN: C2RustUnnamed_42 = 61;
pub const GID_TUNIC_ZORA: C2RustUnnamed_42 = 60;
pub const GID_TUNIC_GORON: C2RustUnnamed_42 = 59;
pub const GID_LETTER_ZELDA: C2RustUnnamed_42 = 58;
pub const GID_SHIELD_MIRROR: C2RustUnnamed_42 = 57;
pub const GID_POTION_BLUE: C2RustUnnamed_42 = 56;
pub const GID_POTION_RED: C2RustUnnamed_42 = 55;
pub const GID_POTION_GREEN: C2RustUnnamed_42 = 54;
pub const GID_LENS: C2RustUnnamed_42 = 53;
pub const GID_BOW: C2RustUnnamed_42 = 52;
pub const GID_BOOMERANG: C2RustUnnamed_42 = 51;
pub const GID_SLINGSHOT: C2RustUnnamed_42 = 50;
pub const GID_MASK_SPOOKY: C2RustUnnamed_42 = 49;
pub const GID_MASK_KEATON: C2RustUnnamed_42 = 48;
pub const GID_MILK: C2RustUnnamed_42 = 47;
pub const GID_OCARINA_TIME: C2RustUnnamed_42 = 46;
pub const GID_LONGSHOT: C2RustUnnamed_42 = 45;
pub const GID_HOOKSHOT: C2RustUnnamed_42 = 44;
pub const GID_SHIELD_HYLIAN: C2RustUnnamed_42 = 43;
pub const GID_SCALE_GOLDEN: C2RustUnnamed_42 = 42;
pub const GID_SCALE_SILVER: C2RustUnnamed_42 = 41;
pub const GID_EGG: C2RustUnnamed_42 = 40;
pub const GID_BOMBCHU: C2RustUnnamed_42 = 39;
pub const GID_ARROWS_LARGE: C2RustUnnamed_42 = 38;
pub const GID_ARROWS_MEDIUM: C2RustUnnamed_42 = 37;
pub const GID_ARROWS_SMALL: C2RustUnnamed_42 = 36;
pub const GID_GERUDO_CARD: C2RustUnnamed_42 = 35;
pub const GID_WALLET_GIANT: C2RustUnnamed_42 = 34;
pub const GID_WALLET_ADULT: C2RustUnnamed_42 = 33;
pub const GID_STONE_OF_AGONY: C2RustUnnamed_42 = 32;
pub const GID_BOMB: C2RustUnnamed_42 = 31;
pub const GID_MAGIC_LARGE: C2RustUnnamed_42 = 30;
pub const GID_MAGIC_SMALL: C2RustUnnamed_42 = 29;
pub const GID_SHIELD_DEKU: C2RustUnnamed_42 = 28;
pub const GID_DUNGEON_MAP: C2RustUnnamed_42 = 27;
pub const GID_STICK: C2RustUnnamed_42 = 26;
pub const GID_BOMB_BAG_40: C2RustUnnamed_42 = 25;
pub const GID_BOMB_BAG_30: C2RustUnnamed_42 = 24;
pub const GID_BOMB_BAG_20: C2RustUnnamed_42 = 23;
pub const GID_QUIVER_50: C2RustUnnamed_42 = 22;
pub const GID_QUIVER_40: C2RustUnnamed_42 = 21;
pub const GID_QUIVER_30: C2RustUnnamed_42 = 20;
pub const GID_HEART_PIECE: C2RustUnnamed_42 = 19;
pub const GID_HEART_CONTAINER: C2RustUnnamed_42 = 18;
pub const GID_NUTS: C2RustUnnamed_42 = 17;
pub const GID_MEDALLION_LIGHT: C2RustUnnamed_42 = 16;
pub const GID_MEDALLION_SHADOW: C2RustUnnamed_42 = 15;
pub const GID_MEDALLION_SPIRIT: C2RustUnnamed_42 = 14;
pub const GID_MEDALLION_WATER: C2RustUnnamed_42 = 13;
pub const GID_MEDALLION_FIRE: C2RustUnnamed_42 = 12;
pub const GID_MEDALLION_FOREST: C2RustUnnamed_42 = 11;
pub const GID_COMPASS: C2RustUnnamed_42 = 10;
pub const GID_KEY_BOSS: C2RustUnnamed_42 = 9;
pub const GID_HEART: C2RustUnnamed_42 = 8;
pub const GID_SONG_PRELUDE: C2RustUnnamed_42 = 7;
pub const GID_SONG_NOCTURNE: C2RustUnnamed_42 = 6;
pub const GID_SONG_REQUIEM: C2RustUnnamed_42 = 5;
pub const GID_SONG_SERENADE: C2RustUnnamed_42 = 4;
pub const GID_SONG_BOLERO: C2RustUnnamed_42 = 3;
pub const GID_SONG_MINUET: C2RustUnnamed_42 = 2;
pub const GID_KEY_SMALL: C2RustUnnamed_42 = 1;
pub const GID_BOTTLE: C2RustUnnamed_42 = 0;
pub type C2RustUnnamed_43 = libc::c_uint;
pub const EXCH_ITEM_MAX: C2RustUnnamed_43 = 30;
pub const EXCH_ITEM_LETTER_RUTO: C2RustUnnamed_43 = 29;
pub const EXCH_ITEM_BIG_POE: C2RustUnnamed_43 = 28;
pub const EXCH_ITEM_POE: C2RustUnnamed_43 = 27;
pub const EXCH_ITEM_BUG: C2RustUnnamed_43 = 26;
pub const EXCH_ITEM_BLUE_FIRE: C2RustUnnamed_43 = 25;
pub const EXCH_ITEM_FISH: C2RustUnnamed_43 = 24;
pub const EXCH_ITEM_MASK_GERUDO: C2RustUnnamed_43 = 23;
pub const EXCH_ITEM_MASK_ZORA: C2RustUnnamed_43 = 22;
pub const EXCH_ITEM_MASK_GORON: C2RustUnnamed_43 = 21;
pub const EXCH_ITEM_MASK_TRUTH: C2RustUnnamed_43 = 20;
pub const EXCH_ITEM_MASK_BUNNY: C2RustUnnamed_43 = 19;
pub const EXCH_ITEM_MASK_KEATON: C2RustUnnamed_43 = 18;
pub const EXCH_ITEM_MASK_SPOOKY: C2RustUnnamed_43 = 17;
pub const EXCH_ITEM_MASK_SKULL: C2RustUnnamed_43 = 16;
pub const EXCH_ITEM_CLAIM_CHECK: C2RustUnnamed_43 = 15;
pub const EXCH_ITEM_EYEDROPS: C2RustUnnamed_43 = 14;
pub const EXCH_ITEM_FROG: C2RustUnnamed_43 = 13;
pub const EXCH_ITEM_PRESCRIPTION: C2RustUnnamed_43 = 12;
pub const EXCH_ITEM_SWORD_BROKEN: C2RustUnnamed_43 = 11;
pub const EXCH_ITEM_SAW: C2RustUnnamed_43 = 10;
pub const EXCH_ITEM_ODD_POTION: C2RustUnnamed_43 = 9;
pub const EXCH_ITEM_ODD_MUSHROOM: C2RustUnnamed_43 = 8;
pub const EXCH_ITEM_COJIRO: C2RustUnnamed_43 = 7;
pub const EXCH_ITEM_POCKET_CUCCO: C2RustUnnamed_43 = 6;
pub const EXCH_ITEM_POCKET_EGG: C2RustUnnamed_43 = 5;
pub const EXCH_ITEM_BEAN: C2RustUnnamed_43 = 4;
pub const EXCH_ITEM_CHICKEN: C2RustUnnamed_43 = 3;
pub const EXCH_ITEM_WEIRD_EGG: C2RustUnnamed_43 = 2;
pub const EXCH_ITEM_LETTER_ZELDA: C2RustUnnamed_43 = 1;
pub const EXCH_ITEM_NONE: C2RustUnnamed_43 = 0;
pub type C2RustUnnamed_44 = libc::c_uint;
pub const SEQ_MODE_IGNORE: C2RustUnnamed_44 = 3;
pub const SEQ_MODE_STILL: C2RustUnnamed_44 = 2;
pub const SEQ_MODE_ENEMY: C2RustUnnamed_44 = 1;
pub const SEQ_MODE_DEFAULT: C2RustUnnamed_44 = 0;
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct InitChainEntry {
    #[bitfield(name = "cont", ty = "u32_0", bits = "0..=0")]
    #[bitfield(name = "type_0", ty = "u32_0", bits = "1..=4")]
    #[bitfield(name = "offset", ty = "u32_0", bits = "5..=15")]
    #[bitfield(name = "value", ty = "s32", bits = "16..=31")]
    pub cont_type_0_offset_value: [u8; 4],
}
pub type C2RustUnnamed_45 = libc::c_uint;
pub const ICHAINTYPE_VEC3S: C2RustUnnamed_45 = 10;
pub const ICHAINTYPE_VEC3F_DIV1000: C2RustUnnamed_45 = 9;
pub const ICHAINTYPE_VEC3F: C2RustUnnamed_45 = 8;
pub const ICHAINTYPE_F32_DIV1000: C2RustUnnamed_45 = 7;
pub const ICHAINTYPE_F32: C2RustUnnamed_45 = 6;
pub const ICHAINTYPE_S32: C2RustUnnamed_45 = 5;
pub const ICHAINTYPE_U32: C2RustUnnamed_45 = 4;
pub const ICHAINTYPE_S16: C2RustUnnamed_45 = 3;
pub const ICHAINTYPE_U16: C2RustUnnamed_45 = 2;
pub const ICHAINTYPE_S8: C2RustUnnamed_45 = 1;
pub const ICHAINTYPE_U8: C2RustUnnamed_45 = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GameInfo {
    pub regPage: s32,
    pub regGroup: s32,
    pub regCur: s32,
    pub dpadLast: s32,
    pub repeat: s32,
    pub data: [s16; 2784],
}
pub type C2RustUnnamed_46 = libc::c_uint;
pub const OCARINA_ACTION_CHECK_NOWARP_DONE: C2RustUnnamed_46 = 49;
pub const OCARINA_ACTION_CHECK_NOWARP: C2RustUnnamed_46 = 48;
pub const OCARINA_ACTION_FROGS: C2RustUnnamed_46 = 47;
pub const OCARINA_ACTION_MEMORY_GAME: C2RustUnnamed_46 = 46;
pub const OCARINA_ACTION_SCARECROW_PLAYBACK: C2RustUnnamed_46 = 45;
pub const OCARINA_ACTION_SCARECROW_RECORDING: C2RustUnnamed_46 = 44;
pub const OCARINA_ACTION_SCARECROW_LONG_PLAYBACK: C2RustUnnamed_46 = 43;
pub const OCARINA_ACTION_SCARECROW_LONG_RECORDING: C2RustUnnamed_46 = 42;
pub const OCARINA_ACTION_FREE_PLAY_DONE: C2RustUnnamed_46 = 41;
pub const OCARINA_ACTION_CHECK_SCARECROW: C2RustUnnamed_46 = 40;
pub const OCARINA_ACTION_CHECK_STORMS: C2RustUnnamed_46 = 39;
pub const OCARINA_ACTION_CHECK_TIME: C2RustUnnamed_46 = 38;
pub const OCARINA_ACTION_CHECK_SUNS: C2RustUnnamed_46 = 37;
pub const OCARINA_ACTION_CHECK_LULLABY: C2RustUnnamed_46 = 36;
pub const OCARINA_ACTION_CHECK_EPONA: C2RustUnnamed_46 = 35;
pub const OCARINA_ACTION_CHECK_SARIA: C2RustUnnamed_46 = 34;
pub const OCARINA_ACTION_CHECK_PRELUDE: C2RustUnnamed_46 = 33;
pub const OCARINA_ACTION_CHECK_NOCTURNE: C2RustUnnamed_46 = 32;
pub const OCARINA_ACTION_CHECK_REQUIEM: C2RustUnnamed_46 = 31;
pub const OCARINA_ACTION_CHECK_SERENADE: C2RustUnnamed_46 = 30;
pub const OCARINA_ACTION_CHECK_BOLERO: C2RustUnnamed_46 = 29;
pub const OCARINA_ACTION_CHECK_MINUET: C2RustUnnamed_46 = 28;
pub const OCARINA_ACTION_UNK_1B: C2RustUnnamed_46 = 27;
pub const OCARINA_ACTION_PLAYBACK_STORMS: C2RustUnnamed_46 = 26;
pub const OCARINA_ACTION_PLAYBACK_TIME: C2RustUnnamed_46 = 25;
pub const OCARINA_ACTION_PLAYBACK_SUNS: C2RustUnnamed_46 = 24;
pub const OCARINA_ACTION_PLAYBACK_LULLABY: C2RustUnnamed_46 = 23;
pub const OCARINA_ACTION_PLAYBACK_EPONA: C2RustUnnamed_46 = 22;
pub const OCARINA_ACTION_PLAYBACK_SARIA: C2RustUnnamed_46 = 21;
pub const OCARINA_ACTION_PLAYBACK_PRELUDE: C2RustUnnamed_46 = 20;
pub const OCARINA_ACTION_PLAYBACK_NOCTURNE: C2RustUnnamed_46 = 19;
pub const OCARINA_ACTION_PLAYBACK_REQUIEM: C2RustUnnamed_46 = 18;
pub const OCARINA_ACTION_PLAYBACK_SERENADE: C2RustUnnamed_46 = 17;
pub const OCARINA_ACTION_PLAYBACK_BOLERO: C2RustUnnamed_46 = 16;
pub const OCARINA_ACTION_PLAYBACK_MINUET: C2RustUnnamed_46 = 15;
pub const OCARINA_ACTION_UNK_E: C2RustUnnamed_46 = 14;
pub const OCARINA_ACTION_TEACH_STORMS: C2RustUnnamed_46 = 13;
pub const OCARINA_ACTION_TEACH_TIME: C2RustUnnamed_46 = 12;
pub const OCARINA_ACTION_TEACH_SUNS: C2RustUnnamed_46 = 11;
pub const OCARINA_ACTION_TEACH_LULLABY: C2RustUnnamed_46 = 10;
pub const OCARINA_ACTION_TEACH_EPONA: C2RustUnnamed_46 = 9;
pub const OCARINA_ACTION_TEACH_SARIA: C2RustUnnamed_46 = 8;
pub const OCARINA_ACTION_TEACH_PRELUDE: C2RustUnnamed_46 = 7;
pub const OCARINA_ACTION_TEACH_NOCTURNE: C2RustUnnamed_46 = 6;
pub const OCARINA_ACTION_TEACH_REQUIEM: C2RustUnnamed_46 = 5;
pub const OCARINA_ACTION_TEACH_SERENADE: C2RustUnnamed_46 = 4;
pub const OCARINA_ACTION_TEACH_BOLERO: C2RustUnnamed_46 = 3;
pub const OCARINA_ACTION_TEACH_MINUET: C2RustUnnamed_46 = 2;
pub const OCARINA_ACTION_FREE_PLAY: C2RustUnnamed_46 = 1;
pub const OCARINA_ACTION_UNK_0: C2RustUnnamed_46 = 0;
pub type C2RustUnnamed_47 = libc::c_uint;
pub const OCARINA_MODE_0F: C2RustUnnamed_47 = 15;
pub const OCARINA_MODE_0E: C2RustUnnamed_47 = 14;
pub const OCARINA_MODE_0D: C2RustUnnamed_47 = 13;
pub const OCARINA_MODE_0C: C2RustUnnamed_47 = 12;
pub const OCARINA_MODE_0B: C2RustUnnamed_47 = 11;
pub const OCARINA_MODE_0A: C2RustUnnamed_47 = 10;
pub const OCARINA_MODE_09: C2RustUnnamed_47 = 9;
pub const OCARINA_MODE_08: C2RustUnnamed_47 = 8;
pub const OCARINA_MODE_07: C2RustUnnamed_47 = 7;
pub const OCARINA_MODE_06: C2RustUnnamed_47 = 6;
pub const OCARINA_MODE_05: C2RustUnnamed_47 = 5;
pub const OCARINA_MODE_04: C2RustUnnamed_47 = 4;
pub const OCARINA_MODE_03: C2RustUnnamed_47 = 3;
pub const OCARINA_MODE_02: C2RustUnnamed_47 = 2;
pub const OCARINA_MODE_01: C2RustUnnamed_47 = 1;
pub const OCARINA_MODE_00: C2RustUnnamed_47 = 0;
pub type C2RustUnnamed_48 = libc::c_uint;
pub const TEXT_STATE_AWAITING_NEXT: C2RustUnnamed_48 = 10;
pub const TEXT_STATE_9: C2RustUnnamed_48 = 9;
pub const TEXT_STATE_8: C2RustUnnamed_48 = 8;
pub const TEXT_STATE_SONG_DEMO_DONE: C2RustUnnamed_48 = 7;
pub const TEXT_STATE_DONE: C2RustUnnamed_48 = 6;
pub const TEXT_STATE_EVENT: C2RustUnnamed_48 = 5;
pub const TEXT_STATE_CHOICE: C2RustUnnamed_48 = 4;
pub const TEXT_STATE_DONE_FADING: C2RustUnnamed_48 = 3;
pub const TEXT_STATE_CLOSING: C2RustUnnamed_48 = 2;
pub const TEXT_STATE_DONE_HAS_NEXT: C2RustUnnamed_48 = 1;
pub const TEXT_STATE_NONE: C2RustUnnamed_48 = 0;
pub type C2RustUnnamed_49 = libc::c_uint;
pub const DO_ACTION_MAX: C2RustUnnamed_49 = 29;
pub const DO_ACTION_8: C2RustUnnamed_49 = 28;
pub const DO_ACTION_7: C2RustUnnamed_49 = 27;
pub const DO_ACTION_6: C2RustUnnamed_49 = 26;
pub const DO_ACTION_5: C2RustUnnamed_49 = 25;
pub const DO_ACTION_4: C2RustUnnamed_49 = 24;
pub const DO_ACTION_3: C2RustUnnamed_49 = 23;
pub const DO_ACTION_2: C2RustUnnamed_49 = 22;
pub const DO_ACTION_1: C2RustUnnamed_49 = 21;
pub const DO_ACTION_REEL: C2RustUnnamed_49 = 20;
pub const DO_ACTION_PUTAWAY: C2RustUnnamed_49 = 19;
pub const DO_ACTION_STOP: C2RustUnnamed_49 = 18;
pub const DO_ACTION_GRAB: C2RustUnnamed_49 = 17;
pub const DO_ACTION_NEXT: C2RustUnnamed_49 = 16;
pub const DO_ACTION_SPEAK: C2RustUnnamed_49 = 15;
pub const DO_ACTION_SAVE: C2RustUnnamed_49 = 14;
pub const DO_ACTION_DOWN: C2RustUnnamed_49 = 13;
pub const DO_ACTION_DROP: C2RustUnnamed_49 = 12;
pub const DO_ACTION_CLIMB: C2RustUnnamed_49 = 11;
pub const DO_ACTION_NONE: C2RustUnnamed_49 = 10;
pub const DO_ACTION_THROW: C2RustUnnamed_49 = 9;
pub const DO_ACTION_FASTER: C2RustUnnamed_49 = 8;
pub const DO_ACTION_DIVE: C2RustUnnamed_49 = 7;
pub const DO_ACTION_DECIDE: C2RustUnnamed_49 = 6;
pub const DO_ACTION_JUMP: C2RustUnnamed_49 = 5;
pub const DO_ACTION_OPEN: C2RustUnnamed_49 = 4;
pub const DO_ACTION_RETURN: C2RustUnnamed_49 = 3;
pub const DO_ACTION_ENTER: C2RustUnnamed_49 = 2;
pub const DO_ACTION_CHECK: C2RustUnnamed_49 = 1;
pub const DO_ACTION_ATTACK: C2RustUnnamed_49 = 0;
pub type C2RustUnnamed_50 = libc::c_uint;
pub const GAMEOVER_REVIVE_FADE_OUT: C2RustUnnamed_50 = 24;
pub const GAMEOVER_REVIVE_WAIT_FAIRY: C2RustUnnamed_50 = 23;
pub const GAMEOVER_REVIVE_WAIT_GROUND: C2RustUnnamed_50 = 22;
pub const GAMEOVER_REVIVE_RUMBLE: C2RustUnnamed_50 = 21;
pub const GAMEOVER_REVIVE_START: C2RustUnnamed_50 = 20;
pub const GAMEOVER_DEATH_MENU: C2RustUnnamed_50 = 4;
pub const GAMEOVER_DEATH_DELAY_MENU: C2RustUnnamed_50 = 3;
pub const GAMEOVER_DEATH_WAIT_GROUND: C2RustUnnamed_50 = 2;
pub const GAMEOVER_DEATH_START: C2RustUnnamed_50 = 1;
pub const GAMEOVER_INACTIVE: C2RustUnnamed_50 = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct EntranceInfo {
    pub scene: s8,
    pub spawn: s8,
    pub field: u16_0,
}
pub type C2RustUnnamed_51 = libc::c_uint;
pub const MTXMODE_APPLY: C2RustUnnamed_51 = 1;
pub const MTXMODE_NEW: C2RustUnnamed_51 = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct BgHeavyBlock {
    pub dyna: DynaPolyActor,
    pub unk_164: Vec3f,
    pub timer: s16,
    pub pieceFlags: u16_0,
    pub actionFunc: BgHeavyBlockActionFunc,
}
pub type BgHeavyBlockActionFunc
    =
    Option<unsafe extern "C" fn(_: *mut BgHeavyBlock, _: *mut GlobalContext)
               -> ()>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct DoorShutter {
    pub dyna: DynaPolyActor,
    pub unk_164: s16,
    pub unk_166: s16,
    pub unk_168: s16,
    pub doorType: u8_0,
    pub unk_16B: u8_0,
    pub unk_16C: u8_0,
    pub requiredObjBankIndex: s8,
    pub unk_16E: s8,
    pub unk_16F: s8,
    pub unk_170: f32_0,
    pub actionFunc: DoorShutterActionFunc,
}
pub type DoorShutterActionFunc
    =
    Option<unsafe extern "C" fn(_: *mut DoorShutter, _: *mut GlobalContext)
               -> ()>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct EnBoom {
    pub actor: Actor,
    pub collider: ColliderQuad,
    pub moveTo: *mut Actor,
    pub grabbed: *mut Actor,
    pub returnTimer: u8_0,
    pub activeTimer: u8_0,
    pub effectIndex: s32,
    pub boomerangInfo: WeaponInfo,
    pub actionFunc: EnBoomActionFunc,
}
pub type EnBoomActionFunc
    =
    Option<unsafe extern "C" fn(_: *mut EnBoom, _: *mut GlobalContext) -> ()>;
pub type C2RustUnnamed_52 = libc::c_int;
pub const ARROW_NUT: C2RustUnnamed_52 = 10;
pub const ARROW_SEED: C2RustUnnamed_52 = 9;
pub const ARROW_0E: C2RustUnnamed_52 = 8;
pub const ARROW_0D: C2RustUnnamed_52 = 7;
pub const ARROW_0C: C2RustUnnamed_52 = 6;
pub const ARROW_LIGHT: C2RustUnnamed_52 = 5;
pub const ARROW_ICE: C2RustUnnamed_52 = 4;
pub const ARROW_FIRE: C2RustUnnamed_52 = 3;
pub const ARROW_NORMAL: C2RustUnnamed_52 = 2;
pub const ARROW_NORMAL_HORSE: C2RustUnnamed_52 = 1;
pub const ARROW_NORMAL_LIT: C2RustUnnamed_52 = 0;
pub const ARROW_NORMAL_SILENT: C2RustUnnamed_52 = -1;
pub const ARROW_CS_NUT: C2RustUnnamed_52 = -10;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct EnBox {
    pub dyna: DynaPolyActor,
    pub skelanime: SkelAnime,
    pub unk_1A8: s32,
    pub unk_1AC: s32,
    pub unk_1B0: f32_0,
    pub actionFunc: EnBoxActionFunc,
    pub jointTable: [Vec3s; 5],
    pub morphTable: [Vec3s; 5],
    pub unk_1F4: s16,
    pub movementFlags: u8_0,
    pub alpha: u8_0,
    pub switchFlag: u8_0,
    pub type_0: u8_0,
    pub iceSmokeTimer: u8_0,
    pub unk_1FB: u8_0,
}
pub type EnBoxActionFunc
    =
    Option<unsafe extern "C" fn(_: *mut EnBox, _: *mut GlobalContext) -> ()>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct EnDoor {
    pub actor: Actor,
    pub skelAnime: SkelAnime,
    pub animStyle: u8_0,
    pub playerIsOpening: u8_0,
    pub unk_192: u8_0,
    pub requiredObjBankIndex: s8,
    pub dListIndex: s8,
    pub lockTimer: s16,
    pub jointTable: [Vec3s; 5],
    pub morphTable: [Vec3s; 5],
    pub actionFunc: EnDoorActionFunc,
}
pub type EnDoorActionFunc
    =
    Option<unsafe extern "C" fn(_: *mut EnDoor, _: *mut GlobalContext) -> ()>;
pub type C2RustUnnamed_53 = libc::c_uint;
pub const FAIRY_HEAL_BIG: C2RustUnnamed_53 = 7;
pub const FAIRY_HEAL: C2RustUnnamed_53 = 6;
pub const FAIRY_REVIVE_DEATH: C2RustUnnamed_53 = 5;
pub const FAIRY_SPAWNER: C2RustUnnamed_53 = 4;
pub const FAIRY_KOKIRI: C2RustUnnamed_53 = 3;
pub const FAIRY_HEAL_TIMED: C2RustUnnamed_53 = 2;
pub const FAIRY_REVIVE_BOTTLE: C2RustUnnamed_53 = 1;
pub const FAIRY_NAVI: C2RustUnnamed_53 = 0;
pub type C2RustUnnamed_54 = libc::c_int;
pub const FISH_SWIMMING_UNIQUE: C2RustUnnamed_54 = 1;
pub const FISH_DROPPED: C2RustUnnamed_54 = 0;
pub const FISH_SWIMMING_RESPAWNING: C2RustUnnamed_54 = -1;
pub type EnHorseAction = libc::c_uint;
pub const ENHORSE_ACT_FLEE_PLAYER: EnHorseAction = 19;
pub const ENHORSE_ACT_HBA: EnHorseAction = 18;
pub const ENHORSE_ACT_CS_UPDATE: EnHorseAction = 17;
pub const ENHORSE_ACT_BRIDGE_JUMP: EnHorseAction = 16;
pub const ENHORSE_ACT_HIGH_JUMP: EnHorseAction = 15;
pub const ENHORSE_ACT_LOW_JUMP: EnHorseAction = 14;
pub const ENHORSE_ACT_REVERSE: EnHorseAction = 13;
pub const ENHORSE_ACT_STOPPING: EnHorseAction = 12;
pub const ENHORSE_ACT_MOUNTED_REARING: EnHorseAction = 11;
pub const ENHORSE_ACT_MOUNTED_GALLOP: EnHorseAction = 10;
pub const ENHORSE_ACT_MOUNTED_TROT: EnHorseAction = 9;
pub const ENHORSE_ACT_MOUNTED_WALK: EnHorseAction = 8;
pub const ENHORSE_ACT_MOUNTED_TURN: EnHorseAction = 7;
pub const ENHORSE_ACT_MOUNTED_IDLE_WHINNEYING: EnHorseAction = 6;
pub const ENHORSE_ACT_MOUNTED_IDLE: EnHorseAction = 5;
pub const ENHORSE_ACT_INGO_RACE: EnHorseAction = 4;
pub const ENHORSE_ACT_FOLLOW_PLAYER: EnHorseAction = 3;
pub const ENHORSE_ACT_IDLE: EnHorseAction = 2;
pub const ENHORSE_ACT_INACTIVE: EnHorseAction = 1;
pub const ENHORSE_ACT_FROZEN: EnHorseAction = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct EnHorse {
    pub actor: Actor,
    pub action: EnHorseAction,
    pub noInputTimer: s32,
    pub noInputTimerMax: s32,
    pub type_0: s32,
    pub bankIndex: s8,
    pub skin: PSkinAwb,
    pub stateFlags: u32_0,
    pub lastPos: Vec3f,
    pub lastYaw: s16,
    pub curRaceWaypoint: s32,
    pub boostSpeed: s32,
    pub playerControlled: s32,
    pub animationIdx: s32,
    pub curFrame: f32_0,
    pub soundTimer: s32,
    pub unk_21C: Vec3f,
    pub unk_228: Vec3f,
    pub unk_234: s32,
    pub numBoosts: u8_0,
    pub boostRegenTime: s32,
    pub boostTimer: s32,
    pub postDrawFunc: EnHorsePostdrawFunc,
    pub yFront: f32_0,
    pub yBack: f32_0,
    pub followTimer: s16,
    pub unk_252: s16,
    pub prevAction: EnHorseAction,
    pub riderPos: Vec3f,
    pub curStick: Vec2f,
    pub lastStick: Vec2f,
    pub jumpStartY: f32_0,
    pub cyl1: ColliderCylinder,
    pub cyl2: ColliderCylinder,
    pub jntSph: ColliderJntSph,
    pub jntSphList: ColliderJntSphElement,
    pub playerDir: u32_0,
    pub unk_374: s16,
    pub angleToPlayer: s16,
    pub followPlayerTurnSpeed: s16,
    pub blinkTimer: u8_0,
    pub waitTimer: s16,
    pub unk_37E: s16,
    pub cutsceneAction: s32,
    pub cutsceneFlags: u16_0,
    pub inRace: s32,
    pub rider: *mut Actor,
    pub unk_390: u32_0,
    pub ingoRaceFlags: u16_0,
    pub ingoHorseMaxSpeed: f32_0,
    pub unk_39C: s32,
    pub hbaStarted: s32,
    pub hbaFlags: s32,
    pub hbaTimer: s32,
    pub bridgeJumpIdx: u8_0,
    pub bridgeJumpStart: Vec3f,
    pub bridgeJumpTimer: s32,
    pub bridgeJumpYVel: f32_0,
    pub bridgeJumpRelAngle: s16,
    pub unk_3C6: s16,
    pub dustFlags: u16_0,
    pub frontRightHoof: Vec3f,
    pub frontLeftHoof: Vec3f,
    pub backRightHoof: Vec3f,
    pub backLeftHoof: Vec3f,
}
pub type EnHorsePostdrawFunc
    =
    Option<unsafe extern "C" fn(_: *mut EnHorse, _: *mut GlobalContext)
               -> ()>;
pub type C2RustUnnamed_55 = libc::c_uint;
pub const FHGFLASH_SHOCK_PG: C2RustUnnamed_55 = 2;
pub const FHGFLASH_SHOCK_PLAYER: C2RustUnnamed_55 = 1;
pub const FHGFLASH_SHOCK_NO_ACTOR: C2RustUnnamed_55 = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GetItemEntry {
    pub itemId: u8_0,
    pub field: u8_0,
    pub gi: s8,
    pub textId: u8_0,
    pub objectId: u16_0,
}
pub type C2RustUnnamed_56 = libc::c_uint;
pub const KNOB_ANIM_CHILD_R: C2RustUnnamed_56 = 3;
pub const KNOB_ANIM_ADULT_R: C2RustUnnamed_56 = 2;
pub const KNOB_ANIM_CHILD_L: C2RustUnnamed_56 = 1;
pub const KNOB_ANIM_ADULT_L: C2RustUnnamed_56 = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ExplosiveInfo {
    pub itemId: u8_0,
    pub actorId: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct BottleCatchInfo {
    pub actorId: s16,
    pub itemId: u8_0,
    pub actionParam: u8_0,
    pub textId: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct BottleDropInfo {
    pub actorId: s16,
    pub actorParams: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct FallImpactInfo {
    pub damage: s8,
    pub unk_01: u8_0,
    pub unk_02: u8_0,
    pub unk_03: u8_0,
    pub sfxId: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SpecialRespawnInfo {
    pub pos: Vec3f,
    pub yaw: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct struct_80832924 {
    pub sfxId: u16_0,
    pub field: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct struct_808551A4 {
    pub unk_00: u16_0,
    pub unk_02: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct struct_808540F4 {
    pub anim: *mut LinkAnimationHeader,
    pub unk_04: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct struct_80854554 {
    pub unk_00: *mut LinkAnimationHeader,
    pub unk_04: *mut LinkAnimationHeader,
    pub unk_08: u8_0,
    pub unk_09: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct struct_80854190 {
    pub unk_00: *mut LinkAnimationHeader,
    pub unk_04: *mut LinkAnimationHeader,
    pub unk_08: *mut LinkAnimationHeader,
    pub unk_0C: u8_0,
    pub unk_0D: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct struct_80854578 {
    pub anim: *mut LinkAnimationHeader,
    pub unk_04: f32_0,
    pub unk_08: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct struct_80854B18 {
    pub type_0: s8,
    pub c2rust_unnamed: C2RustUnnamed_57,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_57 {
    pub ptr: *mut libc::c_void,
    pub func: Option<unsafe extern "C" fn(_: *mut GlobalContext,
                                          _: *mut Player,
                                          _: *mut CsCmdActorAction) -> ()>,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct struct_80858AC8 {
    pub unk_00: s16,
    pub unk_02: s16,
    pub unk_04: s16,
    pub unk_06: s16,
    pub unk_08: s16,
}
// .bss part 1
static mut D_80858AA0: s32 = 0;
static mut D_80858AA4: s32 = 0;
static mut D_80858AA8: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
static mut sControlInput: *mut Input = 0 as *const Input as *mut Input;
// .data
static mut D_80853410: [u8_0; 22] =
    [0 as libc::c_int as u8_0, 0 as libc::c_int as u8_0,
     0 as libc::c_int as u8_0, 0 as libc::c_int as u8_0,
     0 as libc::c_int as u8_0, 0 as libc::c_int as u8_0,
     0 as libc::c_int as u8_0, 0 as libc::c_int as u8_0,
     0 as libc::c_int as u8_0, 0 as libc::c_int as u8_0,
     1 as libc::c_int as u8_0, 1 as libc::c_int as u8_0,
     1 as libc::c_int as u8_0, 1 as libc::c_int as u8_0,
     1 as libc::c_int as u8_0, 1 as libc::c_int as u8_0,
     1 as libc::c_int as u8_0, 1 as libc::c_int as u8_0,
     1 as libc::c_int as u8_0, 1 as libc::c_int as u8_0,
     1 as libc::c_int as u8_0, 1 as libc::c_int as u8_0];
static mut sAgeProperties: [PlayerAgeProperties; 2] =
    unsafe {
        [{
             let mut init =
                 PlayerAgeProperties{unk_00: 56.0f32,
                                     unk_04: 90.0f32,
                                     unk_08: 1.0f32,
                                     unk_0C: 111.0f32,
                                     unk_10: 70.0f32,
                                     unk_14: 79.4f32,
                                     unk_18: 59.0f32,
                                     unk_1C: 41.0f32,
                                     unk_20: 19.0f32,
                                     unk_24: 36.0f32,
                                     unk_28: 44.8f32,
                                     unk_2C: 56.0f32,
                                     unk_30: 68.0f32,
                                     unk_34: 70.0f32,
                                     unk_38: 18.0f32,
                                     unk_3C: 15.0f32,
                                     unk_40: 70.0f32,
                                     unk_44:
                                         {
                                             let mut init =
                                                 Vec3s{x:
                                                           9 as libc::c_int as
                                                               s16,
                                                       y:
                                                           4671 as libc::c_int
                                                               as s16,
                                                       z:
                                                           359 as libc::c_int
                                                               as s16,};
                                             init
                                         },
                                     unk_4A:
                                         [{
                                              let mut init =
                                                  Vec3s{x:
                                                            8 as libc::c_int
                                                                as s16,
                                                        y:
                                                            4694 as
                                                                libc::c_int as
                                                                s16,
                                                        z:
                                                            380 as libc::c_int
                                                                as s16,};
                                              init
                                          },
                                          {
                                              let mut init =
                                                  Vec3s{x:
                                                            9 as libc::c_int
                                                                as s16,
                                                        y:
                                                            6122 as
                                                                libc::c_int as
                                                                s16,
                                                        z:
                                                            359 as libc::c_int
                                                                as s16,};
                                              init
                                          },
                                          {
                                              let mut init =
                                                  Vec3s{x:
                                                            8 as libc::c_int
                                                                as s16,
                                                        y:
                                                            4694 as
                                                                libc::c_int as
                                                                s16,
                                                        z:
                                                            380 as libc::c_int
                                                                as s16,};
                                              init
                                          },
                                          {
                                              let mut init =
                                                  Vec3s{x:
                                                            9 as libc::c_int
                                                                as s16,
                                                        y:
                                                            6122 as
                                                                libc::c_int as
                                                                s16,
                                                        z:
                                                            359 as libc::c_int
                                                                as s16,};
                                              init
                                          }],
                                     unk_62:
                                         [{
                                              let mut init =
                                                  Vec3s{x:
                                                            9 as libc::c_int
                                                                as s16,
                                                        y:
                                                            6122 as
                                                                libc::c_int as
                                                                s16,
                                                        z:
                                                            359 as libc::c_int
                                                                as s16,};
                                              init
                                          },
                                          {
                                              let mut init =
                                                  Vec3s{x:
                                                            9 as libc::c_int
                                                                as s16,
                                                        y:
                                                            7693 as
                                                                libc::c_int as
                                                                s16,
                                                        z:
                                                            380 as libc::c_int
                                                                as s16,};
                                              init
                                          },
                                          {
                                              let mut init =
                                                  Vec3s{x:
                                                            9 as libc::c_int
                                                                as s16,
                                                        y:
                                                            6122 as
                                                                libc::c_int as
                                                                s16,
                                                        z:
                                                            359 as libc::c_int
                                                                as s16,};
                                              init
                                          },
                                          {
                                              let mut init =
                                                  Vec3s{x:
                                                            9 as libc::c_int
                                                                as s16,
                                                        y:
                                                            7693 as
                                                                libc::c_int as
                                                                s16,
                                                        z:
                                                            380 as libc::c_int
                                                                as s16,};
                                              init
                                          }],
                                     unk_7A:
                                         [{
                                              let mut init =
                                                  Vec3s{x:
                                                            8 as libc::c_int
                                                                as s16,
                                                        y:
                                                            4694 as
                                                                libc::c_int as
                                                                s16,
                                                        z:
                                                            380 as libc::c_int
                                                                as s16,};
                                              init
                                          },
                                          {
                                              let mut init =
                                                  Vec3s{x:
                                                            9 as libc::c_int
                                                                as s16,
                                                        y:
                                                            6122 as
                                                                libc::c_int as
                                                                s16,
                                                        z:
                                                            359 as libc::c_int
                                                                as s16,};
                                              init
                                          }],
                                     unk_86:
                                         [{
                                              let mut init =
                                                  Vec3s{x:
                                                            -(1592 as
                                                                  libc::c_int)
                                                                as s16,
                                                        y:
                                                            4694 as
                                                                libc::c_int as
                                                                s16,
                                                        z:
                                                            380 as libc::c_int
                                                                as s16,};
                                              init
                                          },
                                          {
                                              let mut init =
                                                  Vec3s{x:
                                                            -(1591 as
                                                                  libc::c_int)
                                                                as s16,
                                                        y:
                                                            6122 as
                                                                libc::c_int as
                                                                s16,
                                                        z:
                                                            359 as libc::c_int
                                                                as s16,};
                                              init
                                          }],
                                     unk_92: 0 as libc::c_int as u16_0,
                                     unk_94: 0x80 as libc::c_int as u16_0,
                                     unk_98:
                                         &gPlayerAnim_002718 as
                                             *const LinkAnimationHeader as
                                             *mut LinkAnimationHeader,
                                     unk_9C:
                                         &gPlayerAnim_002720 as
                                             *const LinkAnimationHeader as
                                             *mut LinkAnimationHeader,
                                     unk_A0:
                                         &gPlayerAnim_002838 as
                                             *const LinkAnimationHeader as
                                             *mut LinkAnimationHeader,
                                     unk_A4:
                                         &gPlayerAnim_002E70 as
                                             *const LinkAnimationHeader as
                                             *mut LinkAnimationHeader,
                                     unk_A8:
                                         &gPlayerAnim_002E78 as
                                             *const LinkAnimationHeader as
                                             *mut LinkAnimationHeader,
                                     unk_AC:
                                         [&gPlayerAnim_002E80 as
                                              *const LinkAnimationHeader as
                                              *mut LinkAnimationHeader,
                                          &gPlayerAnim_002E88 as
                                              *const LinkAnimationHeader as
                                              *mut LinkAnimationHeader,
                                          &gPlayerAnim_002D90 as
                                              *const LinkAnimationHeader as
                                              *mut LinkAnimationHeader,
                                          &gPlayerAnim_002D98 as
                                              *const LinkAnimationHeader as
                                              *mut LinkAnimationHeader],
                                     unk_BC:
                                         [&gPlayerAnim_002D70 as
                                              *const LinkAnimationHeader as
                                              *mut LinkAnimationHeader,
                                          &gPlayerAnim_002D78 as
                                              *const LinkAnimationHeader as
                                              *mut LinkAnimationHeader],
                                     unk_C4:
                                         [&gPlayerAnim_002E50 as
                                              *const LinkAnimationHeader as
                                              *mut LinkAnimationHeader,
                                          &gPlayerAnim_002E58 as
                                              *const LinkAnimationHeader as
                                              *mut LinkAnimationHeader],
                                     unk_CC:
                                         [&gPlayerAnim_002E68 as
                                              *const LinkAnimationHeader as
                                              *mut LinkAnimationHeader,
                                          &gPlayerAnim_002E60 as
                                              *const LinkAnimationHeader as
                                              *mut LinkAnimationHeader],};
             init
         },
         {
             let mut init =
                 PlayerAgeProperties{unk_00: 40.0f32,
                                     unk_04: 60.0f32,
                                     unk_08: 11.0f32 / 17.0f32,
                                     unk_0C: 71.0f32,
                                     unk_10: 50.0f32,
                                     unk_14: 47.0f32,
                                     unk_18: 39.0f32,
                                     unk_1C: 27.0f32,
                                     unk_20: 19.0f32,
                                     unk_24: 22.0f32,
                                     unk_28: 29.6f32,
                                     unk_2C: 32.0f32,
                                     unk_30: 48.0f32,
                                     unk_34: 70.0f32 * (11.0f32 / 17.0f32),
                                     unk_38: 14.0f32,
                                     unk_3C: 12.0f32,
                                     unk_40: 55.0f32,
                                     unk_44:
                                         {
                                             let mut init =
                                                 Vec3s{x:
                                                           -(24 as
                                                                 libc::c_int)
                                                               as s16,
                                                       y:
                                                           3565 as libc::c_int
                                                               as s16,
                                                       z:
                                                           876 as libc::c_int
                                                               as s16,};
                                             init
                                         },
                                     unk_4A:
                                         [{
                                              let mut init =
                                                  Vec3s{x:
                                                            -(24 as
                                                                  libc::c_int)
                                                                as s16,
                                                        y:
                                                            3474 as
                                                                libc::c_int as
                                                                s16,
                                                        z:
                                                            862 as libc::c_int
                                                                as s16,};
                                              init
                                          },
                                          {
                                              let mut init =
                                                  Vec3s{x:
                                                            -(24 as
                                                                  libc::c_int)
                                                                as s16,
                                                        y:
                                                            4977 as
                                                                libc::c_int as
                                                                s16,
                                                        z:
                                                            937 as libc::c_int
                                                                as s16,};
                                              init
                                          },
                                          {
                                              let mut init =
                                                  Vec3s{x:
                                                            8 as libc::c_int
                                                                as s16,
                                                        y:
                                                            4694 as
                                                                libc::c_int as
                                                                s16,
                                                        z:
                                                            380 as libc::c_int
                                                                as s16,};
                                              init
                                          },
                                          {
                                              let mut init =
                                                  Vec3s{x:
                                                            9 as libc::c_int
                                                                as s16,
                                                        y:
                                                            6122 as
                                                                libc::c_int as
                                                                s16,
                                                        z:
                                                            359 as libc::c_int
                                                                as s16,};
                                              init
                                          }],
                                     unk_62:
                                         [{
                                              let mut init =
                                                  Vec3s{x:
                                                            -(24 as
                                                                  libc::c_int)
                                                                as s16,
                                                        y:
                                                            4977 as
                                                                libc::c_int as
                                                                s16,
                                                        z:
                                                            937 as libc::c_int
                                                                as s16,};
                                              init
                                          },
                                          {
                                              let mut init =
                                                  Vec3s{x:
                                                            -(24 as
                                                                  libc::c_int)
                                                                as s16,
                                                        y:
                                                            6495 as
                                                                libc::c_int as
                                                                s16,
                                                        z:
                                                            937 as libc::c_int
                                                                as s16,};
                                              init
                                          },
                                          {
                                              let mut init =
                                                  Vec3s{x:
                                                            9 as libc::c_int
                                                                as s16,
                                                        y:
                                                            6122 as
                                                                libc::c_int as
                                                                s16,
                                                        z:
                                                            359 as libc::c_int
                                                                as s16,};
                                              init
                                          },
                                          {
                                              let mut init =
                                                  Vec3s{x:
                                                            9 as libc::c_int
                                                                as s16,
                                                        y:
                                                            7693 as
                                                                libc::c_int as
                                                                s16,
                                                        z:
                                                            380 as libc::c_int
                                                                as s16,};
                                              init
                                          }],
                                     unk_7A:
                                         [{
                                              let mut init =
                                                  Vec3s{x:
                                                            8 as libc::c_int
                                                                as s16,
                                                        y:
                                                            4694 as
                                                                libc::c_int as
                                                                s16,
                                                        z:
                                                            380 as libc::c_int
                                                                as s16,};
                                              init
                                          },
                                          {
                                              let mut init =
                                                  Vec3s{x:
                                                            9 as libc::c_int
                                                                as s16,
                                                        y:
                                                            6122 as
                                                                libc::c_int as
                                                                s16,
                                                        z:
                                                            359 as libc::c_int
                                                                as s16,};
                                              init
                                          }],
                                     unk_86:
                                         [{
                                              let mut init =
                                                  Vec3s{x:
                                                            -(1592 as
                                                                  libc::c_int)
                                                                as s16,
                                                        y:
                                                            4694 as
                                                                libc::c_int as
                                                                s16,
                                                        z:
                                                            380 as libc::c_int
                                                                as s16,};
                                              init
                                          },
                                          {
                                              let mut init =
                                                  Vec3s{x:
                                                            -(1591 as
                                                                  libc::c_int)
                                                                as s16,
                                                        y:
                                                            6122 as
                                                                libc::c_int as
                                                                s16,
                                                        z:
                                                            359 as libc::c_int
                                                                as s16,};
                                              init
                                          }],
                                     unk_92: 0x20 as libc::c_int as u16_0,
                                     unk_94: 0 as libc::c_int as u16_0,
                                     unk_98:
                                         &gPlayerAnim_002318 as
                                             *const LinkAnimationHeader as
                                             *mut LinkAnimationHeader,
                                     unk_9C:
                                         &gPlayerAnim_002360 as
                                             *const LinkAnimationHeader as
                                             *mut LinkAnimationHeader,
                                     unk_A0:
                                         &gPlayerAnim_0023A8 as
                                             *const LinkAnimationHeader as
                                             *mut LinkAnimationHeader,
                                     unk_A4:
                                         &gPlayerAnim_0023E0 as
                                             *const LinkAnimationHeader as
                                             *mut LinkAnimationHeader,
                                     unk_A8:
                                         &gPlayerAnim_0023E8 as
                                             *const LinkAnimationHeader as
                                             *mut LinkAnimationHeader,
                                     unk_AC:
                                         [&gPlayerAnim_0023F0 as
                                              *const LinkAnimationHeader as
                                              *mut LinkAnimationHeader,
                                          &gPlayerAnim_0023F8 as
                                              *const LinkAnimationHeader as
                                              *mut LinkAnimationHeader,
                                          &gPlayerAnim_002D90 as
                                              *const LinkAnimationHeader as
                                              *mut LinkAnimationHeader,
                                          &gPlayerAnim_002D98 as
                                              *const LinkAnimationHeader as
                                              *mut LinkAnimationHeader],
                                     unk_BC:
                                         [&gPlayerAnim_002D70 as
                                              *const LinkAnimationHeader as
                                              *mut LinkAnimationHeader,
                                          &gPlayerAnim_002D78 as
                                              *const LinkAnimationHeader as
                                              *mut LinkAnimationHeader],
                                     unk_C4:
                                         [&gPlayerAnim_0023C0 as
                                              *const LinkAnimationHeader as
                                              *mut LinkAnimationHeader,
                                          &gPlayerAnim_0023C8 as
                                              *const LinkAnimationHeader as
                                              *mut LinkAnimationHeader],
                                     unk_CC:
                                         [&gPlayerAnim_0023D8 as
                                              *const LinkAnimationHeader as
                                              *mut LinkAnimationHeader,
                                          &gPlayerAnim_0023D0 as
                                              *const LinkAnimationHeader as
                                              *mut LinkAnimationHeader],};
             init
         }]
    };
static mut D_808535D0: u32_0 = 0 as libc::c_int as u32_0;
static mut D_808535D4: f32_0 = 0.0f32;
static mut D_808535D8: s16 = 0 as libc::c_int as s16;
static mut D_808535DC: s16 = 0 as libc::c_int as s16;
static mut D_808535E0: s32 = 0 as libc::c_int;
static mut D_808535E4: s32 = 0 as libc::c_int;
static mut D_808535E8: f32_0 = 1.0f32;
static mut D_808535EC: f32_0 = 1.0f32;
static mut D_808535F0: u32_0 = 0 as libc::c_int as u32_0;
static mut D_808535F4: u32_0 = 0 as libc::c_int as u32_0;
static mut D_808535F8: s16 = 0 as libc::c_int as s16;
static mut D_808535FC: s16 = 0 as libc::c_int as s16;
static mut D_80853600: f32_0 = 0.0f32;
static mut D_80853604: s32 = 0 as libc::c_int;
static mut D_80853608: s32 = 0 as libc::c_int;
static mut D_8085360C: s32 = 0 as libc::c_int;
static mut D_80853610: s16 = 0 as libc::c_int as s16;
static mut D_80853614: s32 = 0 as libc::c_int;
static mut D_80853618: s32 = 0 as libc::c_int;
static mut D_8085361C: [u16_0; 4] =
    [0x680f as libc::c_int as u16_0, 0x680e as libc::c_int as u16_0,
     0x6811 as libc::c_int as u16_0, 0x6808 as libc::c_int as u16_0];
// Initialized in run_static_initializers
static mut sGetItemTable: [GetItemEntry; 125] =
    [GetItemEntry{itemId: 0, field: 0, gi: 0, textId: 0, objectId: 0,}; 125];
static mut D_80853914: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_003240 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003238 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003238 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002BE0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003240 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003240 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_8085392C: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_003290 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003268 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003268 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002BF8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003290 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003290 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853944: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_003140 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002B38 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003138 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002B40 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003140 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003140 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_8085395C: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_002E98 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0029E8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002E98 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0029F0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002E98 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002E98 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853974: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_002FB0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002FA8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002FB0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002A40 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002FB0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002FB0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_8085398C: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_003220 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002590 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002590 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002BC0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003220 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003220 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_808539A4: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_003230 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0025D0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0025D0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002BD0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003230 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003230 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_808539BC: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_002BB0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0031F8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0031F8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002BB0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002BB0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002BB0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_808539EC: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_002750 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002748 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002748 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002750 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002750 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002750 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853A04: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_002330 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002330 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002330 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002330 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002330 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002330 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853A1C: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_002760 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002758 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002758 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002760 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002760 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002760 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853A34: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_002338 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002338 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002338 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002338 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002338 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002338 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853A4C: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_002E08 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002E00 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002E00 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002E08 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002E08 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002E08 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853A64: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_003028 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003020 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003020 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003028 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003028 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003028 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853A7C: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_003170 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003168 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003168 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003170 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003170 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003170 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853A94: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_003038 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003030 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003030 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002A68 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003038 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003038 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853AAC: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_002FC0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002FB8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002FB8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002FC8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002FC0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002FC0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853AC4: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_003278 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003270 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003270 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002BE8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003278 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003278 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853ADC: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_003288 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003280 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003280 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002BF0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003288 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003288 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853AF4: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_002EB8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002EA0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002EA0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002EB8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0026C8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002EB8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853B0C: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_002ED8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002ED0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002ED0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002ED8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0026D0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002ED8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853B24: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_002EB0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002EA8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002EA8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002EB0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002EB0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002EB0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853B3C: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_003190 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003188 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003188 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002B68 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003190 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003190 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853B54: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_003178 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002568 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002568 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002B58 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003178 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003178 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853B6C: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_003180 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002570 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002570 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002B60 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003180 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003180 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853B84: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_002D60 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002D58 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002D58 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002D60 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002D60 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002D60 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853B9C: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_002BB8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003218 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003218 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002BB8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002BB8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002BB8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853BB4: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_002BC8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003228 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003228 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002BC8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002BC8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002BC8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853BCC: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_0031C8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0031C0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0031C0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0031C8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0031C8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0031C8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853BE4: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_003118 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003110 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003110 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003118 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003118 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003118 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853BFC: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_002DE8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002DE8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002DE8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002DE8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002DE8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002DE8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853C14: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_002E30 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002E18 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002E18 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002E30 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002E30 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002E30 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853C2C: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_002E40 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002E38 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002E38 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002E40 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002E40 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002E40 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853C44: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_002E28 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002E20 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002E20 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002E28 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002E28 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002E28 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853C5C: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_0030C8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0030C0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0030C0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0030C8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0030C8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0030C8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853C74: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_0030D8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0030D0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0030D0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0030D8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0030D8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0030D8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853C8C: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_0030B8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0030B0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0030B0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0030B8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0030B8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0030B8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853CA4: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_002F20 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002F18 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002F18 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002F20 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002F20 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002F20 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853CBC: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_002FF0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002FE8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002FE8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002FF0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002FF0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002FF0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853CD4: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_003010 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003008 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003008 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003010 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003010 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003010 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853CEC: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_003000 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002FF8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002FF8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003000 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003000 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003000 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853D04: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_002EF0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002EE8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002EE8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002EF8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002EF0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002EF0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853D1C: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_0031E0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0031D8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0031D8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0031E8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0031E0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0031E0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853D34: [*mut LinkAnimationHeader; 6] =
    unsafe {
        [&gPlayerAnim_003468 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003438 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003438 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003468 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003468 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003468 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80853D4C: [[*mut LinkAnimationHeader; 3]; 4] =
    unsafe {
        [[&gPlayerAnim_002A28 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader,
          &gPlayerAnim_002A38 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader,
          &gPlayerAnim_002A30 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader],
         [&gPlayerAnim_002950 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader,
          &gPlayerAnim_002960 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader,
          &gPlayerAnim_002958 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader],
         [&gPlayerAnim_0029D0 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader,
          &gPlayerAnim_0029E0 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader,
          &gPlayerAnim_0029D8 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader],
         [&gPlayerAnim_002988 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader,
          &gPlayerAnim_002998 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader,
          &gPlayerAnim_002990 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader]]
    };
static mut D_80853D7C: [[*mut LinkAnimationHeader; 2]; 14] =
    unsafe {
        [[&gPlayerAnim_003248 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader,
          &gPlayerAnim_003200 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader],
         [&gPlayerAnim_003258 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader,
          &gPlayerAnim_003210 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader],
         [&gPlayerAnim_003250 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader,
          &gPlayerAnim_003208 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader],
         [&gPlayerAnim_003250 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader,
          &gPlayerAnim_003208 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader],
         [&gPlayerAnim_003430 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader,
          &gPlayerAnim_0033F0 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader],
         [&gPlayerAnim_003430 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader,
          &gPlayerAnim_0033F0 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader],
         [&gPlayerAnim_003430 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader,
          &gPlayerAnim_0033F0 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader],
         [&gPlayerAnim_0033F8 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader,
          &gPlayerAnim_0033D0 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader],
         [&gPlayerAnim_003400 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader,
          &gPlayerAnim_0033D8 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader],
         [&gPlayerAnim_003420 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader,
          &gPlayerAnim_003420 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader],
         [&gPlayerAnim_003408 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader,
          &gPlayerAnim_0033E0 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader],
         [&gPlayerAnim_003410 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader,
          &gPlayerAnim_0033E8 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader],
         [&gPlayerAnim_003418 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader,
          &gPlayerAnim_003418 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader],
         [&gPlayerAnim_003428 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader,
          &gPlayerAnim_003428 as *const LinkAnimationHeader as
              *mut LinkAnimationHeader]]
    };
static mut D_80853DEC: [struct_80832924; 1] =
    [{
         let mut init =
             struct_80832924{sfxId: 0x680e as libc::c_int as u16_0,
                             field: -(0x2008 as libc::c_int) as s16,};
         init
     }];
static mut D_80853DF0: [struct_80832924; 1] =
    [{
         let mut init =
             struct_80832924{sfxId: 0x680f as libc::c_int as u16_0,
                             field: -(0x2012 as libc::c_int) as s16,};
         init
     }];
static mut D_80853DF4: [struct_80832924; 1] =
    [{
         let mut init =
             struct_80832924{sfxId: 0x6809 as libc::c_int as u16_0,
                             field: -(0x200d as libc::c_int) as s16,};
         init
     }];
static mut D_80853DF8: [struct_80832924; 1] =
    [{
         let mut init =
             struct_80832924{sfxId: 0x6809 as libc::c_int as u16_0,
                             field: -(0x200a as libc::c_int) as s16,};
         init
     }];
static mut D_80853DFC: [struct_80832924; 5] =
    [{
         let mut init =
             struct_80832924{sfxId: 0x871 as libc::c_int as u16_0,
                             field: 0x82c as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0x871 as libc::c_int as u16_0,
                             field: 0x830 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0x871 as libc::c_int as u16_0,
                             field: 0x834 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0x871 as libc::c_int as u16_0,
                             field: 0x838 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0x871 as libc::c_int as u16_0,
                             field: -(0x83c as libc::c_int) as s16,};
         init
     }];
static mut D_80853E10: [struct_80832924; 6] =
    [{
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: 0x4019 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: 0x401e as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: 0x402c as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: 0x4030 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: 0x4034 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: -(0x4038 as libc::c_int) as s16,};
         init
     }];
static mut D_80853E28: [struct_80832924; 3] =
    [{
         let mut init =
             struct_80832924{sfxId: 0x181f as libc::c_int as u16_0,
                             field: 0x810 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0x181f as libc::c_int as u16_0,
                             field: 0x814 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0x181f as libc::c_int as u16_0,
                             field: -(0x846 as libc::c_int) as s16,};
         init
     }];
static mut D_80853E34: [struct_80832924; 4] =
    [{
         let mut init =
             struct_80832924{sfxId: 0x1812 as libc::c_int as u16_0,
                             field: 0x80a as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0x6814 as libc::c_int as u16_0,
                             field: 0x200a as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0x1801 as libc::c_int as u16_0,
                             field: 0x816 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0x6800 as libc::c_int as u16_0,
                             field: -(0x2016 as libc::c_int) as s16,};
         init
     }];
static mut D_80853E44: [struct_80832924; 2] =
    [{
         let mut init =
             struct_80832924{sfxId: 0x1801 as libc::c_int as u16_0,
                             field: 0x827 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0x6800 as libc::c_int as u16_0,
                             field: -(0x2027 as libc::c_int) as s16,};
         init
     }];
static mut D_80853E4C: [struct_80832924; 1] =
    [{
         let mut init =
             struct_80832924{sfxId: 0x6811 as libc::c_int as u16_0,
                             field: -(0x2014 as libc::c_int) as s16,};
         init
     }];
static mut D_80853E50: [*mut struct_80832924; 11] =
    unsafe {
        [D_80853DEC.as_ptr() as *mut _, D_80853DF0.as_ptr() as *mut _,
         D_80853DF4.as_ptr() as *mut _, D_80853DF8.as_ptr() as *mut _,
         D_80853DFC.as_ptr() as *mut _, D_80853E10.as_ptr() as *mut _,
         D_80853E28.as_ptr() as *mut _, D_80853E34.as_ptr() as *mut _,
         D_80853E44.as_ptr() as *mut _, D_80853E4C.as_ptr() as *mut _,
         0 as *const struct_80832924 as *mut struct_80832924]
    };
static mut D_80853E7C: [u8_0; 29] =
    [0 as libc::c_int as u8_0, 0 as libc::c_int as u8_0,
     1 as libc::c_int as u8_0, 1 as libc::c_int as u8_0,
     2 as libc::c_int as u8_0, 2 as libc::c_int as u8_0,
     2 as libc::c_int as u8_0, 2 as libc::c_int as u8_0,
     10 as libc::c_int as u8_0, 10 as libc::c_int as u8_0,
     10 as libc::c_int as u8_0, 10 as libc::c_int as u8_0,
     10 as libc::c_int as u8_0, 10 as libc::c_int as u8_0,
     3 as libc::c_int as u8_0, 3 as libc::c_int as u8_0,
     4 as libc::c_int as u8_0, 4 as libc::c_int as u8_0,
     8 as libc::c_int as u8_0, 8 as libc::c_int as u8_0,
     5 as libc::c_int as u8_0, 5 as libc::c_int as u8_0,
     6 as libc::c_int as u8_0, 6 as libc::c_int as u8_0,
     7 as libc::c_int as u8_0, 7 as libc::c_int as u8_0,
     9 as libc::c_int as u8_0, 9 as libc::c_int as u8_0,
     0 as libc::c_int as u8_0];
// Used to map item IDs to action params
static mut sItemActionParams: [s8; 62] =
    [PLAYER_AP_STICK as libc::c_int as s8, PLAYER_AP_NUT as libc::c_int as s8,
     PLAYER_AP_BOMB as libc::c_int as s8, PLAYER_AP_BOW as libc::c_int as s8,
     PLAYER_AP_BOW_FIRE as libc::c_int as s8,
     PLAYER_AP_DINS_FIRE as libc::c_int as s8,
     PLAYER_AP_SLINGSHOT as libc::c_int as s8,
     PLAYER_AP_OCARINA_FAIRY as libc::c_int as s8,
     PLAYER_AP_OCARINA_TIME as libc::c_int as s8,
     PLAYER_AP_BOMBCHU as libc::c_int as s8,
     PLAYER_AP_HOOKSHOT as libc::c_int as s8,
     PLAYER_AP_LONGSHOT as libc::c_int as s8,
     PLAYER_AP_BOW_ICE as libc::c_int as s8,
     PLAYER_AP_FARORES_WIND as libc::c_int as s8,
     PLAYER_AP_BOOMERANG as libc::c_int as s8,
     PLAYER_AP_LENS as libc::c_int as s8, PLAYER_AP_BEAN as libc::c_int as s8,
     PLAYER_AP_HAMMER as libc::c_int as s8,
     PLAYER_AP_BOW_LIGHT as libc::c_int as s8,
     PLAYER_AP_NAYRUS_LOVE as libc::c_int as s8,
     PLAYER_AP_BOTTLE as libc::c_int as s8,
     PLAYER_AP_BOTTLE_POTION_RED as libc::c_int as s8,
     PLAYER_AP_BOTTLE_POTION_GREEN as libc::c_int as s8,
     PLAYER_AP_BOTTLE_POTION_BLUE as libc::c_int as s8,
     PLAYER_AP_BOTTLE_FAIRY as libc::c_int as s8,
     PLAYER_AP_BOTTLE_FISH as libc::c_int as s8,
     PLAYER_AP_BOTTLE_MILK as libc::c_int as s8,
     PLAYER_AP_BOTTLE_LETTER as libc::c_int as s8,
     PLAYER_AP_BOTTLE_FIRE as libc::c_int as s8,
     PLAYER_AP_BOTTLE_BUG as libc::c_int as s8,
     PLAYER_AP_BOTTLE_BIG_POE as libc::c_int as s8,
     PLAYER_AP_BOTTLE_MILK_HALF as libc::c_int as s8,
     PLAYER_AP_BOTTLE_POE as libc::c_int as s8,
     PLAYER_AP_WEIRD_EGG as libc::c_int as s8,
     PLAYER_AP_CHICKEN as libc::c_int as s8,
     PLAYER_AP_LETTER_ZELDA as libc::c_int as s8,
     PLAYER_AP_MASK_KEATON as libc::c_int as s8,
     PLAYER_AP_MASK_SKULL as libc::c_int as s8,
     PLAYER_AP_MASK_SPOOKY as libc::c_int as s8,
     PLAYER_AP_MASK_BUNNY as libc::c_int as s8,
     PLAYER_AP_MASK_GORON as libc::c_int as s8,
     PLAYER_AP_MASK_ZORA as libc::c_int as s8,
     PLAYER_AP_MASK_GERUDO as libc::c_int as s8,
     PLAYER_AP_MASK_TRUTH as libc::c_int as s8,
     PLAYER_AP_SWORD_MASTER as libc::c_int as s8,
     PLAYER_AP_POCKET_EGG as libc::c_int as s8,
     PLAYER_AP_POCKET_CUCCO as libc::c_int as s8,
     PLAYER_AP_COJIRO as libc::c_int as s8,
     PLAYER_AP_ODD_MUSHROOM as libc::c_int as s8,
     PLAYER_AP_ODD_POTION as libc::c_int as s8,
     PLAYER_AP_SAW as libc::c_int as s8,
     PLAYER_AP_SWORD_BROKEN as libc::c_int as s8,
     PLAYER_AP_PRESCRIPTION as libc::c_int as s8,
     PLAYER_AP_FROG as libc::c_int as s8,
     PLAYER_AP_EYEDROPS as libc::c_int as s8,
     PLAYER_AP_CLAIM_CHECK as libc::c_int as s8,
     PLAYER_AP_BOW_FIRE as libc::c_int as s8,
     PLAYER_AP_BOW_ICE as libc::c_int as s8,
     PLAYER_AP_BOW_LIGHT as libc::c_int as s8,
     PLAYER_AP_SWORD_KOKIRI as libc::c_int as s8,
     PLAYER_AP_SWORD_MASTER as libc::c_int as s8,
     PLAYER_AP_SWORD_BGS as libc::c_int as s8];
static mut D_80853EDC:
       [Option<unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                   -> s32>; 67] =
    unsafe {
        [Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_808349DC as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_808349DC as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_808349DC as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083501C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083501C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083501C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083501C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083501C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083501C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083501C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083501C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083501C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083501C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_808356E8 as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_808356E8 as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_80835800 as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083485C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32)]
    };
static mut D_80853FE8:
       [Option<unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                   -> ()>; 67] =
    unsafe {
        [Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_8083377C as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833790 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_8083379C as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_8083379C as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_8083379C as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_8083379C as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_8083379C as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_8083379C as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_8083379C as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_8083379C as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833910 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833910 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_808337D4 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_808337D4 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833984 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80833770 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ())]
    };
static mut D_808540F4: [struct_808540F4; 14] =
    unsafe {
        [{
             let mut init =
                 struct_808540F4{anim:
                                     &gPlayerAnim_002F50 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04: 12 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_808540F4{anim:
                                     &gPlayerAnim_003080 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04: 6 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_808540F4{anim:
                                     &gPlayerAnim_002C68 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04: 8 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_808540F4{anim:
                                     &gPlayerAnim_003090 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04: 8 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_808540F4{anim:
                                     &gPlayerAnim_002A20 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04: 8 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_808540F4{anim:
                                     &gPlayerAnim_002F30 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04: 10 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_808540F4{anim:
                                     &gPlayerAnim_002C58 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04: 7 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_808540F4{anim:
                                     &gPlayerAnim_002C60 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04: 11 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_808540F4{anim:
                                     &gPlayerAnim_002F50 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04: 12 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_808540F4{anim:
                                     &gPlayerAnim_003078 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04: 4 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_808540F4{anim:
                                     &gPlayerAnim_003058 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04: 4 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_808540F4{anim:
                                     &gPlayerAnim_002F38 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04: 4 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_808540F4{anim:
                                     &gPlayerAnim_0024E0 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04: 5 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_808540F4{anim:
                                     &gPlayerAnim_002F48 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04: 13 as libc::c_int as u8_0,};
             init
         }]
    };
static mut D_80854164: [[s8; 6]; 6] =
    [[8 as libc::c_int as s8, -(5 as libc::c_int) as s8,
      -(3 as libc::c_int) as s8, -(6 as libc::c_int) as s8,
      8 as libc::c_int as s8, 11 as libc::c_int as s8],
     [5 as libc::c_int as s8, 0 as libc::c_int as s8,
      -(1 as libc::c_int) as s8, 4 as libc::c_int as s8,
      5 as libc::c_int as s8, 9 as libc::c_int as s8],
     [3 as libc::c_int as s8, 1 as libc::c_int as s8, 0 as libc::c_int as s8,
      2 as libc::c_int as s8, 3 as libc::c_int as s8, 9 as libc::c_int as s8],
     [6 as libc::c_int as s8, -(4 as libc::c_int) as s8,
      -(2 as libc::c_int) as s8, 7 as libc::c_int as s8,
      6 as libc::c_int as s8, 10 as libc::c_int as s8],
     [8 as libc::c_int as s8, -(5 as libc::c_int) as s8,
      -(3 as libc::c_int) as s8, -(6 as libc::c_int) as s8,
      8 as libc::c_int as s8, 11 as libc::c_int as s8],
     [8 as libc::c_int as s8, -(5 as libc::c_int) as s8,
      -(3 as libc::c_int) as s8, -(6 as libc::c_int) as s8,
      8 as libc::c_int as s8, 11 as libc::c_int as s8]];
static mut sExplosiveInfos: [ExplosiveInfo; 2] =
    [{
         let mut init =
             ExplosiveInfo{itemId: ITEM_BOMB as libc::c_int as u8_0,
                           actorId: ACTOR_EN_BOM as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             ExplosiveInfo{itemId: ITEM_BOMBCHU as libc::c_int as u8_0,
                           actorId: ACTOR_EN_BOM_CHU as libc::c_int as s16,};
         init
     }];
static mut D_80854190: [struct_80854190; 28] =
    unsafe {
        [{
             let mut init =
                 struct_80854190{unk_00:
                                     &gPlayerAnim_002A80 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04:
                                     &gPlayerAnim_002A90 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_08:
                                     &gPlayerAnim_002A88 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_0C: 1 as libc::c_int as u8_0,
                                 unk_0D: 4 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_80854190{unk_00:
                                     &gPlayerAnim_0028C0 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04:
                                     &gPlayerAnim_0028C8 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_08:
                                     &gPlayerAnim_002498 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_0C: 1 as libc::c_int as u8_0,
                                 unk_0D: 4 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_80854190{unk_00:
                                     &gPlayerAnim_002A98 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04:
                                     &gPlayerAnim_002AA0 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_08:
                                     &gPlayerAnim_002540 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_0C: 0 as libc::c_int as u8_0,
                                 unk_0D: 5 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_80854190{unk_00:
                                     &gPlayerAnim_0028D0 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04:
                                     &gPlayerAnim_0028D8 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_08:
                                     &gPlayerAnim_0024A0 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_0C: 1 as libc::c_int as u8_0,
                                 unk_0D: 7 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_80854190{unk_00:
                                     &gPlayerAnim_002968 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04:
                                     &gPlayerAnim_002970 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_08:
                                     &gPlayerAnim_0024C0 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_0C: 1 as libc::c_int as u8_0,
                                 unk_0D: 4 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_80854190{unk_00:
                                     &gPlayerAnim_002880 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04:
                                     &gPlayerAnim_002888 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_08:
                                     &gPlayerAnim_002478 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_0C: 0 as libc::c_int as u8_0,
                                 unk_0D: 5 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_80854190{unk_00:
                                     &gPlayerAnim_002978 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04:
                                     &gPlayerAnim_002980 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_08:
                                     &gPlayerAnim_0024C8 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_0C: 2 as libc::c_int as u8_0,
                                 unk_0D: 8 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_80854190{unk_00:
                                     &gPlayerAnim_002890 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04:
                                     &gPlayerAnim_002898 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_08:
                                     &gPlayerAnim_002480 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_0C: 3 as libc::c_int as u8_0,
                                 unk_0D: 8 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_80854190{unk_00:
                                     &gPlayerAnim_0029A0 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04:
                                     &gPlayerAnim_0029A8 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_08:
                                     &gPlayerAnim_0024D0 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_0C: 0 as libc::c_int as u8_0,
                                 unk_0D: 4 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_80854190{unk_00:
                                     &gPlayerAnim_0028A0 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04:
                                     &gPlayerAnim_0028A8 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_08:
                                     &gPlayerAnim_002488 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_0C: 0 as libc::c_int as u8_0,
                                 unk_0D: 5 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_80854190{unk_00:
                                     &gPlayerAnim_0029B0 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04:
                                     &gPlayerAnim_0029B8 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_08:
                                     &gPlayerAnim_0024D8 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_0C: 0 as libc::c_int as u8_0,
                                 unk_0D: 6 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_80854190{unk_00:
                                     &gPlayerAnim_0028B0 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04:
                                     &gPlayerAnim_0028B8 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_08:
                                     &gPlayerAnim_002490 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_0C: 1 as libc::c_int as u8_0,
                                 unk_0D: 5 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_80854190{unk_00:
                                     &gPlayerAnim_002AA8 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04:
                                     &gPlayerAnim_002AB0 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_08:
                                     &gPlayerAnim_002548 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_0C: 0 as libc::c_int as u8_0,
                                 unk_0D: 3 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_80854190{unk_00:
                                     &gPlayerAnim_0028E0 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04:
                                     &gPlayerAnim_0028E8 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_08:
                                     &gPlayerAnim_0024A8 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_0C: 0 as libc::c_int as u8_0,
                                 unk_0D: 3 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_80854190{unk_00:
                                     &gPlayerAnim_002AB8 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04:
                                     &gPlayerAnim_002AC0 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_08:
                                     &gPlayerAnim_002550 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_0C: 1 as libc::c_int as u8_0,
                                 unk_0D: 9 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_80854190{unk_00:
                                     &gPlayerAnim_0028F0 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04:
                                     &gPlayerAnim_0028F8 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_08:
                                     &gPlayerAnim_0024B0 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_0C: 1 as libc::c_int as u8_0,
                                 unk_0D: 8 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_80854190{unk_00:
                                     &gPlayerAnim_002A60 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04:
                                     &gPlayerAnim_002A50 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_08:
                                     &gPlayerAnim_002A50 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_0C: 1 as libc::c_int as u8_0,
                                 unk_0D: 10 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_80854190{unk_00:
                                     &gPlayerAnim_002900 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04:
                                     &gPlayerAnim_002910 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_08:
                                     &gPlayerAnim_002910 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_0C: 1 as libc::c_int as u8_0,
                                 unk_0D: 11 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_80854190{unk_00:
                                     &gPlayerAnim_002A50 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04:
                                     &gPlayerAnim_002A58 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_08:
                                     &gPlayerAnim_002A58 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_0C: 1 as libc::c_int as u8_0,
                                 unk_0D: 2 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_80854190{unk_00:
                                     &gPlayerAnim_002910 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04:
                                     &gPlayerAnim_002908 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_08:
                                     &gPlayerAnim_002908 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_0C: 1 as libc::c_int as u8_0,
                                 unk_0D: 2 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_80854190{unk_00:
                                     &gPlayerAnim_002B80 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04:
                                     &gPlayerAnim_002B88 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_08:
                                     &gPlayerAnim_002B88 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_0C: 1 as libc::c_int as u8_0,
                                 unk_0D: 5 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_80854190{unk_00:
                                     &gPlayerAnim_002B70 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04:
                                     &gPlayerAnim_002B78 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_08:
                                     &gPlayerAnim_002B78 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_0C: 1 as libc::c_int as u8_0,
                                 unk_0D: 4 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_80854190{unk_00:
                                     &gPlayerAnim_002C40 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04:
                                     &gPlayerAnim_002C50 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_08:
                                     &gPlayerAnim_002C48 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_0C: 3 as libc::c_int as u8_0,
                                 unk_0D: 10 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_80854190{unk_00:
                                     &gPlayerAnim_002C70 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04:
                                     &gPlayerAnim_002C80 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_08:
                                     &gPlayerAnim_002C78 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_0C: 2 as libc::c_int as u8_0,
                                 unk_0D: 11 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_80854190{unk_00:
                                     &gPlayerAnim_002B28 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04:
                                     &gPlayerAnim_002B30 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_08:
                                     &gPlayerAnim_002560 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_0C: 0 as libc::c_int as u8_0,
                                 unk_0D: 12 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_80854190{unk_00:
                                     &gPlayerAnim_002940 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04:
                                     &gPlayerAnim_002948 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_08:
                                     &gPlayerAnim_0024B8 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_0C: 0 as libc::c_int as u8_0,
                                 unk_0D: 15 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_80854190{unk_00:
                                     &gPlayerAnim_0029C0 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04:
                                     &gPlayerAnim_0029C8 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_08:
                                     &gPlayerAnim_002560 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_0C: 0 as libc::c_int as u8_0,
                                 unk_0D: 16 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_80854190{unk_00:
                                     &gPlayerAnim_0029C0 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04:
                                     &gPlayerAnim_0029C8 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_08:
                                     &gPlayerAnim_0024B8 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_0C: 0 as libc::c_int as u8_0,
                                 unk_0D: 16 as libc::c_int as u8_0,};
             init
         }]
    };
static mut D_80854350: [*mut LinkAnimationHeader; 2] =
    unsafe {
        [&gPlayerAnim_002AE8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002920 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80854358: [*mut LinkAnimationHeader; 2] =
    unsafe {
        [&gPlayerAnim_002AE0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002920 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80854360: [*mut LinkAnimationHeader; 2] =
    unsafe {
        [&gPlayerAnim_002AF0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002928 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80854368: [*mut LinkAnimationHeader; 2] =
    unsafe {
        [&gPlayerAnim_002AF8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002930 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80854370: [*mut LinkAnimationHeader; 2] =
    unsafe {
        [&gPlayerAnim_002B00 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002938 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80854378: [*mut LinkAnimationHeader; 2] =
    unsafe {
        [&gPlayerAnim_002AD8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002918 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80854380: [u8_0; 2] =
    [0x18 as libc::c_int as u8_0, 0x19 as libc::c_int as u8_0];
static mut D_80854384: [u8_0; 2] =
    [0x1a as libc::c_int as u8_0, 0x1b as libc::c_int as u8_0];
static mut D_80854388: [u16_0; 4] =
    [0x4000 as libc::c_int as u16_0, 0x2 as libc::c_int as u16_0,
     0x4 as libc::c_int as u16_0, 0x1 as libc::c_int as u16_0];
static mut sMagicSpellCosts: [u8_0; 6] =
    [12 as libc::c_int as u8_0, 24 as libc::c_int as u8_0,
     24 as libc::c_int as u8_0, 12 as libc::c_int as u8_0,
     24 as libc::c_int as u8_0, 12 as libc::c_int as u8_0];
static mut D_80854398: [u16_0; 3] =
    [0x1807 as libc::c_int as u16_0, 0x1821 as libc::c_int as u16_0,
     0x1827 as libc::c_int as u16_0];
static mut sMagicArrowCosts: [u8_0; 3] =
    [4 as libc::c_int as u8_0, 4 as libc::c_int as u8_0,
     8 as libc::c_int as u8_0];
static mut D_808543A4: [*mut LinkAnimationHeader; 2] =
    unsafe {
        [&gPlayerAnim_0025C0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0025C8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_808543AC: [*mut LinkAnimationHeader; 2] =
    unsafe {
        [&gPlayerAnim_002580 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002588 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_808543B4: [*mut LinkAnimationHeader; 2] =
    unsafe {
        [&gPlayerAnim_002510 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002518 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_808543BC: [*mut LinkAnimationHeader; 2] =
    unsafe {
        [&gPlayerAnim_002510 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002520 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_808543C4: [*mut LinkAnimationHeader; 2] =
    unsafe {
        [&gPlayerAnim_002EC0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002A08 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_808543CC: [*mut LinkAnimationHeader; 2] =
    unsafe {
        [&gPlayerAnim_0026F0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002CC8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_808543D4: [*mut LinkAnimationHeader; 2] =
    unsafe {
        [&gPlayerAnim_0026C0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002CC0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
// return type can't be void due to regalloc in func_8084FCAC
#[no_mangle]
pub unsafe extern "C" fn func_80832210(mut this: *mut Player) -> s32 {
    (*this).actor.speedXZ = 0.0f32;
    (*this).linearVelocity = 0.0f32;
    panic!("Reached end of non-void function without returning");
}
// return type can't be void due to regalloc in func_8083F72C
#[no_mangle]
pub unsafe extern "C" fn func_80832224(mut this: *mut Player) -> s32 {
    func_80832210(this);
    (*this).unk_6AD = 0 as libc::c_int as u8_0;
    panic!("Reached end of non-void function without returning");
}
#[no_mangle]
pub unsafe extern "C" fn func_8083224C(mut globalCtx: *mut GlobalContext)
 -> s32 {
    let mut this: *mut Player =
        (*globalCtx).actorCtx.actorLists[ACTORCAT_PLAYER as libc::c_int as
                                             usize].head as *mut Player;
    return ((*this).actor.flags &
                ((1 as libc::c_int) << 8 as libc::c_int) as libc::c_uint ==
                ((1 as libc::c_int) << 8 as libc::c_int) as libc::c_uint) as
               libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80832264(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut LinkAnimationHeader) {
    LinkAnimation_PlayOnce(globalCtx, &mut (*this).skelAnime, anim);
}
#[no_mangle]
pub unsafe extern "C" fn func_80832284(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut LinkAnimationHeader) {
    LinkAnimation_PlayLoop(globalCtx, &mut (*this).skelAnime, anim);
}
#[no_mangle]
pub unsafe extern "C" fn func_808322A4(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut LinkAnimationHeader) {
    LinkAnimation_PlayLoopSetSpeed(globalCtx, &mut (*this).skelAnime, anim,
                                   2.0f32 / 3.0f32);
}
#[no_mangle]
pub unsafe extern "C" fn func_808322D0(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut LinkAnimationHeader) {
    LinkAnimation_PlayOnceSetSpeed(globalCtx, &mut (*this).skelAnime, anim,
                                   2.0f32 / 3.0f32);
}
#[no_mangle]
pub unsafe extern "C" fn func_808322FC(mut this: *mut Player) {
    (*this).actor.shape.rot.y =
        ((*this).actor.shape.rot.y as libc::c_int +
             (*(*this).skelAnime.jointTable.offset(1 as libc::c_int as
                                                       isize)).y as
                 libc::c_int) as s16;
    (*(*this).skelAnime.jointTable.offset(1 as libc::c_int as isize)).y =
        0 as libc::c_int as s16;
}
#[no_mangle]
pub unsafe extern "C" fn func_80832318(mut this: *mut Player) {
    (*this).stateFlags2 &= !(0x20000 as libc::c_int) as libc::c_uint;
    (*this).swordState = 0 as libc::c_int as s8;
    (*this).swordInfo[2 as libc::c_int as usize].active = 0 as libc::c_int;
    (*this).swordInfo[1 as libc::c_int as usize].active =
        (*this).swordInfo[2 as libc::c_int as usize].active;
    (*this).swordInfo[0 as libc::c_int as usize].active =
        (*this).swordInfo[1 as libc::c_int as usize].active;
}
#[no_mangle]
pub unsafe extern "C" fn func_80832340(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    let mut camera: *mut Camera = 0 as *mut Camera;
    if (*this).unk_46C as libc::c_int != -(1 as libc::c_int) {
        camera = (*globalCtx).cameraPtrs[(*this).unk_46C as usize];
        if !camera.is_null() &&
               (*camera).csId as libc::c_int == 1100 as libc::c_int {
            OnePointCutscene_EndCutscene(globalCtx, (*this).unk_46C);
            (*this).unk_46C = -(1 as libc::c_int) as s16
        }
    }
    (*this).stateFlags2 &= !(0xc00 as libc::c_int) as libc::c_uint;
}
#[no_mangle]
pub unsafe extern "C" fn func_808323B4(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    let mut heldActor: *mut Actor = (*this).heldActor;
    if !heldActor.is_null() && Player_HoldsHookshot(this) == 0 {
        (*this).actor.child = 0 as *mut Actor;
        (*this).heldActor = 0 as *mut Actor;
        (*this).interactRangeActor = 0 as *mut Actor;
        (*heldActor).parent = 0 as *mut Actor;
        (*this).stateFlags1 &= !(0x800 as libc::c_int) as libc::c_uint
    }
    if Player_GetExplosiveHeld(this) >= 0 as libc::c_int {
        func_8083399C(globalCtx, this, PLAYER_AP_NONE as libc::c_int as s8);
        (*this).heldItemId = ITEM_NONE_FE as libc::c_int as u8_0
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80832440(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    if (*this).stateFlags1 & 0x800 as libc::c_int as libc::c_uint != 0 &&
           (*this).heldActor.is_null() {
        if !(*this).interactRangeActor.is_null() {
            if (*this).getItemId as libc::c_int == GI_NONE as libc::c_int {
                (*this).stateFlags1 &=
                    !(0x800 as libc::c_int) as libc::c_uint;
                (*this).interactRangeActor = 0 as *mut Actor
            }
        } else {
            (*this).stateFlags1 &= !(0x800 as libc::c_int) as libc::c_uint
        }
    }
    func_80832318(this);
    (*this).unk_6AD = 0 as libc::c_int as u8_0;
    func_80832340(globalCtx, this);
    func_8005B1A4(Gameplay_GetCamera(globalCtx, 0 as libc::c_int as s16));
    (*this).stateFlags1 &= !(0x306000 as libc::c_int) as libc::c_uint;
    (*this).stateFlags2 &= !(0x40090 as libc::c_int) as libc::c_uint;
    (*this).actor.shape.rot.x = 0 as libc::c_int as s16;
    (*this).actor.shape.yOffset = 0.0f32;
    (*this).unk_844 = 0 as libc::c_int as s8;
    (*this).unk_845 = (*this).unk_844 as u8_0;
}
#[no_mangle]
pub unsafe extern "C" fn func_80832528(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) -> s32 {
    if (*this).heldItemActionParam as libc::c_int >=
           PLAYER_AP_FISHING_POLE as libc::c_int {
        func_80835F44(globalCtx, this, ITEM_NONE as libc::c_int);
        return 1 as libc::c_int
    } else { return 0 as libc::c_int };
}
#[no_mangle]
pub unsafe extern "C" fn func_80832564(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    func_80832440(globalCtx, this);
    func_808323B4(globalCtx, this);
}
#[no_mangle]
pub unsafe extern "C" fn func_80832594(mut this: *mut Player, mut arg1: s32,
                                       mut arg2: s32) -> s32 {
    let mut temp: s16 =
        ((*this).unk_A80 as libc::c_int - D_808535D8 as libc::c_int) as s16;
    (*this).unk_850 =
        ((*this).unk_850 as libc::c_int +
             (arg1 +
                  ((if temp as libc::c_int >= 0 as libc::c_int {
                        temp as libc::c_int
                    } else { -(temp as libc::c_int) }) as libc::c_float *
                       fabsf(D_808535D4) * 2.5415802156203426e-06f32) as s16
                      as libc::c_int)) as s16;
    if (*sControlInput).press.button as libc::c_int &
           (0x8000 as libc::c_int | 0x4000 as libc::c_int) != 0 as libc::c_int
       {
        (*this).unk_850 =
            ((*this).unk_850 as libc::c_int + 5 as libc::c_int) as s16
    }
    return ((*this).unk_850 as libc::c_int > arg2) as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80832630(mut globalCtx: *mut GlobalContext) {
    if (*globalCtx).actorCtx.freezeFlashTimer as libc::c_int ==
           0 as libc::c_int {
        (*globalCtx).actorCtx.freezeFlashTimer = 1 as libc::c_int as u8_0
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8083264C(mut this: *mut Player, mut arg1: s32,
                                       mut arg2: s32, mut arg3: s32,
                                       mut arg4: s32) {
    if (*this).actor.category as libc::c_int == ACTORCAT_PLAYER as libc::c_int
       {
        func_800AA000(arg4 as f32_0, arg1 as u8_0, arg2 as u8_0,
                      arg3 as u8_0);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80832698(mut this: *mut Player,
                                       mut sfxId: u16_0) {
    if (*this).actor.category as libc::c_int == ACTORCAT_PLAYER as libc::c_int
       {
        func_8002F7DC(&mut (*this).actor,
                      (sfxId as libc::c_int +
                           (*(*this).ageProperties).unk_92 as libc::c_int) as
                          u16_0);
    } else { func_800F4190(&mut (*this).actor.projectedPos, sfxId); };
}
#[no_mangle]
pub unsafe extern "C" fn func_808326F0(mut this: *mut Player) {
    let mut entry: *mut u16_0 =
        &mut *D_8085361C.as_mut_ptr().offset(0 as libc::c_int as isize) as
            *mut u16_0;
    let mut i: s32 = 0;
    i = 0 as libc::c_int;
    while i < 4 as libc::c_int {
        Audio_StopSfxById((*entry as libc::c_int +
                               (*(*this).ageProperties).unk_92 as libc::c_int)
                              as u16_0 as u32_0);
        entry = entry.offset(1);
        i += 1
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8083275C(mut this: *mut Player,
                                       mut sfxId: u16_0) -> u16_0 {
    return (sfxId as libc::c_int + (*this).unk_89E as libc::c_int) as u16_0;
}
#[no_mangle]
pub unsafe extern "C" fn func_80832770(mut this: *mut Player,
                                       mut sfxId: u16_0) {
    func_8002F7DC(&mut (*this).actor, func_8083275C(this, sfxId));
}
#[no_mangle]
pub unsafe extern "C" fn func_808327A4(mut this: *mut Player,
                                       mut sfxId: u16_0) -> u16_0 {
    return (sfxId as libc::c_int + (*this).unk_89E as libc::c_int +
                (*(*this).ageProperties).unk_94 as libc::c_int) as u16_0;
}
#[no_mangle]
pub unsafe extern "C" fn func_808327C4(mut this: *mut Player,
                                       mut sfxId: u16_0) {
    func_8002F7DC(&mut (*this).actor, func_808327A4(this, sfxId));
}
#[no_mangle]
pub unsafe extern "C" fn func_808327F8(mut this: *mut Player,
                                       mut arg1: f32_0) {
    let mut sfxId: s32 = 0;
    if (*this).currentBoots as libc::c_int == PLAYER_BOOTS_IRON as libc::c_int
       {
        sfxId = 0x80d as libc::c_int
    } else {
        sfxId = func_808327A4(this, 0x800 as libc::c_int as u16_0) as s32
    }
    func_800F4010(&mut (*this).actor.projectedPos, sfxId as u16_0, arg1);
}
#[no_mangle]
pub unsafe extern "C" fn func_80832854(mut this: *mut Player) {
    let mut sfxId: s32 = 0;
    if (*this).currentBoots as libc::c_int == PLAYER_BOOTS_IRON as libc::c_int
       {
        sfxId = 0x81d as libc::c_int
    } else {
        sfxId = func_808327A4(this, 0x810 as libc::c_int as u16_0) as s32
    }
    func_8002F7DC(&mut (*this).actor, sfxId as u16_0);
}
#[no_mangle]
pub unsafe extern "C" fn func_808328A0(mut this: *mut Player) {
    let mut sfxId: s32 = 0;
    if (*this).currentBoots as libc::c_int == PLAYER_BOOTS_IRON as libc::c_int
       {
        sfxId = 0x82d as libc::c_int
    } else {
        sfxId = func_808327A4(this, 0x820 as libc::c_int as u16_0) as s32
    }
    func_8002F7DC(&mut (*this).actor, sfxId as u16_0);
}
#[no_mangle]
pub unsafe extern "C" fn func_808328EC(mut this: *mut Player,
                                       mut sfxId: u16_0) {
    func_8002F7DC(&mut (*this).actor, sfxId);
    (*this).stateFlags2 |= 8 as libc::c_int as libc::c_uint;
}
#[no_mangle]
pub unsafe extern "C" fn func_80832924(mut this: *mut Player,
                                       mut entry: *mut struct_80832924) {
    let mut data: s32 = 0;
    let mut flags: s32 = 0;
    let mut cont: u32_0 = 0;
    let mut pad: s32 = 0;
    loop  {
        data =
            if (*entry).field as libc::c_int >= 0 as libc::c_int {
                (*entry).field as libc::c_int
            } else { -((*entry).field as libc::c_int) };
        flags = data & 0x7800 as libc::c_int;
        if LinkAnimation_OnFrame(&mut (*this).skelAnime,
                                 fabsf((data & 0x7ff as libc::c_int) as
                                           f32_0)) != 0 {
            if flags == 0x800 as libc::c_int {
                func_8002F7DC(&mut (*this).actor, (*entry).sfxId);
            } else if flags == 0x1000 as libc::c_int {
                func_80832770(this, (*entry).sfxId);
            } else if flags == 0x1800 as libc::c_int {
                func_808327C4(this, (*entry).sfxId);
            } else if flags == 0x2000 as libc::c_int {
                func_80832698(this, (*entry).sfxId);
            } else if flags == 0x2800 as libc::c_int {
                func_808328A0(this);
            } else if flags == 0x3000 as libc::c_int {
                func_808327F8(this, 6.0f32);
            } else if flags == 0x3800 as libc::c_int {
                func_80832854(this);
            } else if flags == 0x4000 as libc::c_int {
                func_808327F8(this, 0.0f32);
            } else if flags == 0x4800 as libc::c_int {
                func_800F4010(&mut (*this).actor.projectedPos,
                              ((*(*this).ageProperties).unk_94 as libc::c_int
                                   + 0x80a as libc::c_int) as u16_0, 0.0f32);
            }
        }
        cont =
            ((*entry).field as libc::c_int >= 0 as libc::c_int) as libc::c_int
                as u32_0;
        entry = entry.offset(1);
        if !(cont != 0) { break ; }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80832B0C(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut LinkAnimationHeader) {
    LinkAnimation_Change(globalCtx, &mut (*this).skelAnime, anim, 1.0f32,
                         0.0f32,
                         Animation_GetLastFrame(anim as *mut libc::c_void) as
                             f32_0, ANIMMODE_ONCE as libc::c_int as u8_0,
                         -6.0f32);
}
#[no_mangle]
pub unsafe extern "C" fn func_80832B78(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut LinkAnimationHeader) {
    LinkAnimation_Change(globalCtx, &mut (*this).skelAnime, anim,
                         2.0f32 / 3.0f32, 0.0f32,
                         Animation_GetLastFrame(anim as *mut libc::c_void) as
                             f32_0, ANIMMODE_ONCE as libc::c_int as u8_0,
                         -6.0f32);
}
#[no_mangle]
pub unsafe extern "C" fn func_80832BE8(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut LinkAnimationHeader) {
    LinkAnimation_Change(globalCtx, &mut (*this).skelAnime, anim, 1.0f32,
                         0.0f32, 0.0f32, ANIMMODE_LOOP as libc::c_int as u8_0,
                         -6.0f32);
}
#[no_mangle]
pub unsafe extern "C" fn func_80832C2C(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut LinkAnimationHeader) {
    LinkAnimation_Change(globalCtx, &mut (*this).skelAnime, anim, 1.0f32,
                         0.0f32, 0.0f32, ANIMMODE_ONCE as libc::c_int as u8_0,
                         0.0f32);
}
#[no_mangle]
pub unsafe extern "C" fn func_80832C6C(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut LinkAnimationHeader) {
    LinkAnimation_Change(globalCtx, &mut (*this).skelAnime, anim, 1.0f32,
                         0.0f32, 0.0f32, ANIMMODE_LOOP as libc::c_int as u8_0,
                         -16.0f32);
}
#[no_mangle]
pub unsafe extern "C" fn func_80832CB0(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut LinkAnimationHeader)
 -> s32 {
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        func_80832284(globalCtx, this, anim);
        return 1 as libc::c_int
    } else { return 0 as libc::c_int };
}
#[no_mangle]
pub unsafe extern "C" fn func_80832CFC(mut this: *mut Player) {
    (*this).skelAnime.prevTransl = (*this).skelAnime.baseTransl;
    (*this).skelAnime.prevRot = (*this).actor.shape.rot.y;
}
#[no_mangle]
pub unsafe extern "C" fn func_80832D20(mut this: *mut Player) {
    func_80832CFC(this);
    (*this).skelAnime.prevTransl.x =
        ((*this).skelAnime.prevTransl.x as libc::c_float *
             (*(*this).ageProperties).unk_08) as s16;
    (*this).skelAnime.prevTransl.y =
        ((*this).skelAnime.prevTransl.y as libc::c_float *
             (*(*this).ageProperties).unk_08) as s16;
    (*this).skelAnime.prevTransl.z =
        ((*this).skelAnime.prevTransl.z as libc::c_float *
             (*(*this).ageProperties).unk_08) as s16;
}
#[no_mangle]
pub unsafe extern "C" fn func_80832DB0(mut this: *mut Player) {
    (*(*this).skelAnime.jointTable.offset(1 as libc::c_int as isize)).y =
        0 as libc::c_int as s16;
}
#[no_mangle]
pub unsafe extern "C" fn func_80832DBC(mut this: *mut Player) {
    if (*this).skelAnime.moveFlags as libc::c_int != 0 as libc::c_int {
        func_808322FC(this);
        (*(*this).skelAnime.jointTable.offset(0 as libc::c_int as isize)).x =
            (*this).skelAnime.baseTransl.x;
        (*(*this).skelAnime.jointTable.offset(0 as libc::c_int as isize)).z =
            (*this).skelAnime.baseTransl.z;
        if (*this).skelAnime.moveFlags as libc::c_int & 8 as libc::c_int != 0
           {
            if (*this).skelAnime.moveFlags as libc::c_int & 2 as libc::c_int
                   != 0 {
                (*(*this).skelAnime.jointTable.offset(0 as libc::c_int as
                                                          isize)).y =
                    (*this).skelAnime.prevTransl.y
            }
        } else {
            (*(*this).skelAnime.jointTable.offset(0 as libc::c_int as
                                                      isize)).y =
                (*this).skelAnime.baseTransl.y
        }
        func_80832CFC(this);
        (*this).skelAnime.moveFlags = 0 as libc::c_int as u8_0
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80832E48(mut this: *mut Player,
                                       mut flags: s32) {
    let mut pos: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    (*this).skelAnime.moveFlags = flags as u8_0;
    (*this).skelAnime.prevTransl = (*this).skelAnime.baseTransl;
    SkelAnime_UpdateTranslation(&mut (*this).skelAnime, &mut pos,
                                (*this).actor.shape.rot.y);
    if flags & 1 as libc::c_int != 0 {
        if !(gSaveContext.linkAge == 0 as libc::c_int) {
            pos.x *= 0.64f32;
            pos.z *= 0.64f32
        }
        (*this).actor.world.pos.x += pos.x * (*this).actor.scale.x;
        (*this).actor.world.pos.z += pos.z * (*this).actor.scale.z
    }
    if flags & 2 as libc::c_int != 0 {
        if flags & 4 as libc::c_int == 0 {
            pos.y *= (*(*this).ageProperties).unk_08
        }
        (*this).actor.world.pos.y += pos.y * (*this).actor.scale.y
    }
    func_808322FC(this);
}
#[no_mangle]
pub unsafe extern "C" fn func_80832F54(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut flags: s32) {
    if flags & 0x200 as libc::c_int != 0 {
        func_80832D20(this);
    } else if flags & 0x100 as libc::c_int != 0 ||
                  (*this).skelAnime.moveFlags as libc::c_int !=
                      0 as libc::c_int {
        func_80832CFC(this);
    } else {
        (*this).skelAnime.prevTransl =
            *(*this).skelAnime.jointTable.offset(0 as libc::c_int as isize);
        (*this).skelAnime.prevRot = (*this).actor.shape.rot.y
    }
    (*this).skelAnime.moveFlags = flags as u8_0;
    func_80832210(this);
    AnimationContext_DisableQueue(globalCtx);
}
#[no_mangle]
pub unsafe extern "C" fn func_80832FFC(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut LinkAnimationHeader,
                                       mut flags: s32,
                                       mut playbackSpeed: f32_0) {
    LinkAnimation_PlayOnceSetSpeed(globalCtx, &mut (*this).skelAnime, anim,
                                   playbackSpeed);
    func_80832F54(globalCtx, this, flags);
}
#[no_mangle]
pub unsafe extern "C" fn func_8083303C(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut LinkAnimationHeader,
                                       mut flags: s32) {
    func_80832FFC(globalCtx, this, anim, flags, 1.0f32);
}
#[no_mangle]
pub unsafe extern "C" fn func_80833064(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut LinkAnimationHeader,
                                       mut flags: s32) {
    func_80832FFC(globalCtx, this, anim, flags, 2.0f32 / 3.0f32);
}
#[no_mangle]
pub unsafe extern "C" fn func_8083308C(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut LinkAnimationHeader) {
    func_80833064(globalCtx, this, anim, 0x1c as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn func_808330AC(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut LinkAnimationHeader,
                                       mut flags: s32,
                                       mut playbackSpeed: f32_0) {
    LinkAnimation_PlayLoopSetSpeed(globalCtx, &mut (*this).skelAnime, anim,
                                   playbackSpeed);
    func_80832F54(globalCtx, this, flags);
}
#[no_mangle]
pub unsafe extern "C" fn func_808330EC(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut LinkAnimationHeader,
                                       mut flags: s32) {
    func_808330AC(globalCtx, this, anim, flags, 1.0f32);
}
#[no_mangle]
pub unsafe extern "C" fn func_80833114(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut LinkAnimationHeader,
                                       mut flags: s32) {
    func_808330AC(globalCtx, this, anim, flags, 2.0f32 / 3.0f32);
}
#[no_mangle]
pub unsafe extern "C" fn func_8083313C(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut LinkAnimationHeader) {
    func_80833114(globalCtx, this, anim, 0x1c as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn func_8083315C(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    let mut phi_v1: s8 = 0;
    let mut phi_v0: s8 = 0;
    (*this).unk_A7C = D_808535D4;
    (*this).unk_A80 = D_808535D8;
    func_80077D10(&mut D_808535D4, &mut D_808535D8, sControlInput);
    D_808535DC =
        (Camera_GetInputDirYaw((*globalCtx).cameraPtrs[(*globalCtx).activeCamera
                                                           as usize]) as
             libc::c_int + D_808535D8 as libc::c_int) as s16;
    (*this).unk_846 =
        (((*this).unk_846 as libc::c_int + 1 as libc::c_int) %
             4 as libc::c_int) as u8_0;
    if D_808535D4 < 55.0f32 {
        phi_v0 = -(1 as libc::c_int) as s8;
        phi_v1 = -(1 as libc::c_int) as s8
    } else {
        phi_v1 =
            ((D_808535D8 as libc::c_int + 0x2000 as libc::c_int) as u16_0 as
                 libc::c_int >> 9 as libc::c_int) as s8;
        phi_v0 =
            (((D_808535DC as libc::c_int -
                   (*this).actor.shape.rot.y as libc::c_int) as s16 as
                  libc::c_int + 0x2000 as libc::c_int) as u16_0 as libc::c_int
                 >> 14 as libc::c_int) as s8
    }
    (*this).unk_847[(*this).unk_846 as usize] = phi_v1;
    (*this).unk_84B[(*this).unk_846 as usize] = phi_v0;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083328C(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut linkAnim:
                                           *mut LinkAnimationHeader) {
    LinkAnimation_PlayOnceSetSpeed(globalCtx, &mut (*this).skelAnime,
                                   linkAnim, D_808535E8);
}
#[no_mangle]
pub unsafe extern "C" fn func_808332B8(mut this: *mut Player) -> s32 {
    return ((*this).stateFlags1 & 0x8000000 as libc::c_int as libc::c_uint !=
                0 &&
                (*this).currentBoots as libc::c_int !=
                    PLAYER_BOOTS_IRON as libc::c_int) as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_808332E4(mut this: *mut Player) -> s32 {
    return ((*this).stateFlags1 & 0x1000000 as libc::c_int as libc::c_uint) as
               s32;
}
#[no_mangle]
pub unsafe extern "C" fn func_808332F4(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut giEntry: *mut GetItemEntry =
        &mut *sGetItemTable.as_mut_ptr().offset(((*this).getItemId as
                                                     libc::c_int -
                                                     1 as libc::c_int) as
                                                    isize) as
            *mut GetItemEntry;
    (*this).unk_862 =
        if (*giEntry).gi as libc::c_int >= 0 as libc::c_int {
            (*giEntry).gi as libc::c_int
        } else { -((*giEntry).gi as libc::c_int) } as s8;
}
unsafe extern "C" fn func_80833338(mut this: *mut Player)
 -> *mut LinkAnimationHeader {
    return D_80853914[(*this).modelAnimType as usize];
}
#[no_mangle]
pub unsafe extern "C" fn func_80833350(mut this: *mut Player) -> s32 {
    let mut entry: *mut *mut LinkAnimationHeader =
        0 as *mut *mut LinkAnimationHeader;
    let mut i: s32 = 0;
    if func_80833338(this) !=
           (*this).skelAnime.animation as *mut LinkAnimationHeader {
        i = 0 as libc::c_int;
        entry =
            &mut *(*D_80853D7C.as_mut_ptr().offset(0 as libc::c_int as
                                                       isize)).as_mut_ptr().offset(0
                                                                                       as
                                                                                       libc::c_int
                                                                                       as
                                                                                       isize)
                as *mut *mut LinkAnimationHeader;
        while i < 28 as libc::c_int {
            if (*this).skelAnime.animation == *entry as *mut libc::c_void {
                return i + 1 as libc::c_int
            }
            i += 1;
            entry = entry.offset(1)
        }
        return 0 as libc::c_int
    }
    return -(1 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn func_808333FC(mut this: *mut Player, mut arg1: s32) {
    if D_80853E7C[arg1 as usize] as libc::c_int != 0 as libc::c_int {
        func_80832924(this,
                      D_80853E50[(D_80853E7C[arg1 as usize] as libc::c_int -
                                      1 as libc::c_int) as usize]);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80833438(mut this: *mut Player)
 -> *mut LinkAnimationHeader {
    if (*this).unk_890 as libc::c_int != 0 as libc::c_int {
        return D_8085395C[(*this).modelAnimType as usize]
    } else if (*this).stateFlags1 & 0x28000000 as libc::c_int as libc::c_uint
                  == 0 &&
                  (*this).currentBoots as libc::c_int ==
                      PLAYER_BOOTS_IRON as libc::c_int {
        return D_80853974[(*this).modelAnimType as usize]
    } else { return D_80853944[(*this).modelAnimType as usize] };
}
#[no_mangle]
pub unsafe extern "C" fn func_808334B4(mut this: *mut Player) -> s32 {
    return (func_808332E4(this) != 0 &&
                (*this).unk_834 as libc::c_int != 0 as libc::c_int) as
               libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_808334E4(mut this: *mut Player)
 -> *mut LinkAnimationHeader {
    if func_808334B4(this) != 0 {
        return &mut gPlayerAnim_002638
    } else { return D_808539A4[(*this).modelAnimType as usize] };
}
#[no_mangle]
pub unsafe extern "C" fn func_80833528(mut this: *mut Player)
 -> *mut LinkAnimationHeader {
    if func_808334B4(this) != 0 {
        return &mut gPlayerAnim_002630
    } else { return D_8085398C[(*this).modelAnimType as usize] };
}
#[no_mangle]
pub unsafe extern "C" fn func_8083356C(mut this: *mut Player)
 -> *mut LinkAnimationHeader {
    if func_8002DD78(this) != 0 {
        return &mut gPlayerAnim_0026E8
    } else { return D_80853B3C[(*this).modelAnimType as usize] };
}
#[no_mangle]
pub unsafe extern "C" fn func_808335B0(mut this: *mut Player)
 -> *mut LinkAnimationHeader {
    if func_808334B4(this) != 0 {
        return &mut gPlayerAnim_002620
    } else { return D_80853B6C[(*this).modelAnimType as usize] };
}
#[no_mangle]
pub unsafe extern "C" fn func_808335F4(mut this: *mut Player)
 -> *mut LinkAnimationHeader {
    if func_808334B4(this) != 0 {
        return &mut gPlayerAnim_002618
    } else { return D_80853B54[(*this).modelAnimType as usize] };
}
#[no_mangle]
pub unsafe extern "C" fn func_80833638(mut this: *mut Player,
                                       mut arg1: PlayerFunc82C) {
    (*this).func_82C = arg1;
    (*this).unk_836 = 0 as libc::c_int as s8;
    (*this).unk_830 = 0.0f32;
    func_808326F0(this);
}
#[no_mangle]
pub unsafe extern "C" fn func_80833664(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut actionParam: s8) {
    let mut current: *mut LinkAnimationHeader =
        (*this).skelAnime.animation as *mut LinkAnimationHeader;
    let mut iter: *mut *mut LinkAnimationHeader =
        &mut *D_80853914.as_mut_ptr().offset((*this).modelAnimType as isize)
            as *mut *mut LinkAnimationHeader;
    let mut i: u32_0 = 0;
    (*this).stateFlags1 &= !(0x1000008 as libc::c_int) as libc::c_uint;
    i = 0 as libc::c_int as u32_0;
    while i < 45 as libc::c_int as libc::c_uint {
        if current == *iter { break ; }
        iter = iter.offset(6 as libc::c_int as isize);
        i = i.wrapping_add(1)
    }
    func_8083399C(globalCtx, this, actionParam);
    if i < 45 as libc::c_int as libc::c_uint {
        (*this).skelAnime.animation =
            D_80853914[i.wrapping_mul(6 as libc::c_int as
                                          libc::c_uint).wrapping_add((*this).modelAnimType
                                                                         as
                                                                         libc::c_uint)
                           as usize] as *mut libc::c_void
    };
}
#[no_mangle]
pub unsafe extern "C" fn Player_ItemToActionParam(mut item: s32) -> s8 {
    if item >= ITEM_NONE_FE as libc::c_int {
        return PLAYER_AP_NONE as libc::c_int as s8
    } else if item == ITEM_LAST_USED as libc::c_int {
        return PLAYER_AP_LAST_USED as libc::c_int as s8
    } else if item == ITEM_FISHING_POLE as libc::c_int {
        return PLAYER_AP_FISHING_POLE as libc::c_int as s8
    } else { return sItemActionParams[item as usize] };
}
// size = 0x0A
#[no_mangle]
pub unsafe extern "C" fn func_80833770(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
}
#[no_mangle]
pub unsafe extern "C" fn func_8083377C(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    (*this).unk_85C = 1.0f32;
}
#[no_mangle]
pub unsafe extern "C" fn func_80833790(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
}
#[no_mangle]
pub unsafe extern "C" fn func_8083379C(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    (*this).stateFlags1 |= 8 as libc::c_int as libc::c_uint;
    if (*this).heldItemActionParam as libc::c_int !=
           PLAYER_AP_SLINGSHOT as libc::c_int {
        (*this).unk_860 = -(1 as libc::c_int) as s16
    } else { (*this).unk_860 = -(2 as libc::c_int) as s16 };
}
#[no_mangle]
pub unsafe extern "C" fn func_808337D4(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    let mut explosiveType: s32 = 0;
    let mut explosiveInfo: *mut ExplosiveInfo = 0 as *mut ExplosiveInfo;
    let mut spawnedActor: *mut Actor = 0 as *mut Actor;
    if (*this).stateFlags1 & 0x800 as libc::c_int as libc::c_uint != 0 {
        func_80832528(globalCtx, this);
        return
    }
    explosiveType = Player_GetExplosiveHeld(this);
    explosiveInfo =
        &mut *sExplosiveInfos.as_mut_ptr().offset(explosiveType as isize) as
            *mut ExplosiveInfo;
    spawnedActor =
        Actor_SpawnAsChild(&mut (*globalCtx).actorCtx, &mut (*this).actor,
                           globalCtx, (*explosiveInfo).actorId,
                           (*this).actor.world.pos.x,
                           (*this).actor.world.pos.y,
                           (*this).actor.world.pos.z, 0 as libc::c_int as s16,
                           (*this).actor.shape.rot.y, 0 as libc::c_int as s16,
                           0 as libc::c_int as s16);
    if !spawnedActor.is_null() {
        if explosiveType != 0 as libc::c_int &&
               (*globalCtx).bombchuBowlingStatus as libc::c_int !=
                   0 as libc::c_int {
            (*globalCtx).bombchuBowlingStatus -= 1;
            if (*globalCtx).bombchuBowlingStatus as libc::c_int ==
                   0 as libc::c_int {
                (*globalCtx).bombchuBowlingStatus = -(1 as libc::c_int) as s8
            }
        } else {
            Inventory_ChangeAmmo((*explosiveInfo).itemId as s16,
                                 -(1 as libc::c_int) as s16);
        }
        (*this).interactRangeActor = spawnedActor;
        (*this).heldActor = spawnedActor;
        (*this).getItemId = GI_NONE as libc::c_int as s8;
        (*this).unk_3BC.y =
            ((*spawnedActor).shape.rot.y as libc::c_int -
                 (*this).actor.shape.rot.y as libc::c_int) as s16;
        (*this).stateFlags1 |= 0x800 as libc::c_int as libc::c_uint
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80833910(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    (*this).stateFlags1 |= 8 as libc::c_int as libc::c_uint;
    (*this).unk_860 = -(3 as libc::c_int) as s16;
    (*this).heldActor =
        Actor_SpawnAsChild(&mut (*globalCtx).actorCtx, &mut (*this).actor,
                           globalCtx, ACTOR_ARMS_HOOK as libc::c_int as s16,
                           (*this).actor.world.pos.x,
                           (*this).actor.world.pos.y,
                           (*this).actor.world.pos.z, 0 as libc::c_int as s16,
                           (*this).actor.shape.rot.y, 0 as libc::c_int as s16,
                           0 as libc::c_int as s16);
}
#[no_mangle]
pub unsafe extern "C" fn func_80833984(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    (*this).stateFlags1 |= 0x1000000 as libc::c_int as libc::c_uint;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083399C(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut actionParam: s8) {
    (*this).unk_860 = 0 as libc::c_int as s16;
    (*this).unk_85C = 0.0f32;
    (*this).unk_858 = 0.0f32;
    (*this).itemActionParam = actionParam;
    (*this).heldItemActionParam = (*this).itemActionParam;
    (*this).modelGroup = (*this).nextModelGroup;
    (*this).stateFlags1 &= !(0x1000008 as libc::c_int) as libc::c_uint;
    D_80853FE8[actionParam as
                   usize].expect("non-null function pointer")(globalCtx,
                                                              this);
    Player_SetModelGroup(this, (*this).modelGroup as s32);
}
#[no_mangle]
pub unsafe extern "C" fn func_80833A20(mut this: *mut Player,
                                       mut newSwordState: s32) {
    let mut itemSfx: u16_0 = 0;
    let mut voiceSfx: u16_0 = 0;
    if (*this).swordState as libc::c_int == 0 as libc::c_int {
        if (*this).heldItemActionParam as libc::c_int ==
               PLAYER_AP_SWORD_BGS as libc::c_int &&
               gSaveContext.swordHealth as libc::c_int as libc::c_float >
                   0.0f32 {
            itemSfx = 0x1812 as libc::c_int as u16_0
        } else { itemSfx = 0x1801 as libc::c_int as u16_0 }
        voiceSfx = 0x6800 as libc::c_int as u16_0;
        if (*this).heldItemActionParam as libc::c_int ==
               PLAYER_AP_HAMMER as libc::c_int {
            itemSfx = 0x1812 as libc::c_int as u16_0
        } else if (*this).swordAnimation as libc::c_int >= 0x18 as libc::c_int
         {
            itemSfx = 0 as libc::c_int as u16_0;
            voiceSfx = 0x6801 as libc::c_int as u16_0
        } else if (*this).unk_845 as libc::c_int >= 3 as libc::c_int {
            itemSfx = 0x1818 as libc::c_int as u16_0;
            voiceSfx = 0x6801 as libc::c_int as u16_0
        }
        if itemSfx as libc::c_int != 0 as libc::c_int {
            func_808328EC(this, itemSfx);
        }
        if ((*this).swordAnimation as libc::c_int) < 0x10 as libc::c_int ||
               (*this).swordAnimation as libc::c_int >= 0x14 as libc::c_int {
            func_80832698(this, voiceSfx);
        }
    }
    (*this).swordState = newSwordState as s8;
}
#[no_mangle]
pub unsafe extern "C" fn func_80833B2C(mut this: *mut Player) -> s32 {
    if (*this).stateFlags1 & 0x40030000 as libc::c_int as libc::c_uint != 0 {
        return 1 as libc::c_int
    } else { return 0 as libc::c_int };
}
#[no_mangle]
pub unsafe extern "C" fn func_80833B54(mut this: *mut Player) -> s32 {
    if !(*this).unk_664.is_null() &&
           (*(*this).unk_664).flags &
               ((1 as libc::c_int) << 0 as libc::c_int |
                    (1 as libc::c_int) << 2 as libc::c_int) as libc::c_uint ==
               ((1 as libc::c_int) << 0 as libc::c_int |
                    (1 as libc::c_int) << 2 as libc::c_int) as libc::c_uint {
        (*this).stateFlags1 |= 0x10 as libc::c_int as libc::c_uint;
        return 1 as libc::c_int
    }
    if (*this).stateFlags1 & 0x10 as libc::c_int as libc::c_uint != 0 {
        (*this).stateFlags1 &= !(0x10 as libc::c_int) as libc::c_uint;
        if (*this).linearVelocity == 0.0f32 {
            (*this).currentYaw = (*this).actor.shape.rot.y
        }
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80833BCC(mut this: *mut Player) -> s32 {
    return (func_8008E9C4(this) != 0 || func_80833B2C(this) != 0) as
               libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80833C04(mut this: *mut Player) -> s32 {
    return (func_80833B54(this) != 0 || func_80833B2C(this) != 0) as
               libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80833C3C(mut this: *mut Player) {
    (*this).unk_874 = 0.0f32;
    (*this).unk_870 = (*this).unk_874;
}
#[no_mangle]
pub unsafe extern "C" fn func_80833C50(mut this: *mut Player, mut item: s32)
 -> s32 {
    if item < ITEM_NONE_FE as libc::c_int &&
           Player_ItemToActionParam(item) as libc::c_int ==
               (*this).itemActionParam as libc::c_int {
        return 1 as libc::c_int
    } else { return 0 as libc::c_int };
}
#[no_mangle]
pub unsafe extern "C" fn func_80833C98(mut item1: s32, mut actionParam: s32)
 -> s32 {
    if item1 < ITEM_NONE_FE as libc::c_int &&
           Player_ItemToActionParam(item1) as libc::c_int == actionParam {
        return 1 as libc::c_int
    } else { return 0 as libc::c_int };
}
#[no_mangle]
pub unsafe extern "C" fn func_80833CDC(mut globalCtx: *mut GlobalContext,
                                       mut index: s32) -> s32 {
    if index >= 4 as libc::c_int {
        return ITEM_NONE as libc::c_int
    } else if (*globalCtx).bombchuBowlingStatus as libc::c_int !=
                  0 as libc::c_int {
        return if (*globalCtx).bombchuBowlingStatus as libc::c_int >
                      0 as libc::c_int {
                   ITEM_BOMBCHU as libc::c_int
               } else { ITEM_NONE as libc::c_int }
    } else if index == 0 as libc::c_int {
        return if gSaveContext.buttonStatus[0 as libc::c_int as usize] as
                      libc::c_int == ITEM_NONE as libc::c_int {
                   ITEM_NONE as libc::c_int
               } else if gSaveContext.equips.buttonItems[0 as libc::c_int as
                                                             usize] as
                             libc::c_int == ITEM_SWORD_KNIFE as libc::c_int {
                   ITEM_SWORD_BGS as libc::c_int
               } else {
                   gSaveContext.equips.buttonItems[0 as libc::c_int as usize]
                       as libc::c_int
               }
    } else if index == 1 as libc::c_int {
        return if gSaveContext.buttonStatus[(0 as libc::c_int +
                                                 1 as libc::c_int) as usize]
                      as libc::c_int != BTN_DISABLED as libc::c_int {
                   gSaveContext.equips.buttonItems[(0 as libc::c_int +
                                                        1 as libc::c_int) as
                                                       usize] as libc::c_int
               } else { ITEM_NONE as libc::c_int }
    } else if index == 2 as libc::c_int {
        return if gSaveContext.buttonStatus[(1 as libc::c_int +
                                                 1 as libc::c_int) as usize]
                      as libc::c_int != BTN_DISABLED as libc::c_int {
                   gSaveContext.equips.buttonItems[(1 as libc::c_int +
                                                        1 as libc::c_int) as
                                                       usize] as libc::c_int
               } else { ITEM_NONE as libc::c_int }
    } else {
        return if gSaveContext.buttonStatus[(2 as libc::c_int +
                                                 1 as libc::c_int) as usize]
                      as libc::c_int != BTN_DISABLED as libc::c_int {
                   gSaveContext.equips.buttonItems[(2 as libc::c_int +
                                                        1 as libc::c_int) as
                                                       usize] as libc::c_int
               } else { ITEM_NONE as libc::c_int }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80833DF8(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut maskActionParam: s32 = 0;
    let mut item: s32 = 0;
    let mut i: s32 = 0;
    if (*this).currentMask as libc::c_int != PLAYER_MASK_NONE as libc::c_int {
        maskActionParam =
            (*this).currentMask as libc::c_int - 1 as libc::c_int +
                PLAYER_AP_MASK_KEATON as libc::c_int;
        if func_80833C98((if gSaveContext.buttonStatus[(0 as libc::c_int +
                                                            1 as libc::c_int)
                                                           as usize] as
                                 libc::c_int != BTN_DISABLED as libc::c_int {
                              gSaveContext.equips.buttonItems[(0 as
                                                                   libc::c_int
                                                                   +
                                                                   1 as
                                                                       libc::c_int)
                                                                  as usize] as
                                  libc::c_int
                          } else { ITEM_NONE as libc::c_int }),
                         maskActionParam) == 0 &&
               func_80833C98((if gSaveContext.buttonStatus[(1 as libc::c_int +
                                                                1 as
                                                                    libc::c_int)
                                                               as usize] as
                                     libc::c_int !=
                                     BTN_DISABLED as libc::c_int {
                                  gSaveContext.equips.buttonItems[(1 as
                                                                       libc::c_int
                                                                       +
                                                                       1 as
                                                                           libc::c_int)
                                                                      as
                                                                      usize]
                                      as libc::c_int
                              } else { ITEM_NONE as libc::c_int }),
                             maskActionParam) == 0 &&
               func_80833C98((if gSaveContext.buttonStatus[(2 as libc::c_int +
                                                                1 as
                                                                    libc::c_int)
                                                               as usize] as
                                     libc::c_int !=
                                     BTN_DISABLED as libc::c_int {
                                  gSaveContext.equips.buttonItems[(2 as
                                                                       libc::c_int
                                                                       +
                                                                       1 as
                                                                           libc::c_int)
                                                                      as
                                                                      usize]
                                      as libc::c_int
                              } else { ITEM_NONE as libc::c_int }),
                             maskActionParam) == 0 {
            (*this).currentMask = PLAYER_MASK_NONE as libc::c_int as u8_0
        }
    }
    if (*this).stateFlags1 & 0x20000800 as libc::c_int as libc::c_uint == 0 &&
           func_8008F128(this) == 0 {
        if (*this).itemActionParam as libc::c_int >=
               PLAYER_AP_FISHING_POLE as libc::c_int {
            if func_80833C50(this,
                             (if gSaveContext.buttonStatus[0 as libc::c_int as
                                                               usize] as
                                     libc::c_int == ITEM_NONE as libc::c_int {
                                  ITEM_NONE as libc::c_int
                              } else {
                                  (if gSaveContext.equips.buttonItems[0 as
                                                                          libc::c_int
                                                                          as
                                                                          usize]
                                          as libc::c_int ==
                                          ITEM_SWORD_KNIFE as libc::c_int {
                                       ITEM_SWORD_BGS as libc::c_int
                                   } else {
                                       gSaveContext.equips.buttonItems[0 as
                                                                           libc::c_int
                                                                           as
                                                                           usize]
                                           as libc::c_int
                                   })
                              })) == 0 &&
                   func_80833C50(this,
                                 (if gSaveContext.buttonStatus[(0 as
                                                                    libc::c_int
                                                                    +
                                                                    1 as
                                                                        libc::c_int)
                                                                   as usize]
                                         as libc::c_int !=
                                         BTN_DISABLED as libc::c_int {
                                      gSaveContext.equips.buttonItems[(0 as
                                                                           libc::c_int
                                                                           +
                                                                           1
                                                                               as
                                                                               libc::c_int)
                                                                          as
                                                                          usize]
                                          as libc::c_int
                                  } else { ITEM_NONE as libc::c_int })) == 0
                   &&
                   func_80833C50(this,
                                 (if gSaveContext.buttonStatus[(1 as
                                                                    libc::c_int
                                                                    +
                                                                    1 as
                                                                        libc::c_int)
                                                                   as usize]
                                         as libc::c_int !=
                                         BTN_DISABLED as libc::c_int {
                                      gSaveContext.equips.buttonItems[(1 as
                                                                           libc::c_int
                                                                           +
                                                                           1
                                                                               as
                                                                               libc::c_int)
                                                                          as
                                                                          usize]
                                          as libc::c_int
                                  } else { ITEM_NONE as libc::c_int })) == 0
                   &&
                   func_80833C50(this,
                                 (if gSaveContext.buttonStatus[(2 as
                                                                    libc::c_int
                                                                    +
                                                                    1 as
                                                                        libc::c_int)
                                                                   as usize]
                                         as libc::c_int !=
                                         BTN_DISABLED as libc::c_int {
                                      gSaveContext.equips.buttonItems[(2 as
                                                                           libc::c_int
                                                                           +
                                                                           1
                                                                               as
                                                                               libc::c_int)
                                                                          as
                                                                          usize]
                                          as libc::c_int
                                  } else { ITEM_NONE as libc::c_int })) == 0 {
                func_80835F44(globalCtx, this, ITEM_NONE as libc::c_int);
                return
            }
        }
        i = 0 as libc::c_int;
        while i <
                  (::std::mem::size_of::<[u16_0; 4]>() as
                       libc::c_ulong).wrapping_div(::std::mem::size_of::<u16_0>()
                                                       as libc::c_ulong) as
                      s32 {
            if !((*sControlInput).press.button as libc::c_int |
                     !(D_80854388[i as usize] as libc::c_int)) ==
                   0 as libc::c_int {
                break ;
            }
            i += 1
        }
        item = func_80833CDC(globalCtx, i);
        if item >= ITEM_NONE_FE as libc::c_int {
            i = 0 as libc::c_int;
            while i <
                      (::std::mem::size_of::<[u16_0; 4]>() as
                           libc::c_ulong).wrapping_div(::std::mem::size_of::<u16_0>()
                                                           as libc::c_ulong)
                          as s32 {
                if !((*sControlInput).cur.button as libc::c_int |
                         !(D_80854388[i as usize] as libc::c_int)) ==
                       0 as libc::c_int {
                    break ;
                }
                i += 1
            }
            item = func_80833CDC(globalCtx, i);
            if item < ITEM_NONE_FE as libc::c_int &&
                   Player_ItemToActionParam(item) as libc::c_int ==
                       (*this).heldItemActionParam as libc::c_int {
                D_80853618 = 1 as libc::c_int
            }
        } else {
            (*this).heldItemButton = i as s8;
            func_80835F44(globalCtx, this, item);
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_808340DC(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut anim: *mut LinkAnimationHeader = 0 as *mut LinkAnimationHeader;
    let mut phi_f2: f32_0 = 0.;
    let mut phi_f12: f32_0 = 0.;
    let mut phi_f14: f32_0 = 0.;
    let mut phi_f0: f32_0 = 0.;
    let mut sp38: s32 = 0;
    let mut sp37: s8 = 0;
    let mut temp: s32 = 0;
    sp37 = Player_ItemToActionParam((*this).heldItemId as s32);
    func_80833638(this,
                  Some(func_80834A2C as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext)
                               -> s32));
    temp =
        (*gPlayerModelTypes.as_mut_ptr().offset((*this).nextModelGroup as
                                                    isize))[0 as libc::c_int
                                                                as usize] as
            s32;
    sp38 =
        D_80854164[(*gPlayerModelTypes.as_mut_ptr().offset((*this).modelGroup
                                                               as
                                                               isize))[0 as
                                                                           libc::c_int
                                                                           as
                                                                           usize]
                       as usize][temp as usize] as s32;
    if sp37 as libc::c_int == PLAYER_AP_BOTTLE as libc::c_int ||
           sp37 as libc::c_int == PLAYER_AP_BOOMERANG as libc::c_int ||
           sp37 as libc::c_int == PLAYER_AP_NONE as libc::c_int &&
               ((*this).heldItemActionParam as libc::c_int ==
                    PLAYER_AP_BOTTLE as libc::c_int ||
                    (*this).heldItemActionParam as libc::c_int ==
                        PLAYER_AP_BOOMERANG as libc::c_int) {
        sp38 =
            if sp37 as libc::c_int == PLAYER_AP_NONE as libc::c_int {
                -(13 as libc::c_int)
            } else { 13 as libc::c_int }
    }
    (*this).unk_15A =
        if sp38 >= 0 as libc::c_int { sp38 } else { -sp38 } as s8;
    anim = D_808540F4[(*this).unk_15A as usize].anim;
    if anim == &mut gPlayerAnim_002F30 as *mut LinkAnimationHeader &&
           (*this).currentShield as libc::c_int ==
               PLAYER_SHIELD_NONE as libc::c_int {
        anim = &mut gPlayerAnim_002F40
    }
    phi_f2 = Animation_GetLastFrame(anim as *mut libc::c_void) as f32_0;
    phi_f14 = phi_f2;
    if sp38 >= 0 as libc::c_int {
        phi_f0 = 1.2f32;
        phi_f12 = 0.0f32
    } else { phi_f14 = 0.0f32; phi_f0 = -1.2f32; phi_f12 = phi_f2 }
    if sp37 as libc::c_int != PLAYER_AP_NONE as libc::c_int {
        phi_f0 *= 2.0f32
    }
    LinkAnimation_Change(globalCtx, &mut (*this).skelAnime2, anim, phi_f0,
                         phi_f12, phi_f14,
                         ANIMMODE_ONCE as libc::c_int as u8_0, 0.0f32);
    (*this).stateFlags1 &= !(0x100 as libc::c_int) as libc::c_uint;
}
#[no_mangle]
pub unsafe extern "C" fn func_80834298(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    if (*this).actor.category as libc::c_int == ACTORCAT_PLAYER as libc::c_int
           && (*this).stateFlags1 & 0x100 as libc::c_int as libc::c_uint == 0
           &&
           ((*this).heldItemActionParam as libc::c_int ==
                (*this).itemActionParam as libc::c_int ||
                (*this).stateFlags1 & 0x400000 as libc::c_int as libc::c_uint
                    != 0) &&
           gSaveContext.health as libc::c_int != 0 as libc::c_int &&
           (*globalCtx).csCtx.state as libc::c_int ==
               CS_STATE_IDLE as libc::c_int &&
           (*this).csMode as libc::c_int == 0 as libc::c_int &&
           (*globalCtx).shootingGalleryStatus as libc::c_int ==
               0 as libc::c_int &&
           (*globalCtx).activeCamera as libc::c_int == 0 as libc::c_int &&
           (*globalCtx).sceneLoadFlag as libc::c_int != 0x14 as libc::c_int &&
           gSaveContext.timer1State as libc::c_int != 10 as libc::c_int {
        func_80833DF8(this, globalCtx);
    }
    if (*this).stateFlags1 & 0x100 as libc::c_int as libc::c_uint != 0 {
        func_808340DC(this, globalCtx);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80834380(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut itemPtr: *mut s32,
                                       mut typePtr: *mut s32) -> s32 {
    if gSaveContext.linkAge == 0 as libc::c_int {
        *itemPtr = ITEM_BOW as libc::c_int;
        if (*this).stateFlags1 & 0x800000 as libc::c_int as libc::c_uint != 0
           {
            *typePtr = ARROW_NORMAL_HORSE as libc::c_int
        } else {
            *typePtr =
                (*this).heldItemActionParam as libc::c_int - 6 as libc::c_int
        }
    } else {
        *itemPtr = ITEM_SLINGSHOT as libc::c_int;
        *typePtr = ARROW_SEED as libc::c_int
    }
    if gSaveContext.minigameState as libc::c_int == 1 as libc::c_int {
        return (*globalCtx).interfaceCtx.hbaAmmo as s32
    } else if (*globalCtx).shootingGalleryStatus as libc::c_int !=
                  0 as libc::c_int {
        return (*globalCtx).shootingGalleryStatus as s32
    } else {
        return gSaveContext.inventory.ammo[gItemSlots[*itemPtr as usize] as
                                               usize] as s32
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8083442C(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    let mut item: s32 = 0;
    let mut arrowType: s32 = 0;
    let mut magicArrowType: s32 = 0;
    if (*this).heldItemActionParam as libc::c_int >=
           PLAYER_AP_BOW_FIRE as libc::c_int &&
           (*this).heldItemActionParam as libc::c_int <=
               PLAYER_AP_BOW_0E as libc::c_int &&
           gSaveContext.unk_13F0 as libc::c_int != 0 as libc::c_int {
        func_80078884(0x4806 as libc::c_int as u16_0);
    } else {
        func_80833638(this,
                      Some(func_808351D4 as
                               unsafe extern "C" fn(_: *mut Player,
                                                    _: *mut GlobalContext)
                                   -> s32));
        (*this).stateFlags1 |= 0x200 as libc::c_int as libc::c_uint;
        (*this).unk_834 = 14 as libc::c_int as s16;
        if (*this).unk_860 as libc::c_int >= 0 as libc::c_int {
            func_8002F7DC(&mut (*this).actor,
                          D_80854398[((if (*this).unk_860 as libc::c_int >=
                                              0 as libc::c_int {
                                           (*this).unk_860 as libc::c_int
                                       } else {
                                           -((*this).unk_860 as libc::c_int)
                                       }) - 1 as libc::c_int) as usize]);
            if Player_HoldsHookshot(this) == 0 &&
                   func_80834380(globalCtx, this, &mut item, &mut arrowType) >
                       0 as libc::c_int {
                magicArrowType = arrowType - ARROW_FIRE as libc::c_int;
                if (*this).unk_860 as libc::c_int >= 0 as libc::c_int {
                    if magicArrowType >= 0 as libc::c_int &&
                           magicArrowType <= 2 as libc::c_int &&
                           func_80087708(globalCtx,
                                         sMagicArrowCosts[magicArrowType as
                                                              usize] as s16,
                                         0 as libc::c_int as s16) == 0 {
                        arrowType = ARROW_NORMAL as libc::c_int
                    }
                    (*this).heldActor =
                        Actor_SpawnAsChild(&mut (*globalCtx).actorCtx,
                                           &mut (*this).actor, globalCtx,
                                           ACTOR_EN_ARROW as libc::c_int as
                                               s16, (*this).actor.world.pos.x,
                                           (*this).actor.world.pos.y,
                                           (*this).actor.world.pos.z,
                                           0 as libc::c_int as s16,
                                           (*this).actor.shape.rot.y,
                                           0 as libc::c_int as s16,
                                           arrowType as s16)
                }
            }
        }
        return 1 as libc::c_int
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80834594(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    if (*this).heldItemActionParam as libc::c_int !=
           PLAYER_AP_NONE as libc::c_int {
        if func_8008F2BC(this, (*this).heldItemActionParam as s32) >=
               0 as libc::c_int {
            func_808328EC(this, 0x1802 as libc::c_int as u16_0);
        } else { func_808328EC(this, 0x835 as libc::c_int as u16_0); }
    }
    func_80835F44(globalCtx, this, (*this).heldItemId as s32);
    if func_8008F2BC(this, (*this).heldItemActionParam as s32) >=
           0 as libc::c_int {
        func_808328EC(this, 0x1803 as libc::c_int as u16_0);
    } else if (*this).heldItemActionParam as libc::c_int !=
                  PLAYER_AP_NONE as libc::c_int {
        func_808328EC(this, 0x835 as libc::c_int as u16_0);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80834644(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    if Some(func_80834A2C as
                unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                    -> s32) == (*this).func_82C {
        func_80834594(globalCtx, this);
    }
    func_80833638(this, D_80853EDC[(*this).heldItemActionParam as usize]);
    (*this).unk_834 = 0 as libc::c_int as s16;
    (*this).unk_6AC = 0 as libc::c_int as s8;
    func_808323B4(globalCtx, this);
    (*this).stateFlags1 &= !(0x100 as libc::c_int) as libc::c_uint;
}
#[no_mangle]
pub unsafe extern "C" fn func_808346C4(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player)
 -> *mut LinkAnimationHeader {
    func_80833638(this,
                  Some(func_80834B5C as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext)
                               -> s32));
    func_808323B4(globalCtx, this);
    if (*this).unk_870 < 0.5f32 {
        return D_808543A4[Player_HoldsTwoHandedWeapon(this) as usize]
    } else { return D_808543AC[Player_HoldsTwoHandedWeapon(this) as usize] };
}
#[no_mangle]
pub unsafe extern "C" fn func_80834758(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) -> s32 {
    let mut anim: *mut LinkAnimationHeader = 0 as *mut LinkAnimationHeader;
    let mut frame: f32_0 = 0.;
    if (*this).stateFlags1 & 0x20c00000 as libc::c_int as libc::c_uint == 0 &&
           (*globalCtx).shootingGalleryStatus as libc::c_int ==
               0 as libc::c_int &&
           (*this).heldItemActionParam as libc::c_int ==
               (*this).itemActionParam as libc::c_int &&
           (*this).currentShield as libc::c_int !=
               PLAYER_SHIELD_NONE as libc::c_int &&
           Player_IsChildWithHylianShield(this) == 0 &&
           func_80833BCC(this) != 0 &&
           !((*sControlInput).cur.button as libc::c_int |
                 !(0x10 as libc::c_int)) == 0 as libc::c_int {
        anim = func_808346C4(globalCtx, this);
        frame = Animation_GetLastFrame(anim as *mut libc::c_void) as f32_0;
        LinkAnimation_Change(globalCtx, &mut (*this).skelAnime2, anim, 1.0f32,
                             frame, frame,
                             ANIMMODE_ONCE as libc::c_int as u8_0, 0.0f32);
        func_8002F7DC(&mut (*this).actor, 0x181f as libc::c_int as u16_0);
        return 1 as libc::c_int
    } else { return 0 as libc::c_int };
}
#[no_mangle]
pub unsafe extern "C" fn func_8083485C(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    if func_80834758(globalCtx, this) != 0 {
        return 1 as libc::c_int
    } else { return 0 as libc::c_int };
}
#[no_mangle]
pub unsafe extern "C" fn func_80834894(mut this: *mut Player) {
    func_80833638(this,
                  Some(func_80834C74 as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext)
                               -> s32));
    if ((*this).itemActionParam as libc::c_int) < 0 as libc::c_int {
        func_8008EC70(this);
    }
    Animation_Reverse(&mut (*this).skelAnime2);
    func_8002F7DC(&mut (*this).actor, 0x1826 as libc::c_int as u16_0);
}
#[no_mangle]
pub unsafe extern "C" fn func_808348EC(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    let mut ptr: *mut struct_808540F4 =
        &mut *D_808540F4.as_mut_ptr().offset((*this).unk_15A as isize) as
            *mut struct_808540F4;
    let mut temp: f32_0 = 0.;
    temp = (*ptr).unk_04 as f32_0;
    temp =
        if (*this).skelAnime2.playSpeed < 0.0f32 {
            (temp) - 1.0f32
        } else { temp };
    if LinkAnimation_OnFrame(&mut (*this).skelAnime2, temp) != 0 {
        func_80834594(globalCtx, this);
    }
    func_80833B54(this);
}
#[no_mangle]
pub unsafe extern "C" fn func_8083499C(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    if (*this).stateFlags1 & 0x100 as libc::c_int as libc::c_uint != 0 {
        func_808340DC(this, globalCtx);
    } else { return 0 as libc::c_int }
    return 1 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_808349DC(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    if func_80834758(globalCtx, this) != 0 ||
           func_8083499C(this, globalCtx) != 0 {
        return 1 as libc::c_int
    } else { return 0 as libc::c_int };
}
#[no_mangle]
pub unsafe extern "C" fn func_80834A2C(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime2) != 0 ||
           Player_ItemToActionParam((*this).heldItemId as s32) as libc::c_int
               == (*this).heldItemActionParam as libc::c_int &&
               {
                   D_80853614 =
                       (D_80853614 != 0 ||
                            (*this).modelAnimType as libc::c_int !=
                                3 as libc::c_int &&
                                (*globalCtx).shootingGalleryStatus as
                                    libc::c_int == 0 as libc::c_int) as
                           libc::c_int;
                   (D_80853614) != 0
               } {
        func_80833638(this, D_80853EDC[(*this).heldItemActionParam as usize]);
        (*this).unk_834 = 0 as libc::c_int as s16;
        (*this).unk_6AC = 0 as libc::c_int as s8;
        D_80853618 = D_80853614;
        return (*this).func_82C.expect("non-null function pointer")(this,
                                                                    globalCtx)
    }
    if func_80833350(this) != 0 as libc::c_int {
        func_808348EC(globalCtx, this);
        func_80832264(globalCtx, this, func_80833338(this));
        (*this).unk_6AC = 0 as libc::c_int as s8
    } else { func_808348EC(globalCtx, this); }
    return 1 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80834B5C(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    LinkAnimation_Update(globalCtx, &mut (*this).skelAnime2);
    if !(!((*sControlInput).cur.button as libc::c_int |
               !(0x10 as libc::c_int)) == 0 as libc::c_int) {
        func_80834894(this);
        return 1 as libc::c_int
    } else {
        (*this).stateFlags1 |= 0x400000 as libc::c_int as libc::c_uint;
        Player_SetModelsForHoldingShield(this);
        return 1 as libc::c_int
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80834BD4(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    let mut anim: *mut LinkAnimationHeader = 0 as *mut LinkAnimationHeader;
    let mut frame: f32_0 = 0.;
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime2) != 0 {
        anim = func_808346C4(globalCtx, this);
        frame = Animation_GetLastFrame(anim as *mut libc::c_void) as f32_0;
        LinkAnimation_Change(globalCtx, &mut (*this).skelAnime2, anim, 1.0f32,
                             frame, frame,
                             ANIMMODE_ONCE as libc::c_int as u8_0, 0.0f32);
    }
    (*this).stateFlags1 |= 0x400000 as libc::c_int as libc::c_uint;
    Player_SetModelsForHoldingShield(this);
    return 1 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80834C74(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    D_80853614 = D_80853618;
    if D_80853614 != 0 ||
           LinkAnimation_Update(globalCtx, &mut (*this).skelAnime2) != 0 {
        func_80833638(this, D_80853EDC[(*this).heldItemActionParam as usize]);
        LinkAnimation_PlayLoop(globalCtx, &mut (*this).skelAnime2,
                               D_80853914[(*this).modelAnimType as usize]);
        (*this).unk_6AC = 0 as libc::c_int as s8;
        (*this).func_82C.expect("non-null function pointer")(this, globalCtx);
        return 0 as libc::c_int
    }
    return 1 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80834D2C(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    let mut anim: *mut LinkAnimationHeader = 0 as *mut LinkAnimationHeader;
    if (*this).heldItemActionParam as libc::c_int !=
           PLAYER_AP_BOOMERANG as libc::c_int {
        if func_8083442C(this, globalCtx) == 0 { return 0 as libc::c_int }
        if Player_HoldsHookshot(this) == 0 {
            anim = &mut gPlayerAnim_0026A0
        } else { anim = &mut gPlayerAnim_002CA0 }
        LinkAnimation_PlayOnce(globalCtx, &mut (*this).skelAnime2, anim);
    } else {
        func_80833638(this,
                      Some(func_80835884 as
                               unsafe extern "C" fn(_: *mut Player,
                                                    _: *mut GlobalContext)
                                   -> s32));
        (*this).unk_834 = 10 as libc::c_int as s16;
        LinkAnimation_PlayOnce(globalCtx, &mut (*this).skelAnime2,
                               &mut gPlayerAnim_002628);
    }
    if (*this).stateFlags1 & 0x800000 as libc::c_int as libc::c_uint != 0 {
        func_80832284(globalCtx, this, &mut gPlayerAnim_003380);
    } else if (*this).actor.bgCheckFlags as libc::c_int & 1 as libc::c_int !=
                  0 && func_80833B54(this) == 0 {
        func_80832284(globalCtx, this,
                      D_80853914[(*this).modelAnimType as usize]);
    }
    return 1 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80834E44(mut globalCtx: *mut GlobalContext)
 -> s32 {
    return ((*globalCtx).shootingGalleryStatus as libc::c_int >
                0 as libc::c_int &&
                !((*sControlInput).press.button as libc::c_int |
                      !(0x4000 as libc::c_int)) == 0 as libc::c_int) as
               libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80834E7C(mut globalCtx: *mut GlobalContext)
 -> s32 {
    return ((*globalCtx).shootingGalleryStatus as libc::c_int !=
                0 as libc::c_int &&
                (((*globalCtx).shootingGalleryStatus as libc::c_int) <
                     0 as libc::c_int ||
                     (*sControlInput).cur.button as libc::c_int &
                         (0x8000 as libc::c_int | 0x4000 as libc::c_int |
                              0x8 as libc::c_int | 0x2 as libc::c_int |
                              0x1 as libc::c_int | 0x4 as libc::c_int) !=
                         0 as libc::c_int)) as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80834EB8(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    if (*this).unk_6AD as libc::c_int == 0 as libc::c_int ||
           (*this).unk_6AD as libc::c_int == 2 as libc::c_int {
        if func_80833BCC(this) != 0 ||
               Camera_CheckValidMode(Gameplay_GetCamera(globalCtx,
                                                        0 as libc::c_int as
                                                            s16),
                                     7 as libc::c_int as s16) ==
                   0 as libc::c_int {
            return 1 as libc::c_int
        }
        (*this).unk_6AD = 2 as libc::c_int as u8_0
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80834F2C(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    if (*this).doorType as libc::c_int == PLAYER_DOORTYPE_NONE as libc::c_int
           &&
           (*this).stateFlags1 & 0x2000000 as libc::c_int as libc::c_uint == 0
       {
        if D_80853614 != 0 || func_80834E44(globalCtx) != 0 {
            if func_80834D2C(this, globalCtx) != 0 {
                return func_80834EB8(this, globalCtx)
            }
        }
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80834FBC(mut this: *mut Player) -> s32 {
    if !(*this).actor.child.is_null() {
        if (*this).heldActor.is_null() {
            (*this).heldActor = (*this).actor.child;
            func_8083264C(this, 255 as libc::c_int, 10 as libc::c_int,
                          250 as libc::c_int, 0 as libc::c_int);
            func_8002F7DC(&mut (*this).actor, 0x1828 as libc::c_int as u16_0);
        }
        return 1 as libc::c_int
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083501C(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    if (*this).unk_860 as libc::c_int >= 0 as libc::c_int {
        (*this).unk_860 = -((*this).unk_860 as libc::c_int) as s16
    }
    if (Player_HoldsHookshot(this) == 0 || func_80834FBC(this) != 0) &&
           func_80834758(globalCtx, this) == 0 &&
           func_80834F2C(this, globalCtx) == 0 {
        return 0 as libc::c_int
    }
    return 1 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_808350A4(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) -> s32 {
    let mut item: s32 = 0;
    let mut arrowType: s32 = 0;
    if !(*this).heldActor.is_null() {
        if Player_HoldsHookshot(this) == 0 {
            func_80834380(globalCtx, this, &mut item, &mut arrowType);
            if gSaveContext.minigameState as libc::c_int == 1 as libc::c_int {
                (*globalCtx).interfaceCtx.hbaAmmo =
                    (*globalCtx).interfaceCtx.hbaAmmo.wrapping_sub(1)
            } else if (*globalCtx).shootingGalleryStatus as libc::c_int !=
                          0 as libc::c_int {
                (*globalCtx).shootingGalleryStatus -= 1
            } else {
                Inventory_ChangeAmmo(item as s16, -(1 as libc::c_int) as s16);
            }
            if (*globalCtx).shootingGalleryStatus as libc::c_int ==
                   1 as libc::c_int {
                (*globalCtx).shootingGalleryStatus =
                    -(10 as libc::c_int) as s8
            }
            func_8083264C(this, 150 as libc::c_int, 10 as libc::c_int,
                          150 as libc::c_int, 0 as libc::c_int);
        } else {
            func_8083264C(this, 255 as libc::c_int, 20 as libc::c_int,
                          150 as libc::c_int, 0 as libc::c_int);
        }
        (*this).unk_A73 = 4 as libc::c_int as u8_0;
        (*(*this).heldActor).parent = 0 as *mut Actor;
        (*this).actor.child = 0 as *mut Actor;
        (*this).heldActor = 0 as *mut Actor;
        return 1 as libc::c_int
    }
    return 0 as libc::c_int;
}
static mut D_808543DC: [u16_0; 2] =
    [0x1830 as libc::c_int as u16_0, 0x1835 as libc::c_int as u16_0];
#[no_mangle]
pub unsafe extern "C" fn func_808351D4(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    let mut sp2C: s32 = 0;
    if Player_HoldsHookshot(this) == 0 {
        sp2C = 0 as libc::c_int
    } else { sp2C = 1 as libc::c_int }
    Math_ScaledStepToS(&mut (*this).unk_6C0, 1200 as libc::c_int as s16,
                       400 as libc::c_int as s16);
    (*this).unk_6AE =
        ((*this).unk_6AE as libc::c_int | 0x100 as libc::c_int) as u16_0;
    if (*this).unk_836 as libc::c_int == 0 as libc::c_int &&
           func_80833350(this) == 0 as libc::c_int &&
           (*this).skelAnime.animation ==
               &mut gPlayerAnim_0026E8 as *mut LinkAnimationHeader as
                   *mut libc::c_void {
        LinkAnimation_PlayOnce(globalCtx, &mut (*this).skelAnime2,
                               D_808543CC[sp2C as usize]);
        (*this).unk_836 = -(1 as libc::c_int) as s8
    } else if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime2) != 0 {
        LinkAnimation_PlayLoop(globalCtx, &mut (*this).skelAnime2,
                               D_808543D4[sp2C as usize]);
        (*this).unk_836 = 1 as libc::c_int as s8
    } else if (*this).unk_836 as libc::c_int == 1 as libc::c_int {
        (*this).unk_836 = 2 as libc::c_int as s8
    }
    if (*this).unk_834 as libc::c_int > 10 as libc::c_int {
        (*this).unk_834 -= 1
    }
    func_80834EB8(this, globalCtx);
    if (*this).unk_836 as libc::c_int > 0 as libc::c_int &&
           (((*this).unk_860 as libc::c_int) < 0 as libc::c_int ||
                D_80853618 == 0 && func_80834E7C(globalCtx) == 0) {
        func_80833638(this,
                      Some(func_808353D8 as
                               unsafe extern "C" fn(_: *mut Player,
                                                    _: *mut GlobalContext)
                                   -> s32));
        if (*this).unk_860 as libc::c_int >= 0 as libc::c_int {
            if sp2C == 0 as libc::c_int {
                if func_808350A4(globalCtx, this) == 0 {
                    func_8002F7DC(&mut (*this).actor,
                                  D_808543DC[((if (*this).unk_860 as
                                                      libc::c_int >=
                                                      0 as libc::c_int {
                                                   (*this).unk_860 as
                                                       libc::c_int
                                               } else {
                                                   -((*this).unk_860 as
                                                         libc::c_int)
                                               }) - 1 as libc::c_int) as
                                                 usize]);
                }
            } else if (*this).actor.bgCheckFlags as libc::c_int &
                          1 as libc::c_int != 0 {
                func_808350A4(globalCtx, this);
            }
        }
        (*this).unk_834 = 10 as libc::c_int as s16;
        func_80832210(this);
    } else { (*this).stateFlags1 |= 0x200 as libc::c_int as libc::c_uint }
    return 1 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_808353D8(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    LinkAnimation_Update(globalCtx, &mut (*this).skelAnime2);
    if Player_HoldsHookshot(this) != 0 && func_80834FBC(this) == 0 {
        return 1 as libc::c_int
    }
    if func_80834758(globalCtx, this) == 0 &&
           (D_80853614 != 0 ||
                ((*this).unk_860 as libc::c_int) < 0 as libc::c_int &&
                    D_80853618 != 0 || func_80834E44(globalCtx) != 0) {
        (*this).unk_860 =
            if (*this).unk_860 as libc::c_int >= 0 as libc::c_int {
                (*this).unk_860 as libc::c_int
            } else { -((*this).unk_860 as libc::c_int) } as s16;
        if func_8083442C(this, globalCtx) != 0 {
            if Player_HoldsHookshot(this) != 0 {
                (*this).unk_836 = 1 as libc::c_int as s8
            } else {
                LinkAnimation_PlayOnce(globalCtx, &mut (*this).skelAnime2,
                                       &mut gPlayerAnim_0026B8);
            }
        }
    } else {
        if (*this).unk_834 as libc::c_int != 0 as libc::c_int {
            (*this).unk_834 -= 1
        }
        if func_80833BCC(this) != 0 ||
               (*this).unk_6AD as libc::c_int != 0 as libc::c_int ||
               (*this).stateFlags1 & 0x100000 as libc::c_int as libc::c_uint
                   != 0 {
            if (*this).unk_834 as libc::c_int == 0 as libc::c_int {
                (*this).unk_834 += 1
            }
            return 1 as libc::c_int
        }
        if Player_HoldsHookshot(this) != 0 {
            func_80833638(this,
                          Some(func_8083501C as
                                   unsafe extern "C" fn(_: *mut Player,
                                                        _: *mut GlobalContext)
                                       -> s32));
        } else {
            func_80833638(this,
                          Some(func_80835588 as
                                   unsafe extern "C" fn(_: *mut Player,
                                                        _: *mut GlobalContext)
                                       -> s32));
            LinkAnimation_PlayOnce(globalCtx, &mut (*this).skelAnime2,
                                   &mut gPlayerAnim_0026B0);
        }
        (*this).unk_834 = 0 as libc::c_int as s16
    }
    return 1 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80835588(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    if (*this).actor.bgCheckFlags as libc::c_int & 1 as libc::c_int == 0 ||
           LinkAnimation_Update(globalCtx, &mut (*this).skelAnime2) != 0 {
        func_80833638(this,
                      Some(func_8083501C as
                               unsafe extern "C" fn(_: *mut Player,
                                                    _: *mut GlobalContext)
                                   -> s32));
    }
    return 1 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_808355DC(mut this: *mut Player) {
    (*this).stateFlags1 |= 0x20000 as libc::c_int as libc::c_uint;
    if (*this).skelAnime.moveFlags as libc::c_int & 0x80 as libc::c_int == 0
           &&
           (*this).actor.bgCheckFlags as libc::c_int & 0x200 as libc::c_int !=
               0 && D_80853608 < 0x2000 as libc::c_int {
        (*this).actor.shape.rot.y =
            ((*this).actor.wallYaw as libc::c_int + 0x8000 as libc::c_int) as
                s16;
        (*this).currentYaw = (*this).actor.shape.rot.y
    }
    (*this).targetYaw = (*this).actor.shape.rot.y;
}
#[no_mangle]
pub unsafe extern "C" fn func_80835644(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut Actor) -> s32 {
    if arg2.is_null() {
        func_80832564(globalCtx, this);
        func_80839F90(this, globalCtx);
        return 1 as libc::c_int
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80835688(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    if func_80835644(globalCtx, this, (*this).heldActor) == 0 {
        func_80833638(this,
                      Some(func_808356E8 as
                               unsafe extern "C" fn(_: *mut Player,
                                                    _: *mut GlobalContext)
                                   -> s32));
        LinkAnimation_PlayLoop(globalCtx, &mut (*this).skelAnime2,
                               &mut gPlayerAnim_002E10);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_808356E8(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    let mut heldActor: *mut Actor = (*this).heldActor;
    if heldActor.is_null() { func_80834644(globalCtx, this); }
    if func_80834758(globalCtx, this) != 0 { return 1 as libc::c_int }
    if (*this).stateFlags1 & 0x800 as libc::c_int as libc::c_uint != 0 {
        if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime2) != 0 {
            LinkAnimation_PlayLoop(globalCtx, &mut (*this).skelAnime2,
                                   &mut gPlayerAnim_002E10);
        }
        if (*heldActor).id as libc::c_int == ACTOR_EN_NIW as libc::c_int &&
               (*this).actor.velocity.y <= 0.0f32 {
            (*this).actor.minVelocityY = -2.0f32;
            (*this).actor.gravity = -0.5f32;
            (*this).fallStartHeight = (*this).actor.world.pos.y as s16
        }
        return 1 as libc::c_int
    }
    return func_8083485C(this, globalCtx);
}
#[no_mangle]
pub unsafe extern "C" fn func_808357E8(mut this: *mut Player,
                                       mut dLists: *mut *mut Gfx) {
    (*this).leftHandDLists =
        &mut *dLists.offset(gSaveContext.linkAge as isize) as *mut *mut Gfx;
}
#[no_mangle]
pub unsafe extern "C" fn func_80835800(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    if func_80834758(globalCtx, this) != 0 { return 1 as libc::c_int }
    if (*this).stateFlags1 & 0x2000000 as libc::c_int as libc::c_uint != 0 {
        func_80833638(this,
                      Some(func_80835B60 as
                               unsafe extern "C" fn(_: *mut Player,
                                                    _: *mut GlobalContext)
                                   -> s32));
    } else if func_80834F2C(this, globalCtx) != 0 { return 1 as libc::c_int }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80835884(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime2) != 0 {
        func_80833638(this,
                      Some(func_808358F0 as
                               unsafe extern "C" fn(_: *mut Player,
                                                    _: *mut GlobalContext)
                                   -> s32));
        LinkAnimation_PlayLoop(globalCtx, &mut (*this).skelAnime2,
                               &mut gPlayerAnim_002638);
    }
    func_80834EB8(this, globalCtx);
    return 1 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_808358F0(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    let mut animSeg: *mut LinkAnimationHeader =
        (*this).skelAnime.animation as *mut LinkAnimationHeader;
    if func_808334E4(this) == animSeg || func_80833528(this) == animSeg ||
           func_808335B0(this) == animSeg || func_808335F4(this) == animSeg {
        AnimationContext_SetCopyAll(globalCtx,
                                    (*this).skelAnime.limbCount as s32,
                                    (*this).skelAnime2.jointTable,
                                    (*this).skelAnime.jointTable);
    } else { LinkAnimation_Update(globalCtx, &mut (*this).skelAnime2); }
    func_80834EB8(this, globalCtx);
    if D_80853618 == 0 {
        func_80833638(this,
                      Some(func_808359FC as
                               unsafe extern "C" fn(_: *mut Player,
                                                    _: *mut GlobalContext)
                                   -> s32));
        LinkAnimation_PlayOnce(globalCtx, &mut (*this).skelAnime2,
                               if (*this).unk_870 < 0.5f32 {
                                   &mut gPlayerAnim_002608
                               } else { &mut gPlayerAnim_002600 });
    }
    return 1 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_808359FC(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime2) != 0 {
        func_80833638(this,
                      Some(func_80835B60 as
                               unsafe extern "C" fn(_: *mut Player,
                                                    _: *mut GlobalContext)
                                   -> s32));
        (*this).unk_834 = 0 as libc::c_int as s16
    } else if LinkAnimation_OnFrame(&mut (*this).skelAnime2, 6.0f32) != 0 {
        let mut posX: f32_0 =
            Math_SinS((*this).actor.shape.rot.y) * 10.0f32 +
                (*this).actor.world.pos.x;
        let mut posZ: f32_0 =
            Math_CosS((*this).actor.shape.rot.y) * 10.0f32 +
                (*this).actor.world.pos.z;
        let mut yaw: s32 =
            if !(*this).unk_664.is_null() {
                ((*this).actor.shape.rot.y as libc::c_int) +
                    14000 as libc::c_int
            } else { (*this).actor.shape.rot.y as libc::c_int };
        let mut boomerang: *mut EnBoom =
            Actor_Spawn(&mut (*globalCtx).actorCtx, globalCtx,
                        ACTOR_EN_BOOM as libc::c_int as s16, posX,
                        (*this).actor.world.pos.y + 30.0f32, posZ,
                        (*this).actor.focus.rot.x, yaw as s16,
                        0 as libc::c_int as s16, 0 as libc::c_int as s16) as
                *mut EnBoom;
        (*this).boomerangActor = &mut (*boomerang).actor;
        if !boomerang.is_null() {
            (*boomerang).moveTo = (*this).unk_664;
            (*boomerang).returnTimer = 20 as libc::c_int as u8_0;
            (*this).stateFlags1 |= 0x2000000 as libc::c_int as libc::c_uint;
            if func_8008E9C4(this) == 0 { func_808355DC(this); }
            (*this).unk_A73 = 4 as libc::c_int as u8_0;
            func_8002F7DC(&mut (*this).actor, 0x1805 as libc::c_int as u16_0);
            func_80832698(this, 0x6800 as libc::c_int as u16_0);
        }
    }
    return 1 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80835B60(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    if func_80834758(globalCtx, this) != 0 { return 1 as libc::c_int }
    if (*this).stateFlags1 & 0x2000000 as libc::c_int as libc::c_uint == 0 {
        func_80833638(this,
                      Some(func_80835C08 as
                               unsafe extern "C" fn(_: *mut Player,
                                                    _: *mut GlobalContext)
                                   -> s32));
        LinkAnimation_PlayOnce(globalCtx, &mut (*this).skelAnime2,
                               &mut gPlayerAnim_0025F8);
        func_808357E8(this, D_80125EF8.as_mut_ptr());
        func_8002F7DC(&mut (*this).actor, 0x836 as libc::c_int as u16_0);
        func_80832698(this, 0x6800 as libc::c_int as u16_0);
        return 1 as libc::c_int
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80835C08(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    if func_80835800(this, globalCtx) == 0 &&
           LinkAnimation_Update(globalCtx, &mut (*this).skelAnime2) != 0 {
        func_80833638(this,
                      Some(func_80835800 as
                               unsafe extern "C" fn(_: *mut Player,
                                                    _: *mut GlobalContext)
                                   -> s32));
    }
    return 1 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80835C58(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut func: PlayerFunc674,
                                       mut flags: s32) -> s32 {
    if func == (*this).func_674 { return 0 as libc::c_int }
    if Some(func_8084E3C4 as
                unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                    -> ()) == (*this).func_674 {
        Audio_OcaSetInstrument(0 as libc::c_int as u8_0);
        (*this).stateFlags2 &= !(0x3000000 as libc::c_int) as libc::c_uint
    } else if Some(func_808507F4 as
                       unsafe extern "C" fn(_: *mut Player,
                                            _: *mut GlobalContext) -> ()) ==
                  (*this).func_674 {
        func_80832340(globalCtx, this);
    }
    (*this).func_674 = func;
    if (*this).itemActionParam as libc::c_int !=
           (*this).heldItemActionParam as libc::c_int &&
           (flags & 1 as libc::c_int == 0 ||
                (*this).stateFlags1 & 0x400000 as libc::c_int as libc::c_uint
                    == 0) {
        func_8008EC70(this);
    }
    if flags & 1 as libc::c_int == 0 &&
           (*this).stateFlags1 & 0x800 as libc::c_int as libc::c_uint == 0 {
        func_80834644(globalCtx, this);
        (*this).stateFlags1 &= !(0x400000 as libc::c_int) as libc::c_uint
    }
    func_80832DBC(this);
    (*this).stateFlags1 &= !(0xb4000044 as libc::c_uint);
    (*this).stateFlags2 &= !(0x18080000 as libc::c_int) as libc::c_uint;
    (*this).stateFlags3 =
        ((*this).stateFlags3 as libc::c_int & !(0x8a as libc::c_int)) as u8_0;
    (*this).unk_84F = 0 as libc::c_int as s8;
    (*this).unk_850 = 0 as libc::c_int as s16;
    (*this).unk_6AC = 0 as libc::c_int as s8;
    func_808326F0(this);
    return 1 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80835DAC(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut func: PlayerFunc674,
                                       mut flags: s32) {
    let mut temp: s32 = 0;
    temp = (*this).skelAnime.moveFlags as s32;
    (*this).skelAnime.moveFlags = 0 as libc::c_int as u8_0;
    func_80835C58(globalCtx, this, func, flags);
    (*this).skelAnime.moveFlags = temp as u8_0;
}
#[no_mangle]
pub unsafe extern "C" fn func_80835DE4(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut func: PlayerFunc674,
                                       mut flags: s32) {
    let mut temp: s32 = 0;
    if (*this).itemActionParam as libc::c_int >= 0 as libc::c_int {
        temp = (*this).itemActionParam as s32;
        (*this).itemActionParam = (*this).heldItemActionParam;
        func_80835C58(globalCtx, this, func, flags);
        (*this).itemActionParam = temp as s8;
        Player_SetModels(this,
                         Player_ActionToModelGroup(this,
                                                   (*this).itemActionParam as
                                                       s32));
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80835E44(mut globalCtx: *mut GlobalContext,
                                       mut camSetting: s16) {
    if func_800C0CB8(globalCtx) == 0 {
        if camSetting as libc::c_int ==
               CAM_SET_SCENE_TRANSITION as libc::c_int {
            Interface_ChangeAlpha(2 as libc::c_int as u16_0);
        }
    } else {
        Camera_ChangeSetting(Gameplay_GetCamera(globalCtx,
                                                0 as libc::c_int as s16),
                             camSetting);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80835EA4(mut globalCtx: *mut GlobalContext,
                                       mut arg1: s32) {
    func_80835E44(globalCtx, CAM_SET_TURN_AROUND as libc::c_int as s16);
    Camera_SetCameraData(Gameplay_GetCamera(globalCtx,
                                            0 as libc::c_int as s16),
                         4 as libc::c_int as s16, 0 as *mut libc::c_void,
                         0 as *mut libc::c_void, arg1 as s16,
                         0 as libc::c_int as s16, 0 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn func_80835EFC(mut this: *mut Player) {
    if Player_HoldsHookshot(this) != 0 {
        let mut heldActor: *mut Actor = (*this).heldActor;
        if !heldActor.is_null() {
            Actor_Kill(heldActor);
            (*this).actor.child = 0 as *mut Actor;
            (*this).heldActor = 0 as *mut Actor
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80835F44(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player, mut item: s32) {
    let mut actionParam: s8 = 0;
    let mut temp: s32 = 0;
    let mut nextType: s32 = 0;
    actionParam = Player_ItemToActionParam(item);
    if (*this).heldItemActionParam as libc::c_int ==
           (*this).itemActionParam as libc::c_int &&
           ((*this).stateFlags1 & 0x400000 as libc::c_int as libc::c_uint == 0
                ||
                Player_ActionToSword(actionParam as s32) != 0 as libc::c_int
                ||
                actionParam as libc::c_int == PLAYER_AP_NONE as libc::c_int)
           ||
           ((*this).itemActionParam as libc::c_int) < 0 as libc::c_int &&
               (Player_ActionToSword(actionParam as s32) != 0 as libc::c_int
                    ||
                    actionParam as libc::c_int ==
                        PLAYER_AP_NONE as libc::c_int) {
        if actionParam as libc::c_int == PLAYER_AP_NONE as libc::c_int ||
               (*this).stateFlags1 & 0x8000000 as libc::c_int as libc::c_uint
                   == 0 ||
               (*this).actor.bgCheckFlags as libc::c_int & 1 as libc::c_int !=
                   0 &&
                   (actionParam as libc::c_int ==
                        PLAYER_AP_HOOKSHOT as libc::c_int ||
                        actionParam as libc::c_int ==
                            PLAYER_AP_LONGSHOT as libc::c_int) {
            if (*globalCtx).bombchuBowlingStatus as libc::c_int ==
                   0 as libc::c_int &&
                   (actionParam as libc::c_int ==
                        PLAYER_AP_STICK as libc::c_int &&
                        gSaveContext.inventory.ammo[gItemSlots[ITEM_STICK as
                                                                   libc::c_int
                                                                   as usize]
                                                        as usize] as
                            libc::c_int == 0 as libc::c_int ||
                        actionParam as libc::c_int ==
                            PLAYER_AP_BEAN as libc::c_int &&
                            gSaveContext.inventory.ammo[gItemSlots[ITEM_BEAN
                                                                       as
                                                                       libc::c_int
                                                                       as
                                                                       usize]
                                                            as usize] as
                                libc::c_int == 0 as libc::c_int ||
                        {
                            temp =
                                Player_ActionToExplosive(this,
                                                         actionParam as s32);
                            (temp >= 0 as libc::c_int) &&
                                (gSaveContext.inventory.ammo[gItemSlots[sExplosiveInfos[temp
                                                                                            as
                                                                                            usize].itemId
                                                                            as
                                                                            usize]
                                                                 as usize] as
                                     libc::c_int == 0 as libc::c_int ||
                                     (*globalCtx).actorCtx.actorLists[ACTORCAT_EXPLOSIVE
                                                                          as
                                                                          libc::c_int
                                                                          as
                                                                          usize].length
                                         >= 3 as libc::c_int)
                        }) {
                func_80078884(0x4806 as libc::c_int as u16_0);
                return
            }
            if actionParam as libc::c_int == PLAYER_AP_LENS as libc::c_int {
                if func_80087708(globalCtx, 0 as libc::c_int as s16,
                                 3 as libc::c_int as s16) != 0 {
                    if (*globalCtx).actorCtx.unk_03 as libc::c_int !=
                           0 as libc::c_int {
                        func_800304B0(globalCtx);
                    } else {
                        (*globalCtx).actorCtx.unk_03 =
                            1 as libc::c_int as u8_0
                    }
                    func_80078884(if (*globalCtx).actorCtx.unk_03 as
                                         libc::c_int != 0 as libc::c_int {
                                      0x482a as libc::c_int
                                  } else { 0x482b as libc::c_int } as u16_0);
                } else { func_80078884(0x4806 as libc::c_int as u16_0); }
                return
            }
            if actionParam as libc::c_int == PLAYER_AP_NUT as libc::c_int {
                if gSaveContext.inventory.ammo[gItemSlots[ITEM_NUT as
                                                              libc::c_int as
                                                              usize] as usize]
                       as libc::c_int != 0 as libc::c_int {
                    func_8083C61C(globalCtx, this);
                } else { func_80078884(0x4806 as libc::c_int as u16_0); }
                return
            }
            temp = Player_ActionToMagicSpell(this, actionParam as s32);
            if temp >= 0 as libc::c_int {
                if actionParam as libc::c_int ==
                       PLAYER_AP_FARORES_WIND as libc::c_int &&
                       gSaveContext.respawn[RESPAWN_MODE_TOP as libc::c_int as
                                                usize].data as libc::c_int >
                           0 as libc::c_int ||
                       gSaveContext.unk_13F4 as libc::c_int !=
                           0 as libc::c_int &&
                           gSaveContext.unk_13F0 as libc::c_int ==
                               0 as libc::c_int &&
                           gSaveContext.magic as libc::c_int >=
                               sMagicSpellCosts[temp as usize] as libc::c_int
                   {
                    (*this).itemActionParam = actionParam;
                    (*this).unk_6AD = 4 as libc::c_int as u8_0
                } else { func_80078884(0x4806 as libc::c_int as u16_0); }
                return
            }
            if actionParam as libc::c_int >=
                   PLAYER_AP_MASK_KEATON as libc::c_int {
                if (*this).currentMask as libc::c_int !=
                       PLAYER_MASK_NONE as libc::c_int {
                    (*this).currentMask =
                        PLAYER_MASK_NONE as libc::c_int as u8_0
                } else {
                    (*this).currentMask =
                        (actionParam as libc::c_int -
                             PLAYER_AP_MASK_KEATON as libc::c_int +
                             1 as libc::c_int) as u8_0
                }
                func_808328EC(this, 0x835 as libc::c_int as u16_0);
                return
            }
            if actionParam as libc::c_int >=
                   PLAYER_AP_OCARINA_FAIRY as libc::c_int &&
                   actionParam as libc::c_int <=
                       PLAYER_AP_OCARINA_TIME as libc::c_int ||
                   actionParam as libc::c_int >=
                       PLAYER_AP_BOTTLE_FISH as libc::c_int {
                if func_8008E9C4(this) == 0 ||
                       actionParam as libc::c_int >=
                           PLAYER_AP_BOTTLE_POTION_RED as libc::c_int &&
                           actionParam as libc::c_int <=
                               PLAYER_AP_BOTTLE_FAIRY as libc::c_int {
                    func_8002D53C(globalCtx,
                                  &mut (*globalCtx).actorCtx.titleCtx);
                    (*this).unk_6AD = 4 as libc::c_int as u8_0;
                    (*this).itemActionParam = actionParam
                }
                return
            }
            if actionParam as libc::c_int !=
                   (*this).heldItemActionParam as libc::c_int ||
                   (*this).heldActor.is_null() &&
                       Player_ActionToExplosive(this, actionParam as s32) >=
                           0 as libc::c_int {
                (*this).nextModelGroup =
                    Player_ActionToModelGroup(this, actionParam as s32) as
                        u8_0;
                nextType =
                    (*gPlayerModelTypes.as_mut_ptr().offset((*this).nextModelGroup
                                                                as
                                                                isize))[0 as
                                                                            libc::c_int
                                                                            as
                                                                            usize]
                        as s32;
                if (*this).heldItemActionParam as libc::c_int >=
                       0 as libc::c_int &&
                       Player_ActionToMagicSpell(this, actionParam as s32) <
                           0 as libc::c_int &&
                       item != (*this).heldItemId as libc::c_int &&
                       D_80854164[(*gPlayerModelTypes.as_mut_ptr().offset((*this).modelGroup
                                                                              as
                                                                              isize))[0
                                                                                          as
                                                                                          libc::c_int
                                                                                          as
                                                                                          usize]
                                      as usize][nextType as usize] as
                           libc::c_int != 0 as libc::c_int {
                    (*this).heldItemId = item as u8_0;
                    (*this).stateFlags1 |=
                        0x100 as libc::c_int as libc::c_uint
                } else {
                    func_80835EFC(this);
                    func_808323B4(globalCtx, this);
                    func_80833664(globalCtx, this, actionParam);
                }
                return
            }
            D_80853618 = 1 as libc::c_int;
            D_80853614 = D_80853618
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80836448(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut LinkAnimationHeader) {
    let mut cond: s32 = func_808332B8(this);
    func_80832564(globalCtx, this);
    func_80835C58(globalCtx, this,
                  if cond != 0 {
                      Some(func_8084E368 as
                               unsafe extern "C" fn(_: *mut Player,
                                                    _: *mut GlobalContext)
                                   -> ())
                  } else {
                      Some(func_80843CEC as
                               unsafe extern "C" fn(_: *mut Player,
                                                    _: *mut GlobalContext)
                                   -> ())
                  }, 0 as libc::c_int);
    (*this).stateFlags1 |= 0x80 as libc::c_int as libc::c_uint;
    func_80832264(globalCtx, this, anim);
    if anim == &mut gPlayerAnim_002878 as *mut LinkAnimationHeader {
        (*this).skelAnime.endFrame = 84.0f32
    }
    func_80832224(this);
    func_80832698(this, 0x680b as libc::c_int as u16_0);
    if (*this).actor.category as libc::c_int == ACTORCAT_PLAYER as libc::c_int
       {
        func_800F47BC();
        if Inventory_ConsumeFairy(globalCtx) != 0 {
            (*globalCtx).gameOverCtx.state =
                GAMEOVER_REVIVE_START as libc::c_int as u16_0;
            (*this).unk_84F = 1 as libc::c_int as s8
        } else {
            (*globalCtx).gameOverCtx.state =
                GAMEOVER_DEATH_START as libc::c_int as u16_0;
            func_800F6AB0(0 as libc::c_int as u16_0);
            Audio_PlayFanfare(0x20 as libc::c_int as u16_0);
            gSaveContext.seqId = 0xffff as libc::c_int as u8_0;
            gSaveContext.natureAmbienceId = 0xff as libc::c_int as u8_0
        }
        OnePointCutscene_Init(globalCtx, 9806 as libc::c_int as s16,
                              if cond != 0 {
                                  120 as libc::c_int
                              } else { 60 as libc::c_int } as s16,
                              &mut (*this).actor, 0 as libc::c_int as s16);
        ShrinkWindow_SetVal(0x20 as libc::c_int);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_808365C8(mut this: *mut Player) -> s32 {
    return ((!(Some(func_808458D0 as
                        unsafe extern "C" fn(_: *mut Player,
                                             _: *mut GlobalContext) -> ()) ==
                   (*this).func_674) ||
                 (*this).stateFlags1 & 0x100 as libc::c_int as libc::c_uint !=
                     0 &&
                     ((*this).heldItemId as libc::c_int ==
                          ITEM_LAST_USED as libc::c_int ||
                          (*this).heldItemId as libc::c_int ==
                              ITEM_NONE as libc::c_int)) &&
                (!(Some(func_80834A2C as
                            unsafe extern "C" fn(_: *mut Player,
                                                 _: *mut GlobalContext)
                                -> s32) == (*this).func_82C) ||
                     Player_ItemToActionParam((*this).heldItemId as s32) as
                         libc::c_int ==
                         (*this).heldItemActionParam as libc::c_int)) as
               libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80836670(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    if (*this).stateFlags1 & 0x800000 as libc::c_int as libc::c_uint == 0 &&
           !(*this).actor.parent.is_null() && Player_HoldsHookshot(this) != 0
       {
        func_80835C58(globalCtx, this,
                      Some(func_80850AEC as
                               unsafe extern "C" fn(_: *mut Player,
                                                    _: *mut GlobalContext)
                                   -> ()), 1 as libc::c_int);
        (*this).stateFlags3 =
            ((*this).stateFlags3 as libc::c_int | 0x80 as libc::c_int) as
                u8_0;
        func_80832264(globalCtx, this, &mut gPlayerAnim_002C90);
        func_80832F54(globalCtx, this, 0x9b as libc::c_int);
        func_80832224(this);
        (*this).currentYaw = (*this).actor.shape.rot.y;
        (*this).actor.bgCheckFlags =
            ((*this).actor.bgCheckFlags as libc::c_int & !(1 as libc::c_int))
                as u16_0;
        (*this).hoverBootsTimer = 0 as libc::c_int as u8_0;
        (*this).unk_6AE =
            ((*this).unk_6AE as libc::c_int | 0x43 as libc::c_int) as u16_0;
        func_80832698(this, 0x6802 as libc::c_int as u16_0);
        return 1 as libc::c_int
    }
    if func_808365C8(this) != 0 {
        func_80834298(this, globalCtx);
        if Some(func_8084E604 as
                    unsafe extern "C" fn(_: *mut Player,
                                         _: *mut GlobalContext) -> ()) ==
               (*this).func_674 {
            return 1 as libc::c_int
        }
    }
    if (*this).func_82C.expect("non-null function pointer")(this, globalCtx)
           == 0 {
        return 0 as libc::c_int
    }
    if (*this).unk_830 != 0.0f32 {
        if func_80833350(this) == 0 as libc::c_int ||
               (*this).linearVelocity != 0.0f32 {
            AnimationContext_SetCopyFalse(globalCtx,
                                          (*this).skelAnime.limbCount as s32,
                                          (*this).skelAnime2.jointTable,
                                          (*this).skelAnime.jointTable,
                                          D_80853410.as_mut_ptr());
        }
        Math_StepToF(&mut (*this).unk_830, 0.0f32, 0.25f32);
        AnimationContext_SetInterp(globalCtx,
                                   (*this).skelAnime.limbCount as s32,
                                   (*this).skelAnime.jointTable,
                                   (*this).skelAnime2.jointTable,
                                   1.0f32 - (*this).unk_830);
    } else if func_80833350(this) == 0 as libc::c_int ||
                  (*this).linearVelocity != 0.0f32 {
        AnimationContext_SetCopyTrue(globalCtx,
                                     (*this).skelAnime.limbCount as s32,
                                     (*this).skelAnime.jointTable,
                                     (*this).skelAnime2.jointTable,
                                     D_80853410.as_mut_ptr());
    } else {
        AnimationContext_SetCopyAll(globalCtx,
                                    (*this).skelAnime.limbCount as s32,
                                    (*this).skelAnime.jointTable,
                                    (*this).skelAnime2.jointTable);
    }
    return 1 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80836898(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut func: PlayerFuncA74) -> s32 {
    (*this).func_A74 = func;
    func_80835C58(globalCtx, this,
                  Some(func_808458D0 as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  0 as libc::c_int);
    (*this).stateFlags2 |= 0x40 as libc::c_int as libc::c_uint;
    return func_80832528(globalCtx, this);
}
#[no_mangle]
pub unsafe extern "C" fn func_808368EC(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut previousYaw: s16 = (*this).actor.shape.rot.y;
    if (*this).stateFlags2 & 0x60 as libc::c_int as libc::c_uint == 0 {
        if !(*this).unk_664.is_null() &&
               ((*globalCtx).actorCtx.targetCtx.unk_4B as libc::c_int !=
                    0 as libc::c_int ||
                    (*this).actor.category as libc::c_int !=
                        ACTORCAT_PLAYER as libc::c_int) {
            Math_ScaledStepToS(&mut (*this).actor.shape.rot.y,
                               Math_Vec3f_Yaw(&mut (*this).actor.world.pos,
                                              &mut (*(*this).unk_664).focus.pos),
                               4000 as libc::c_int as s16);
        } else if (*this).stateFlags1 & 0x20000 as libc::c_int as libc::c_uint
                      != 0 &&
                      (*this).stateFlags2 &
                          0x60 as libc::c_int as libc::c_uint == 0 {
            Math_ScaledStepToS(&mut (*this).actor.shape.rot.y,
                               (*this).targetYaw, 4000 as libc::c_int as s16);
        }
    } else if (*this).stateFlags2 & 0x40 as libc::c_int as libc::c_uint == 0 {
        Math_ScaledStepToS(&mut (*this).actor.shape.rot.y, (*this).currentYaw,
                           2000 as libc::c_int as s16);
    }
    (*this).unk_87C =
        ((*this).actor.shape.rot.y as libc::c_int -
             previousYaw as libc::c_int) as s16;
}
#[no_mangle]
pub unsafe extern "C" fn func_808369C8(mut pValue: *mut s16, mut arg1: s16,
                                       mut arg2: s16, mut arg3: s16,
                                       mut arg4: s16, mut arg5: s16) -> s32 {
    let mut temp1: s16 = 0;
    let mut temp2: s16 = 0;
    let mut temp3: s16 = 0;
    temp2 = (arg4 as libc::c_int - *pValue as libc::c_int) as s16;
    temp1 = temp2;
    temp2 =
        if (temp2 as libc::c_int) < -(arg5 as libc::c_int) {
            -(arg5 as libc::c_int)
        } else if temp2 as libc::c_int > arg5 as libc::c_int {
            arg5 as libc::c_int
        } else { temp2 as libc::c_int } as s16;
    *pValue =
        (*pValue as libc::c_int +
             (temp1 as libc::c_int - temp2 as libc::c_int) as s16 as
                 libc::c_int) as s16;
    Math_ScaledStepToS(pValue, arg1, arg2);
    temp3 = *pValue;
    if (*pValue as libc::c_int) < -(arg3 as libc::c_int) {
        *pValue = -(arg3 as libc::c_int) as s16
    } else if *pValue as libc::c_int > arg3 as libc::c_int { *pValue = arg3 }
    return temp3 as libc::c_int - *pValue as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80836AB8(mut this: *mut Player, mut arg1: s32)
 -> s32 {
    let mut sp36: s16 = 0;
    let mut var: s16 = 0;
    var = (*this).actor.shape.rot.y;
    if arg1 != 0 as libc::c_int {
        var = (*this).actor.focus.rot.y;
        (*this).unk_6BC = (*this).actor.focus.rot.x;
        (*this).unk_6AE =
            ((*this).unk_6AE as libc::c_int | 0x41 as libc::c_int) as u16_0
    } else {
        func_808369C8(&mut (*this).unk_6BC,
                      func_808369C8(&mut (*this).unk_6B6,
                                    (*this).actor.focus.rot.x,
                                    600 as libc::c_int as s16,
                                    10000 as libc::c_int as s16,
                                    (*this).actor.focus.rot.x,
                                    0 as libc::c_int as s16) as s16,
                      200 as libc::c_int as s16, 4000 as libc::c_int as s16,
                      (*this).unk_6B6, 10000 as libc::c_int as s16);
        sp36 =
            ((*this).actor.focus.rot.y as libc::c_int - var as libc::c_int) as
                s16;
        func_808369C8(&mut sp36, 0 as libc::c_int as s16,
                      200 as libc::c_int as s16, 24000 as libc::c_int as s16,
                      (*this).unk_6BE, 8000 as libc::c_int as s16);
        var =
            ((*this).actor.focus.rot.y as libc::c_int - sp36 as libc::c_int)
                as s16;
        func_808369C8(&mut (*this).unk_6B8,
                      (sp36 as libc::c_int - (*this).unk_6BE as libc::c_int)
                          as s16, 200 as libc::c_int as s16,
                      8000 as libc::c_int as s16, sp36,
                      8000 as libc::c_int as s16);
        func_808369C8(&mut (*this).unk_6BE, sp36, 200 as libc::c_int as s16,
                      8000 as libc::c_int as s16, (*this).unk_6B8,
                      8000 as libc::c_int as s16);
        (*this).unk_6AE =
            ((*this).unk_6AE as libc::c_int | 0xd9 as libc::c_int) as u16_0
    }
    return var as s32;
}
#[no_mangle]
pub unsafe extern "C" fn func_80836BEC(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut sp1C: s32 = 0 as libc::c_int;
    let mut zTrigPressed: s32 =
        (!((*sControlInput).cur.button as libc::c_int |
               !(0x2000 as libc::c_int)) == 0 as libc::c_int) as libc::c_int;
    let mut actorToTarget: *mut Actor = 0 as *mut Actor;
    let mut pad: s32 = 0;
    let mut holdTarget: s32 = 0;
    let mut cond: s32 = 0;
    if zTrigPressed == 0 {
        (*this).stateFlags1 &= !(0x40000000 as libc::c_int) as libc::c_uint
    }
    if (*globalCtx).csCtx.state as libc::c_int != CS_STATE_IDLE as libc::c_int
           || (*this).csMode as libc::c_int != 0 as libc::c_int ||
           (*this).stateFlags1 & 0x20000080 as libc::c_int as libc::c_uint !=
               0 ||
           (*this).stateFlags3 as libc::c_int & 0x80 as libc::c_int != 0 {
        (*this).unk_66C = 0 as libc::c_int
    } else if zTrigPressed != 0 ||
                  (*this).stateFlags2 & 0x2000 as libc::c_int as libc::c_uint
                      != 0 || !(*this).unk_684.is_null() {
        if (*this).unk_66C <= 5 as libc::c_int {
            (*this).unk_66C = 5 as libc::c_int
        } else { (*this).unk_66C -= 1 }
    } else if (*this).stateFlags1 & 0x20000 as libc::c_int as libc::c_uint !=
                  0 {
        (*this).unk_66C = 0 as libc::c_int
    } else if (*this).unk_66C != 0 as libc::c_int { (*this).unk_66C -= 1 }
    if (*this).unk_66C >= 6 as libc::c_int { sp1C = 1 as libc::c_int }
    cond = func_8083224C(globalCtx);
    if cond != 0 || (*this).unk_66C != 0 as libc::c_int ||
           (*this).stateFlags1 & 0x2001000 as libc::c_int as libc::c_uint != 0
       {
        if cond == 0 {
            if (*this).stateFlags1 & 0x2000000 as libc::c_int as libc::c_uint
                   == 0 &&
                   ((*this).heldItemActionParam as libc::c_int !=
                        PLAYER_AP_FISHING_POLE as libc::c_int ||
                        (*this).unk_860 as libc::c_int == 0 as libc::c_int) &&
                   !((*sControlInput).press.button as libc::c_int |
                         !(0x2000 as libc::c_int)) == 0 as libc::c_int {
                if (*this).actor.category as libc::c_int ==
                       ACTORCAT_PLAYER as libc::c_int {
                    actorToTarget =
                        (*globalCtx).actorCtx.targetCtx.arrowPointedActor
                } else {
                    actorToTarget =
                        &mut (*((*(*globalCtx).actorCtx.actorLists.as_mut_ptr().offset(ACTORCAT_PLAYER
                                                                                           as
                                                                                           libc::c_int
                                                                                           as
                                                                                           isize)).head
                                    as *mut Player)).actor
                }
                holdTarget =
                    (gSaveContext.zTargetSetting as libc::c_int !=
                         0 as libc::c_int ||
                         (*this).actor.category as libc::c_int !=
                             ACTORCAT_PLAYER as libc::c_int) as libc::c_int;
                (*this).stateFlags1 |= 0x8000 as libc::c_int as libc::c_uint;
                if !actorToTarget.is_null() &&
                       (*actorToTarget).flags &
                           ((1 as libc::c_int) << 27 as libc::c_int) as
                               libc::c_uint == 0 {
                    if actorToTarget == (*this).unk_664 &&
                           (*this).actor.category as libc::c_int ==
                               ACTORCAT_PLAYER as libc::c_int {
                        actorToTarget = (*globalCtx).actorCtx.targetCtx.unk_94
                    }
                    if actorToTarget != (*this).unk_664 {
                        if holdTarget == 0 {
                            (*this).stateFlags2 |=
                                0x2000 as libc::c_int as libc::c_uint
                        }
                        (*this).unk_664 = actorToTarget;
                        (*this).unk_66C = 15 as libc::c_int;
                        (*this).stateFlags2 &=
                            !(0x200002 as libc::c_int) as libc::c_uint
                    } else if holdTarget == 0 { func_8008EDF0(this); }
                    (*this).stateFlags1 &=
                        !(0x40000000 as libc::c_int) as libc::c_uint
                } else if (*this).stateFlags1 &
                              0x40020000 as libc::c_int as libc::c_uint == 0 {
                    func_808355DC(this);
                }
            }
            if !(*this).unk_664.is_null() {
                if (*this).actor.category as libc::c_int ==
                       ACTORCAT_PLAYER as libc::c_int &&
                       (*this).unk_664 != (*this).unk_684 &&
                       func_8002F0C8((*this).unk_664, this, sp1C) != 0 {
                    func_8008EDF0(this);
                    (*this).stateFlags1 |=
                        0x40000000 as libc::c_int as libc::c_uint
                } else if !(*this).unk_664.is_null() {
                    (*(*this).unk_664).targetPriority =
                        40 as libc::c_int as u8_0
                }
            } else if !(*this).unk_684.is_null() {
                (*this).unk_664 = (*this).unk_684
            }
        }
        if !(*this).unk_664.is_null() {
            (*this).stateFlags1 &= !(0x30000 as libc::c_int) as libc::c_uint;
            if (*this).stateFlags1 & 0x800 as libc::c_int as libc::c_uint != 0
                   ||
                   !((*(*this).unk_664).flags &
                         ((1 as libc::c_int) << 0 as libc::c_int |
                              (1 as libc::c_int) << 2 as libc::c_int) as
                             libc::c_uint ==
                         ((1 as libc::c_int) << 0 as libc::c_int |
                              (1 as libc::c_int) << 2 as libc::c_int) as
                             libc::c_uint) {
                (*this).stateFlags1 |= 0x10000 as libc::c_int as libc::c_uint
            }
        } else if (*this).stateFlags1 & 0x20000 as libc::c_int as libc::c_uint
                      != 0 {
            (*this).stateFlags2 &= !(0x2000 as libc::c_int) as libc::c_uint
        } else { func_8008EE08(this); }
    } else { func_8008EE08(this); };
}
#[no_mangle]
pub unsafe extern "C" fn func_80836FAC(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut f32_0,
                                       mut arg3: *mut s16, mut arg4: f32_0)
 -> s32 {
    let mut temp_f2: f32_0 = 0.;
    let mut temp_f0: f32_0 = 0.;
    let mut temp_f14: f32_0 = 0.;
    let mut temp_f12: f32_0 = 0.;
    if (*this).unk_6AD as libc::c_int != 0 as libc::c_int ||
           (*globalCtx).sceneLoadFlag as libc::c_int == 0x14 as libc::c_int ||
           (*this).stateFlags1 & 1 as libc::c_int as libc::c_uint != 0 {
        *arg2 = 0.0f32;
        *arg3 = (*this).actor.shape.rot.y
    } else {
        *arg2 = D_808535D4;
        *arg3 = D_808535D8;
        if arg4 != 0.0f32 {
            *arg2 -= 20.0f32;
            if *arg2 < 0.0f32 {
                *arg2 = 0.0f32
            } else {
                temp_f2 = 1.0f32 - Math_CosS((*arg2 * 450.0f32) as s16);
                *arg2 = temp_f2 * temp_f2 * 30.0f32 + 7.0f32
            }
        } else { *arg2 *= 0.8f32 }
        if D_808535D4 != 0.0f32 {
            temp_f0 = Math_SinS((*this).unk_898);
            temp_f12 = (*this).unk_880;
            temp_f14 =
                if temp_f0 < 0.0f32 {
                    0.0f32
                } else if temp_f0 > 0.6f32 { 0.6f32 } else { temp_f0 };
            if (*this).unk_6C4 != 0.0f32 {
                temp_f12 = temp_f12 - (*this).unk_6C4 * 0.008f32;
                if temp_f12 < 2.0f32 { temp_f12 = 2.0f32 }
            }
            *arg2 = *arg2 * 0.14f32 - 8.0f32 * temp_f14 * temp_f14;
            *arg2 =
                if *arg2 < 0.0f32 {
                    0.0f32
                } else if *arg2 > temp_f12 { temp_f12 } else { *arg2 };
            return 1 as libc::c_int
        }
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083721C(mut this: *mut Player) -> s32 {
    return Math_StepToF(&mut (*this).linearVelocity, 0.0f32,
                        (*gGameInfo).data[(0 as libc::c_int * 6 as libc::c_int
                                               * 16 as libc::c_int +
                                               43 as libc::c_int) as usize] as
                            libc::c_int as libc::c_float / 100.0f32);
}
#[no_mangle]
pub unsafe extern "C" fn func_80837268(mut this: *mut Player,
                                       mut arg1: *mut f32_0,
                                       mut arg2: *mut s16, mut arg3: f32_0,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    if func_80836FAC(globalCtx, this, arg1, arg2, arg3) == 0 {
        *arg2 = (*this).actor.shape.rot.y;
        if !(*this).unk_664.is_null() {
            if (*globalCtx).actorCtx.targetCtx.unk_4B as libc::c_int !=
                   0 as libc::c_int &&
                   (*this).stateFlags2 & 0x40 as libc::c_int as libc::c_uint
                       == 0 {
                *arg2 =
                    Math_Vec3f_Yaw(&mut (*this).actor.world.pos,
                                   &mut (*(*this).unk_664).focus.pos);
                return 0 as libc::c_int
            }
        } else if func_80833B2C(this) != 0 { *arg2 = (*this).targetYaw }
        return 0 as libc::c_int
    } else {
        *arg2 =
            (*arg2 as libc::c_int +
                 Camera_GetInputDirYaw((*globalCtx).cameraPtrs[(*globalCtx).activeCamera
                                                                   as usize])
                     as libc::c_int) as s16;
        return 1 as libc::c_int
    };
}
static mut D_808543E0: [s8; 8] =
    [13 as libc::c_int as s8, 2 as libc::c_int as s8, 4 as libc::c_int as s8,
     9 as libc::c_int as s8, 10 as libc::c_int as s8, 11 as libc::c_int as s8,
     8 as libc::c_int as s8, -(7 as libc::c_int) as s8];
static mut D_808543E8: [s8; 12] =
    [13 as libc::c_int as s8, 1 as libc::c_int as s8, 2 as libc::c_int as s8,
     5 as libc::c_int as s8, 3 as libc::c_int as s8, 4 as libc::c_int as s8,
     9 as libc::c_int as s8, 10 as libc::c_int as s8, 11 as libc::c_int as s8,
     7 as libc::c_int as s8, 8 as libc::c_int as s8,
     -(6 as libc::c_int) as s8];
static mut D_808543F4: [s8; 11] =
    [13 as libc::c_int as s8, 1 as libc::c_int as s8, 2 as libc::c_int as s8,
     3 as libc::c_int as s8, 4 as libc::c_int as s8, 9 as libc::c_int as s8,
     10 as libc::c_int as s8, 11 as libc::c_int as s8, 8 as libc::c_int as s8,
     7 as libc::c_int as s8, -(6 as libc::c_int) as s8];
static mut D_80854400: [s8; 8] =
    [13 as libc::c_int as s8, 2 as libc::c_int as s8, 4 as libc::c_int as s8,
     9 as libc::c_int as s8, 10 as libc::c_int as s8, 11 as libc::c_int as s8,
     8 as libc::c_int as s8, -(7 as libc::c_int) as s8];
static mut D_80854408: [s8; 9] =
    [13 as libc::c_int as s8, 2 as libc::c_int as s8, 4 as libc::c_int as s8,
     9 as libc::c_int as s8, 10 as libc::c_int as s8, 11 as libc::c_int as s8,
     12 as libc::c_int as s8, 8 as libc::c_int as s8,
     -(7 as libc::c_int) as s8];
static mut D_80854414: [s8; 1] = [-(7 as libc::c_int) as s8];
static mut D_80854418: [s8; 11] =
    [0 as libc::c_int as s8, 11 as libc::c_int as s8, 1 as libc::c_int as s8,
     2 as libc::c_int as s8, 3 as libc::c_int as s8, 5 as libc::c_int as s8,
     4 as libc::c_int as s8, 9 as libc::c_int as s8, 8 as libc::c_int as s8,
     7 as libc::c_int as s8, -(6 as libc::c_int) as s8];
static mut D_80854424: [s8; 12] =
    [0 as libc::c_int as s8, 11 as libc::c_int as s8, 1 as libc::c_int as s8,
     2 as libc::c_int as s8, 3 as libc::c_int as s8, 12 as libc::c_int as s8,
     5 as libc::c_int as s8, 4 as libc::c_int as s8, 9 as libc::c_int as s8,
     8 as libc::c_int as s8, 7 as libc::c_int as s8,
     -(6 as libc::c_int) as s8];
static mut D_80854430: [s8; 13] =
    [13 as libc::c_int as s8, 1 as libc::c_int as s8, 2 as libc::c_int as s8,
     3 as libc::c_int as s8, 12 as libc::c_int as s8, 5 as libc::c_int as s8,
     4 as libc::c_int as s8, 9 as libc::c_int as s8, 10 as libc::c_int as s8,
     11 as libc::c_int as s8, 8 as libc::c_int as s8, 7 as libc::c_int as s8,
     -(6 as libc::c_int) as s8];
static mut D_80854440: [s8; 3] =
    [10 as libc::c_int as s8, 8 as libc::c_int as s8,
     -(7 as libc::c_int) as s8];
static mut D_80854444: [s8; 4] =
    [0 as libc::c_int as s8, 12 as libc::c_int as s8, 5 as libc::c_int as s8,
     -(4 as libc::c_int) as s8];
static mut D_80854448:
       [Option<unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                   -> s32>; 14] =
    unsafe {
        [Some(func_8083B998 as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_80839800 as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083E5A8 as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083E0FC as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083B644 as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083F7BC as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083C1DC as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_80850224 as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083C544 as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083EB44 as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083BDBC as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083C2B0 as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_80838A14 as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32),
         Some(func_8083B040 as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> s32)]
    };
#[no_mangle]
pub unsafe extern "C" fn func_80837348(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut s8, mut arg3: s32)
 -> s32 {
    let mut i: s32 = 0;
    if (*this).stateFlags1 & 0x20000081 as libc::c_int as libc::c_uint == 0 {
        if arg3 != 0 as libc::c_int {
            D_808535E0 = func_80836670(this, globalCtx);
            if Some(func_8084E604 as
                        unsafe extern "C" fn(_: *mut Player,
                                             _: *mut GlobalContext) -> ()) ==
                   (*this).func_674 {
                return 1 as libc::c_int
            }
        }
        if func_8008F128(this) != 0 {
            (*this).unk_6AE =
                ((*this).unk_6AE as libc::c_int | 0x41 as libc::c_int) as
                    u16_0;
            return 1 as libc::c_int
        }
        if (*this).stateFlags1 & 0x100 as libc::c_int as libc::c_uint == 0 &&
               Some(func_80834A2C as
                        unsafe extern "C" fn(_: *mut Player,
                                             _: *mut GlobalContext) -> s32) !=
                   (*this).func_82C {
            while *arg2 as libc::c_int >= 0 as libc::c_int {
                if D_80854448[*arg2 as
                                  usize].expect("non-null function pointer")(this,
                                                                             globalCtx)
                       != 0 {
                    return 1 as libc::c_int
                }
                arg2 = arg2.offset(1)
            }
            if D_80854448[-(*arg2 as libc::c_int) as
                              usize].expect("non-null function pointer")(this,
                                                                         globalCtx)
                   != 0 {
                return 1 as libc::c_int
            }
        }
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_808374A0(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut skelAnime: *mut SkelAnime,
                                       mut arg3: f32_0) -> s32 {
    let mut sp24: f32_0 = 0.;
    let mut sp22: s16 = 0;
    if (*skelAnime).endFrame - arg3 <= (*skelAnime).curFrame {
        if func_80837348(globalCtx, this, D_80854418.as_mut_ptr(),
                         1 as libc::c_int) != 0 {
            return 0 as libc::c_int
        }
        if func_80837268(this, &mut sp24, &mut sp22, 0.018f32, globalCtx) != 0
           {
            return 1 as libc::c_int
        }
    }
    return -(1 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn func_80837530(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player, mut arg2: s32) {
    if arg2 != 0 as libc::c_int {
        (*this).unk_858 = 0.0f32
    } else { (*this).unk_858 = 0.5f32 }
    (*this).stateFlags1 |= 0x1000 as libc::c_int as libc::c_uint;
    if (*this).actor.category as libc::c_int == ACTORCAT_PLAYER as libc::c_int
       {
        Actor_Spawn(&mut (*globalCtx).actorCtx, globalCtx,
                    ACTOR_EN_M_THUNDER as libc::c_int as s16,
                    (*this).bodyPartsPos[0 as libc::c_int as usize].x,
                    (*this).bodyPartsPos[0 as libc::c_int as usize].y,
                    (*this).bodyPartsPos[0 as libc::c_int as usize].z,
                    0 as libc::c_int as s16, 0 as libc::c_int as s16,
                    0 as libc::c_int as s16,
                    (Player_GetSwordHeld(this) | arg2) as s16);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_808375D8(mut this: *mut Player) -> s32 {
    let mut sp3C: [s8; 4] = [0; 4];
    let mut iter: *mut s8 = 0 as *mut s8;
    let mut iter2: *mut s8 = 0 as *mut s8;
    let mut temp1: s8 = 0;
    let mut temp2: s8 = 0;
    let mut i: s32 = 0;
    if (*this).heldItemActionParam as libc::c_int ==
           PLAYER_AP_STICK as libc::c_int ||
           Player_HoldsBrokenKnife(this) != 0 {
        return 0 as libc::c_int
    }
    iter =
        &mut *(*this).unk_847.as_mut_ptr().offset(0 as libc::c_int as isize)
            as *mut s8;
    iter2 =
        &mut *sp3C.as_mut_ptr().offset(0 as libc::c_int as isize) as *mut s8;
    i = 0 as libc::c_int;
    while i < 4 as libc::c_int {
        *iter2 = *iter;
        if (*iter2 as libc::c_int) < 0 as libc::c_int {
            return 0 as libc::c_int
        }
        *iter2 = (*iter2 as libc::c_int * 2 as libc::c_int) as s8;
        i += 1;
        iter = iter.offset(1);
        iter2 = iter2.offset(1)
    }
    temp1 =
        (sp3C[0 as libc::c_int as usize] as libc::c_int -
             sp3C[1 as libc::c_int as usize] as libc::c_int) as s8;
    if (if temp1 as libc::c_int >= 0 as libc::c_int {
            temp1 as libc::c_int
        } else { -(temp1 as libc::c_int) }) < 10 as libc::c_int {
        return 0 as libc::c_int
    }
    iter2 =
        &mut *sp3C.as_mut_ptr().offset(1 as libc::c_int as isize) as *mut s8;
    i = 1 as libc::c_int;
    while i < 3 as libc::c_int {
        temp2 =
            (*iter2 as libc::c_int -
                 *iter2.offset(1 as libc::c_int as isize) as libc::c_int) as
                s8;
        if (if temp2 as libc::c_int >= 0 as libc::c_int {
                temp2 as libc::c_int
            } else { -(temp2 as libc::c_int) }) < 10 as libc::c_int ||
               (temp2 as libc::c_int * temp1 as libc::c_int) <
                   0 as libc::c_int {
            return 0 as libc::c_int
        }
        i += 1;
        iter2 = iter2.offset(1)
    }
    return 1 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80837704(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    let mut anim: *mut LinkAnimationHeader = 0 as *mut LinkAnimationHeader;
    if (*this).swordAnimation as libc::c_int >= 4 as libc::c_int &&
           ((*this).swordAnimation as libc::c_int) < 8 as libc::c_int {
        anim = D_80854358[Player_HoldsTwoHandedWeapon(this) as usize]
    } else { anim = D_80854350[Player_HoldsTwoHandedWeapon(this) as usize] }
    func_80832318(this);
    LinkAnimation_Change(globalCtx, &mut (*this).skelAnime, anim, 1.0f32,
                         8.0f32,
                         Animation_GetLastFrame(anim as *mut libc::c_void) as
                             f32_0, ANIMMODE_ONCE as libc::c_int as u8_0,
                         -9.0f32);
    func_80837530(globalCtx, this, 0x200 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn func_808377DC(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    func_80835C58(globalCtx, this,
                  Some(func_80844E68 as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  1 as libc::c_int);
    func_80837704(globalCtx, this);
}
static mut D_80854480: [s8; 4] =
    [12 as libc::c_int as s8, 4 as libc::c_int as s8, 4 as libc::c_int as s8,
     8 as libc::c_int as s8];
static mut D_80854484: [s8; 4] =
    [22 as libc::c_int as s8, 23 as libc::c_int as s8,
     22 as libc::c_int as s8, 23 as libc::c_int as s8];
#[no_mangle]
pub unsafe extern "C" fn func_80837818(mut this: *mut Player) -> s32 {
    let mut sp1C: s32 = (*this).unk_84B[(*this).unk_846 as usize] as s32;
    let mut sp18: s32 = 0;
    if (*this).heldItemActionParam as libc::c_int ==
           PLAYER_AP_HAMMER as libc::c_int {
        if sp1C < 0 as libc::c_int { sp1C = 0 as libc::c_int }
        sp18 = D_80854484[sp1C as usize] as s32;
        (*this).unk_845 = 0 as libc::c_int as u8_0
    } else {
        if func_808375D8(this) != 0 {
            sp18 = 24 as libc::c_int
        } else {
            if sp1C < 0 as libc::c_int {
                if func_80833BCC(this) != 0 {
                    sp18 = 0 as libc::c_int
                } else { sp18 = 4 as libc::c_int }
            } else {
                sp18 = D_80854480[sp1C as usize] as s32;
                if sp18 == 12 as libc::c_int {
                    (*this).stateFlags2 |=
                        0x40000000 as libc::c_int as libc::c_uint;
                    if func_80833BCC(this) == 0 { sp18 = 0 as libc::c_int }
                }
            }
            if (*this).heldItemActionParam as libc::c_int ==
                   PLAYER_AP_STICK as libc::c_int {
                sp18 = 0 as libc::c_int
            }
        }
        if Player_HoldsTwoHandedWeapon(this) != 0 { sp18 += 1 }
    }
    return sp18;
}
#[no_mangle]
pub unsafe extern "C" fn func_80837918(mut this: *mut Player,
                                       mut quadIndex: s32, mut flags: u32_0) {
    (*this).swordQuads[quadIndex as usize].info.toucher.dmgFlags = flags;
    if flags == 2 as libc::c_int as libc::c_uint {
        (*this).swordQuads[quadIndex as usize].info.toucherFlags =
            ((1 as libc::c_int) << 0 as libc::c_int |
                 (1 as libc::c_int) << 2 as libc::c_int |
                 (2 as libc::c_int) << 3 as libc::c_int) as u8_0
    } else {
        (*this).swordQuads[quadIndex as usize].info.toucherFlags =
            ((1 as libc::c_int) << 0 as libc::c_int |
                 (1 as libc::c_int) << 2 as libc::c_int) as u8_0
    };
}
static mut D_80854488: [[u32_0; 2]; 5] =
    [[0x200 as libc::c_int as u32_0, 0x8000000 as libc::c_int as u32_0],
     [0x100 as libc::c_int as u32_0, 0x2000000 as libc::c_int as u32_0],
     [0x400 as libc::c_int as u32_0, 0x4000000 as libc::c_int as u32_0],
     [0x2 as libc::c_int as u32_0, 0x8000000 as libc::c_int as u32_0],
     [0x40 as libc::c_int as u32_0, 0x40000000 as libc::c_int as u32_0]];
#[no_mangle]
pub unsafe extern "C" fn func_80837948(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player, mut arg2: s32) {
    let mut pad: s32 = 0;
    let mut flags: u32_0 = 0;
    let mut temp: s32 = 0;
    func_80835C58(globalCtx, this,
                  Some(func_808502D0 as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  0 as libc::c_int);
    (*this).unk_844 = 8 as libc::c_int as s8;
    if arg2 < 18 as libc::c_int || arg2 >= 20 as libc::c_int {
        func_80832318(this);
    }
    if arg2 != (*this).swordAnimation as libc::c_int ||
           !(((*this).unk_845 as libc::c_int) < 3 as libc::c_int) {
        (*this).unk_845 = 0 as libc::c_int as u8_0
    }
    (*this).unk_845 = (*this).unk_845.wrapping_add(1);
    if (*this).unk_845 as libc::c_int >= 3 as libc::c_int {
        arg2 += 2 as libc::c_int
    }
    (*this).swordAnimation = arg2 as s8;
    func_808322D0(globalCtx, this, D_80854190[arg2 as usize].unk_00);
    if arg2 != 16 as libc::c_int && arg2 != 17 as libc::c_int {
        func_80832F54(globalCtx, this, 0x209 as libc::c_int);
    }
    (*this).currentYaw = (*this).actor.shape.rot.y;
    if Player_HoldsBrokenKnife(this) != 0 {
        temp = 1 as libc::c_int
    } else { temp = Player_GetSwordHeld(this) - 1 as libc::c_int }
    if arg2 >= 16 as libc::c_int && arg2 < 20 as libc::c_int {
        flags = D_80854488[temp as usize][1 as libc::c_int as usize]
    } else { flags = D_80854488[temp as usize][0 as libc::c_int as usize] }
    func_80837918(this, 0 as libc::c_int, flags);
    func_80837918(this, 1 as libc::c_int, flags);
}
#[no_mangle]
pub unsafe extern "C" fn func_80837AE0(mut this: *mut Player,
                                       mut timer: s32) {
    if (*this).invincibilityTimer as libc::c_int >= 0 as libc::c_int {
        (*this).invincibilityTimer = timer as s8;
        (*this).unk_88F = 0 as libc::c_int as u8_0
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80837AFC(mut this: *mut Player,
                                       mut timer: s32) {
    if (*this).invincibilityTimer as libc::c_int > timer {
        (*this).invincibilityTimer = timer as s8
    }
    (*this).unk_88F = 0 as libc::c_int as u8_0;
}
#[no_mangle]
pub unsafe extern "C" fn func_80837B18(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player, mut damage: s32)
 -> s32 {
    if (*this).invincibilityTimer as libc::c_int != 0 as libc::c_int ||
           (*this).actor.category as libc::c_int !=
               ACTORCAT_PLAYER as libc::c_int {
        return 1 as libc::c_int
    }
    return Health_ChangeBy(globalCtx, damage as s16);
}
#[no_mangle]
pub unsafe extern "C" fn func_80837B60(mut this: *mut Player) {
    (*this).skelAnime.prevTransl =
        *(*this).skelAnime.jointTable.offset(0 as libc::c_int as isize);
    func_80832E48(this, 3 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn func_80837B9C(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    func_80835C58(globalCtx, this,
                  Some(func_8084411C as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  0 as libc::c_int);
    func_80832284(globalCtx, this, &mut gPlayerAnim_003040);
    (*this).unk_850 = 1 as libc::c_int as s16;
    if (*this).unk_6AD as libc::c_int != 3 as libc::c_int {
        (*this).unk_6AD = 0 as libc::c_int as u8_0
    };
}
static mut D_808544B0: [*mut LinkAnimationHeader; 8] =
    unsafe {
        [&gPlayerAnim_002F80 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002F78 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002DE0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002DD8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002F70 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002528 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002DC8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0024F0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
#[no_mangle]
pub unsafe extern "C" fn func_80837C0C(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player, mut arg2: s32,
                                       mut arg3: f32_0, mut arg4: f32_0,
                                       mut arg5: s16, mut arg6: s32) {
    let mut sp2C: *mut LinkAnimationHeader = 0 as *mut LinkAnimationHeader;
    let mut sp28: *mut *mut LinkAnimationHeader =
        0 as *mut *mut LinkAnimationHeader;
    if (*this).stateFlags1 & 0x2000 as libc::c_int as libc::c_uint != 0 {
        func_80837B60(this);
    }
    (*this).unk_890 = 0 as libc::c_int as u8_0;
    func_8002F7DC(&mut (*this).actor, 0x83f as libc::c_int as u16_0);
    if func_80837B18(globalCtx, this,
                     0 as libc::c_int -
                         (*this).actor.colChkInfo.damage as libc::c_int) == 0
       {
        (*this).stateFlags2 &= !(0x80 as libc::c_int) as libc::c_uint;
        if (*this).actor.bgCheckFlags as libc::c_int & 1 as libc::c_int == 0
               &&
               (*this).stateFlags1 & 0x8000000 as libc::c_int as libc::c_uint
                   == 0 {
            func_80837B9C(this, globalCtx);
        }
        return
    }
    func_80837AE0(this, arg6);
    if arg2 == 3 as libc::c_int {
        func_80835C58(globalCtx, this,
                      Some(func_8084FB10 as
                               unsafe extern "C" fn(_: *mut Player,
                                                    _: *mut GlobalContext)
                                   -> ()), 0 as libc::c_int);
        sp2C = &mut gPlayerAnim_002FD0;
        func_80832224(this);
        func_8083264C(this, 255 as libc::c_int, 10 as libc::c_int,
                      40 as libc::c_int, 0 as libc::c_int);
        func_8002F7DC(&mut (*this).actor, 0x874 as libc::c_int as u16_0);
        func_80832698(this, 0x6806 as libc::c_int as u16_0);
    } else if arg2 == 4 as libc::c_int {
        func_80835C58(globalCtx, this,
                      Some(func_8084FBF4 as
                               unsafe extern "C" fn(_: *mut Player,
                                                    _: *mut GlobalContext)
                                   -> ()), 0 as libc::c_int);
        func_8083264C(this, 255 as libc::c_int, 80 as libc::c_int,
                      150 as libc::c_int, 0 as libc::c_int);
        func_808322A4(globalCtx, this, &mut gPlayerAnim_002F00);
        func_80832224(this);
        (*this).unk_850 = 20 as libc::c_int as s16
    } else {
        arg5 =
            (arg5 as libc::c_int - (*this).actor.shape.rot.y as libc::c_int)
                as s16;
        if (*this).stateFlags1 & 0x8000000 as libc::c_int as libc::c_uint != 0
           {
            func_80835C58(globalCtx, this,
                          Some(func_8084E30C as
                                   unsafe extern "C" fn(_: *mut Player,
                                                        _: *mut GlobalContext)
                                       -> ()), 0 as libc::c_int);
            func_8083264C(this, 180 as libc::c_int, 20 as libc::c_int,
                          50 as libc::c_int, 0 as libc::c_int);
            (*this).linearVelocity = 4.0f32;
            (*this).actor.velocity.y = 0.0f32;
            sp2C = &mut gPlayerAnim_003320;
            func_80832698(this, 0x6805 as libc::c_int as u16_0);
        } else if arg2 == 1 as libc::c_int || arg2 == 2 as libc::c_int ||
                      (*this).actor.bgCheckFlags as libc::c_int &
                          1 as libc::c_int == 0 ||
                      (*this).stateFlags1 &
                          0x206000 as libc::c_int as libc::c_uint != 0 {
            func_80835C58(globalCtx, this,
                          Some(func_8084377C as
                                   unsafe extern "C" fn(_: *mut Player,
                                                        _: *mut GlobalContext)
                                       -> ()), 0 as libc::c_int);
            (*this).stateFlags3 =
                ((*this).stateFlags3 as libc::c_int | 2 as libc::c_int) as
                    u8_0;
            func_8083264C(this, 255 as libc::c_int, 20 as libc::c_int,
                          150 as libc::c_int, 0 as libc::c_int);
            func_80832224(this);
            if arg2 == 2 as libc::c_int {
                (*this).unk_850 = 4 as libc::c_int as s16;
                (*this).actor.speedXZ = 3.0f32;
                (*this).linearVelocity = 3.0f32;
                (*this).actor.velocity.y = 6.0f32;
                func_80832C2C(globalCtx, this,
                              D_8085395C[(*this).modelAnimType as usize]);
                func_80832698(this, 0x6805 as libc::c_int as u16_0);
            } else {
                (*this).actor.speedXZ = arg3;
                (*this).linearVelocity = arg3;
                (*this).actor.velocity.y = arg4;
                if (if arg5 as libc::c_int >= 0 as libc::c_int {
                        arg5 as libc::c_int
                    } else { -(arg5 as libc::c_int) }) > 0x4000 as libc::c_int
                   {
                    sp2C = &mut gPlayerAnim_002F58
                } else { sp2C = &mut gPlayerAnim_002DB0 }
                if (*this).actor.category as libc::c_int !=
                       ACTORCAT_PLAYER as libc::c_int &&
                       (*this).actor.colChkInfo.health as libc::c_int ==
                           0 as libc::c_int {
                    func_80832698(this, 0x681d as libc::c_int as u16_0);
                } else {
                    func_80832698(this, 0x6808 as libc::c_int as u16_0);
                }
            }
            (*this).hoverBootsTimer = 0 as libc::c_int as u8_0;
            (*this).actor.bgCheckFlags =
                ((*this).actor.bgCheckFlags as libc::c_int &
                     !(1 as libc::c_int)) as u16_0
        } else {
            if (*this).linearVelocity > 4.0f32 && func_8008E9C4(this) == 0 {
                (*this).unk_890 = 20 as libc::c_int as u8_0;
                func_8083264C(this, 120 as libc::c_int, 20 as libc::c_int,
                              10 as libc::c_int, 0 as libc::c_int);
                func_80832698(this, 0x6805 as libc::c_int as u16_0);
                return
            }
            sp28 = D_808544B0.as_mut_ptr();
            func_80835C58(globalCtx, this,
                          Some(func_8084370C as
                                   unsafe extern "C" fn(_: *mut Player,
                                                        _: *mut GlobalContext)
                                       -> ()), 0 as libc::c_int);
            func_80833C3C(this);
            if ((*this).actor.colChkInfo.damage as libc::c_int) <
                   5 as libc::c_int {
                func_8083264C(this, 120 as libc::c_int, 20 as libc::c_int,
                              10 as libc::c_int, 0 as libc::c_int);
            } else {
                func_8083264C(this, 180 as libc::c_int, 20 as libc::c_int,
                              100 as libc::c_int, 0 as libc::c_int);
                (*this).linearVelocity = 23.0f32;
                sp28 = sp28.offset(4 as libc::c_int as isize)
            }
            if (if arg5 as libc::c_int >= 0 as libc::c_int {
                    arg5 as libc::c_int
                } else { -(arg5 as libc::c_int) }) <= 0x4000 as libc::c_int {
                sp28 = sp28.offset(2 as libc::c_int as isize)
            }
            if func_8008E9C4(this) != 0 {
                sp28 = sp28.offset(1 as libc::c_int as isize)
            }
            sp2C = *sp28;
            func_80832698(this, 0x6805 as libc::c_int as u16_0);
        }
        (*this).actor.shape.rot.y =
            ((*this).actor.shape.rot.y as libc::c_int + arg5 as libc::c_int)
                as s16;
        (*this).currentYaw = (*this).actor.shape.rot.y;
        (*this).actor.world.rot.y = (*this).actor.shape.rot.y;
        if (if arg5 as libc::c_int >= 0 as libc::c_int {
                arg5 as libc::c_int
            } else { -(arg5 as libc::c_int) }) > 0x4000 as libc::c_int {
            (*this).actor.shape.rot.y =
                ((*this).actor.shape.rot.y as libc::c_int +
                     0x8000 as libc::c_int) as s16
        }
    }
    func_80832564(globalCtx, this);
    (*this).stateFlags1 |= 0x4000000 as libc::c_int as libc::c_uint;
    if !sp2C.is_null() { func_808322D0(globalCtx, this, sp2C); };
}
#[no_mangle]
pub unsafe extern "C" fn func_80838144(mut arg0: s32) -> s32 {
    let mut temp: s32 = arg0 - 2 as libc::c_int;
    if temp >= 0 as libc::c_int && temp < 2 as libc::c_int {
        return temp
    } else { return -(1 as libc::c_int) };
}
#[no_mangle]
pub unsafe extern "C" fn func_8083816C(mut arg0: s32) -> s32 {
    return (arg0 == 4 as libc::c_int || arg0 == 7 as libc::c_int ||
                arg0 == 12 as libc::c_int) as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083819C(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    if (*this).currentShield as libc::c_int ==
           PLAYER_SHIELD_DEKU as libc::c_int {
        Actor_Spawn(&mut (*globalCtx).actorCtx, globalCtx,
                    ACTOR_ITEM_SHIELD as libc::c_int as s16,
                    (*this).actor.world.pos.x, (*this).actor.world.pos.y,
                    (*this).actor.world.pos.z, 0 as libc::c_int as s16,
                    0 as libc::c_int as s16, 0 as libc::c_int as s16,
                    1 as libc::c_int as s16);
        Inventory_DeleteEquipment(globalCtx,
                                  EQUIP_SHIELD as libc::c_int as s16);
        Message_StartTextbox(globalCtx, 0x305f as libc::c_int as u16_0,
                             0 as *mut Actor);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8083821C(mut this: *mut Player) {
    let mut i: s32 = 0;
    // clang-format off
    i = 0 as libc::c_int;
    while i < 18 as libc::c_int {
        (*this).flameTimers[i as usize] =
            Rand_S16Offset(0 as libc::c_int as s16, 200 as libc::c_int as s16)
                as u8_0;
        i += 1
    }
    // clang-format on
    (*this).isBurning = 1 as libc::c_int as u8_0;
}
#[no_mangle]
pub unsafe extern "C" fn func_80838280(mut this: *mut Player) {
    if (*this).actor.colChkInfo.acHitEffect as libc::c_int == 1 as libc::c_int
       {
        func_8083821C(this);
    }
    func_80832698(this, 0x6808 as libc::c_int as u16_0);
}
#[no_mangle]
pub unsafe extern "C" fn func_808382BC(mut this: *mut Player) {
    if (*this).invincibilityTimer as libc::c_int >= 0 as libc::c_int &&
           ((*this).invincibilityTimer as libc::c_int) < 20 as libc::c_int {
        (*this).invincibilityTimer = 20 as libc::c_int as s8
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_808382DC(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    let mut pad: s32 = 0;
    let mut sp68: s32 = 0 as libc::c_int;
    let mut sp64: s32 = 0;
    if (*this).unk_A86 as libc::c_int != 0 as libc::c_int {
        if Player_InBlockingCsMode(globalCtx, this) == 0 {
            Player_InflictDamage(globalCtx, -(16 as libc::c_int));
            (*this).unk_A86 = 0 as libc::c_int as s8
        }
    } else {
        sp68 =
            (Player_GetHeight(this) - 8.0f32 <
                 (*this).unk_6C4 * (*this).actor.scale.y) as libc::c_int;
        if sp68 != 0 ||
               (*this).actor.bgCheckFlags as libc::c_int &
                   0x100 as libc::c_int != 0 || D_808535E4 == 9 as libc::c_int
               || (*this).stateFlags2 & 0x80000000 as libc::c_uint != 0 {
            func_80832698(this, 0x6805 as libc::c_int as u16_0);
            if sp68 != 0 {
                Gameplay_TriggerRespawn(globalCtx);
                func_800994A0(globalCtx);
            } else {
                // Special case for getting crushed in Forest Temple's Checkboard Ceiling Hall or Shadow Temple's
                // Falling Spike Trap Room, to respawn the player in a specific place
                if (*globalCtx).sceneNum as libc::c_int ==
                       SCENE_BMORI1 as libc::c_int &&
                       (*globalCtx).roomCtx.curRoom.num as libc::c_int ==
                           15 as libc::c_int ||
                       (*globalCtx).sceneNum as libc::c_int ==
                           SCENE_HAKADAN as libc::c_int &&
                           (*globalCtx).roomCtx.curRoom.num as libc::c_int ==
                               10 as libc::c_int {
                    static mut checkboardCeilingRespawn: SpecialRespawnInfo =
                        {
                            let mut init =
                                SpecialRespawnInfo{pos:
                                                       {
                                                           let mut init =
                                                               Vec3f{x:
                                                                         1992.0f32,
                                                                     y:
                                                                         403.0f32,
                                                                     z:
                                                                         -3432.0f32,};
                                                           init
                                                       },
                                                   yaw:
                                                       0 as libc::c_int as
                                                           s16,};
                            init
                        };
                    static mut fallingSpikeTrapRespawn: SpecialRespawnInfo =
                        {
                            let mut init =
                                SpecialRespawnInfo{pos:
                                                       {
                                                           let mut init =
                                                               Vec3f{x:
                                                                         1200.0f32,
                                                                     y:
                                                                         -1343.0f32,
                                                                     z:
                                                                         3850.0f32,};
                                                           init
                                                       },
                                                   yaw:
                                                       0 as libc::c_int as
                                                           s16,};
                            init
                        };
                    let mut respawnInfo: *mut SpecialRespawnInfo =
                        0 as *mut SpecialRespawnInfo;
                    if (*globalCtx).sceneNum as libc::c_int ==
                           SCENE_BMORI1 as libc::c_int {
                        respawnInfo = &mut checkboardCeilingRespawn
                    } else { respawnInfo = &mut fallingSpikeTrapRespawn }
                    Gameplay_SetupRespawnPoint(globalCtx,
                                               RESPAWN_MODE_DOWN as
                                                   libc::c_int,
                                               0xdff as libc::c_int);
                    gSaveContext.respawn[RESPAWN_MODE_DOWN as libc::c_int as
                                             usize].pos = (*respawnInfo).pos;
                    gSaveContext.respawn[RESPAWN_MODE_DOWN as libc::c_int as
                                             usize].yaw = (*respawnInfo).yaw
                }
                Gameplay_TriggerVoidOut(globalCtx);
            }
            func_80832698(this, 0x680c as libc::c_int as u16_0);
            (*globalCtx).unk_11DE9 = 1 as libc::c_int as u8_0;
            func_80078884(0x5801 as libc::c_int as u16_0);
        } else if (*this).unk_8A1 as libc::c_int != 0 as libc::c_int &&
                      ((*this).unk_8A1 as libc::c_int >= 2 as libc::c_int ||
                           (*this).invincibilityTimer as libc::c_int ==
                               0 as libc::c_int) {
            let mut sp5C: [u8_0; 3] =
                [2 as libc::c_int as u8_0, 1 as libc::c_int as u8_0,
                 1 as libc::c_int as u8_0];
            func_80838280(this);
            if (*this).unk_8A1 as libc::c_int == 3 as libc::c_int {
                (*this).shockTimer = 40 as libc::c_int as u8_0
            }
            (*this).actor.colChkInfo.damage =
                ((*this).actor.colChkInfo.damage as libc::c_int +
                     (*this).unk_8A0 as libc::c_int) as u8_0;
            func_80837C0C(globalCtx, this,
                          sp5C[((*this).unk_8A1 as libc::c_int -
                                    1 as libc::c_int) as usize] as s32,
                          (*this).unk_8A4, (*this).unk_8A8, (*this).unk_8A2,
                          20 as libc::c_int);
        } else {
            sp64 =
                ((*this).shieldQuad.base.acFlags as libc::c_int &
                     (1 as libc::c_int) << 7 as libc::c_int !=
                     0 as libc::c_int) as libc::c_int;
            // ! @bug The second set of conditions here seems intended as a way for Link to "block" hits by rolling.
            // However, `Collider.atFlags` is a byte so the flag check at the end is incorrect and cannot work.
            // Additionally, `Collider.atHit` can never be set while already colliding as AC, so it's also bugged.
            // This behavior was later fixed in MM, most likely by removing both the `atHit` and `atFlags` checks.
            if sp64 != 0 ||
                   ((*this).invincibilityTimer as libc::c_int) <
                       0 as libc::c_int &&
                       (*this).cylinder.base.acFlags as libc::c_int &
                           (1 as libc::c_int) << 1 as libc::c_int != 0 &&
                       !(*this).cylinder.info.atHit.is_null() &&
                       (*(*this).cylinder.info.atHit).atFlags as libc::c_int &
                           0x20000000 as libc::c_int != 0 {
                func_8083264C(this, 180 as libc::c_int, 20 as libc::c_int,
                              100 as libc::c_int,
                              0 as libc::c_int); // Can also be DoorKiller*
                if Player_IsChildWithHylianShield(this) == 0 {
                    if (*this).invincibilityTimer as libc::c_int >=
                           0 as libc::c_int {
                        let mut anim: *mut LinkAnimationHeader =
                            0 as *mut LinkAnimationHeader;
                        let mut sp54: s32 =
                            (Some(func_80843188 as
                                      unsafe extern "C" fn(_: *mut Player,
                                                           _:
                                                               *mut GlobalContext)
                                          -> ()) == (*this).func_674) as
                                libc::c_int;
                        if func_808332B8(this) == 0 {
                            func_80835C58(globalCtx, this,
                                          Some(func_808435C4 as
                                                   unsafe extern "C" fn(_:
                                                                            *mut Player,
                                                                        _:
                                                                            *mut GlobalContext)
                                                       -> ()),
                                          0 as libc::c_int);
                        }
                        (*this).unk_84F = sp54 as s8;
                        if (*this).unk_84F == 0 {
                            func_80833638(this,
                                          Some(func_80834BD4 as
                                                   unsafe extern "C" fn(_:
                                                                            *mut Player,
                                                                        _:
                                                                            *mut GlobalContext)
                                                       -> s32));
                            if (*this).unk_870 < 0.5f32 {
                                anim =
                                    D_808543BC[Player_HoldsTwoHandedWeapon(this)
                                                   as usize]
                            } else {
                                anim =
                                    D_808543B4[Player_HoldsTwoHandedWeapon(this)
                                                   as usize]
                            }
                            LinkAnimation_PlayOnce(globalCtx,
                                                   &mut (*this).skelAnime2,
                                                   anim);
                        } else {
                            func_80832264(globalCtx, this,
                                          D_808543C4[Player_HoldsTwoHandedWeapon(this)
                                                         as usize]);
                        }
                    }
                    if (*this).stateFlags1 &
                           0x206000 as libc::c_int as libc::c_uint == 0 {
                        (*this).linearVelocity = -18.0f32;
                        (*this).currentYaw = (*this).actor.shape.rot.y
                    }
                }
                if sp64 != 0 &&
                       (*(*this).shieldQuad.info.acHitInfo).toucher.effect as
                           libc::c_int == 1 as libc::c_int {
                    func_8083819C(this, globalCtx);
                }
                return 0 as libc::c_int
            }
            if (*this).unk_A87 as libc::c_int != 0 as libc::c_int ||
                   (*this).invincibilityTimer as libc::c_int >
                       0 as libc::c_int ||
                   (*this).stateFlags1 &
                       0x4000000 as libc::c_int as libc::c_uint != 0 ||
                   (*this).csMode as libc::c_int != 0 as libc::c_int ||
                   (*this).swordQuads[0 as libc::c_int as usize].base.atFlags
                       as libc::c_int & (1 as libc::c_int) << 1 as libc::c_int
                       != 0 ||
                   (*this).swordQuads[1 as libc::c_int as usize].base.atFlags
                       as libc::c_int & (1 as libc::c_int) << 1 as libc::c_int
                       != 0 {
                return 0 as libc::c_int
            }
            if (*this).cylinder.base.acFlags as libc::c_int &
                   (1 as libc::c_int) << 1 as libc::c_int != 0 {
                let mut ac: *mut Actor = (*this).cylinder.base.ac;
                let mut sp4C: s32 = 0;
                if (*ac).flags &
                       ((1 as libc::c_int) << 24 as libc::c_int) as
                           libc::c_uint != 0 {
                    func_8002F7DC(&mut (*this).actor,
                                  0x83e as libc::c_int as u16_0);
                }
                if (*this).stateFlags1 &
                       0x8000000 as libc::c_int as libc::c_uint != 0 {
                    sp4C = 0 as libc::c_int
                } else if (*this).actor.colChkInfo.acHitEffect as libc::c_int
                              == 2 as libc::c_int {
                    sp4C = 3 as libc::c_int
                } else if (*this).actor.colChkInfo.acHitEffect as libc::c_int
                              == 3 as libc::c_int {
                    sp4C = 4 as libc::c_int
                } else if (*this).actor.colChkInfo.acHitEffect as libc::c_int
                              == 4 as libc::c_int {
                    sp4C = 1 as libc::c_int
                } else { func_80838280(this); sp4C = 0 as libc::c_int }
                func_80837C0C(globalCtx, this, sp4C, 4.0f32, 5.0f32,
                              Actor_WorldYawTowardActor(ac,
                                                        &mut (*this).actor),
                              20 as libc::c_int);
            } else if (*this).invincibilityTimer as libc::c_int !=
                          0 as libc::c_int {
                return 0 as libc::c_int
            } else {
                static mut D_808544F4: [u8_0; 2] =
                    [120 as libc::c_int as u8_0, 60 as libc::c_int as u8_0];
                let mut sp48: s32 = func_80838144(D_808535E4);
                if !(*this).actor.wallPoly.is_null() &&
                       SurfaceType_IsWallDamage(&mut (*globalCtx).colCtx,
                                                (*this).actor.wallPoly,
                                                (*this).actor.wallBgId as s32)
                           != 0 ||
                       sp48 >= 0 as libc::c_int &&
                           SurfaceType_IsWallDamage(&mut (*globalCtx).colCtx,
                                                    (*this).actor.floorPoly,
                                                    (*this).actor.floorBgId as
                                                        s32) != 0 &&
                           (*this).unk_A79 as libc::c_int >=
                               D_808544F4[sp48 as usize] as libc::c_int ||
                       sp48 >= 0 as libc::c_int &&
                           ((*this).currentTunic as libc::c_int !=
                                PLAYER_TUNIC_GORON as libc::c_int ||
                                (*this).unk_A79 as libc::c_int >=
                                    D_808544F4[sp48 as usize] as libc::c_int)
                   {
                    (*this).unk_A79 = 0 as libc::c_int as u8_0;
                    (*this).actor.colChkInfo.damage =
                        4 as libc::c_int as u8_0;
                    func_80837C0C(globalCtx, this, 0 as libc::c_int, 4.0f32,
                                  5.0f32, (*this).actor.shape.rot.y,
                                  20 as libc::c_int);
                } else { return 0 as libc::c_int }
            }
        }
    }
    return 1 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80838940(mut this: *mut Player,
                                       mut anim: *mut LinkAnimationHeader,
                                       mut arg2: f32_0,
                                       mut globalCtx: *mut GlobalContext,
                                       mut sfxId: u16_0) {
    func_80835C58(globalCtx, this,
                  Some(func_8084411C as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  1 as libc::c_int);
    if !anim.is_null() { func_808322D0(globalCtx, this, anim); }
    (*this).actor.velocity.y = arg2 * D_808535E8;
    (*this).hoverBootsTimer = 0 as libc::c_int as u8_0;
    (*this).actor.bgCheckFlags =
        ((*this).actor.bgCheckFlags as libc::c_int & !(1 as libc::c_int)) as
            u16_0;
    func_80832854(this);
    func_80832698(this, sfxId);
    (*this).stateFlags1 |= 0x40000 as libc::c_int as libc::c_uint;
}
#[no_mangle]
pub unsafe extern "C" fn func_808389E8(mut this: *mut Player,
                                       mut anim: *mut LinkAnimationHeader,
                                       mut arg2: f32_0,
                                       mut globalCtx: *mut GlobalContext) {
    func_80838940(this, anim, arg2, globalCtx,
                  0x6800 as libc::c_int as u16_0);
}
#[no_mangle]
pub unsafe extern "C" fn func_80838A14(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    let mut sp3C: s32 = 0;
    let mut sp38: *mut LinkAnimationHeader = 0 as *mut LinkAnimationHeader;
    let mut sp34: f32_0 = 0.;
    let mut temp: f32_0 = 0.;
    let mut sp2C: f32_0 = 0.;
    let mut sp28: f32_0 = 0.;
    let mut sp24: f32_0 = 0.;
    if (*this).stateFlags1 & 0x800 as libc::c_int as libc::c_uint == 0 &&
           (*this).unk_88C as libc::c_int >= 2 as libc::c_int &&
           ((*this).stateFlags1 & 0x8000000 as libc::c_int as libc::c_uint ==
                0 || (*(*this).ageProperties).unk_14 > (*this).wallHeight) {
        sp3C = 0 as libc::c_int;
        if func_808332B8(this) != 0 {
            if (*this).actor.yDistToWater < 50.0f32 {
                if ((*this).unk_88C as libc::c_int) < 2 as libc::c_int ||
                       (*this).wallHeight > (*(*this).ageProperties).unk_10 {
                    return 0 as libc::c_int
                }
            } else if (*this).currentBoots as libc::c_int !=
                          PLAYER_BOOTS_IRON as libc::c_int ||
                          (*this).unk_88C as libc::c_int > 2 as libc::c_int {
                return 0 as libc::c_int
            }
        } else if (*this).actor.bgCheckFlags as libc::c_int & 1 as libc::c_int
                      == 0 ||
                      (*(*this).ageProperties).unk_14 <= (*this).wallHeight &&
                          (*this).stateFlags1 &
                              0x8000000 as libc::c_int as libc::c_uint != 0 {
            return 0 as libc::c_int
        }
        if (*this).actor.wallBgId as libc::c_int != 50 as libc::c_int &&
               D_808535F0 & 0x40 as libc::c_int as libc::c_uint != 0 {
            if (*this).unk_88D as libc::c_int >= 6 as libc::c_int {
                (*this).stateFlags2 |= 4 as libc::c_int as libc::c_uint;
                if !((*sControlInput).press.button as libc::c_int |
                         !(0x8000 as libc::c_int)) == 0 as libc::c_int {
                    sp3C = 1 as libc::c_int
                }
            }
        } else if (*this).unk_88D as libc::c_int >= 6 as libc::c_int ||
                      !((*sControlInput).press.button as libc::c_int |
                            !(0x8000 as libc::c_int)) == 0 as libc::c_int {
            sp3C = 1 as libc::c_int
        }
        if sp3C != 0 as libc::c_int {
            func_80835C58(globalCtx, this,
                          Some(func_80845668 as
                                   unsafe extern "C" fn(_: *mut Player,
                                                        _: *mut GlobalContext)
                                       -> ()), 0 as libc::c_int);
            (*this).stateFlags1 |= 0x40000 as libc::c_int as libc::c_uint;
            sp34 = (*this).wallHeight;
            if (*(*this).ageProperties).unk_14 <= sp34 {
                sp38 = &mut gPlayerAnim_002D48;
                (*this).linearVelocity = 1.0f32
            } else {
                sp2C =
                    (*(*this).actor.wallPoly).normal.x as libc::c_int as
                        libc::c_float * (1.0f32 / 32767.0f32);
                sp28 =
                    (*(*this).actor.wallPoly).normal.z as libc::c_int as
                        libc::c_float * (1.0f32 / 32767.0f32);
                sp24 = (*this).wallDistance + 0.5f32;
                (*this).stateFlags1 |= 0x4000 as libc::c_int as libc::c_uint;
                if func_808332B8(this) != 0 {
                    sp38 = &mut gPlayerAnim_0032E8;
                    sp34 -= 60.0f32 * (*(*this).ageProperties).unk_08;
                    (*this).stateFlags1 &=
                        !(0x8000000 as libc::c_int) as libc::c_uint
                } else if (*(*this).ageProperties).unk_18 <= sp34 {
                    sp38 = &mut gPlayerAnim_002D40;
                    sp34 -= 59.0f32 * (*(*this).ageProperties).unk_08
                } else {
                    sp38 = &mut gPlayerAnim_002D38;
                    sp34 -= 41.0f32 * (*(*this).ageProperties).unk_08
                }
                (*this).actor.shape.yOffset -= sp34 * 100.0f32;
                (*this).actor.world.pos.x -= sp24 * sp2C;
                (*this).actor.world.pos.y += (*this).wallHeight;
                (*this).actor.world.pos.z -= sp24 * sp28;
                func_80832224(this);
            }
            (*this).actor.bgCheckFlags =
                ((*this).actor.bgCheckFlags as libc::c_int | 1 as libc::c_int)
                    as u16_0;
            LinkAnimation_PlayOnceSetSpeed(globalCtx, &mut (*this).skelAnime,
                                           sp38, 1.3f32);
            AnimationContext_DisableQueue(globalCtx);
            (*this).currentYaw =
                ((*this).actor.wallYaw as libc::c_int + 0x8000 as libc::c_int)
                    as s16;
            (*this).actor.shape.rot.y = (*this).currentYaw;
            return 1 as libc::c_int
        }
    } else if (*this).actor.bgCheckFlags as libc::c_int & 1 as libc::c_int !=
                  0 && (*this).unk_88C as libc::c_int == 1 as libc::c_int &&
                  (*this).unk_88D as libc::c_int >= 3 as libc::c_int {
        temp = (*this).wallHeight * 0.08f32 + 5.5f32;
        func_808389E8(this, &mut gPlayerAnim_002FE0, temp, globalCtx);
        (*this).linearVelocity = 2.5f32;
        return 1 as libc::c_int
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80838E70(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player, mut arg2: f32_0,
                                       mut arg3: s16) {
    func_80835C58(globalCtx, this,
                  Some(func_80845CA4 as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  0 as libc::c_int);
    func_80832440(globalCtx, this);
    (*this).unk_84F = 1 as libc::c_int as s8;
    (*this).unk_850 = 1 as libc::c_int as s16;
    (*this).unk_450.x = Math_SinS(arg3) * arg2 + (*this).actor.world.pos.x;
    (*this).unk_450.z = Math_CosS(arg3) * arg2 + (*this).actor.world.pos.z;
    func_80832264(globalCtx, this, func_80833338(this));
}
#[no_mangle]
pub unsafe extern "C" fn func_80838F18(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    func_80835C58(globalCtx, this,
                  Some(func_8084D610 as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  0 as libc::c_int);
    func_80832C6C(globalCtx, this, &mut gPlayerAnim_003328);
}
#[no_mangle]
pub unsafe extern "C" fn func_80838F5C(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    func_80835C58(globalCtx, this,
                  Some(func_8084F88C as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  0 as libc::c_int);
    (*this).stateFlags1 |= 0xa0000000 as libc::c_uint;
    Camera_ChangeSetting(Gameplay_GetCamera(globalCtx,
                                            0 as libc::c_int as s16),
                         CAM_SET_FREE0 as libc::c_int as s16);
}
#[no_mangle]
pub unsafe extern "C" fn func_80838FB8(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) -> s32 {
    if (*globalCtx).sceneLoadFlag as libc::c_int == 0 as libc::c_int &&
           (*this).stateFlags1 & 0x80000000 as libc::c_uint != 0 {
        func_80838F5C(globalCtx, this);
        func_80832284(globalCtx, this, &mut gPlayerAnim_003040);
        func_80832698(this, 0x6807 as libc::c_int as u16_0);
        func_800788CC(0x5803 as libc::c_int as u16_0);
        return 1 as libc::c_int
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub static mut D_808544F8: [s16; 14] =
    [0x45b as libc::c_int as s16, 0x482 as libc::c_int as s16,
     0x340 as libc::c_int as s16, 0x44b as libc::c_int as s16,
     0x2a2 as libc::c_int as s16, 0x201 as libc::c_int as s16,
     0x3b8 as libc::c_int as s16, 0x4ee as libc::c_int as s16,
     0x3c0 as libc::c_int as s16, 0x463 as libc::c_int as s16,
     0x1cd as libc::c_int as s16, 0x394 as libc::c_int as s16,
     0x340 as libc::c_int as s16, 0x57c as libc::c_int as s16];
#[no_mangle]
pub static mut D_80854514: [u8_0; 6] =
    [11 as libc::c_int as u8_0, 9 as libc::c_int as u8_0,
     3 as libc::c_int as u8_0, 5 as libc::c_int as u8_0,
     7 as libc::c_int as u8_0, 0 as libc::c_int as u8_0];
#[no_mangle]
pub unsafe extern "C" fn func_80839034(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut poly: *mut CollisionPoly,
                                       mut bgId: u32_0) -> s32 {
    let mut sp3C: s32 = 0;
    let mut temp: s32 = 0;
    let mut sp34: s32 = 0;
    let mut linearVel: f32_0 = 0.;
    let mut yaw: s32 = 0;
    if (*this).actor.category as libc::c_int == ACTORCAT_PLAYER as libc::c_int
       {
        sp3C = 0 as libc::c_int;
        if (*this).stateFlags1 & 0x80 as libc::c_int as libc::c_uint == 0 &&
               (*globalCtx).sceneLoadFlag as libc::c_int == 0 as libc::c_int
               && (*this).csMode as libc::c_int == 0 as libc::c_int &&
               (*this).stateFlags1 & 1 as libc::c_int as libc::c_uint == 0 &&
               (!poly.is_null() &&
                    {
                        sp3C =
                            SurfaceType_GetSceneExitIndex(&mut (*globalCtx).colCtx,
                                                          poly, bgId as s32)
                                as s32;
                        (sp3C) != 0 as libc::c_int
                    } ||
                    func_8083816C(D_808535E4) != 0 &&
                        (*this).unk_A7A as libc::c_int == 12 as libc::c_int) {
            sp34 =
                (*this).unk_A84 as libc::c_int -
                    (*this).actor.world.pos.y as s32;
            if (*this).stateFlags1 & 0x28800000 as libc::c_int as libc::c_uint
                   == 0 &&
                   (*this).actor.bgCheckFlags as libc::c_int &
                       1 as libc::c_int == 0 && sp34 < 100 as libc::c_int &&
                   D_80853600 > 100.0f32 {
                return 0 as libc::c_int
            }
            if sp3C == 0 as libc::c_int {
                Gameplay_TriggerVoidOut(globalCtx);
                func_800994A0(globalCtx);
            } else {
                (*globalCtx).nextEntranceIndex =
                    *(*globalCtx).setupExitList.offset((sp3C -
                                                            1 as libc::c_int)
                                                           as isize);
                if (*globalCtx).nextEntranceIndex as libc::c_int ==
                       0x7fff as libc::c_int {
                    gSaveContext.respawnFlag = 2 as libc::c_int;
                    (*globalCtx).nextEntranceIndex =
                        gSaveContext.respawn[RESPAWN_MODE_RETURN as
                                                 libc::c_int as
                                                 usize].entranceIndex;
                    (*globalCtx).fadeTransition = 3 as libc::c_int as u8_0;
                    gSaveContext.nextTransition = 3 as libc::c_int as u8_0
                } else if (*globalCtx).nextEntranceIndex as libc::c_int >=
                              0x7ff9 as libc::c_int {
                    (*globalCtx).nextEntranceIndex =
                        D_808544F8[(D_80854514[((*globalCtx).nextEntranceIndex
                                                    as libc::c_int -
                                                    0x7ff9 as libc::c_int) as
                                                   usize] as libc::c_int +
                                        (*globalCtx).curSpawn as libc::c_int)
                                       as usize];
                    func_800994A0(globalCtx);
                } else {
                    if SurfaceType_GetSlope(&mut (*globalCtx).colCtx, poly,
                                            bgId as s32) ==
                           2 as libc::c_int as libc::c_uint {
                        gSaveContext.respawn[RESPAWN_MODE_DOWN as libc::c_int
                                                 as usize].entranceIndex =
                            (*globalCtx).nextEntranceIndex;
                        Gameplay_TriggerVoidOut(globalCtx);
                        gSaveContext.respawnFlag = -(2 as libc::c_int)
                    }
                    gSaveContext.unk_13C3 = 1 as libc::c_int as u8_0;
                    func_800994A0(globalCtx);
                }
                (*globalCtx).sceneLoadFlag = 0x14 as libc::c_int as s8
            }
            if (*this).stateFlags1 & 0x20800000 as libc::c_int as libc::c_uint
                   == 0 &&
                   (*this).stateFlags2 &
                       0x40000 as libc::c_int as libc::c_uint == 0 &&
                   func_808332B8(this) == 0 &&
                   {
                       temp =
                           func_80041D4C(&mut (*globalCtx).colCtx, poly,
                                         bgId as s32) as s32;
                       (temp) != 10 as libc::c_int
                   } &&
                   (sp34 < 100 as libc::c_int ||
                        (*this).actor.bgCheckFlags as libc::c_int &
                            1 as libc::c_int != 0) {
                if temp == 11 as libc::c_int {
                    func_800788CC(0x5805 as libc::c_int as u16_0);
                    func_800F6964(5 as libc::c_int as u16_0);
                    gSaveContext.seqId = 0xffff as libc::c_int as u8_0;
                    gSaveContext.natureAmbienceId =
                        0xff as libc::c_int as u8_0
                } else {
                    linearVel = (*this).linearVelocity;
                    if linearVel < 0.0f32 {
                        (*this).actor.world.rot.y =
                            ((*this).actor.world.rot.y as libc::c_int +
                                 0x8000 as libc::c_int) as s16;
                        linearVel = -linearVel
                    }
                    if linearVel >
                           (*gGameInfo).data[(0 as libc::c_int *
                                                  6 as libc::c_int *
                                                  16 as libc::c_int +
                                                  45 as libc::c_int) as usize]
                               as libc::c_int as libc::c_float / 100.0f32 {
                        gSaveContext.entranceSpeed =
                            (*gGameInfo).data[(0 as libc::c_int *
                                                   6 as libc::c_int *
                                                   16 as libc::c_int +
                                                   45 as libc::c_int) as
                                                  usize] as libc::c_int as
                                libc::c_float / 100.0f32
                    } else { gSaveContext.entranceSpeed = linearVel }
                    if D_808535F4 != 0 as libc::c_int as libc::c_uint {
                        yaw = D_808535FC as s32
                    } else { yaw = (*this).actor.world.rot.y as s32 }
                    func_80838E70(globalCtx, this, 400.0f32, yaw as s16);
                }
            } else if (*this).actor.bgCheckFlags as libc::c_int &
                          1 as libc::c_int == 0 {
                func_80832210(this);
            }
            (*this).stateFlags1 |= 0x20000001 as libc::c_int as libc::c_uint;
            func_80835E44(globalCtx, 0x2f as libc::c_int as s16);
            return 1 as libc::c_int
        } else {
            if (*globalCtx).sceneLoadFlag as libc::c_int == 0 as libc::c_int {
                if (*this).actor.world.pos.y < -4000.0f32 ||
                       ((*this).unk_A7A as libc::c_int == 5 as libc::c_int ||
                            (*this).unk_A7A as libc::c_int ==
                                12 as libc::c_int) &&
                           (D_80853600 < 100.0f32 ||
                                (*this).fallDistance as libc::c_int as
                                    libc::c_float > 400.0f32 ||
                                (*globalCtx).sceneNum as libc::c_int !=
                                    SCENE_HAKADAN as libc::c_int &&
                                    (*this).fallDistance as libc::c_int as
                                        libc::c_float > 200.0f32) ||
                       (*globalCtx).sceneNum as libc::c_int ==
                           SCENE_GANON_FINAL as libc::c_int &&
                           (*this).fallDistance as libc::c_int as
                               libc::c_float > 320.0f32 {
                    if (*this).actor.bgCheckFlags as libc::c_int &
                           1 as libc::c_int != 0 {
                        if (*this).unk_A7A as libc::c_int == 5 as libc::c_int
                           {
                            Gameplay_TriggerRespawn(globalCtx);
                        } else { Gameplay_TriggerVoidOut(globalCtx); }
                        (*globalCtx).fadeTransition =
                            4 as libc::c_int as u8_0;
                        func_80078884(0x5801 as libc::c_int as u16_0);
                    } else {
                        func_80838F5C(globalCtx, this);
                        (*this).unk_850 = 9999 as libc::c_int as s16;
                        if (*this).unk_A7A as libc::c_int == 5 as libc::c_int
                           {
                            (*this).unk_84F = -(1 as libc::c_int) as s8
                        } else { (*this).unk_84F = 1 as libc::c_int as s8 }
                    }
                }
                (*this).unk_A84 = (*this).actor.world.pos.y as s16
            }
        }
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_808395DC(mut this: *mut Player,
                                       mut arg1: *mut Vec3f,
                                       mut arg2: *mut Vec3f,
                                       mut arg3: *mut Vec3f) {
    let mut cos: f32_0 = Math_CosS((*this).actor.shape.rot.y);
    let mut sin: f32_0 = Math_SinS((*this).actor.shape.rot.y);
    (*arg3).x = (*arg1).x + ((*arg2).x * cos + (*arg2).z * sin);
    (*arg3).y = (*arg1).y + (*arg2).y;
    (*arg3).z = (*arg1).z + ((*arg2).z * cos - (*arg2).x * sin);
}
#[no_mangle]
pub unsafe extern "C" fn Player_SpawnFairy(mut globalCtx: *mut GlobalContext,
                                           mut this: *mut Player,
                                           mut arg2: *mut Vec3f,
                                           mut arg3: *mut Vec3f,
                                           mut type_0: s32) -> *mut Actor {
    let mut pos: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    func_808395DC(this, arg2, arg3, &mut pos);
    return Actor_Spawn(&mut (*globalCtx).actorCtx, globalCtx,
                       ACTOR_EN_ELF as libc::c_int as s16, pos.x, pos.y,
                       pos.z, 0 as libc::c_int as s16,
                       0 as libc::c_int as s16, 0 as libc::c_int as s16,
                       type_0 as s16);
}
#[no_mangle]
pub unsafe extern "C" fn func_808396F4(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut Vec3f,
                                       mut arg3: *mut Vec3f,
                                       mut arg4: *mut *mut CollisionPoly,
                                       mut arg5: *mut s32) -> f32_0 {
    func_808395DC(this, &mut (*this).actor.world.pos, arg2, arg3);
    return BgCheck_EntityRaycastFloor3(&mut (*globalCtx).colCtx, arg4, arg5,
                                       arg3);
}
#[no_mangle]
pub unsafe extern "C" fn func_8083973C(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut Vec3f,
                                       mut arg3: *mut Vec3f) -> f32_0 {
    let mut sp24: *mut CollisionPoly = 0 as *mut CollisionPoly;
    let mut sp20: s32 = 0;
    return func_808396F4(globalCtx, this, arg2, arg3, &mut sp24, &mut sp20);
}
#[no_mangle]
pub unsafe extern "C" fn func_80839768(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut Vec3f,
                                       mut arg3: *mut *mut CollisionPoly,
                                       mut arg4: *mut s32,
                                       mut arg5: *mut Vec3f) -> s32 {
    let mut sp44: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut sp38: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    sp44.x = (*this).actor.world.pos.x;
    sp44.y = (*this).actor.world.pos.y + (*arg2).y;
    sp44.z = (*this).actor.world.pos.z;
    func_808395DC(this, &mut (*this).actor.world.pos, arg2, &mut sp38);
    return BgCheck_EntityLineTest1(&mut (*globalCtx).colCtx, &mut sp44,
                                   &mut sp38, arg5, arg3, 1 as libc::c_int,
                                   0 as libc::c_int, 0 as libc::c_int,
                                   1 as libc::c_int, arg4);
}
#[no_mangle]
pub unsafe extern "C" fn func_80839800(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    let mut doorShutter: *mut DoorShutter = 0 as *mut DoorShutter;
    let mut door: *mut EnDoor = 0 as *mut EnDoor;
    let mut doorDirection: s32 = 0;
    let mut sp78: f32_0 = 0.;
    let mut sp74: f32_0 = 0.;
    let mut doorActor: *mut Actor = 0 as *mut Actor;
    let mut sp6C: f32_0 = 0.;
    let mut pad3: s32 = 0;
    let mut frontRoom: s32 = 0;
    let mut attachedActor: *mut Actor = 0 as *mut Actor;
    let mut sp5C: *mut LinkAnimationHeader = 0 as *mut LinkAnimationHeader;
    let mut sp58: *mut CollisionPoly = 0 as *mut CollisionPoly;
    let mut sp4C: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    if (*this).doorType as libc::c_int != PLAYER_DOORTYPE_NONE as libc::c_int
           &&
           ((*this).stateFlags1 & 0x800 as libc::c_int as libc::c_uint == 0 ||
                !(*this).heldActor.is_null() &&
                    (*(*this).heldActor).id as libc::c_int ==
                        ACTOR_EN_RU1 as libc::c_int) {
        if !((*sControlInput).press.button as libc::c_int |
                 !(0x8000 as libc::c_int)) == 0 as libc::c_int ||
               Some(func_8084F9A0 as
                        unsafe extern "C" fn(_: *mut Player,
                                             _: *mut GlobalContext) -> ()) ==
                   (*this).func_674 {
            doorActor = (*this).doorActor;
            if (*this).doorType as libc::c_int <=
                   PLAYER_DOORTYPE_AJAR as libc::c_int {
                (*doorActor).textId = 0xd0 as libc::c_int as u16_0;
                func_80853148(globalCtx, doorActor);
                return 0 as libc::c_int
            }
            doorDirection = (*this).doorDirection as s32;
            sp78 = Math_CosS((*doorActor).shape.rot.y);
            sp74 = Math_SinS((*doorActor).shape.rot.y);
            if (*this).doorType as libc::c_int ==
                   PLAYER_DOORTYPE_SLIDING as libc::c_int {
                doorShutter = doorActor as *mut DoorShutter;
                (*this).currentYaw = (*doorShutter).dyna.actor.home.rot.y;
                if doorDirection > 0 as libc::c_int {
                    (*this).currentYaw =
                        ((*this).currentYaw as libc::c_int -
                             0x8000 as libc::c_int) as s16
                }
                (*this).actor.shape.rot.y = (*this).currentYaw;
                if (*this).linearVelocity <= 0.0f32 {
                    (*this).linearVelocity = 0.1f32
                }
                func_80838E70(globalCtx, this, 50.0f32,
                              (*this).actor.shape.rot.y);
                (*this).unk_84F = 0 as libc::c_int as s8;
                (*this).unk_447 = (*this).doorType as u8_0;
                (*this).stateFlags1 |=
                    0x20000000 as libc::c_int as libc::c_uint;
                (*this).unk_450.x =
                    (*this).actor.world.pos.x +
                        doorDirection as libc::c_float * 20.0f32 * sp74;
                (*this).unk_450.z =
                    (*this).actor.world.pos.z +
                        doorDirection as libc::c_float * 20.0f32 * sp78;
                (*this).unk_45C.x =
                    (*this).actor.world.pos.x +
                        doorDirection as libc::c_float * -120.0f32 * sp74;
                (*this).unk_45C.z =
                    (*this).actor.world.pos.z +
                        doorDirection as libc::c_float * -120.0f32 * sp78;
                (*doorShutter).unk_164 = 1 as libc::c_int as s16;
                func_80832224(this);
                if (*this).doorTimer as libc::c_int != 0 as libc::c_int {
                    (*this).unk_850 = 0 as libc::c_int as s16;
                    func_80832B0C(globalCtx, this, func_80833338(this));
                    (*this).skelAnime.endFrame = 0.0f32
                } else { (*this).linearVelocity = 0.1f32 }
                if (*doorShutter).dyna.actor.category as libc::c_int ==
                       ACTORCAT_DOOR as libc::c_int {
                    (*this).unk_46A =
                        (*(*globalCtx).transiActorCtx.list.offset(((*doorShutter).dyna.actor.params
                                                                       as
                                                                       u16_0
                                                                       as
                                                                       libc::c_int
                                                                       >>
                                                                       10 as
                                                                           libc::c_int)
                                                                      as
                                                                      isize)).sides[if doorDirection
                                                                                           >
                                                                                           0
                                                                                               as
                                                                                               libc::c_int
                                                                                       {
                                                                                        0
                                                                                            as
                                                                                            libc::c_int
                                                                                    } else {
                                                                                        1
                                                                                            as
                                                                                            libc::c_int
                                                                                    }
                                                                                        as
                                                                                        usize].effects
                            as s16;
                    func_800304B0(globalCtx);
                }
            } else {
                // This actor can be either EnDoor or DoorKiller.
                // Don't try to access any struct vars other than `animStyle` and `playerIsOpening`! These two variables
                // are common across the two actors' structs however most other variables are not!
                door = doorActor as *mut EnDoor;
                (*door).animStyle =
                    if (doorDirection as libc::c_float) < 0.0f32 {
                        if gSaveContext.linkAge == 0 as libc::c_int {
                            KNOB_ANIM_ADULT_L as libc::c_int
                        } else { KNOB_ANIM_CHILD_L as libc::c_int }
                    } else if gSaveContext.linkAge == 0 as libc::c_int {
                        KNOB_ANIM_ADULT_R as libc::c_int
                    } else { KNOB_ANIM_CHILD_R as libc::c_int } as u8_0;
                if (*door).animStyle as libc::c_int ==
                       KNOB_ANIM_ADULT_L as libc::c_int {
                    sp5C = D_808539EC[(*this).modelAnimType as usize]
                } else if (*door).animStyle as libc::c_int ==
                              KNOB_ANIM_CHILD_L as libc::c_int {
                    sp5C = D_80853A04[(*this).modelAnimType as usize]
                } else if (*door).animStyle as libc::c_int ==
                              KNOB_ANIM_ADULT_R as libc::c_int {
                    sp5C = D_80853A1C[(*this).modelAnimType as usize]
                } else { sp5C = D_80853A34[(*this).modelAnimType as usize] }
                func_80835C58(globalCtx, this,
                              Some(func_80845EF8 as
                                       unsafe extern "C" fn(_: *mut Player,
                                                            _:
                                                                *mut GlobalContext)
                                           -> ()), 0 as libc::c_int);
                func_80832528(globalCtx, this);
                if doorDirection < 0 as libc::c_int {
                    (*this).actor.shape.rot.y = (*doorActor).shape.rot.y
                } else {
                    (*this).actor.shape.rot.y =
                        ((*doorActor).shape.rot.y as libc::c_int -
                             0x8000 as libc::c_int) as s16
                }
                (*this).currentYaw = (*this).actor.shape.rot.y;
                sp6C = doorDirection as libc::c_float * 22.0f32;
                (*this).actor.world.pos.x =
                    (*doorActor).world.pos.x + sp6C * sp74;
                (*this).actor.world.pos.z =
                    (*doorActor).world.pos.z + sp6C * sp78;
                func_8083328C(globalCtx, this, sp5C);
                if (*this).doorTimer as libc::c_int != 0 as libc::c_int {
                    (*this).skelAnime.endFrame = 0.0f32
                }
                func_80832224(this);
                func_80832F54(globalCtx, this, 0x28f as libc::c_int);
                if !(*doorActor).parent.is_null() {
                    doorDirection = -doorDirection
                }
                (*door).playerIsOpening = 1 as libc::c_int as u8_0;
                if (*this).doorType as libc::c_int !=
                       PLAYER_DOORTYPE_FAKE as libc::c_int {
                    (*this).stateFlags1 |=
                        0x20000000 as libc::c_int as libc::c_uint;
                    func_800304B0(globalCtx);
                    if (*doorActor).params as libc::c_int >> 7 as libc::c_int
                           & 7 as libc::c_int == 3 as libc::c_int {
                        sp4C.x = (*doorActor).world.pos.x - sp6C * sp74;
                        sp4C.y = (*doorActor).world.pos.y + 10.0f32;
                        sp4C.z = (*doorActor).world.pos.z - sp6C * sp78;
                        BgCheck_EntityRaycastFloor1(&mut (*globalCtx).colCtx,
                                                    &mut sp58, &mut sp4C);
                        if func_80839034(globalCtx, this, sp58,
                                         50 as libc::c_int as u32_0) != 0 {
                            gSaveContext.entranceSpeed = 2.0f32;
                            gSaveContext.entranceSound =
                                0x5802 as libc::c_int as u16_0
                        }
                    } else {
                        Camera_ChangeDoorCam(Gameplay_GetCamera(globalCtx,
                                                                0 as
                                                                    libc::c_int
                                                                    as s16),
                                             doorActor,
                                             (*(*globalCtx).transiActorCtx.list.offset(((*doorActor).params
                                                                                            as
                                                                                            u16_0
                                                                                            as
                                                                                            libc::c_int
                                                                                            >>
                                                                                            10
                                                                                                as
                                                                                                libc::c_int)
                                                                                           as
                                                                                           isize)).sides[if doorDirection
                                                                                                                >
                                                                                                                0
                                                                                                                    as
                                                                                                                    libc::c_int
                                                                                                            {
                                                                                                             0
                                                                                                                 as
                                                                                                                 libc::c_int
                                                                                                         } else {
                                                                                                             1
                                                                                                                 as
                                                                                                                 libc::c_int
                                                                                                         }
                                                                                                             as
                                                                                                             usize].effects
                                                 as s16,
                                             0 as libc::c_int as f32_0,
                                             (38.0f32 * D_808535EC) as s16,
                                             (26.0f32 * D_808535EC) as s16,
                                             (10.0f32 * D_808535EC) as s16);
                    }
                }
            }
            if (*this).doorType as libc::c_int !=
                   PLAYER_DOORTYPE_FAKE as libc::c_int &&
                   (*doorActor).category as libc::c_int ==
                       ACTORCAT_DOOR as libc::c_int {
                frontRoom =
                    (*(*globalCtx).transiActorCtx.list.offset(((*doorActor).params
                                                                   as u16_0 as
                                                                   libc::c_int
                                                                   >>
                                                                   10 as
                                                                       libc::c_int)
                                                                  as
                                                                  isize)).sides[if doorDirection
                                                                                       >
                                                                                       0
                                                                                           as
                                                                                           libc::c_int
                                                                                   {
                                                                                    0
                                                                                        as
                                                                                        libc::c_int
                                                                                } else {
                                                                                    1
                                                                                        as
                                                                                        libc::c_int
                                                                                }
                                                                                    as
                                                                                    usize].room
                        as s32;
                if frontRoom >= 0 as libc::c_int &&
                       frontRoom !=
                           (*globalCtx).roomCtx.curRoom.num as libc::c_int {
                    func_8009728C(globalCtx, &mut (*globalCtx).roomCtx,
                                  frontRoom);
                }
            }
            (*doorActor).room = (*globalCtx).roomCtx.curRoom.num;
            attachedActor = (*doorActor).child;
            if !attachedActor.is_null() ||
                   {
                       attachedActor = (*doorActor).parent;
                       !attachedActor.is_null()
                   } {
                (*attachedActor).room = (*globalCtx).roomCtx.curRoom.num
            }
            return 1 as libc::c_int
        }
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80839E88(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut anim: *mut LinkAnimationHeader = 0 as *mut LinkAnimationHeader;
    func_80835C58(globalCtx, this,
                  Some(func_80840450 as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  1 as libc::c_int);
    if (*this).unk_870 < 0.5f32 {
        anim = func_808334E4(this);
        (*this).unk_870 = 0.0f32
    } else { anim = func_80833528(this); (*this).unk_870 = 1.0f32 }
    (*this).unk_874 = (*this).unk_870;
    func_80832284(globalCtx, this, anim);
    (*this).currentYaw = (*this).actor.shape.rot.y;
}
#[no_mangle]
pub unsafe extern "C" fn func_80839F30(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    func_80835C58(globalCtx, this,
                  Some(func_808407CC as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  1 as libc::c_int);
    func_80832B0C(globalCtx, this, func_80833338(this));
    (*this).currentYaw = (*this).actor.shape.rot.y;
}
#[no_mangle]
pub unsafe extern "C" fn func_80839F90(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    if func_8008E9C4(this) != 0 {
        func_80839E88(this, globalCtx);
    } else if func_80833B2C(this) != 0 {
        func_80839F30(this, globalCtx);
    } else { func_80853080(this, globalCtx); };
}
#[no_mangle]
pub unsafe extern "C" fn func_80839FFC(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut func: PlayerFunc674 = None;
    if func_8008E9C4(this) != 0 {
        func =
            Some(func_80840450 as
                     unsafe extern "C" fn(_: *mut Player,
                                          _: *mut GlobalContext) -> ())
    } else if func_80833B2C(this) != 0 {
        func =
            Some(func_808407CC as
                     unsafe extern "C" fn(_: *mut Player,
                                          _: *mut GlobalContext) -> ())
    } else {
        func =
            Some(func_80840BC8 as
                     unsafe extern "C" fn(_: *mut Player,
                                          _: *mut GlobalContext) -> ())
    }
    func_80835C58(globalCtx, this, func, 1 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn func_8083A060(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    func_80839FFC(this, globalCtx);
    if func_8008E9C4(this) != 0 { (*this).unk_850 = 1 as libc::c_int as s16 };
}
#[no_mangle]
pub unsafe extern "C" fn func_8083A098(mut this: *mut Player,
                                       mut anim: *mut LinkAnimationHeader,
                                       mut globalCtx: *mut GlobalContext) {
    func_8083A060(this, globalCtx);
    func_8083328C(globalCtx, this, anim);
}
#[no_mangle]
pub unsafe extern "C" fn func_8083A0D4(mut this: *mut Player) -> s32 {
    return (!(*this).interactRangeActor.is_null() &&
                (*this).heldActor.is_null()) as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083A0F4(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    if func_8083A0D4(this) != 0 {
        let mut interactRangeActor: *mut Actor = (*this).interactRangeActor;
        let mut interactActorId: s32 = (*interactRangeActor).id as s32;
        if interactActorId == ACTOR_BG_TOKI_SWD as libc::c_int {
            (*(*this).interactRangeActor).parent = &mut (*this).actor;
            func_80835C58(globalCtx, this,
                          Some(func_8084F608 as
                                   unsafe extern "C" fn(_: *mut Player,
                                                        _: *mut GlobalContext)
                                       -> ()), 0 as libc::c_int);
            (*this).stateFlags1 |= 0x20000000 as libc::c_int as libc::c_uint
        } else {
            let mut anim: *mut LinkAnimationHeader =
                0 as *mut LinkAnimationHeader;
            if interactActorId == ACTOR_BG_HEAVY_BLOCK as libc::c_int {
                func_80835C58(globalCtx, this,
                              Some(func_80846120 as
                                       unsafe extern "C" fn(_: *mut Player,
                                                            _:
                                                                *mut GlobalContext)
                                           -> ()), 0 as libc::c_int);
                (*this).stateFlags1 |=
                    0x20000000 as libc::c_int as libc::c_uint;
                anim = &mut gPlayerAnim_002F98
            } else if interactActorId == ACTOR_EN_ISHI as libc::c_int &&
                          (*interactRangeActor).params as libc::c_int &
                              0xf as libc::c_int == 1 as libc::c_int {
                func_80835C58(globalCtx, this,
                              Some(func_80846260 as
                                       unsafe extern "C" fn(_: *mut Player,
                                                            _:
                                                                *mut GlobalContext)
                                           -> ()), 0 as libc::c_int);
                anim = &mut gPlayerAnim_0032B0
            } else if (interactActorId == ACTOR_EN_BOMBF as libc::c_int ||
                           interactActorId == ACTOR_EN_KUSA as libc::c_int) &&
                          Player_GetStrength() <=
                              PLAYER_STR_NONE as libc::c_int {
                func_80835C58(globalCtx, this,
                              Some(func_80846408 as
                                       unsafe extern "C" fn(_: *mut Player,
                                                            _:
                                                                *mut GlobalContext)
                                           -> ()), 0 as libc::c_int);
                (*this).actor.world.pos.x =
                    Math_SinS((*interactRangeActor).yawTowardsPlayer) *
                        20.0f32 + (*interactRangeActor).world.pos.x;
                (*this).actor.world.pos.z =
                    Math_CosS((*interactRangeActor).yawTowardsPlayer) *
                        20.0f32 + (*interactRangeActor).world.pos.z;
                (*this).actor.shape.rot.y =
                    ((*interactRangeActor).yawTowardsPlayer as libc::c_int +
                         0x8000 as libc::c_int) as s16;
                (*this).currentYaw = (*this).actor.shape.rot.y;
                anim = &mut gPlayerAnim_003060
            } else {
                func_80835C58(globalCtx, this,
                              Some(func_80846050 as
                                       unsafe extern "C" fn(_: *mut Player,
                                                            _:
                                                                *mut GlobalContext)
                                           -> ()), 0 as libc::c_int);
                anim = D_80853A4C[(*this).modelAnimType as usize]
            }
            func_80832264(globalCtx, this, anim);
        }
    } else {
        func_80839F90(this, globalCtx);
        (*this).stateFlags1 &= !(0x800 as libc::c_int) as libc::c_uint
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8083A2F8(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    func_80835DAC(globalCtx, this,
                  Some(func_8084B530 as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  0 as libc::c_int);
    (*this).stateFlags1 |= 0x20000040 as libc::c_int as libc::c_uint;
    if (*this).actor.textId as libc::c_int != 0 as libc::c_int {
        Message_StartTextbox(globalCtx, (*this).actor.textId,
                             (*this).targetActor);
        (*this).unk_664 = (*this).targetActor
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8083A360(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    func_80835DAC(globalCtx, this,
                  Some(func_8084CC98 as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  0 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn func_8083A388(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    func_80835C58(globalCtx, this,
                  Some(func_8084B78C as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  0 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn func_8083A3B0(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    let mut sp1C: s32 = (*this).unk_850 as s32;
    let mut sp18: s32 = (*this).unk_84F as s32;
    func_80835DAC(globalCtx, this,
                  Some(func_8084BF1C as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  0 as libc::c_int);
    (*this).actor.velocity.y = 0.0f32;
    (*this).unk_850 = sp1C as s16;
    (*this).unk_84F = sp18 as s8;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083A40C(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    func_80835DAC(globalCtx, this,
                  Some(func_8084C760 as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  0 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn func_8083A434(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    func_80835DAC(globalCtx, this,
                  Some(func_8084E6D4 as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  0 as libc::c_int);
    (*this).stateFlags1 |= 0x20000400 as libc::c_int as libc::c_uint;
    if (*this).getItemId as libc::c_int == GI_HEART_CONTAINER_2 as libc::c_int
       {
        (*this).unk_850 = 20 as libc::c_int as s16
    } else if (*this).getItemId as libc::c_int >= 0 as libc::c_int {
        (*this).unk_850 = 1 as libc::c_int as s16
    } else { (*this).getItemId = -((*this).getItemId as libc::c_int) as s8 };
}
#[no_mangle]
pub unsafe extern "C" fn func_8083A4A8(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    let mut yawDiff: s16 = 0;
    let mut anim: *mut LinkAnimationHeader = 0 as *mut LinkAnimationHeader;
    let mut temp: f32_0 = 0.;
    yawDiff =
        ((*this).currentYaw as libc::c_int -
             (*this).actor.shape.rot.y as libc::c_int) as s16;
    if (if yawDiff as libc::c_int >= 0 as libc::c_int {
            yawDiff as libc::c_int
        } else { -(yawDiff as libc::c_int) }) < 0x1000 as libc::c_int &&
           (*this).linearVelocity > 4.0f32 {
        anim = &mut gPlayerAnim_003148
    } else { anim = &mut gPlayerAnim_002FE0 }
    if (*this).linearVelocity >
           (*gGameInfo).data[(9 as libc::c_int * 6 as libc::c_int *
                                  16 as libc::c_int + 66 as libc::c_int) as
                                 usize] as libc::c_int as libc::c_float /
               100.0f32 {
        temp =
            (*gGameInfo).data[(9 as libc::c_int * 6 as libc::c_int *
                                   16 as libc::c_int + 67 as libc::c_int) as
                                  usize] as libc::c_int as libc::c_float /
                100.0f32
    } else {
        temp =
            (*gGameInfo).data[(9 as libc::c_int * 6 as libc::c_int *
                                   16 as libc::c_int + 68 as libc::c_int) as
                                  usize] as libc::c_int as libc::c_float /
                100.0f32 +
                (*gGameInfo).data[(9 as libc::c_int * 6 as libc::c_int *
                                       16 as libc::c_int + 69 as libc::c_int)
                                      as usize] as libc::c_int as
                    libc::c_float * (*this).linearVelocity / 1000.0f32
    }
    func_80838940(this, anim, temp, globalCtx,
                  0x6814 as libc::c_int as u16_0);
    (*this).unk_850 = 1 as libc::c_int as s16;
    return 1 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083A5C4(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CollisionPoly,
                                       mut arg3: f32_0,
                                       mut arg4: *mut LinkAnimationHeader) {
    let mut sp24: f32_0 =
        (*arg2).normal.x as libc::c_int as libc::c_float *
            (1.0f32 / 32767.0f32);
    let mut sp20: f32_0 =
        (*arg2).normal.z as libc::c_int as libc::c_float *
            (1.0f32 / 32767.0f32);
    func_80835C58(globalCtx, this,
                  Some(func_8084BBE4 as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  0 as libc::c_int);
    func_80832564(globalCtx, this);
    func_80832264(globalCtx, this, arg4);
    (*this).actor.world.pos.x -= (arg3 + 1.0f32) * sp24;
    (*this).actor.world.pos.z -= (arg3 + 1.0f32) * sp20;
    (*this).currentYaw = Math_Atan2S(sp20, sp24);
    (*this).actor.shape.rot.y = (*this).currentYaw;
    func_80832224(this);
    func_80832CFC(this);
}
#[no_mangle]
pub unsafe extern "C" fn func_8083A6AC(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    let mut sp84: *mut CollisionPoly = 0 as *mut CollisionPoly;
    let mut sp80: s32 = 0;
    let mut sp74: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut sp68: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut temp1: f32_0 = 0.;
    if (*this).actor.yDistToWater < -80.0f32 &&
           (if (*this).unk_898 as libc::c_int >= 0 as libc::c_int {
                (*this).unk_898 as libc::c_int
            } else { -((*this).unk_898 as libc::c_int) }) <
               2730 as libc::c_int &&
           (if (*this).unk_89A as libc::c_int >= 0 as libc::c_int {
                (*this).unk_89A as libc::c_int
            } else { -((*this).unk_89A as libc::c_int) }) <
               2730 as libc::c_int {
        sp74.x = (*this).actor.prevPos.x - (*this).actor.world.pos.x;
        sp74.z = (*this).actor.prevPos.z - (*this).actor.world.pos.z;
        temp1 = sqrtf(sp74.x * sp74.x + sp74.z * sp74.z);
        if temp1 != 0.0f32 { temp1 = 5.0f32 / temp1 } else { temp1 = 0.0f32 }
        sp74.x = (*this).actor.prevPos.x + sp74.x * temp1;
        sp74.y = (*this).actor.world.pos.y;
        sp74.z = (*this).actor.prevPos.z + sp74.z * temp1;
        if BgCheck_EntityLineTest1(&mut (*globalCtx).colCtx,
                                   &mut (*this).actor.world.pos, &mut sp74,
                                   &mut sp68, &mut sp84, 1 as libc::c_int,
                                   0 as libc::c_int, 0 as libc::c_int,
                                   1 as libc::c_int, &mut sp80) != 0 &&
               (if (*sp84).normal.y as libc::c_int >= 0 as libc::c_int {
                    (*sp84).normal.y as libc::c_int
                } else { -((*sp84).normal.y as libc::c_int) }) <
                   600 as libc::c_int {
            let mut nx: f32_0 =
                (*sp84).normal.x as libc::c_int as libc::c_float *
                    (1.0f32 / 32767.0f32);
            let mut ny: f32_0 =
                (*sp84).normal.y as libc::c_int as libc::c_float *
                    (1.0f32 / 32767.0f32);
            let mut nz: f32_0 =
                (*sp84).normal.z as libc::c_int as libc::c_float *
                    (1.0f32 / 32767.0f32);
            let mut sp54: f32_0 = 0.;
            let mut sp50: s32 = 0;
            sp54 =
                Math3D_UDistPlaneToPos(nx, ny, nz, (*sp84).dist as f32_0,
                                       &mut (*this).actor.world.pos);
            sp50 = (D_80853604 == 6 as libc::c_int) as libc::c_int;
            if sp50 == 0 &&
                   func_80041DB8(&mut (*globalCtx).colCtx, sp84, sp80) &
                       8 as libc::c_int != 0 {
                sp50 = 1 as libc::c_int
            }
            func_8083A5C4(globalCtx, this, sp84, sp54,
                          if sp50 != 0 {
                              &mut gPlayerAnim_002D88
                          } else { &mut gPlayerAnim_002F10 });
            if sp50 != 0 {
                func_80836898(globalCtx, this,
                              Some(func_8083A3B0 as
                                       unsafe extern "C" fn(_:
                                                                *mut GlobalContext,
                                                            _: *mut Player)
                                           -> ()));
                (*this).currentYaw =
                    ((*this).currentYaw as libc::c_int +
                         0x8000 as libc::c_int) as s16;
                (*this).actor.shape.rot.y = (*this).currentYaw;
                (*this).stateFlags1 |=
                    0x200000 as libc::c_int as libc::c_uint;
                func_80832F54(globalCtx, this, 0x9f as libc::c_int);
                (*this).unk_850 = -(1 as libc::c_int) as s16;
                (*this).unk_84F = sp50 as s8
            } else {
                (*this).stateFlags1 |= 0x2000 as libc::c_int as libc::c_uint;
                (*this).stateFlags1 &=
                    !(0x20000 as libc::c_int) as libc::c_uint
            }
            func_8002F7DC(&mut (*this).actor, 0x830 as libc::c_int as u16_0);
            func_80832698(this, 0x6803 as libc::c_int as u16_0);
            return 1 as libc::c_int
        }
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083A9B8(mut this: *mut Player,
                                       mut anim: *mut LinkAnimationHeader,
                                       mut globalCtx: *mut GlobalContext) {
    func_80835C58(globalCtx, this,
                  Some(func_8084BDFC as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  0 as libc::c_int);
    LinkAnimation_PlayOnceSetSpeed(globalCtx, &mut (*this).skelAnime, anim,
                                   1.3f32);
}
static mut D_8085451C: Vec3f =
    { let mut init = Vec3f{x: 0.0f32, y: 0.0f32, z: 100.0f32,}; init };
#[no_mangle]
pub unsafe extern "C" fn func_8083AA10(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut sp5C: s32 = 0;
    let mut sp58: *mut CollisionPoly = 0 as *mut CollisionPoly;
    let mut sp54: s32 = 0;
    let mut sp50: *mut WaterBox = 0 as *mut WaterBox;
    let mut sp44: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut sp40: f32_0 = 0.;
    let mut sp3C: f32_0 = 0.;
    (*this).fallDistance =
        ((*this).fallStartHeight as libc::c_int -
             (*this).actor.world.pos.y as s32) as s16;
    if (*this).stateFlags1 & 0x28000000 as libc::c_int as libc::c_uint == 0 &&
           (*this).actor.bgCheckFlags as libc::c_int & 1 as libc::c_int == 0 {
        if func_80838FB8(globalCtx, this) == 0 {
            if D_80853604 == 8 as libc::c_int {
                (*this).actor.world.pos.x = (*this).actor.prevPos.x;
                (*this).actor.world.pos.z = (*this).actor.prevPos.z;
                return
            }
            if (*this).stateFlags3 as libc::c_int & 2 as libc::c_int == 0 &&
                   (*this).skelAnime.moveFlags as libc::c_int &
                       0x80 as libc::c_int == 0 &&
                   Some(func_8084411C as
                            unsafe extern "C" fn(_: *mut Player,
                                                 _: *mut GlobalContext) -> ())
                       != (*this).func_674 &&
                   Some(func_80844A44 as
                            unsafe extern "C" fn(_: *mut Player,
                                                 _: *mut GlobalContext) -> ())
                       != (*this).func_674 {
                if D_80853604 == 7 as libc::c_int ||
                       (*this).swordState as libc::c_int != 0 as libc::c_int {
                    Math_Vec3f_Copy(&mut (*this).actor.world.pos,
                                    &mut (*this).actor.prevPos);
                    func_80832210(this);
                    return
                }
                if (*this).hoverBootsTimer as libc::c_int != 0 as libc::c_int
                   {
                    (*this).actor.velocity.y = 1.0f32;
                    D_80853604 = 9 as libc::c_int;
                    return
                }
                sp5C =
                    ((*this).currentYaw as libc::c_int -
                         (*this).actor.shape.rot.y as libc::c_int) as s16 as
                        s32;
                func_80835C58(globalCtx, this,
                              Some(func_8084411C as
                                       unsafe extern "C" fn(_: *mut Player,
                                                            _:
                                                                *mut GlobalContext)
                                           -> ()), 1 as libc::c_int);
                func_80832440(globalCtx, this);
                (*this).unk_89E = (*this).unk_A82;
                if (*this).actor.bgCheckFlags as libc::c_int &
                       4 as libc::c_int != 0 &&
                       (*this).stateFlags1 &
                           0x8000000 as libc::c_int as libc::c_uint == 0 &&
                       D_80853604 != 6 as libc::c_int &&
                       D_80853604 != 9 as libc::c_int && D_80853600 > 20.0f32
                       &&
                       (*this).swordState as libc::c_int == 0 as libc::c_int
                       &&
                       (if sp5C >= 0 as libc::c_int { sp5C } else { -sp5C }) <
                           0x2000 as libc::c_int &&
                       (*this).linearVelocity > 3.0f32 {
                    if D_80853604 == 11 as libc::c_int &&
                           (*this).stateFlags1 &
                               0x800 as libc::c_int as libc::c_uint == 0 {
                        sp40 =
                            func_808396F4(globalCtx, this, &mut D_8085451C,
                                          &mut sp44, &mut sp58, &mut sp54);
                        sp3C = (*this).actor.world.pos.y;
                        if WaterBox_GetSurface1(globalCtx,
                                                &mut (*globalCtx).colCtx,
                                                sp44.x, sp44.z, &mut sp3C,
                                                &mut sp50) != 0 &&
                               sp3C - sp40 > 50.0f32 {
                            func_808389E8(this, &mut gPlayerAnim_003158,
                                          6.0f32, globalCtx);
                            func_80835C58(globalCtx, this,
                                          Some(func_80844A44 as
                                                   unsafe extern "C" fn(_:
                                                                            *mut Player,
                                                                        _:
                                                                            *mut GlobalContext)
                                                       -> ()),
                                          0 as libc::c_int);
                            return
                        }
                    }
                    func_8083A4A8(this, globalCtx);
                    return
                }
                if D_80853604 == 9 as libc::c_int ||
                       D_80853600 <= (*(*this).ageProperties).unk_34 ||
                       func_8083A6AC(this, globalCtx) == 0 {
                    func_80832284(globalCtx, this, &mut gPlayerAnim_003040);
                    return
                }
            }
        }
    } else { (*this).fallStartHeight = (*this).actor.world.pos.y as s16 };
}
#[no_mangle]
pub unsafe extern "C" fn func_8083AD4C(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) -> s32 {
    let mut cameraMode: s32 = 0;
    if (*this).unk_6AD as libc::c_int == 2 as libc::c_int {
        if func_8002DD6C(this) != 0 {
            if gSaveContext.linkAge == 0 as libc::c_int {
                cameraMode = CAM_MODE_BOWARROW as libc::c_int
            } else { cameraMode = CAM_MODE_SLINGSHOT as libc::c_int }
        } else { cameraMode = CAM_MODE_BOOMERANG as libc::c_int }
    } else { cameraMode = CAM_MODE_FIRSTPERSON as libc::c_int }
    return Camera_ChangeMode(Gameplay_GetCamera(globalCtx,
                                                0 as libc::c_int as s16),
                             cameraMode as s16);
}
#[no_mangle]
pub unsafe extern "C" fn func_8083ADD4(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) -> s32 {
    if (*this).unk_6AD as libc::c_int == 3 as libc::c_int {
        func_80835C58(globalCtx, this,
                      Some(func_80852E14 as
                               unsafe extern "C" fn(_: *mut Player,
                                                    _: *mut GlobalContext)
                                   -> ()), 0 as libc::c_int);
        if (*this).unk_46A as libc::c_int != 0 as libc::c_int {
            (*this).stateFlags1 |= 0x20000000 as libc::c_int as libc::c_uint
        }
        func_80832318(this);
        return 1 as libc::c_int
    } else { return 0 as libc::c_int };
}
#[no_mangle]
pub unsafe extern "C" fn func_8083AE40(mut this: *mut Player,
                                       mut objectId: s16) {
    let mut pad: s32 = 0;
    let mut size: u32_0 = 0;
    if objectId as libc::c_int != 0 as libc::c_int {
        (*this).giObjectLoading = 1 as libc::c_int as u8_0;
        osCreateMesgQueue(&mut (*this).giObjectLoadQueue,
                          &mut (*this).giObjectLoadMsg, 1 as libc::c_int);
        size =
            gObjectTable[objectId as
                             usize].vromEnd.wrapping_sub(gObjectTable[objectId
                                                                          as
                                                                          usize].vromStart);
        LogUtils_LogThreadId(b"../z_player.c\x00" as *const u8 as
                                 *const libc::c_char, 9090 as libc::c_int);
        osSyncPrintf(b"size = %x\n\x00" as *const u8 as *const libc::c_char,
                     size);
        if size <= (1024 as libc::c_int * 8 as libc::c_int) as libc::c_uint {
        } else {
            __assert(b"size <= 1024 * 8\x00" as *const u8 as
                         *const libc::c_char,
                     b"../z_player.c\x00" as *const u8 as *const libc::c_char,
                     9091 as libc::c_int);
        };
        DmaMgr_SendRequest2(&mut (*this).giObjectDmaRequest,
                            (*this).giObjectSegment as u32_0,
                            gObjectTable[objectId as usize].vromStart, size,
                            0 as libc::c_int as u32_0,
                            &mut (*this).giObjectLoadQueue,
                            0 as *mut libc::c_void,
                            b"../z_player.c\x00" as *const u8 as
                                *const libc::c_char, 9099 as libc::c_int);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8083AF44(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut magicSpell: s32) {
    func_80835DE4(globalCtx, this,
                  Some(func_808507F4 as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  0 as libc::c_int);
    (*this).unk_84F = (magicSpell - 3 as libc::c_int) as s8;
    func_80087708(globalCtx, sMagicSpellCosts[magicSpell as usize] as s16,
                  4 as libc::c_int as s16);
    LinkAnimation_PlayOnceSetSpeed(globalCtx, &mut (*this).skelAnime,
                                   &mut gPlayerAnim_002D28, 0.83f32);
    if magicSpell == 5 as libc::c_int {
        (*this).unk_46C =
            OnePointCutscene_Init(globalCtx, 1100 as libc::c_int as s16,
                                  -(101 as libc::c_int) as s16,
                                  0 as *mut Actor, 0 as libc::c_int as s16)
    } else { func_80835EA4(globalCtx, 10 as libc::c_int); };
}
#[no_mangle]
pub unsafe extern "C" fn func_8083B010(mut this: *mut Player) {
    (*this).unk_6C0 = 0 as libc::c_int as s16;
    (*this).unk_6BE = (*this).unk_6C0;
    (*this).unk_6BC = (*this).unk_6BE;
    (*this).unk_6BA = (*this).unk_6BC;
    (*this).unk_6B8 = (*this).unk_6BA;
    (*this).unk_6B6 = (*this).unk_6B8;
    (*this).actor.focus.rot.z = (*this).unk_6B6;
    (*this).actor.focus.rot.x = (*this).actor.focus.rot.z;
    (*this).actor.focus.rot.y = (*this).actor.shape.rot.y;
}
static mut D_80854528: [u8_0; 29] =
    [GI_LETTER_ZELDA as libc::c_int as u8_0,
     GI_WEIRD_EGG as libc::c_int as u8_0, GI_CHICKEN as libc::c_int as u8_0,
     GI_BEAN as libc::c_int as u8_0, GI_POCKET_EGG as libc::c_int as u8_0,
     GI_POCKET_CUCCO as libc::c_int as u8_0, GI_COJIRO as libc::c_int as u8_0,
     GI_ODD_MUSHROOM as libc::c_int as u8_0,
     GI_ODD_POTION as libc::c_int as u8_0, GI_SAW as libc::c_int as u8_0,
     GI_SWORD_BROKEN as libc::c_int as u8_0,
     GI_PRESCRIPTION as libc::c_int as u8_0, GI_FROG as libc::c_int as u8_0,
     GI_EYEDROPS as libc::c_int as u8_0,
     GI_CLAIM_CHECK as libc::c_int as u8_0,
     GI_MASK_SKULL as libc::c_int as u8_0,
     GI_MASK_SPOOKY as libc::c_int as u8_0,
     GI_MASK_KEATON as libc::c_int as u8_0,
     GI_MASK_BUNNY as libc::c_int as u8_0,
     GI_MASK_TRUTH as libc::c_int as u8_0,
     GI_MASK_GORON as libc::c_int as u8_0,
     GI_MASK_ZORA as libc::c_int as u8_0,
     GI_MASK_GERUDO as libc::c_int as u8_0,
     GI_LETTER_RUTO as libc::c_int as u8_0,
     GI_LETTER_RUTO as libc::c_int as u8_0,
     GI_LETTER_RUTO as libc::c_int as u8_0,
     GI_LETTER_RUTO as libc::c_int as u8_0,
     GI_LETTER_RUTO as libc::c_int as u8_0,
     GI_LETTER_RUTO as libc::c_int as u8_0];
static mut D_80854548: [*mut LinkAnimationHeader; 3] =
    unsafe {
        [&gPlayerAnim_002F88 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002690 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003198 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
#[no_mangle]
pub unsafe extern "C" fn func_8083B040(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    let mut sp2C: s32 = 0;
    let mut sp28: s32 = 0;
    let mut giEntry: *mut GetItemEntry = 0 as *mut GetItemEntry;
    let mut targetActor: *mut Actor = 0 as *mut Actor;
    if (*this).unk_6AD as libc::c_int != 0 as libc::c_int &&
           (func_808332B8(this) != 0 ||
                (*this).actor.bgCheckFlags as libc::c_int & 1 as libc::c_int
                    != 0 ||
                (*this).stateFlags1 & 0x800000 as libc::c_int as libc::c_uint
                    != 0) {
        if func_8083ADD4(globalCtx, this) == 0 {
            if (*this).unk_6AD as libc::c_int == 4 as libc::c_int {
                sp2C =
                    Player_ActionToMagicSpell(this,
                                              (*this).itemActionParam as s32);
                if sp2C >= 0 as libc::c_int {
                    if sp2C != 3 as libc::c_int ||
                           gSaveContext.respawn[RESPAWN_MODE_TOP as
                                                    libc::c_int as usize].data
                               as libc::c_int <= 0 as libc::c_int {
                        func_8083AF44(globalCtx, this, sp2C);
                    } else {
                        func_80835C58(globalCtx, this,
                                      Some(func_8085063C as
                                               unsafe extern "C" fn(_:
                                                                        *mut Player,
                                                                    _:
                                                                        *mut GlobalContext)
                                                   -> ()), 1 as libc::c_int);
                        (*this).stateFlags1 |=
                            0x30000000 as libc::c_int as libc::c_uint;
                        func_80832264(globalCtx, this, func_80833338(this));
                        func_80835EA4(globalCtx, 4 as libc::c_int);
                    }
                    func_80832224(this);
                    return 1 as libc::c_int
                }
                sp2C =
                    (*this).itemActionParam as libc::c_int -
                        PLAYER_AP_LETTER_ZELDA as libc::c_int;
                if sp2C >= 0 as libc::c_int ||
                       {
                           sp28 =
                               Player_ActionToBottle(this,
                                                     (*this).itemActionParam
                                                         as s32) -
                                   1 as libc::c_int;
                           (sp28 >= 0 as libc::c_int &&
                                sp28 < 6 as libc::c_int) &&
                               ((*this).itemActionParam as libc::c_int >
                                    PLAYER_AP_BOTTLE_POE as libc::c_int ||
                                    !(*this).targetActor.is_null() &&
                                        ((*this).itemActionParam as
                                             libc::c_int ==
                                             PLAYER_AP_BOTTLE_POE as
                                                 libc::c_int &&
                                             (*this).exchangeItemId as
                                                 libc::c_int ==
                                                 EXCH_ITEM_POE as libc::c_int
                                             ||
                                             (*this).exchangeItemId as
                                                 libc::c_int ==
                                                 EXCH_ITEM_BLUE_FIRE as
                                                     libc::c_int))
                       } {
                    if (*globalCtx).actorCtx.titleCtx.delayTimer as
                           libc::c_int == 0 as libc::c_int &&
                           (*globalCtx).actorCtx.titleCtx.alpha as libc::c_int
                               == 0 as libc::c_int {
                        func_80835DE4(globalCtx, this,
                                      Some(func_8084F104 as
                                               unsafe extern "C" fn(_:
                                                                        *mut Player,
                                                                    _:
                                                                        *mut GlobalContext)
                                                   -> ()), 0 as libc::c_int);
                        if sp2C >= 0 as libc::c_int {
                            giEntry =
                                &mut *sGetItemTable.as_mut_ptr().offset((*D_80854528.as_mut_ptr().offset(sp2C
                                                                                                             as
                                                                                                             isize)
                                                                             as
                                                                             libc::c_int
                                                                             -
                                                                             1
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            isize)
                                    as *mut GetItemEntry;
                            func_8083AE40(this, (*giEntry).objectId as s16);
                        }
                        (*this).stateFlags1 |=
                            0x30000040 as libc::c_int as libc::c_uint;
                        if sp2C >= 0 as libc::c_int {
                            sp2C = sp2C + 1 as libc::c_int
                        } else { sp2C = sp28 + 0x18 as libc::c_int }
                        targetActor = (*this).targetActor;
                        if !targetActor.is_null() &&
                               ((*this).exchangeItemId as libc::c_int == sp2C
                                    ||
                                    (*this).exchangeItemId as libc::c_int ==
                                        EXCH_ITEM_BLUE_FIRE as libc::c_int ||
                                    (*this).exchangeItemId as libc::c_int ==
                                        EXCH_ITEM_POE as libc::c_int &&
                                        (*this).itemActionParam as libc::c_int
                                            ==
                                            PLAYER_AP_BOTTLE_BIG_POE as
                                                libc::c_int ||
                                    (*this).exchangeItemId as libc::c_int ==
                                        EXCH_ITEM_BEAN as libc::c_int &&
                                        (*this).itemActionParam as libc::c_int
                                            ==
                                            PLAYER_AP_BOTTLE_BUG as
                                                libc::c_int) &&
                               ((*this).exchangeItemId as libc::c_int !=
                                    EXCH_ITEM_BEAN as libc::c_int ||
                                    (*this).itemActionParam as libc::c_int ==
                                        PLAYER_AP_BEAN as libc::c_int) {
                            if (*this).exchangeItemId as libc::c_int ==
                                   EXCH_ITEM_BEAN as libc::c_int {
                                Inventory_ChangeAmmo(ITEM_BEAN as libc::c_int
                                                         as s16,
                                                     -(1 as libc::c_int) as
                                                         s16);
                                func_80835DE4(globalCtx, this,
                                              Some(func_8084279C as
                                                       unsafe extern "C" fn(_:
                                                                                *mut Player,
                                                                            _:
                                                                                *mut GlobalContext)
                                                           -> ()),
                                              0 as libc::c_int);
                                (*this).stateFlags1 |=
                                    0x20000000 as libc::c_int as libc::c_uint;
                                (*this).unk_850 = 0x50 as libc::c_int as s16;
                                (*this).unk_84F = -(1 as libc::c_int) as s8
                            }
                            (*targetActor).flags |=
                                ((1 as libc::c_int) << 8 as libc::c_int) as
                                    libc::c_uint;
                            (*this).unk_664 = (*this).targetActor
                        } else if sp2C == EXCH_ITEM_LETTER_RUTO as libc::c_int
                         {
                            (*this).unk_84F = 1 as libc::c_int as s8;
                            (*this).actor.textId =
                                0x4005 as libc::c_int as u16_0;
                            func_80835EA4(globalCtx, 1 as libc::c_int);
                        } else {
                            (*this).unk_84F = 2 as libc::c_int as s8;
                            (*this).actor.textId =
                                0xcf as libc::c_int as u16_0;
                            func_80835EA4(globalCtx, 4 as libc::c_int);
                        }
                        (*this).actor.flags |=
                            ((1 as libc::c_int) << 8 as libc::c_int) as
                                libc::c_uint;
                        (*this).exchangeItemId = sp2C as s8;
                        if ((*this).unk_84F as libc::c_int) < 0 as libc::c_int
                           {
                            func_80832B0C(globalCtx, this,
                                          D_80853C14[(*this).modelAnimType as
                                                         usize]);
                        } else {
                            func_80832264(globalCtx, this,
                                          D_80854548[(*this).unk_84F as
                                                         usize]);
                        }
                        func_80832224(this);
                    }
                    return 1 as libc::c_int
                }
                sp2C =
                    Player_ActionToBottle(this,
                                          (*this).itemActionParam as s32);
                if sp2C >= 0 as libc::c_int {
                    if sp2C == 0xc as libc::c_int {
                        func_80835DE4(globalCtx, this,
                                      Some(func_8084EED8 as
                                               unsafe extern "C" fn(_:
                                                                        *mut Player,
                                                                    _:
                                                                        *mut GlobalContext)
                                                   -> ()), 0 as libc::c_int);
                        func_808322D0(globalCtx, this,
                                      &mut gPlayerAnim_002650);
                        func_80835EA4(globalCtx, 3 as libc::c_int);
                    } else if sp2C > 0 as libc::c_int &&
                                  sp2C < 4 as libc::c_int {
                        func_80835DE4(globalCtx, this,
                                      Some(func_8084EFC0 as
                                               unsafe extern "C" fn(_:
                                                                        *mut Player,
                                                                    _:
                                                                        *mut GlobalContext)
                                                   -> ()), 0 as libc::c_int);
                        func_808322D0(globalCtx, this,
                                      &mut gPlayerAnim_002688);
                        func_80835EA4(globalCtx,
                                      if sp2C == 1 as libc::c_int {
                                          1 as libc::c_int
                                      } else { 5 as libc::c_int });
                    } else {
                        func_80835DE4(globalCtx, this,
                                      Some(func_8084EAC0 as
                                               unsafe extern "C" fn(_:
                                                                        *mut Player,
                                                                    _:
                                                                        *mut GlobalContext)
                                                   -> ()), 0 as libc::c_int);
                        func_80832B78(globalCtx, this,
                                      &mut gPlayerAnim_002668);
                        func_80835EA4(globalCtx, 2 as libc::c_int);
                    }
                } else {
                    func_80835DE4(globalCtx, this,
                                  Some(func_8084E3C4 as
                                           unsafe extern "C" fn(_:
                                                                    *mut Player,
                                                                _:
                                                                    *mut GlobalContext)
                                               -> ()), 0 as libc::c_int);
                    func_808322D0(globalCtx, this, &mut gPlayerAnim_0030A0);
                    (*this).stateFlags2 |=
                        0x8000000 as libc::c_int as libc::c_uint;
                    func_80835EA4(globalCtx,
                                  if !(*this).unk_6A8.is_null() {
                                      0x5b as libc::c_int
                                  } else { 0x5a as libc::c_int });
                    if !(*this).unk_6A8.is_null() {
                        (*this).stateFlags2 |=
                            0x2000000 as libc::c_int as libc::c_uint;
                        Camera_SetParam(Gameplay_GetCamera(globalCtx,
                                                           0 as libc::c_int as
                                                               s16),
                                        8 as libc::c_int,
                                        (*this).unk_6A8 as *mut libc::c_void);
                    }
                }
            } else if func_8083AD4C(globalCtx, this) != 0 {
                if (*this).stateFlags1 &
                       0x800000 as libc::c_int as libc::c_uint == 0 {
                    func_80835C58(globalCtx, this,
                                  Some(func_8084B1D8 as
                                           unsafe extern "C" fn(_:
                                                                    *mut Player,
                                                                _:
                                                                    *mut GlobalContext)
                                               -> ()), 1 as libc::c_int);
                    (*this).unk_850 = 13 as libc::c_int as s16;
                    func_8083B010(this);
                }
                (*this).stateFlags1 |=
                    0x100000 as libc::c_int as libc::c_uint;
                func_80078884(0x4813 as libc::c_int as u16_0);
                func_80832210(this);
                return 1 as libc::c_int
            } else {
                (*this).unk_6AD = 0 as libc::c_int as u8_0;
                func_80078884(0x4806 as libc::c_int as u16_0);
                return 0 as libc::c_int
            }
            (*this).stateFlags1 |= 0x30000000 as libc::c_int as libc::c_uint
        }
        func_80832224(this);
        return 1 as libc::c_int
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083B644(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    let mut sp34: *mut Actor = (*this).targetActor;
    let mut sp30: *mut Actor = (*this).unk_664;
    let mut sp2C: *mut Actor = 0 as *mut Actor;
    let mut sp28: s32 = 0 as libc::c_int;
    let mut sp24: s32 = 0;
    sp24 =
        (!sp30.is_null() &&
             ((*sp30).flags &
                  ((1 as libc::c_int) << 0 as libc::c_int |
                       (1 as libc::c_int) << 18 as libc::c_int) as
                      libc::c_uint ==
                  ((1 as libc::c_int) << 0 as libc::c_int |
                       (1 as libc::c_int) << 18 as libc::c_int) as
                      libc::c_uint ||
                  (*sp30).naviEnemyId as libc::c_int != 0xff as libc::c_int))
            as libc::c_int;
    if sp24 != 0 || (*this).naviTextId as libc::c_int != 0 as libc::c_int {
        sp28 =
            (((*this).naviTextId as libc::c_int) < 0 as libc::c_int &&
                 (if (*this).naviTextId as libc::c_int >= 0 as libc::c_int {
                      (*this).naviTextId as libc::c_int
                  } else { -((*this).naviTextId as libc::c_int) }) &
                     0xff00 as libc::c_int != 0x200 as libc::c_int) as
                libc::c_int;
        if sp28 != 0 || sp24 == 0 {
            sp2C = (*this).naviActor;
            if sp28 != 0 { sp30 = 0 as *mut Actor; sp34 = 0 as *mut Actor }
        } else { sp2C = sp30 }
    }
    if !sp34.is_null() || !sp2C.is_null() {
        if sp30.is_null() || sp30 == sp34 || sp30 == sp2C {
            if (*this).stateFlags1 & 0x800 as libc::c_int as libc::c_uint == 0
                   ||
                   !(*this).heldActor.is_null() &&
                       (sp28 != 0 || sp34 == (*this).heldActor ||
                            sp2C == (*this).heldActor ||
                            !sp34.is_null() &&
                                (*sp34).flags &
                                    ((1 as libc::c_int) << 16 as libc::c_int)
                                        as libc::c_uint != 0) {
                if (*this).actor.bgCheckFlags as libc::c_int &
                       1 as libc::c_int != 0 ||
                       (*this).stateFlags1 &
                           0x800000 as libc::c_int as libc::c_uint != 0 ||
                       func_808332B8(this) != 0 &&
                           (*this).stateFlags2 &
                               0x400 as libc::c_int as libc::c_uint == 0 {
                    if !sp34.is_null() {
                        (*this).stateFlags2 |=
                            2 as libc::c_int as libc::c_uint;
                        if !((*sControlInput).press.button as libc::c_int |
                                 !(0x8000 as libc::c_int)) == 0 as libc::c_int
                               ||
                               (*sp34).flags &
                                   ((1 as libc::c_int) << 16 as libc::c_int)
                                       as libc::c_uint != 0 {
                            sp2C = 0 as *mut Actor
                        } else if sp2C.is_null() { return 0 as libc::c_int }
                    }
                    if !sp2C.is_null() {
                        if sp28 == 0 {
                            (*this).stateFlags2 |=
                                0x200000 as libc::c_int as libc::c_uint
                        }
                        if !(!((*sControlInput).press.button as libc::c_int |
                                   !(0x8 as libc::c_int)) == 0 as libc::c_int)
                               && sp28 == 0 {
                            return 0 as libc::c_int
                        }
                        sp34 = sp2C;
                        (*this).targetActor = 0 as *mut Actor;
                        if sp28 != 0 || sp24 == 0 {
                            if (*this).naviTextId as libc::c_int >=
                                   0 as libc::c_int {
                                (*sp2C).textId = (*this).naviTextId as u16_0
                            } else {
                                (*sp2C).textId =
                                    -((*this).naviTextId as libc::c_int) as
                                        u16_0
                            }
                        } else if (*sp2C).naviEnemyId as libc::c_int !=
                                      0xff as libc::c_int {
                            (*sp2C).textId =
                                ((*sp2C).naviEnemyId as libc::c_int +
                                     0x600 as libc::c_int) as u16_0
                        }
                    }
                    (*this).currentMask = D_80858AA4 as u8_0;
                    func_80853148(globalCtx, sp34);
                    return 1 as libc::c_int
                }
            }
        }
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083B8F4(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    if (*this).stateFlags1 & 0x800800 as libc::c_int as libc::c_uint == 0 &&
           Camera_CheckValidMode(Gameplay_GetCamera(globalCtx,
                                                    0 as libc::c_int as s16),
                                 6 as libc::c_int as s16) != 0 {
        if (*this).actor.bgCheckFlags as libc::c_int & 1 as libc::c_int != 0
               ||
               func_808332B8(this) != 0 &&
                   (*this).actor.yDistToWater <
                       (*(*this).ageProperties).unk_2C {
            (*this).unk_6AD = 1 as libc::c_int as u8_0;
            return 1 as libc::c_int
        }
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083B998(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    if (*this).unk_6AD as libc::c_int != 0 as libc::c_int {
        func_8083B040(this, globalCtx);
        return 1 as libc::c_int
    }
    if !(*this).unk_664.is_null() &&
           ((*(*this).unk_664).flags &
                ((1 as libc::c_int) << 0 as libc::c_int |
                     (1 as libc::c_int) << 18 as libc::c_int) as libc::c_uint
                ==
                ((1 as libc::c_int) << 0 as libc::c_int |
                     (1 as libc::c_int) << 18 as libc::c_int) as libc::c_uint
                ||
                (*(*this).unk_664).naviEnemyId as libc::c_int !=
                    0xff as libc::c_int) {
        (*this).stateFlags2 |= 0x200000 as libc::c_int as libc::c_uint
    } else if (*this).naviTextId as libc::c_int == 0 as libc::c_int &&
                  func_8008E9C4(this) == 0 &&
                  !((*sControlInput).press.button as libc::c_int |
                        !(0x8 as libc::c_int)) == 0 as libc::c_int &&
                  (*gGameInfo).data[(6 as libc::c_int * 6 as libc::c_int *
                                         16 as libc::c_int +
                                         15 as libc::c_int) as usize] as
                      libc::c_int != 0x10 as libc::c_int &&
                  (*gGameInfo).data[(6 as libc::c_int * 6 as libc::c_int *
                                         16 as libc::c_int +
                                         15 as libc::c_int) as usize] as
                      libc::c_int != 0x20 as libc::c_int &&
                  func_8083B8F4(this, globalCtx) == 0 {
        func_80078884(0x4806 as libc::c_int as u16_0);
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083BA90(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player, mut arg2: s32,
                                       mut xzVelocity: f32_0,
                                       mut yVelocity: f32_0) {
    func_80837948(globalCtx, this, arg2);
    func_80835C58(globalCtx, this,
                  Some(func_80844AF4 as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  0 as libc::c_int);
    (*this).stateFlags3 =
        ((*this).stateFlags3 as libc::c_int | 2 as libc::c_int) as u8_0;
    (*this).currentYaw = (*this).actor.shape.rot.y;
    (*this).linearVelocity = xzVelocity;
    (*this).actor.velocity.y = yVelocity;
    (*this).actor.bgCheckFlags =
        ((*this).actor.bgCheckFlags as libc::c_int & !(1 as libc::c_int)) as
            u16_0;
    (*this).hoverBootsTimer = 0 as libc::c_int as u8_0;
    func_80832854(this);
    func_80832698(this, 0x6801 as libc::c_int as u16_0);
}
#[no_mangle]
pub unsafe extern "C" fn func_8083BB20(mut this: *mut Player) -> s32 {
    if (*this).stateFlags1 & 0x400000 as libc::c_int as libc::c_uint == 0 &&
           Player_GetSwordHeld(this) != 0 as libc::c_int {
        if D_80853614 != 0 ||
               (*this).actor.category as libc::c_int !=
                   ACTORCAT_PLAYER as libc::c_int &&
                   !((*sControlInput).press.button as libc::c_int |
                         !(0x4000 as libc::c_int)) == 0 as libc::c_int {
            return 1 as libc::c_int
        }
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083BBA0(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    if func_8083BB20(this) != 0 && D_808535E4 != 7 as libc::c_int {
        func_8083BA90(globalCtx, this, 17 as libc::c_int, 3.0f32, 4.5f32);
        return 1 as libc::c_int
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083BC04(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    func_80835C58(globalCtx, this,
                  Some(func_80844708 as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  0 as libc::c_int);
    LinkAnimation_PlayOnceSetSpeed(globalCtx, &mut (*this).skelAnime,
                                   D_80853A94[(*this).modelAnimType as usize],
                                   1.25f32 * D_808535E8);
}
#[no_mangle]
pub unsafe extern "C" fn func_8083BC7C(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    if (*this).unk_84B[(*this).unk_846 as usize] as libc::c_int ==
           0 as libc::c_int && D_808535E4 != 7 as libc::c_int {
        func_8083BC04(this, globalCtx);
        return 1 as libc::c_int
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083BCD0(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext,
                                       mut arg2: s32) {
    func_80838940(this, D_80853D4C[arg2 as usize][0 as libc::c_int as usize],
                  if arg2 & 1 as libc::c_int == 0 { 5.8f32 } else { 3.5f32 },
                  globalCtx, 0x6800 as libc::c_int as u16_0);
    (arg2) != 0;
    (*this).unk_850 = 1 as libc::c_int as s16;
    (*this).unk_84F = arg2 as s8;
    (*this).currentYaw =
        ((*this).actor.shape.rot.y as libc::c_int +
             (arg2 << 0xe as libc::c_int)) as s16;
    (*this).linearVelocity =
        if arg2 & 1 as libc::c_int == 0 { 6.0f32 } else { 8.5f32 };
    (*this).stateFlags2 |= 0x80000 as libc::c_int as libc::c_uint;
    func_8002F7DC(&mut (*this).actor,
                  if arg2 << 0xe as libc::c_int == 0x8000 as libc::c_int {
                      0x83c as libc::c_int
                  } else { 0x83d as libc::c_int } as u16_0);
}
#[no_mangle]
pub unsafe extern "C" fn func_8083BDBC(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    let mut sp2C: s32 = 0;
    if !((*sControlInput).press.button as libc::c_int |
             !(0x8000 as libc::c_int)) == 0 as libc::c_int &&
           (*globalCtx).roomCtx.curRoom.unk_03 as libc::c_int !=
               2 as libc::c_int && D_808535E4 != 7 as libc::c_int &&
           SurfaceType_GetSlope(&mut (*globalCtx).colCtx,
                                (*this).actor.floorPoly,
                                (*this).actor.floorBgId as s32) !=
               1 as libc::c_int as libc::c_uint {
        sp2C = (*this).unk_84B[(*this).unk_846 as usize] as s32;
        if sp2C <= 0 as libc::c_int {
            if func_80833BCC(this) != 0 {
                if (*this).actor.category as libc::c_int !=
                       ACTORCAT_PLAYER as libc::c_int {
                    if sp2C < 0 as libc::c_int {
                        func_808389E8(this, &mut gPlayerAnim_002FE0,
                                      (*gGameInfo).data[(0 as libc::c_int *
                                                             6 as libc::c_int
                                                             *
                                                             16 as libc::c_int
                                                             +
                                                             69 as
                                                                 libc::c_int)
                                                            as usize] as
                                          libc::c_int as libc::c_float /
                                          100.0f32, globalCtx);
                    } else { func_8083BC04(this, globalCtx); }
                } else if Player_GetSwordHeld(this) != 0 &&
                              func_808365C8(this) != 0 {
                    func_8083BA90(globalCtx, this, 17 as libc::c_int, 5.0f32,
                                  5.0f32);
                } else { func_8083BC04(this, globalCtx); }
                return 1 as libc::c_int
            }
        } else {
            func_8083BCD0(this, globalCtx, sp2C);
            return 1 as libc::c_int
        }
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083BF50(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut anim: *mut LinkAnimationHeader = 0 as *mut LinkAnimationHeader;
    let mut sp30: f32_0 = 0.;
    sp30 = (*this).unk_868 - 3.0f32;
    if sp30 < 0.0f32 { sp30 += 29.0f32 }
    if sp30 < 14.0f32 {
        anim = D_80853AC4[(*this).modelAnimType as usize];
        sp30 = 11.0f32 - sp30;
        if sp30 < 0.0f32 { sp30 = 1.375f32 * -sp30 }
        sp30 /= 11.0f32
    } else {
        anim = D_80853ADC[(*this).modelAnimType as usize];
        sp30 = 26.0f32 - sp30;
        if sp30 < 0.0f32 { sp30 = 2 as libc::c_int as libc::c_float * -sp30 }
        sp30 /= 12.0f32
    }
    LinkAnimation_Change(globalCtx, &mut (*this).skelAnime, anim, 1.0f32,
                         0.0f32,
                         Animation_GetLastFrame(anim as *mut libc::c_void) as
                             f32_0, ANIMMODE_ONCE as libc::c_int as u8_0,
                         4.0f32 * sp30);
    (*this).currentYaw = (*this).actor.shape.rot.y;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083C0B8(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    func_80839FFC(this, globalCtx);
    func_8083BF50(this, globalCtx);
}
#[no_mangle]
pub unsafe extern "C" fn func_8083C0E8(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    func_80835C58(globalCtx, this,
                  Some(func_80840BC8 as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  1 as libc::c_int);
    func_80832264(globalCtx, this, func_80833338(this));
    (*this).currentYaw = (*this).actor.shape.rot.y;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083C148(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    if (*this).stateFlags3 as libc::c_int & 0x80 as libc::c_int == 0 {
        func_8083B010(this);
        if (*this).stateFlags1 & 0x8000000 as libc::c_int as libc::c_uint != 0
           {
            func_80838F18(globalCtx, this);
        } else { func_80839F90(this, globalCtx); }
        if ((*this).unk_6AD as libc::c_int) < 4 as libc::c_int {
            (*this).unk_6AD = 0 as libc::c_int as u8_0
        }
    }
    (*this).stateFlags1 &= !(0x106000 as libc::c_int) as libc::c_uint;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083C1DC(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    if func_80833B54(this) == 0 && D_808535E0 == 0 as libc::c_int &&
           (*this).stateFlags1 & 0x800000 as libc::c_int as libc::c_uint == 0
           &&
           !((*sControlInput).press.button as libc::c_int |
                 !(0x8000 as libc::c_int)) == 0 as libc::c_int {
        if func_8083BC7C(this, globalCtx) != 0 { return 1 as libc::c_int }
        if (*this).unk_837 as libc::c_int == 0 as libc::c_int &&
               (*this).heldItemActionParam as libc::c_int >=
                   PLAYER_AP_SWORD_MASTER as libc::c_int {
            func_80835F44(globalCtx, this, ITEM_NONE as libc::c_int);
        } else {
            (*this).stateFlags2 ^= 0x100000 as libc::c_int as libc::c_uint
        }
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083C2B0(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    let mut anim: *mut LinkAnimationHeader = 0 as *mut LinkAnimationHeader;
    let mut frame: f32_0 = 0.;
    if (*globalCtx).shootingGalleryStatus as libc::c_int == 0 as libc::c_int
           &&
           (*this).currentShield as libc::c_int !=
               PLAYER_SHIELD_NONE as libc::c_int &&
           !((*sControlInput).cur.button as libc::c_int |
                 !(0x10 as libc::c_int)) == 0 as libc::c_int &&
           (Player_IsChildWithHylianShield(this) != 0 ||
                func_80833B2C(this) == 0 && (*this).unk_664.is_null()) {
        func_80832318(this);
        func_808323B4(globalCtx, this);
        if func_80835C58(globalCtx, this,
                         Some(func_80843188 as
                                  unsafe extern "C" fn(_: *mut Player,
                                                       _: *mut GlobalContext)
                                      -> ()), 0 as libc::c_int) != 0 {
            (*this).stateFlags1 |= 0x400000 as libc::c_int as libc::c_uint;
            if Player_IsChildWithHylianShield(this) == 0 {
                Player_SetModelsForHoldingShield(this);
                anim = D_80853AF4[(*this).modelAnimType as usize]
            } else { anim = &mut gPlayerAnim_002400 }
            if anim != (*this).skelAnime.animation as *mut LinkAnimationHeader
               {
                if func_8008E9C4(this) != 0 {
                    (*this).unk_86C = 1.0f32
                } else { (*this).unk_86C = 0.0f32; func_80833C3C(this); }
                (*this).unk_6C0 = 0 as libc::c_int as s16;
                (*this).unk_6BE = (*this).unk_6C0;
                (*this).unk_6BC = (*this).unk_6BE
            }
            frame =
                Animation_GetLastFrame(anim as *mut libc::c_void) as f32_0;
            LinkAnimation_Change(globalCtx, &mut (*this).skelAnime, anim,
                                 1.0f32, frame, frame,
                                 ANIMMODE_ONCE as libc::c_int as u8_0,
                                 0.0f32);
            if Player_IsChildWithHylianShield(this) != 0 {
                func_80832F54(globalCtx, this, 4 as libc::c_int);
            }
            func_8002F7DC(&mut (*this).actor, 0x181f as libc::c_int as u16_0);
        }
        return 1 as libc::c_int
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083C484(mut this: *mut Player,
                                       mut arg1: *mut f32_0,
                                       mut arg2: *mut s16) -> s32 {
    let mut yaw: s16 =
        ((*this).currentYaw as libc::c_int - *arg2 as libc::c_int) as s16;
    if (if yaw as libc::c_int >= 0 as libc::c_int {
            yaw as libc::c_int
        } else { -(yaw as libc::c_int) }) > 0x6000 as libc::c_int {
        if func_8083721C(this) != 0 {
            *arg1 = 0.0f32;
            *arg2 = (*this).currentYaw
        } else { return 1 as libc::c_int }
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083C50C(mut this: *mut Player) {
    if (*this).unk_844 as libc::c_int > 0 as libc::c_int &&
           !(!((*sControlInput).cur.button as libc::c_int |
                   !(0x4000 as libc::c_int)) == 0 as libc::c_int) {
        (*this).unk_844 = -((*this).unk_844 as libc::c_int) as s8
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8083C544(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    if !((*sControlInput).cur.button as libc::c_int |
             !(0x4000 as libc::c_int)) == 0 as libc::c_int {
        if (*this).stateFlags1 & 0x400000 as libc::c_int as libc::c_uint == 0
               && Player_GetSwordHeld(this) != 0 as libc::c_int &&
               (*this).unk_844 as libc::c_int == 1 as libc::c_int &&
               (*this).heldItemActionParam as libc::c_int !=
                   PLAYER_AP_STICK as libc::c_int {
            if (*this).heldItemActionParam as libc::c_int !=
                   PLAYER_AP_SWORD_BGS as libc::c_int ||
                   gSaveContext.swordHealth as libc::c_int as libc::c_float >
                       0.0f32 {
                func_808377DC(globalCtx, this);
                return 1 as libc::c_int
            }
        }
    } else { func_8083C50C(this); }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083C61C(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) -> s32 {
    if (*globalCtx).roomCtx.curRoom.unk_03 as libc::c_int != 2 as libc::c_int
           &&
           (*this).actor.bgCheckFlags as libc::c_int & 1 as libc::c_int != 0
           &&
           gSaveContext.inventory.ammo[gItemSlots[ITEM_NUT as libc::c_int as
                                                      usize] as usize] as
               libc::c_int != 0 as libc::c_int {
        func_80835C58(globalCtx, this,
                      Some(func_8084E604 as
                               unsafe extern "C" fn(_: *mut Player,
                                                    _: *mut GlobalContext)
                                   -> ()), 0 as libc::c_int);
        func_80832264(globalCtx, this, &mut gPlayerAnim_003048);
        (*this).unk_6AD = 0 as libc::c_int as u8_0;
        return 1 as libc::c_int
    }
    return 0 as libc::c_int;
}
static mut D_80854554: [struct_80854554; 2] =
    unsafe {
        [{
             let mut init =
                 struct_80854554{unk_00:
                                     &gPlayerAnim_002648 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04:
                                     &gPlayerAnim_002640 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_08: 2 as libc::c_int as u8_0,
                                 unk_09: 3 as libc::c_int as u8_0,};
             init
         },
         {
             let mut init =
                 struct_80854554{unk_00:
                                     &gPlayerAnim_002680 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04:
                                     &gPlayerAnim_002678 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_08: 5 as libc::c_int as u8_0,
                                 unk_09: 3 as libc::c_int as u8_0,};
             init
         }]
    };
#[no_mangle]
pub unsafe extern "C" fn func_8083C6B8(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) -> s32 {
    let mut sp24: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    if D_80853614 != 0 {
        if Player_GetBottleHeld(this) >= 0 as libc::c_int {
            func_80835C58(globalCtx, this,
                          Some(func_8084ECA4 as
                                   unsafe extern "C" fn(_: *mut Player,
                                                        _: *mut GlobalContext)
                                       -> ()), 0 as libc::c_int);
            if (*this).actor.yDistToWater > 12.0f32 {
                (*this).unk_850 = 1 as libc::c_int as s16
            }
            func_808322D0(globalCtx, this,
                          D_80854554[(*this).unk_850 as usize].unk_00);
            func_8002F7DC(&mut (*this).actor, 0x1801 as libc::c_int as u16_0);
            func_80832698(this, 0x6814 as libc::c_int as u16_0);
            return 1 as libc::c_int
        }
        if (*this).heldItemActionParam as libc::c_int ==
               PLAYER_AP_FISHING_POLE as libc::c_int {
            sp24 = (*this).actor.world.pos;
            sp24.y += 50.0f32;
            if (*this).actor.bgCheckFlags as libc::c_int & 1 as libc::c_int ==
                   0 || (*this).actor.world.pos.z > 1300.0f32 ||
                   BgCheck_SphVsFirstPoly(&mut (*globalCtx).colCtx, &mut sp24,
                                          20.0f32) != 0 {
                func_80078884(0x4806 as libc::c_int as u16_0);
                return 0 as libc::c_int
            }
            func_80835C58(globalCtx, this,
                          Some(func_80850C68 as
                                   unsafe extern "C" fn(_: *mut Player,
                                                        _: *mut GlobalContext)
                                       -> ()), 0 as libc::c_int);
            (*this).unk_860 = 1 as libc::c_int as s16;
            func_80832210(this);
            func_80832264(globalCtx, this, &mut gPlayerAnim_002C30);
            return 1 as libc::c_int
        } else { return 0 as libc::c_int }
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083C858(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut func: PlayerFunc674 = None;
    if func_80833BCC(this) != 0 {
        func =
            Some(func_8084227C as
                     unsafe extern "C" fn(_: *mut Player,
                                          _: *mut GlobalContext) -> ())
    } else {
        func =
            Some(func_80842180 as
                     unsafe extern "C" fn(_: *mut Player,
                                          _: *mut GlobalContext) -> ())
    }
    func_80835C58(globalCtx, this, func, 1 as libc::c_int);
    func_80832BE8(globalCtx, this,
                  D_80853944[(*this).modelAnimType as usize]);
    (*this).unk_89C = 0 as libc::c_int as s16;
    (*this).unk_868 = 0.0f32;
    (*this).unk_864 = (*this).unk_868;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083C8DC(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext,
                                       mut arg2: s16) {
    (*this).currentYaw = arg2;
    (*this).actor.shape.rot.y = (*this).currentYaw;
    func_8083C858(this, globalCtx);
}
#[no_mangle]
pub unsafe extern "C" fn func_8083C910(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player, mut arg2: f32_0)
 -> s32 {
    let mut sp2C: *mut WaterBox = 0 as *mut WaterBox;
    let mut sp28: f32_0 = 0.;
    sp28 = (*this).actor.world.pos.y;
    if WaterBox_GetSurface1(globalCtx, &mut (*globalCtx).colCtx,
                            (*this).actor.world.pos.x,
                            (*this).actor.world.pos.z, &mut sp28, &mut sp2C)
           != 0 as libc::c_int {
        sp28 -= (*this).actor.world.pos.y;
        if (*(*this).ageProperties).unk_24 <= sp28 {
            func_80835C58(globalCtx, this,
                          Some(func_8084D7C4 as
                                   unsafe extern "C" fn(_: *mut Player,
                                                        _: *mut GlobalContext)
                                       -> ()), 0 as libc::c_int);
            func_80832C6C(globalCtx, this, &mut gPlayerAnim_0032F0);
            (*this).stateFlags1 |= 0x28000000 as libc::c_int as libc::c_uint;
            (*this).unk_850 = 20 as libc::c_int as s16;
            (*this).linearVelocity = 2.0f32;
            Player_SetBootData(globalCtx, this);
            return 0 as libc::c_int
        }
    }
    func_80838E70(globalCtx, this, arg2, (*this).actor.shape.rot.y);
    (*this).stateFlags1 |= 0x20000000 as libc::c_int as libc::c_uint;
    return 1 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083CA20(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    if func_8083C910(globalCtx, this, 180.0f32) != 0 {
        (*this).unk_850 = -(20 as libc::c_int) as s16
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8083CA54(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    (*this).linearVelocity = 2.0f32;
    gSaveContext.entranceSpeed = 2.0f32;
    if func_8083C910(globalCtx, this, 120.0f32) != 0 {
        (*this).unk_850 = -(15 as libc::c_int) as s16
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8083CA9C(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    if gSaveContext.entranceSpeed < 0.1f32 {
        gSaveContext.entranceSpeed = 0.1f32
    }
    (*this).linearVelocity = gSaveContext.entranceSpeed;
    if func_8083C910(globalCtx, this, 800.0f32) != 0 {
        (*this).unk_850 =
            (-(80 as libc::c_int) as libc::c_float / (*this).linearVelocity)
                as s16;
        if ((*this).unk_850 as libc::c_int) < -(20 as libc::c_int) {
            (*this).unk_850 = -(20 as libc::c_int) as s16
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8083CB2C(mut this: *mut Player, mut yaw: s16,
                                       mut globalCtx: *mut GlobalContext) {
    func_80835C58(globalCtx, this,
                  Some(func_808414F8 as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  1 as libc::c_int);
    LinkAnimation_CopyJointToMorph(globalCtx, &mut (*this).skelAnime);
    (*this).unk_868 = 0.0f32;
    (*this).unk_864 = (*this).unk_868;
    (*this).currentYaw = yaw;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083CB94(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    func_80835C58(globalCtx, this,
                  Some(func_80840DE4 as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  1 as libc::c_int);
    func_80832BE8(globalCtx, this,
                  D_8085392C[(*this).modelAnimType as usize]);
}
#[no_mangle]
pub unsafe extern "C" fn func_8083CBF0(mut this: *mut Player, mut yaw: s16,
                                       mut globalCtx: *mut GlobalContext) {
    func_80835C58(globalCtx, this,
                  Some(func_808423EC as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  1 as libc::c_int);
    LinkAnimation_Change(globalCtx, &mut (*this).skelAnime,
                         &mut gPlayerAnim_0024F8, 2.2f32, 0.0f32,
                         Animation_GetLastFrame(&mut gPlayerAnim_0024F8 as
                                                    *mut LinkAnimationHeader
                                                    as *mut libc::c_void) as
                             f32_0, ANIMMODE_ONCE as libc::c_int as u8_0,
                         -6.0f32);
    (*this).linearVelocity = 8.0f32;
    (*this).currentYaw = yaw;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083CC9C(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    func_80835C58(globalCtx, this,
                  Some(func_8084193C as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  1 as libc::c_int);
    func_80832BE8(globalCtx, this,
                  D_80853B6C[(*this).modelAnimType as usize]);
    (*this).unk_868 = 0.0f32;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083CD00(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    func_80835C58(globalCtx, this,
                  Some(func_8084251C as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  1 as libc::c_int);
    LinkAnimation_PlayOnceSetSpeed(globalCtx, &mut (*this).skelAnime,
                                   &mut gPlayerAnim_0024E8, 2.0f32);
}
#[no_mangle]
pub unsafe extern "C" fn func_8083CD54(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player, mut yaw: s16) {
    (*this).currentYaw = yaw;
    func_80835C58(globalCtx, this,
                  Some(func_80841BA8 as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  1 as libc::c_int);
    (*this).unk_87E = 1200 as libc::c_int as s16;
    (*this).unk_87E = ((*this).unk_87E as libc::c_float * D_808535E8) as s16;
    LinkAnimation_Change(globalCtx, &mut (*this).skelAnime,
                         D_80853B84[(*this).modelAnimType as usize], 1.0f32,
                         0.0f32, 0.0f32, ANIMMODE_LOOP as libc::c_int as u8_0,
                         -6.0f32);
}
#[no_mangle]
pub unsafe extern "C" fn func_8083CE0C(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut anim: *mut LinkAnimationHeader = 0 as *mut LinkAnimationHeader;
    func_80835C58(globalCtx, this,
                  Some(func_80840BC8 as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  1 as libc::c_int);
    if (*this).unk_870 < 0.5f32 {
        anim = D_80853BB4[(*this).modelAnimType as usize]
    } else { anim = D_80853B9C[(*this).modelAnimType as usize] }
    func_80832264(globalCtx, this, anim);
    (*this).currentYaw = (*this).actor.shape.rot.y;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083CEAC(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    func_80835C58(globalCtx, this,
                  Some(func_80840450 as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  1 as libc::c_int);
    func_80832B0C(globalCtx, this,
                  D_808539BC[(*this).modelAnimType as usize]);
    (*this).unk_850 = 1 as libc::c_int as s16;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083CF10(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    if (*this).linearVelocity != 0.0f32 {
        func_8083C858(this, globalCtx);
    } else { func_8083CE0C(this, globalCtx); };
}
#[no_mangle]
pub unsafe extern "C" fn func_8083CF5C(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    if (*this).linearVelocity != 0.0f32 {
        func_8083C858(this, globalCtx);
    } else { func_80839F90(this, globalCtx); };
}
#[no_mangle]
pub unsafe extern "C" fn func_8083CFA8(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player, mut arg2: f32_0,
                                       mut splashScale: s32) -> s32 {
    let mut sp3C: f32_0 = fabsf(arg2);
    let mut sp38: *mut WaterBox = 0 as *mut WaterBox;
    let mut sp34: f32_0 = 0.;
    let mut splashPos: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut splashType: s32 = 0;
    if sp3C > 2.0f32 {
        splashPos.x = (*this).bodyPartsPos[0 as libc::c_int as usize].x;
        splashPos.z = (*this).bodyPartsPos[0 as libc::c_int as usize].z;
        sp34 = (*this).actor.world.pos.y;
        if WaterBox_GetSurface1(globalCtx, &mut (*globalCtx).colCtx,
                                splashPos.x, splashPos.z, &mut sp34,
                                &mut sp38) != 0 {
            if sp34 - (*this).actor.world.pos.y < 100.0f32 {
                splashType =
                    if sp3C <= 10.0f32 {
                        0 as libc::c_int
                    } else { 1 as libc::c_int };
                splashPos.y = sp34;
                EffectSsGSplash_Spawn(globalCtx, &mut splashPos,
                                      0 as *mut Color_RGBA8,
                                      0 as *mut Color_RGBA8,
                                      splashType as s16, splashScale as s16);
                return 1 as libc::c_int
            }
        }
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083D0A8(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: f32_0) {
    (*this).stateFlags1 |= 0x40000 as libc::c_int as libc::c_uint;
    (*this).stateFlags1 &= !(0x8000000 as libc::c_int) as libc::c_uint;
    func_80832340(globalCtx, this);
    if func_8083CFA8(globalCtx, this, arg2, 500 as libc::c_int) != 0 {
        func_8002F7DC(&mut (*this).actor, 0x288a as libc::c_int as u16_0);
    }
    Player_SetBootData(globalCtx, this);
}
#[no_mangle]
pub unsafe extern "C" fn func_8083D12C(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut Input) -> s32 {
    if (*this).stateFlags1 & 0x400 as libc::c_int as libc::c_uint == 0 &&
           (*this).stateFlags2 & 0x400 as libc::c_int as libc::c_uint == 0 {
        if arg2.is_null() ||
               !((*arg2).press.button as libc::c_int |
                     !(0x8000 as libc::c_int)) == 0 as libc::c_int &&
                   (if (*this).unk_6C2 as libc::c_int >= 0 as libc::c_int {
                        (*this).unk_6C2 as libc::c_int
                    } else { -((*this).unk_6C2 as libc::c_int) }) <
                       12000 as libc::c_int &&
                   (*this).currentBoots as libc::c_int !=
                       PLAYER_BOOTS_IRON as libc::c_int {
            func_80835C58(globalCtx, this,
                          Some(func_8084DC48 as
                                   unsafe extern "C" fn(_: *mut Player,
                                                        _: *mut GlobalContext)
                                       -> ()), 0 as libc::c_int);
            func_80832264(globalCtx, this, &mut gPlayerAnim_003308);
            (*this).unk_6C2 = 0 as libc::c_int as s16;
            (*this).stateFlags2 |= 0x400 as libc::c_int as libc::c_uint;
            (*this).actor.velocity.y = 0.0f32;
            if !arg2.is_null() {
                (*this).stateFlags2 |= 0x800 as libc::c_int as libc::c_uint;
                func_8002F7DC(&mut (*this).actor,
                              0x864 as libc::c_int as u16_0);
            }
            return 1 as libc::c_int
        }
    }
    if (*this).stateFlags1 & 0x400 as libc::c_int as libc::c_uint != 0 ||
           (*this).stateFlags2 & 0x400 as libc::c_int as libc::c_uint != 0 {
        if (*this).actor.velocity.y > 0.0f32 {
            if (*this).actor.yDistToWater < (*(*this).ageProperties).unk_30 {
                (*this).stateFlags2 &=
                    !(0x400 as libc::c_int) as libc::c_uint;
                if !arg2.is_null() {
                    func_80835C58(globalCtx, this,
                                  Some(func_8084E1EC as
                                           unsafe extern "C" fn(_:
                                                                    *mut Player,
                                                                _:
                                                                    *mut GlobalContext)
                                               -> ()), 1 as libc::c_int);
                    if (*this).stateFlags1 &
                           0x400 as libc::c_int as libc::c_uint != 0 {
                        (*this).stateFlags1 |=
                            0x20000c00 as libc::c_int as libc::c_uint
                    }
                    (*this).unk_850 = 2 as libc::c_int as s16
                }
                func_80832340(globalCtx, this);
                func_80832B0C(globalCtx, this,
                              if (*this).stateFlags1 &
                                     0x800 as libc::c_int as libc::c_uint != 0
                                 {
                                  &mut gPlayerAnim_003318
                              } else { &mut gPlayerAnim_003300 });
                if func_8083CFA8(globalCtx, this, (*this).actor.velocity.y,
                                 500 as libc::c_int) != 0 {
                    func_8002F7DC(&mut (*this).actor,
                                  0x863 as libc::c_int as u16_0);
                }
                return 1 as libc::c_int
            }
        }
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083D330(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    func_80832284(globalCtx, this, &mut gPlayerAnim_0032F0);
    (*this).unk_6C2 = 16000 as libc::c_int as s16;
    (*this).unk_850 = 1 as libc::c_int as s16;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083D36C(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    if (*this).currentBoots as libc::c_int != PLAYER_BOOTS_IRON as libc::c_int
           ||
           (*this).actor.bgCheckFlags as libc::c_int & 1 as libc::c_int == 0 {
        func_80832564(globalCtx, this);
        if (*this).currentBoots as libc::c_int !=
               PLAYER_BOOTS_IRON as libc::c_int &&
               (*this).stateFlags2 & 0x400 as libc::c_int as libc::c_uint != 0
           {
            (*this).stateFlags2 &= !(0x400 as libc::c_int) as libc::c_uint;
            func_8083D12C(globalCtx, this, 0 as *mut Input);
            (*this).unk_84F = 1 as libc::c_int as s8
        } else if Some(func_80844A44 as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ())
                      == (*this).func_674 {
            func_80835C58(globalCtx, this,
                          Some(func_8084DC48 as
                                   unsafe extern "C" fn(_: *mut Player,
                                                        _: *mut GlobalContext)
                                       -> ()), 0 as libc::c_int);
            func_8083D330(globalCtx, this);
        } else {
            func_80835C58(globalCtx, this,
                          Some(func_8084D610 as
                                   unsafe extern "C" fn(_: *mut Player,
                                                        _: *mut GlobalContext)
                                       -> ()), 1 as libc::c_int);
            func_80832B0C(globalCtx, this,
                          if (*this).actor.bgCheckFlags as libc::c_int &
                                 1 as libc::c_int != 0 {
                              &mut gPlayerAnim_003330
                          } else { &mut gPlayerAnim_0032E0 });
        }
    }
    if (*this).stateFlags1 & 0x8000000 as libc::c_int as libc::c_uint == 0 ||
           (*this).actor.yDistToWater < (*(*this).ageProperties).unk_2C {
        if func_8083CFA8(globalCtx, this, (*this).actor.velocity.y,
                         500 as libc::c_int) != 0 {
            func_8002F7DC(&mut (*this).actor, 0x2889 as libc::c_int as u16_0);
            if (*this).fallDistance as libc::c_int as libc::c_float > 800.0f32
               {
                func_80832698(this, 0x6804 as libc::c_int as u16_0);
            }
        }
    }
    (*this).stateFlags1 |= 0x8000000 as libc::c_int as libc::c_uint;
    (*this).stateFlags2 |= 0x400 as libc::c_int as libc::c_uint;
    (*this).stateFlags1 &= !(0xc0000 as libc::c_int) as libc::c_uint;
    (*this).unk_854 = 0.0f32;
    Player_SetBootData(globalCtx, this);
}
#[no_mangle]
pub unsafe extern "C" fn func_8083D53C(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    if (*this).actor.yDistToWater < (*(*this).ageProperties).unk_2C {
        Audio_SetBaseFilter(0 as libc::c_int as u8_0);
        (*this).unk_840 = 0 as libc::c_int as u16_0
    } else {
        Audio_SetBaseFilter(0x20 as libc::c_int as u8_0);
        if ((*this).unk_840 as libc::c_int) < 300 as libc::c_int {
            (*this).unk_840 = (*this).unk_840.wrapping_add(1)
        }
    }
    if Some(func_80845668 as
                unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                    -> ()) != (*this).func_674 &&
           Some(func_8084BDFC as
                    unsafe extern "C" fn(_: *mut Player,
                                         _: *mut GlobalContext) -> ()) !=
               (*this).func_674 {
        if (*(*this).ageProperties).unk_2C < (*this).actor.yDistToWater {
            if (*this).stateFlags1 & 0x8000000 as libc::c_int as libc::c_uint
                   == 0 ||
                   !((*this).currentBoots as libc::c_int ==
                         PLAYER_BOOTS_IRON as libc::c_int &&
                         (*this).actor.bgCheckFlags as libc::c_int &
                             1 as libc::c_int != 0) &&
                       Some(func_8084E30C as
                                unsafe extern "C" fn(_: *mut Player,
                                                     _: *mut GlobalContext)
                                    -> ()) != (*this).func_674 &&
                       Some(func_8084E368 as
                                unsafe extern "C" fn(_: *mut Player,
                                                     _: *mut GlobalContext)
                                    -> ()) != (*this).func_674 &&
                       Some(func_8084D610 as
                                unsafe extern "C" fn(_: *mut Player,
                                                     _: *mut GlobalContext)
                                    -> ()) != (*this).func_674 &&
                       Some(func_8084D84C as
                                unsafe extern "C" fn(_: *mut Player,
                                                     _: *mut GlobalContext)
                                    -> ()) != (*this).func_674 &&
                       Some(func_8084DAB4 as
                                unsafe extern "C" fn(_: *mut Player,
                                                     _: *mut GlobalContext)
                                    -> ()) != (*this).func_674 &&
                       Some(func_8084DC48 as
                                unsafe extern "C" fn(_: *mut Player,
                                                     _: *mut GlobalContext)
                                    -> ()) != (*this).func_674 &&
                       Some(func_8084E1EC as
                                unsafe extern "C" fn(_: *mut Player,
                                                     _: *mut GlobalContext)
                                    -> ()) != (*this).func_674 &&
                       Some(func_8084D7C4 as
                                unsafe extern "C" fn(_: *mut Player,
                                                     _: *mut GlobalContext)
                                    -> ()) != (*this).func_674 {
                func_8083D36C(globalCtx, this);
                return
            }
        } else if (*this).stateFlags1 &
                      0x8000000 as libc::c_int as libc::c_uint != 0 &&
                      (*this).actor.yDistToWater <
                          (*(*this).ageProperties).unk_24 {
            if (*this).skelAnime.moveFlags as libc::c_int == 0 as libc::c_int
                   &&
                   (*this).currentBoots as libc::c_int !=
                       PLAYER_BOOTS_IRON as libc::c_int {
                func_8083CD54(globalCtx, this, (*this).actor.shape.rot.y);
            }
            func_8083D0A8(globalCtx, this, (*this).actor.velocity.y);
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8083D6EC(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    let mut ripplePos: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut temp1: f32_0 = 0.;
    let mut temp2: f32_0 = 0.;
    let mut temp3: f32_0 = 0.;
    let mut temp4: f32_0 = 0.;
    (*this).actor.minVelocityY = -20.0f32;
    (*this).actor.gravity =
        (*gGameInfo).data[(0 as libc::c_int * 6 as libc::c_int *
                               16 as libc::c_int + 68 as libc::c_int) as
                              usize] as libc::c_int as libc::c_float /
            100.0f32;
    if func_8083816C(D_808535E4) != 0 {
        temp1 = fabsf((*this).linearVelocity) * 20.0f32;
        temp3 = 0.0f32;
        if D_808535E4 == 4 as libc::c_int {
            if (*this).unk_6C4 > 1300.0f32 {
                temp2 = (*this).unk_6C4
            } else { temp2 = 1300.0f32 }
            if (*this).currentBoots as libc::c_int ==
                   PLAYER_BOOTS_HOVER as libc::c_int {
                temp1 += temp1
            } else if (*this).currentBoots as libc::c_int ==
                          PLAYER_BOOTS_IRON as libc::c_int {
                temp1 *= 0.3f32
            }
        } else {
            temp2 = 20000.0f32;
            if (*this).currentBoots as libc::c_int !=
                   PLAYER_BOOTS_HOVER as libc::c_int {
                temp1 += temp1
            } else if D_808535E4 == 7 as libc::c_int ||
                          (*this).currentBoots as libc::c_int ==
                              PLAYER_BOOTS_IRON as libc::c_int {
                temp1 = 0 as libc::c_int as f32_0
            }
        }
        if (*this).currentBoots as libc::c_int !=
               PLAYER_BOOTS_HOVER as libc::c_int {
            temp3 = (temp2 - (*this).unk_6C4) * 0.02f32;
            temp3 =
                if temp3 < 0.0f32 {
                    0.0f32
                } else if temp3 > 300.0f32 { 300.0f32 } else { temp3 };
            if (*this).currentBoots as libc::c_int ==
                   PLAYER_BOOTS_IRON as libc::c_int {
                temp3 += temp3
            }
        }
        (*this).unk_6C4 += temp3 - temp1;
        (*this).unk_6C4 =
            if (*this).unk_6C4 < 0.0f32 {
                0.0f32
            } else if (*this).unk_6C4 > temp2 {
                temp2
            } else { (*this).unk_6C4 };
        (*this).actor.gravity -= (*this).unk_6C4 * 0.004f32
    } else { (*this).unk_6C4 = 0.0f32 }
    if (*this).actor.bgCheckFlags as libc::c_int & 0x20 as libc::c_int != 0 {
        if (*this).actor.yDistToWater < 50.0f32 {
            temp4 =
                fabsf((*this).bodyPartsPos[0 as libc::c_int as usize].x -
                          (*this).unk_A88.x) +
                    fabsf((*this).bodyPartsPos[0 as libc::c_int as usize].y -
                              (*this).unk_A88.y) +
                    fabsf((*this).bodyPartsPos[0 as libc::c_int as usize].z -
                              (*this).unk_A88.z);
            if temp4 > 4.0f32 { temp4 = 4.0f32 }
            (*this).unk_854 += temp4;
            if (*this).unk_854 > 15.0f32 {
                (*this).unk_854 = 0.0f32;
                ripplePos.x =
                    Rand_ZeroOne() * 10.0f32 + (*this).actor.world.pos.x;
                ripplePos.y =
                    (*this).actor.world.pos.y + (*this).actor.yDistToWater;
                ripplePos.z =
                    Rand_ZeroOne() * 10.0f32 + (*this).actor.world.pos.z;
                EffectSsGRipple_Spawn(globalCtx, &mut ripplePos,
                                      100 as libc::c_int as s16,
                                      500 as libc::c_int as s16,
                                      0 as libc::c_int as s16);
                if (*this).linearVelocity > 4.0f32 && func_808332B8(this) == 0
                       &&
                       (*this).actor.world.pos.y + (*this).actor.yDistToWater
                           < (*this).bodyPartsPos[0 as libc::c_int as usize].y
                   {
                    func_8083CFA8(globalCtx, this, 20.0f32,
                                  (fabsf((*this).linearVelocity) * 50.0f32 +
                                       (*this).actor.yDistToWater * 5.0f32) as
                                      s32);
                }
            }
        }
        if (*this).actor.yDistToWater > 40.0f32 {
            let mut numBubbles: s32 = 0 as libc::c_int;
            let mut i: s32 = 0;
            if (*this).actor.velocity.y > -1.0f32 ||
                   (*this).actor.bgCheckFlags as libc::c_int &
                       1 as libc::c_int != 0 {
                if Rand_ZeroOne() < 0.2f32 { numBubbles = 1 as libc::c_int }
            } else {
                numBubbles = ((*this).actor.velocity.y * -2.0f32) as s32
            }
            i = 0 as libc::c_int;
            while i < numBubbles {
                EffectSsBubble_Spawn(globalCtx, &mut (*this).actor.world.pos,
                                     20.0f32, 10.0f32, 20.0f32, 0.13f32);
                i += 1
            }
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8083DB98(mut this: *mut Player, mut arg1: s32)
 -> s32 {
    let mut unk_664: *mut Actor = (*this).unk_664;
    let mut sp30: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut sp2E: s16 = 0;
    let mut sp2C: s16 = 0;
    sp30.x = (*this).actor.world.pos.x;
    sp30.y = (*this).bodyPartsPos[7 as libc::c_int as usize].y + 3.0f32;
    sp30.z = (*this).actor.world.pos.z;
    sp2E = Math_Vec3f_Pitch(&mut sp30, &mut (*unk_664).focus.pos);
    sp2C = Math_Vec3f_Yaw(&mut sp30, &mut (*unk_664).focus.pos);
    Math_SmoothStepToS(&mut (*this).actor.focus.rot.y, sp2C,
                       4 as libc::c_int as s16, 10000 as libc::c_int as s16,
                       0 as libc::c_int as s16);
    Math_SmoothStepToS(&mut (*this).actor.focus.rot.x, sp2E,
                       4 as libc::c_int as s16, 10000 as libc::c_int as s16,
                       0 as libc::c_int as s16);
    (*this).unk_6AE =
        ((*this).unk_6AE as libc::c_int | 2 as libc::c_int) as u16_0;
    return func_80836AB8(this, arg1);
}
static mut D_8085456C: Vec3f =
    { let mut init = Vec3f{x: 0.0f32, y: 100.0f32, z: 40.0f32,}; init };
#[no_mangle]
pub unsafe extern "C" fn func_8083DC54(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut sp46: s16 = 0;
    let mut temp2: s16 = 0;
    let mut temp1: f32_0 = 0.;
    let mut sp34: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    if !(*this).unk_664.is_null() {
        if func_8002DD78(this) != 0 || func_808334B4(this) != 0 {
            func_8083DB98(this, 1 as libc::c_int);
        } else { func_8083DB98(this, 0 as libc::c_int); }
        return
    }
    if D_808535E4 == 11 as libc::c_int {
        Math_SmoothStepToS(&mut (*this).actor.focus.rot.x,
                           -(20000 as libc::c_int) as s16,
                           10 as libc::c_int as s16,
                           4000 as libc::c_int as s16,
                           800 as libc::c_int as s16);
    } else {
        sp46 = 0 as libc::c_int as s16;
        temp1 = func_8083973C(globalCtx, this, &mut D_8085456C, &mut sp34);
        if temp1 > -32000.0f32 {
            temp2 = Math_Atan2S(40.0f32, (*this).actor.world.pos.y - temp1);
            sp46 =
                if (temp2 as libc::c_int) < -(4000 as libc::c_int) {
                    -(4000 as libc::c_int)
                } else if temp2 as libc::c_int > 4000 as libc::c_int {
                    4000 as libc::c_int
                } else { temp2 as libc::c_int } as s16
        }
        (*this).actor.focus.rot.y = (*this).actor.shape.rot.y;
        Math_SmoothStepToS(&mut (*this).actor.focus.rot.x, sp46,
                           14 as libc::c_int as s16,
                           4000 as libc::c_int as s16,
                           30 as libc::c_int as s16);
    }
    func_80836AB8(this,
                  (func_8002DD78(this) != 0 || func_808334B4(this) != 0) as
                      libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn func_8083DDC8(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut temp1: s16 = 0;
    let mut temp2: s16 = 0;
    if func_8002DD78(this) == 0 && func_808334B4(this) == 0 &&
           (*this).linearVelocity > 5.0f32 {
        temp1 = ((*this).linearVelocity * 200.0f32) as s16;
        temp2 =
            (((*this).currentYaw as libc::c_int -
                  (*this).actor.shape.rot.y as libc::c_int) as s16 as
                 libc::c_int as libc::c_float * (*this).linearVelocity *
                 0.1f32) as s16;
        temp1 =
            if (temp1 as libc::c_int) < -(4000 as libc::c_int) {
                -(4000 as libc::c_int)
            } else if temp1 as libc::c_int > 4000 as libc::c_int {
                4000 as libc::c_int
            } else { temp1 as libc::c_int } as s16;
        temp2 =
            if (-(temp2 as libc::c_int)) < -(4000 as libc::c_int) {
                -(4000 as libc::c_int)
            } else if -(temp2 as libc::c_int) > 4000 as libc::c_int {
                4000 as libc::c_int
            } else { -(temp2 as libc::c_int) } as s16;
        Math_ScaledStepToS(&mut (*this).unk_6BC, temp1,
                           900 as libc::c_int as s16);
        (*this).unk_6B6 = (-((*this).unk_6BC as f32_0) * 0.5f32) as s16;
        Math_ScaledStepToS(&mut (*this).unk_6BA, temp2,
                           300 as libc::c_int as s16);
        Math_ScaledStepToS(&mut (*this).unk_6C0, temp2,
                           200 as libc::c_int as s16);
        (*this).unk_6AE =
            ((*this).unk_6AE as libc::c_int | 0x168 as libc::c_int) as u16_0
    } else { func_8083DC54(this, globalCtx); };
}
#[no_mangle]
pub unsafe extern "C" fn func_8083DF68(mut this: *mut Player, mut arg1: f32_0,
                                       mut arg2: s16) {
    Math_AsymStepToF(&mut (*this).linearVelocity, arg1,
                     (*gGameInfo).data[(0 as libc::c_int * 6 as libc::c_int *
                                            16 as libc::c_int +
                                            19 as libc::c_int) as usize] as
                         libc::c_int as libc::c_float / 100.0f32, 1.5f32);
    Math_ScaledStepToS(&mut (*this).currentYaw, arg2,
                       (*gGameInfo).data[(0 as libc::c_int * 6 as libc::c_int
                                              * 16 as libc::c_int +
                                              27 as libc::c_int) as usize]);
}
#[no_mangle]
pub unsafe extern "C" fn func_8083DFE0(mut this: *mut Player,
                                       mut arg1: *mut f32_0,
                                       mut arg2: *mut s16) {
    let mut yawDiff: s16 =
        ((*this).currentYaw as libc::c_int - *arg2 as libc::c_int) as s16;
    if (*this).swordState as libc::c_int == 0 as libc::c_int {
        (*this).linearVelocity =
            if (*this).linearVelocity <
                   -((*gGameInfo).data[(0 as libc::c_int * 6 as libc::c_int *
                                            16 as libc::c_int +
                                            45 as libc::c_int) as usize] as
                         libc::c_int as libc::c_float / 100.0f32) {
                -((*gGameInfo).data[(0 as libc::c_int * 6 as libc::c_int *
                                         16 as libc::c_int +
                                         45 as libc::c_int) as usize] as
                      libc::c_int as libc::c_float / 100.0f32)
            } else if (*this).linearVelocity >
                          (*gGameInfo).data[(0 as libc::c_int *
                                                 6 as libc::c_int *
                                                 16 as libc::c_int +
                                                 45 as libc::c_int) as usize]
                              as libc::c_int as libc::c_float / 100.0f32 {
                ((*gGameInfo).data[(0 as libc::c_int * 6 as libc::c_int *
                                        16 as libc::c_int + 45 as libc::c_int)
                                       as usize] as libc::c_int as
                     libc::c_float) / 100.0f32
            } else { (*this).linearVelocity }
    }
    if (if yawDiff as libc::c_int >= 0 as libc::c_int {
            yawDiff as libc::c_int
        } else { -(yawDiff as libc::c_int) }) > 0x6000 as libc::c_int {
        if Math_StepToF(&mut (*this).linearVelocity, 0.0f32, 1.0f32) != 0 {
            (*this).currentYaw = *arg2
        }
    } else {
        Math_AsymStepToF(&mut (*this).linearVelocity, *arg1, 0.05f32, 0.1f32);
        Math_ScaledStepToS(&mut (*this).currentYaw, *arg2,
                           200 as libc::c_int as s16);
    };
}
static mut D_80854578: [struct_80854578; 2] =
    unsafe {
        [{
             let mut init =
                 struct_80854578{anim:
                                     &gPlayerAnim_003398 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04: 35.17f32,
                                 unk_08: 6.6099997f32,};
             init
         },
         {
             let mut init =
                 struct_80854578{anim:
                                     &gPlayerAnim_0033A8 as
                                         *const LinkAnimationHeader as
                                         *mut LinkAnimationHeader,
                                 unk_04: -34.16f32,
                                 unk_08: 7.91f32,};
             init
         }]
    };
#[no_mangle]
pub unsafe extern "C" fn func_8083E0FC(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    let mut rideActor: *mut EnHorse = (*this).rideActor as *mut EnHorse;
    let mut unk_04: f32_0 = 0.;
    let mut unk_08: f32_0 = 0.;
    let mut sp38: f32_0 = 0.;
    let mut sp34: f32_0 = 0.;
    let mut temp: s32 = 0;
    if !rideActor.is_null() &&
           !((*sControlInput).press.button as libc::c_int |
                 !(0x8000 as libc::c_int)) == 0 as libc::c_int {
        sp38 = Math_CosS((*rideActor).actor.shape.rot.y);
        sp34 = Math_SinS((*rideActor).actor.shape.rot.y);
        func_80836898(globalCtx, this,
                      Some(func_8083A360 as
                               unsafe extern "C" fn(_: *mut GlobalContext,
                                                    _: *mut Player) -> ()));
        (*this).stateFlags1 |= 0x800000 as libc::c_int as libc::c_uint;
        (*this).actor.bgCheckFlags =
            ((*this).actor.bgCheckFlags as libc::c_int &
                 !(0x20 as libc::c_int)) as u16_0;
        if ((*this).mountSide as libc::c_int) < 0 as libc::c_int {
            temp = 0 as libc::c_int
        } else { temp = 1 as libc::c_int }
        unk_04 = D_80854578[temp as usize].unk_04;
        unk_08 = D_80854578[temp as usize].unk_08;
        (*this).actor.world.pos.x =
            (*rideActor).actor.world.pos.x + (*rideActor).riderPos.x +
                (unk_04 * sp38 + unk_08 * sp34);
        (*this).actor.world.pos.z =
            (*rideActor).actor.world.pos.z + (*rideActor).riderPos.z +
                (unk_08 * sp38 - unk_04 * sp34);
        (*this).unk_878 =
            (*rideActor).actor.world.pos.y - (*this).actor.world.pos.y;
        (*this).actor.shape.rot.y = (*rideActor).actor.shape.rot.y;
        (*this).currentYaw = (*this).actor.shape.rot.y;
        Actor_MountHorse(globalCtx, this, &mut (*rideActor).actor);
        func_80832264(globalCtx, this, D_80854578[temp as usize].anim);
        func_80832F54(globalCtx, this, 0x9b as libc::c_int);
        (*this).actor.parent = (*this).rideActor;
        func_80832224(this);
        func_800304B0(globalCtx);
        return 1 as libc::c_int
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083E298(mut arg0: *mut CollisionPoly,
                                       mut arg1: *mut Vec3f,
                                       mut arg2: *mut s16) {
    (*arg1).x =
        (*arg0).normal.x as libc::c_int as libc::c_float *
            (1.0f32 / 32767.0f32);
    (*arg1).y =
        (*arg0).normal.y as libc::c_int as libc::c_float *
            (1.0f32 / 32767.0f32);
    (*arg1).z =
        (*arg0).normal.z as libc::c_int as libc::c_float *
            (1.0f32 / 32767.0f32);
    *arg2 = Math_Atan2S((*arg1).z, (*arg1).x);
}
static mut D_80854590: [*mut LinkAnimationHeader; 2] =
    unsafe {
        [&gPlayerAnim_002EE0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0031D0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
#[no_mangle]
pub unsafe extern "C" fn func_8083E318(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CollisionPoly) -> s32 {
    let mut pad: s32 = 0;
    let mut sp4A: s16 = 0;
    let mut sp3C: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut sp3A: s16 = 0;
    let mut temp1: f32_0 = 0.;
    let mut temp2: f32_0 = 0.;
    let mut temp3: s16 = 0;
    if Player_InBlockingCsMode(globalCtx, this) == 0 &&
           Some(func_8084F390 as
                    unsafe extern "C" fn(_: *mut Player,
                                         _: *mut GlobalContext) -> ()) !=
               (*this).func_674 &&
           SurfaceType_GetSlope(&mut (*globalCtx).colCtx, arg2,
                                (*this).actor.floorBgId as s32) ==
               1 as libc::c_int as libc::c_uint {
        sp4A =
            Math_Atan2S((*this).actor.velocity.z, (*this).actor.velocity.x);
        func_8083E298(arg2, &mut sp3C, &mut sp3A);
        temp3 = (sp3A as libc::c_int - sp4A as libc::c_int) as s16;
        if (if temp3 as libc::c_int >= 0 as libc::c_int {
                temp3 as libc::c_int
            } else { -(temp3 as libc::c_int) }) > 16000 as libc::c_int {
            temp1 = (1.0f32 - sp3C.y) * 40.0f32;
            temp2 = temp1 * temp1 * 0.015f32;
            if temp2 < 1.2f32 { temp2 = 1.2f32 }
            (*this).windDirection = sp3A;
            Math_StepToF(&mut (*this).windSpeed, temp1, temp2);
        } else {
            func_80835C58(globalCtx, this,
                          Some(func_8084F390 as
                                   unsafe extern "C" fn(_: *mut Player,
                                                        _: *mut GlobalContext)
                                       -> ()), 0 as libc::c_int);
            func_80832564(globalCtx, this);
            if D_80853610 as libc::c_int >= 0 as libc::c_int {
                (*this).unk_84F = 1 as libc::c_int as s8
            }
            func_80832BE8(globalCtx, this,
                          D_80854590[(*this).unk_84F as usize]);
            (*this).linearVelocity =
                sqrtf((*this).actor.velocity.x * (*this).actor.velocity.x +
                          (*this).actor.velocity.z *
                              (*this).actor.velocity.z);
            (*this).currentYaw = sp4A;
            return 1 as libc::c_int
        }
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083E4C4(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut giEntry: *mut GetItemEntry) {
    let mut sp1C: s32 = (*giEntry).field as libc::c_int & 0x1f as libc::c_int;
    if (*giEntry).field as libc::c_int & 0x80 as libc::c_int == 0 {
        Item_DropCollectible(globalCtx, &mut (*this).actor.world.pos,
                             (sp1C | 0x8000 as libc::c_int) as s16);
        if sp1C != 4 as libc::c_int && sp1C != 8 as libc::c_int &&
               sp1C != 9 as libc::c_int && sp1C != 0xa as libc::c_int &&
               sp1C != 0 as libc::c_int && sp1C != 1 as libc::c_int &&
               sp1C != 2 as libc::c_int && sp1C != 0x14 as libc::c_int &&
               sp1C != 0x13 as libc::c_int {
            Item_Give(globalCtx, (*giEntry).itemId);
        }
    } else { Item_Give(globalCtx, (*giEntry).itemId); }
    func_80078884(if ((*this).getItemId as libc::c_int) < 0 as libc::c_int {
                      0x4831 as libc::c_int
                  } else { 0x4824 as libc::c_int } as u16_0);
}
#[no_mangle]
pub unsafe extern "C" fn func_8083E5A8(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    let mut interactedActor: *mut Actor = 0 as *mut Actor;
    if (*gGameInfo).data[(17 as libc::c_int * 6 as libc::c_int *
                              16 as libc::c_int + 67 as libc::c_int) as usize]
           as libc::c_int != 0 ||
           {
               interactedActor = (*this).interactRangeActor;
               (!interactedActor.is_null()) &&
                   func_8002D53C(globalCtx,
                                 &mut (*globalCtx).actorCtx.titleCtx) != 0
           } {
        if (*gGameInfo).data[(17 as libc::c_int * 6 as libc::c_int *
                                  16 as libc::c_int + 67 as libc::c_int) as
                                 usize] as libc::c_int != 0 ||
               (*this).getItemId as libc::c_int > GI_NONE as libc::c_int {
            if (*gGameInfo).data[(17 as libc::c_int * 6 as libc::c_int *
                                      16 as libc::c_int + 67 as libc::c_int)
                                     as usize] != 0 {
                (*this).getItemId =
                    (*gGameInfo).data[(17 as libc::c_int * 6 as libc::c_int *
                                           16 as libc::c_int +
                                           68 as libc::c_int) as usize] as s8
            }
            if ((*this).getItemId as libc::c_int) < GI_MAX as libc::c_int {
                let mut giEntry: *mut GetItemEntry =
                    &mut *sGetItemTable.as_mut_ptr().offset(((*this).getItemId
                                                                 as
                                                                 libc::c_int -
                                                                 1 as
                                                                     libc::c_int)
                                                                as isize) as
                        *mut GetItemEntry;
                if interactedActor != &mut (*this).actor as *mut Actor &&
                       (*gGameInfo).data[(17 as libc::c_int * 6 as libc::c_int
                                              * 16 as libc::c_int +
                                              67 as libc::c_int) as usize] ==
                           0 {
                    (*interactedActor).parent = &mut (*this).actor
                }
                (*gGameInfo).data[(17 as libc::c_int * 6 as libc::c_int *
                                       16 as libc::c_int + 67 as libc::c_int)
                                      as usize] = 0 as libc::c_int as s16;
                if Item_CheckObtainability((*giEntry).itemId) as libc::c_int
                       == ITEM_NONE as libc::c_int ||
                       (*globalCtx).sceneNum as libc::c_int ==
                           SCENE_BOWLING as libc::c_int {
                    func_808323B4(globalCtx, this);
                    func_8083AE40(this, (*giEntry).objectId as s16);
                    if (*this).stateFlags2 &
                           0x400 as libc::c_int as libc::c_uint == 0 ||
                           (*this).currentBoots as libc::c_int ==
                               PLAYER_BOOTS_IRON as libc::c_int {
                        func_80836898(globalCtx, this,
                                      Some(func_8083A434 as
                                               unsafe extern "C" fn(_:
                                                                        *mut GlobalContext,
                                                                    _:
                                                                        *mut Player)
                                                   -> ()));
                        func_808322D0(globalCtx, this,
                                      &mut gPlayerAnim_002788);
                        func_80835EA4(globalCtx, 9 as libc::c_int);
                    }
                    (*this).stateFlags1 |=
                        0x20000c00 as libc::c_int as libc::c_uint;
                    func_80832224(this);
                    return 1 as libc::c_int
                }
                func_8083E4C4(globalCtx, this, giEntry);
                (*this).getItemId = GI_NONE as libc::c_int as s8
            }
        } else if !((*sControlInput).press.button as libc::c_int |
                        !(0x8000 as libc::c_int)) == 0 as libc::c_int &&
                      (*this).stateFlags1 &
                          0x800 as libc::c_int as libc::c_uint == 0 &&
                      (*this).stateFlags2 &
                          0x400 as libc::c_int as libc::c_uint == 0 {
            if (*this).getItemId as libc::c_int != GI_NONE as libc::c_int {
                let mut giEntry_0: *mut GetItemEntry =
                    &mut *sGetItemTable.as_mut_ptr().offset((-((*this).getItemId
                                                                   as
                                                                   libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as isize) as
                        *mut GetItemEntry;
                let mut chest: *mut EnBox = interactedActor as *mut EnBox;
                if (*giEntry_0).itemId as libc::c_int !=
                       ITEM_NONE as libc::c_int {
                    if Item_CheckObtainability((*giEntry_0).itemId) as
                           libc::c_int == ITEM_NONE as libc::c_int &&
                           (*giEntry_0).field as libc::c_int &
                               0x40 as libc::c_int != 0 ||
                           Item_CheckObtainability((*giEntry_0).itemId) as
                               libc::c_int != ITEM_NONE as libc::c_int &&
                               (*giEntry_0).field as libc::c_int &
                                   0x20 as libc::c_int != 0 {
                        (*this).getItemId =
                            -(GI_RUPEE_BLUE as libc::c_int) as s8;
                        giEntry_0 =
                            &mut *sGetItemTable.as_mut_ptr().offset((GI_RUPEE_BLUE
                                                                         as
                                                                         libc::c_int
                                                                         -
                                                                         1 as
                                                                             libc::c_int)
                                                                        as
                                                                        isize)
                                as *mut GetItemEntry
                    }
                }
                func_80836898(globalCtx, this,
                              Some(func_8083A434 as
                                       unsafe extern "C" fn(_:
                                                                *mut GlobalContext,
                                                            _: *mut Player)
                                           -> ()));
                (*this).stateFlags1 |=
                    0x20000c00 as libc::c_int as libc::c_uint;
                func_8083AE40(this, (*giEntry_0).objectId as s16);
                (*this).actor.world.pos.x =
                    (*chest).dyna.actor.world.pos.x -
                        Math_SinS((*chest).dyna.actor.shape.rot.y) *
                            29.4343f32;
                (*this).actor.world.pos.z =
                    (*chest).dyna.actor.world.pos.z -
                        Math_CosS((*chest).dyna.actor.shape.rot.y) *
                            29.4343f32;
                (*this).actor.shape.rot.y = (*chest).dyna.actor.shape.rot.y;
                (*this).currentYaw = (*this).actor.shape.rot.y;
                func_80832224(this);
                if (*giEntry_0).itemId as libc::c_int !=
                       ITEM_NONE as libc::c_int &&
                       (*giEntry_0).gi as libc::c_int >= 0 as libc::c_int &&
                       Item_CheckObtainability((*giEntry_0).itemId) as
                           libc::c_int == ITEM_NONE as libc::c_int {
                    func_808322D0(globalCtx, this,
                                  (*(*this).ageProperties).unk_98);
                    func_80832F54(globalCtx, this, 0x28f as libc::c_int);
                    (*chest).unk_1F4 = 1 as libc::c_int as s16;
                    Camera_ChangeSetting(Gameplay_GetCamera(globalCtx,
                                                            0 as libc::c_int
                                                                as s16),
                                         CAM_SET_SLOW_CHEST_CS as libc::c_int
                                             as s16);
                } else {
                    func_80832264(globalCtx, this, &mut gPlayerAnim_002DF8);
                    (*chest).unk_1F4 = -(1 as libc::c_int) as s16
                }
                return 1 as libc::c_int
            }
            if (*this).heldActor.is_null() || Player_HoldsHookshot(this) != 0
               {
                if (*interactedActor).id as libc::c_int ==
                       ACTOR_BG_TOKI_SWD as libc::c_int &&
                       gSaveContext.linkAge == 0 as libc::c_int {
                    let mut sp24: s32 = (*this).itemActionParam as s32;
                    (*this).itemActionParam =
                        PLAYER_AP_NONE as libc::c_int as s8;
                    (*this).modelAnimType = 0 as libc::c_int as u8_0;
                    (*this).heldItemActionParam = (*this).itemActionParam;
                    func_80836898(globalCtx, this,
                                  Some(func_8083A0F4 as
                                           unsafe extern "C" fn(_:
                                                                    *mut GlobalContext,
                                                                _:
                                                                    *mut Player)
                                               -> ()));
                    if sp24 == PLAYER_AP_SWORD_MASTER as libc::c_int {
                        (*this).nextModelGroup =
                            Player_ActionToModelGroup(this,
                                                      PLAYER_AP_LAST_USED as
                                                          libc::c_int) as
                                u8_0;
                        func_8083399C(globalCtx, this,
                                      PLAYER_AP_LAST_USED as libc::c_int as
                                          s8);
                    } else {
                        func_80835F44(globalCtx, this,
                                      ITEM_LAST_USED as libc::c_int);
                    }
                } else {
                    let mut strength: s32 = Player_GetStrength();
                    if (*interactedActor).id as libc::c_int ==
                           ACTOR_EN_ISHI as libc::c_int &&
                           (*interactedActor).params as libc::c_int &
                               0xf as libc::c_int == 1 as libc::c_int &&
                           strength < PLAYER_STR_SILVER_G as libc::c_int {
                        return 0 as libc::c_int
                    }
                    func_80836898(globalCtx, this,
                                  Some(func_8083A0F4 as
                                           unsafe extern "C" fn(_:
                                                                    *mut GlobalContext,
                                                                _:
                                                                    *mut Player)
                                               -> ()));
                }
                func_80832224(this);
                (*this).stateFlags1 |= 0x800 as libc::c_int as libc::c_uint;
                return 1 as libc::c_int
            }
        }
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083EA94(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    func_80835C58(globalCtx, this,
                  Some(func_80846578 as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  1 as libc::c_int);
    func_80832264(globalCtx, this,
                  D_80853BCC[(*this).modelAnimType as usize]);
}
#[no_mangle]
pub unsafe extern "C" fn func_8083EAF0(mut this: *mut Player,
                                       mut actor: *mut Actor) -> s32 {
    if !actor.is_null() &&
           (*actor).flags &
               ((1 as libc::c_int) << 23 as libc::c_int) as libc::c_uint == 0
           &&
           ((*this).linearVelocity < 1.1f32 ||
                (*actor).id as libc::c_int == ACTOR_EN_BOM_CHU as libc::c_int)
       {
        return 0 as libc::c_int
    }
    return 1 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083EB44(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    if (*this).stateFlags1 & 0x800 as libc::c_int as libc::c_uint != 0 &&
           !(*this).heldActor.is_null() &&
           (*sControlInput).press.button as libc::c_int &
               (0x8000 as libc::c_int | 0x4000 as libc::c_int |
                    0x2 as libc::c_int | 0x1 as libc::c_int |
                    0x4 as libc::c_int) != 0 as libc::c_int {
        if func_80835644(globalCtx, this, (*this).heldActor) == 0 {
            if func_8083EAF0(this, (*this).heldActor) == 0 {
                func_80835C58(globalCtx, this,
                              Some(func_808464B0 as
                                       unsafe extern "C" fn(_: *mut Player,
                                                            _:
                                                                *mut GlobalContext)
                                           -> ()), 1 as libc::c_int);
                func_80832264(globalCtx, this,
                              D_80853BE4[(*this).modelAnimType as usize]);
            } else { func_8083EA94(this, globalCtx); }
        }
        return 1 as libc::c_int
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083EC18(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext,
                                       mut arg2: u32_0) -> s32 {
    if (*this).wallHeight >= 79.0f32 {
        if (*this).stateFlags1 & 0x8000000 as libc::c_int as libc::c_uint == 0
               ||
               (*this).currentBoots as libc::c_int ==
                   PLAYER_BOOTS_IRON as libc::c_int ||
               (*this).actor.yDistToWater < (*(*this).ageProperties).unk_2C {
            let mut sp8C: s32 =
                if arg2 & 8 as libc::c_int as libc::c_uint != 0 {
                    2 as libc::c_int
                } else { 0 as libc::c_int };
            if sp8C != 0 as libc::c_int ||
                   arg2 & 2 as libc::c_int as libc::c_uint != 0 ||
                   func_80041E4C(&mut (*globalCtx).colCtx,
                                 (*this).actor.wallPoly,
                                 (*this).actor.wallBgId as s32) != 0 {
                let mut phi_f20: f32_0 = 0.;
                let mut sp84: *mut CollisionPoly = (*this).actor.wallPoly;
                let mut sp80: f32_0 = 0.;
                let mut sp7C: f32_0 = 0.;
                let mut phi_f12: f32_0 = 0.;
                let mut phi_f14: f32_0 = 0.;
                phi_f12 = 0.0f32;
                phi_f20 = phi_f12;
                if sp8C != 0 as libc::c_int {
                    sp80 = (*this).actor.world.pos.x;
                    sp7C = (*this).actor.world.pos.z
                } else {
                    let mut sp50: [Vec3f; 3] =
                        [Vec3f{x: 0., y: 0., z: 0.,}; 3];
                    let mut i: s32 = 0;
                    let mut sp48: f32_0 = 0.;
                    let mut sp44: *mut Vec3f =
                        &mut *sp50.as_mut_ptr().offset(0 as libc::c_int as
                                                           isize) as
                            *mut Vec3f;
                    let mut pad: s32 = 0;
                    CollisionPoly_GetVerticesByBgId(sp84,
                                                    (*this).actor.wallBgId as
                                                        s32,
                                                    &mut (*globalCtx).colCtx,
                                                    sp50.as_mut_ptr());
                    phi_f12 = (*sp44).x;
                    sp80 = phi_f12;
                    phi_f14 = (*sp44).z;
                    sp7C = phi_f14;
                    phi_f20 = (*sp44).y;
                    i = 1 as libc::c_int;
                    while i < 3 as libc::c_int {
                        sp44 = sp44.offset(1);
                        if sp80 > (*sp44).x {
                            sp80 = (*sp44).x
                        } else if phi_f12 < (*sp44).x { phi_f12 = (*sp44).x }
                        if sp7C > (*sp44).z {
                            sp7C = (*sp44).z
                        } else if phi_f14 < (*sp44).z { phi_f14 = (*sp44).z }
                        if phi_f20 > (*sp44).y { phi_f20 = (*sp44).y }
                        i += 1
                    }
                    sp80 = (sp80 + phi_f12) * 0.5f32;
                    sp7C = (sp7C + phi_f14) * 0.5f32;
                    phi_f12 =
                        ((*this).actor.world.pos.x - sp80) *
                            ((*sp84).normal.z as libc::c_int as libc::c_float
                                 * (1.0f32 / 32767.0f32)) -
                            ((*this).actor.world.pos.z - sp7C) *
                                ((*sp84).normal.x as libc::c_int as
                                     libc::c_float * (1.0f32 / 32767.0f32));
                    sp48 = (*this).actor.world.pos.y - phi_f20;
                    phi_f20 =
                        ((sp48 as libc::c_double / 15.000000223517418f64 +
                              0.5f64) as s32 as f32_0 as libc::c_double *
                             15.000000223517418f64 - sp48 as libc::c_double)
                            as f32_0;
                    phi_f12 = fabsf(phi_f12)
                }
                if phi_f12 < 8.0f32 {
                    let mut sp3C: f32_0 =
                        (*sp84).normal.x as libc::c_int as libc::c_float *
                            (1.0f32 / 32767.0f32);
                    let mut sp38: f32_0 =
                        (*sp84).normal.z as libc::c_int as libc::c_float *
                            (1.0f32 / 32767.0f32);
                    let mut sp34: f32_0 = (*this).wallDistance;
                    let mut sp30: *mut LinkAnimationHeader =
                        0 as *mut LinkAnimationHeader;
                    func_80836898(globalCtx, this,
                                  Some(func_8083A3B0 as
                                           unsafe extern "C" fn(_:
                                                                    *mut GlobalContext,
                                                                _:
                                                                    *mut Player)
                                               -> ()));
                    (*this).stateFlags1 |=
                        0x200000 as libc::c_int as libc::c_uint;
                    (*this).stateFlags1 &=
                        !(0x8000000 as libc::c_int) as libc::c_uint;
                    if sp8C != 0 as libc::c_int ||
                           arg2 & 2 as libc::c_int as libc::c_uint != 0 {
                        (*this).unk_84F = sp8C as s8;
                        if (*this).unk_84F as libc::c_int != 0 as libc::c_int
                           {
                            if (*this).actor.bgCheckFlags as libc::c_int &
                                   1 as libc::c_int != 0 {
                                sp30 = &mut gPlayerAnim_002D80
                            } else { sp30 = &mut gPlayerAnim_002D68 }
                            sp34 =
                                (*(*this).ageProperties).unk_38 - 1.0f32 -
                                    sp34
                        } else {
                            sp30 = (*(*this).ageProperties).unk_A4;
                            sp34 = sp34 - 1.0f32
                        }
                        (*this).unk_850 = -(2 as libc::c_int) as s16;
                        (*this).actor.world.pos.y += phi_f20;
                        (*this).currentYaw =
                            ((*this).actor.wallYaw as libc::c_int +
                                 0x8000 as libc::c_int) as s16;
                        (*this).actor.shape.rot.y = (*this).currentYaw
                    } else {
                        sp30 = (*(*this).ageProperties).unk_A8;
                        (*this).unk_850 = -(4 as libc::c_int) as s16;
                        (*this).currentYaw = (*this).actor.wallYaw;
                        (*this).actor.shape.rot.y = (*this).currentYaw
                    }
                    (*this).actor.world.pos.x = sp34 * sp3C + sp80;
                    (*this).actor.world.pos.z = sp34 * sp38 + sp7C;
                    func_80832224(this);
                    Math_Vec3f_Copy(&mut (*this).actor.prevPos,
                                    &mut (*this).actor.world.pos);
                    func_80832264(globalCtx, this, sp30);
                    func_80832F54(globalCtx, this, 0x9f as libc::c_int);
                    return 1 as libc::c_int
                }
            }
        }
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083F070(mut this: *mut Player,
                                       mut anim: *mut LinkAnimationHeader,
                                       mut globalCtx: *mut GlobalContext) {
    func_80835DAC(globalCtx, this,
                  Some(func_8084C5F8 as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  0 as libc::c_int);
    LinkAnimation_PlayOnceSetSpeed(globalCtx, &mut (*this).skelAnime, anim,
                                   4.0f32 / 3.0f32);
}
#[no_mangle]
pub unsafe extern "C" fn func_8083F0C8(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext,
                                       mut arg2: u32_0) -> s32 {
    let mut wallPoly: *mut CollisionPoly = 0 as *mut CollisionPoly;
    let mut sp50: [Vec3f; 3] = [Vec3f{x: 0., y: 0., z: 0.,}; 3];
    let mut sp4C: f32_0 = 0.;
    let mut phi_f2: f32_0 = 0.;
    let mut sp44: f32_0 = 0.;
    let mut phi_f12: f32_0 = 0.;
    let mut i: s32 = 0;
    if !(gSaveContext.linkAge == 0 as libc::c_int) &&
           (*this).stateFlags1 & 0x8000000 as libc::c_int as libc::c_uint == 0
           && arg2 & 0x30 as libc::c_int as libc::c_uint != 0 {
        wallPoly = (*this).actor.wallPoly;
        CollisionPoly_GetVerticesByBgId(wallPoly,
                                        (*this).actor.wallBgId as s32,
                                        &mut (*globalCtx).colCtx,
                                        sp50.as_mut_ptr());
        phi_f2 = sp50[0 as libc::c_int as usize].x;
        sp4C = phi_f2;
        phi_f12 = sp50[0 as libc::c_int as usize].z;
        sp44 = phi_f12;
        i = 1 as libc::c_int;
        while i < 3 as libc::c_int {
            if sp4C > sp50[i as usize].x {
                sp4C = sp50[i as usize].x
            } else if phi_f2 < sp50[i as usize].x {
                phi_f2 = sp50[i as usize].x
            }
            if sp44 > sp50[i as usize].z {
                sp44 = sp50[i as usize].z
            } else if phi_f12 < sp50[i as usize].z {
                phi_f12 = sp50[i as usize].z
            }
            i += 1
        }
        sp4C = (sp4C + phi_f2) * 0.5f32;
        sp44 = (sp44 + phi_f12) * 0.5f32;
        phi_f2 =
            ((*this).actor.world.pos.x - sp4C) *
                ((*wallPoly).normal.z as libc::c_int as libc::c_float *
                     (1.0f32 / 32767.0f32)) -
                ((*this).actor.world.pos.z - sp44) *
                    ((*wallPoly).normal.x as libc::c_int as libc::c_float *
                         (1.0f32 / 32767.0f32));
        if fabsf(phi_f2) < 8.0f32 {
            (*this).stateFlags2 |= 0x10000 as libc::c_int as libc::c_uint;
            if !((*sControlInput).press.button as libc::c_int |
                     !(0x8000 as libc::c_int)) == 0 as libc::c_int {
                let mut sp38: f32_0 =
                    (*wallPoly).normal.x as libc::c_int as libc::c_float *
                        (1.0f32 / 32767.0f32);
                let mut sp34: f32_0 =
                    (*wallPoly).normal.z as libc::c_int as libc::c_float *
                        (1.0f32 / 32767.0f32);
                let mut sp30: f32_0 = (*this).wallDistance;
                func_80836898(globalCtx, this,
                              Some(func_8083A40C as
                                       unsafe extern "C" fn(_:
                                                                *mut GlobalContext,
                                                            _: *mut Player)
                                           -> ()));
                (*this).stateFlags2 |= 0x40000 as libc::c_int as libc::c_uint;
                (*this).currentYaw =
                    ((*this).actor.wallYaw as libc::c_int +
                         0x8000 as libc::c_int) as s16;
                (*this).actor.shape.rot.y = (*this).currentYaw;
                (*this).actor.world.pos.x = sp4C + sp30 * sp38;
                (*this).actor.world.pos.z = sp44 + sp30 * sp34;
                func_80832224(this);
                (*this).actor.prevPos = (*this).actor.world.pos;
                func_80832264(globalCtx, this, &mut gPlayerAnim_002708);
                func_80832F54(globalCtx, this, 0x9d as libc::c_int);
                return 1 as libc::c_int
            }
        }
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083F360(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player, mut arg1: f32_0,
                                       mut arg2: f32_0, mut arg3: f32_0,
                                       mut arg4: f32_0) -> s32 {
    let mut wallPoly: *mut CollisionPoly = 0 as *mut CollisionPoly;
    let mut sp78: s32 = 0;
    let mut sp6C: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut sp60: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut sp54: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut yawCos: f32_0 = 0.;
    let mut yawSin: f32_0 = 0.;
    let mut temp: s32 = 0;
    let mut temp1: f32_0 = 0.;
    let mut temp2: f32_0 = 0.;
    yawCos = Math_CosS((*this).actor.shape.rot.y);
    yawSin = Math_SinS((*this).actor.shape.rot.y);
    sp6C.x = (*this).actor.world.pos.x + arg4 * yawSin;
    sp6C.z = (*this).actor.world.pos.z + arg4 * yawCos;
    sp60.x = (*this).actor.world.pos.x + arg3 * yawSin;
    sp60.z = (*this).actor.world.pos.z + arg3 * yawCos;
    sp6C.y = (*this).actor.world.pos.y + arg1;
    sp60.y = sp6C.y;
    if BgCheck_EntityLineTest1(&mut (*globalCtx).colCtx, &mut sp6C, &mut sp60,
                               &mut sp54, &mut (*this).actor.wallPoly,
                               1 as libc::c_int, 0 as libc::c_int,
                               0 as libc::c_int, 1 as libc::c_int, &mut sp78)
           != 0 {
        wallPoly = (*this).actor.wallPoly;
        (*this).actor.bgCheckFlags =
            ((*this).actor.bgCheckFlags as libc::c_int | 0x200 as libc::c_int)
                as u16_0;
        (*this).actor.wallBgId = sp78 as u8_0;
        D_808535F0 =
            func_80041DB8(&mut (*globalCtx).colCtx, wallPoly, sp78) as u32_0;
        temp1 =
            (*wallPoly).normal.x as libc::c_int as libc::c_float *
                (1.0f32 / 32767.0f32);
        temp2 =
            (*wallPoly).normal.z as libc::c_int as libc::c_float *
                (1.0f32 / 32767.0f32);
        temp = Math_Atan2S(-temp2, -temp1) as s32;
        Math_ScaledStepToS(&mut (*this).actor.shape.rot.y, temp as s16,
                           800 as libc::c_int as s16);
        (*this).currentYaw = (*this).actor.shape.rot.y;
        (*this).actor.world.pos.x =
            sp54.x - Math_SinS((*this).actor.shape.rot.y) * arg2;
        (*this).actor.world.pos.z =
            sp54.z - Math_CosS((*this).actor.shape.rot.y) * arg2;
        return 1 as libc::c_int
    }
    (*this).actor.bgCheckFlags =
        ((*this).actor.bgCheckFlags as libc::c_int & !(0x200 as libc::c_int))
            as u16_0;
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083F524(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) -> s32 {
    return func_8083F360(globalCtx, this, 26.0f32,
                         (*(*this).ageProperties).unk_38 + 5.0f32, 30.0f32,
                         0.0f32);
}
#[no_mangle]
pub unsafe extern "C" fn func_8083F570(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    let mut temp: s16 = 0;
    if (*this).linearVelocity != 0.0f32 &&
           (*this).actor.bgCheckFlags as libc::c_int & 8 as libc::c_int != 0
           && D_808535F0 & 0x30 as libc::c_int as libc::c_uint != 0 {
        temp =
            ((*this).actor.shape.rot.y as libc::c_int -
                 (*this).actor.wallYaw as libc::c_int) as s16;
        if (*this).linearVelocity < 0.0f32 {
            temp = (temp as libc::c_int + 0x8000 as libc::c_int) as s16
        }
        if (if temp as libc::c_int >= 0 as libc::c_int {
                temp as libc::c_int
            } else { -(temp as libc::c_int) }) > 0x4000 as libc::c_int {
            func_80835C58(globalCtx, this,
                          Some(func_8084C81C as
                                   unsafe extern "C" fn(_: *mut Player,
                                                        _: *mut GlobalContext)
                                       -> ()), 0 as libc::c_int);
            if (*this).linearVelocity > 0.0f32 {
                (*this).actor.shape.rot.y =
                    ((*this).actor.wallYaw as libc::c_int +
                         0x8000 as libc::c_int) as s16;
                func_80832264(globalCtx, this, &mut gPlayerAnim_002700);
                func_80832F54(globalCtx, this, 0x9d as libc::c_int);
                OnePointCutscene_Init(globalCtx, 9601 as libc::c_int as s16,
                                      999 as libc::c_int as s16,
                                      0 as *mut Actor,
                                      0 as libc::c_int as s16);
            } else {
                (*this).actor.shape.rot.y = (*this).actor.wallYaw;
                LinkAnimation_Change(globalCtx, &mut (*this).skelAnime,
                                     &mut gPlayerAnim_002708, -1.0f32,
                                     Animation_GetLastFrame(&mut gPlayerAnim_002708
                                                                as
                                                                *mut LinkAnimationHeader
                                                                as
                                                                *mut libc::c_void)
                                         as f32_0, 0.0f32,
                                     ANIMMODE_ONCE as libc::c_int as u8_0,
                                     0.0f32);
                func_80832F54(globalCtx, this, 0x9d as libc::c_int);
                OnePointCutscene_Init(globalCtx, 9602 as libc::c_int as s16,
                                      999 as libc::c_int as s16,
                                      0 as *mut Actor,
                                      0 as libc::c_int as s16);
            }
            (*this).currentYaw = (*this).actor.shape.rot.y;
            func_80832210(this);
            return 1 as libc::c_int
        }
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083F72C(mut this: *mut Player,
                                       mut anim: *mut LinkAnimationHeader,
                                       mut globalCtx: *mut GlobalContext) {
    if func_80836898(globalCtx, this,
                     Some(func_8083A388 as
                              unsafe extern "C" fn(_: *mut GlobalContext,
                                                   _: *mut Player) -> ())) ==
           0 {
        func_80835C58(globalCtx, this,
                      Some(func_8084B78C as
                               unsafe extern "C" fn(_: *mut Player,
                                                    _: *mut GlobalContext)
                                   -> ()), 0 as libc::c_int);
    }
    func_80832264(globalCtx, this, anim);
    func_80832224(this);
    (*this).currentYaw =
        ((*this).actor.wallYaw as libc::c_int + 0x8000 as libc::c_int) as s16;
    (*this).actor.shape.rot.y = (*this).currentYaw;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083F7BC(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    let mut wallPolyActor: *mut DynaPolyActor = 0 as *mut DynaPolyActor;
    if (*this).stateFlags1 & 0x800 as libc::c_int as libc::c_uint == 0 &&
           (*this).actor.bgCheckFlags as libc::c_int & 0x200 as libc::c_int !=
               0 && D_80853608 < 0x3000 as libc::c_int {
        if (*this).linearVelocity > 0.0f32 &&
               func_8083EC18(this, globalCtx, D_808535F0) != 0 ||
               func_8083F0C8(this, globalCtx, D_808535F0) != 0 {
            return 1 as libc::c_int
        }
        if func_808332B8(this) == 0 &&
               ((*this).linearVelocity == 0.0f32 ||
                    (*this).stateFlags2 & 4 as libc::c_int as libc::c_uint ==
                        0) &&
               D_808535F0 & 0x40 as libc::c_int as libc::c_uint != 0 &&
               (*this).actor.bgCheckFlags as libc::c_int & 1 as libc::c_int !=
                   0 && (*this).wallHeight >= 39.0f32 {
            (*this).stateFlags2 |= 1 as libc::c_int as libc::c_uint;
            if !((*sControlInput).cur.button as libc::c_int |
                     !(0x8000 as libc::c_int)) == 0 as libc::c_int {
                if (*this).actor.wallBgId as libc::c_int != 50 as libc::c_int
                       &&
                       {
                           wallPolyActor =
                               DynaPoly_GetActor(&mut (*globalCtx).colCtx,
                                                 (*this).actor.wallBgId as
                                                     s32);
                           !wallPolyActor.is_null()
                       } {
                    if (*wallPolyActor).actor.id as libc::c_int ==
                           ACTOR_BG_HEAVY_BLOCK as libc::c_int {
                        if Player_GetStrength() <
                               PLAYER_STR_GOLD_G as libc::c_int {
                            return 0 as libc::c_int
                        }
                        func_80836898(globalCtx, this,
                                      Some(func_8083A0F4 as
                                               unsafe extern "C" fn(_:
                                                                        *mut GlobalContext,
                                                                    _:
                                                                        *mut Player)
                                                   -> ()));
                        (*this).stateFlags1 |=
                            0x800 as libc::c_int as libc::c_uint;
                        (*this).interactRangeActor =
                            &mut (*wallPolyActor).actor;
                        (*this).getItemId = GI_NONE as libc::c_int as s8;
                        (*this).currentYaw =
                            ((*this).actor.wallYaw as libc::c_int +
                                 0x8000 as libc::c_int) as s16;
                        func_80832224(this);
                        return 1 as libc::c_int
                    }
                    (*this).unk_3C4 = &mut (*wallPolyActor).actor
                } else { (*this).unk_3C4 = 0 as *mut Actor }
                func_8083F72C(this, &mut gPlayerAnim_0030F8, globalCtx);
                return 1 as libc::c_int
            }
        }
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083F9D0(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) -> s32 {
    if (*this).actor.bgCheckFlags as libc::c_int & 0x200 as libc::c_int != 0
           &&
           ((*this).stateFlags2 & 0x10 as libc::c_int as libc::c_uint != 0 ||
                !((*sControlInput).cur.button as libc::c_int |
                      !(0x8000 as libc::c_int)) == 0 as libc::c_int) {
        let mut wallPolyActor: *mut DynaPolyActor = 0 as *mut DynaPolyActor;
        if (*this).actor.wallBgId as libc::c_int != 50 as libc::c_int {
            wallPolyActor =
                DynaPoly_GetActor(&mut (*globalCtx).colCtx,
                                  (*this).actor.wallBgId as s32)
        }
        if &mut (*wallPolyActor).actor as *mut Actor == (*this).unk_3C4 {
            if (*this).stateFlags2 & 0x10 as libc::c_int as libc::c_uint != 0
               {
                return 1 as libc::c_int
            } else { return 0 as libc::c_int }
        }
    }
    func_80839FFC(this, globalCtx);
    func_80832264(globalCtx, this, &mut gPlayerAnim_003100);
    (*this).stateFlags2 &= !(0x10 as libc::c_int) as libc::c_uint;
    return 1 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083FAB8(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    func_80835C58(globalCtx, this,
                  Some(func_8084B898 as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  0 as libc::c_int);
    (*this).stateFlags2 |= 0x10 as libc::c_int as libc::c_uint;
    func_80832264(globalCtx, this, &mut gPlayerAnim_0030F0);
}
#[no_mangle]
pub unsafe extern "C" fn func_8083FB14(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    func_80835C58(globalCtx, this,
                  Some(func_8084B9E4 as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  0 as libc::c_int);
    (*this).stateFlags2 |= 0x10 as libc::c_int as libc::c_uint;
    func_80832264(globalCtx, this,
                  D_80853C5C[(*this).modelAnimType as usize]);
}
#[no_mangle]
pub unsafe extern "C" fn func_8083FB7C(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    (*this).stateFlags1 &= !(0x8200000 as libc::c_int) as libc::c_uint;
    func_80837B9C(this, globalCtx);
    (*this).linearVelocity = -0.4f32;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083FBC0(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    if !(!((*sControlInput).press.button as libc::c_int |
               !(0x8000 as libc::c_int)) == 0 as libc::c_int) &&
           (*this).actor.bgCheckFlags as libc::c_int & 0x200 as libc::c_int !=
               0 &&
           (D_808535F0 & 8 as libc::c_int as libc::c_uint != 0 ||
                D_808535F0 & 2 as libc::c_int as libc::c_uint != 0 ||
                func_80041E4C(&mut (*globalCtx).colCtx,
                              (*this).actor.wallPoly,
                              (*this).actor.wallBgId as s32) != 0) {
        return 0 as libc::c_int
    }
    func_8083FB7C(this, globalCtx);
    func_80832698(this, 0x6814 as libc::c_int as u16_0);
    return 1 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083FC68(mut this: *mut Player, mut arg1: f32_0,
                                       mut arg2: s16) -> s32 {
    let mut sp1C: f32_0 =
        (arg2 as libc::c_int - (*this).actor.shape.rot.y as libc::c_int) as
            s16 as f32_0;
    let mut temp: f32_0 = 0.;
    if !(*this).unk_664.is_null() {
        func_8083DB98(this,
                      (func_8002DD78(this) != 0 || func_808334B4(this) != 0)
                          as libc::c_int);
    }
    temp = fabsf(sp1C) / 32768.0f32;
    if arg1 > temp * temp * 50.0f32 + 6.0f32 {
        return 1 as libc::c_int
    } else {
        if arg1 > (1.0f32 - temp) * 10.0f32 + 6.8f32 {
            return -(1 as libc::c_int)
        }
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083FD78(mut this: *mut Player,
                                       mut arg1: *mut f32_0,
                                       mut arg2: *mut s16,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    let mut sp2E: s16 =
        (*arg2 as libc::c_int - (*this).targetYaw as libc::c_int) as s16;
    let mut sp2C: u16_0 =
        if sp2E as libc::c_int >= 0 as libc::c_int {
            sp2E as libc::c_int
        } else { -(sp2E as libc::c_int) } as u16_0;
    if (func_8002DD78(this) != 0 || func_808334B4(this) != 0) &&
           (*this).unk_664.is_null() {
        *arg1 *= Math_SinS(sp2C as s16);
        if *arg1 != 0.0f32 {
            *arg2 =
                (((if sp2E as libc::c_int >= 0 as libc::c_int {
                       1 as libc::c_int
                   } else { -(1 as libc::c_int) }) << 0xe as libc::c_int) +
                     (*this).actor.shape.rot.y as libc::c_int) as s16
        } else { *arg2 = (*this).actor.shape.rot.y }
        if !(*this).unk_664.is_null() {
            func_8083DB98(this, 1 as libc::c_int);
        } else {
            Math_SmoothStepToS(&mut (*this).actor.focus.rot.x,
                               ((*sControlInput).rel.stick_y as libc::c_int as
                                    libc::c_float * 240.0f32) as s16,
                               14 as libc::c_int as s16,
                               4000 as libc::c_int as s16,
                               30 as libc::c_int as s16);
            func_80836AB8(this, 1 as libc::c_int);
        }
    } else if !(*this).unk_664.is_null() {
        return func_8083FC68(this, *arg1, *arg2)
    } else {
        func_8083DC54(this, globalCtx);
        if *arg1 != 0.0f32 && (sp2C as libc::c_int) < 6000 as libc::c_int {
            return 1 as libc::c_int
        } else {
            if *arg1 >
                   Math_SinS((0x4000 as libc::c_int -
                                  (sp2C as libc::c_int >> 1 as libc::c_int))
                                 as s16) * 200.0f32 {
                return -(1 as libc::c_int)
            }
        }
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8083FFB8(mut this: *mut Player,
                                       mut arg1: *mut f32_0,
                                       mut arg2: *mut s16) -> s32 {
    let mut temp1: s16 =
        (*arg2 as libc::c_int - (*this).actor.shape.rot.y as libc::c_int) as
            s16;
    let mut temp2: u16_0 =
        if temp1 as libc::c_int >= 0 as libc::c_int {
            temp1 as libc::c_int
        } else { -(temp1 as libc::c_int) } as u16_0;
    let mut temp3: f32_0 = Math_CosS(temp2 as s16);
    *arg1 *= temp3;
    if *arg1 != 0.0f32 {
        if temp3 > 0 as libc::c_int as libc::c_float {
            return 1 as libc::c_int
        } else { return -(1 as libc::c_int) }
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80840058(mut this: *mut Player,
                                       mut arg1: *mut f32_0,
                                       mut arg2: *mut s16,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    func_8083DC54(this, globalCtx);
    if *arg1 != 0.0f32 ||
           (if (*this).unk_87C as libc::c_int >= 0 as libc::c_int {
                (*this).unk_87C as libc::c_int
            } else { -((*this).unk_87C as libc::c_int) }) > 400 as libc::c_int
       {
        let mut temp1: s16 =
            (*arg2 as libc::c_int -
                 Camera_GetInputDirYaw((*globalCtx).cameraPtrs[(*globalCtx).activeCamera
                                                                   as usize])
                     as libc::c_int) as s16;
        let mut temp2: u16_0 =
            ((if temp1 as libc::c_int >= 0 as libc::c_int {
                  temp1 as libc::c_int
              } else { -(temp1 as libc::c_int) }) - 0x2000 as libc::c_int &
                 0xffff as libc::c_int) as u16_0;
        if (temp2 as libc::c_int) < 0x4000 as libc::c_int ||
               (*this).unk_87C as libc::c_int != 0 as libc::c_int {
            return -(1 as libc::c_int)
        } else { return 1 as libc::c_int }
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80840138(mut this: *mut Player, mut arg1: f32_0,
                                       mut arg2: s16) {
    let mut temp: s16 =
        (arg2 as libc::c_int - (*this).actor.shape.rot.y as libc::c_int) as
            s16;
    if arg1 > 0.0f32 {
        if (temp as libc::c_int) < 0 as libc::c_int {
            (*this).unk_874 = 0.0f32
        } else { (*this).unk_874 = 1.0f32 }
    }
    Math_StepToF(&mut (*this).unk_870, (*this).unk_874, 0.3f32);
}
#[no_mangle]
pub unsafe extern "C" fn func_808401B0(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    LinkAnimation_BlendToJoint(globalCtx, &mut (*this).skelAnime,
                               func_808334E4(this), (*this).unk_868,
                               func_80833528(this), (*this).unk_868,
                               (*this).unk_870,
                               (*this).blendTable.as_mut_ptr());
}
#[no_mangle]
pub unsafe extern "C" fn func_8084021C(mut arg0: f32_0, mut arg1: f32_0,
                                       mut arg2: f32_0, mut arg3: f32_0)
 -> s32 {
    let mut temp: f32_0 = 0.;
    if arg3 == 0.0f32 && arg1 > 0.0f32 { arg3 = arg2 }
    temp = arg0 + arg1 - arg3;
    if temp * arg1 >= 0.0f32 && (temp - arg1) * arg1 < 0.0f32 {
        return 1 as libc::c_int
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8084029C(mut this: *mut Player,
                                       mut arg1: f32_0) {
    let mut updateScale: f32_0 =
        (*gGameInfo).data[(1 as libc::c_int * 6 as libc::c_int *
                               16 as libc::c_int + 30 as libc::c_int) as
                              usize] as libc::c_int as libc::c_float * 0.5f32;
    arg1 *= updateScale;
    if (arg1 as libc::c_double) < -7.25f64 {
        arg1 = -7.25f64 as f32_0
    } else if arg1 > 7.25f32 { arg1 = 7.25f32 }
    if (*this).currentBoots as libc::c_int ==
           PLAYER_BOOTS_HOVER as libc::c_int &&
           (*this).actor.bgCheckFlags as libc::c_int & 1 as libc::c_int == 0
           && (*this).hoverBootsTimer as libc::c_int != 0 as libc::c_int {
        func_8002F8F0(&mut (*this).actor,
                      (0x8c9 as libc::c_int - 0x800 as libc::c_int) as u16_0);
    } else if func_8084021C((*this).unk_868, arg1, 29.0f32, 10.0f32) != 0 ||
                  func_8084021C((*this).unk_868, arg1, 29.0f32, 24.0f32) != 0
     {
        func_808327F8(this, (*this).linearVelocity);
        if (*this).linearVelocity > 4.0f32 {
            (*this).stateFlags2 |= 8 as libc::c_int as libc::c_uint
        }
    }
    (*this).unk_868 += arg1;
    if (*this).unk_868 < 0.0f32 {
        (*this).unk_868 += 29.0f32
    } else if (*this).unk_868 >= 29.0f32 { (*this).unk_868 -= 29.0f32 };
}
#[no_mangle]
pub unsafe extern "C" fn func_80840450(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut sp44: f32_0 = 0.;
    let mut sp42: s16 = 0;
    let mut temp1: s32 = 0;
    let mut temp2: u32_0 = 0;
    let mut temp3: s16 = 0;
    let mut temp4: s32 = 0;
    if (*this).stateFlags3 as libc::c_int & 8 as libc::c_int != 0 {
        if Player_GetSwordHeld(this) != 0 {
            (*this).stateFlags2 |= 0x60 as libc::c_int as libc::c_uint
        } else {
            (*this).stateFlags3 =
                ((*this).stateFlags3 as libc::c_int & !(8 as libc::c_int)) as
                    u8_0
        }
    }
    if (*this).unk_850 as libc::c_int != 0 as libc::c_int {
        if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
            func_80832DBC(this);
            func_80832284(globalCtx, this, func_808334E4(this));
            (*this).unk_850 = 0 as libc::c_int as s16;
            (*this).stateFlags3 =
                ((*this).stateFlags3 as libc::c_int & !(8 as libc::c_int)) as
                    u8_0
        }
        func_80833C3C(this);
    } else { func_808401B0(globalCtx, this); }
    func_8083721C(this);
    if func_80837348(globalCtx, this, D_808543E0.as_mut_ptr(),
                     1 as libc::c_int) == 0 {
        if func_80833B54(this) == 0 &&
               (func_80833B2C(this) == 0 ||
                    Some(func_80834B5C as
                             unsafe extern "C" fn(_: *mut Player,
                                                  _: *mut GlobalContext)
                                 -> s32) != (*this).func_82C) {
            func_8083CF10(this, globalCtx);
            return
        }
        func_80837268(this, &mut sp44, &mut sp42, 0.0f32, globalCtx);
        temp1 = func_8083FC68(this, sp44, sp42);
        if temp1 > 0 as libc::c_int {
            func_8083C8DC(this, globalCtx, sp42);
            return
        }
        if temp1 < 0 as libc::c_int {
            func_8083CBF0(this, sp42, globalCtx);
            return
        }
        if sp44 > 4.0f32 { func_8083CC9C(this, globalCtx); return }
        func_8084029C(this, (*this).linearVelocity * 0.3f32 + 1.0f32);
        func_80840138(this, sp44, sp42);
        temp2 = (*this).unk_868 as u32_0;
        if temp2 < 6 as libc::c_int as libc::c_uint ||
               temp2.wrapping_sub(0xe as libc::c_int as libc::c_uint) <
                   6 as libc::c_int as libc::c_uint {
            Math_StepToF(&mut (*this).linearVelocity, 0.0f32, 1.5f32);
            return
        }
        temp3 =
            (sp42 as libc::c_int - (*this).currentYaw as libc::c_int) as s16;
        temp4 =
            if temp3 as libc::c_int >= 0 as libc::c_int {
                temp3 as libc::c_int
            } else { -(temp3 as libc::c_int) };
        if temp4 > 0x4000 as libc::c_int {
            if Math_StepToF(&mut (*this).linearVelocity, 0.0f32, 1.5f32) != 0
               {
                (*this).currentYaw = sp42
            }
            return
        }
        Math_AsymStepToF(&mut (*this).linearVelocity, sp44 * 0.3f32, 2.0f32,
                         1.5f32);
        if (*this).stateFlags3 as libc::c_int & 8 as libc::c_int == 0 {
            Math_ScaledStepToS(&mut (*this).currentYaw, sp42,
                               (temp4 as libc::c_float * 0.1f32) as s16);
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_808407CC(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut sp3C: f32_0 = 0.;
    let mut sp3A: s16 = 0;
    let mut temp1: s32 = 0;
    let mut temp2: s16 = 0;
    let mut temp3: s32 = 0;
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        func_80832DBC(this);
        func_80832264(globalCtx, this, func_80833338(this));
    }
    func_8083721C(this);
    if func_80837348(globalCtx, this, D_808543E8.as_mut_ptr(),
                     1 as libc::c_int) == 0 {
        if func_80833B54(this) != 0 { func_8083CEAC(this, globalCtx); return }
        if func_80833B2C(this) == 0 {
            func_80835DAC(globalCtx, this,
                          Some(func_80840BC8 as
                                   unsafe extern "C" fn(_: *mut Player,
                                                        _: *mut GlobalContext)
                                       -> ()), 1 as libc::c_int);
            (*this).currentYaw = (*this).actor.shape.rot.y;
            return
        }
        if Some(func_80834B5C as
                    unsafe extern "C" fn(_: *mut Player,
                                         _: *mut GlobalContext) -> s32) ==
               (*this).func_82C {
            func_8083CEAC(this, globalCtx);
            return
        }
        func_80837268(this, &mut sp3C, &mut sp3A, 0.0f32, globalCtx);
        temp1 = func_8083FD78(this, &mut sp3C, &mut sp3A, globalCtx);
        if temp1 > 0 as libc::c_int {
            func_8083C8DC(this, globalCtx, sp3A);
            return
        }
        if temp1 < 0 as libc::c_int {
            func_8083CB2C(this, sp3A, globalCtx);
            return
        }
        if sp3C > 4.9f32 {
            func_8083CC9C(this, globalCtx);
            func_80833C3C(this);
            return
        }
        if sp3C != 0.0f32 { func_8083CB94(this, globalCtx); return }
        temp2 =
            (sp3A as libc::c_int - (*this).actor.shape.rot.y as libc::c_int)
                as s16;
        temp3 =
            if temp2 as libc::c_int >= 0 as libc::c_int {
                temp2 as libc::c_int
            } else { -(temp2 as libc::c_int) };
        if temp3 > 800 as libc::c_int {
            func_8083CD54(globalCtx, this, sp3A);
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_808409CC(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    let mut anim: *mut LinkAnimationHeader = 0 as *mut LinkAnimationHeader;
    let mut animPtr: *mut *mut LinkAnimationHeader =
        0 as *mut *mut LinkAnimationHeader;
    let mut heathIsCritical: s32 = 0;
    let mut sp38: s32 = 0;
    let mut sp34: s32 = 0;
    if !(*this).unk_664.is_null() ||
           {
               heathIsCritical = HealthMeter_IsCritical() as s32;
               (heathIsCritical == 0) &&
                   {
                       (*this).unk_6AC =
                           ((*this).unk_6AC as libc::c_int + 1 as libc::c_int
                                & 1 as libc::c_int) as s8;
                       ((*this).unk_6AC as libc::c_int) != 0 as libc::c_int
                   }
           } {
        (*this).stateFlags2 &= !(0x10000000 as libc::c_int) as libc::c_uint;
        anim = func_80833338(this)
    } else {
        (*this).stateFlags2 |= 0x10000000 as libc::c_int as libc::c_uint;
        if (*this).stateFlags1 & 0x800 as libc::c_int as libc::c_uint != 0 {
            anim = func_80833338(this)
        } else {
            sp38 = (*globalCtx).roomCtx.curRoom.unk_02 as s32;
            if heathIsCritical != 0 {
                if (*this).unk_6AC as libc::c_int >= 0 as libc::c_int {
                    sp38 = 7 as libc::c_int;
                    (*this).unk_6AC = -(1 as libc::c_int) as s8
                } else { sp38 = 8 as libc::c_int }
            } else {
                sp34 = (Rand_ZeroOne() * 5.0f32) as s32;
                if sp34 < 4 as libc::c_int {
                    if sp34 != 0 as libc::c_int && sp34 != 3 as libc::c_int ||
                           (*this).rightHandType as libc::c_int ==
                               10 as libc::c_int &&
                               (sp34 == 3 as libc::c_int ||
                                    Player_GetSwordHeld(this) != 0) {
                        if sp34 == 0 as libc::c_int &&
                               Player_HoldsTwoHandedWeapon(this) != 0 {
                            sp34 = 4 as libc::c_int
                        }
                        sp38 = sp34 + 9 as libc::c_int
                    }
                }
            }
            animPtr =
                &mut *(*D_80853D7C.as_mut_ptr().offset(sp38 as
                                                           isize)).as_mut_ptr().offset(0
                                                                                           as
                                                                                           libc::c_int
                                                                                           as
                                                                                           isize)
                    as *mut *mut LinkAnimationHeader;
            if (*this).modelAnimType as libc::c_int != 1 as libc::c_int {
                animPtr =
                    &mut *(*D_80853D7C.as_mut_ptr().offset(sp38 as
                                                               isize)).as_mut_ptr().offset(1
                                                                                               as
                                                                                               libc::c_int
                                                                                               as
                                                                                               isize)
                        as *mut *mut LinkAnimationHeader
            }
            anim = *animPtr
        }
    }
    LinkAnimation_Change(globalCtx, &mut (*this).skelAnime, anim,
                         2.0f32 / 3.0f32 * D_808535E8, 0.0f32,
                         Animation_GetLastFrame(anim as *mut libc::c_void) as
                             f32_0, ANIMMODE_ONCE as libc::c_int as u8_0,
                         -6.0f32);
}
#[no_mangle]
pub unsafe extern "C" fn func_80840BC8(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut sp44: s32 = 0;
    let mut sp40: s32 = 0;
    let mut sp3C: f32_0 = 0.;
    let mut sp3A: s16 = 0;
    let mut temp: s16 = 0;
    sp44 = func_80833350(this);
    sp40 = LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
    if sp44 > 0 as libc::c_int {
        func_808333FC(this, sp44 - 1 as libc::c_int);
    }
    if sp40 != 0 as libc::c_int {
        if (*this).unk_850 as libc::c_int != 0 as libc::c_int {
            if (if (*this).unk_850 as libc::c_int == 0 as libc::c_int {
                    0 as libc::c_int
                } else {
                    (*this).unk_850 -= 1;
                    (*this).unk_850 as libc::c_int
                }) == 0 as libc::c_int {
                (*this).skelAnime.endFrame =
                    (*this).skelAnime.animLength - 1.0f32
            }
            (*(*this).skelAnime.jointTable.offset(0 as libc::c_int as
                                                      isize)).y =
                ((*(*this).skelAnime.jointTable.offset(0 as libc::c_int as
                                                           isize)).y as
                     libc::c_int +
                     ((*this).unk_850 as libc::c_int & 1 as libc::c_int) *
                         0x50 as libc::c_int - 0x28 as libc::c_int) as s16
        } else { func_80832DBC(this); func_808409CC(globalCtx, this); }
    }
    func_8083721C(this);
    if (*this).unk_850 as libc::c_int == 0 as libc::c_int {
        if func_80837348(globalCtx, this, D_80854418.as_mut_ptr(),
                         1 as libc::c_int) == 0 {
            if func_80833B54(this) != 0 {
                func_8083CEAC(this, globalCtx);
                return
            }
            if func_80833B2C(this) != 0 {
                func_80839F30(this, globalCtx);
                return
            }
            func_80837268(this, &mut sp3C, &mut sp3A, 0.018f32, globalCtx);
            if sp3C != 0.0f32 { func_8083C8DC(this, globalCtx, sp3A); return }
            temp =
                (sp3A as libc::c_int -
                     (*this).actor.shape.rot.y as libc::c_int) as s16;
            if (if temp as libc::c_int >= 0 as libc::c_int {
                    temp as libc::c_int
                } else { -(temp as libc::c_int) }) > 800 as libc::c_int {
                func_8083CD54(globalCtx, this, sp3A);
                return
            }
            Math_ScaledStepToS(&mut (*this).actor.shape.rot.y, sp3A,
                               1200 as libc::c_int as s16);
            (*this).currentYaw = (*this).actor.shape.rot.y;
            if func_80833338(this) ==
                   (*this).skelAnime.animation as *mut LinkAnimationHeader {
                func_8083DC54(this, globalCtx);
            }
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80840DE4(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut frames: f32_0 = 0.;
    let mut coeff: f32_0 = 0.;
    let mut sp44: f32_0 = 0.;
    let mut sp42: s16 = 0;
    let mut temp1: s32 = 0;
    let mut temp2: s16 = 0;
    let mut temp3: s32 = 0;
    let mut direction: s32 = 0;
    (*this).skelAnime.mode = 0 as libc::c_int as u8_0;
    LinkAnimation_SetUpdateFunction(&mut (*this).skelAnime);
    (*this).skelAnime.animation = func_8083356C(this) as *mut libc::c_void;
    if (*this).skelAnime.animation ==
           &mut gPlayerAnim_0026E8 as *mut LinkAnimationHeader as
               *mut libc::c_void {
        frames = 24.0f32;
        coeff =
            -((*gGameInfo).data[(5 as libc::c_int * 6 as libc::c_int *
                                     16 as libc::c_int + 95 as libc::c_int) as
                                    usize] as libc::c_int as libc::c_float /
                  100.0f32)
    } else {
        frames = 29.0f32;
        coeff =
            (*gGameInfo).data[(5 as libc::c_int * 6 as libc::c_int *
                                   16 as libc::c_int + 95 as libc::c_int) as
                                  usize] as libc::c_int as libc::c_float /
                100.0f32
    }
    (*this).skelAnime.animLength = frames;
    (*this).skelAnime.endFrame = frames - 1.0f32;
    if ((*this).currentYaw as libc::c_int -
            (*this).actor.shape.rot.y as libc::c_int) as s16 as libc::c_int >=
           0 as libc::c_int {
        direction = 1 as libc::c_int
    } else { direction = -(1 as libc::c_int) }
    (*this).skelAnime.playSpeed =
        direction as libc::c_float * ((*this).linearVelocity * coeff);
    LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
    if LinkAnimation_OnFrame(&mut (*this).skelAnime, 0.0f32) != 0 ||
           LinkAnimation_OnFrame(&mut (*this).skelAnime, frames * 0.5f32) != 0
       {
        func_808327F8(this, (*this).linearVelocity);
    }
    if func_80837348(globalCtx, this, D_808543F4.as_mut_ptr(),
                     1 as libc::c_int) == 0 {
        if func_80833B54(this) != 0 { func_8083CEAC(this, globalCtx); return }
        if func_80833B2C(this) == 0 { func_80853080(this, globalCtx); return }
        func_80837268(this, &mut sp44, &mut sp42, 0.0f32, globalCtx);
        temp1 = func_8083FD78(this, &mut sp44, &mut sp42, globalCtx);
        if temp1 > 0 as libc::c_int {
            func_8083C8DC(this, globalCtx, sp42);
            return
        }
        if temp1 < 0 as libc::c_int {
            func_8083CB2C(this, sp42, globalCtx);
            return
        }
        if sp44 > 4.9f32 {
            func_8083CC9C(this, globalCtx);
            func_80833C3C(this);
            return
        }
        if sp44 == 0.0f32 && (*this).linearVelocity == 0.0f32 {
            func_80839F30(this, globalCtx);
            return
        }
        temp2 =
            (sp42 as libc::c_int - (*this).currentYaw as libc::c_int) as s16;
        temp3 =
            if temp2 as libc::c_int >= 0 as libc::c_int {
                temp2 as libc::c_int
            } else { -(temp2 as libc::c_int) };
        if temp3 > 0x4000 as libc::c_int {
            if Math_StepToF(&mut (*this).linearVelocity, 0.0f32, 1.5f32) != 0
               {
                (*this).currentYaw = sp42
            }
            return
        }
        Math_AsymStepToF(&mut (*this).linearVelocity, sp44 * 0.4f32, 1.5f32,
                         1.5f32);
        Math_ScaledStepToS(&mut (*this).currentYaw, sp42,
                           (temp3 as libc::c_float * 0.1f32) as s16);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80841138(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut temp1: f32_0 = 0.;
    let mut temp2: f32_0 = 0.;
    if (*this).unk_864 < 1.0f32 {
        temp1 =
            (*gGameInfo).data[(1 as libc::c_int * 6 as libc::c_int *
                                   16 as libc::c_int + 30 as libc::c_int) as
                                  usize] as libc::c_int as libc::c_float *
                0.5f32;
        func_8084029C(this,
                      (*gGameInfo).data[(0 as libc::c_int * 6 as libc::c_int *
                                             16 as libc::c_int +
                                             35 as libc::c_int) as usize] as
                          libc::c_int as libc::c_float / 1000.0f32);
        LinkAnimation_LoadToJoint(globalCtx, &mut (*this).skelAnime,
                                  D_80853BFC[(*this).modelAnimType as usize],
                                  (*this).unk_868);
        (*this).unk_864 += 1 as libc::c_int as libc::c_float * temp1;
        if (*this).unk_864 >= 1.0f32 { (*this).unk_864 = 1.0f32 }
        temp1 = (*this).unk_864
    } else {
        temp2 =
            (*this).linearVelocity -
                (*gGameInfo).data[(0 as libc::c_int * 6 as libc::c_int *
                                       16 as libc::c_int + 48 as libc::c_int)
                                      as usize] as libc::c_int as
                    libc::c_float / 100.0f32;
        if temp2 < 0.0f32 {
            temp1 = 1.0f32;
            func_8084029C(this,
                          (*gGameInfo).data[(0 as libc::c_int *
                                                 6 as libc::c_int *
                                                 16 as libc::c_int +
                                                 35 as libc::c_int) as usize]
                              as libc::c_int as libc::c_float / 1000.0f32 +
                              (*gGameInfo).data[(0 as libc::c_int *
                                                     6 as libc::c_int *
                                                     16 as libc::c_int +
                                                     36 as libc::c_int) as
                                                    usize] as libc::c_int as
                                  libc::c_float / 1000.0f32 *
                                  (*this).linearVelocity);
            LinkAnimation_LoadToJoint(globalCtx, &mut (*this).skelAnime,
                                      D_80853BFC[(*this).modelAnimType as
                                                     usize], (*this).unk_868);
        } else {
            temp1 =
                (*gGameInfo).data[(0 as libc::c_int * 6 as libc::c_int *
                                       16 as libc::c_int + 37 as libc::c_int)
                                      as usize] as libc::c_int as
                    libc::c_float / 1000.0f32 * temp2;
            if temp1 < 1.0f32 {
                func_8084029C(this,
                              (*gGameInfo).data[(0 as libc::c_int *
                                                     6 as libc::c_int *
                                                     16 as libc::c_int +
                                                     35 as libc::c_int) as
                                                    usize] as libc::c_int as
                                  libc::c_float / 1000.0f32 +
                                  (*gGameInfo).data[(0 as libc::c_int *
                                                         6 as libc::c_int *
                                                         16 as libc::c_int +
                                                         36 as libc::c_int) as
                                                        usize] as libc::c_int
                                      as libc::c_float / 1000.0f32 *
                                      (*this).linearVelocity);
            } else {
                temp1 = 1.0f32;
                func_8084029C(this,
                              1.2f32 +
                                  (*gGameInfo).data[(0 as libc::c_int *
                                                         6 as libc::c_int *
                                                         16 as libc::c_int +
                                                         38 as libc::c_int) as
                                                        usize] as libc::c_int
                                      as libc::c_float / 1000.0f32 * temp2);
            }
            LinkAnimation_LoadToMorph(globalCtx, &mut (*this).skelAnime,
                                      D_80853BFC[(*this).modelAnimType as
                                                     usize], (*this).unk_868);
            LinkAnimation_LoadToJoint(globalCtx, &mut (*this).skelAnime,
                                      &mut gPlayerAnim_002DD0,
                                      (*this).unk_868 * (16.0f32 / 29.0f32));
        }
    }
    if temp1 < 1.0f32 {
        LinkAnimation_InterpJointMorph(globalCtx, &mut (*this).skelAnime,
                                       1.0f32 - temp1);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8084140C(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    func_80835C58(globalCtx, this,
                  Some(func_8084170C as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  1 as libc::c_int);
    func_80832B0C(globalCtx, this, &mut gPlayerAnim_002DA0);
}
#[no_mangle]
pub unsafe extern "C" fn func_80841458(mut this: *mut Player,
                                       mut arg1: *mut f32_0,
                                       mut arg2: *mut s16,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    if (*this).linearVelocity > 6.0f32 {
        func_8084140C(this, globalCtx);
        return 1 as libc::c_int
    }
    if *arg1 != 0.0f32 {
        if func_8083721C(this) != 0 {
            *arg1 = 0.0f32;
            *arg2 = (*this).currentYaw
        } else { return 1 as libc::c_int }
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_808414F8(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut sp34: f32_0 = 0.;
    let mut sp32: s16 = 0;
    let mut sp2C: s32 = 0;
    let mut sp2A: s16 = 0;
    func_80841138(this, globalCtx);
    if func_80837348(globalCtx, this, D_80854400.as_mut_ptr(),
                     1 as libc::c_int) == 0 {
        if func_80833C04(this) == 0 {
            func_8083C8DC(this, globalCtx, (*this).currentYaw);
            return
        }
        func_80837268(this, &mut sp34, &mut sp32, 0.0f32, globalCtx);
        sp2C = func_8083FD78(this, &mut sp34, &mut sp32, globalCtx);
        if sp2C >= 0 as libc::c_int {
            if func_80841458(this, &mut sp34, &mut sp32, globalCtx) == 0 {
                if sp2C != 0 as libc::c_int {
                    func_8083C858(this, globalCtx);
                } else if sp34 > 4.9f32 {
                    func_8083CC9C(this, globalCtx);
                } else { func_8083CB94(this, globalCtx); }
            }
        } else {
            sp2A =
                (sp32 as libc::c_int - (*this).currentYaw as libc::c_int) as
                    s16;
            Math_AsymStepToF(&mut (*this).linearVelocity, sp34 * 1.5f32,
                             1.5f32, 2.0f32);
            Math_ScaledStepToS(&mut (*this).currentYaw, sp32,
                               (sp2A as libc::c_int as libc::c_float * 0.1f32)
                                   as s16);
            if sp34 == 0.0f32 && (*this).linearVelocity == 0.0f32 {
                func_80839F30(this, globalCtx);
            }
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_808416C0(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    func_80835C58(globalCtx, this,
                  Some(func_808417FC as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  1 as libc::c_int);
    func_80832264(globalCtx, this, &mut gPlayerAnim_002DA8);
}
#[no_mangle]
pub unsafe extern "C" fn func_8084170C(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut sp34: s32 = 0;
    let mut sp30: f32_0 = 0.;
    let mut sp2E: s16 = 0;
    sp34 = LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
    func_8083721C(this);
    if func_80837348(globalCtx, this, D_80854400.as_mut_ptr(),
                     1 as libc::c_int) == 0 {
        func_80837268(this, &mut sp30, &mut sp2E, 0.0f32, globalCtx);
        if (*this).linearVelocity == 0.0f32 {
            (*this).currentYaw = (*this).actor.shape.rot.y;
            if func_8083FD78(this, &mut sp30, &mut sp2E, globalCtx) >
                   0 as libc::c_int {
                func_8083C858(this, globalCtx);
            } else if sp30 != 0.0f32 || sp34 != 0 as libc::c_int {
                func_808416C0(this, globalCtx);
            }
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_808417FC(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut sp1C: s32 = 0;
    sp1C = LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
    if func_80837348(globalCtx, this, D_80854400.as_mut_ptr(),
                     1 as libc::c_int) == 0 {
        if sp1C != 0 as libc::c_int { func_80839F30(this, globalCtx); }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80841860(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    let mut frame: f32_0 = 0.;
    let mut sp38: *mut LinkAnimationHeader =
        D_80853914[((*this).modelAnimType as libc::c_int + 144 as libc::c_int)
                       as usize];
    let mut sp34: *mut LinkAnimationHeader =
        D_80853914[((*this).modelAnimType as libc::c_int + 150 as libc::c_int)
                       as usize];
    (*this).skelAnime.animation = sp38 as *mut libc::c_void;
    func_8084029C(this,
                  (*gGameInfo).data[(0 as libc::c_int * 6 as libc::c_int *
                                         16 as libc::c_int +
                                         30 as libc::c_int) as usize] as
                      libc::c_int as libc::c_float / 1000.0f32 +
                      (*gGameInfo).data[(0 as libc::c_int * 6 as libc::c_int *
                                             16 as libc::c_int +
                                             32 as libc::c_int) as usize] as
                          libc::c_int as libc::c_float / 1000.0f32 *
                          (*this).linearVelocity);
    frame = (*this).unk_868 * (16.0f32 / 29.0f32);
    LinkAnimation_BlendToJoint(globalCtx, &mut (*this).skelAnime, sp34, frame,
                               sp38, frame, (*this).unk_870,
                               (*this).blendTable.as_mut_ptr());
}
#[no_mangle]
pub unsafe extern "C" fn func_8084193C(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut sp3C: f32_0 = 0.;
    let mut sp3A: s16 = 0;
    let mut temp1: s32 = 0;
    let mut temp2: s16 = 0;
    let mut temp3: s32 = 0;
    func_80841860(globalCtx, this);
    if func_80837348(globalCtx, this, D_80854408.as_mut_ptr(),
                     1 as libc::c_int) == 0 {
        if func_80833C04(this) == 0 { func_8083C858(this, globalCtx); return }
        func_80837268(this, &mut sp3C, &mut sp3A, 0.0f32, globalCtx);
        if func_80833B2C(this) != 0 {
            temp1 = func_8083FD78(this, &mut sp3C, &mut sp3A, globalCtx)
        } else { temp1 = func_8083FC68(this, sp3C, sp3A) }
        if temp1 > 0 as libc::c_int { func_8083C858(this, globalCtx); return }
        if temp1 < 0 as libc::c_int {
            if func_80833B2C(this) != 0 {
                func_8083CB2C(this, sp3A, globalCtx);
            } else { func_8083CBF0(this, sp3A, globalCtx); }
            return
        }
        if (*this).linearVelocity < 3.6f32 && sp3C < 4.0f32 {
            if func_8008E9C4(this) == 0 && func_80833B2C(this) != 0 {
                func_8083CB94(this, globalCtx);
            } else { func_80839F90(this, globalCtx); }
            return
        }
        func_80840138(this, sp3C, sp3A);
        temp2 =
            (sp3A as libc::c_int - (*this).currentYaw as libc::c_int) as s16;
        temp3 =
            if temp2 as libc::c_int >= 0 as libc::c_int {
                temp2 as libc::c_int
            } else { -(temp2 as libc::c_int) };
        if temp3 > 0x4000 as libc::c_int {
            if Math_StepToF(&mut (*this).linearVelocity, 0.0f32, 3.0f32) !=
                   0 as libc::c_int {
                (*this).currentYaw = sp3A
            }
            return
        }
        sp3C *= 0.9f32;
        Math_AsymStepToF(&mut (*this).linearVelocity, sp3C, 2.0f32, 3.0f32);
        Math_ScaledStepToS(&mut (*this).currentYaw, sp3A,
                           (temp3 as libc::c_float * 0.1f32) as s16);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80841BA8(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut sp34: f32_0 = 0.;
    let mut sp32: s16 = 0;
    LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
    if Player_HoldsTwoHandedWeapon(this) != 0 {
        AnimationContext_SetLoadFrame(globalCtx, func_80833338(this),
                                      0 as libc::c_int,
                                      (*this).skelAnime.limbCount as s32,
                                      (*this).skelAnime.morphTable);
        AnimationContext_SetCopyTrue(globalCtx,
                                     (*this).skelAnime.limbCount as s32,
                                     (*this).skelAnime.jointTable,
                                     (*this).skelAnime.morphTable,
                                     D_80853410.as_mut_ptr());
    }
    func_80837268(this, &mut sp34, &mut sp32, 0.018f32, globalCtx);
    if func_80837348(globalCtx, this, D_80854414.as_mut_ptr(),
                     1 as libc::c_int) == 0 {
        if sp34 != 0.0f32 {
            (*this).actor.shape.rot.y = sp32;
            func_8083C858(this, globalCtx);
        } else if Math_ScaledStepToS(&mut (*this).actor.shape.rot.y, sp32,
                                     (*this).unk_87E) != 0 {
            func_8083C0E8(this, globalCtx);
        }
        (*this).currentYaw = (*this).actor.shape.rot.y
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80841CC4(mut this: *mut Player, mut arg1: s32,
                                       mut globalCtx: *mut GlobalContext) {
    let mut anim: *mut LinkAnimationHeader = 0 as *mut LinkAnimationHeader;
    let mut target: s16 = 0;
    let mut rate: f32_0 = 0.;
    if (if D_80853610 as libc::c_int >= 0 as libc::c_int {
            D_80853610 as libc::c_int
        } else { -(D_80853610 as libc::c_int) }) < 3640 as libc::c_int {
        target = 0 as libc::c_int as s16
    } else {
        target =
            if (D_80853610 as libc::c_int) < -(10922 as libc::c_int) {
                -(10922 as libc::c_int)
            } else if D_80853610 as libc::c_int > 10922 as libc::c_int {
                10922 as libc::c_int
            } else { D_80853610 as libc::c_int } as s16
    }
    Math_ScaledStepToS(&mut (*this).unk_89C, target,
                       400 as libc::c_int as s16);
    if (*this).modelAnimType as libc::c_int == 3 as libc::c_int ||
           (*this).unk_89C as libc::c_int == 0 as libc::c_int &&
               (*this).unk_6C4 <= 0.0f32 {
        if arg1 == 0 as libc::c_int {
            LinkAnimation_LoadToJoint(globalCtx, &mut (*this).skelAnime,
                                      D_8085392C[(*this).modelAnimType as
                                                     usize], (*this).unk_868);
        } else {
            LinkAnimation_LoadToMorph(globalCtx, &mut (*this).skelAnime,
                                      D_8085392C[(*this).modelAnimType as
                                                     usize], (*this).unk_868);
        }
        return
    }
    if (*this).unk_89C as libc::c_int != 0 as libc::c_int {
        rate = (*this).unk_89C as libc::c_int as libc::c_float / 10922.0f32
    } else { rate = (*this).unk_6C4 * 0.0006f32 }
    rate *= fabsf((*this).linearVelocity) * 0.5f32;
    if rate > 1.0f32 { rate = 1.0f32 }
    if rate < 0.0f32 {
        anim = &mut gPlayerAnim_002E48;
        rate = -rate
    } else { anim = &mut gPlayerAnim_002E90 }
    if arg1 == 0 as libc::c_int {
        LinkAnimation_BlendToJoint(globalCtx, &mut (*this).skelAnime,
                                   D_8085392C[(*this).modelAnimType as usize],
                                   (*this).unk_868, anim, (*this).unk_868,
                                   rate, (*this).blendTable.as_mut_ptr());
    } else {
        LinkAnimation_BlendToMorph(globalCtx, &mut (*this).skelAnime,
                                   D_8085392C[(*this).modelAnimType as usize],
                                   (*this).unk_868, anim, (*this).unk_868,
                                   rate, (*this).blendTable.as_mut_ptr());
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80841EE4(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut temp1: f32_0 = 0.;
    let mut temp2: f32_0 = 0.;
    if (*this).unk_864 < 1.0f32 {
        temp1 =
            (*gGameInfo).data[(1 as libc::c_int * 6 as libc::c_int *
                                   16 as libc::c_int + 30 as libc::c_int) as
                                  usize] as libc::c_int as libc::c_float *
                0.5f32;
        func_8084029C(this,
                      (*gGameInfo).data[(0 as libc::c_int * 6 as libc::c_int *
                                             16 as libc::c_int +
                                             35 as libc::c_int) as usize] as
                          libc::c_int as libc::c_float / 1000.0f32);
        LinkAnimation_LoadToJoint(globalCtx, &mut (*this).skelAnime,
                                  D_8085392C[(*this).modelAnimType as usize],
                                  (*this).unk_868);
        (*this).unk_864 += 1 as libc::c_int as libc::c_float * temp1;
        if (*this).unk_864 >= 1.0f32 { (*this).unk_864 = 1.0f32 }
        temp1 = (*this).unk_864
    } else {
        temp2 =
            (*this).linearVelocity -
                (*gGameInfo).data[(0 as libc::c_int * 6 as libc::c_int *
                                       16 as libc::c_int + 48 as libc::c_int)
                                      as usize] as libc::c_int as
                    libc::c_float / 100.0f32;
        if temp2 < 0.0f32 {
            temp1 = 1.0f32;
            func_8084029C(this,
                          (*gGameInfo).data[(0 as libc::c_int *
                                                 6 as libc::c_int *
                                                 16 as libc::c_int +
                                                 35 as libc::c_int) as usize]
                              as libc::c_int as libc::c_float / 1000.0f32 +
                              (*gGameInfo).data[(0 as libc::c_int *
                                                     6 as libc::c_int *
                                                     16 as libc::c_int +
                                                     36 as libc::c_int) as
                                                    usize] as libc::c_int as
                                  libc::c_float / 1000.0f32 *
                                  (*this).linearVelocity);
            func_80841CC4(this, 0 as libc::c_int, globalCtx);
        } else {
            temp1 =
                (*gGameInfo).data[(0 as libc::c_int * 6 as libc::c_int *
                                       16 as libc::c_int + 37 as libc::c_int)
                                      as usize] as libc::c_int as
                    libc::c_float / 1000.0f32 * temp2;
            if temp1 < 1.0f32 {
                func_8084029C(this,
                              (*gGameInfo).data[(0 as libc::c_int *
                                                     6 as libc::c_int *
                                                     16 as libc::c_int +
                                                     35 as libc::c_int) as
                                                    usize] as libc::c_int as
                                  libc::c_float / 1000.0f32 +
                                  (*gGameInfo).data[(0 as libc::c_int *
                                                         6 as libc::c_int *
                                                         16 as libc::c_int +
                                                         36 as libc::c_int) as
                                                        usize] as libc::c_int
                                      as libc::c_float / 1000.0f32 *
                                      (*this).linearVelocity);
            } else {
                temp1 = 1.0f32;
                func_8084029C(this,
                              1.2f32 +
                                  (*gGameInfo).data[(0 as libc::c_int *
                                                         6 as libc::c_int *
                                                         16 as libc::c_int +
                                                         38 as libc::c_int) as
                                                        usize] as libc::c_int
                                      as libc::c_float / 1000.0f32 * temp2);
            }
            func_80841CC4(this, 1 as libc::c_int, globalCtx);
            LinkAnimation_LoadToJoint(globalCtx, &mut (*this).skelAnime,
                                      func_80833438(this),
                                      (*this).unk_868 * (20.0f32 / 29.0f32));
        }
    }
    if temp1 < 1.0f32 {
        LinkAnimation_InterpJointMorph(globalCtx, &mut (*this).skelAnime,
                                       1.0f32 - temp1);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80842180(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut sp2C: f32_0 = 0.;
    let mut sp2A: s16 = 0;
    (*this).stateFlags2 |= 0x20 as libc::c_int as libc::c_uint;
    func_80841EE4(this, globalCtx);
    if func_80837348(globalCtx, this, D_80854424.as_mut_ptr(),
                     1 as libc::c_int) == 0 {
        if func_80833C04(this) != 0 { func_8083C858(this, globalCtx); return }
        func_80837268(this, &mut sp2C, &mut sp2A, 0.018f32, globalCtx);
        if func_8083C484(this, &mut sp2C, &mut sp2A) == 0 {
            func_8083DF68(this, sp2C, sp2A);
            func_8083DDC8(this, globalCtx);
            if (*this).linearVelocity == 0.0f32 && sp2C == 0.0f32 {
                func_8083C0B8(this, globalCtx);
            }
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8084227C(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut sp2C: f32_0 = 0.;
    let mut sp2A: s16 = 0;
    (*this).stateFlags2 |= 0x20 as libc::c_int as libc::c_uint;
    func_80841EE4(this, globalCtx);
    if func_80837348(globalCtx, this, D_80854430.as_mut_ptr(),
                     1 as libc::c_int) == 0 {
        if func_80833C04(this) == 0 { func_8083C858(this, globalCtx); return }
        func_80837268(this, &mut sp2C, &mut sp2A, 0.0f32, globalCtx);
        if func_8083C484(this, &mut sp2C, &mut sp2A) == 0 {
            if func_80833B2C(this) != 0 && sp2C != 0.0f32 &&
                   func_8083FD78(this, &mut sp2C, &mut sp2A, globalCtx) <=
                       0 as libc::c_int ||
                   func_80833B2C(this) == 0 &&
                       func_8083FC68(this, sp2C, sp2A) <= 0 as libc::c_int {
                func_80839F90(this, globalCtx);
                return
            }
            func_8083DF68(this, sp2C, sp2A);
            func_8083DDC8(this, globalCtx);
            if (*this).linearVelocity == 0 as libc::c_int as libc::c_float &&
                   sp2C == 0 as libc::c_int as libc::c_float {
                func_80839F90(this, globalCtx);
            }
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_808423EC(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut sp34: s32 = 0;
    let mut sp30: f32_0 = 0.;
    let mut sp2E: s16 = 0;
    sp34 = LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
    if func_80837348(globalCtx, this, D_80854408.as_mut_ptr(),
                     1 as libc::c_int) == 0 {
        if func_80833C04(this) == 0 { func_8083C858(this, globalCtx); return }
        func_80837268(this, &mut sp30, &mut sp2E, 0.0f32, globalCtx);
        if (*this).skelAnime.morphWeight == 0.0f32 &&
               (*this).skelAnime.curFrame > 5.0f32 {
            func_8083721C(this);
            if (*this).skelAnime.curFrame > 10.0f32 &&
                   func_8083FC68(this, sp30, sp2E) < 0 as libc::c_int {
                func_8083CBF0(this, sp2E, globalCtx);
                return
            }
            if sp34 != 0 as libc::c_int { func_8083CD00(this, globalCtx); }
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8084251C(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut sp34: s32 = 0;
    let mut sp30: f32_0 = 0.;
    let mut sp2E: s16 = 0;
    sp34 = LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
    func_8083721C(this);
    if func_80837348(globalCtx, this, D_80854440.as_mut_ptr(),
                     1 as libc::c_int) == 0 {
        func_80837268(this, &mut sp30, &mut sp2E, 0.0f32, globalCtx);
        if (*this).linearVelocity == 0.0f32 {
            (*this).currentYaw = (*this).actor.shape.rot.y;
            if func_8083FC68(this, sp30, sp2E) > 0 as libc::c_int {
                func_8083C858(this, globalCtx);
                return
            }
            if sp30 != 0.0f32 || sp34 != 0 as libc::c_int {
                func_80839F90(this, globalCtx);
            }
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8084260C(mut src: *mut Vec3f,
                                       mut dest: *mut Vec3f, mut arg2: f32_0,
                                       mut arg3: f32_0, mut arg4: f32_0) {
    (*dest).x = Rand_ZeroOne() * arg3 + (*src).x;
    (*dest).y = Rand_ZeroOne() * arg4 + ((*src).y + arg2);
    (*dest).z = Rand_ZeroOne() * arg3 + (*src).z;
}
static mut D_808545B4: Vec3f =
    { let mut init = Vec3f{x: 0.0f32, y: 0.0f32, z: 0.0f32,}; init };
static mut D_808545C0: Vec3f =
    { let mut init = Vec3f{x: 0.0f32, y: 0.0f32, z: 0.0f32,}; init };
#[no_mangle]
pub unsafe extern "C" fn func_8084269C(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) -> s32 {
    let mut sp2C: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    if (*this).unk_89E as libc::c_int == 0 as libc::c_int ||
           (*this).unk_89E as libc::c_int == 1 as libc::c_int {
        func_8084260C(&mut *(*this).actor.shape.feetPos.as_mut_ptr().offset(FOOT_LEFT
                                                                                as
                                                                                libc::c_int
                                                                                as
                                                                                isize),
                      &mut sp2C,
                      (*this).actor.floorHeight -
                          (*this).actor.shape.feetPos[FOOT_LEFT as libc::c_int
                                                          as usize].y, 7.0f32,
                      5.0f32);
        func_800286CC(globalCtx, &mut sp2C, &mut D_808545B4, &mut D_808545C0,
                      50 as libc::c_int as s16, 30 as libc::c_int as s16);
        func_8084260C(&mut *(*this).actor.shape.feetPos.as_mut_ptr().offset(FOOT_RIGHT
                                                                                as
                                                                                libc::c_int
                                                                                as
                                                                                isize),
                      &mut sp2C,
                      (*this).actor.floorHeight -
                          (*this).actor.shape.feetPos[FOOT_RIGHT as
                                                          libc::c_int as
                                                          usize].y, 7.0f32,
                      5.0f32);
        func_800286CC(globalCtx,
                      &mut *(*this).actor.shape.feetPos.as_mut_ptr().offset(FOOT_RIGHT
                                                                                as
                                                                                libc::c_int
                                                                                as
                                                                                isize),
                      &mut D_808545B4, &mut D_808545C0,
                      50 as libc::c_int as s16, 30 as libc::c_int as s16);
        return 1 as libc::c_int
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8084279C(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    func_80832CB0(globalCtx, this,
                  D_80853C2C[(*this).modelAnimType as usize]);
    if (if (*this).unk_850 as libc::c_int == 0 as libc::c_int {
            0 as libc::c_int
        } else { (*this).unk_850 -= 1; (*this).unk_850 as libc::c_int }) ==
           0 as libc::c_int {
        if func_8083B040(this, globalCtx) == 0 {
            func_8083A098(this, D_80853C44[(*this).modelAnimType as usize],
                          globalCtx);
        }
        (*this).actor.flags &=
            !((1 as libc::c_int) << 8 as libc::c_int) as libc::c_uint;
        func_8005B1A4(Gameplay_GetCamera(globalCtx, 0 as libc::c_int as s16));
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8084285C(mut this: *mut Player, mut arg1: f32_0,
                                       mut arg2: f32_0, mut arg3: f32_0)
 -> s32 {
    if arg1 <= (*this).skelAnime.curFrame &&
           (*this).skelAnime.curFrame <= arg3 {
        func_80833A20(this,
                      if arg2 <= (*this).skelAnime.curFrame {
                          1 as libc::c_int
                      } else { -(1 as libc::c_int) });
        return 1 as libc::c_int
    }
    func_80832318(this);
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_808428D8(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    if Player_IsChildWithHylianShield(this) == 0 &&
           Player_GetSwordHeld(this) != 0 && D_80853614 != 0 {
        func_80832264(globalCtx, this, &mut gPlayerAnim_002EC8);
        (*this).unk_84F = 1 as libc::c_int as s8;
        (*this).swordAnimation = 0xc as libc::c_int as s8;
        (*this).currentYaw =
            ((*this).actor.shape.rot.y as libc::c_int +
                 (*this).unk_6BE as libc::c_int) as s16;
        return 1 as libc::c_int
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80842964(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    return (func_8083B040(this, globalCtx) != 0 ||
                func_8083B644(this, globalCtx) != 0 ||
                func_8083E5A8(this, globalCtx) != 0) as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_808429B4(mut globalCtx: *mut GlobalContext,
                                       mut speed: s32, mut y: s32,
                                       mut countdown: s32) {
    let mut quakeIdx: s32 =
        Quake_Add(Gameplay_GetCamera(globalCtx, 0 as libc::c_int as s16),
                  3 as libc::c_int as u32_0) as s32;
    Quake_SetSpeed(quakeIdx as s16, speed as s16);
    Quake_SetQuakeValues(quakeIdx as s16, y as s16, 0 as libc::c_int as s16,
                         0 as libc::c_int as s16, 0 as libc::c_int as s16);
    Quake_SetCountdown(quakeIdx as s16, countdown as s16);
}
#[no_mangle]
pub unsafe extern "C" fn func_80842A28(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    func_808429B4(globalCtx, 27767 as libc::c_int, 7 as libc::c_int,
                  20 as libc::c_int);
    (*globalCtx).actorCtx.unk_02 = 4 as libc::c_int as u8_0;
    func_8083264C(this, 255 as libc::c_int, 20 as libc::c_int,
                  150 as libc::c_int, 0 as libc::c_int);
    func_8002F7DC(&mut (*this).actor, 0x180a as libc::c_int as u16_0);
}
#[no_mangle]
pub unsafe extern "C" fn func_80842A88(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    Inventory_ChangeAmmo(ITEM_STICK as libc::c_int as s16,
                         -(1 as libc::c_int) as s16);
    func_80835F44(globalCtx, this, ITEM_NONE as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn func_80842AC4(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) -> s32 {
    if (*this).heldItemActionParam as libc::c_int ==
           PLAYER_AP_STICK as libc::c_int && (*this).unk_85C > 0.5f32 {
        if gSaveContext.inventory.ammo[gItemSlots[ITEM_STICK as libc::c_int as
                                                      usize] as usize] as
               libc::c_int != 0 as libc::c_int {
            EffectSsStick_Spawn(globalCtx,
                                &mut *(*this).bodyPartsPos.as_mut_ptr().offset(15
                                                                                   as
                                                                                   libc::c_int
                                                                                   as
                                                                                   isize),
                                ((*this).actor.shape.rot.y as libc::c_int +
                                     0x8000 as libc::c_int) as s16);
            (*this).unk_85C = 0.5f32;
            func_80842A88(globalCtx, this);
            func_8002F7DC(&mut (*this).actor, 0x181d as libc::c_int as u16_0);
        }
        return 1 as libc::c_int
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80842B7C(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) -> s32 {
    if (*this).heldItemActionParam as libc::c_int ==
           PLAYER_AP_SWORD_BGS as libc::c_int {
        if gSaveContext.bgsFlag == 0 &&
               gSaveContext.swordHealth as libc::c_int as libc::c_float >
                   0.0f32 {
            gSaveContext.swordHealth =
                (gSaveContext.swordHealth as libc::c_float - 1.0f32) as u16_0;
            if gSaveContext.swordHealth as libc::c_int as libc::c_float <=
                   0.0f32 {
                EffectSsStick_Spawn(globalCtx,
                                    &mut *(*this).bodyPartsPos.as_mut_ptr().offset(15
                                                                                       as
                                                                                       libc::c_int
                                                                                       as
                                                                                       isize),
                                    ((*this).actor.shape.rot.y as libc::c_int
                                         + 0x8000 as libc::c_int) as s16);
                func_800849EC(globalCtx);
                func_8002F7DC(&mut (*this).actor,
                              0x184c as libc::c_int as u16_0);
            }
        }
        return 1 as libc::c_int
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80842CF0(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    func_80842AC4(globalCtx, this);
    func_80842B7C(globalCtx, this);
}
static mut D_808545CC: [*mut LinkAnimationHeader; 4] =
    unsafe {
        [&gPlayerAnim_002B10 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002B20 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002B08 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002B18 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
#[no_mangle]
pub unsafe extern "C" fn func_80842D20(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    let mut pad: s32 = 0;
    let mut sp28: s32 = 0;
    if Some(func_80843188 as
                unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                    -> ()) != (*this).func_674 {
        func_80832440(globalCtx, this);
        func_80835C58(globalCtx, this,
                      Some(func_808505DC as
                               unsafe extern "C" fn(_: *mut Player,
                                                    _: *mut GlobalContext)
                                   -> ()), 0 as libc::c_int);
        if func_8008E9C4(this) != 0 {
            sp28 = 2 as libc::c_int
        } else { sp28 = 0 as libc::c_int }
        func_808322D0(globalCtx, this,
                      D_808545CC[(Player_HoldsTwoHandedWeapon(this) + sp28) as
                                     usize]);
    }
    func_8083264C(this, 180 as libc::c_int, 20 as libc::c_int,
                  100 as libc::c_int, 0 as libc::c_int);
    (*this).linearVelocity = -18.0f32;
    func_80842CF0(globalCtx, this);
}
#[no_mangle]
pub unsafe extern "C" fn func_80842DF4(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) -> s32 {
    let mut phi_f2: f32_0 = 0.;
    let mut sp78: *mut CollisionPoly = 0 as *mut CollisionPoly;
    let mut sp74: s32 = 0;
    let mut sp68: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut sp5C: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut sp50: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut temp1: s32 = 0;
    let mut sp48: s32 = 0;
    if (*this).swordState as libc::c_int > 0 as libc::c_int {
        if ((*this).swordAnimation as libc::c_int) < 0x18 as libc::c_int {
            if (*this).swordQuads[0 as libc::c_int as usize].base.atFlags as
                   libc::c_int & (1 as libc::c_int) << 2 as libc::c_int == 0
                   &&
                   (*this).swordQuads[1 as libc::c_int as usize].base.atFlags
                       as libc::c_int & (1 as libc::c_int) << 2 as libc::c_int
                       == 0 {
                if (*this).skelAnime.curFrame >= 2.0f32 {
                    phi_f2 =
                        Math_Vec3f_DistXYZAndStoreDiff(&mut (*(*this).swordInfo.as_mut_ptr().offset(0
                                                                                                        as
                                                                                                        libc::c_int
                                                                                                        as
                                                                                                        isize)).tip,
                                                       &mut (*(*this).swordInfo.as_mut_ptr().offset(0
                                                                                                        as
                                                                                                        libc::c_int
                                                                                                        as
                                                                                                        isize)).base,
                                                       &mut sp50);
                    if phi_f2 != 0.0f32 {
                        phi_f2 = (phi_f2 + 10.0f32) / phi_f2
                    }
                    sp68.x =
                        (*this).swordInfo[0 as libc::c_int as usize].tip.x +
                            sp50.x * phi_f2;
                    sp68.y =
                        (*this).swordInfo[0 as libc::c_int as usize].tip.y +
                            sp50.y * phi_f2;
                    sp68.z =
                        (*this).swordInfo[0 as libc::c_int as usize].tip.z +
                            sp50.z * phi_f2;
                    if BgCheck_EntityLineTest1(&mut (*globalCtx).colCtx,
                                               &mut sp68,
                                               &mut (*(*this).swordInfo.as_mut_ptr().offset(0
                                                                                                as
                                                                                                libc::c_int
                                                                                                as
                                                                                                isize)).tip,
                                               &mut sp5C, &mut sp78,
                                               1 as libc::c_int,
                                               0 as libc::c_int,
                                               0 as libc::c_int,
                                               1 as libc::c_int, &mut sp74) !=
                           0 &&
                           SurfaceType_IsIgnoredByEntities(&mut (*globalCtx).colCtx,
                                                           sp78, sp74) == 0 &&
                           func_80041D4C(&mut (*globalCtx).colCtx, sp78, sp74)
                               != 6 as libc::c_int as libc::c_uint &&
                           func_8002F9EC(globalCtx, &mut (*this).actor, sp78,
                                         sp74, &mut sp5C) == 0 as libc::c_int
                       {
                        if (*this).heldItemActionParam as libc::c_int ==
                               PLAYER_AP_HAMMER as libc::c_int {
                            func_80832630(globalCtx);
                            func_80842A28(globalCtx, this);
                            func_80842D20(globalCtx, this);
                            return 1 as libc::c_int
                        }
                        if (*this).linearVelocity >= 0.0f32 {
                            sp48 =
                                func_80041F10(&mut (*globalCtx).colCtx, sp78,
                                              sp74) as s32;
                            if sp48 == 0xa as libc::c_int {
                                CollisionCheck_SpawnShieldParticlesWood(globalCtx,
                                                                        &mut sp5C,
                                                                        &mut (*this).actor.projectedPos);
                            } else {
                                CollisionCheck_SpawnShieldParticles(globalCtx,
                                                                    &mut sp5C);
                                if sp48 == 0xb as libc::c_int {
                                    func_8002F7DC(&mut (*this).actor,
                                                  0x181b as libc::c_int as
                                                      u16_0);
                                } else {
                                    func_8002F7DC(&mut (*this).actor,
                                                  0x181a as libc::c_int as
                                                      u16_0);
                                }
                            }
                            func_80842CF0(globalCtx, this);
                            (*this).linearVelocity = -14.0f32;
                            func_8083264C(this, 180 as libc::c_int,
                                          20 as libc::c_int,
                                          100 as libc::c_int,
                                          0 as libc::c_int);
                        }
                    }
                }
            } else {
                func_80842D20(globalCtx, this);
                func_80832630(globalCtx);
                return 1 as libc::c_int
            }
        }
        temp1 =
            ((*this).swordQuads[0 as libc::c_int as usize].base.atFlags as
                 libc::c_int & (1 as libc::c_int) << 1 as libc::c_int != 0 ||
                 (*this).swordQuads[1 as libc::c_int as usize].base.atFlags as
                     libc::c_int & (1 as libc::c_int) << 1 as libc::c_int !=
                     0) as libc::c_int;
        if temp1 != 0 {
            if ((*this).swordAnimation as libc::c_int) < 0x18 as libc::c_int {
                let mut at: *mut Actor =
                    (*this).swordQuads[if temp1 != 0 {
                                           1 as libc::c_int
                                       } else { 0 as libc::c_int } as
                                           usize].base.at;
                if !at.is_null() &&
                       (*at).id as libc::c_int !=
                           ACTOR_EN_KANBAN as libc::c_int {
                    func_80832630(globalCtx);
                }
            }
            if func_80842AC4(globalCtx, this) == 0 as libc::c_int &&
                   (*this).heldItemActionParam as libc::c_int !=
                       PLAYER_AP_HAMMER as libc::c_int {
                func_80842B7C(globalCtx, this);
                if (*this).actor.colChkInfo.atHitEffect as libc::c_int ==
                       1 as libc::c_int {
                    (*this).actor.colChkInfo.damage =
                        8 as libc::c_int as u8_0;
                    func_80837C0C(globalCtx, this, 4 as libc::c_int, 0.0f32,
                                  0.0f32, (*this).actor.shape.rot.y,
                                  20 as libc::c_int);
                    return 1 as libc::c_int
                }
            }
        }
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80843188(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut sp54: f32_0 = 0.;
    let mut sp50: f32_0 = 0.;
    let mut sp4E: s16 = 0;
    let mut sp4C: s16 = 0;
    let mut sp4A: s16 = 0;
    let mut sp48: s16 = 0;
    let mut sp46: s16 = 0;
    let mut sp40: f32_0 = 0.;
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        if Player_IsChildWithHylianShield(this) == 0 {
            func_80832284(globalCtx, this,
                          D_80853B0C[(*this).modelAnimType as usize]);
        }
        (*this).unk_850 = 1 as libc::c_int as s16;
        (*this).unk_84F = 0 as libc::c_int as s8
    }
    if Player_IsChildWithHylianShield(this) == 0 {
        (*this).stateFlags1 |= 0x400000 as libc::c_int as libc::c_uint;
        func_80836670(this, globalCtx);
        (*this).stateFlags1 &= !(0x400000 as libc::c_int) as libc::c_uint
    }
    func_8083721C(this);
    if (*this).unk_850 as libc::c_int != 0 as libc::c_int {
        sp54 =
            ((*sControlInput).rel.stick_y as libc::c_int * 100 as libc::c_int)
                as f32_0;
        sp50 =
            ((*sControlInput).rel.stick_x as libc::c_int *
                 -(120 as libc::c_int)) as f32_0;
        sp4E =
            ((*this).actor.shape.rot.y as libc::c_int -
                 Camera_GetInputDirYaw((*globalCtx).cameraPtrs[(*globalCtx).activeCamera
                                                                   as usize])
                     as libc::c_int) as s16;
        sp40 = Math_CosS(sp4E);
        sp4C = (Math_SinS(sp4E) * sp50 + sp54 * sp40) as s16;
        sp40 = Math_CosS(sp4E);
        sp4A = (sp50 * sp40 - Math_SinS(sp4E) * sp54) as s16;
        if sp4C as libc::c_int > 3500 as libc::c_int {
            sp4C = 3500 as libc::c_int as s16
        }
        sp48 =
            ((if sp4C as libc::c_int -
                     (*this).actor.focus.rot.x as libc::c_int >=
                     0 as libc::c_int {
                  (sp4C as libc::c_int) -
                      (*this).actor.focus.rot.x as libc::c_int
              } else {
                  -(sp4C as libc::c_int -
                        (*this).actor.focus.rot.x as libc::c_int)
              }) as libc::c_float * 0.25f32) as s16;
        if (sp48 as libc::c_int) < 100 as libc::c_int {
            sp48 = 100 as libc::c_int as s16
        }
        sp46 =
            ((if sp4A as libc::c_int - (*this).unk_6BE as libc::c_int >=
                     0 as libc::c_int {
                  (sp4A as libc::c_int) - (*this).unk_6BE as libc::c_int
              } else {
                  -(sp4A as libc::c_int - (*this).unk_6BE as libc::c_int)
              }) as libc::c_float * 0.25f32) as s16;
        if (sp46 as libc::c_int) < 50 as libc::c_int {
            sp46 = 50 as libc::c_int as s16
        }
        Math_ScaledStepToS(&mut (*this).actor.focus.rot.x, sp4C, sp48);
        (*this).unk_6BC = (*this).actor.focus.rot.x;
        Math_ScaledStepToS(&mut (*this).unk_6BE, sp4A, sp46);
        if (*this).unk_84F as libc::c_int != 0 as libc::c_int {
            if func_80842DF4(globalCtx, this) == 0 {
                if (*this).skelAnime.curFrame < 2.0f32 {
                    func_80833A20(this, 1 as libc::c_int);
                }
            } else {
                (*this).unk_850 = 1 as libc::c_int as s16;
                (*this).unk_84F = 0 as libc::c_int as s8
            }
        } else if func_80842964(this, globalCtx) == 0 {
            if func_8083C2B0(this, globalCtx) != 0 {
                func_808428D8(this, globalCtx);
            } else {
                (*this).stateFlags1 &=
                    !(0x400000 as libc::c_int) as libc::c_uint;
                func_80832318(this);
                if Player_IsChildWithHylianShield(this) != 0 {
                    func_8083A060(this, globalCtx);
                    LinkAnimation_Change(globalCtx, &mut (*this).skelAnime,
                                         &mut gPlayerAnim_002400, 1.0f32,
                                         Animation_GetLastFrame(&mut gPlayerAnim_002400
                                                                    as
                                                                    *mut LinkAnimationHeader
                                                                    as
                                                                    *mut libc::c_void)
                                             as f32_0, 0.0f32,
                                         ANIMMODE_ONCE as libc::c_int as u8_0,
                                         0.0f32);
                    func_80832F54(globalCtx, this, 4 as libc::c_int);
                } else {
                    if ((*this).itemActionParam as libc::c_int) <
                           0 as libc::c_int {
                        func_8008EC70(this);
                    }
                    func_8083A098(this,
                                  D_80853B24[(*this).modelAnimType as usize],
                                  globalCtx);
                }
                func_8002F7DC(&mut (*this).actor,
                              0x1826 as libc::c_int as u16_0);
                return
            }
        } else { return }
    }
    (*this).stateFlags1 |= 0x400000 as libc::c_int as libc::c_uint;
    Player_SetModelsForHoldingShield(this);
    (*this).unk_6AE =
        ((*this).unk_6AE as libc::c_int | 0xc1 as libc::c_int) as u16_0;
}
#[no_mangle]
pub unsafe extern "C" fn func_808435C4(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut temp: s32 = 0;
    let mut anim: *mut LinkAnimationHeader = 0 as *mut LinkAnimationHeader;
    let mut frames: f32_0 = 0.;
    func_8083721C(this);
    if (*this).unk_84F as libc::c_int == 0 as libc::c_int {
        D_808535E0 = func_80836670(this, globalCtx);
        if Some(func_80834B5C as
                    unsafe extern "C" fn(_: *mut Player,
                                         _: *mut GlobalContext) -> s32) ==
               (*this).func_82C ||
               func_808374A0(globalCtx, this, &mut (*this).skelAnime2, 4.0f32)
                   > 0 as libc::c_int {
            func_80835C58(globalCtx, this,
                          Some(func_80840450 as
                                   unsafe extern "C" fn(_: *mut Player,
                                                        _: *mut GlobalContext)
                                       -> ()), 1 as libc::c_int);
        }
    } else {
        temp = func_808374A0(globalCtx, this, &mut (*this).skelAnime, 4.0f32);
        if temp != 0 as libc::c_int &&
               (temp > 0 as libc::c_int ||
                    LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) !=
                        0) {
            func_80835C58(globalCtx, this,
                          Some(func_80843188 as
                                   unsafe extern "C" fn(_: *mut Player,
                                                        _: *mut GlobalContext)
                                       -> ()), 1 as libc::c_int);
            (*this).stateFlags1 |= 0x400000 as libc::c_int as libc::c_uint;
            Player_SetModelsForHoldingShield(this);
            anim = D_80853AF4[(*this).modelAnimType as usize];
            frames =
                Animation_GetLastFrame(anim as *mut libc::c_void) as f32_0;
            LinkAnimation_Change(globalCtx, &mut (*this).skelAnime, anim,
                                 1.0f32, frames, frames,
                                 ANIMMODE_ONCE as libc::c_int as u8_0,
                                 0.0f32);
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8084370C(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut sp1C: s32 = 0;
    func_8083721C(this);
    sp1C = func_808374A0(globalCtx, this, &mut (*this).skelAnime, 16.0f32);
    if sp1C != 0 as libc::c_int &&
           (LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 ||
                sp1C > 0 as libc::c_int) {
        func_80839F90(this, globalCtx);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8084377C(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    (*this).stateFlags2 |= 0x60 as libc::c_int as libc::c_uint;
    func_808382BC(this);
    if (*this).stateFlags1 & 0x20000000 as libc::c_int as libc::c_uint == 0 &&
           (*this).unk_850 as libc::c_int == 0 as libc::c_int &&
           (*this).unk_8A1 as libc::c_int != 0 as libc::c_int {
        let mut temp: s16 =
            ((*this).actor.shape.rot.y as libc::c_int -
                 (*this).unk_8A2 as libc::c_int) as s16;
        (*this).actor.shape.rot.y = (*this).unk_8A2;
        (*this).currentYaw = (*this).actor.shape.rot.y;
        (*this).linearVelocity = (*this).unk_8A4;
        if (if temp as libc::c_int >= 0 as libc::c_int {
                temp as libc::c_int
            } else { -(temp as libc::c_int) }) > 0x4000 as libc::c_int {
            (*this).actor.shape.rot.y =
                ((*this).unk_8A2 as libc::c_int + 0x8000 as libc::c_int) as
                    s16
        }
        if (*this).actor.velocity.y < 0.0f32 {
            (*this).actor.gravity = 0.0f32;
            (*this).actor.velocity.y = 0.0f32
        }
    }
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 &&
           (*this).actor.bgCheckFlags as libc::c_int & 1 as libc::c_int != 0 {
        if (*this).unk_850 as libc::c_int != 0 as libc::c_int {
            (*this).unk_850 -= 1;
            if (*this).unk_850 as libc::c_int == 0 as libc::c_int {
                func_80853080(this, globalCtx);
            }
        } else if (*this).stateFlags1 &
                      0x20000000 as libc::c_int as libc::c_uint != 0 ||
                      (*this).cylinder.base.acFlags as libc::c_int &
                          (1 as libc::c_int) << 1 as libc::c_int == 0 &&
                          (*this).unk_8A1 as libc::c_int == 0 as libc::c_int {
            if (*this).stateFlags1 & 0x20000000 as libc::c_int as libc::c_uint
                   != 0 {
                (*this).unk_850 += 1
            } else {
                func_80835C58(globalCtx, this,
                              Some(func_80843954 as
                                       unsafe extern "C" fn(_: *mut Player,
                                                            _:
                                                                *mut GlobalContext)
                                           -> ()), 0 as libc::c_int);
                (*this).stateFlags1 |=
                    0x4000000 as libc::c_int as libc::c_uint
            }
            func_80832264(globalCtx, this,
                          if (*this).currentYaw as libc::c_int !=
                                 (*this).actor.shape.rot.y as libc::c_int {
                              &mut gPlayerAnim_002F60
                          } else { &mut gPlayerAnim_002DB8 });
            func_80832698(this, 0x6806 as libc::c_int as u16_0);
        }
    }
    if (*this).actor.bgCheckFlags as libc::c_int & 2 as libc::c_int != 0 {
        func_80832770(this, 0x850 as libc::c_int as u16_0);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80843954(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    (*this).stateFlags2 |= 0x60 as libc::c_int as libc::c_uint;
    func_808382BC(this);
    func_8083721C(this);
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 &&
           (*this).linearVelocity == 0.0f32 {
        if (*this).stateFlags1 & 0x20000000 as libc::c_int as libc::c_uint !=
               0 {
            (*this).unk_850 += 1
        } else {
            func_80835C58(globalCtx, this,
                          Some(func_80843A38 as
                                   unsafe extern "C" fn(_: *mut Player,
                                                        _: *mut GlobalContext)
                                       -> ()), 0 as libc::c_int);
            (*this).stateFlags1 |= 0x4000000 as libc::c_int as libc::c_uint
        }
        func_808322D0(globalCtx, this,
                      if (*this).currentYaw as libc::c_int !=
                             (*this).actor.shape.rot.y as libc::c_int {
                          &mut gPlayerAnim_002F68
                      } else { &mut gPlayerAnim_002DC0 });
        (*this).currentYaw = (*this).actor.shape.rot.y
    };
}
static mut D_808545DC: [struct_80832924; 2] =
    [{
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: 0x4014 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: -(0x401e as libc::c_int) as s16,};
         init
     }];
#[no_mangle]
pub unsafe extern "C" fn func_80843A38(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut sp24: s32 = 0;
    (*this).stateFlags2 |= 0x20 as libc::c_int as libc::c_uint;
    func_808382BC(this);
    if (*this).stateFlags1 & 0x20000000 as libc::c_int as libc::c_uint != 0 {
        LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
    } else {
        sp24 =
            func_808374A0(globalCtx, this, &mut (*this).skelAnime, 16.0f32);
        if sp24 != 0 as libc::c_int &&
               (LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0
                    || sp24 > 0 as libc::c_int) {
            func_80839F90(this, globalCtx);
        }
    }
    func_80832924(this, D_808545DC.as_mut_ptr());
}
static mut D_808545E4: Vec3f =
    { let mut init = Vec3f{x: 0.0f32, y: 0.0f32, z: 5.0f32,}; init };
#[no_mangle]
pub unsafe extern "C" fn func_80843AE8(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    if (*this).unk_850 as libc::c_int != 0 as libc::c_int {
        if (*this).unk_850 as libc::c_int > 0 as libc::c_int {
            (*this).unk_850 -= 1;
            if (*this).unk_850 as libc::c_int == 0 as libc::c_int {
                if (*this).stateFlags1 &
                       0x8000000 as libc::c_int as libc::c_uint != 0 {
                    LinkAnimation_Change(globalCtx, &mut (*this).skelAnime,
                                         &mut gPlayerAnim_003328, 1.0f32,
                                         0.0f32,
                                         Animation_GetLastFrame(&mut gPlayerAnim_003328
                                                                    as
                                                                    *mut LinkAnimationHeader
                                                                    as
                                                                    *mut libc::c_void)
                                             as f32_0,
                                         ANIMMODE_ONCE as libc::c_int as u8_0,
                                         -16.0f32);
                } else {
                    LinkAnimation_Change(globalCtx, &mut (*this).skelAnime,
                                         &mut gPlayerAnim_002878, 1.0f32,
                                         99.0f32,
                                         Animation_GetLastFrame(&mut gPlayerAnim_002878
                                                                    as
                                                                    *mut LinkAnimationHeader
                                                                    as
                                                                    *mut libc::c_void)
                                             as f32_0,
                                         ANIMMODE_ONCE as libc::c_int as u8_0,
                                         0.0f32);
                }
                gSaveContext.healthAccumulator = 0x140 as libc::c_int as s16;
                (*this).unk_850 = -(1 as libc::c_int) as s16
            }
        } else if gSaveContext.healthAccumulator as libc::c_int ==
                      0 as libc::c_int {
            (*this).stateFlags1 &= !(0x80 as libc::c_int) as libc::c_uint;
            if (*this).stateFlags1 & 0x8000000 as libc::c_int as libc::c_uint
                   != 0 {
                func_80838F18(globalCtx, this);
            } else { func_80853080(this, globalCtx); }
            (*this).unk_A87 = 20 as libc::c_int as u8_0;
            func_80837AFC(this, -(20 as libc::c_int));
            func_800F47FC();
        }
    } else if (*this).unk_84F as libc::c_int != 0 as libc::c_int {
        (*this).unk_850 = 60 as libc::c_int as s16;
        Player_SpawnFairy(globalCtx, this, &mut (*this).actor.world.pos,
                          &mut D_808545E4, FAIRY_REVIVE_DEATH as libc::c_int);
        func_8002F7DC(&mut (*this).actor,
                      (0x28a8 as libc::c_int - 0x800 as libc::c_int) as
                          u16_0);
        OnePointCutscene_Init(globalCtx, 9908 as libc::c_int as s16,
                              125 as libc::c_int as s16, &mut (*this).actor,
                              0 as libc::c_int as s16);
    } else if (*globalCtx).gameOverCtx.state as libc::c_int ==
                  GAMEOVER_DEATH_WAIT_GROUND as libc::c_int {
        (*globalCtx).gameOverCtx.state =
            GAMEOVER_DEATH_DELAY_MENU as libc::c_int as u16_0
    };
}
static mut D_808545F0: [struct_80832924; 4] =
    [{
         let mut init =
             struct_80832924{sfxId: 0x850 as libc::c_int as u16_0,
                             field: 0x103c as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: 0x408c as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: 0x40a4 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: -(0x40aa as libc::c_int) as s16,};
         init
     }];
#[no_mangle]
pub unsafe extern "C" fn func_80843CEC(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    if (*this).currentTunic as libc::c_int !=
           PLAYER_TUNIC_GORON as libc::c_int {
        if (*globalCtx).roomCtx.curRoom.unk_02 as libc::c_int ==
               3 as libc::c_int || D_808535E4 == 9 as libc::c_int ||
               func_80838144(D_808535E4) >= 0 as libc::c_int &&
                   SurfaceType_IsWallDamage(&mut (*globalCtx).colCtx,
                                            (*this).actor.floorPoly,
                                            (*this).actor.floorBgId as s32) ==
                       0 {
            func_8083821C(this);
        }
    }
    func_8083721C(this);
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        if (*this).actor.category as libc::c_int ==
               ACTORCAT_PLAYER as libc::c_int {
            func_80843AE8(globalCtx, this);
        }
        return
    }
    if (*this).skelAnime.animation ==
           &mut gPlayerAnim_002878 as *mut LinkAnimationHeader as
               *mut libc::c_void {
        func_80832924(this, D_808545F0.as_mut_ptr());
    } else if (*this).skelAnime.animation ==
                  &mut gPlayerAnim_002F08 as *mut LinkAnimationHeader as
                      *mut libc::c_void {
        if LinkAnimation_OnFrame(&mut (*this).skelAnime, 88.0f32) != 0 {
            func_80832770(this, 0x850 as libc::c_int as u16_0);
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80843E14(mut this: *mut Player,
                                       mut sfxId: u16_0) {
    func_80832698(this, sfxId);
    if !(*this).heldActor.is_null() &&
           (*(*this).heldActor).id as libc::c_int ==
               ACTOR_EN_RU1 as libc::c_int {
        Audio_PlayActorSound2((*this).heldActor,
                              0x6862 as libc::c_int as u16_0);
    };
}
static mut D_80854600: [FallImpactInfo; 2] =
    [{
         let mut init =
             FallImpactInfo{damage: -(8 as libc::c_int) as s8,
                            unk_01: 180 as libc::c_int as u8_0,
                            unk_02: 40 as libc::c_int as u8_0,
                            unk_03: 100 as libc::c_int as u8_0,
                            sfxId: 0x681a as libc::c_int as u16_0,};
         init
     },
     {
         let mut init =
             FallImpactInfo{damage: -(16 as libc::c_int) as s8,
                            unk_01: 255 as libc::c_int as u8_0,
                            unk_02: 140 as libc::c_int as u8_0,
                            unk_03: 150 as libc::c_int as u8_0,
                            sfxId: 0x681a as libc::c_int as u16_0,};
         init
     }];
#[no_mangle]
pub unsafe extern "C" fn func_80843E64(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) -> s32 {
    let mut sp34: s32 = 0;
    if D_808535E4 == 6 as libc::c_int || D_808535E4 == 9 as libc::c_int {
        sp34 = 0 as libc::c_int
    } else { sp34 = (*this).fallDistance as s32 }
    Math_StepToF(&mut (*this).linearVelocity, 0.0f32, 1.0f32);
    (*this).stateFlags1 &= !(0xc0000 as libc::c_int) as libc::c_uint;
    if sp34 >= 400 as libc::c_int {
        let mut impactIndex: s32 = 0;
        let mut impactInfo: *mut FallImpactInfo = 0 as *mut FallImpactInfo;
        if ((*this).fallDistance as libc::c_int) < 800 as libc::c_int {
            impactIndex = 0 as libc::c_int
        } else { impactIndex = 1 as libc::c_int }
        impactInfo =
            &mut *D_80854600.as_mut_ptr().offset(impactIndex as isize) as
                *mut FallImpactInfo;
        if Player_InflictDamage(globalCtx, (*impactInfo).damage as s32) != 0 {
            return -(1 as libc::c_int)
        }
        func_80837AE0(this, 40 as libc::c_int);
        func_808429B4(globalCtx, 32967 as libc::c_int, 2 as libc::c_int,
                      30 as libc::c_int);
        func_8083264C(this, (*impactInfo).unk_01 as s32,
                      (*impactInfo).unk_02 as s32,
                      (*impactInfo).unk_03 as s32, 0 as libc::c_int);
        func_8002F7DC(&mut (*this).actor, 0x83e as libc::c_int as u16_0);
        func_80832698(this, (*impactInfo).sfxId);
        return impactIndex + 1 as libc::c_int
    }
    if sp34 > 200 as libc::c_int {
        sp34 *= 2 as libc::c_int;
        if sp34 > 255 as libc::c_int { sp34 = 255 as libc::c_int }
        func_8083264C(this, sp34 as u8_0 as s32,
                      (sp34 as libc::c_float * 0.1f32) as u8_0 as s32,
                      sp34 as u8_0 as s32, 0 as libc::c_int);
        if D_808535E4 == 6 as libc::c_int {
            func_80832698(this, 0x6804 as libc::c_int as u16_0);
        }
    }
    func_808328A0(this);
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8084409C(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut speedXZ: f32_0,
                                       mut velocityY: f32_0) {
    let mut heldActor: *mut Actor = (*this).heldActor;
    if func_80835644(globalCtx, this, heldActor) == 0 {
        (*heldActor).world.rot.y = (*this).actor.shape.rot.y;
        (*heldActor).speedXZ = speedXZ;
        (*heldActor).velocity.y = velocityY;
        func_80834644(globalCtx, this);
        func_8002F7DC(&mut (*this).actor, 0x83a as libc::c_int as u16_0);
        func_80832698(this, 0x6800 as libc::c_int as u16_0);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8084411C(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut sp4C: f32_0 = 0.;
    let mut sp4A: s16 = 0;
    if gSaveContext.respawn[RESPAWN_MODE_TOP as libc::c_int as usize].data as
           libc::c_int > 40 as libc::c_int {
        (*this).actor.gravity = 0.0f32
    } else if func_8008E9C4(this) != 0 { (*this).actor.gravity = -1.2f32 }
    func_80837268(this, &mut sp4C, &mut sp4A, 0.0f32, globalCtx);
    if (*this).actor.bgCheckFlags as libc::c_int & 1 as libc::c_int == 0 {
        if (*this).stateFlags1 & 0x800 as libc::c_int as libc::c_uint != 0 {
            let mut heldActor: *mut Actor = (*this).heldActor;
            if func_80835644(globalCtx, this, heldActor) == 0 &&
                   (*heldActor).id as libc::c_int ==
                       ACTOR_EN_NIW as libc::c_int &&
                   (*sControlInput).press.button as libc::c_int &
                       (0x8000 as libc::c_int | 0x4000 as libc::c_int |
                            0x2 as libc::c_int | 0x1 as libc::c_int |
                            0x4 as libc::c_int) != 0 as libc::c_int {
                func_8084409C(globalCtx, this,
                              (*this).linearVelocity + 2.0f32,
                              (*this).actor.velocity.y + 2.0f32);
            }
        }
        LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
        if (*this).stateFlags2 & 0x80000 as libc::c_int as libc::c_uint == 0 {
            func_8083DFE0(this, &mut sp4C, &mut sp4A);
        }
        func_80836670(this, globalCtx);
        if (*this).stateFlags2 & 0x80000 as libc::c_int as libc::c_uint != 0
               && (*this).unk_84F as libc::c_int == 2 as libc::c_int ||
               func_8083BBA0(this, globalCtx) == 0 {
            if (*this).actor.velocity.y < 0.0f32 {
                if (*this).unk_850 as libc::c_int >= 0 as libc::c_int {
                    if (*this).actor.bgCheckFlags as libc::c_int &
                           8 as libc::c_int != 0 ||
                           (*this).unk_850 as libc::c_int == 0 as libc::c_int
                           ||
                           (*this).fallDistance as libc::c_int >
                               0 as libc::c_int {
                        if D_80853600 > 800.0f32 ||
                               (*this).stateFlags1 &
                                   4 as libc::c_int as libc::c_uint != 0 {
                            func_80843E14(this,
                                          0x6807 as libc::c_int as u16_0);
                            (*this).stateFlags1 &=
                                !(4 as libc::c_int) as libc::c_uint
                        }
                        LinkAnimation_Change(globalCtx,
                                             &mut (*this).skelAnime,
                                             &mut gPlayerAnim_003020, 1.0f32,
                                             0.0f32, 0.0f32,
                                             ANIMMODE_ONCE as libc::c_int as
                                                 u8_0, 8.0f32);
                        (*this).unk_850 = -(1 as libc::c_int) as s16
                    }
                } else {
                    if (*this).unk_850 as libc::c_int == -(1 as libc::c_int)
                           &&
                           (*this).fallDistance as libc::c_int as
                               libc::c_float > 120.0f32 &&
                           D_80853600 > 280.0f32 {
                        (*this).unk_850 = -(2 as libc::c_int) as s16;
                        func_80843E14(this, 0x6808 as libc::c_int as u16_0);
                    }
                    if (*this).actor.bgCheckFlags as libc::c_int &
                           0x200 as libc::c_int != 0 &&
                           (*this).stateFlags2 &
                               0x80000 as libc::c_int as libc::c_uint == 0 &&
                           (*this).stateFlags1 &
                               0x8000800 as libc::c_int as libc::c_uint == 0
                           && (*this).linearVelocity > 0.0f32 {
                        if (*this).wallHeight >= 150.0f32 &&
                               (*this).unk_84B[(*this).unk_846 as usize] as
                                   libc::c_int == 0 as libc::c_int {
                            func_8083EC18(this, globalCtx, D_808535F0);
                        } else if (*this).unk_88C as libc::c_int >=
                                      2 as libc::c_int &&
                                      (*this).wallHeight < 150.0f32 &&
                                      (*this).actor.world.pos.y -
                                          (*this).actor.floorHeight +
                                          (*this).wallHeight >
                                          70.0f32 *
                                              (*(*this).ageProperties).unk_08
                         {
                            AnimationContext_DisableQueue(globalCtx);
                            if (*this).stateFlags1 &
                                   4 as libc::c_int as libc::c_uint != 0 {
                                func_80832698(this,
                                              0x6819 as libc::c_int as u16_0);
                            } else {
                                func_80832698(this,
                                              0x6803 as libc::c_int as u16_0);
                            }
                            (*this).actor.world.pos.y += (*this).wallHeight;
                            func_8083A5C4(globalCtx, this,
                                          (*this).actor.wallPoly,
                                          (*this).wallDistance,
                                          D_80853CBC[(*this).modelAnimType as
                                                         usize]);
                            (*this).currentYaw =
                                ((*this).currentYaw as libc::c_int +
                                     0x8000 as libc::c_int) as s16;
                            (*this).actor.shape.rot.y = (*this).currentYaw;
                            (*this).stateFlags1 |=
                                0x2000 as libc::c_int as libc::c_uint
                        }
                    }
                }
            }
        }
    } else {
        let mut anim: *mut LinkAnimationHeader =
            D_80853A64[(*this).modelAnimType as usize];
        let mut sp3C: s32 = 0;
        if (*this).stateFlags2 & 0x80000 as libc::c_int as libc::c_uint != 0 {
            if func_8008E9C4(this) != 0 {
                anim =
                    D_80853D4C[(*this).unk_84F as
                                   usize][2 as libc::c_int as usize]
            } else {
                anim =
                    D_80853D4C[(*this).unk_84F as
                                   usize][1 as libc::c_int as usize]
            }
        } else if (*this).skelAnime.animation ==
                      &mut gPlayerAnim_003148 as *mut LinkAnimationHeader as
                          *mut libc::c_void {
            anim = &mut gPlayerAnim_003150
        } else if func_8008E9C4(this) != 0 {
            anim = &mut gPlayerAnim_002538;
            func_80833C3C(this);
        } else if (*this).fallDistance as libc::c_int <= 80 as libc::c_int {
            anim = D_80853A7C[(*this).modelAnimType as usize]
        } else if ((*this).fallDistance as libc::c_int) < 800 as libc::c_int
                      &&
                      (*this).unk_84B[(*this).unk_846 as usize] as libc::c_int
                          == 0 as libc::c_int &&
                      (*this).stateFlags1 &
                          0x800 as libc::c_int as libc::c_uint == 0 {
            func_8083BC04(this, globalCtx);
            return
        }
        sp3C = func_80843E64(globalCtx, this);
        if sp3C > 0 as libc::c_int {
            func_8083A098(this, D_80853A64[(*this).modelAnimType as usize],
                          globalCtx);
            (*this).skelAnime.endFrame = 8.0f32;
            if sp3C == 1 as libc::c_int {
                (*this).unk_850 = 10 as libc::c_int as s16
            } else { (*this).unk_850 = 20 as libc::c_int as s16 }
        } else if sp3C == 0 as libc::c_int {
            func_8083A098(this, anim, globalCtx);
        }
    };
}
static mut D_8085460C: [struct_80832924; 4] =
    [{
         let mut init =
             struct_80832924{sfxId: 0x6800 as libc::c_int as u16_0,
                             field: 0x2001 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0x800 as libc::c_int as u16_0,
                             field: 0x1806 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0x83c as libc::c_int as u16_0,
                             field: 0x806 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: -(0x2812 as libc::c_int) as s16,};
         init
     }];
#[no_mangle]
pub unsafe extern "C" fn func_80844708(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut cylinderOc: *mut Actor = 0 as *mut Actor;
    let mut temp: s32 = 0;
    let mut sp44: s32 = 0;
    let mut wallPolyActor: *mut DynaPolyActor = 0 as *mut DynaPolyActor;
    let mut pad: s32 = 0;
    let mut sp38: f32_0 = 0.;
    let mut sp36: s16 = 0;
    (*this).stateFlags2 |= 0x20 as libc::c_int as libc::c_uint;
    cylinderOc = 0 as *mut Actor;
    sp44 = LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
    if LinkAnimation_OnFrame(&mut (*this).skelAnime, 8.0f32) != 0 {
        func_80837AFC(this, -(10 as libc::c_int));
    }
    if func_80842964(this, globalCtx) == 0 as libc::c_int {
        if (*this).unk_850 as libc::c_int != 0 as libc::c_int {
            Math_StepToF(&mut (*this).linearVelocity, 0.0f32, 2.0f32);
            temp =
                func_808374A0(globalCtx, this, &mut (*this).skelAnime,
                              5.0f32);
            if temp != 0 as libc::c_int &&
                   (temp > 0 as libc::c_int || sp44 != 0) {
                func_8083A060(this, globalCtx);
            }
        } else {
            if (*this).linearVelocity >= 7.0f32 {
                if (*this).actor.bgCheckFlags as libc::c_int &
                       0x200 as libc::c_int != 0 &&
                       D_8085360C < 0x2000 as libc::c_int ||
                       (*this).cylinder.base.ocFlags1 as libc::c_int &
                           (1 as libc::c_int) << 1 as libc::c_int != 0 &&
                           {
                               cylinderOc = (*this).cylinder.base.oc;
                               ((*cylinderOc).id as libc::c_int ==
                                    ACTOR_EN_WOOD02 as libc::c_int) &&
                                   (if ((*this).actor.world.rot.y as
                                            libc::c_int -
                                            (*cylinderOc).yawTowardsPlayer as
                                                libc::c_int) as s16 as
                                           libc::c_int >= 0 as libc::c_int {
                                        ((*this).actor.world.rot.y as
                                             libc::c_int -
                                             (*cylinderOc).yawTowardsPlayer as
                                                 libc::c_int) as s16 as
                                            libc::c_int
                                    } else {
                                        -(((*this).actor.world.rot.y as
                                               libc::c_int -
                                               (*cylinderOc).yawTowardsPlayer
                                                   as libc::c_int) as s16 as
                                              libc::c_int)
                                    }) > 0x6000 as libc::c_int
                           } {
                    if !cylinderOc.is_null() {
                        (*cylinderOc).home.rot.y = 1 as libc::c_int as s16
                    } else if (*this).actor.wallBgId as libc::c_int !=
                                  50 as libc::c_int {
                        wallPolyActor =
                            DynaPoly_GetActor(&mut (*globalCtx).colCtx,
                                              (*this).actor.wallBgId as s32);
                        if !wallPolyActor.is_null() &&
                               (*wallPolyActor).actor.id as libc::c_int ==
                                   ACTOR_OBJ_KIBAKO2 as libc::c_int {
                            (*wallPolyActor).actor.home.rot.z =
                                1 as libc::c_int as s16
                        }
                    }
                    func_80832264(globalCtx, this,
                                  D_80853AAC[(*this).modelAnimType as usize]);
                    (*this).linearVelocity = -(*this).linearVelocity;
                    func_808429B4(globalCtx, 33267 as libc::c_int,
                                  3 as libc::c_int, 12 as libc::c_int);
                    func_8083264C(this, 255 as libc::c_int, 20 as libc::c_int,
                                  150 as libc::c_int, 0 as libc::c_int);
                    func_8002F7DC(&mut (*this).actor,
                                  0x83e as libc::c_int as u16_0);
                    func_80832698(this, 0x6804 as libc::c_int as u16_0);
                    (*this).unk_850 = 1 as libc::c_int as s16;
                    return
                }
            }
            if (*this).skelAnime.curFrame < 15.0f32 ||
                   func_80850224(this, globalCtx) == 0 {
                if (*this).skelAnime.curFrame >= 20.0f32 {
                    func_8083A060(this, globalCtx);
                    return
                }
                func_80837268(this, &mut sp38, &mut sp36, 0.018f32,
                              globalCtx);
                sp38 *= 1.5f32;
                if sp38 < 3.0f32 ||
                       (*this).unk_84B[(*this).unk_846 as usize] as
                           libc::c_int != 0 as libc::c_int {
                    sp38 = 3.0f32
                }
                func_8083DF68(this, sp38, (*this).actor.shape.rot.y);
                if func_8084269C(globalCtx, this) != 0 {
                    func_8002F8F0(&mut (*this).actor,
                                  (0x8c1 as libc::c_int -
                                       0x800 as libc::c_int) as u16_0);
                }
                func_80832924(this, D_8085460C.as_mut_ptr());
            }
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80844A44(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    (*this).stateFlags2 |= 0x20 as libc::c_int as libc::c_uint;
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        func_80832284(globalCtx, this, &mut gPlayerAnim_003160);
    }
    Math_StepToF(&mut (*this).linearVelocity, 0.0f32, 0.05f32);
    if (*this).actor.bgCheckFlags as libc::c_int & 1 as libc::c_int != 0 {
        (*this).actor.colChkInfo.damage = 0x10 as libc::c_int as u8_0;
        func_80837C0C(globalCtx, this, 1 as libc::c_int, 4.0f32, 5.0f32,
                      (*this).actor.shape.rot.y, 20 as libc::c_int);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80844AF4(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut sp2C: f32_0 = 0.;
    let mut sp2A: s16 = 0;
    (*this).stateFlags2 |= 0x20 as libc::c_int as libc::c_uint;
    (*this).actor.gravity = -1.2f32;
    LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
    if func_80842DF4(globalCtx, this) == 0 {
        func_8084285C(this, 6.0f32, 7.0f32, 99.0f32);
        if (*this).actor.bgCheckFlags as libc::c_int & 1 as libc::c_int == 0 {
            func_80837268(this, &mut sp2C, &mut sp2A, 0.0f32, globalCtx);
            func_8083DFE0(this, &mut sp2C, &mut (*this).currentYaw);
            return
        }
        if func_80843E64(globalCtx, this) >= 0 as libc::c_int {
            (*this).swordAnimation =
                ((*this).swordAnimation as libc::c_int + 2 as libc::c_int) as
                    s8;
            func_80837948(globalCtx, this, (*this).swordAnimation as s32);
            (*this).unk_845 = 3 as libc::c_int as u8_0;
            func_808328A0(this);
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80844BE4(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    let mut temp: s32 = 0;
    if func_8083ADD4(globalCtx, this) != 0 {
        (*this).stateFlags2 |= 0x20000 as libc::c_int as libc::c_uint
    } else if !(!((*sControlInput).cur.button as libc::c_int |
                      !(0x4000 as libc::c_int)) == 0 as libc::c_int) {
        if (*this).unk_858 >= 0.85f32 || func_808375D8(this) != 0 {
            temp =
                D_80854384[Player_HoldsTwoHandedWeapon(this) as usize] as s32
        } else {
            temp =
                D_80854380[Player_HoldsTwoHandedWeapon(this) as usize] as s32
        }
        func_80837948(globalCtx, this, temp);
        func_80837AFC(this, -(8 as libc::c_int));
        (*this).stateFlags2 |= 0x20000 as libc::c_int as libc::c_uint;
        if (*this).unk_84B[(*this).unk_846 as usize] as libc::c_int ==
               0 as libc::c_int {
            (*this).stateFlags2 |= 0x40000000 as libc::c_int as libc::c_uint
        }
    } else { return 0 as libc::c_int }
    return 1 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80844CF8(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    func_80835C58(globalCtx, this,
                  Some(func_80845000 as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  1 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn func_80844D30(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    func_80835C58(globalCtx, this,
                  Some(func_80845308 as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  1 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn func_80844D68(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    func_80839FFC(this, globalCtx);
    func_80832318(this);
    func_80832B0C(globalCtx, this,
                  D_80854368[Player_HoldsTwoHandedWeapon(this) as usize]);
    (*this).currentYaw = (*this).actor.shape.rot.y;
}
#[no_mangle]
pub unsafe extern "C" fn func_80844DC8(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    func_80835C58(globalCtx, this,
                  Some(func_80844E68 as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  1 as libc::c_int);
    (*this).unk_868 = 0.0f32;
    func_80832284(globalCtx, this,
                  D_80854360[Player_HoldsTwoHandedWeapon(this) as usize]);
    (*this).unk_850 = 1 as libc::c_int as s16;
}
#[no_mangle]
pub unsafe extern "C" fn func_80844E3C(mut this: *mut Player) {
    Math_StepToF(&mut (*this).unk_858, 1.0f32, 0.02f32);
}
#[no_mangle]
pub unsafe extern "C" fn func_80844E68(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut sp34: f32_0 = 0.;
    let mut sp32: s16 = 0;
    let mut temp: s32 = 0;
    (*this).stateFlags1 |= 0x1000 as libc::c_int as libc::c_uint;
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        func_80832DBC(this);
        func_808355DC(this);
        (*this).stateFlags1 &= !(0x20000 as libc::c_int) as libc::c_uint;
        func_80832284(globalCtx, this,
                      D_80854360[Player_HoldsTwoHandedWeapon(this) as usize]);
        (*this).unk_850 = -(1 as libc::c_int) as s16
    }
    func_8083721C(this);
    if func_80842964(this, globalCtx) == 0 &&
           (*this).unk_850 as libc::c_int != 0 as libc::c_int {
        func_80844E3C(this);
        if ((*this).unk_850 as libc::c_int) < 0 as libc::c_int {
            if (*this).unk_858 >= 0.1f32 {
                (*this).unk_845 = 0 as libc::c_int as u8_0;
                (*this).unk_850 = 1 as libc::c_int as s16
            } else if !(!((*sControlInput).cur.button as libc::c_int |
                              !(0x4000 as libc::c_int)) == 0 as libc::c_int) {
                func_80844D68(this, globalCtx);
            }
        } else if func_80844BE4(this, globalCtx) == 0 {
            func_80837268(this, &mut sp34, &mut sp32, 0.0f32, globalCtx);
            temp = func_80840058(this, &mut sp34, &mut sp32, globalCtx);
            if temp > 0 as libc::c_int {
                func_80844CF8(this, globalCtx);
            } else if temp < 0 as libc::c_int {
                func_80844D30(this, globalCtx);
            }
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80845000(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut temp1: s16 = 0;
    let mut temp2: s32 = 0;
    let mut sp5C: f32_0 = 0.;
    let mut sp58: f32_0 = 0.;
    let mut sp54: f32_0 = 0.;
    let mut sp52: s16 = 0;
    let mut temp4: s32 = 0;
    let mut temp5: s16 = 0;
    let mut sp44: s32 = 0;
    temp1 =
        ((*this).currentYaw as libc::c_int -
             (*this).actor.shape.rot.y as libc::c_int) as s16;
    temp2 =
        if temp1 as libc::c_int >= 0 as libc::c_int {
            temp1 as libc::c_int
        } else { -(temp1 as libc::c_int) };
    sp5C = fabsf((*this).linearVelocity);
    sp58 = sp5C * 1.5f32;
    (*this).stateFlags1 |= 0x1000 as libc::c_int as libc::c_uint;
    if sp58 < 1.5f32 { sp58 = 1.5f32 }
    sp58 =
        (if temp2 < 0x4000 as libc::c_int { -1.0f32 } else { 1.0f32 }) * sp58;
    func_8084029C(this, sp58);
    sp58 =
        if sp5C * 0.5f32 < 0.5f32 {
            0.5f32
        } else if sp5C * 0.5f32 > 1.0f32 { 1.0f32 } else { (sp5C) * 0.5f32 };
    LinkAnimation_BlendToJoint(globalCtx, &mut (*this).skelAnime,
                               D_80854360[Player_HoldsTwoHandedWeapon(this) as
                                              usize], 0.0f32,
                               D_80854370[Player_HoldsTwoHandedWeapon(this) as
                                              usize],
                               (*this).unk_868 * (21.0f32 / 29.0f32), sp58,
                               (*this).blendTable.as_mut_ptr());
    if func_80842964(this, globalCtx) == 0 &&
           func_80844BE4(this, globalCtx) == 0 {
        func_80844E3C(this);
        func_80837268(this, &mut sp54, &mut sp52, 0.0f32, globalCtx);
        temp4 = func_80840058(this, &mut sp54, &mut sp52, globalCtx);
        if temp4 < 0 as libc::c_int { func_80844D30(this, globalCtx); return }
        if temp4 == 0 as libc::c_int {
            sp54 = 0.0f32;
            sp52 = (*this).currentYaw
        }
        temp5 =
            (sp52 as libc::c_int - (*this).currentYaw as libc::c_int) as s16;
        sp44 =
            if temp5 as libc::c_int >= 0 as libc::c_int {
                temp5 as libc::c_int
            } else { -(temp5 as libc::c_int) };
        if sp44 > 0x4000 as libc::c_int {
            if Math_StepToF(&mut (*this).linearVelocity, 0.0f32, 1.0f32) != 0
               {
                (*this).currentYaw = sp52
            }
            return
        }
        Math_AsymStepToF(&mut (*this).linearVelocity, sp54 * 0.2f32, 1.0f32,
                         0.5f32);
        Math_ScaledStepToS(&mut (*this).currentYaw, sp52,
                           (sp44 as libc::c_float * 0.1f32) as s16);
        if sp54 == 0.0f32 && (*this).linearVelocity == 0.0f32 {
            func_80844DC8(this, globalCtx);
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80845308(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut sp5C: f32_0 = 0.;
    let mut sp58: f32_0 = 0.;
    let mut sp54: f32_0 = 0.;
    let mut sp52: s16 = 0;
    let mut temp4: s32 = 0;
    let mut temp5: s16 = 0;
    let mut sp44: s32 = 0;
    sp5C = fabsf((*this).linearVelocity);
    (*this).stateFlags1 |= 0x1000 as libc::c_int as libc::c_uint;
    if sp5C == 0.0f32 {
        sp5C =
            (if (*this).unk_87C as libc::c_int >= 0 as libc::c_int {
                 (*this).unk_87C as libc::c_int
             } else { -((*this).unk_87C as libc::c_int) }) as libc::c_float *
                0.0015f32;
        if sp5C < 400.0f32 { sp5C = 0.0f32 }
        func_8084029C(this,
                      (if (*this).unk_87C as libc::c_int >= 0 as libc::c_int {
                           1 as libc::c_int
                       } else { -(1 as libc::c_int) }) as libc::c_float *
                          sp5C);
    } else {
        sp58 = sp5C * 1.5f32;
        if sp58 < 1.5f32 { sp58 = 1.5f32 }
        func_8084029C(this, sp58);
    }
    sp58 =
        if sp5C * 0.5f32 < 0.5f32 {
            0.5f32
        } else if sp5C * 0.5f32 > 1.0f32 { 1.0f32 } else { (sp5C) * 0.5f32 };
    LinkAnimation_BlendToJoint(globalCtx, &mut (*this).skelAnime,
                               D_80854360[Player_HoldsTwoHandedWeapon(this) as
                                              usize], 0.0f32,
                               D_80854378[Player_HoldsTwoHandedWeapon(this) as
                                              usize],
                               (*this).unk_868 * (21.0f32 / 29.0f32), sp58,
                               (*this).blendTable.as_mut_ptr());
    if func_80842964(this, globalCtx) == 0 &&
           func_80844BE4(this, globalCtx) == 0 {
        func_80844E3C(this);
        func_80837268(this, &mut sp54, &mut sp52, 0.0f32, globalCtx);
        temp4 = func_80840058(this, &mut sp54, &mut sp52, globalCtx);
        if temp4 > 0 as libc::c_int { func_80844CF8(this, globalCtx); return }
        if temp4 == 0 as libc::c_int {
            sp54 = 0.0f32;
            sp52 = (*this).currentYaw
        }
        temp5 =
            (sp52 as libc::c_int - (*this).currentYaw as libc::c_int) as s16;
        sp44 =
            if temp5 as libc::c_int >= 0 as libc::c_int {
                temp5 as libc::c_int
            } else { -(temp5 as libc::c_int) };
        if sp44 > 0x4000 as libc::c_int {
            if Math_StepToF(&mut (*this).linearVelocity, 0.0f32, 1.0f32) != 0
               {
                (*this).currentYaw = sp52
            }
            return
        }
        Math_AsymStepToF(&mut (*this).linearVelocity, sp54 * 0.2f32, 1.0f32,
                         0.5f32);
        Math_ScaledStepToS(&mut (*this).currentYaw, sp52,
                           (sp44 as libc::c_float * 0.1f32) as s16);
        if sp54 == 0.0f32 && (*this).linearVelocity == 0.0f32 &&
               sp5C == 0.0f32 {
            func_80844DC8(this, globalCtx);
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80845668(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut sp3C: s32 = 0;
    let mut temp1: f32_0 = 0.;
    let mut temp2: s32 = 0;
    let mut temp3: f32_0 = 0.;
    (*this).stateFlags2 |= 0x20 as libc::c_int as libc::c_uint;
    sp3C = LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
    if (*this).skelAnime.animation ==
           &mut gPlayerAnim_002D48 as *mut LinkAnimationHeader as
               *mut libc::c_void {
        (*this).linearVelocity = 1.0f32;
        if LinkAnimation_OnFrame(&mut (*this).skelAnime, 8.0f32) != 0 {
            temp1 = (*this).wallHeight;
            if temp1 > (*(*this).ageProperties).unk_0C {
                temp1 = (*(*this).ageProperties).unk_0C
            }
            if (*this).stateFlags1 & 0x8000000 as libc::c_int as libc::c_uint
                   != 0 {
                temp1 *= 0.085f32
            } else { temp1 *= 0.072f32 }
            if !(gSaveContext.linkAge == 0 as libc::c_int) { temp1 += 1.0f32 }
            func_80838940(this, 0 as *mut LinkAnimationHeader, temp1,
                          globalCtx, 0x6814 as libc::c_int as u16_0);
            (*this).unk_850 = -(1 as libc::c_int) as s16;
            return
        }
    } else {
        temp2 =
            func_808374A0(globalCtx, this, &mut (*this).skelAnime, 4.0f32);
        if temp2 == 0 as libc::c_int {
            (*this).stateFlags1 &= !(0x44000 as libc::c_int) as libc::c_uint;
            return
        }
        if sp3C != 0 as libc::c_int || temp2 > 0 as libc::c_int {
            func_8083C0E8(this, globalCtx);
            (*this).stateFlags1 &= !(0x44000 as libc::c_int) as libc::c_uint;
            return
        }
        temp3 = 0.0f32;
        if (*this).skelAnime.animation ==
               &mut gPlayerAnim_0032E8 as *mut LinkAnimationHeader as
                   *mut libc::c_void {
            if LinkAnimation_OnFrame(&mut (*this).skelAnime, 30.0f32) != 0 {
                func_8083D0A8(globalCtx, this, 10.0f32);
            }
            temp3 = 50.0f32
        } else if (*this).skelAnime.animation ==
                      &mut gPlayerAnim_002D40 as *mut LinkAnimationHeader as
                          *mut libc::c_void {
            temp3 = 30.0f32
        } else if (*this).skelAnime.animation ==
                      &mut gPlayerAnim_002D38 as *mut LinkAnimationHeader as
                          *mut libc::c_void {
            temp3 = 16.0f32
        }
        if LinkAnimation_OnFrame(&mut (*this).skelAnime, temp3) != 0 {
            func_808328A0(this);
            func_80832698(this, 0x6804 as libc::c_int as u16_0);
        }
        if (*this).skelAnime.animation ==
               &mut gPlayerAnim_002D38 as *mut LinkAnimationHeader as
                   *mut libc::c_void || (*this).skelAnime.curFrame > 5.0f32 {
            if (*this).unk_850 as libc::c_int == 0 as libc::c_int {
                func_80832854(this);
                (*this).unk_850 = 1 as libc::c_int as s16
            }
            Math_StepToF(&mut (*this).actor.shape.yOffset, 0.0f32, 150.0f32);
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_808458D0(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    (*this).stateFlags2 |= 0x60 as libc::c_int as libc::c_uint;
    LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
    if (*this).stateFlags1 & 0x800 as libc::c_int as libc::c_uint != 0 &&
           !(*this).heldActor.is_null() &&
           (*this).getItemId as libc::c_int == GI_NONE as libc::c_int ||
           func_80836670(this, globalCtx) == 0 {
        (*this).func_A74.expect("non-null function pointer")(globalCtx, this);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80845964(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction,
                                       mut arg3: f32_0, mut arg4: s16,
                                       mut arg5: s32) -> s32 {
    if arg5 != 0 as libc::c_int && (*this).linearVelocity == 0.0f32 {
        return LinkAnimation_Update(globalCtx, &mut (*this).skelAnime)
    }
    if arg5 != 2 as libc::c_int {
        let mut sp34: f32_0 =
            (*gGameInfo).data[(1 as libc::c_int * 6 as libc::c_int *
                                   16 as libc::c_int + 30 as libc::c_int) as
                                  usize] as libc::c_int as libc::c_float *
                0.5f32;
        let mut selfDistX: f32_0 =
            (*arg2).endPos.x as libc::c_float - (*this).actor.world.pos.x;
        let mut selfDistZ: f32_0 =
            (*arg2).endPos.z as libc::c_float - (*this).actor.world.pos.z;
        let mut sp28: f32_0 =
            sqrtf(selfDistX * selfDistX + selfDistZ * selfDistZ) / sp34;
        let mut sp24: s32 =
            (*arg2).endFrame as libc::c_int -
                (*globalCtx).csCtx.frames as libc::c_int + 1 as libc::c_int;
        arg4 = Math_Atan2S(selfDistZ, selfDistX);
        if arg5 == 1 as libc::c_int {
            let mut distX: f32_0 =
                ((*arg2).endPos.x - (*arg2).startPos.x) as f32_0;
            let mut distZ: f32_0 =
                ((*arg2).endPos.z - (*arg2).startPos.z) as f32_0;
            let mut temp: s32 =
                (sqrtf(distX * distX + distZ * distZ) / sp34 /
                     ((*arg2).endFrame as libc::c_int -
                          (*arg2).startFrame as libc::c_int) as libc::c_float
                     / 1.5f32 * 4.0f32) as s32;
            if temp >= sp24 {
                arg4 = (*this).actor.shape.rot.y;
                arg3 = 0.0f32
            } else {
                arg3 =
                    sp28 / (sp24 - temp + 1 as libc::c_int) as libc::c_float
            }
        } else { arg3 = sp28 / sp24 as libc::c_float }
    }
    (*this).stateFlags2 |= 0x20 as libc::c_int as libc::c_uint;
    func_80841EE4(this, globalCtx);
    func_8083DF68(this, arg3, arg4);
    if arg3 == 0.0f32 && (*this).linearVelocity == 0.0f32 {
        func_8083BF50(this, globalCtx);
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80845BA0(mut arg0: *mut GlobalContext,
                                       mut arg1: *mut Player,
                                       mut arg2: *mut f32_0, mut arg3: s32)
 -> s32 {
    let mut dx: f32_0 = (*arg1).unk_450.x - (*arg1).actor.world.pos.x;
    let mut dz: f32_0 = (*arg1).unk_450.z - (*arg1).actor.world.pos.z;
    let mut sp2C: s32 = sqrtf(dx * dx + dz * dz) as s32;
    let mut yaw: s16 =
        Math_Vec3f_Yaw(&mut (*arg1).actor.world.pos, &mut (*arg1).unk_450);
    if sp2C < arg3 { *arg2 = 0.0f32; yaw = (*arg1).actor.shape.rot.y }
    if func_80845964(arg0, arg1, 0 as *mut CsCmdActorAction, *arg2, yaw,
                     2 as libc::c_int) != 0 {
        return 0 as libc::c_int
    }
    return sp2C;
}
#[no_mangle]
pub unsafe extern "C" fn func_80845C68(mut globalCtx: *mut GlobalContext,
                                       mut arg1: s32) -> s32 {
    if arg1 == 0 as libc::c_int {
        Gameplay_SetupRespawnPoint(globalCtx,
                                   RESPAWN_MODE_DOWN as libc::c_int,
                                   0xdff as libc::c_int);
    }
    gSaveContext.respawn[RESPAWN_MODE_DOWN as libc::c_int as usize].data =
        0 as libc::c_int as s8;
    return arg1;
}
#[no_mangle]
pub unsafe extern "C" fn func_80845CA4(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut sp3C: f32_0 = 0.;
    let mut temp: s32 = 0;
    let mut sp34: f32_0 = 0.;
    let mut sp30: s32 = 0;
    let mut pad: s32 = 0;
    if func_8083B040(this, globalCtx) == 0 {
        if (*this).unk_850 as libc::c_int == 0 as libc::c_int {
            LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
            if (if (*this).doorTimer as libc::c_int == 0 as libc::c_int {
                    0 as libc::c_int
                } else {
                    (*this).doorTimer -= 1;
                    (*this).doorTimer as libc::c_int
                }) == 0 as libc::c_int {
                (*this).linearVelocity = 0.1f32;
                (*this).unk_850 = 1 as libc::c_int as s16
            }
        } else if (*this).unk_84F as libc::c_int == 0 as libc::c_int {
            sp3C = 5.0f32 * D_808535E8;
            if func_80845BA0(globalCtx, this, &mut sp3C, -(1 as libc::c_int))
                   < 30 as libc::c_int {
                (*this).unk_84F = 1 as libc::c_int as s8;
                (*this).stateFlags1 |=
                    0x20000000 as libc::c_int as libc::c_uint;
                (*this).unk_450.x = (*this).unk_45C.x;
                (*this).unk_450.z = (*this).unk_45C.z
            }
        } else {
            sp34 = 5.0f32;
            sp30 = 20 as libc::c_int;
            if (*this).stateFlags1 & 1 as libc::c_int as libc::c_uint != 0 {
                sp34 = gSaveContext.entranceSpeed;
                if D_808535F4 != 0 as libc::c_int as libc::c_uint {
                    (*this).unk_450.x =
                        Math_SinS(D_808535FC) * 400.0f32 +
                            (*this).actor.world.pos.x;
                    (*this).unk_450.z =
                        Math_CosS(D_808535FC) * 400.0f32 +
                            (*this).actor.world.pos.z
                }
            } else if ((*this).unk_850 as libc::c_int) < 0 as libc::c_int {
                (*this).unk_850 += 1;
                sp34 = gSaveContext.entranceSpeed;
                sp30 = -(1 as libc::c_int)
            }
            temp = func_80845BA0(globalCtx, this, &mut sp34, sp30);
            if (*this).unk_850 as libc::c_int == 0 as libc::c_int ||
                   temp == 0 as libc::c_int &&
                       (*this).linearVelocity == 0.0f32 &&
                       (*Gameplay_GetCamera(globalCtx,
                                            0 as libc::c_int as s16)).unk_14C
                           as libc::c_int & 0x10 as libc::c_int != 0 {
                func_8005B1A4(Gameplay_GetCamera(globalCtx,
                                                 0 as libc::c_int as s16));
                func_80845C68(globalCtx,
                              gSaveContext.respawn[RESPAWN_MODE_DOWN as
                                                       libc::c_int as
                                                       usize].data as s32);
                if func_8083B644(this, globalCtx) == 0 {
                    func_8083CF5C(this, globalCtx);
                }
            }
        }
    }
    if (*this).stateFlags1 & 0x800 as libc::c_int as libc::c_uint != 0 {
        func_80836670(this, globalCtx);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80845EF8(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut sp2C: s32 = 0;
    (*this).stateFlags2 |= 0x20 as libc::c_int as libc::c_uint;
    sp2C = LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
    func_80836670(this, globalCtx);
    if sp2C != 0 {
        if (*this).unk_850 as libc::c_int == 0 as libc::c_int {
            if (if (*this).doorTimer as libc::c_int == 0 as libc::c_int {
                    0 as libc::c_int
                } else {
                    (*this).doorTimer -= 1;
                    (*this).doorTimer as libc::c_int
                }) == 0 as libc::c_int {
                (*this).unk_850 = 1 as libc::c_int as s16;
                (*this).skelAnime.endFrame =
                    (*this).skelAnime.animLength - 1.0f32
            }
        } else {
            func_8083C0E8(this, globalCtx);
            if (*globalCtx).roomCtx.prevRoom.num as libc::c_int >=
                   0 as libc::c_int {
                func_80097534(globalCtx, &mut (*globalCtx).roomCtx);
            }
            func_8005B1A4(Gameplay_GetCamera(globalCtx,
                                             0 as libc::c_int as s16));
            Gameplay_SetupRespawnPoint(globalCtx, 0 as libc::c_int,
                                       0xdff as libc::c_int);
        }
        return
    }
    if (*this).stateFlags1 & 0x20000000 as libc::c_int as libc::c_uint == 0 &&
           LinkAnimation_OnFrame(&mut (*this).skelAnime, 15.0f32) != 0 {
        (*globalCtx).func_11D54.expect("non-null function pointer")(this,
                                                                    globalCtx);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80846050(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    func_8083721C(this);
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        func_80839F90(this, globalCtx);
        func_80835688(this, globalCtx);
        return
    }
    if LinkAnimation_OnFrame(&mut (*this).skelAnime, 4.0f32) != 0 {
        let mut interactRangeActor: *mut Actor = (*this).interactRangeActor;
        if func_80835644(globalCtx, this, interactRangeActor) == 0 {
            (*this).heldActor = interactRangeActor;
            (*this).actor.child = interactRangeActor;
            (*interactRangeActor).parent = &mut (*this).actor;
            (*interactRangeActor).bgCheckFlags =
                ((*interactRangeActor).bgCheckFlags as libc::c_int &
                     0xff00 as libc::c_int) as u16_0;
            (*this).unk_3BC.y =
                ((*interactRangeActor).shape.rot.y as libc::c_int -
                     (*this).actor.shape.rot.y as libc::c_int) as s16
        }
        return
    }
    Math_ScaledStepToS(&mut (*this).unk_3BC.y, 0 as libc::c_int as s16,
                       4000 as libc::c_int as s16);
}
static mut D_8085461C: [struct_80832924; 2] =
    [{
         let mut init =
             struct_80832924{sfxId: 0x6801 as libc::c_int as u16_0,
                             field: 0x2031 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0x6800 as libc::c_int as u16_0,
                             field: -(0x20e6 as libc::c_int) as s16,};
         init
     }];
#[no_mangle]
pub unsafe extern "C" fn func_80846120(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 &&
           {
               let fresh0 = (*this).unk_850;
               (*this).unk_850 = (*this).unk_850 + 1;
               (fresh0 as libc::c_int) > 20 as libc::c_int
           } {
        if func_8083B040(this, globalCtx) == 0 {
            func_8083A098(this, &mut gPlayerAnim_002FA0, globalCtx);
        }
        return
    }
    if LinkAnimation_OnFrame(&mut (*this).skelAnime, 41.0f32) != 0 {
        let mut heavyBlock: *mut BgHeavyBlock =
            (*this).interactRangeActor as *mut BgHeavyBlock;
        (*this).heldActor = &mut (*heavyBlock).dyna.actor;
        (*this).actor.child = &mut (*heavyBlock).dyna.actor;
        (*heavyBlock).dyna.actor.parent = &mut (*this).actor;
        func_8002DBD0(&mut (*heavyBlock).dyna.actor,
                      &mut (*heavyBlock).unk_164, &mut (*this).leftHandPos);
        return
    }
    if LinkAnimation_OnFrame(&mut (*this).skelAnime, 229.0f32) != 0 {
        let mut heldActor: *mut Actor = (*this).heldActor;
        (*heldActor).speedXZ = Math_SinS((*heldActor).shape.rot.x) * 40.0f32;
        (*heldActor).velocity.y =
            Math_CosS((*heldActor).shape.rot.x) * 40.0f32;
        (*heldActor).gravity = -2.0f32;
        (*heldActor).minVelocityY = -30.0f32;
        func_808323B4(globalCtx, this);
        return
    }
    func_80832924(this, D_8085461C.as_mut_ptr());
}
#[no_mangle]
pub unsafe extern "C" fn func_80846260(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    func_8083721C(this);
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        func_80832284(globalCtx, this, &mut gPlayerAnim_0032C0);
        (*this).unk_850 = 1 as libc::c_int as s16;
        return
    }
    if (*this).unk_850 as libc::c_int == 0 as libc::c_int {
        if LinkAnimation_OnFrame(&mut (*this).skelAnime, 27.0f32) != 0 {
            let mut interactRangeActor: *mut Actor =
                (*this).interactRangeActor;
            (*this).heldActor = interactRangeActor;
            (*this).actor.child = interactRangeActor;
            (*interactRangeActor).parent = &mut (*this).actor;
            return
        }
        if LinkAnimation_OnFrame(&mut (*this).skelAnime, 25.0f32) != 0 {
            func_80832698(this, 0x6801 as libc::c_int as u16_0);
            return
        }
    } else if (*sControlInput).press.button as libc::c_int &
                  (0x8000 as libc::c_int | 0x4000 as libc::c_int |
                       0x2 as libc::c_int | 0x1 as libc::c_int |
                       0x4 as libc::c_int) != 0 as libc::c_int {
        func_80835C58(globalCtx, this,
                      Some(func_80846358 as
                               unsafe extern "C" fn(_: *mut Player,
                                                    _: *mut GlobalContext)
                                   -> ()), 1 as libc::c_int);
        func_80832264(globalCtx, this, &mut gPlayerAnim_0032B8);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80846358(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        func_80839F90(this, globalCtx);
        return
    }
    if LinkAnimation_OnFrame(&mut (*this).skelAnime, 6.0f32) != 0 {
        let mut heldActor: *mut Actor = (*this).heldActor;
        (*heldActor).world.rot.y = (*this).actor.shape.rot.y;
        (*heldActor).speedXZ = 10.0f32;
        (*heldActor).velocity.y = 20.0f32;
        func_80834644(globalCtx, this);
        func_8002F7DC(&mut (*this).actor, 0x83a as libc::c_int as u16_0);
        func_80832698(this, 0x6800 as libc::c_int as u16_0);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80846408(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        func_80832284(globalCtx, this, &mut gPlayerAnim_003070);
        (*this).unk_850 = 15 as libc::c_int as s16;
        return
    }
    if (*this).unk_850 as libc::c_int != 0 as libc::c_int {
        (*this).unk_850 -= 1;
        if (*this).unk_850 as libc::c_int == 0 as libc::c_int {
            func_8083A098(this, &mut gPlayerAnim_003068, globalCtx);
            (*this).stateFlags1 &= !(0x800 as libc::c_int) as libc::c_uint;
            func_80832698(this, 0x6805 as libc::c_int as u16_0);
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_808464B0(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    func_8083721C(this);
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        func_80839F90(this, globalCtx);
        return
    }
    if LinkAnimation_OnFrame(&mut (*this).skelAnime, 4.0f32) != 0 {
        let mut heldActor: *mut Actor = (*this).heldActor;
        if func_80835644(globalCtx, this, heldActor) == 0 {
            (*heldActor).velocity.y = 0.0f32;
            (*heldActor).speedXZ = 0.0f32;
            func_80834644(globalCtx, this);
            if (*heldActor).id as libc::c_int ==
                   ACTOR_EN_BOM_CHU as libc::c_int {
                func_8083B8F4(this, globalCtx);
            }
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80846578(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut sp34: f32_0 = 0.;
    let mut sp32: s16 = 0;
    func_8083721C(this);
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 ||
           (*this).skelAnime.curFrame >= 8.0f32 &&
               func_80837268(this, &mut sp34, &mut sp32, 0.018f32, globalCtx)
                   != 0 {
        func_80839F90(this, globalCtx);
        return
    }
    if LinkAnimation_OnFrame(&mut (*this).skelAnime, 3.0f32) != 0 {
        func_8084409C(globalCtx, this, (*this).linearVelocity + 8.0f32,
                      12.0f32);
    };
}
static mut D_80854624: ColliderCylinderInit =
    {
        let mut init =
            ColliderCylinderInit{base:
                                     {
                                         let mut init =
                                             ColliderInit{colType:
                                                              COLTYPE_HIT5 as
                                                                  libc::c_int
                                                                  as u8_0,
                                                          atFlags:
                                                              0 as libc::c_int
                                                                  as u8_0,
                                                          acFlags:
                                                              ((1 as
                                                                    libc::c_int)
                                                                   <<
                                                                   0 as
                                                                       libc::c_int
                                                                   |
                                                                   (1 as
                                                                        libc::c_int)
                                                                       <<
                                                                       4 as
                                                                           libc::c_int)
                                                                  as u8_0,
                                                          ocFlags1:
                                                              ((1 as
                                                                    libc::c_int)
                                                                   <<
                                                                   0 as
                                                                       libc::c_int
                                                                   |
                                                                   ((1 as
                                                                         libc::c_int)
                                                                        <<
                                                                        3 as
                                                                            libc::c_int
                                                                        |
                                                                        (1 as
                                                                             libc::c_int)
                                                                            <<
                                                                            4
                                                                                as
                                                                                libc::c_int
                                                                        |
                                                                        (1 as
                                                                             libc::c_int)
                                                                            <<
                                                                            5
                                                                                as
                                                                                libc::c_int))
                                                                  as u8_0,
                                                          ocFlags2:
                                                              ((1 as
                                                                    libc::c_int)
                                                                   <<
                                                                   3 as
                                                                       libc::c_int)
                                                                  as u8_0,
                                                          shape:
                                                              COLSHAPE_CYLINDER
                                                                  as
                                                                  libc::c_int
                                                                  as u8_0,};
                                         init
                                     },
                                 info:
                                     {
                                         let mut init =
                                             ColliderInfoInit{elemType:
                                                                  ELEMTYPE_UNK1
                                                                      as
                                                                      libc::c_int
                                                                      as u8_0,
                                                              toucher:
                                                                  {
                                                                      let mut init =
                                                                          ColliderTouch{dmgFlags:
                                                                                            0
                                                                                                as
                                                                                                libc::c_int
                                                                                                as
                                                                                                u32_0,
                                                                                        effect:
                                                                                            0
                                                                                                as
                                                                                                libc::c_int
                                                                                                as
                                                                                                u8_0,
                                                                                        damage:
                                                                                            0
                                                                                                as
                                                                                                libc::c_int
                                                                                                as
                                                                                                u8_0,};
                                                                      init
                                                                  },
                                                              bumper:
                                                                  {
                                                                      let mut init =
                                                                          ColliderBumpInit{dmgFlags:
                                                                                               0xffcfffff
                                                                                                   as
                                                                                                   libc::c_uint,
                                                                                           effect:
                                                                                               0
                                                                                                   as
                                                                                                   libc::c_int
                                                                                                   as
                                                                                                   u8_0,
                                                                                           defense:
                                                                                               0
                                                                                                   as
                                                                                                   libc::c_int
                                                                                                   as
                                                                                                   u8_0,};
                                                                      init
                                                                  },
                                                              toucherFlags:
                                                                  0 as
                                                                      libc::c_int
                                                                      as u8_0,
                                                              bumperFlags:
                                                                  ((1 as
                                                                        libc::c_int)
                                                                       <<
                                                                       0 as
                                                                           libc::c_int)
                                                                      as u8_0,
                                                              ocElemFlags:
                                                                  ((1 as
                                                                        libc::c_int)
                                                                       <<
                                                                       0 as
                                                                           libc::c_int)
                                                                      as
                                                                      u8_0,};
                                         init
                                     },
                                 dim:
                                     {
                                         let mut init =
                                             Cylinder16{radius:
                                                            12 as libc::c_int
                                                                as s16,
                                                        height:
                                                            60 as libc::c_int
                                                                as s16,
                                                        yShift:
                                                            0 as libc::c_int
                                                                as s16,
                                                        pos:
                                                            {
                                                                let mut init =
                                                                    Vec3s{x:
                                                                              0
                                                                                  as
                                                                                  libc::c_int
                                                                                  as
                                                                                  s16,
                                                                          y:
                                                                              0
                                                                                  as
                                                                                  libc::c_int
                                                                                  as
                                                                                  s16,
                                                                          z:
                                                                              0
                                                                                  as
                                                                                  libc::c_int
                                                                                  as
                                                                                  s16,};
                                                                init
                                                            },};
                                         init
                                     },};
        init
    };
static mut D_80854650: ColliderQuadInit =
    {
        let mut init =
            ColliderQuadInit{base:
                                 {
                                     let mut init =
                                         ColliderInit{colType:
                                                          COLTYPE_NONE as
                                                              libc::c_int as
                                                              u8_0,
                                                      atFlags:
                                                          ((1 as libc::c_int)
                                                               <<
                                                               0 as
                                                                   libc::c_int
                                                               |
                                                               (1 as
                                                                    libc::c_int)
                                                                   <<
                                                                   3 as
                                                                       libc::c_int)
                                                              as u8_0,
                                                      acFlags:
                                                          0 as libc::c_int as
                                                              u8_0,
                                                      ocFlags1:
                                                          0 as libc::c_int as
                                                              u8_0,
                                                      ocFlags2:
                                                          ((1 as libc::c_int)
                                                               <<
                                                               3 as
                                                                   libc::c_int)
                                                              as u8_0,
                                                      shape:
                                                          COLSHAPE_QUAD as
                                                              libc::c_int as
                                                              u8_0,};
                                     init
                                 },
                             info:
                                 {
                                     let mut init =
                                         ColliderInfoInit{elemType:
                                                              ELEMTYPE_UNK2 as
                                                                  libc::c_int
                                                                  as u8_0,
                                                          toucher:
                                                              {
                                                                  let mut init =
                                                                      ColliderTouch{dmgFlags:
                                                                                        0x100
                                                                                            as
                                                                                            libc::c_int
                                                                                            as
                                                                                            u32_0,
                                                                                    effect:
                                                                                        0
                                                                                            as
                                                                                            libc::c_int
                                                                                            as
                                                                                            u8_0,
                                                                                    damage:
                                                                                        0x1
                                                                                            as
                                                                                            libc::c_int
                                                                                            as
                                                                                            u8_0,};
                                                                  init
                                                              },
                                                          bumper:
                                                              {
                                                                  let mut init =
                                                                      ColliderBumpInit{dmgFlags:
                                                                                           0xffcfffff
                                                                                               as
                                                                                               libc::c_uint,
                                                                                       effect:
                                                                                           0
                                                                                               as
                                                                                               libc::c_int
                                                                                               as
                                                                                               u8_0,
                                                                                       defense:
                                                                                           0
                                                                                               as
                                                                                               libc::c_int
                                                                                               as
                                                                                               u8_0,};
                                                                  init
                                                              },
                                                          toucherFlags:
                                                              ((1 as
                                                                    libc::c_int)
                                                                   <<
                                                                   0 as
                                                                       libc::c_int
                                                                   |
                                                                   (0 as
                                                                        libc::c_int)
                                                                       <<
                                                                       3 as
                                                                           libc::c_int)
                                                                  as u8_0,
                                                          bumperFlags:
                                                              0 as libc::c_int
                                                                  as u8_0,
                                                          ocElemFlags:
                                                              0 as libc::c_int
                                                                  as u8_0,};
                                     init
                                 },
                             dim:
                                 {
                                     let mut init =
                                         ColliderQuadDimInit{quad:
                                                                 [{
                                                                      let mut init =
                                                                          Vec3f{x:
                                                                                    0.0f32,
                                                                                y:
                                                                                    0.0f32,
                                                                                z:
                                                                                    0.0f32,};
                                                                      init
                                                                  },
                                                                  {
                                                                      let mut init =
                                                                          Vec3f{x:
                                                                                    0.0f32,
                                                                                y:
                                                                                    0.0f32,
                                                                                z:
                                                                                    0.0f32,};
                                                                      init
                                                                  },
                                                                  {
                                                                      let mut init =
                                                                          Vec3f{x:
                                                                                    0.0f32,
                                                                                y:
                                                                                    0.0f32,
                                                                                z:
                                                                                    0.0f32,};
                                                                      init
                                                                  },
                                                                  {
                                                                      let mut init =
                                                                          Vec3f{x:
                                                                                    0.0f32,
                                                                                y:
                                                                                    0.0f32,
                                                                                z:
                                                                                    0.0f32,};
                                                                      init
                                                                  }],};
                                     init
                                 },};
        init
    };
static mut D_808546A0: ColliderQuadInit =
    {
        let mut init =
            ColliderQuadInit{base:
                                 {
                                     let mut init =
                                         ColliderInit{colType:
                                                          COLTYPE_METAL as
                                                              libc::c_int as
                                                              u8_0,
                                                      atFlags:
                                                          ((1 as libc::c_int)
                                                               <<
                                                               0 as
                                                                   libc::c_int
                                                               |
                                                               (1 as
                                                                    libc::c_int)
                                                                   <<
                                                                   3 as
                                                                       libc::c_int)
                                                              as u8_0,
                                                      acFlags:
                                                          ((1 as libc::c_int)
                                                               <<
                                                               0 as
                                                                   libc::c_int
                                                               |
                                                               (1 as
                                                                    libc::c_int)
                                                                   <<
                                                                   2 as
                                                                       libc::c_int
                                                               |
                                                               (1 as
                                                                    libc::c_int)
                                                                   <<
                                                                   4 as
                                                                       libc::c_int)
                                                              as u8_0,
                                                      ocFlags1:
                                                          0 as libc::c_int as
                                                              u8_0,
                                                      ocFlags2:
                                                          ((1 as libc::c_int)
                                                               <<
                                                               3 as
                                                                   libc::c_int)
                                                              as u8_0,
                                                      shape:
                                                          COLSHAPE_QUAD as
                                                              libc::c_int as
                                                              u8_0,};
                                     init
                                 },
                             info:
                                 {
                                     let mut init =
                                         ColliderInfoInit{elemType:
                                                              ELEMTYPE_UNK2 as
                                                                  libc::c_int
                                                                  as u8_0,
                                                          toucher:
                                                              {
                                                                  let mut init =
                                                                      ColliderTouch{dmgFlags:
                                                                                        0x100000
                                                                                            as
                                                                                            libc::c_int
                                                                                            as
                                                                                            u32_0,
                                                                                    effect:
                                                                                        0
                                                                                            as
                                                                                            libc::c_int
                                                                                            as
                                                                                            u8_0,
                                                                                    damage:
                                                                                        0
                                                                                            as
                                                                                            libc::c_int
                                                                                            as
                                                                                            u8_0,};
                                                                  init
                                                              },
                                                          bumper:
                                                              {
                                                                  let mut init =
                                                                      ColliderBumpInit{dmgFlags:
                                                                                           0xdfcfffff
                                                                                               as
                                                                                               libc::c_uint,
                                                                                       effect:
                                                                                           0
                                                                                               as
                                                                                               libc::c_int
                                                                                               as
                                                                                               u8_0,
                                                                                       defense:
                                                                                           0
                                                                                               as
                                                                                               libc::c_int
                                                                                               as
                                                                                               u8_0,};
                                                                  init
                                                              },
                                                          toucherFlags:
                                                              ((1 as
                                                                    libc::c_int)
                                                                   <<
                                                                   0 as
                                                                       libc::c_int
                                                                   |
                                                                   (0 as
                                                                        libc::c_int)
                                                                       <<
                                                                       3 as
                                                                           libc::c_int)
                                                                  as u8_0,
                                                          bumperFlags:
                                                              ((1 as
                                                                    libc::c_int)
                                                                   <<
                                                                   0 as
                                                                       libc::c_int)
                                                                  as u8_0,
                                                          ocElemFlags:
                                                              0 as libc::c_int
                                                                  as u8_0,};
                                     init
                                 },
                             dim:
                                 {
                                     let mut init =
                                         ColliderQuadDimInit{quad:
                                                                 [{
                                                                      let mut init =
                                                                          Vec3f{x:
                                                                                    0.0f32,
                                                                                y:
                                                                                    0.0f32,
                                                                                z:
                                                                                    0.0f32,};
                                                                      init
                                                                  },
                                                                  {
                                                                      let mut init =
                                                                          Vec3f{x:
                                                                                    0.0f32,
                                                                                y:
                                                                                    0.0f32,
                                                                                z:
                                                                                    0.0f32,};
                                                                      init
                                                                  },
                                                                  {
                                                                      let mut init =
                                                                          Vec3f{x:
                                                                                    0.0f32,
                                                                                y:
                                                                                    0.0f32,
                                                                                z:
                                                                                    0.0f32,};
                                                                      init
                                                                  },
                                                                  {
                                                                      let mut init =
                                                                          Vec3f{x:
                                                                                    0.0f32,
                                                                                y:
                                                                                    0.0f32,
                                                                                z:
                                                                                    0.0f32,};
                                                                      init
                                                                  }],};
                                     init
                                 },};
        init
    };
#[no_mangle]
pub unsafe extern "C" fn func_8084663C(mut thisx: *mut Actor,
                                       mut globalCtx: *mut GlobalContext) {
}
#[no_mangle]
pub unsafe extern "C" fn func_80846648(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    (*this).actor.update =
        Some(func_8084663C as
                 unsafe extern "C" fn(_: *mut Actor, _: *mut GlobalContext)
                     -> ());
    (*this).actor.draw = None;
}
#[no_mangle]
pub unsafe extern "C" fn func_80846660(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    func_80835C58(globalCtx, this,
                  Some(func_8084F710 as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  0 as libc::c_int);
    if (*globalCtx).sceneNum as libc::c_int == SCENE_SPOT06 as libc::c_int &&
           gSaveContext.sceneSetupIndex >= 4 as libc::c_int {
        (*this).unk_84F = 1 as libc::c_int as s8
    }
    (*this).stateFlags1 |= 0x20000000 as libc::c_int as libc::c_uint;
    LinkAnimation_Change(globalCtx, &mut (*this).skelAnime,
                         &mut gPlayerAnim_003298, 2.0f32 / 3.0f32, 0.0f32,
                         24.0f32, ANIMMODE_ONCE as libc::c_int as u8_0,
                         0.0f32);
    (*this).actor.world.pos.y += 800.0f32;
}
static mut D_808546F0: [u8_0; 2] =
    [ITEM_SWORD_MASTER as libc::c_int as u8_0,
     ITEM_SWORD_KOKIRI as libc::c_int as u8_0];
#[no_mangle]
pub unsafe extern "C" fn func_80846720(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player, mut arg2: s32) {
    let mut item: s32 = D_808546F0[gSaveContext.linkAge as usize] as s32;
    let mut actionParam: s32 = sItemActionParams[item as usize] as s32;
    func_80835EFC(this);
    func_808323B4(globalCtx, this);
    (*this).heldItemId = item as u8_0;
    (*this).nextModelGroup =
        Player_ActionToModelGroup(this, actionParam) as u8_0;
    func_8083399C(globalCtx, this, actionParam as s8);
    func_80834644(globalCtx, this);
    if arg2 != 0 as libc::c_int {
        func_8002F7DC(&mut (*this).actor, 0x1803 as libc::c_int as u16_0);
    };
}
static mut D_808546F4: Vec3f =
    { let mut init = Vec3f{x: -1.0f32, y: 69.0f32, z: 20.0f32,}; init };
#[no_mangle]
pub unsafe extern "C" fn func_808467D4(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    func_80835C58(globalCtx, this,
                  Some(func_8084E9AC as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  0 as libc::c_int);
    (*this).stateFlags1 |= 0x20000000 as libc::c_int as libc::c_uint;
    Math_Vec3f_Copy(&mut (*this).actor.world.pos, &mut D_808546F4);
    (*this).actor.shape.rot.y = -(0x8000 as libc::c_int) as s16;
    (*this).currentYaw = (*this).actor.shape.rot.y;
    LinkAnimation_Change(globalCtx, &mut (*this).skelAnime,
                         (*(*this).ageProperties).unk_A0, 2.0f32 / 3.0f32,
                         0.0f32, 0.0f32, ANIMMODE_ONCE as libc::c_int as u8_0,
                         0.0f32);
    func_80832F54(globalCtx, this, 0x28f as libc::c_int);
    if gSaveContext.linkAge == 0 as libc::c_int {
        func_80846720(globalCtx, this, 0 as libc::c_int);
    }
    (*this).unk_850 = 20 as libc::c_int as s16;
}
#[no_mangle]
pub unsafe extern "C" fn func_808468A8(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    func_80835C58(globalCtx, this,
                  Some(func_8084F9A0 as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  0 as libc::c_int);
    func_80832F54(globalCtx, this, 0x9b as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn func_808468E8(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    func_808389E8(this, &mut gPlayerAnim_002FE0, 12.0f32, globalCtx);
    func_80835C58(globalCtx, this,
                  Some(func_8084F9C0 as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  0 as libc::c_int);
    (*this).stateFlags1 |= 0x20000000 as libc::c_int as libc::c_uint;
    (*this).fallStartHeight = (*this).actor.world.pos.y as s16;
    OnePointCutscene_Init(globalCtx, 5110 as libc::c_int as s16,
                          40 as libc::c_int as s16, &mut (*this).actor,
                          0 as libc::c_int as s16);
}
#[no_mangle]
pub unsafe extern "C" fn func_80846978(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    func_80837C0C(globalCtx, this, 1 as libc::c_int, 2.0f32, 2.0f32,
                  ((*this).actor.shape.rot.y as libc::c_int +
                       0x8000 as libc::c_int) as s16, 0 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn func_808469BC(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    func_80835C58(globalCtx, this,
                  Some(func_8084F698 as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  0 as libc::c_int);
    (*this).actor.draw = None;
    (*this).stateFlags1 |= 0x20000000 as libc::c_int as libc::c_uint;
}
static mut D_80854700: [s16; 3] =
    [ACTOR_MAGIC_WIND as libc::c_int as s16,
     ACTOR_MAGIC_DARK as libc::c_int as s16,
     ACTOR_MAGIC_FIRE as libc::c_int as s16];
#[no_mangle]
pub unsafe extern "C" fn func_80846A00(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player, mut arg2: s32)
 -> *mut Actor {
    return Actor_Spawn(&mut (*globalCtx).actorCtx, globalCtx,
                       D_80854700[arg2 as usize], (*this).actor.world.pos.x,
                       (*this).actor.world.pos.y, (*this).actor.world.pos.z,
                       0 as libc::c_int as s16, 0 as libc::c_int as s16,
                       0 as libc::c_int as s16, 0 as libc::c_int as s16);
}
#[no_mangle]
pub unsafe extern "C" fn func_80846A68(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    (*this).actor.draw = None;
    func_80835C58(globalCtx, this,
                  Some(func_8085076C as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  0 as libc::c_int);
    (*this).stateFlags1 |= 0x20000000 as libc::c_int as libc::c_uint;
}
// Initialized in run_static_initializers
static mut D_80854708: [InitChainEntry; 1] =
    [InitChainEntry{cont_type_0_offset_value: [0; 4],}; 1];
static mut D_8085470C: EffectBlureInit2 =
    {
        let mut init =
            EffectBlureInit2{calcMode: 0 as libc::c_int,
                             flags: 8 as libc::c_int as u16_0,
                             addAngleChange: 0 as libc::c_int as s16,
                             p1StartColor:
                                 [255 as libc::c_int as u8_0,
                                  255 as libc::c_int as u8_0,
                                  255 as libc::c_int as u8_0,
                                  255 as libc::c_int as u8_0],
                             p2StartColor:
                                 [255 as libc::c_int as u8_0,
                                  255 as libc::c_int as u8_0,
                                  255 as libc::c_int as u8_0,
                                  64 as libc::c_int as u8_0],
                             p1EndColor:
                                 [255 as libc::c_int as u8_0,
                                  255 as libc::c_int as u8_0,
                                  255 as libc::c_int as u8_0,
                                  0 as libc::c_int as u8_0],
                             p2EndColor:
                                 [255 as libc::c_int as u8_0,
                                  255 as libc::c_int as u8_0,
                                  255 as libc::c_int as u8_0,
                                  0 as libc::c_int as u8_0],
                             elemDuration: 4 as libc::c_int as u8_0,
                             unkFlag: 0 as libc::c_int as u8_0,
                             drawMode: 2 as libc::c_int as u8_0,
                             mode4Param: 0 as libc::c_int as u8_0,
                             altPrimColor:
                                 {
                                     let mut init =
                                         Color_RGBA8{r:
                                                         0 as libc::c_int as
                                                             u8_0,
                                                     g:
                                                         0 as libc::c_int as
                                                             u8_0,
                                                     b:
                                                         0 as libc::c_int as
                                                             u8_0,
                                                     a:
                                                         0 as libc::c_int as
                                                             u8_0,};
                                     init
                                 },
                             altEnvColor:
                                 {
                                     let mut init =
                                         Color_RGBA8{r:
                                                         0 as libc::c_int as
                                                             u8_0,
                                                     g:
                                                         0 as libc::c_int as
                                                             u8_0,
                                                     b:
                                                         0 as libc::c_int as
                                                             u8_0,
                                                     a:
                                                         0 as libc::c_int as
                                                             u8_0,};
                                     init
                                 },};
        init
    };
static mut D_80854730: Vec3s =
    {
        let mut init =
            Vec3s{x: -(57 as libc::c_int) as s16,
                  y: 3377 as libc::c_int as s16,
                  z: 0 as libc::c_int as s16,};
        init
    };
#[no_mangle]
pub unsafe extern "C" fn Player_InitCommon(mut this: *mut Player,
                                           mut globalCtx: *mut GlobalContext,
                                           mut skelHeader:
                                               *mut FlexSkeletonHeader) {
    (*this).ageProperties =
        &mut *sAgeProperties.as_mut_ptr().offset(gSaveContext.linkAge as
                                                     isize) as
            *mut PlayerAgeProperties;
    Actor_ProcessInitChain(&mut (*this).actor, D_80854708.as_mut_ptr());
    (*this).swordEffectIndex =
        3 as libc::c_int + 25 as libc::c_int + 3 as libc::c_int;
    (*this).currentYaw = (*this).actor.world.rot.y;
    func_80834644(globalCtx, this);
    SkelAnime_InitLink(globalCtx, &mut (*this).skelAnime, skelHeader,
                       D_80853914[(*this).modelAnimType as usize],
                       9 as libc::c_int, (*this).jointTable.as_mut_ptr(),
                       (*this).morphTable.as_mut_ptr(),
                       PLAYER_LIMB_MAX as libc::c_int);
    (*this).skelAnime.baseTransl = D_80854730;
    SkelAnime_InitLink(globalCtx, &mut (*this).skelAnime2, skelHeader,
                       func_80833338(this), 9 as libc::c_int,
                       (*this).jointTable2.as_mut_ptr(),
                       (*this).morphTable2.as_mut_ptr(),
                       PLAYER_LIMB_MAX as libc::c_int);
    (*this).skelAnime2.baseTransl = D_80854730;
    Effect_Add(globalCtx, &mut (*this).swordEffectIndex,
               EFFECT_BLURE2 as libc::c_int, 0 as libc::c_int as u8_0,
               0 as libc::c_int as u8_0,
               &mut D_8085470C as *mut EffectBlureInit2 as *mut libc::c_void);
    ActorShape_Init(&mut (*this).actor.shape, 0.0f32,
                    Some(ActorShadow_DrawFeet as
                             unsafe extern "C" fn(_: *mut Actor,
                                                  _: *mut Lights,
                                                  _: *mut GlobalContext)
                                 -> ()), (*(*this).ageProperties).unk_04);
    (*this).unk_46C = -(1 as libc::c_int) as s16;
    Collider_InitCylinder(globalCtx, &mut (*this).cylinder);
    Collider_SetCylinder(globalCtx, &mut (*this).cylinder, &mut (*this).actor,
                         &mut D_80854624);
    Collider_InitQuad(globalCtx,
                      &mut *(*this).swordQuads.as_mut_ptr().offset(0 as
                                                                       libc::c_int
                                                                       as
                                                                       isize));
    Collider_SetQuad(globalCtx,
                     &mut *(*this).swordQuads.as_mut_ptr().offset(0 as
                                                                      libc::c_int
                                                                      as
                                                                      isize),
                     &mut (*this).actor, &mut D_80854650);
    Collider_InitQuad(globalCtx,
                      &mut *(*this).swordQuads.as_mut_ptr().offset(1 as
                                                                       libc::c_int
                                                                       as
                                                                       isize));
    Collider_SetQuad(globalCtx,
                     &mut *(*this).swordQuads.as_mut_ptr().offset(1 as
                                                                      libc::c_int
                                                                      as
                                                                      isize),
                     &mut (*this).actor, &mut D_80854650);
    Collider_InitQuad(globalCtx, &mut (*this).shieldQuad);
    Collider_SetQuad(globalCtx, &mut (*this).shieldQuad, &mut (*this).actor,
                     &mut D_808546A0);
}
static mut D_80854738:
       [Option<unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                   -> ()>; 16] =
    unsafe {
        [Some(func_80846648 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_808467D4 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80846660 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_808468A8 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_808468E8 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_808469BC as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80846A68 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_80846978 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_8083CA54 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_8083CA54 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_8083CA54 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_8083CA54 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_8083CA54 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_8083CA20 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_8083CA54 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ()),
         Some(func_8083CA9C as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                      -> ())]
    };
static mut D_80854778: Vec3f =
    { let mut init = Vec3f{x: 0.0f32, y: 50.0f32, z: 0.0f32,}; init };
#[no_mangle]
pub unsafe extern "C" fn Player_Init(mut thisx: *mut Actor,
                                     mut globalCtx2: *mut GlobalContext) {
    let mut this: *mut Player = thisx as *mut Player;
    let mut globalCtx: *mut GlobalContext = globalCtx2;
    let mut scene: *mut SceneTableEntry = (*globalCtx).loadedScene;
    let mut titleFileSize: u32_0 = 0;
    let mut initMode: s32 = 0;
    let mut sp50: s32 = 0;
    let mut sp4C: s32 = 0;
    (*globalCtx).bombchuBowlingStatus = 0 as libc::c_int as s8;
    (*globalCtx).shootingGalleryStatus = (*globalCtx).bombchuBowlingStatus;
    (*globalCtx).playerInit =
        Some(Player_InitCommon as
                 unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext,
                                      _: *mut FlexSkeletonHeader) -> ());
    (*globalCtx).playerUpdate =
        Some(Player_UpdateCommon as
                 unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext,
                                      _: *mut Input) -> ());
    (*globalCtx).isPlayerDroppingFish =
        Some(Player_IsDroppingFish as
                 unsafe extern "C" fn(_: *mut GlobalContext) -> s32);
    (*globalCtx).startPlayerFishing =
        Some(Player_StartFishing as
                 unsafe extern "C" fn(_: *mut GlobalContext) -> s32);
    (*globalCtx).grabPlayer =
        Some(func_80852F38 as
                 unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player)
                     -> s32);
    (*globalCtx).startPlayerCutscene =
        Some(func_80852FFC as
                 unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Actor,
                                      _: s32) -> s32);
    (*globalCtx).func_11D54 =
        Some(func_80853080 as
                 unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                     -> ());
    (*globalCtx).damagePlayer =
        Some(Player_InflictDamage as
                 unsafe extern "C" fn(_: *mut GlobalContext, _: s32) -> s32);
    (*globalCtx).talkWithPlayer =
        Some(func_80853148 as
                 unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Actor)
                     -> ());
    (*thisx).room = -(1 as libc::c_int) as s8;
    (*this).ageProperties =
        &mut *sAgeProperties.as_mut_ptr().offset(gSaveContext.linkAge as
                                                     isize) as
            *mut PlayerAgeProperties;
    (*this).heldItemActionParam = -(1 as libc::c_int) as s8;
    (*this).itemActionParam = (*this).heldItemActionParam;
    (*this).heldItemId = ITEM_NONE as libc::c_int as u8_0;
    func_80835F44(globalCtx, this, ITEM_NONE as libc::c_int);
    Player_SetEquipmentData(globalCtx, this);
    (*this).prevBoots = (*this).currentBoots;
    Player_InitCommon(this, globalCtx,
                      gPlayerSkelHeaders[gSaveContext.linkAge as usize]);
    (*this).giObjectSegment =
        ((ZeldaArena_MallocDebug(0x3008 as libc::c_int as u32_0,
                                 b"../z_player.c\x00" as *const u8 as
                                     *const libc::c_char,
                                 17175 as libc::c_int) as
              u32_0).wrapping_add(8 as libc::c_int as libc::c_uint) &
             !(0xf as libc::c_int) as libc::c_uint) as *mut libc::c_void;
    sp50 = gSaveContext.respawnFlag;
    if sp50 != 0 as libc::c_int {
        if sp50 == -(3 as libc::c_int) {
            (*thisx).params =
                gSaveContext.respawn[RESPAWN_MODE_RETURN as libc::c_int as
                                         usize].playerParams
        } else {
            if sp50 == 1 as libc::c_int || sp50 == -(1 as libc::c_int) {
                (*this).unk_A86 = -(2 as libc::c_int) as s8
            }
            if sp50 < 0 as libc::c_int {
                sp4C = 0 as libc::c_int
            } else {
                sp4C = sp50 - 1 as libc::c_int;
                Math_Vec3f_Copy(&mut (*thisx).world.pos,
                                &mut (*gSaveContext.respawn.as_mut_ptr().offset((sp50
                                                                                     -
                                                                                     1
                                                                                         as
                                                                                         libc::c_int)
                                                                                    as
                                                                                    isize)).pos);
                Math_Vec3f_Copy(&mut (*thisx).home.pos,
                                &mut (*thisx).world.pos);
                Math_Vec3f_Copy(&mut (*thisx).prevPos,
                                &mut (*thisx).world.pos);
                (*this).fallStartHeight = (*thisx).world.pos.y as s16;
                (*thisx).shape.rot.y =
                    gSaveContext.respawn[sp4C as usize].yaw;
                (*this).currentYaw = (*thisx).shape.rot.y;
                (*thisx).params =
                    gSaveContext.respawn[sp4C as usize].playerParams
            }
            (*globalCtx).actorCtx.flags.tempSwch =
                gSaveContext.respawn[sp4C as usize].tempSwchFlags &
                    0xffffff as libc::c_int as libc::c_uint;
            (*globalCtx).actorCtx.flags.tempCollect =
                gSaveContext.respawn[sp4C as usize].tempCollectFlags
        }
    }
    if sp50 == 0 as libc::c_int || sp50 < -(1 as libc::c_int) {
        titleFileSize =
            (*scene).titleFile.vromEnd.wrapping_sub((*scene).titleFile.vromStart);
        if titleFileSize != 0 as libc::c_int as libc::c_uint &&
               gSaveContext.showTitleCard as libc::c_int != 0 {
            if gSaveContext.sceneSetupIndex < 4 as libc::c_int &&
                   gEntranceTable[(gSaveContext.entranceIndex +
                                       gSaveContext.sceneSetupIndex) as
                                      usize].field as libc::c_int &
                       0x4000 as libc::c_int != 0 &&
                   ((*globalCtx).sceneNum as libc::c_int !=
                        SCENE_DDAN as libc::c_int ||
                        gSaveContext.eventChkInf[11 as libc::c_int as usize]
                            as libc::c_int & 1 as libc::c_int != 0) &&
                   ((*globalCtx).sceneNum as libc::c_int !=
                        SCENE_NIGHT_SHOP as libc::c_int ||
                        gSaveContext.eventChkInf[2 as libc::c_int as usize] as
                            libc::c_int & 0x20 as libc::c_int != 0) {
                TitleCard_InitPlaceName(globalCtx,
                                        &mut (*globalCtx).actorCtx.titleCtx,
                                        (*this).giObjectSegment,
                                        160 as libc::c_int,
                                        120 as libc::c_int,
                                        144 as libc::c_int, 24 as libc::c_int,
                                        20 as libc::c_int);
            }
        }
        gSaveContext.showTitleCard = 1 as libc::c_int as u8_0
    }
    if func_80845C68(globalCtx,
                     (if sp50 == 2 as libc::c_int {
                          1 as libc::c_int
                      } else { 0 as libc::c_int })) == 0 as libc::c_int {
        gSaveContext.respawn[RESPAWN_MODE_DOWN as libc::c_int as
                                 usize].playerParams =
            ((*thisx).params as libc::c_int & 0xff as libc::c_int |
                 0xd00 as libc::c_int) as s16
    }
    gSaveContext.respawn[RESPAWN_MODE_DOWN as libc::c_int as usize].data =
        1 as libc::c_int as s8;
    if (*globalCtx).sceneNum as libc::c_int <=
           SCENE_GANONTIKA_SONOGO as libc::c_int {
        gSaveContext.infTable[26 as libc::c_int as usize] =
            (gSaveContext.infTable[26 as libc::c_int as usize] as libc::c_uint
                 | gBitFlags[(*globalCtx).sceneNum as usize]) as u16_0
    }
    initMode =
        ((*thisx).params as libc::c_int & 0xf00 as libc::c_int) >>
            8 as libc::c_int;
    if initMode == 5 as libc::c_int || initMode == 6 as libc::c_int {
        if gSaveContext.cutsceneIndex >= 0xfff0 as libc::c_int {
            initMode = 13 as libc::c_int
        }
    }
    D_80854738[initMode as
                   usize].expect("non-null function pointer")(globalCtx,
                                                              this);
    if initMode != 0 as libc::c_int {
        if gSaveContext.gameMode == 0 as libc::c_int ||
               gSaveContext.gameMode == 3 as libc::c_int {
            (*this).naviActor =
                Player_SpawnFairy(globalCtx, this, &mut (*thisx).world.pos,
                                  &mut D_80854778, FAIRY_NAVI as libc::c_int);
            if gSaveContext.dogParams as libc::c_int != 0 as libc::c_int {
                gSaveContext.dogParams =
                    (gSaveContext.dogParams as libc::c_int |
                         0x8000 as libc::c_int) as s16
            }
        }
    }
    if gSaveContext.nayrusLoveTimer as libc::c_int != 0 as libc::c_int {
        gSaveContext.unk_13F0 = 3 as libc::c_int as s16;
        func_80846A00(globalCtx, this, 1 as libc::c_int);
        (*this).stateFlags3 =
            ((*this).stateFlags3 as libc::c_int & !(0x40 as libc::c_int)) as
                u8_0
    }
    if gSaveContext.entranceSound as libc::c_int != 0 as libc::c_int {
        Audio_PlayActorSound2(&mut (*this).actor, gSaveContext.entranceSound);
        gSaveContext.entranceSound = 0 as libc::c_int as u16_0
    }
    Map_SavePlayerInitialInfo(globalCtx);
    (*gGameInfo).data[(5 as libc::c_int * 6 as libc::c_int * 16 as libc::c_int
                           + 64 as libc::c_int) as usize] =
        0 as libc::c_int as s16;
}
#[no_mangle]
pub unsafe extern "C" fn func_808471F4(mut pValue: *mut s16) {
    let mut step: s16 = 0;
    step =
        ((if *pValue as libc::c_int >= 0 as libc::c_int {
              *pValue as libc::c_int
          } else { -(*pValue as libc::c_int) }) as libc::c_float * 100.0f32 /
             1000.0f32) as s16;
    step =
        if (step as libc::c_int) < 400 as libc::c_int {
            400 as libc::c_int
        } else if step as libc::c_int > 4000 as libc::c_int {
            4000 as libc::c_int
        } else { step as libc::c_int } as s16;
    Math_ScaledStepToS(pValue, 0 as libc::c_int as s16, step);
}
#[no_mangle]
pub unsafe extern "C" fn func_80847298(mut this: *mut Player) {
    let mut sp26: s16 = 0;
    if (*this).unk_6AE as libc::c_int & 2 as libc::c_int == 0 {
        sp26 =
            ((*this).actor.focus.rot.y as libc::c_int -
                 (*this).actor.shape.rot.y as libc::c_int) as s16;
        func_808471F4(&mut sp26);
        (*this).actor.focus.rot.y =
            ((*this).actor.shape.rot.y as libc::c_int + sp26 as libc::c_int)
                as s16
    }
    if (*this).unk_6AE as libc::c_int & 1 as libc::c_int == 0 {
        func_808471F4(&mut (*this).actor.focus.rot.x);
    }
    if (*this).unk_6AE as libc::c_int & 8 as libc::c_int == 0 {
        func_808471F4(&mut (*this).unk_6B6);
    }
    if (*this).unk_6AE as libc::c_int & 0x40 as libc::c_int == 0 {
        func_808471F4(&mut (*this).unk_6BC);
    }
    if (*this).unk_6AE as libc::c_int & 4 as libc::c_int == 0 {
        func_808471F4(&mut (*this).actor.focus.rot.z);
    }
    if (*this).unk_6AE as libc::c_int & 0x10 as libc::c_int == 0 {
        func_808471F4(&mut (*this).unk_6B8);
    }
    if (*this).unk_6AE as libc::c_int & 0x20 as libc::c_int == 0 {
        func_808471F4(&mut (*this).unk_6BA);
    }
    if (*this).unk_6AE as libc::c_int & 0x80 as libc::c_int == 0 {
        if (*this).unk_6B0 as libc::c_int != 0 as libc::c_int {
            func_808471F4(&mut (*this).unk_6B0);
        } else { func_808471F4(&mut (*this).unk_6BE); }
    }
    if (*this).unk_6AE as libc::c_int & 0x100 as libc::c_int == 0 {
        func_808471F4(&mut (*this).unk_6C0);
    }
    (*this).unk_6AE = 0 as libc::c_int as u16_0;
}
static mut D_80854784: [f32_0; 3] = [120.0f32, 240.0f32, 360.0f32];
static mut sDiveDoActions: [u8_0; 8] =
    [DO_ACTION_1 as libc::c_int as u8_0, DO_ACTION_2 as libc::c_int as u8_0,
     DO_ACTION_3 as libc::c_int as u8_0, DO_ACTION_4 as libc::c_int as u8_0,
     DO_ACTION_5 as libc::c_int as u8_0, DO_ACTION_6 as libc::c_int as u8_0,
     DO_ACTION_7 as libc::c_int as u8_0, DO_ACTION_8 as libc::c_int as u8_0];
#[no_mangle]
pub unsafe extern "C" fn func_808473D4(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    if Message_GetState(&mut (*globalCtx).msgCtx) as libc::c_int ==
           TEXT_STATE_NONE as libc::c_int &&
           (*this).actor.category as libc::c_int ==
               ACTORCAT_PLAYER as libc::c_int {
        let mut heldActor: *mut Actor = (*this).heldActor;
        let mut interactRangeActor: *mut Actor = (*this).interactRangeActor;
        let mut sp24: s32 = 0;
        let mut sp20: s32 = (*this).unk_84B[(*this).unk_846 as usize] as s32;
        let mut sp1C: s32 = func_808332B8(this);
        let mut doAction: s32 = DO_ACTION_NONE as libc::c_int;
        if Player_InBlockingCsMode(globalCtx, this) == 0 {
            if (*this).stateFlags1 & 0x100000 as libc::c_int as libc::c_uint
                   != 0 {
                doAction = DO_ACTION_RETURN as libc::c_int
            } else if (*this).heldItemActionParam as libc::c_int ==
                          PLAYER_AP_FISHING_POLE as libc::c_int &&
                          (*this).unk_860 as libc::c_int != 0 as libc::c_int {
                if (*this).unk_860 as libc::c_int == 2 as libc::c_int {
                    doAction = DO_ACTION_REEL as libc::c_int
                }
            } else if Some(func_8084E3C4 as
                               unsafe extern "C" fn(_: *mut Player,
                                                    _: *mut GlobalContext)
                                   -> ()) != (*this).func_674 &&
                          (*this).stateFlags2 &
                              0x40000 as libc::c_int as libc::c_uint == 0 {
                if (*this).doorType as libc::c_int !=
                       PLAYER_DOORTYPE_NONE as libc::c_int &&
                       ((*this).stateFlags1 &
                            0x800 as libc::c_int as libc::c_uint == 0 ||
                            !heldActor.is_null() &&
                                (*heldActor).id as libc::c_int ==
                                    ACTOR_EN_RU1 as libc::c_int) {
                    doAction = DO_ACTION_OPEN as libc::c_int
                } else if ((*this).stateFlags1 &
                               0x800 as libc::c_int as libc::c_uint == 0 ||
                               heldActor.is_null()) &&
                              !interactRangeActor.is_null() &&
                              (sp1C == 0 &&
                                   (*this).getItemId as libc::c_int ==
                                       GI_NONE as libc::c_int ||
                                   ((*this).getItemId as libc::c_int) <
                                       0 as libc::c_int &&
                                       (*this).stateFlags1 &
                                           0x8000000 as libc::c_int as
                                               libc::c_uint == 0) {
                    if ((*this).getItemId as libc::c_int) < 0 as libc::c_int {
                        doAction = DO_ACTION_OPEN as libc::c_int
                    } else if (*interactRangeActor).id as libc::c_int ==
                                  ACTOR_BG_TOKI_SWD as libc::c_int &&
                                  gSaveContext.linkAge == 0 as libc::c_int {
                        doAction = DO_ACTION_DROP as libc::c_int
                    } else { doAction = DO_ACTION_GRAB as libc::c_int }
                } else if sp1C == 0 &&
                              (*this).stateFlags2 &
                                  1 as libc::c_int as libc::c_uint != 0 {
                    doAction = DO_ACTION_GRAB as libc::c_int
                } else if (*this).stateFlags2 &
                              4 as libc::c_int as libc::c_uint != 0 ||
                              (*this).stateFlags1 &
                                  0x800000 as libc::c_int as libc::c_uint == 0
                                  && !(*this).rideActor.is_null() {
                    doAction = DO_ACTION_CLIMB as libc::c_int
                } else if (*this).stateFlags1 &
                              0x800000 as libc::c_int as libc::c_uint != 0 &&
                              (if ((*((*this).rideActor as
                                          *mut EnHorse)).action as
                                       libc::c_uint ==
                                       ENHORSE_ACT_MOUNTED_IDLE as libc::c_int
                                           as libc::c_uint ||
                                       (*((*this).rideActor as
                                              *mut EnHorse)).action as
                                           libc::c_uint ==
                                           ENHORSE_ACT_FROZEN as libc::c_int
                                               as libc::c_uint ||
                                       (*((*this).rideActor as
                                              *mut EnHorse)).action as
                                           libc::c_uint ==
                                           ENHORSE_ACT_MOUNTED_IDLE_WHINNEYING
                                               as libc::c_int as libc::c_uint)
                                      &&
                                      (*((*this).rideActor as
                                             *mut EnHorse)).stateFlags &
                                          ((1 as libc::c_int) <<
                                               19 as libc::c_int) as
                                              libc::c_uint == 0 &&
                                      (*((*this).rideActor as
                                             *mut EnHorse)).stateFlags &
                                          ((1 as libc::c_int) <<
                                               25 as libc::c_int) as
                                              libc::c_uint == 0 {
                                   1 as libc::c_int
                               } else { 0 as libc::c_int }) == 0 &&
                              Some(func_8084D3E4 as
                                       unsafe extern "C" fn(_: *mut Player,
                                                            _:
                                                                *mut GlobalContext)
                                           -> ()) != (*this).func_674 {
                    if (*this).stateFlags2 & 2 as libc::c_int as libc::c_uint
                           != 0 && !(*this).targetActor.is_null() {
                        if (*(*this).targetActor).category as libc::c_int ==
                               ACTORCAT_NPC as libc::c_int {
                            doAction = DO_ACTION_SPEAK as libc::c_int
                        } else { doAction = DO_ACTION_CHECK as libc::c_int }
                    } else if func_8002DD78(this) == 0 &&
                                  (*this).stateFlags1 &
                                      0x100000 as libc::c_int as libc::c_uint
                                      == 0 {
                        doAction = DO_ACTION_FASTER as libc::c_int
                    }
                } else if (*this).stateFlags2 &
                              2 as libc::c_int as libc::c_uint != 0 &&
                              !(*this).targetActor.is_null() {
                    if (*(*this).targetActor).category as libc::c_int ==
                           ACTORCAT_NPC as libc::c_int {
                        doAction = DO_ACTION_SPEAK as libc::c_int
                    } else { doAction = DO_ACTION_CHECK as libc::c_int }
                } else if (*this).stateFlags1 &
                              0x202000 as libc::c_int as libc::c_uint != 0 ||
                              (*this).stateFlags1 &
                                  0x800000 as libc::c_int as libc::c_uint != 0
                                  &&
                                  (*this).stateFlags2 &
                                      0x400000 as libc::c_int as libc::c_uint
                                      != 0 {
                    doAction = DO_ACTION_DOWN as libc::c_int
                } else if (*this).stateFlags2 &
                              0x10000 as libc::c_int as libc::c_uint != 0 {
                    doAction = DO_ACTION_ENTER as libc::c_int
                } else if (*this).stateFlags1 &
                              0x800 as libc::c_int as libc::c_uint != 0 &&
                              (*this).getItemId as libc::c_int ==
                                  GI_NONE as libc::c_int &&
                              !heldActor.is_null() {
                    if (*this).actor.bgCheckFlags as libc::c_int &
                           1 as libc::c_int != 0 ||
                           (*heldActor).id as libc::c_int ==
                               ACTOR_EN_NIW as libc::c_int {
                        if func_8083EAF0(this, heldActor) == 0 as libc::c_int
                           {
                            doAction = DO_ACTION_DROP as libc::c_int
                        } else { doAction = DO_ACTION_THROW as libc::c_int }
                    }
                } else if (*this).stateFlags1 &
                              0x8000000 as libc::c_int as libc::c_uint == 0 &&
                              func_8083A0D4(this) != 0 &&
                              ((*this).getItemId as libc::c_int) <
                                  GI_MAX as libc::c_int {
                    doAction = DO_ACTION_GRAB as libc::c_int
                } else if (*this).stateFlags2 &
                              0x800 as libc::c_int as libc::c_uint != 0 {
                    sp24 =
                        ((D_80854784[((gSaveContext.inventory.upgrades &
                                           gUpgradeMasks[UPG_SCALE as
                                                             libc::c_int as
                                                             usize]) as s32 >>
                                          gUpgradeShifts[UPG_SCALE as
                                                             libc::c_int as
                                                             usize] as
                                              libc::c_int) as usize] -
                              (*this).actor.yDistToWater) / 40.0f32) as s32;
                    sp24 =
                        if sp24 < 0 as libc::c_int {
                            0 as libc::c_int
                        } else if sp24 > 7 as libc::c_int {
                            7 as libc::c_int
                        } else { sp24 };
                    doAction = sDiveDoActions[sp24 as usize] as s32
                } else if sp1C != 0 &&
                              (*this).stateFlags2 &
                                  0x400 as libc::c_int as libc::c_uint == 0 {
                    doAction = DO_ACTION_DIVE as libc::c_int
                } else if sp1C == 0 &&
                              ((*this).stateFlags1 &
                                   0x400000 as libc::c_int as libc::c_uint ==
                                   0 || func_80833BCC(this) != 0 ||
                                   Player_IsChildWithHylianShield(this) == 0)
                 {
                    if (*this).stateFlags1 &
                           0x4000 as libc::c_int as libc::c_uint == 0 &&
                           sp20 <= 0 as libc::c_int &&
                           (func_8008E9C4(this) != 0 ||
                                D_808535E4 != 7 as libc::c_int &&
                                    (func_80833B2C(this) != 0 ||
                                         (*globalCtx).roomCtx.curRoom.unk_03
                                             as libc::c_int !=
                                             2 as libc::c_int &&
                                             (*this).stateFlags1 &
                                                 0x400000 as libc::c_int as
                                                     libc::c_uint == 0 &&
                                             sp20 == 0 as libc::c_int)) {
                        doAction = DO_ACTION_ATTACK as libc::c_int
                    } else if (*globalCtx).roomCtx.curRoom.unk_03 as
                                  libc::c_int != 2 as libc::c_int &&
                                  func_80833BCC(this) != 0 &&
                                  sp20 > 0 as libc::c_int {
                        doAction = DO_ACTION_JUMP as libc::c_int
                    } else if (*this).heldItemActionParam as libc::c_int >=
                                  PLAYER_AP_SWORD_MASTER as libc::c_int ||
                                  (*this).stateFlags2 &
                                      0x100000 as libc::c_int as libc::c_uint
                                      != 0 &&
                                      (*globalCtx).actorCtx.targetCtx.arrowPointedActor.is_null()
                     {
                        doAction = DO_ACTION_PUTAWAY as libc::c_int
                    }
                }
            }
        }
        if doAction != DO_ACTION_PUTAWAY as libc::c_int {
            (*this).unk_837 = 20 as libc::c_int as u8_0
        } else if (*this).unk_837 as libc::c_int != 0 as libc::c_int {
            doAction = DO_ACTION_NONE as libc::c_int;
            (*this).unk_837 = (*this).unk_837.wrapping_sub(1)
        }
        Interface_SetDoAction(globalCtx, doAction as u16_0);
        if (*this).stateFlags2 & 0x200000 as libc::c_int as libc::c_uint != 0
           {
            if !(*this).unk_664.is_null() {
                Interface_SetNaviCall(globalCtx,
                                      0x1e as libc::c_int as u16_0);
            } else {
                Interface_SetNaviCall(globalCtx,
                                      0x1d as libc::c_int as u16_0);
            }
            Interface_SetNaviCall(globalCtx, 0x1e as libc::c_int as u16_0);
        } else {
            Interface_SetNaviCall(globalCtx, 0x1f as libc::c_int as u16_0);
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80847A78(mut this: *mut Player) -> s32 {
    let mut cond: s32 = 0;
    if (*this).currentBoots as libc::c_int ==
           PLAYER_BOOTS_HOVER as libc::c_int &&
           (*this).hoverBootsTimer as libc::c_int != 0 as libc::c_int {
        (*this).hoverBootsTimer = (*this).hoverBootsTimer.wrapping_sub(1)
    } else { (*this).hoverBootsTimer = 0 as libc::c_int as u8_0 }
    cond =
        ((*this).currentBoots as libc::c_int ==
             PLAYER_BOOTS_HOVER as libc::c_int &&
             ((*this).actor.yDistToWater >= 0.0f32 ||
                  func_80838144(D_808535E4) >= 0 as libc::c_int ||
                  func_8083816C(D_808535E4) != 0)) as libc::c_int;
    if cond != 0 &&
           (*this).actor.bgCheckFlags as libc::c_int & 1 as libc::c_int != 0
           && (*this).hoverBootsTimer as libc::c_int != 0 as libc::c_int {
        (*this).actor.bgCheckFlags =
            ((*this).actor.bgCheckFlags as libc::c_int & !(1 as libc::c_int))
                as u16_0
    }
    if (*this).actor.bgCheckFlags as libc::c_int & 1 as libc::c_int != 0 {
        if cond == 0 { (*this).hoverBootsTimer = 19 as libc::c_int as u8_0 }
        return 0 as libc::c_int
    }
    D_808535E4 = 0 as libc::c_int;
    D_80853610 = 0 as libc::c_int as s16;
    (*this).unk_89A = D_80853610;
    (*this).unk_898 = (*this).unk_89A;
    return 1 as libc::c_int;
}
static mut D_80854798: Vec3f =
    { let mut init = Vec3f{x: 0.0f32, y: 18.0f32, z: 0.0f32,}; init };
#[no_mangle]
pub unsafe extern "C" fn func_80847BA0(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    let mut spC7: u8_0 = 0 as libc::c_int as u8_0;
    let mut spC0: *mut CollisionPoly = 0 as *mut CollisionPoly;
    let mut spB4: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut spB0: f32_0 = 0.;
    let mut spAC: f32_0 = 0.;
    let mut spA8: f32_0 = 0.;
    let mut spA4: u32_0 = 0;
    D_80853604 = (*this).unk_A7A as s32;
    if (*this).stateFlags2 & 0x40000 as libc::c_int as libc::c_uint != 0 {
        spB0 = 10.0f32;
        spAC = 15.0f32;
        spA8 = 30.0f32
    } else {
        spB0 = (*(*this).ageProperties).unk_38;
        spAC = 26.0f32;
        spA8 = (*(*this).ageProperties).unk_00
    }
    if (*this).stateFlags1 & 0xa0000000 as libc::c_uint != 0 {
        if (*this).stateFlags1 & 0x80000000 as libc::c_uint != 0 {
            (*this).actor.bgCheckFlags =
                ((*this).actor.bgCheckFlags as libc::c_int &
                     !(1 as libc::c_int)) as u16_0;
            spA4 = 0x38 as libc::c_int as u32_0
        } else if (*this).stateFlags1 & 1 as libc::c_int as libc::c_uint != 0
                      &&
                      (*this).unk_A84 as libc::c_int -
                          (*this).actor.world.pos.y as s32 >=
                          100 as libc::c_int {
            spA4 = 0x39 as libc::c_int as u32_0
        } else if (*this).stateFlags1 & 1 as libc::c_int as libc::c_uint == 0
                      &&
                      (Some(func_80845EF8 as
                                unsafe extern "C" fn(_: *mut Player,
                                                     _: *mut GlobalContext)
                                    -> ()) == (*this).func_674 ||
                           Some(func_80845CA4 as
                                    unsafe extern "C" fn(_: *mut Player,
                                                         _:
                                                             *mut GlobalContext)
                                        -> ()) == (*this).func_674) {
            (*this).actor.bgCheckFlags =
                ((*this).actor.bgCheckFlags as libc::c_int &
                     !(0x208 as libc::c_int)) as u16_0;
            spA4 = 0x3c as libc::c_int as u32_0
        } else { spA4 = 0x3f as libc::c_int as u32_0 }
    } else { spA4 = 0x3f as libc::c_int as u32_0 }
    if (*this).stateFlags3 as libc::c_int & 1 as libc::c_int != 0 {
        spA4 &= !(6 as libc::c_int) as libc::c_uint
    }
    if spA4 & 4 as libc::c_int as libc::c_uint != 0 {
        (*this).stateFlags3 =
            ((*this).stateFlags3 as libc::c_int | 0x10 as libc::c_int) as u8_0
    }
    Math_Vec3f_Copy(&mut spB4, &mut (*this).actor.world.pos);
    Actor_UpdateBgCheckInfo(globalCtx, &mut (*this).actor, spAC, spB0, spA8,
                            spA4 as s32);
    if (*this).actor.bgCheckFlags as libc::c_int & 0x10 as libc::c_int != 0 {
        (*this).actor.velocity.y = 0.0f32
    }
    D_80853600 = (*this).actor.world.pos.y - (*this).actor.floorHeight;
    D_808535F4 = 0 as libc::c_int as u32_0;
    spC0 = (*this).actor.floorPoly;
    if !spC0.is_null() {
        (*this).unk_A7A =
            func_80041EA4(&mut (*globalCtx).colCtx, spC0,
                          (*this).actor.floorBgId as s32) as u8_0;
        (*this).unk_A82 = (*this).unk_89E;
        if (*this).actor.bgCheckFlags as libc::c_int & 0x20 as libc::c_int !=
               0 {
            if (*this).actor.yDistToWater < 20.0f32 {
                (*this).unk_89E = 4 as libc::c_int as u16_0
            } else { (*this).unk_89E = 5 as libc::c_int as u16_0 }
        } else if (*this).stateFlags2 & 0x200 as libc::c_int as libc::c_uint
                      != 0 {
            (*this).unk_89E = 1 as libc::c_int as u16_0
        } else {
            (*this).unk_89E =
                SurfaceType_GetSfx(&mut (*globalCtx).colCtx, spC0,
                                   (*this).actor.floorBgId as s32)
        }
        if (*this).actor.category as libc::c_int ==
               ACTORCAT_PLAYER as libc::c_int {
            Audio_SetCodeReverb(SurfaceType_GetEcho(&mut (*globalCtx).colCtx,
                                                    spC0,
                                                    (*this).actor.floorBgId as
                                                        s32) as s8);
            if (*this).actor.floorBgId as libc::c_int == 50 as libc::c_int {
                func_80074CE8(globalCtx,
                              SurfaceType_GetLightSettingIndex(&mut (*globalCtx).colCtx,
                                                               spC0,
                                                               (*this).actor.floorBgId
                                                                   as s32));
            } else {
                func_80043508(&mut (*globalCtx).colCtx,
                              (*this).actor.floorBgId as s32);
            }
        }
        D_808535F4 =
            SurfaceType_GetConveyorSpeed(&mut (*globalCtx).colCtx, spC0,
                                         (*this).actor.floorBgId as s32);
        if D_808535F4 != 0 as libc::c_int as libc::c_uint {
            D_808535F8 =
                SurfaceType_IsConveyor(&mut (*globalCtx).colCtx, spC0,
                                       (*this).actor.floorBgId as s32) as s16;
            if D_808535F8 as libc::c_int == 0 as libc::c_int &&
                   (*this).actor.yDistToWater > 20.0f32 &&
                   (*this).currentBoots as libc::c_int !=
                       PLAYER_BOOTS_IRON as libc::c_int ||
                   D_808535F8 as libc::c_int != 0 as libc::c_int &&
                       (*this).actor.bgCheckFlags as libc::c_int &
                           1 as libc::c_int != 0 {
                D_808535FC =
                    (SurfaceType_GetConveyorDirection(&mut (*globalCtx).colCtx,
                                                      spC0,
                                                      (*this).actor.floorBgId
                                                          as s32) <<
                         10 as libc::c_int) as s16
            } else { D_808535F4 = 0 as libc::c_int as u32_0 }
        }
    }
    func_80839034(globalCtx, this, spC0, (*this).actor.floorBgId as u32_0);
    (*this).actor.bgCheckFlags =
        ((*this).actor.bgCheckFlags as libc::c_int & !(0x200 as libc::c_int))
            as u16_0;
    if (*this).actor.bgCheckFlags as libc::c_int & 8 as libc::c_int != 0 {
        let mut spA0: *mut CollisionPoly = 0 as *mut CollisionPoly;
        let mut sp9C: s32 = 0;
        let mut sp9A: s16 = 0;
        let mut pad: s32 = 0;
        D_80854798.y = 18.0f32;
        D_80854798.z = (*(*this).ageProperties).unk_38 + 10.0f32;
        if (*this).stateFlags2 & 0x40000 as libc::c_int as libc::c_uint == 0
               &&
               func_80839768(globalCtx, this, &mut D_80854798, &mut spA0,
                             &mut sp9C, &mut D_80858AA8) != 0 {
            (*this).actor.bgCheckFlags =
                ((*this).actor.bgCheckFlags as libc::c_int |
                     0x200 as libc::c_int) as u16_0;
            if (*this).actor.wallPoly != spA0 {
                (*this).actor.wallPoly = spA0;
                (*this).actor.wallBgId = sp9C as u8_0;
                (*this).actor.wallYaw =
                    Math_Atan2S((*spA0).normal.z as f32_0,
                                (*spA0).normal.x as f32_0)
            }
        }
        sp9A =
            ((*this).actor.shape.rot.y as libc::c_int -
                 ((*this).actor.wallYaw as libc::c_int +
                      0x8000 as libc::c_int) as s16 as libc::c_int) as s16;
        D_808535F0 =
            func_80041DB8(&mut (*globalCtx).colCtx, (*this).actor.wallPoly,
                          (*this).actor.wallBgId as s32) as u32_0;
        D_80853608 =
            if sp9A as libc::c_int >= 0 as libc::c_int {
                sp9A as libc::c_int
            } else { -(sp9A as libc::c_int) };
        sp9A =
            ((*this).currentYaw as libc::c_int -
                 ((*this).actor.wallYaw as libc::c_int +
                      0x8000 as libc::c_int) as s16 as libc::c_int) as s16;
        D_8085360C =
            if sp9A as libc::c_int >= 0 as libc::c_int {
                sp9A as libc::c_int
            } else { -(sp9A as libc::c_int) };
        spB0 = D_8085360C as libc::c_float * 0.00008f32;
        if (*this).actor.bgCheckFlags as libc::c_int & 1 as libc::c_int == 0
               || spB0 >= 1.0f32 {
            (*this).unk_880 =
                (*gGameInfo).data[(0 as libc::c_int * 6 as libc::c_int *
                                       16 as libc::c_int + 45 as libc::c_int)
                                      as usize] as libc::c_int as
                    libc::c_float / 100.0f32
        } else {
            spAC =
                (*gGameInfo).data[(0 as libc::c_int * 6 as libc::c_int *
                                       16 as libc::c_int + 45 as libc::c_int)
                                      as usize] as libc::c_int as
                    libc::c_float / 100.0f32 * spB0;
            (*this).unk_880 = spAC;
            if spAC < 0.1f32 { (*this).unk_880 = 0.1f32 }
        }
        if (*this).actor.bgCheckFlags as libc::c_int & 0x200 as libc::c_int !=
               0 && D_80853608 < 0x3000 as libc::c_int {
            let mut wallPoly: *mut CollisionPoly = (*this).actor.wallPoly;
            if (if (*wallPoly).normal.y as libc::c_int >= 0 as libc::c_int {
                    (*wallPoly).normal.y as libc::c_int
                } else { -((*wallPoly).normal.y as libc::c_int) }) <
                   600 as libc::c_int {
                let mut sp8C: f32_0 =
                    (*wallPoly).normal.x as libc::c_int as libc::c_float *
                        (1.0f32 / 32767.0f32);
                let mut sp88: f32_0 =
                    (*wallPoly).normal.y as libc::c_int as libc::c_float *
                        (1.0f32 / 32767.0f32);
                let mut sp84: f32_0 =
                    (*wallPoly).normal.z as libc::c_int as libc::c_float *
                        (1.0f32 / 32767.0f32);
                let mut wallHeight: f32_0 = 0.;
                let mut sp7C: *mut CollisionPoly = 0 as *mut CollisionPoly;
                let mut sp78: *mut CollisionPoly = 0 as *mut CollisionPoly;
                let mut sp74: s32 = 0;
                let mut sp68: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
                let mut sp64: f32_0 = 0.;
                let mut sp60: f32_0 = 0.;
                let mut temp3: s32 = 0;
                (*this).wallDistance =
                    Math3D_UDistPlaneToPos(sp8C, sp88, sp84,
                                           (*wallPoly).dist as f32_0,
                                           &mut (*this).actor.world.pos);
                spB0 = (*this).wallDistance + 10.0f32;
                sp68.x = (*this).actor.world.pos.x - spB0 * sp8C;
                sp68.z = (*this).actor.world.pos.z - spB0 * sp84;
                sp68.y =
                    (*this).actor.world.pos.y +
                        (*(*this).ageProperties).unk_0C;
                sp64 =
                    BgCheck_EntityRaycastFloor1(&mut (*globalCtx).colCtx,
                                                &mut sp7C, &mut sp68);
                wallHeight = sp64 - (*this).actor.world.pos.y;
                (*this).wallHeight = wallHeight;
                if (*this).wallHeight < 18.0f32 ||
                       BgCheck_EntityCheckCeiling(&mut (*globalCtx).colCtx,
                                                  &mut sp60,
                                                  &mut (*this).actor.world.pos,
                                                  sp64 -
                                                      (*this).actor.world.pos.y
                                                      + 20.0f32, &mut sp78,
                                                  &mut sp74,
                                                  &mut (*this).actor) != 0 {
                    (*this).wallHeight = 399.96002f32
                } else {
                    D_80854798.y = sp64 + 5.0f32 - (*this).actor.world.pos.y;
                    if func_80839768(globalCtx, this, &mut D_80854798,
                                     &mut sp78, &mut sp74, &mut D_80858AA8) !=
                           0 &&
                           {
                               temp3 =
                                   (*this).actor.wallYaw as libc::c_int -
                                       Math_Atan2S((*sp78).normal.z as f32_0,
                                                   (*sp78).normal.x as f32_0)
                                           as libc::c_int;
                               ((if temp3 >= 0 as libc::c_int {
                                     temp3
                                 } else { -temp3 })) < 0x4000 as libc::c_int
                           } &&
                           func_80041E18(&mut (*globalCtx).colCtx, sp78, sp74)
                               == 0 {
                        (*this).wallHeight = 399.96002f32
                    } else if func_80041DE4(&mut (*globalCtx).colCtx,
                                            wallPoly,
                                            (*this).actor.wallBgId as s32) ==
                                  0 as libc::c_int {
                        if (*(*this).ageProperties).unk_1C <=
                               (*this).wallHeight {
                            if (if (*sp7C).normal.y as libc::c_int >=
                                       0 as libc::c_int {
                                    (*sp7C).normal.y as libc::c_int
                                } else { -((*sp7C).normal.y as libc::c_int) })
                                   > 28000 as libc::c_int {
                                if (*(*this).ageProperties).unk_14 <=
                                       (*this).wallHeight {
                                    spC7 = 4 as libc::c_int as u8_0
                                } else if (*(*this).ageProperties).unk_18 <=
                                              (*this).wallHeight {
                                    spC7 = 3 as libc::c_int as u8_0
                                } else { spC7 = 2 as libc::c_int as u8_0 }
                            }
                        } else { spC7 = 1 as libc::c_int as u8_0 }
                    }
                }
            }
        }
    } else {
        (*this).unk_880 =
            (*gGameInfo).data[(0 as libc::c_int * 6 as libc::c_int *
                                   16 as libc::c_int + 45 as libc::c_int) as
                                  usize] as libc::c_int as libc::c_float /
                100.0f32;
        (*this).unk_88D = 0 as libc::c_int as u8_0;
        (*this).wallHeight = 0.0f32
    }
    if spC7 as libc::c_int == (*this).unk_88C as libc::c_int {
        if (*this).linearVelocity != 0.0f32 &&
               ((*this).unk_88D as libc::c_int) < 100 as libc::c_int {
            (*this).unk_88D = (*this).unk_88D.wrapping_add(1)
        }
    } else {
        (*this).unk_88C = spC7;
        (*this).unk_88D = 0 as libc::c_int as u8_0
    }
    if (*this).actor.bgCheckFlags as libc::c_int & 1 as libc::c_int != 0 {
        D_808535E4 =
            func_80041D4C(&mut (*globalCtx).colCtx, spC0,
                          (*this).actor.floorBgId as s32) as s32;
        if func_80847A78(this) == 0 {
            let mut sp58: f32_0 = 0.;
            let mut sp54: f32_0 = 0.;
            let mut sp50: f32_0 = 0.;
            let mut sp4C: f32_0 = 0.;
            let mut pad2: s32 = 0;
            let mut sp44: f32_0 = 0.;
            let mut pad3: s32 = 0;
            if (*this).actor.floorBgId as libc::c_int != 50 as libc::c_int {
                func_800434C8(&mut (*globalCtx).colCtx,
                              (*this).actor.floorBgId as s32);
            }
            sp58 =
                (*spC0).normal.x as libc::c_int as libc::c_float *
                    (1.0f32 / 32767.0f32);
            sp54 =
                1.0f32 /
                    ((*spC0).normal.y as libc::c_int as libc::c_float *
                         (1.0f32 / 32767.0f32));
            sp50 =
                (*spC0).normal.z as libc::c_int as libc::c_float *
                    (1.0f32 / 32767.0f32);
            sp4C = Math_SinS((*this).currentYaw);
            sp44 = Math_CosS((*this).currentYaw);
            (*this).unk_898 =
                Math_Atan2S(1.0f32, (-(sp58 * sp4C) - sp50 * sp44) * sp54);
            (*this).unk_89A =
                Math_Atan2S(1.0f32, (-(sp58 * sp44) - sp50 * sp4C) * sp54);
            sp4C = Math_SinS((*this).actor.shape.rot.y);
            sp44 = Math_CosS((*this).actor.shape.rot.y);
            D_80853610 =
                Math_Atan2S(1.0f32, (-(sp58 * sp4C) - sp50 * sp44) * sp54);
            func_8083E318(globalCtx, this, spC0);
        }
    } else { func_80847A78(this); }
    if (*this).unk_A7B as libc::c_int == D_808535E4 {
        (*this).unk_A79 = (*this).unk_A79.wrapping_add(1)
    } else {
        (*this).unk_A7B = D_808535E4 as u8_0;
        (*this).unk_A79 = 0 as libc::c_int as u8_0
    };
}
#[no_mangle]
pub unsafe extern "C" fn Player_UpdateCamAndSeqModes(mut globalCtx:
                                                         *mut GlobalContext,
                                                     mut this: *mut Player) {
    let mut seqMode: u8_0 = 0;
    let mut pad: s32 = 0;
    let mut unk_664: *mut Actor = 0 as *mut Actor;
    let mut camMode: s32 = 0;
    if (*this).actor.category as libc::c_int == ACTORCAT_PLAYER as libc::c_int
       {
        seqMode = SEQ_MODE_DEFAULT as libc::c_int as u8_0;
        if (*this).csMode as libc::c_int != 0 as libc::c_int {
            Camera_ChangeMode(Gameplay_GetCamera(globalCtx,
                                                 0 as libc::c_int as s16),
                              CAM_MODE_NORMAL as libc::c_int as s16);
        } else if (*this).stateFlags1 &
                      0x100000 as libc::c_int as libc::c_uint == 0 {
            if !(*this).actor.parent.is_null() &&
                   (*this).stateFlags3 as libc::c_int & 0x80 as libc::c_int !=
                       0 {
                camMode = CAM_MODE_HOOKSHOT as libc::c_int;
                Camera_SetParam(Gameplay_GetCamera(globalCtx,
                                                   0 as libc::c_int as s16),
                                8 as libc::c_int,
                                (*this).actor.parent as *mut libc::c_void);
            } else if Some(func_8084377C as
                               unsafe extern "C" fn(_: *mut Player,
                                                    _: *mut GlobalContext)
                                   -> ()) == (*this).func_674 {
                camMode = CAM_MODE_STILL as libc::c_int
            } else if (*this).stateFlags2 &
                          0x100 as libc::c_int as libc::c_uint != 0 {
                camMode = CAM_MODE_PUSHPULL as libc::c_int
            } else {
                unk_664 = (*this).unk_664;
                if !unk_664.is_null() {
                    if (*this).actor.flags &
                           ((1 as libc::c_int) << 8 as libc::c_int) as
                               libc::c_uint ==
                           ((1 as libc::c_int) << 8 as libc::c_int) as
                               libc::c_uint {
                        camMode = CAM_MODE_TALK as libc::c_int
                    } else if (*this).stateFlags1 &
                                  0x10000 as libc::c_int as libc::c_uint != 0
                     {
                        if (*this).stateFlags1 &
                               0x2000000 as libc::c_int as libc::c_uint != 0 {
                            camMode = CAM_MODE_FOLLOWBOOMERANG as libc::c_int
                        } else {
                            camMode = CAM_MODE_FOLLOWTARGET as libc::c_int
                        }
                    } else { camMode = CAM_MODE_BATTLE as libc::c_int }
                    Camera_SetParam(Gameplay_GetCamera(globalCtx,
                                                       0 as libc::c_int as
                                                           s16),
                                    8 as libc::c_int,
                                    unk_664 as *mut libc::c_void);
                } else if (*this).stateFlags1 &
                              0x1000 as libc::c_int as libc::c_uint != 0 {
                    camMode = CAM_MODE_CHARGE as libc::c_int
                } else if (*this).stateFlags1 &
                              0x2000000 as libc::c_int as libc::c_uint != 0 {
                    camMode = CAM_MODE_FOLLOWBOOMERANG as libc::c_int;
                    Camera_SetParam(Gameplay_GetCamera(globalCtx,
                                                       0 as libc::c_int as
                                                           s16),
                                    8 as libc::c_int,
                                    (*this).boomerangActor as
                                        *mut libc::c_void);
                } else if (*this).stateFlags1 &
                              0x6000 as libc::c_int as libc::c_uint != 0 {
                    if func_80833B2C(this) != 0 {
                        camMode = CAM_MODE_HANGZ as libc::c_int
                    } else { camMode = CAM_MODE_HANG as libc::c_int }
                } else if (*this).stateFlags1 &
                              0x40020000 as libc::c_int as libc::c_uint != 0 {
                    if func_8002DD78(this) != 0 || func_808334B4(this) != 0 {
                        camMode = CAM_MODE_BOWARROWZ as libc::c_int
                    } else if (*this).stateFlags1 &
                                  0x200000 as libc::c_int as libc::c_uint != 0
                     {
                        camMode = CAM_MODE_CLIMBZ as libc::c_int
                    } else { camMode = CAM_MODE_TARGET as libc::c_int }
                } else if (*this).stateFlags1 &
                              0x240000 as libc::c_int as libc::c_uint != 0 {
                    if Some(func_80845668 as
                                unsafe extern "C" fn(_: *mut Player,
                                                     _: *mut GlobalContext)
                                    -> ()) == (*this).func_674 ||
                           (*this).stateFlags1 &
                               0x200000 as libc::c_int as libc::c_uint != 0 {
                        camMode = CAM_MODE_CLIMB as libc::c_int
                    } else { camMode = CAM_MODE_JUMP as libc::c_int }
                } else if (*this).stateFlags1 &
                              0x80000 as libc::c_int as libc::c_uint != 0 {
                    camMode = CAM_MODE_FREEFALL as libc::c_int
                } else if (*this).swordState as libc::c_int !=
                              0 as libc::c_int &&
                              (*this).swordAnimation as libc::c_int >=
                                  0 as libc::c_int &&
                              ((*this).swordAnimation as libc::c_int) <
                                  0x18 as libc::c_int {
                    camMode = CAM_MODE_STILL as libc::c_int
                } else {
                    camMode = CAM_MODE_NORMAL as libc::c_int;
                    if (*this).linearVelocity == 0.0f32 &&
                           ((*this).stateFlags1 &
                                0x800000 as libc::c_int as libc::c_uint == 0
                                || (*(*this).rideActor).speedXZ == 0.0f32) {
                        // not moving
                        seqMode = SEQ_MODE_STILL as libc::c_int as u8_0
                    }
                }
            }
            Camera_ChangeMode(Gameplay_GetCamera(globalCtx,
                                                 0 as libc::c_int as s16),
                              camMode as s16);
        } else {
            // First person mode
            seqMode = SEQ_MODE_STILL as libc::c_int as u8_0
        }
        if !(*globalCtx).actorCtx.targetCtx.bgmEnemy.is_null() {
            seqMode = SEQ_MODE_ENEMY as libc::c_int as u8_0;
            Audio_SetBgmEnemyVolume(sqrtf((*(*globalCtx).actorCtx.targetCtx.bgmEnemy).xyzDistToPlayerSq));
        }
        if (*globalCtx).sceneNum as libc::c_int !=
               SCENE_TURIBORI as libc::c_int {
            Audio_SetSequenceMode(seqMode);
        }
    };
}
static mut D_808547A4: Vec3f =
    { let mut init = Vec3f{x: 0.0f32, y: 0.5f32, z: 0.0f32,}; init };
static mut D_808547B0: Vec3f =
    { let mut init = Vec3f{x: 0.0f32, y: 0.5f32, z: 0.0f32,}; init };
static mut D_808547BC: Color_RGBA8 =
    {
        let mut init =
            Color_RGBA8{r: 255 as libc::c_int as u8_0,
                        g: 255 as libc::c_int as u8_0,
                        b: 100 as libc::c_int as u8_0,
                        a: 255 as libc::c_int as u8_0,};
        init
    };
static mut D_808547C0: Color_RGBA8 =
    {
        let mut init =
            Color_RGBA8{r: 255 as libc::c_int as u8_0,
                        g: 50 as libc::c_int as u8_0,
                        b: 0 as libc::c_int as u8_0,
                        a: 0 as libc::c_int as u8_0,};
        init
    };
#[no_mangle]
pub unsafe extern "C" fn func_80848A04(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    let mut temp: f32_0 = 0.;
    if (*this).unk_85C == 0.0f32 {
        func_80835F44(globalCtx, this, 0xff as libc::c_int);
        return
    }
    temp = 1.0f32;
    if (if (*this).unk_860 as libc::c_int == 0 as libc::c_int {
            0 as libc::c_int
        } else { (*this).unk_860 -= 1; (*this).unk_860 as libc::c_int }) ==
           0 as libc::c_int {
        Inventory_ChangeAmmo(ITEM_STICK as libc::c_int as s16,
                             -(1 as libc::c_int) as s16);
        (*this).unk_860 = 1 as libc::c_int as s16;
        temp = 0.0f32;
        (*this).unk_85C = temp
    } else if (*this).unk_860 as libc::c_int > 200 as libc::c_int {
        temp =
            (210 as libc::c_int - (*this).unk_860 as libc::c_int) as
                libc::c_float / 10.0f32
    } else if ((*this).unk_860 as libc::c_int) < 20 as libc::c_int {
        temp = (*this).unk_860 as libc::c_int as libc::c_float / 20.0f32;
        (*this).unk_85C = temp
    }
    func_8002836C(globalCtx,
                  &mut (*(*this).swordInfo.as_mut_ptr().offset(0 as
                                                                   libc::c_int
                                                                   as
                                                                   isize)).tip,
                  &mut D_808547A4, &mut D_808547B0, &mut D_808547BC,
                  &mut D_808547C0, (temp * 200.0f32) as s16,
                  0 as libc::c_int as s16, 8 as libc::c_int as s16);
}
#[no_mangle]
pub unsafe extern "C" fn func_80848B44(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    let mut shockPos: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut randBodyPart: *mut Vec3f = 0 as *mut Vec3f;
    let mut shockScale: s32 = 0;
    (*this).shockTimer = (*this).shockTimer.wrapping_sub(1);
    (*this).unk_892 =
        ((*this).unk_892 as libc::c_int + (*this).shockTimer as libc::c_int)
            as u8_0;
    if (*this).unk_892 as libc::c_int > 20 as libc::c_int {
        shockScale = (*this).shockTimer as libc::c_int * 2 as libc::c_int;
        (*this).unk_892 =
            ((*this).unk_892 as libc::c_int - 20 as libc::c_int) as u8_0;
        if shockScale > 40 as libc::c_int { shockScale = 40 as libc::c_int }
        randBodyPart =
            (*this).bodyPartsPos.as_mut_ptr().offset(Rand_ZeroFloat(17.9f32)
                                                         as s32 as isize);
        shockPos.x =
            Rand_CenteredFloat(5.0f32) + (*randBodyPart).x -
                (*this).actor.world.pos.x;
        shockPos.y =
            Rand_CenteredFloat(5.0f32) + (*randBodyPart).y -
                (*this).actor.world.pos.y;
        shockPos.z =
            Rand_CenteredFloat(5.0f32) + (*randBodyPart).z -
                (*this).actor.world.pos.z;
        EffectSsFhgFlash_SpawnShock(globalCtx, &mut (*this).actor,
                                    &mut shockPos, shockScale as s16,
                                    FHGFLASH_SHOCK_PLAYER as libc::c_int as
                                        u8_0);
        func_8002F8F0(&mut (*this).actor,
                      (0x868 as libc::c_int - 0x800 as libc::c_int) as u16_0);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80848C74(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    let mut spawnedFlame: s32 = 0;
    let mut timerPtr: *mut u8_0 = 0 as *mut u8_0;
    let mut timerStep: s32 = 0;
    let mut flameScale: f32_0 = 0.;
    let mut flameIntensity: f32_0 = 0.;
    let mut dmgCooldown: s32 = 0;
    let mut i: s32 = 0;
    let mut sp58: s32 = 0;
    let mut sp54: s32 = 0;
    if (*this).currentTunic as libc::c_int ==
           PLAYER_TUNIC_GORON as libc::c_int {
        sp54 = 20 as libc::c_int
    } else {
        sp54 = ((*this).linearVelocity * 0.4f32) as s32 + 1 as libc::c_int
    }
    spawnedFlame = 0 as libc::c_int;
    timerPtr = (*this).flameTimers.as_mut_ptr();
    if (*this).stateFlags2 & 8 as libc::c_int as libc::c_uint != 0 {
        sp58 = 100 as libc::c_int
    } else { sp58 = 0 as libc::c_int }
    func_8083819C(this, globalCtx);
    i = 0 as libc::c_int;
    while i < 18 as libc::c_int {
        timerStep = sp58 + sp54;
        if *timerPtr as libc::c_int <= timerStep {
            *timerPtr = 0 as libc::c_int as u8_0
        } else {
            spawnedFlame = 1 as libc::c_int;
            *timerPtr = (*timerPtr as libc::c_int - timerStep) as u8_0;
            if *timerPtr as libc::c_int as libc::c_float > 20.0f32 {
                flameIntensity =
                    (*timerPtr as libc::c_int as libc::c_float - 20.0f32) *
                        0.01f32;
                flameScale =
                    if flameIntensity < 0.19999999f32 {
                        0.19999999f32
                    } else if flameIntensity > 0.2f32 {
                        0.2f32
                    } else { flameIntensity }
            } else {
                flameScale =
                    *timerPtr as libc::c_int as libc::c_float * 0.01f32
            }
            flameIntensity =
                (*timerPtr as libc::c_int as libc::c_float - 25.0f32) *
                    0.02f32;
            flameIntensity =
                if flameIntensity < 0.0f32 {
                    0.0f32
                } else if flameIntensity > 1.0f32 {
                    1.0f32
                } else { flameIntensity };
            EffectSsFireTail_SpawnFlameOnPlayer(globalCtx, flameScale,
                                                i as s16, flameIntensity);
        }
        i += 1;
        timerPtr = timerPtr.offset(1)
    }
    if spawnedFlame != 0 {
        func_8002F7DC(&mut (*this).actor,
                      (0x2831 as libc::c_int - 0x800 as libc::c_int) as
                          u16_0);
        if (*globalCtx).sceneNum as libc::c_int ==
               SCENE_JYASINBOSS as libc::c_int {
            dmgCooldown = 0 as libc::c_int
        } else { dmgCooldown = 7 as libc::c_int }
        if dmgCooldown as libc::c_uint & (*globalCtx).gameplayFrames ==
               0 as libc::c_int as libc::c_uint {
            Player_InflictDamage(globalCtx, -(1 as libc::c_int));
        }
    } else { (*this).isBurning = 0 as libc::c_int as u8_0 };
}
#[no_mangle]
pub unsafe extern "C" fn func_80848EF8(mut this: *mut Player) {
    if gBitFlags[QUEST_STONE_OF_AGONY as libc::c_int as usize] &
           gSaveContext.inventory.questItems != 0 {
        let mut temp: f32_0 = 200000.0f32 - (*this).unk_6A4 * 5.0f32;
        if temp < 0.0f32 { temp = 0.0f32 }
        (*this).unk_6A0 += temp;
        if (*this).unk_6A0 > 4000000.0f32 {
            (*this).unk_6A0 = 0.0f32;
            func_8083264C(this, 120 as libc::c_int, 20 as libc::c_int,
                          10 as libc::c_int, 0 as libc::c_int);
        }
    };
}
static mut D_808547C4: [s8; 78] =
    [0 as libc::c_int as s8, 3 as libc::c_int as s8, 3 as libc::c_int as s8,
     5 as libc::c_int as s8, 4 as libc::c_int as s8, 8 as libc::c_int as s8,
     9 as libc::c_int as s8, 13 as libc::c_int as s8, 14 as libc::c_int as s8,
     15 as libc::c_int as s8, 16 as libc::c_int as s8,
     17 as libc::c_int as s8, 18 as libc::c_int as s8,
     -(22 as libc::c_int) as s8, 23 as libc::c_int as s8,
     24 as libc::c_int as s8, 25 as libc::c_int as s8,
     26 as libc::c_int as s8, 27 as libc::c_int as s8,
     28 as libc::c_int as s8, 29 as libc::c_int as s8,
     31 as libc::c_int as s8, 32 as libc::c_int as s8,
     33 as libc::c_int as s8, 34 as libc::c_int as s8,
     -(35 as libc::c_int) as s8, 30 as libc::c_int as s8,
     36 as libc::c_int as s8, 38 as libc::c_int as s8,
     -(39 as libc::c_int) as s8, -(40 as libc::c_int) as s8,
     -(41 as libc::c_int) as s8, 42 as libc::c_int as s8,
     43 as libc::c_int as s8, 45 as libc::c_int as s8,
     46 as libc::c_int as s8, 0 as libc::c_int as s8, 0 as libc::c_int as s8,
     0 as libc::c_int as s8, 67 as libc::c_int as s8, 48 as libc::c_int as s8,
     47 as libc::c_int as s8, -(50 as libc::c_int) as s8,
     51 as libc::c_int as s8, -(52 as libc::c_int) as s8,
     -(53 as libc::c_int) as s8, 54 as libc::c_int as s8,
     55 as libc::c_int as s8, 56 as libc::c_int as s8,
     57 as libc::c_int as s8, 58 as libc::c_int as s8,
     59 as libc::c_int as s8, 60 as libc::c_int as s8,
     61 as libc::c_int as s8, 62 as libc::c_int as s8,
     63 as libc::c_int as s8, 64 as libc::c_int as s8,
     -(65 as libc::c_int) as s8, -(66 as libc::c_int) as s8,
     68 as libc::c_int as s8, 11 as libc::c_int as s8,
     69 as libc::c_int as s8, 70 as libc::c_int as s8,
     71 as libc::c_int as s8, 8 as libc::c_int as s8, 8 as libc::c_int as s8,
     72 as libc::c_int as s8, 73 as libc::c_int as s8,
     78 as libc::c_int as s8, 79 as libc::c_int as s8,
     80 as libc::c_int as s8, 89 as libc::c_int as s8,
     90 as libc::c_int as s8, 91 as libc::c_int as s8,
     92 as libc::c_int as s8, 77 as libc::c_int as s8,
     19 as libc::c_int as s8, 94 as libc::c_int as s8];
static mut D_80854814: Vec3f =
    { let mut init = Vec3f{x: 0.0f32, y: 0.0f32, z: 200.0f32,}; init };
static mut D_80854820: [f32_0; 3] = [2.0f32, 4.0f32, 7.0f32];
static mut D_8085482C: [f32_0; 3] = [0.5f32, 1.0f32, 3.0f32];
#[no_mangle]
pub unsafe extern "C" fn Player_UpdateCommon(mut this: *mut Player,
                                             mut globalCtx:
                                                 *mut GlobalContext,
                                             mut input: *mut Input) {
    let mut pad: s32 = 0;
    sControlInput = input;
    if ((*this).unk_A86 as libc::c_int) < 0 as libc::c_int {
        (*this).unk_A86 += 1;
        if (*this).unk_A86 as libc::c_int == 0 as libc::c_int {
            (*this).unk_A86 = 1 as libc::c_int as s8;
            func_80078884(0x5806 as libc::c_int as u16_0);
        }
    }
    Math_Vec3f_Copy(&mut (*this).actor.prevPos, &mut (*this).actor.home.pos);
    if (*this).unk_A73 as libc::c_int != 0 as libc::c_int {
        (*this).unk_A73 = (*this).unk_A73.wrapping_sub(1)
    }
    if (*this).unk_88E as libc::c_int != 0 as libc::c_int {
        (*this).unk_88E = (*this).unk_88E.wrapping_sub(1)
    }
    if (*this).unk_A87 as libc::c_int != 0 as libc::c_int {
        (*this).unk_A87 = (*this).unk_A87.wrapping_sub(1)
    }
    if ((*this).invincibilityTimer as libc::c_int) < 0 as libc::c_int {
        (*this).invincibilityTimer += 1
    } else if (*this).invincibilityTimer as libc::c_int > 0 as libc::c_int {
        (*this).invincibilityTimer -= 1
    }
    if (*this).unk_890 as libc::c_int != 0 as libc::c_int {
        (*this).unk_890 = (*this).unk_890.wrapping_sub(1)
    }
    func_808473D4(globalCtx, this);
    func_80836BEC(this, globalCtx);
    if (*this).heldItemActionParam as libc::c_int ==
           PLAYER_AP_STICK as libc::c_int &&
           (*this).unk_860 as libc::c_int != 0 as libc::c_int {
        func_80848A04(globalCtx, this);
    } else if (*this).heldItemActionParam as libc::c_int ==
                  PLAYER_AP_FISHING_POLE as libc::c_int &&
                  ((*this).unk_860 as libc::c_int) < 0 as libc::c_int {
        (*this).unk_860 += 1
    }
    if (*this).shockTimer as libc::c_int != 0 as libc::c_int {
        func_80848B44(globalCtx, this);
    }
    if (*this).isBurning != 0 { func_80848C74(globalCtx, this); }
    if (*this).stateFlags3 as libc::c_int & 0x40 as libc::c_int != 0 &&
           gSaveContext.nayrusLoveTimer as libc::c_int != 0 as libc::c_int &&
           gSaveContext.unk_13F0 as libc::c_int == 0 as libc::c_int {
        gSaveContext.unk_13F0 = 3 as libc::c_int as s16;
        func_80846A00(globalCtx, this, 1 as libc::c_int);
        (*this).stateFlags3 =
            ((*this).stateFlags3 as libc::c_int & !(0x40 as libc::c_int)) as
                u8_0
    }
    if (*this).stateFlags2 & 0x8000 as libc::c_int as libc::c_uint != 0 {
        if (*this).actor.bgCheckFlags as libc::c_int & 1 as libc::c_int == 0 {
            func_80832210(this);
            Actor_MoveForward(&mut (*this).actor);
        }
        func_80847BA0(globalCtx, this);
    } else {
        let mut temp_f0: f32_0 = 0.;
        let mut phi_f12: f32_0 = 0.;
        if (*this).currentBoots as libc::c_int !=
               (*this).prevBoots as libc::c_int {
            if (*this).currentBoots as libc::c_int ==
                   PLAYER_BOOTS_IRON as libc::c_int {
                if (*this).stateFlags1 &
                       0x8000000 as libc::c_int as libc::c_uint != 0 {
                    func_80832340(globalCtx, this);
                    if (*(*this).ageProperties).unk_2C <
                           (*this).actor.yDistToWater {
                        (*this).stateFlags2 |=
                            0x400 as libc::c_int as libc::c_uint
                    }
                }
            } else if (*this).stateFlags1 &
                          0x8000000 as libc::c_int as libc::c_uint != 0 {
                if (*this).prevBoots as libc::c_int ==
                       PLAYER_BOOTS_IRON as libc::c_int ||
                       (*this).actor.bgCheckFlags as libc::c_int &
                           1 as libc::c_int != 0 {
                    func_8083D36C(globalCtx, this);
                    (*this).stateFlags2 &=
                        !(0x400 as libc::c_int) as libc::c_uint
                }
            }
            (*this).prevBoots = (*this).currentBoots
        }
        if (*this).actor.parent.is_null() &&
               (*this).stateFlags1 & 0x800000 as libc::c_int as libc::c_uint
                   != 0 {
            (*this).actor.parent = (*this).rideActor;
            func_8083A360(globalCtx, this);
            (*this).stateFlags1 |= 0x800000 as libc::c_int as libc::c_uint;
            func_80832264(globalCtx, this, &mut gPlayerAnim_0033B8);
            func_80832F54(globalCtx, this, 0x9b as libc::c_int);
            (*this).unk_850 = 99 as libc::c_int as s16
        }
        if (*this).unk_844 as libc::c_int == 0 as libc::c_int {
            (*this).unk_845 = 0 as libc::c_int as u8_0
        } else if ((*this).unk_844 as libc::c_int) < 0 as libc::c_int {
            (*this).unk_844 += 1
        } else { (*this).unk_844 -= 1 }
        Math_ScaledStepToS(&mut (*this).unk_6C2, 0 as libc::c_int as s16,
                           400 as libc::c_int as s16);
        func_80032CB4((*this).unk_3A8.as_mut_ptr(), 20 as libc::c_int as s16,
                      80 as libc::c_int as s16, 6 as libc::c_int as s16);
        (*this).actor.shape.face =
            ((*this).unk_3A8[0 as libc::c_int as usize] as libc::c_int +
                 (if (*globalCtx).gameplayFrames &
                         32 as libc::c_int as libc::c_uint != 0 {
                      0 as libc::c_int
                  } else { 3 as libc::c_int })) as s16;
        if (*this).currentMask as libc::c_int ==
               PLAYER_MASK_BUNNY as libc::c_int {
            func_8085002C(this);
        }
        if func_8002DD6C(this) != 0 as libc::c_int { func_8084FF7C(this); }
        if (*this).skelAnime.moveFlags as libc::c_int & 0x80 as libc::c_int ==
               0 {
            if (*this).actor.bgCheckFlags as libc::c_int & 1 as libc::c_int !=
                   0 && D_808535E4 == 5 as libc::c_int &&
                   (*this).currentBoots as libc::c_int !=
                       PLAYER_BOOTS_IRON as libc::c_int ||
                   (*this).currentBoots as libc::c_int ==
                       PLAYER_BOOTS_HOVER as libc::c_int &&
                       (*this).stateFlags1 &
                           0x28000000 as libc::c_int as libc::c_uint == 0 {
                let mut sp70: f32_0 = (*this).linearVelocity;
                let mut sp6E: s16 = (*this).currentYaw;
                let mut yawDiff: s16 =
                    ((*this).actor.world.rot.y as libc::c_int -
                         sp6E as libc::c_int) as s16;
                let mut pad_0: s32 = 0;
                if (if yawDiff as libc::c_int >= 0 as libc::c_int {
                        yawDiff as libc::c_int
                    } else { -(yawDiff as libc::c_int) }) >
                       0x6000 as libc::c_int &&
                       (*this).actor.speedXZ != 0.0f32 {
                    sp70 = 0.0f32;
                    sp6E =
                        (sp6E as libc::c_int + 0x8000 as libc::c_int) as s16
                }
                if Math_StepToF(&mut (*this).actor.speedXZ, sp70, 0.35f32) !=
                       0 && sp70 == 0.0f32 {
                    (*this).actor.world.rot.y = (*this).currentYaw
                }
                if (*this).linearVelocity != 0.0f32 {
                    let mut phi_v0: s32 = 0;
                    phi_v0 =
                        (fabsf((*this).linearVelocity) * 700.0f32 -
                             fabsf((*this).actor.speedXZ) * 100.0f32) as s32;
                    phi_v0 =
                        if phi_v0 < 0 as libc::c_int {
                            0 as libc::c_int
                        } else if phi_v0 > 1350 as libc::c_int {
                            1350 as libc::c_int
                        } else { phi_v0 };
                    Math_ScaledStepToS(&mut (*this).actor.world.rot.y, sp6E,
                                       phi_v0 as s16);
                }
                if (*this).linearVelocity == 0.0f32 &&
                       (*this).actor.speedXZ != 0.0f32 {
                    func_800F4138(&mut (*this).actor.projectedPos,
                                  0xd0 as libc::c_int as u16_0,
                                  (*this).actor.speedXZ);
                }
            } else {
                (*this).actor.speedXZ = (*this).linearVelocity;
                (*this).actor.world.rot.y = (*this).currentYaw
            }
            func_8002D868(&mut (*this).actor);
            if (*this).windSpeed != 0.0f32 && Player_InCsMode(globalCtx) == 0
                   &&
                   (*this).stateFlags1 &
                       0x206000 as libc::c_int as libc::c_uint == 0 &&
                   Some(func_80845668 as
                            unsafe extern "C" fn(_: *mut Player,
                                                 _: *mut GlobalContext) -> ())
                       != (*this).func_674 &&
                   Some(func_808507F4 as
                            unsafe extern "C" fn(_: *mut Player,
                                                 _: *mut GlobalContext) -> ())
                       != (*this).func_674 {
                (*this).actor.velocity.x +=
                    (*this).windSpeed * Math_SinS((*this).windDirection);
                (*this).actor.velocity.z +=
                    (*this).windSpeed * Math_CosS((*this).windDirection)
            }
            func_8002D7EC(&mut (*this).actor);
            func_80847BA0(globalCtx, this);
        } else {
            D_808535E4 = 0 as libc::c_int;
            (*this).unk_A7A = 0 as libc::c_int as u8_0;
            if (*this).stateFlags1 & 1 as libc::c_int as libc::c_uint == 0 &&
                   (*this).stateFlags1 &
                       0x800000 as libc::c_int as libc::c_uint != 0 {
                let mut rideActor: *mut EnHorse =
                    (*this).rideActor as *mut EnHorse;
                let mut sp5C: *mut CollisionPoly = 0 as *mut CollisionPoly;
                let mut sp58: s32 = 0;
                let mut sp4C: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
                if (*rideActor).actor.bgCheckFlags as libc::c_int &
                       1 as libc::c_int == 0 {
                    func_808396F4(globalCtx, this, &mut D_80854814, &mut sp4C,
                                  &mut sp5C, &mut sp58);
                } else {
                    sp5C = (*rideActor).actor.floorPoly;
                    sp58 = (*rideActor).actor.floorBgId as s32
                }
                if !sp5C.is_null() &&
                       func_80839034(globalCtx, this, sp5C, sp58 as u32_0) !=
                           0 {
                    if (*gGameInfo).data[(7 as libc::c_int * 6 as libc::c_int
                                              * 16 as libc::c_int +
                                              25 as libc::c_int) as usize] as
                           libc::c_int != 0 as libc::c_int {
                        (*gGameInfo).data[(7 as libc::c_int * 6 as libc::c_int
                                               * 16 as libc::c_int +
                                               25 as libc::c_int) as usize] =
                            0 as libc::c_int as s16
                    } else {
                        (*gGameInfo).data[(19 as libc::c_int *
                                               6 as libc::c_int *
                                               16 as libc::c_int +
                                               6 as libc::c_int) as usize] =
                            1 as libc::c_int as s16
                    }
                }
            }
            D_808535F4 = 0 as libc::c_int as u32_0;
            (*this).windSpeed = 0.0f32
        }
        if D_808535F4 != 0 as libc::c_int as libc::c_uint &&
               (*this).currentBoots as libc::c_int !=
                   PLAYER_BOOTS_IRON as libc::c_int {
            let mut sp48: f32_0 = 0.;
            D_808535F4 = D_808535F4.wrapping_sub(1);
            if D_808535F8 as libc::c_int == 0 as libc::c_int {
                sp48 = D_80854820[D_808535F4 as usize];
                if (*this).stateFlags1 &
                       0x8000000 as libc::c_int as libc::c_uint == 0 {
                    sp48 *= 0.25f32
                }
            } else { sp48 = D_8085482C[D_808535F4 as usize] }
            Math_StepToF(&mut (*this).windSpeed, sp48, sp48 * 0.1f32);
            Math_ScaledStepToS(&mut (*this).windDirection, D_808535FC,
                               ((if (*this).stateFlags1 &
                                        0x8000000 as libc::c_int as
                                            libc::c_uint != 0 {
                                     400.0f32
                                 } else { 800.0f32 }) * sp48) as s16);
        } else if (*this).windSpeed != 0.0f32 {
            Math_StepToF(&mut (*this).windSpeed, 0.0f32,
                         if (*this).stateFlags1 &
                                0x8000000 as libc::c_int as libc::c_uint != 0
                            {
                             0.5f32
                         } else { 1.0f32 });
        }
        if Player_InBlockingCsMode(globalCtx, this) == 0 &&
               (*this).stateFlags2 & 0x40000 as libc::c_int as libc::c_uint ==
                   0 {
            func_8083D53C(globalCtx, this);
            if (*this).actor.category as libc::c_int ==
                   ACTORCAT_PLAYER as libc::c_int &&
                   gSaveContext.health as libc::c_int == 0 as libc::c_int {
                if (*this).stateFlags1 &
                       0x206000 as libc::c_int as libc::c_uint != 0 {
                    func_80832440(globalCtx, this);
                    func_80837B9C(this, globalCtx);
                } else if (*this).actor.bgCheckFlags as libc::c_int &
                              1 as libc::c_int != 0 ||
                              (*this).stateFlags1 &
                                  0x8000000 as libc::c_int as libc::c_uint !=
                                  0 {
                    func_80836448(globalCtx, this,
                                  if func_808332B8(this) != 0 {
                                      &mut gPlayerAnim_003310
                                  } else if (*this).shockTimer as libc::c_int
                                                != 0 as libc::c_int {
                                      &mut gPlayerAnim_002F08
                                  } else { &mut gPlayerAnim_002878 });
                }
            } else {
                if (*this).actor.parent.is_null() &&
                       ((*globalCtx).sceneLoadFlag as libc::c_int ==
                            0x14 as libc::c_int ||
                            (*this).unk_A87 as libc::c_int != 0 as libc::c_int
                            || func_808382DC(this, globalCtx) == 0) {
                    func_8083AA10(this, globalCtx);
                } else {
                    (*this).fallStartHeight = (*this).actor.world.pos.y as s16
                }
                func_80848EF8(this);
            }
        }
        if (*globalCtx).csCtx.state as libc::c_int !=
               CS_STATE_IDLE as libc::c_int &&
               (*this).csMode as libc::c_int != 6 as libc::c_int &&
               (*this).stateFlags1 & 0x800000 as libc::c_int as libc::c_uint
                   == 0 &&
               (*this).stateFlags2 & 0x80 as libc::c_int as libc::c_uint == 0
               &&
               (*this).actor.category as libc::c_int ==
                   ACTORCAT_PLAYER as libc::c_int {
            let mut linkActionCsCmd: *mut CsCmdActorAction =
                (*globalCtx).csCtx.linkAction;
            if !linkActionCsCmd.is_null() &&
                   D_808547C4[(*linkActionCsCmd).action as usize] as
                       libc::c_int != 0 as libc::c_int {
                func_8002DF54(globalCtx, 0 as *mut Actor,
                              6 as libc::c_int as u8_0);
                func_80832210(this);
            } else if (*this).csMode as libc::c_int == 0 as libc::c_int &&
                          (*this).stateFlags2 &
                              0x400 as libc::c_int as libc::c_uint == 0 &&
                          (*globalCtx).csCtx.state as libc::c_int !=
                              CS_STATE_UNSKIPPABLE_INIT as libc::c_int {
                func_8002DF54(globalCtx, 0 as *mut Actor,
                              0x31 as libc::c_int as u8_0);
                func_80832210(this);
            }
        }
        if (*this).csMode as libc::c_int != 0 as libc::c_int {
            if (*this).csMode as libc::c_int != 7 as libc::c_int ||
                   (*this).stateFlags1 &
                       0x4206000 as libc::c_int as libc::c_uint == 0 {
                (*this).unk_6AD = 3 as libc::c_int as u8_0
            } else if Some(func_80852E14 as
                               unsafe extern "C" fn(_: *mut Player,
                                                    _: *mut GlobalContext)
                                   -> ()) != (*this).func_674 {
                func_80852944(globalCtx, this, 0 as *mut CsCmdActorAction);
            }
        } else { (*this).prevCsMode = 0 as libc::c_int as u8_0 }
        func_8083D6EC(globalCtx, this);
        if (*this).unk_664.is_null() &&
               (*this).naviTextId as libc::c_int == 0 as libc::c_int {
            (*this).stateFlags2 &= !(0x200002 as libc::c_int) as libc::c_uint
        }
        (*this).stateFlags1 &= !(0x401202 as libc::c_int) as libc::c_uint;
        (*this).stateFlags2 &= !(0x441536d as libc::c_int) as libc::c_uint;
        (*this).stateFlags3 =
            ((*this).stateFlags3 as libc::c_int & !(0x10 as libc::c_int)) as
                u8_0;
        func_80847298(this);
        func_8083315C(globalCtx, this);
        if (*this).stateFlags1 & 0x8000000 as libc::c_int as libc::c_uint != 0
           {
            D_808535E8 = 0.5f32
        } else { D_808535E8 = 1.0f32 }
        D_808535EC = 1.0f32 / D_808535E8;
        D_80853618 = 0 as libc::c_int;
        D_80853614 = D_80853618;
        D_80858AA4 = (*this).currentMask as s32;
        if (*this).stateFlags3 as libc::c_int & 4 as libc::c_int == 0 {
            (*this).func_674.expect("non-null function pointer")(this,
                                                                 globalCtx);
        }
        Player_UpdateCamAndSeqModes(globalCtx, this);
        if (*this).skelAnime.moveFlags as libc::c_int & 8 as libc::c_int != 0
           {
            AnimationContext_SetMoveActor(globalCtx, &mut (*this).actor,
                                          &mut (*this).skelAnime,
                                          if (*this).skelAnime.moveFlags as
                                                 libc::c_int &
                                                 4 as libc::c_int != 0 {
                                              1.0f32
                                          } else {
                                              (*(*this).ageProperties).unk_08
                                          });
        }
        func_808368EC(this, globalCtx);
        if (*this).actor.flags &
               ((1 as libc::c_int) << 8 as libc::c_int) as libc::c_uint ==
               ((1 as libc::c_int) << 8 as libc::c_int) as libc::c_uint {
            (*this).targetActorDistance = 0.0f32
        } else {
            (*this).targetActor = 0 as *mut Actor;
            (*this).targetActorDistance =
                340282346638528859811704183484516925440.0f32;
            (*this).exchangeItemId = EXCH_ITEM_NONE as libc::c_int as s8
        }
        if (*this).stateFlags1 & 0x800 as libc::c_int as libc::c_uint == 0 {
            (*this).interactRangeActor = 0 as *mut Actor;
            (*this).getItemDirection = 0x6000 as libc::c_int as u16_0
        }
        if (*this).actor.parent.is_null() {
            (*this).rideActor = 0 as *mut Actor
        }
        (*this).naviTextId = 0 as libc::c_int as s16;
        if (*this).stateFlags2 & 0x2000000 as libc::c_int as libc::c_uint == 0
           {
            (*this).unk_6A8 = 0 as *mut Actor
        }
        (*this).stateFlags2 &= !(0x800000 as libc::c_int) as libc::c_uint;
        (*this).unk_6A4 = 340282346638528859811704183484516925440.0f32;
        temp_f0 = (*this).actor.world.pos.y - (*this).actor.prevPos.y;
        (*this).doorType = PLAYER_DOORTYPE_NONE as libc::c_int as s8;
        (*this).unk_8A1 = 0 as libc::c_int as u8_0;
        (*this).unk_684 = 0 as *mut Actor;
        phi_f12 =
            ((*this).bodyPartsPos[6 as libc::c_int as usize].y +
                 (*this).bodyPartsPos[3 as libc::c_int as usize].y) * 0.5f32 +
                temp_f0;
        temp_f0 +=
            (*this).bodyPartsPos[7 as libc::c_int as usize].y + 10.0f32;
        (*this).cylinder.dim.height = (temp_f0 - phi_f12) as s16;
        if ((*this).cylinder.dim.height as libc::c_int) < 0 as libc::c_int {
            phi_f12 = temp_f0;
            (*this).cylinder.dim.height =
                -((*this).cylinder.dim.height as libc::c_int) as s16
        }
        (*this).cylinder.dim.yShift =
            (phi_f12 - (*this).actor.world.pos.y) as s16;
        if (*this).stateFlags1 & 0x400000 as libc::c_int as libc::c_uint != 0
           {
            (*this).cylinder.dim.height =
                ((*this).cylinder.dim.height as libc::c_int as libc::c_float *
                     0.8f32) as s16
        }
        Collider_UpdateCylinder(&mut (*this).actor, &mut (*this).cylinder);
        if (*this).stateFlags2 & 0x4000 as libc::c_int as libc::c_uint == 0 {
            if (*this).stateFlags1 & 0x806080 as libc::c_int as libc::c_uint
                   == 0 {
                CollisionCheck_SetOC(globalCtx, &mut (*globalCtx).colChkCtx,
                                     &mut (*this).cylinder.base);
            }
            if (*this).stateFlags1 & 0x4000080 as libc::c_int as libc::c_uint
                   == 0 &&
                   (*this).invincibilityTimer as libc::c_int <=
                       0 as libc::c_int {
                CollisionCheck_SetAC(globalCtx, &mut (*globalCtx).colChkCtx,
                                     &mut (*this).cylinder.base);
                if ((*this).invincibilityTimer as libc::c_int) <
                       0 as libc::c_int {
                    CollisionCheck_SetAT(globalCtx,
                                         &mut (*globalCtx).colChkCtx,
                                         &mut (*this).cylinder.base);
                }
            }
        }
        AnimationContext_SetNextQueue(globalCtx);
    }
    Math_Vec3f_Copy(&mut (*this).actor.home.pos,
                    &mut (*this).actor.world.pos);
    Math_Vec3f_Copy(&mut (*this).unk_A88,
                    &mut *(*this).bodyPartsPos.as_mut_ptr().offset(0 as
                                                                       libc::c_int
                                                                       as
                                                                       isize));
    if (*this).stateFlags1 & 0x30000080 as libc::c_int as libc::c_uint != 0 {
        (*this).actor.colChkInfo.mass = 0xff as libc::c_int as u8_0
    } else { (*this).actor.colChkInfo.mass = 50 as libc::c_int as u8_0 }
    (*this).stateFlags3 =
        ((*this).stateFlags3 as libc::c_int & !(4 as libc::c_int)) as u8_0;
    Collider_ResetCylinderAC(globalCtx, &mut (*this).cylinder.base);
    Collider_ResetQuadAT(globalCtx,
                         &mut (*(*this).swordQuads.as_mut_ptr().offset(0 as
                                                                           libc::c_int
                                                                           as
                                                                           isize)).base);
    Collider_ResetQuadAT(globalCtx,
                         &mut (*(*this).swordQuads.as_mut_ptr().offset(1 as
                                                                           libc::c_int
                                                                           as
                                                                           isize)).base);
    Collider_ResetQuadAC(globalCtx, &mut (*this).shieldQuad.base);
    Collider_ResetQuadAT(globalCtx, &mut (*this).shieldQuad.base);
}
static mut D_80854838: Vec3f =
    { let mut init = Vec3f{x: 0.0f32, y: 0.0f32, z: -30.0f32,}; init };
#[no_mangle]
pub unsafe extern "C" fn Player_Update(mut thisx: *mut Actor,
                                       mut globalCtx: *mut GlobalContext) {
    static mut sDogSpawnPos: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut this: *mut Player = thisx as *mut Player;
    let mut dogParams: s32 = 0;
    let mut pad: s32 = 0;
    let mut sp44: Input =
        Input{cur: OSContPad{button: 0, stick_x: 0, stick_y: 0, errno: 0,},
              prev: OSContPad{button: 0, stick_x: 0, stick_y: 0, errno: 0,},
              press: OSContPad{button: 0, stick_x: 0, stick_y: 0, errno: 0,},
              rel: OSContPad{button: 0, stick_x: 0, stick_y: 0, errno: 0,},};
    let mut dog: *mut Actor = 0 as *mut Actor;
    if func_8084FCAC(this, globalCtx) != 0 {
        if (gSaveContext.dogParams as libc::c_int) < 0 as libc::c_int {
            if Object_GetIndex(&mut (*globalCtx).objectCtx,
                               OBJECT_DOG as libc::c_int as s16) <
                   0 as libc::c_int {
                gSaveContext.dogParams = 0 as libc::c_int as s16
            } else {
                gSaveContext.dogParams =
                    (gSaveContext.dogParams as libc::c_int &
                         0x7fff as libc::c_int) as s16;
                func_808395DC(this, &mut (*this).actor.world.pos,
                              &mut D_80854838, &mut sDogSpawnPos);
                dogParams = gSaveContext.dogParams as s32;
                dog =
                    Actor_Spawn(&mut (*globalCtx).actorCtx, globalCtx,
                                ACTOR_EN_DOG as libc::c_int as s16,
                                sDogSpawnPos.x, sDogSpawnPos.y,
                                sDogSpawnPos.z, 0 as libc::c_int as s16,
                                (*this).actor.shape.rot.y,
                                0 as libc::c_int as s16,
                                (dogParams | 0x8000 as libc::c_int) as s16);
                if !dog.is_null() { (*dog).room = 0 as libc::c_int as s8 }
            }
        }
        if !(*this).interactRangeActor.is_null() &&
               (*(*this).interactRangeActor).update.is_none() {
            (*this).interactRangeActor = 0 as *mut Actor
        }
        if !(*this).heldActor.is_null() &&
               (*(*this).heldActor).update.is_none() {
            func_808323B4(globalCtx, this);
        }
        if (*this).stateFlags1 & 0x20000020 as libc::c_int as libc::c_uint !=
               0 {
            bzero(&mut sp44 as *mut Input as *mut libc::c_void,
                  ::std::mem::size_of::<Input>() as libc::c_ulong);
        } else {
            sp44 = (*globalCtx).state.input[0 as libc::c_int as usize];
            if (*this).unk_88E as libc::c_int != 0 as libc::c_int {
                sp44.cur.button =
                    (sp44.cur.button as libc::c_int &
                         !(0x8000 as libc::c_int | 0x4000 as libc::c_int |
                               0x8 as libc::c_int)) as u16_0;
                sp44.press.button =
                    (sp44.press.button as libc::c_int &
                         !(0x8000 as libc::c_int | 0x4000 as libc::c_int |
                               0x8 as libc::c_int)) as u16_0
            }
        }
        Player_UpdateCommon(this, globalCtx, &mut sp44);
    }
    (*gGameInfo).data[(5 as libc::c_int * 6 as libc::c_int * 16 as libc::c_int
                           + 52 as libc::c_int) as usize] =
        (*this).actor.world.pos.x as s16;
    (*gGameInfo).data[(5 as libc::c_int * 6 as libc::c_int * 16 as libc::c_int
                           + 53 as libc::c_int) as usize] =
        (*this).actor.world.pos.y as s16;
    (*gGameInfo).data[(5 as libc::c_int * 6 as libc::c_int * 16 as libc::c_int
                           + 54 as libc::c_int) as usize] =
        (*this).actor.world.pos.z as s16;
    (*gGameInfo).data[(5 as libc::c_int * 6 as libc::c_int * 16 as libc::c_int
                           + 55 as libc::c_int) as usize] =
        (*this).actor.world.rot.y;
}
static mut D_80858AC8: struct_80858AC8 =
    struct_80858AC8{unk_00: 0, unk_02: 0, unk_04: 0, unk_06: 0, unk_08: 0,};
static mut D_80858AD8: [Vec3s; 25] = [Vec3s{x: 0, y: 0, z: 0,}; 25];
static mut sMaskDlists: [*mut Gfx; 8] =
    unsafe {
        [gLinkChildKeatonMaskDL.as_ptr() as *mut _,
         gLinkChildSkullMaskDL.as_ptr() as *mut _,
         gLinkChildSpookyMaskDL.as_ptr() as *mut _,
         gLinkChildBunnyHoodDL.as_ptr() as *mut _,
         gLinkChildGoronMaskDL.as_ptr() as *mut _,
         gLinkChildZoraMaskDL.as_ptr() as *mut _,
         gLinkChildGerudoMaskDL.as_ptr() as *mut _,
         gLinkChildMaskOfTruthDL.as_ptr() as *mut _]
    };
static mut D_80854864: Vec3s =
    {
        let mut init =
            Vec3s{x: 0 as libc::c_int as s16,
                  y: 0 as libc::c_int as s16,
                  z: 0 as libc::c_int as s16,};
        init
    };
#[no_mangle]
pub unsafe extern "C" fn func_8084A0E8(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player, mut lod: s32,
                                       mut cullDList: *mut Gfx,
                                       mut overrideLimbDraw:
                                           OverrideLimbDrawOpa) {
    static mut D_8085486C: s32 = 255 as libc::c_int;
    let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
    let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
    __gfxCtx = (*globalCtx).state.gfxCtx;
    Graph_OpenDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                    b"../z_player.c\x00" as *const u8 as *const libc::c_char,
                    19228 as libc::c_int);
    let fresh1 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g: *mut Gfx = fresh1;
    (*_g).words.w0 =
        (0xdb as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0x6 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            ((0xc as libc::c_int * 4 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g).words.w1 = cullDList as libc::c_uint;
    let fresh2 = (*__gfxCtx).polyXlu.p;
    (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
    let mut _g_0: *mut Gfx = fresh2;
    (*_g_0).words.w0 =
        (0xdb as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0x6 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            ((0xc as libc::c_int * 4 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_0).words.w1 = cullDList as libc::c_uint;
    func_8008F470(globalCtx, (*this).skelAnime.skeleton,
                  (*this).skelAnime.jointTable,
                  (*this).skelAnime.dListCount as s32, lod,
                  (*this).currentTunic as s32, (*this).currentBoots as s32,
                  (*this).actor.shape.face as s32, overrideLimbDraw,
                  Some(func_80090D20 as
                           unsafe extern "C" fn(_: *mut GlobalContext, _: s32,
                                                _: *mut *mut Gfx,
                                                _: *mut Vec3s,
                                                _: *mut libc::c_void) -> ()),
                  this as *mut libc::c_void);
    if overrideLimbDraw ==
           Some(func_80090014 as
                    unsafe extern "C" fn(_: *mut GlobalContext, _: s32,
                                         _: *mut *mut Gfx, _: *mut Vec3f,
                                         _: *mut Vec3s, _: *mut libc::c_void)
                        -> s32) &&
           (*this).currentMask as libc::c_int !=
               PLAYER_MASK_NONE as libc::c_int {
        let mut sp70: *mut Mtx =
            Graph_Alloc((*globalCtx).state.gfxCtx,
                        (2 as libc::c_int as
                             libc::c_uint).wrapping_mul(::std::mem::size_of::<Mtx>()
                                                            as libc::c_ulong)
                            as size_t) as *mut Mtx;
        if (*this).currentMask as libc::c_int ==
               PLAYER_MASK_BUNNY as libc::c_int {
            let mut sp68: Vec3s = Vec3s{x: 0, y: 0, z: 0,};
            let fresh3 = (*__gfxCtx).polyOpa.p;
            (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
            let mut _g_1: *mut Gfx = fresh3;
            (*_g_1).words.w0 =
                (0xdb as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0x6 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    ((0xb as libc::c_int * 4 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_1).words.w1 = sp70 as libc::c_uint;
            sp68.x =
                (D_80858AC8.unk_02 as libc::c_int + 0x3e2 as libc::c_int) as
                    s16;
            sp68.y =
                (D_80858AC8.unk_04 as libc::c_int + 0xdbe as libc::c_int) as
                    s16;
            sp68.z =
                (D_80858AC8.unk_00 as libc::c_int - 0x348a as libc::c_int) as
                    s16;
            func_800D1694(97.0f32, -1203.0f32, -240.0f32, &mut sp68);
            let fresh4 = sp70;
            sp70 = sp70.offset(1);
            Matrix_ToMtx(fresh4,
                         b"../z_player.c\x00" as *const u8 as
                             *const libc::c_char as *mut libc::c_char,
                         19273 as libc::c_int);
            sp68.x =
                (D_80858AC8.unk_02 as libc::c_int - 0x3e2 as libc::c_int) as
                    s16;
            sp68.y =
                (-(0xdbe as libc::c_int) - D_80858AC8.unk_04 as libc::c_int)
                    as s16;
            sp68.z =
                (D_80858AC8.unk_00 as libc::c_int - 0x348a as libc::c_int) as
                    s16;
            func_800D1694(97.0f32, -1203.0f32, 240.0f32, &mut sp68);
            Matrix_ToMtx(sp70,
                         b"../z_player.c\x00" as *const u8 as
                             *const libc::c_char as *mut libc::c_char,
                         19279 as libc::c_int);
        }
        let fresh5 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_2: *mut Gfx = fresh5;
        (*_g_2).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_2).words.w1 =
            sMaskDlists[((*this).currentMask as libc::c_int -
                             1 as libc::c_int) as usize] as libc::c_uint
    }
    if (*this).currentBoots as libc::c_int ==
           PLAYER_BOOTS_HOVER as libc::c_int &&
           (*this).actor.bgCheckFlags as libc::c_int & 1 as libc::c_int == 0
           &&
           (*this).stateFlags1 & 0x800000 as libc::c_int as libc::c_uint == 0
           && (*this).hoverBootsTimer as libc::c_int != 0 as libc::c_int {
        let mut sp5C: s32 = 0;
        let mut hoverBootsTimer: s32 = (*this).hoverBootsTimer as s32;
        if ((*this).hoverBootsTimer as libc::c_int) < 19 as libc::c_int {
            if hoverBootsTimer >= 15 as libc::c_int {
                D_8085486C =
                    ((19 as libc::c_int - hoverBootsTimer) as libc::c_float *
                         51.0f32) as s32
            } else if hoverBootsTimer < 19 as libc::c_int {
                sp5C = hoverBootsTimer;
                if sp5C > 9 as libc::c_int { sp5C = 9 as libc::c_int }
                D_8085486C = -sp5C * 4 as libc::c_int + 36 as libc::c_int;
                D_8085486C = D_8085486C * D_8085486C;
                D_8085486C =
                    ((Math_CosS(D_8085486C as s16) * 100.0f32 + 100.0f32) as
                         s32 as libc::c_float + 55.0f32) as s32;
                D_8085486C =
                    (D_8085486C as libc::c_float *
                         (sp5C as libc::c_float * (1.0f32 / 9.0f32))) as s32
            }
            func_800D1694((*this).actor.world.pos.x,
                          (*this).actor.world.pos.y + 2.0f32,
                          (*this).actor.world.pos.z, &mut D_80854864);
            Matrix_Scale(4.0f32, 4.0f32, 4.0f32,
                         MTXMODE_APPLY as libc::c_int as u8_0);
            let fresh6 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_3: *mut Gfx = fresh6;
            (*_g_3).words.w0 =
                (0xda as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((::std::mem::size_of::<Mtx>() as
                          libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                          libc::c_uint).wrapping_div(8
                                                                                         as
                                                                                         libc::c_int
                                                                                         as
                                                                                         libc::c_uint)
                         &
                         (((0x1 as libc::c_int) << 5 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (((0 as libc::c_int | 0x2 as libc::c_int |
                           0 as libc::c_int) ^ 0x1 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_3).words.w1 =
                Matrix_NewMtx((*globalCtx).state.gfxCtx,
                              b"../z_player.c\x00" as *const u8 as
                                  *const libc::c_char as *mut libc::c_char,
                              19317 as libc::c_int) as libc::c_uint;
            let fresh7 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_4: *mut Gfx = fresh7;
            (*_g_4).words.w0 =
                (0xdb as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0x6 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    ((0x8 as libc::c_int * 4 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_4).words.w1 =
                Gfx_TwoTexScroll((*globalCtx).state.gfxCtx, 0 as libc::c_int,
                                 0 as libc::c_int as u32_0,
                                 0 as libc::c_int as u32_0, 16 as libc::c_int,
                                 32 as libc::c_int, 1 as libc::c_int,
                                 0 as libc::c_int as u32_0,
                                 (*globalCtx).gameplayFrames.wrapping_mul(-(15
                                                                                as
                                                                                libc::c_int)
                                                                              as
                                                                              libc::c_uint).wrapping_rem(128
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             libc::c_uint),
                                 16 as libc::c_int, 32 as libc::c_int) as
                    libc::c_uint;
            let fresh8 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_5: *mut Gfx = fresh8;
            (*_g_5).words.w0 =
                (0xfa as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0x80 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0x80 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_5).words.w1 =
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (D_8085486C as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh9 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_6: *mut Gfx = fresh9;
            (*_g_6).words.w0 =
                (0xfb as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_6).words.w1 =
                (120 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (90 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (30 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (128 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh10 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_7: *mut Gfx = fresh10;
            (*_g_7).words.w0 =
                (0xde as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_7).words.w1 =
                gHoverBootsCircleDL.as_mut_ptr() as libc::c_uint
        }
    }
    Graph_CloseDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                     b"../z_player.c\x00" as *const u8 as *const libc::c_char,
                     19328 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn Player_Draw(mut thisx: *mut Actor,
                                     mut globalCtx2: *mut GlobalContext) {
    let mut globalCtx: *mut GlobalContext = globalCtx2;
    let mut this: *mut Player = thisx as *mut Player;
    let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
    let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
    __gfxCtx = (*globalCtx).state.gfxCtx;
    Graph_OpenDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                    b"../z_player.c\x00" as *const u8 as *const libc::c_char,
                    19346 as libc::c_int);
    if (*this).stateFlags2 & 0x20000000 as libc::c_int as libc::c_uint == 0 {
        let mut overrideLimbDraw: OverrideLimbDrawOpa =
            Some(func_80090014 as
                     unsafe extern "C" fn(_: *mut GlobalContext, _: s32,
                                          _: *mut *mut Gfx, _: *mut Vec3f,
                                          _: *mut Vec3s, _: *mut libc::c_void)
                         -> s32);
        let mut lod: s32 = 0;
        let mut pad: s32 = 0;
        if (*this).csMode as libc::c_int != 0 as libc::c_int ||
               func_8008E9C4(this) != 0 && 0 as libc::c_int != 0 ||
               (*this).actor.projectedPos.z < 160.0f32 {
            lod = 0 as libc::c_int
        } else { lod = 1 as libc::c_int }
        func_80093C80(globalCtx);
        func_80093D84((*globalCtx).state.gfxCtx);
        if (*this).invincibilityTimer as libc::c_int > 0 as libc::c_int {
            (*this).unk_88F =
                ((*this).unk_88F as libc::c_int +
                     if (50 as libc::c_int -
                             (*this).invincibilityTimer as libc::c_int) <
                            8 as libc::c_int {
                         8 as libc::c_int
                     } else if 50 as libc::c_int -
                                   (*this).invincibilityTimer as libc::c_int >
                                   40 as libc::c_int {
                         40 as libc::c_int
                     } else {
                         (50 as libc::c_int) -
                             (*this).invincibilityTimer as libc::c_int
                     }) as u8_0;
            (*__gfxCtx).polyOpa.p =
                Gfx_SetFog2((*__gfxCtx).polyOpa.p, 255 as libc::c_int,
                            0 as libc::c_int, 0 as libc::c_int,
                            0 as libc::c_int, 0 as libc::c_int,
                            4000 as libc::c_int -
                                (Math_CosS(((*this).unk_88F as libc::c_int *
                                                256 as libc::c_int) as s16) *
                                     2000.0f32) as s32)
        }
        func_8002EBCC(&mut (*this).actor, globalCtx, 0 as libc::c_int);
        func_8002ED80(&mut (*this).actor, globalCtx, 0 as libc::c_int);
        if (*this).unk_6AD as libc::c_int != 0 as libc::c_int {
            let mut sp7C: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
            SkinMatrix_Vec3fMtxFMultXYZ(&mut (*globalCtx).viewProjectionMtxF,
                                        &mut (*this).actor.focus.pos,
                                        &mut sp7C);
            if sp7C.z < -4.0f32 {
                overrideLimbDraw =
                    Some(func_800902F0 as
                             unsafe extern "C" fn(_: *mut GlobalContext,
                                                  _: s32, _: *mut *mut Gfx,
                                                  _: *mut Vec3f,
                                                  _: *mut Vec3s,
                                                  _: *mut libc::c_void)
                                 -> s32)
            }
        } else if (*this).stateFlags2 & 0x40000 as libc::c_int as libc::c_uint
                      != 0 {
            if (*this).actor.projectedPos.z < 0.0f32 {
                overrideLimbDraw =
                    Some(func_80090440 as
                             unsafe extern "C" fn(_: *mut GlobalContext,
                                                  _: s32, _: *mut *mut Gfx,
                                                  _: *mut Vec3f,
                                                  _: *mut Vec3s,
                                                  _: *mut libc::c_void)
                                 -> s32)
            }
        }
        if (*this).stateFlags2 & 0x4000000 as libc::c_int as libc::c_uint != 0
           {
            let mut sp78: f32_0 =
                (*globalCtx).gameplayFrames.wrapping_mul(600 as libc::c_int as
                                                             libc::c_uint) as
                    u16_0 as libc::c_int as libc::c_float *
                    3.14159265358979323846f32 /
                    0x8000 as libc::c_int as libc::c_float;
            let mut sp74: f32_0 =
                (*globalCtx).gameplayFrames.wrapping_mul(1000 as libc::c_int
                                                             as libc::c_uint)
                    as u16_0 as libc::c_int as libc::c_float *
                    3.14159265358979323846f32 /
                    0x8000 as libc::c_int as libc::c_float;
            Matrix_Push();
            (*this).actor.scale.y = -(*this).actor.scale.y;
            func_800D1694((*this).actor.world.pos.x,
                          (*this).actor.floorHeight +
                              ((*this).actor.floorHeight -
                                   (*this).actor.world.pos.y) +
                              (*this).actor.shape.yOffset *
                                  (*this).actor.scale.y,
                          (*this).actor.world.pos.z,
                          &mut (*this).actor.shape.rot);
            Matrix_Scale((*this).actor.scale.x, (*this).actor.scale.y,
                         (*this).actor.scale.z,
                         MTXMODE_APPLY as libc::c_int as u8_0);
            Matrix_RotateX(sp78, MTXMODE_APPLY as libc::c_int as u8_0);
            Matrix_RotateY(sp74, MTXMODE_APPLY as libc::c_int as u8_0);
            Matrix_Scale(1.1f32, 0.95f32, 1.05f32,
                         MTXMODE_APPLY as libc::c_int as u8_0);
            Matrix_RotateY(-sp74, MTXMODE_APPLY as libc::c_int as u8_0);
            Matrix_RotateX(-sp78, MTXMODE_APPLY as libc::c_int as u8_0);
            func_8084A0E8(globalCtx, this, lod, gCullFrontDList.as_mut_ptr(),
                          overrideLimbDraw);
            (*this).actor.scale.y = -(*this).actor.scale.y;
            Matrix_Pop();
        }
        let fresh11 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g: *mut Gfx = fresh11;
        (*_g).words.w0 =
            (0xd9 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (!(0x600 as libc::c_int as u32_0) &
                     (((0x1 as libc::c_int) << 24 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g).words.w1 = 0 as libc::c_int as u32_0;
        let fresh12 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_0: *mut Gfx = fresh12;
        (*_g_0).words.w0 =
            (0xd9 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (!(0x600 as libc::c_int as u32_0) &
                     (((0x1 as libc::c_int) << 24 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_0).words.w1 = 0 as libc::c_int as u32_0;
        func_8084A0E8(globalCtx, this, lod, gCullBackDList.as_mut_ptr(),
                      overrideLimbDraw);
        if (*this).invincibilityTimer as libc::c_int > 0 as libc::c_int {
            (*__gfxCtx).polyOpa.p =
                Gameplay_SetFog(globalCtx, (*__gfxCtx).polyOpa.p)
        }
        if (*this).stateFlags2 & 0x4000 as libc::c_int as libc::c_uint != 0 {
            let mut scale: f32_0 =
                ((*this).unk_84F as libc::c_int >> 1 as libc::c_int) as
                    libc::c_float * 22.0f32;
            let fresh13 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_1: *mut Gfx = fresh13;
            (*_g_1).words.w0 =
                (0xdb as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0x6 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    ((0x8 as libc::c_int * 4 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_1).words.w1 =
                Gfx_TwoTexScroll((*globalCtx).state.gfxCtx, 0 as libc::c_int,
                                 0 as libc::c_int as u32_0,
                                 (0 as libc::c_int as
                                      libc::c_uint).wrapping_sub((*globalCtx).gameplayFrames).wrapping_rem(128
                                                                                                               as
                                                                                                               libc::c_int
                                                                                                               as
                                                                                                               libc::c_uint),
                                 32 as libc::c_int, 32 as libc::c_int,
                                 1 as libc::c_int, 0 as libc::c_int as u32_0,
                                 (*globalCtx).gameplayFrames.wrapping_mul(-(2
                                                                                as
                                                                                libc::c_int)
                                                                              as
                                                                              libc::c_uint).wrapping_rem(128
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             libc::c_uint),
                                 32 as libc::c_int, 32 as libc::c_int) as
                    libc::c_uint;
            Matrix_Scale(scale, scale, scale,
                         MTXMODE_APPLY as libc::c_int as u8_0);
            let fresh14 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_2: *mut Gfx = fresh14;
            (*_g_2).words.w0 =
                (0xda as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((::std::mem::size_of::<Mtx>() as
                          libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                          libc::c_uint).wrapping_div(8
                                                                                         as
                                                                                         libc::c_int
                                                                                         as
                                                                                         libc::c_uint)
                         &
                         (((0x1 as libc::c_int) << 5 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (((0 as libc::c_int | 0x2 as libc::c_int |
                           0 as libc::c_int) ^ 0x1 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_2).words.w1 =
                Matrix_NewMtx((*globalCtx).state.gfxCtx,
                              b"../z_player.c\x00" as *const u8 as
                                  *const libc::c_char as *mut libc::c_char,
                              19459 as libc::c_int) as libc::c_uint;
            let fresh15 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_3: *mut Gfx = fresh15;
            (*_g_3).words.w0 =
                (0xfb as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_3).words.w1 =
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (50 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (100 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh16 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_4: *mut Gfx = fresh16;
            (*_g_4).words.w0 =
                (0xde as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_4).words.w1 = gEffIceFragment3DL.as_mut_ptr() as libc::c_uint
        }
        if (*this).unk_862 as libc::c_int > 0 as libc::c_int {
            Player_DrawGetItem(globalCtx, this);
        }
    }
    Graph_CloseDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                     b"../z_player.c\x00" as *const u8 as *const libc::c_char,
                     19473 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn Player_Destroy(mut thisx: *mut Actor,
                                        mut globalCtx: *mut GlobalContext) {
    let mut this: *mut Player = thisx as *mut Player;
    Effect_Delete(globalCtx, (*this).swordEffectIndex);
    Collider_DestroyCylinder(globalCtx, &mut (*this).cylinder);
    Collider_DestroyQuad(globalCtx,
                         &mut *(*this).swordQuads.as_mut_ptr().offset(0 as
                                                                          libc::c_int
                                                                          as
                                                                          isize));
    Collider_DestroyQuad(globalCtx,
                         &mut *(*this).swordQuads.as_mut_ptr().offset(1 as
                                                                          libc::c_int
                                                                          as
                                                                          isize));
    Collider_DestroyQuad(globalCtx, &mut (*this).shieldQuad);
    func_800876C8(globalCtx);
    gSaveContext.linkAge = (*globalCtx).linkAgeOnLoad as s32;
}
#[no_mangle]
pub unsafe extern "C" fn func_8084ABD8(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player, mut arg2: s32,
                                       mut arg3: s16) -> s16 {
    let mut temp1: s32 = 0;
    let mut temp2: s16 = 0;
    let mut temp3: s16 = 0;
    if func_8002DD78(this) == 0 && func_808334B4(this) == 0 &&
           arg2 == 0 as libc::c_int {
        temp2 =
            ((*sControlInput).rel.stick_y as libc::c_int as libc::c_float *
                 240.0f32) as s16;
        Math_SmoothStepToS(&mut (*this).actor.focus.rot.x, temp2,
                           14 as libc::c_int as s16,
                           4000 as libc::c_int as s16,
                           30 as libc::c_int as s16);
        temp2 =
            ((*sControlInput).rel.stick_x as libc::c_int as libc::c_float *
                 -16.0f32) as s16;
        temp2 =
            if (temp2 as libc::c_int) < -(3000 as libc::c_int) {
                -(3000 as libc::c_int)
            } else if temp2 as libc::c_int > 3000 as libc::c_int {
                3000 as libc::c_int
            } else { temp2 as libc::c_int } as s16;
        (*this).actor.focus.rot.y =
            ((*this).actor.focus.rot.y as libc::c_int + temp2 as libc::c_int)
                as s16
    } else {
        temp1 =
            if (*this).stateFlags1 & 0x800000 as libc::c_int as libc::c_uint
                   != 0 {
                3500 as libc::c_int
            } else { 14000 as libc::c_int };
        temp3 =
            ((if (*sControlInput).rel.stick_y as libc::c_int >=
                     0 as libc::c_int {
                  1 as libc::c_int
              } else { -(1 as libc::c_int) }) *
                 ((1.0f32 -
                       Math_CosS(((*sControlInput).rel.stick_y as libc::c_int
                                      * 200 as libc::c_int) as s16)) *
                      1500.0f32) as s32) as s16;
        (*this).actor.focus.rot.x =
            ((*this).actor.focus.rot.x as libc::c_int + temp3 as libc::c_int)
                as s16;
        (*this).actor.focus.rot.x =
            if ((*this).actor.focus.rot.x as libc::c_int) < -temp1 {
                -temp1
            } else if (*this).actor.focus.rot.x as libc::c_int > temp1 {
                temp1
            } else { (*this).actor.focus.rot.x as libc::c_int } as s16;
        temp1 = 19114 as libc::c_int;
        temp2 =
            ((*this).actor.focus.rot.y as libc::c_int -
                 (*this).actor.shape.rot.y as libc::c_int) as s16;
        temp3 =
            ((if (*sControlInput).rel.stick_x as libc::c_int >=
                     0 as libc::c_int {
                  1 as libc::c_int
              } else { -(1 as libc::c_int) }) *
                 ((1.0f32 -
                       Math_CosS(((*sControlInput).rel.stick_x as libc::c_int
                                      * 200 as libc::c_int) as s16)) *
                      -1500.0f32) as s32) as s16;
        temp2 = (temp2 as libc::c_int + temp3 as libc::c_int) as s16;
        (*this).actor.focus.rot.y =
            ((if (temp2 as libc::c_int) < -temp1 {
                  -temp1
              } else {
                  (if temp2 as libc::c_int > temp1 {
                       temp1
                   } else { temp2 as libc::c_int })
              }) + (*this).actor.shape.rot.y as libc::c_int) as s16
    }
    (*this).unk_6AE =
        ((*this).unk_6AE as libc::c_int | 2 as libc::c_int) as u16_0;
    return (func_80836AB8(this,
                          ((*globalCtx).shootingGalleryStatus as libc::c_int
                               != 0 as libc::c_int || func_8002DD78(this) != 0
                               || func_808334B4(this) != 0) as libc::c_int) -
                arg3 as libc::c_int) as s16;
}
#[no_mangle]
pub unsafe extern "C" fn func_8084AEEC(mut this: *mut Player,
                                       mut arg1: *mut f32_0, mut arg2: f32_0,
                                       mut arg3: s16) {
    let mut temp1: f32_0 = 0.;
    let mut temp2: f32_0 = 0.;
    temp1 = (*this).skelAnime.curFrame - 10.0f32;
    temp2 =
        (*gGameInfo).data[(0 as libc::c_int * 6 as libc::c_int *
                               16 as libc::c_int + 45 as libc::c_int) as
                              usize] as libc::c_int as libc::c_float /
            100.0f32 * 0.8f32;
    if *arg1 > temp2 { *arg1 = temp2 }
    if 0.0f32 < temp1 && temp1 < 10.0f32 {
        temp1 *= 6.0f32
    } else { temp1 = 0.0f32; arg2 = 0.0f32 }
    Math_AsymStepToF(arg1, arg2 * 0.8f32, temp1,
                     fabsf(*arg1) * 0.02f32 + 0.05f32);
    Math_ScaledStepToS(&mut (*this).currentYaw, arg3,
                       1600 as libc::c_int as s16);
}
#[no_mangle]
pub unsafe extern "C" fn func_8084B000(mut this: *mut Player) {
    let mut phi_f18: f32_0 = 0.;
    let mut phi_f16: f32_0 = 0.;
    let mut phi_f14: f32_0 = 0.;
    let mut yDistToWater: f32_0 = 0.;
    phi_f14 = -5.0f32;
    phi_f16 = (*(*this).ageProperties).unk_28;
    if (*this).actor.velocity.y < 0.0f32 { phi_f16 += 1.0f32 }
    if (*this).actor.yDistToWater < phi_f16 {
        if (*this).actor.velocity.y <= 0.0f32 {
            phi_f16 = 0.0f32
        } else { phi_f16 = (*this).actor.velocity.y * 0.5f32 }
        phi_f18 = -0.1f32 - phi_f16
    } else {
        if (*this).stateFlags1 & 0x80 as libc::c_int as libc::c_uint == 0 &&
               (*this).currentBoots as libc::c_int ==
                   PLAYER_BOOTS_IRON as libc::c_int &&
               (*this).actor.velocity.y >= -3.0f32 {
            phi_f18 = -0.2f32
        } else {
            phi_f14 = 2.0f32;
            if (*this).actor.velocity.y >= 0.0f32 {
                phi_f16 = 0.0f32
            } else { phi_f16 = (*this).actor.velocity.y * -0.3f32 }
            phi_f18 = phi_f16 + 0.1f32
        }
        yDistToWater = (*this).actor.yDistToWater;
        if yDistToWater > 100.0f32 {
            (*this).stateFlags2 |= 0x400 as libc::c_int as libc::c_uint
        }
    }
    (*this).actor.velocity.y += phi_f18;
    if ((*this).actor.velocity.y - phi_f14) * phi_f18 >
           0 as libc::c_int as libc::c_float {
        (*this).actor.velocity.y = phi_f14
    }
    (*this).actor.gravity = 0.0f32;
}
#[no_mangle]
pub unsafe extern "C" fn func_8084B158(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut input: *mut Input,
                                       mut arg3: f32_0) {
    let mut temp: f32_0 = 0.;
    if !input.is_null() &&
           (*input).press.button as libc::c_int &
               (0x8000 as libc::c_int | 0x4000 as libc::c_int) !=
               0 as libc::c_int {
        temp = 1.0f32
    } else { temp = 0.5f32 }
    temp *= arg3;
    if temp < 1.0f32 { temp = 1.0f32 }
    (*this).skelAnime.playSpeed = temp;
    LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
}
#[no_mangle]
pub unsafe extern "C" fn func_8084B1D8(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    if (*this).stateFlags1 & 0x8000000 as libc::c_int as libc::c_uint != 0 {
        func_8084B000(this);
        func_8084AEEC(this, &mut (*this).linearVelocity,
                      0 as libc::c_int as f32_0, (*this).actor.shape.rot.y);
    } else { func_8083721C(this); }
    if (*this).unk_6AD as libc::c_int == 2 as libc::c_int &&
           (func_8002DD6C(this) != 0 || func_808332E4(this) != 0) {
        func_80836670(this, globalCtx);
    }
    if (*this).csMode as libc::c_int != 0 as libc::c_int ||
           (*this).unk_6AD as libc::c_int == 0 as libc::c_int ||
           (*this).unk_6AD as libc::c_int >= 4 as libc::c_int ||
           func_80833B54(this) != 0 || !(*this).unk_664.is_null() ||
           func_8083AD4C(globalCtx, this) == 0 ||
           ((*this).unk_6AD as libc::c_int == 2 as libc::c_int &&
                ((*sControlInput).press.button as libc::c_int &
                     (0x8000 as libc::c_int | 0x4000 as libc::c_int |
                          0x10 as libc::c_int) != 0 as libc::c_int ||
                     func_80833B2C(this) != 0 ||
                     func_8002DD78(this) == 0 && func_808334B4(this) == 0) ||
                (*this).unk_6AD as libc::c_int == 1 as libc::c_int &&
                    (*sControlInput).press.button as libc::c_int &
                        (0x8000 as libc::c_int | 0x4000 as libc::c_int |
                             0x10 as libc::c_int | 0x8 as libc::c_int |
                             0x2 as libc::c_int | 0x1 as libc::c_int |
                             0x4 as libc::c_int) != 0 as libc::c_int) {
        func_8083C148(this, globalCtx);
        func_80078884(0x4813 as libc::c_int as u16_0);
    } else if (if (*this).unk_850 as libc::c_int == 0 as libc::c_int {
                   0 as libc::c_int
               } else {
                   (*this).unk_850 -= 1;
                   (*this).unk_850 as libc::c_int
               }) == 0 as libc::c_int ||
                  (*this).unk_6AD as libc::c_int != 2 as libc::c_int {
        if func_8008F128(this) != 0 {
            (*this).unk_6AE =
                ((*this).unk_6AE as libc::c_int | 0x43 as libc::c_int) as
                    u16_0
        } else {
            (*this).actor.shape.rot.y =
                func_8084ABD8(globalCtx, this, 0 as libc::c_int,
                              0 as libc::c_int as s16)
        }
    }
    (*this).currentYaw = (*this).actor.shape.rot.y;
}
#[no_mangle]
pub unsafe extern "C" fn func_8084B3CC(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) -> s32 {
    if (*globalCtx).shootingGalleryStatus as libc::c_int != 0 as libc::c_int {
        func_80832564(globalCtx, this);
        func_80835C58(globalCtx, this,
                      Some(func_8084FA54 as
                               unsafe extern "C" fn(_: *mut Player,
                                                    _: *mut GlobalContext)
                                   -> ()), 0 as libc::c_int);
        if func_8002DD6C(this) == 0 || Player_HoldsHookshot(this) != 0 {
            func_80835F44(globalCtx, this, 3 as libc::c_int);
        }
        (*this).stateFlags1 |= 0x100000 as libc::c_int as libc::c_uint;
        func_80832264(globalCtx, this, func_80833338(this));
        func_80832210(this);
        func_8083B010(this);
        return 1 as libc::c_int
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8084B498(mut this: *mut Player) {
    (*this).itemActionParam =
        if gSaveContext.inventory.items[gItemSlots[ITEM_OCARINA_FAIRY as
                                                       libc::c_int as usize]
                                            as usize] as libc::c_int ==
               ITEM_OCARINA_FAIRY as libc::c_int {
            PLAYER_AP_OCARINA_FAIRY as libc::c_int
        } else { PLAYER_AP_OCARINA_TIME as libc::c_int } as s8;
}
#[no_mangle]
pub unsafe extern "C" fn func_8084B4D4(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) -> s32 {
    if (*this).stateFlags3 as libc::c_int & 0x20 as libc::c_int != 0 {
        (*this).stateFlags3 =
            ((*this).stateFlags3 as libc::c_int & !(0x20 as libc::c_int)) as
                u8_0;
        func_8084B498(this);
        (*this).unk_6AD = 4 as libc::c_int as u8_0;
        func_8083B040(this, globalCtx);
        return 1 as libc::c_int
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8084B530(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    (*this).stateFlags2 |= 0x20 as libc::c_int as libc::c_uint;
    func_80836670(this, globalCtx);
    if Message_GetState(&mut (*globalCtx).msgCtx) as libc::c_int ==
           TEXT_STATE_CLOSING as libc::c_int {
        (*this).actor.flags &=
            !((1 as libc::c_int) << 8 as libc::c_int) as libc::c_uint;
        if !((*(*this).targetActor).flags &
                 ((1 as libc::c_int) << 0 as libc::c_int |
                      (1 as libc::c_int) << 2 as libc::c_int) as libc::c_uint
                 ==
                 ((1 as libc::c_int) << 0 as libc::c_int |
                      (1 as libc::c_int) << 2 as libc::c_int) as libc::c_uint)
           {
            (*this).stateFlags2 &= !(0x2000 as libc::c_int) as libc::c_uint
        }
        func_8005B1A4(Gameplay_GetCamera(globalCtx, 0 as libc::c_int as s16));
        if func_8084B4D4(globalCtx, this) == 0 &&
               func_8084B3CC(globalCtx, this) == 0 &&
               func_8083ADD4(globalCtx, this) == 0 {
            if (*this).targetActor != (*this).interactRangeActor ||
                   func_8083E5A8(this, globalCtx) == 0 {
                if (*this).stateFlags1 &
                       0x800000 as libc::c_int as libc::c_uint != 0 {
                    let mut sp24: s32 = (*this).unk_850 as s32;
                    func_8083A360(globalCtx, this);
                    (*this).unk_850 = sp24 as s16
                } else if func_808332B8(this) != 0 {
                    func_80838F18(globalCtx, this);
                } else { func_80853080(this, globalCtx); }
            }
        }
        (*this).unk_88E = 10 as libc::c_int as u8_0;
        return
    }
    if (*this).stateFlags1 & 0x800000 as libc::c_int as libc::c_uint != 0 {
        func_8084CC98(this, globalCtx);
    } else if func_808332B8(this) != 0 {
        func_8084D610(this, globalCtx);
    } else if func_8008E9C4(this) == 0 &&
                  LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0
     {
        if (*this).skelAnime.moveFlags as libc::c_int != 0 as libc::c_int {
            func_80832DBC(this);
            if (*(*this).targetActor).category as libc::c_int ==
                   ACTORCAT_NPC as libc::c_int &&
                   (*this).heldItemActionParam as libc::c_int !=
                       PLAYER_AP_FISHING_POLE as libc::c_int {
                func_808322D0(globalCtx, this, &mut gPlayerAnim_0031A0);
            } else { func_80832284(globalCtx, this, func_80833338(this)); }
        } else { func_808322A4(globalCtx, this, &mut gPlayerAnim_0031A8); }
    }
    if !(*this).unk_664.is_null() {
        (*this).actor.shape.rot.y =
            func_8083DB98(this, 0 as libc::c_int) as s16;
        (*this).currentYaw = (*this).actor.shape.rot.y
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8084B78C(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut sp34: f32_0 = 0.;
    let mut sp32: s16 = 0;
    let mut temp: s32 = 0;
    (*this).stateFlags2 |= 0x141 as libc::c_int as libc::c_uint;
    func_8083F524(globalCtx, this);
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        if func_8083F9D0(globalCtx, this) == 0 {
            func_80837268(this, &mut sp34, &mut sp32, 0.0f32, globalCtx);
            temp = func_8083FFB8(this, &mut sp34, &mut sp32);
            if temp > 0 as libc::c_int {
                func_8083FAB8(this, globalCtx);
            } else if temp < 0 as libc::c_int {
                func_8083FB14(this, globalCtx);
            }
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8084B840(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: f32_0) {
    if (*this).actor.wallBgId as libc::c_int != 50 as libc::c_int {
        let mut dynaPolyActor: *mut DynaPolyActor =
            DynaPoly_GetActor(&mut (*globalCtx).colCtx,
                              (*this).actor.wallBgId as s32);
        if !dynaPolyActor.is_null() {
            func_8002DFA4(dynaPolyActor, arg2, (*this).actor.world.rot.y);
        }
    };
}
static mut D_80854870: [struct_80832924; 2] =
    [{
         let mut init =
             struct_80832924{sfxId: 0x840 as libc::c_int as u16_0,
                             field: 0x1003 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0x840 as libc::c_int as u16_0,
                             field: -(0x1015 as libc::c_int) as s16,};
         init
     }];
#[no_mangle]
pub unsafe extern "C" fn func_8084B898(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut sp34: f32_0 = 0.;
    let mut sp32: s16 = 0;
    let mut temp: s32 = 0;
    (*this).stateFlags2 |= 0x141 as libc::c_int as libc::c_uint;
    if func_80832CB0(globalCtx, this, &mut gPlayerAnim_003108) != 0 {
        (*this).unk_850 = 1 as libc::c_int as s16
    } else if (*this).unk_850 as libc::c_int == 0 as libc::c_int {
        if LinkAnimation_OnFrame(&mut (*this).skelAnime, 11.0f32) != 0 {
            func_80832698(this, 0x6818 as libc::c_int as u16_0);
        }
    }
    func_80832924(this, D_80854870.as_mut_ptr());
    func_8083F524(globalCtx, this);
    if func_8083F9D0(globalCtx, this) == 0 {
        func_80837268(this, &mut sp34, &mut sp32, 0.0f32, globalCtx);
        temp = func_8083FFB8(this, &mut sp34, &mut sp32);
        if temp < 0 as libc::c_int {
            func_8083FB14(this, globalCtx);
        } else if temp == 0 as libc::c_int {
            func_8083F72C(this, &mut gPlayerAnim_0030E0, globalCtx);
        } else { (*this).stateFlags2 |= 0x10 as libc::c_int as libc::c_uint }
    }
    if (*this).stateFlags2 & 0x10 as libc::c_int as libc::c_uint != 0 {
        func_8084B840(globalCtx, this, 2.0f32);
        (*this).linearVelocity = 2.0f32
    };
}
static mut D_80854878: [struct_80832924; 2] =
    [{
         let mut init =
             struct_80832924{sfxId: 0x840 as libc::c_int as u16_0,
                             field: 0x1004 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0x840 as libc::c_int as u16_0,
                             field: -(0x1018 as libc::c_int) as s16,};
         init
     }];
static mut D_80854880: Vec3f =
    { let mut init = Vec3f{x: 0.0f32, y: 26.0f32, z: -40.0f32,}; init };
#[no_mangle]
pub unsafe extern "C" fn func_8084B9E4(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut anim: *mut LinkAnimationHeader = 0 as *mut LinkAnimationHeader;
    let mut sp70: f32_0 = 0.;
    let mut sp6E: s16 = 0;
    let mut temp1: s32 = 0;
    let mut sp5C: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut temp2: f32_0 = 0.;
    let mut sp54: *mut CollisionPoly = 0 as *mut CollisionPoly;
    let mut sp50: s32 = 0;
    let mut sp44: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut sp38: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    anim = D_80853C74[(*this).modelAnimType as usize];
    (*this).stateFlags2 |= 0x141 as libc::c_int as libc::c_uint;
    if func_80832CB0(globalCtx, this, anim) != 0 {
        (*this).unk_850 = 1 as libc::c_int as s16
    } else if (*this).unk_850 as libc::c_int == 0 as libc::c_int {
        if LinkAnimation_OnFrame(&mut (*this).skelAnime, 11.0f32) != 0 {
            func_80832698(this, 0x6818 as libc::c_int as u16_0);
        }
    } else { func_80832924(this, D_80854878.as_mut_ptr()); }
    func_8083F524(globalCtx, this);
    if func_8083F9D0(globalCtx, this) == 0 {
        func_80837268(this, &mut sp70, &mut sp6E, 0.0f32, globalCtx);
        temp1 = func_8083FFB8(this, &mut sp70, &mut sp6E);
        if temp1 > 0 as libc::c_int {
            func_8083FAB8(this, globalCtx);
        } else if temp1 == 0 as libc::c_int {
            func_8083F72C(this, D_80853C8C[(*this).modelAnimType as usize],
                          globalCtx);
        } else { (*this).stateFlags2 |= 0x10 as libc::c_int as libc::c_uint }
    }
    if (*this).stateFlags2 & 0x10 as libc::c_int as libc::c_uint != 0 {
        temp2 =
            func_8083973C(globalCtx, this, &mut D_80854880, &mut sp5C) -
                (*this).actor.world.pos.y;
        if fabsf(temp2) < 20.0f32 {
            sp44.x = (*this).actor.world.pos.x;
            sp44.z = (*this).actor.world.pos.z;
            sp44.y = sp5C.y;
            if BgCheck_EntityLineTest1(&mut (*globalCtx).colCtx, &mut sp44,
                                       &mut sp5C, &mut sp38, &mut sp54,
                                       1 as libc::c_int, 0 as libc::c_int,
                                       0 as libc::c_int, 1 as libc::c_int,
                                       &mut sp50) == 0 {
                func_8084B840(globalCtx, this, -2.0f32);
                return
            }
        }
        (*this).stateFlags2 &= !(0x10 as libc::c_int) as libc::c_uint
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8084BBE4(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut sp3C: f32_0 = 0.;
    let mut sp3A: s16 = 0;
    let mut anim: *mut LinkAnimationHeader = 0 as *mut LinkAnimationHeader;
    let mut temp: f32_0 = 0.;
    (*this).stateFlags2 |= 0x40 as libc::c_int as libc::c_uint;
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        // clang-format off
        anim =
            if (*this).unk_84F as libc::c_int > 0 as libc::c_int {
                &mut gPlayerAnim_002F28
            } else { D_80853CD4[(*this).modelAnimType as usize] };
        func_80832284(globalCtx, this, anim);
        // clang-format on
    } else if (*this).unk_84F as libc::c_int == 0 as libc::c_int {
        if (*this).skelAnime.animation ==
               &mut gPlayerAnim_002F10 as *mut LinkAnimationHeader as
                   *mut libc::c_void {
            temp = 11.0f32
        } else { temp = 1.0f32 }
        if LinkAnimation_OnFrame(&mut (*this).skelAnime, temp) != 0 {
            func_80832770(this, 0x800 as libc::c_int as u16_0);
            if (*this).skelAnime.animation ==
                   &mut gPlayerAnim_002F10 as *mut LinkAnimationHeader as
                       *mut libc::c_void {
                (*this).unk_84F = 1 as libc::c_int as s8
            } else { (*this).unk_84F = -(1 as libc::c_int) as s8 }
        }
    }
    Math_ScaledStepToS(&mut (*this).actor.shape.rot.y, (*this).currentYaw,
                       0x800 as libc::c_int as s16);
    if (*this).unk_84F as libc::c_int != 0 as libc::c_int {
        func_80837268(this, &mut sp3C, &mut sp3A, 0.0f32, globalCtx);
        if (*this).unk_847[(*this).unk_846 as usize] as libc::c_int >=
               0 as libc::c_int {
            if (*this).unk_84F as libc::c_int > 0 as libc::c_int {
                anim = D_80853CA4[(*this).modelAnimType as usize]
            } else { anim = D_80853CEC[(*this).modelAnimType as usize] }
            func_8083A9B8(this, anim, globalCtx);
            return
        }
        if !((*sControlInput).cur.button as libc::c_int |
                 !(0x8000 as libc::c_int)) == 0 as libc::c_int ||
               (*this).actor.shape.feetFloorFlags as libc::c_int !=
                   0 as libc::c_int {
            func_80837B60(this);
            if ((*this).unk_84F as libc::c_int) < 0 as libc::c_int {
                (*this).linearVelocity = -0.8f32
            } else { (*this).linearVelocity = 0.8f32 }
            func_80837B9C(this, globalCtx);
            (*this).stateFlags1 &= !(0x6000 as libc::c_int) as libc::c_uint
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8084BDFC(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    (*this).stateFlags2 |= 0x40 as libc::c_int as libc::c_uint;
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        func_80832E48(this, 1 as libc::c_int);
        func_8083C0E8(this, globalCtx);
        return
    }
    if LinkAnimation_OnFrame(&mut (*this).skelAnime,
                             (*this).skelAnime.endFrame - 6.0f32) != 0 {
        func_808328A0(this);
    } else if LinkAnimation_OnFrame(&mut (*this).skelAnime,
                                    (*this).skelAnime.endFrame - 34.0f32) != 0
     {
        (*this).stateFlags1 &= !(0x6000 as libc::c_int) as libc::c_uint;
        func_8002F7DC(&mut (*this).actor, 0x831 as libc::c_int as u16_0);
        func_80832698(this, 0x6804 as libc::c_int as u16_0);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8084BEE4(mut this: *mut Player) {
    func_8002F7DC(&mut (*this).actor,
                  if (*this).unk_84F as libc::c_int != 0 as libc::c_int {
                      0x80c as libc::c_int
                  } else { 0x80a as libc::c_int } as u16_0);
}
#[no_mangle]
pub unsafe extern "C" fn func_8084BF1C(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    static mut D_8085488C: Vec3f =
        { let mut init = Vec3f{x: 0.0f32, y: 0.0f32, z: 26.0f32,}; init };
    let mut sp84: s32 = 0;
    let mut sp80: s32 = 0;
    let mut phi_f0: f32_0 = 0.;
    let mut phi_f2: f32_0 = 0.;
    let mut sp6C: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut sp68: s32 = 0;
    let mut sp5C: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut temp_f0: f32_0 = 0.;
    let mut anim1: *mut LinkAnimationHeader = 0 as *mut LinkAnimationHeader;
    let mut anim2: *mut LinkAnimationHeader = 0 as *mut LinkAnimationHeader;
    sp84 = (*sControlInput).rel.stick_y as s32;
    sp80 = (*sControlInput).rel.stick_x as s32;
    (*this).fallStartHeight = (*this).actor.world.pos.y as s16;
    (*this).stateFlags2 |= 0x40 as libc::c_int as libc::c_uint;
    if (*this).unk_84F as libc::c_int != 0 as libc::c_int &&
           (if sp84 >= 0 as libc::c_int { sp84 } else { -sp84 }) <
               (if sp80 >= 0 as libc::c_int { sp80 } else { -sp80 }) {
        phi_f0 =
            (if sp80 >= 0 as libc::c_int { sp80 } else { -sp80 }) as
                libc::c_float * 0.0325f32;
        sp84 = 0 as libc::c_int
    } else {
        phi_f0 =
            (if sp84 >= 0 as libc::c_int { sp84 } else { -sp84 }) as
                libc::c_float * 0.05f32;
        sp80 = 0 as libc::c_int
    }
    if phi_f0 < 1.0f32 {
        phi_f0 = 1.0f32
    } else if phi_f0 > 3.35f32 { phi_f0 = 3.35f32 }
    if (*this).skelAnime.playSpeed >= 0.0f32 {
        phi_f2 = 1.0f32
    } else { phi_f2 = -1.0f32 }
    (*this).skelAnime.playSpeed = phi_f2 * phi_f0;
    if (*this).unk_850 as libc::c_int >= 0 as libc::c_int {
        if !(*this).actor.wallPoly.is_null() &&
               (*this).actor.wallBgId as libc::c_int != 50 as libc::c_int {
            let mut wallPolyActor: *mut DynaPolyActor =
                DynaPoly_GetActor(&mut (*globalCtx).colCtx,
                                  (*this).actor.wallBgId as s32);
            if !wallPolyActor.is_null() {
                Math_Vec3f_Diff(&mut (*wallPolyActor).actor.world.pos,
                                &mut (*wallPolyActor).actor.prevPos,
                                &mut sp6C);
                Math_Vec3f_Sum(&mut (*this).actor.world.pos, &mut sp6C,
                               &mut (*this).actor.world.pos);
            }
        }
        Actor_UpdateBgCheckInfo(globalCtx, &mut (*this).actor, 26.0f32,
                                6.0f32, (*(*this).ageProperties).unk_00,
                                7 as libc::c_int);
        func_8083F360(globalCtx, this, 26.0f32,
                      (*(*this).ageProperties).unk_3C, 50.0f32, -20.0f32);
    }
    if ((*this).unk_850 as libc::c_int) < 0 as libc::c_int ||
           func_8083FBC0(this, globalCtx) == 0 {
        if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) !=
               0 as libc::c_int {
            if ((*this).unk_850 as libc::c_int) < 0 as libc::c_int {
                (*this).unk_850 =
                    ((if (*this).unk_850 as libc::c_int >= 0 as libc::c_int {
                          (*this).unk_850 as libc::c_int
                      } else { -((*this).unk_850 as libc::c_int) }) &
                         1 as libc::c_int) as s16;
                return
            }
            if sp84 != 0 as libc::c_int {
                sp68 =
                    (*this).unk_84F as libc::c_int +
                        (*this).unk_850 as libc::c_int;
                if sp84 > 0 as libc::c_int {
                    D_8085488C.y = (*(*this).ageProperties).unk_40;
                    temp_f0 =
                        func_8083973C(globalCtx, this, &mut D_8085488C,
                                      &mut sp5C);
                    if (*this).actor.world.pos.y < temp_f0 {
                        if (*this).unk_84F as libc::c_int != 0 as libc::c_int
                           {
                            (*this).actor.world.pos.y = temp_f0;
                            (*this).stateFlags1 &=
                                !(0x200000 as libc::c_int) as libc::c_uint;
                            func_8083A5C4(globalCtx, this,
                                          (*this).actor.wallPoly,
                                          (*(*this).ageProperties).unk_3C,
                                          &mut gPlayerAnim_003000);
                            (*this).currentYaw =
                                ((*this).currentYaw as libc::c_int +
                                     0x8000 as libc::c_int) as s16;
                            (*this).actor.shape.rot.y = (*this).currentYaw;
                            func_8083A9B8(this, &mut gPlayerAnim_003000,
                                          globalCtx);
                            (*this).stateFlags1 |=
                                0x4000 as libc::c_int as libc::c_uint
                        } else {
                            func_8083F070(this,
                                          (*(*this).ageProperties).unk_CC[(*this).unk_850
                                                                              as
                                                                              usize],
                                          globalCtx);
                        }
                    } else {
                        (*this).skelAnime.prevTransl =
                            (*(*this).ageProperties).unk_4A[sp68 as usize];
                        func_80832264(globalCtx, this,
                                      (*(*this).ageProperties).unk_AC[sp68 as
                                                                          usize]);
                    }
                } else if (*this).actor.world.pos.y -
                              (*this).actor.floorHeight < 15.0f32 {
                    if (*this).unk_84F as libc::c_int != 0 as libc::c_int {
                        func_8083FB7C(this, globalCtx);
                    } else {
                        if (*this).unk_850 as libc::c_int != 0 as libc::c_int
                           {
                            (*this).skelAnime.prevTransl =
                                (*(*this).ageProperties).unk_44
                        }
                        func_8083F070(this,
                                      (*(*this).ageProperties).unk_C4[(*this).unk_850
                                                                          as
                                                                          usize],
                                      globalCtx);
                        (*this).unk_850 = 1 as libc::c_int as s16
                    }
                } else {
                    sp68 ^= 1 as libc::c_int;
                    (*this).skelAnime.prevTransl =
                        (*(*this).ageProperties).unk_62[sp68 as usize];
                    anim1 = (*(*this).ageProperties).unk_AC[sp68 as usize];
                    LinkAnimation_Change(globalCtx, &mut (*this).skelAnime,
                                         anim1, -1.0f32,
                                         Animation_GetLastFrame(anim1 as
                                                                    *mut libc::c_void)
                                             as f32_0, 0.0f32,
                                         ANIMMODE_ONCE as libc::c_int as u8_0,
                                         0.0f32);
                }
                (*this).unk_850 =
                    ((*this).unk_850 as libc::c_int ^ 1 as libc::c_int) as s16
            } else if (*this).unk_84F as libc::c_int != 0 as libc::c_int &&
                          sp80 != 0 as libc::c_int {
                anim2 =
                    (*(*this).ageProperties).unk_BC[(*this).unk_850 as usize];
                if sp80 > 0 as libc::c_int {
                    (*this).skelAnime.prevTransl =
                        (*(*this).ageProperties).unk_7A[(*this).unk_850 as
                                                            usize];
                    func_80832264(globalCtx, this, anim2);
                } else {
                    (*this).skelAnime.prevTransl =
                        (*(*this).ageProperties).unk_86[(*this).unk_850 as
                                                            usize];
                    LinkAnimation_Change(globalCtx, &mut (*this).skelAnime,
                                         anim2, -1.0f32,
                                         Animation_GetLastFrame(anim2 as
                                                                    *mut libc::c_void)
                                             as f32_0, 0.0f32,
                                         ANIMMODE_ONCE as libc::c_int as u8_0,
                                         0.0f32);
                }
            } else {
                (*this).stateFlags2 |= 0x1000 as libc::c_int as libc::c_uint
            }
            return
        }
    }
    if ((*this).unk_850 as libc::c_int) < 0 as libc::c_int {
        if (*this).unk_850 as libc::c_int == -(2 as libc::c_int) &&
               (LinkAnimation_OnFrame(&mut (*this).skelAnime, 14.0f32) != 0 ||
                    LinkAnimation_OnFrame(&mut (*this).skelAnime, 29.0f32) !=
                        0) ||
               (*this).unk_850 as libc::c_int == -(4 as libc::c_int) &&
                   (LinkAnimation_OnFrame(&mut (*this).skelAnime, 22.0f32) !=
                        0 ||
                        LinkAnimation_OnFrame(&mut (*this).skelAnime, 35.0f32)
                            != 0 ||
                        LinkAnimation_OnFrame(&mut (*this).skelAnime, 49.0f32)
                            != 0 ||
                        LinkAnimation_OnFrame(&mut (*this).skelAnime, 55.0f32)
                            != 0) {
            func_8084BEE4(this);
        }
        return
    }
    if LinkAnimation_OnFrame(&mut (*this).skelAnime,
                             if (*this).skelAnime.playSpeed > 0.0f32 {
                                 20.0f32
                             } else { 0.0f32 }) != 0 {
        func_8084BEE4(this);
    };
}
static mut D_80854898: [f32_0; 2] = [10.0f32, 20.0f32];
static mut D_808548A0: [f32_0; 2] = [40.0f32, 50.0f32];
static mut D_808548A8: [struct_80832924; 3] =
    [{
         let mut init =
             struct_80832924{sfxId: 0x80a as libc::c_int as u16_0,
                             field: 0x80a as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0x80a as libc::c_int as u16_0,
                             field: 0x814 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0x80a as libc::c_int as u16_0,
                             field: -(0x81e as libc::c_int) as s16,};
         init
     }];
#[no_mangle]
pub unsafe extern "C" fn func_8084C5F8(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut temp: s32 = 0;
    let mut sp38: *mut f32_0 = 0 as *mut f32_0;
    let mut sp34: *mut CollisionPoly = 0 as *mut CollisionPoly;
    let mut sp30: s32 = 0;
    let mut sp24: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    (*this).stateFlags2 |= 0x40 as libc::c_int as libc::c_uint;
    temp = func_808374A0(globalCtx, this, &mut (*this).skelAnime, 4.0f32);
    if temp == 0 as libc::c_int {
        (*this).stateFlags1 &= !(0x200000 as libc::c_int) as libc::c_uint;
        return
    }
    if temp > 0 as libc::c_int ||
           LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        func_8083C0E8(this, globalCtx);
        (*this).stateFlags1 &= !(0x200000 as libc::c_int) as libc::c_uint;
        return
    }
    sp38 = D_80854898.as_mut_ptr();
    if (*this).unk_850 as libc::c_int != 0 as libc::c_int {
        func_80832924(this, D_808548A8.as_mut_ptr());
        sp38 = D_808548A0.as_mut_ptr()
    }
    if LinkAnimation_OnFrame(&mut (*this).skelAnime,
                             *sp38.offset(0 as libc::c_int as isize)) != 0 ||
           LinkAnimation_OnFrame(&mut (*this).skelAnime,
                                 *sp38.offset(1 as libc::c_int as isize)) != 0
       {
        sp24.x = (*this).actor.world.pos.x;
        sp24.y = (*this).actor.world.pos.y + 20.0f32;
        sp24.z = (*this).actor.world.pos.z;
        if BgCheck_EntityRaycastFloor3(&mut (*globalCtx).colCtx, &mut sp34,
                                       &mut sp30, &mut sp24) != 0.0f32 {
            (*this).unk_89E =
                func_80041F10(&mut (*globalCtx).colCtx, sp34, sp30) as u16_0;
            func_808328A0(this);
        }
    };
}
static mut D_808548B4: [struct_80832924; 9] =
    [{
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: 0x3028 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: 0x3030 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: 0x3038 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: 0x3040 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: 0x3048 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: 0x3050 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: 0x3058 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: 0x3060 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: -(0x3068 as libc::c_int) as s16,};
         init
     }];
#[no_mangle]
pub unsafe extern "C" fn func_8084C760(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    (*this).stateFlags2 |= 0x40 as libc::c_int as libc::c_uint;
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        if (*this).stateFlags1 & 1 as libc::c_int as libc::c_uint == 0 {
            if (*this).skelAnime.moveFlags as libc::c_int != 0 as libc::c_int
               {
                (*this).skelAnime.moveFlags = 0 as libc::c_int as u8_0;
                return
            }
            if func_8083F570(this, globalCtx) == 0 {
                (*this).linearVelocity =
                    (*sControlInput).rel.stick_y as libc::c_int as
                        libc::c_float * 0.03f32
            }
        }
        return
    }
    func_80832924(this, D_808548B4.as_mut_ptr());
}
static mut D_808548D8: [struct_80832924; 9] =
    [{
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: 0x300a as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: 0x3012 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: 0x301a as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: 0x3022 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: 0x3034 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: 0x303c as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: 0x3044 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: 0x304c as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: -(0x3054 as libc::c_int) as s16,};
         init
     }];
#[no_mangle]
pub unsafe extern "C" fn func_8084C81C(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    (*this).stateFlags2 |= 0x40 as libc::c_int as libc::c_uint;
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        func_8083C0E8(this, globalCtx);
        (*this).stateFlags2 &= !(0x40000 as libc::c_int) as libc::c_uint;
        return
    }
    func_80832924(this, D_808548D8.as_mut_ptr());
}
static mut D_808548FC: [Vec3f; 2] =
    [{ let mut init = Vec3f{x: 40.0f32, y: 0.0f32, z: 0.0f32,}; init },
     { let mut init = Vec3f{x: -40.0f32, y: 0.0f32, z: 0.0f32,}; init }];
static mut D_80854914: [Vec3f; 2] =
    [{ let mut init = Vec3f{x: 60.0f32, y: 20.0f32, z: 0.0f32,}; init },
     { let mut init = Vec3f{x: -60.0f32, y: 20.0f32, z: 0.0f32,}; init }];
static mut D_8085492C: [Vec3f; 2] =
    [{ let mut init = Vec3f{x: 60.0f32, y: -20.0f32, z: 0.0f32,}; init },
     { let mut init = Vec3f{x: -60.0f32, y: -20.0f32, z: 0.0f32,}; init }];
#[no_mangle]
pub unsafe extern "C" fn func_8084C89C(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player, mut arg2: s32,
                                       mut arg3: *mut f32_0) -> s32 {
    let mut rideActor: *mut EnHorse = (*this).rideActor as *mut EnHorse;
    let mut sp50: f32_0 = 0.;
    let mut sp4C: f32_0 = 0.;
    let mut sp40: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut sp34: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut sp30: *mut CollisionPoly = 0 as *mut CollisionPoly;
    let mut sp2C: s32 = 0;
    sp50 = (*rideActor).actor.world.pos.y + 20.0f32;
    sp4C = (*rideActor).actor.world.pos.y - 20.0f32;
    *arg3 =
        func_8083973C(globalCtx, this,
                      &mut *D_808548FC.as_mut_ptr().offset(arg2 as isize),
                      &mut sp40);
    return (sp4C < *arg3 && *arg3 < sp50 &&
                func_80839768(globalCtx, this,
                              &mut *D_80854914.as_mut_ptr().offset(arg2 as
                                                                       isize),
                              &mut sp30, &mut sp2C, &mut sp34) == 0 &&
                func_80839768(globalCtx, this,
                              &mut *D_8085492C.as_mut_ptr().offset(arg2 as
                                                                       isize),
                              &mut sp30, &mut sp2C, &mut sp34) == 0) as
               libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8084C9BC(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    let mut rideActor: *mut EnHorse = (*this).rideActor as *mut EnHorse;
    let mut sp38: s32 = 0;
    let mut sp34: f32_0 = 0.;
    if ((*this).unk_850 as libc::c_int) < 0 as libc::c_int {
        (*this).unk_850 = 99 as libc::c_int as s16
    } else {
        sp38 =
            if ((*this).mountSide as libc::c_int) < 0 as libc::c_int {
                0 as libc::c_int
            } else { 1 as libc::c_int };
        if func_8084C89C(globalCtx, this, sp38, &mut sp34) == 0 {
            sp38 ^= 1 as libc::c_int;
            if func_8084C89C(globalCtx, this, sp38, &mut sp34) == 0 {
                return 0 as libc::c_int
            } else {
                (*this).mountSide = -((*this).mountSide as libc::c_int) as s8
            }
        }
        if (*globalCtx).csCtx.state as libc::c_int ==
               CS_STATE_IDLE as libc::c_int &&
               (*globalCtx).transitionMode as libc::c_int == 0 as libc::c_int
               &&
               ((if (*rideActor).stateFlags &
                        ((1 as libc::c_int) << 6 as libc::c_int) as
                            libc::c_uint != 0 {
                     1 as libc::c_int
                 } else { 0 as libc::c_int }) != 0 ||
                    (if ((*rideActor).action as libc::c_uint ==
                             ENHORSE_ACT_MOUNTED_IDLE as libc::c_int as
                                 libc::c_uint ||
                             (*rideActor).action as libc::c_uint ==
                                 ENHORSE_ACT_FROZEN as libc::c_int as
                                     libc::c_uint ||
                             (*rideActor).action as libc::c_uint ==
                                 ENHORSE_ACT_MOUNTED_IDLE_WHINNEYING as
                                     libc::c_int as libc::c_uint) &&
                            (*rideActor).stateFlags &
                                ((1 as libc::c_int) << 19 as libc::c_int) as
                                    libc::c_uint == 0 &&
                            (*rideActor).stateFlags &
                                ((1 as libc::c_int) << 25 as libc::c_int) as
                                    libc::c_uint == 0 {
                         1 as libc::c_int
                     } else { 0 as libc::c_int }) != 0) {
            (*this).stateFlags2 |= 0x400000 as libc::c_int as libc::c_uint;
            if (if (*rideActor).stateFlags &
                       ((1 as libc::c_int) << 6 as libc::c_int) as
                           libc::c_uint != 0 {
                    1 as libc::c_int
                } else { 0 as libc::c_int }) != 0 ||
                   (if ((*rideActor).action as libc::c_uint ==
                            ENHORSE_ACT_MOUNTED_IDLE as libc::c_int as
                                libc::c_uint ||
                            (*rideActor).action as libc::c_uint ==
                                ENHORSE_ACT_FROZEN as libc::c_int as
                                    libc::c_uint ||
                            (*rideActor).action as libc::c_uint ==
                                ENHORSE_ACT_MOUNTED_IDLE_WHINNEYING as
                                    libc::c_int as libc::c_uint) &&
                           (*rideActor).stateFlags &
                               ((1 as libc::c_int) << 19 as libc::c_int) as
                                   libc::c_uint == 0 &&
                           (*rideActor).stateFlags &
                               ((1 as libc::c_int) << 25 as libc::c_int) as
                                   libc::c_uint == 0 {
                        1 as libc::c_int
                    } else { 0 as libc::c_int }) != 0 &&
                       !((*sControlInput).press.button as libc::c_int |
                             !(0x8000 as libc::c_int)) == 0 as libc::c_int {
                (*rideActor).actor.child = 0 as *mut Actor;
                func_80835DAC(globalCtx, this,
                              Some(func_8084D3E4 as
                                       unsafe extern "C" fn(_: *mut Player,
                                                            _:
                                                                *mut GlobalContext)
                                           -> ()), 0 as libc::c_int);
                (*this).unk_878 = sp34 - (*rideActor).actor.world.pos.y;
                func_80832264(globalCtx, this,
                              if ((*this).mountSide as libc::c_int) <
                                     0 as libc::c_int {
                                  &mut gPlayerAnim_003390
                              } else { &mut gPlayerAnim_0033A0 });
                return 1 as libc::c_int
            }
        }
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8084CBF4(mut this: *mut Player, mut arg1: f32_0,
                                       mut arg2: f32_0) {
    let mut temp: f32_0 = 0.;
    let mut dir: f32_0 = 0.;
    if (*this).unk_878 != 0.0f32 && arg2 <= (*this).skelAnime.curFrame {
        if arg1 < fabsf((*this).unk_878) {
            if (*this).unk_878 >= 0.0f32 {
                dir = 1 as libc::c_int as f32_0
            } else { dir = -(1 as libc::c_int) as f32_0 }
            temp = dir * arg1
        } else { temp = (*this).unk_878 }
        (*this).actor.world.pos.y += temp;
        (*this).unk_878 -= temp
    };
}
static mut D_80854944: [*mut LinkAnimationHeader; 9] =
    unsafe {
        [&gPlayerAnim_003370 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003368 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003380 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003358 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003338 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003348 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003350 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         0 as *const LinkAnimationHeader as *mut LinkAnimationHeader,
         0 as *const LinkAnimationHeader as *mut LinkAnimationHeader]
    };
static mut D_80854968: [*mut LinkAnimationHeader; 9] =
    unsafe {
        [&gPlayerAnim_003388 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003388 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003388 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003360 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003340 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003340 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003340 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         0 as *const LinkAnimationHeader as *mut LinkAnimationHeader,
         0 as *const LinkAnimationHeader as *mut LinkAnimationHeader]
    };
static mut D_8085498C: [*mut LinkAnimationHeader; 3] =
    unsafe {
        [&gPlayerAnim_0033C8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0033B8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_0033C0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80854998: [[u8_0; 2]; 2] =
    [[32 as libc::c_int as u8_0, 58 as libc::c_int as u8_0],
     [25 as libc::c_int as u8_0, 42 as libc::c_int as u8_0]];
static mut D_8085499C: Vec3s =
    {
        let mut init =
            Vec3s{x: -(69 as libc::c_int) as s16,
                  y: 7146 as libc::c_int as s16,
                  z: -(266 as libc::c_int) as s16,};
        init
    };
static mut D_808549A4: [struct_80832924; 8] =
    [{
         let mut init =
             struct_80832924{sfxId: 0x871 as libc::c_int as u16_0,
                             field: 0x830 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0x871 as libc::c_int as u16_0,
                             field: 0x83a as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0x871 as libc::c_int as u16_0,
                             field: 0x844 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0x872 as libc::c_int as u16_0,
                             field: 0x85c as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0x872 as libc::c_int as u16_0,
                             field: 0x86e as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0x872 as libc::c_int as u16_0,
                             field: 0x87e as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0x872 as libc::c_int as u16_0,
                             field: 0x884 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0x872 as libc::c_int as u16_0,
                             field: -(0x888 as libc::c_int) as s16,};
         init
     }];
#[no_mangle]
pub unsafe extern "C" fn func_8084CC98(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut rideActor: *mut EnHorse = (*this).rideActor as *mut EnHorse;
    let mut arr: *mut u8_0 = 0 as *mut u8_0;
    (*this).stateFlags2 |= 0x40 as libc::c_int as libc::c_uint;
    func_8084CBF4(this, 1.0f32, 10.0f32);
    if (*this).unk_850 as libc::c_int == 0 as libc::c_int {
        if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
            (*this).skelAnime.animation =
                &mut gPlayerAnim_0033B8 as *mut LinkAnimationHeader as
                    *mut libc::c_void;
            (*this).unk_850 = 99 as libc::c_int as s16;
            return
        }
        arr =
            D_80854998[if ((*this).mountSide as libc::c_int) <
                              0 as libc::c_int {
                           0 as libc::c_int
                       } else { 1 as libc::c_int } as usize].as_mut_ptr();
        if LinkAnimation_OnFrame(&mut (*this).skelAnime,
                                 *arr.offset(0 as libc::c_int as isize) as
                                     f32_0) != 0 {
            func_8002F7DC(&mut (*this).actor, 0x831 as libc::c_int as u16_0);
            return
        }
        if LinkAnimation_OnFrame(&mut (*this).skelAnime,
                                 *arr.offset(1 as libc::c_int as isize) as
                                     f32_0) != 0 {
            func_8002DE74(globalCtx, this);
            func_8002F7DC(&mut (*this).actor, 0x832 as libc::c_int as u16_0);
            return
        }
        return
    }
    func_8002DE74(globalCtx, this);
    (*this).skelAnime.prevTransl = D_8085499C;
    if (*rideActor).animationIdx != (*this).unk_850 as libc::c_int &&
           ((*rideActor).animationIdx >= 2 as libc::c_int ||
                (*this).unk_850 as libc::c_int >= 2 as libc::c_int) {
        (*this).unk_850 = (*rideActor).animationIdx as s16;
        if ((*this).unk_850 as libc::c_int) < 2 as libc::c_int {
            let mut rand: f32_0 = Rand_ZeroOne();
            let mut temp: s32 = 0 as libc::c_int;
            (*this).unk_850 = 1 as libc::c_int as s16;
            if rand < 0.1f32 {
                temp = 2 as libc::c_int
            } else if rand < 0.2f32 { temp = 1 as libc::c_int }
            func_80832264(globalCtx, this, D_8085498C[temp as usize]);
        } else {
            (*this).skelAnime.animation =
                D_80854944[((*this).unk_850 as libc::c_int - 2 as libc::c_int)
                               as usize] as *mut libc::c_void;
            Animation_SetMorph(globalCtx, &mut (*this).skelAnime, 8.0f32);
            if ((*this).unk_850 as libc::c_int) < 4 as libc::c_int {
                func_80834644(globalCtx, this);
                (*this).unk_84F = 0 as libc::c_int as s8
            }
        }
    }
    if (*this).unk_850 as libc::c_int == 1 as libc::c_int {
        if D_808535E0 != 0 as libc::c_int || func_8083224C(globalCtx) != 0 {
            func_80832264(globalCtx, this, &mut gPlayerAnim_0033C8);
        } else if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0
         {
            (*this).unk_850 = 99 as libc::c_int as s16
        } else if (*this).skelAnime.animation ==
                      &mut gPlayerAnim_0033B8 as *mut LinkAnimationHeader as
                          *mut libc::c_void {
            func_80832924(this, D_808549A4.as_mut_ptr());
        }
    } else {
        (*this).skelAnime.curFrame = (*rideActor).curFrame;
        LinkAnimation_AnimateFrame(globalCtx, &mut (*this).skelAnime);
    }
    AnimationContext_SetCopyAll(globalCtx, (*this).skelAnime.limbCount as s32,
                                (*this).skelAnime.morphTable,
                                (*this).skelAnime.jointTable);
    if (*globalCtx).csCtx.state as libc::c_int != CS_STATE_IDLE as libc::c_int
           || (*this).csMode as libc::c_int != 0 as libc::c_int {
        if (*this).csMode as libc::c_int == 7 as libc::c_int {
            (*this).csMode = 0 as libc::c_int as u8_0
        }
        (*this).unk_6AD = 0 as libc::c_int as u8_0;
        (*this).unk_84F = 0 as libc::c_int as s8
    } else if ((*this).unk_850 as libc::c_int) < 2 as libc::c_int ||
                  (*this).unk_850 as libc::c_int >= 4 as libc::c_int {
        D_808535E0 = func_80836670(this, globalCtx);
        if D_808535E0 != 0 as libc::c_int {
            (*this).unk_84F = 0 as libc::c_int as s8
        }
    }
    (*this).actor.world.pos.x =
        (*rideActor).actor.world.pos.x + (*rideActor).riderPos.x;
    (*this).actor.world.pos.y =
        (*rideActor).actor.world.pos.y + (*rideActor).riderPos.y - 27.0f32;
    (*this).actor.world.pos.z =
        (*rideActor).actor.world.pos.z + (*rideActor).riderPos.z;
    (*this).actor.shape.rot.y = (*rideActor).actor.shape.rot.y;
    (*this).currentYaw = (*this).actor.shape.rot.y;
    if (*this).csMode as libc::c_int != 0 as libc::c_int ||
           func_8083224C(globalCtx) == 0 &&
               ((*rideActor).actor.speedXZ != 0.0f32 ||
                    func_8083B644(this, globalCtx) == 0) &&
               func_8083C1DC(this, globalCtx) == 0 {
        if D_808535E0 == 0 as libc::c_int {
            if (*this).unk_84F as libc::c_int != 0 as libc::c_int {
                if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime2) !=
                       0 {
                    (*rideActor).stateFlags &=
                        !((1 as libc::c_int) << 8 as libc::c_int) as
                            libc::c_uint;
                    (*this).unk_84F = 0 as libc::c_int as s8
                }
                if (*this).skelAnime2.animation ==
                       &mut gPlayerAnim_0033B0 as *mut LinkAnimationHeader as
                           *mut libc::c_void {
                    if LinkAnimation_OnFrame(&mut (*this).skelAnime2, 23.0f32)
                           != 0 {
                        func_8002F7DC(&mut (*this).actor,
                                      0x181e as libc::c_int as u16_0);
                        func_80832698(this, 0x6802 as libc::c_int as u16_0);
                    }
                    AnimationContext_SetCopyAll(globalCtx,
                                                (*this).skelAnime.limbCount as
                                                    s32,
                                                (*this).skelAnime.jointTable,
                                                (*this).skelAnime2.jointTable);
                } else {
                    if LinkAnimation_OnFrame(&mut (*this).skelAnime2, 10.0f32)
                           != 0 {
                        func_8002F7DC(&mut (*this).actor,
                                      0x181e as libc::c_int as u16_0);
                        func_80832698(this, 0x6802 as libc::c_int as u16_0);
                    }
                    AnimationContext_SetCopyTrue(globalCtx,
                                                 (*this).skelAnime.limbCount
                                                     as s32,
                                                 (*this).skelAnime.jointTable,
                                                 (*this).skelAnime2.jointTable,
                                                 D_80853410.as_mut_ptr());
                }
            } else {
                let mut anim: *mut LinkAnimationHeader =
                    0 as *mut LinkAnimationHeader;
                if if (*rideActor).stateFlags &
                          ((1 as libc::c_int) << 9 as libc::c_int) as
                              libc::c_uint != 0 {
                       1 as libc::c_int
                   } else { 0 as libc::c_int } != 0 {
                    anim = &mut gPlayerAnim_0033B0
                } else if if (*rideActor).stateFlags &
                                 ((1 as libc::c_int) << 8 as libc::c_int) as
                                     libc::c_uint != 0 {
                              1 as libc::c_int
                          } else { 0 as libc::c_int } != 0 {
                    if (*this).unk_850 as libc::c_int >= 2 as libc::c_int &&
                           (*this).unk_850 as libc::c_int != 99 as libc::c_int
                       {
                        anim =
                            D_80854968[((*this).unk_850 as libc::c_int -
                                            2 as libc::c_int) as usize]
                    }
                }
                if !anim.is_null() {
                    LinkAnimation_PlayOnce(globalCtx, &mut (*this).skelAnime2,
                                           anim);
                    (*this).unk_84F = 1 as libc::c_int as s8
                }
            }
        }
        if (*this).stateFlags1 & 0x100000 as libc::c_int as libc::c_uint != 0
           {
            if func_8083AD4C(globalCtx, this) == 0 ||
                   (*sControlInput).press.button as libc::c_int &
                       0x8000 as libc::c_int != 0 as libc::c_int ||
                   func_80833BCC(this) != 0 {
                (*this).unk_6AD = 0 as libc::c_int as u8_0;
                (*this).stateFlags1 &=
                    !(0x100000 as libc::c_int) as libc::c_uint
            } else {
                (*this).unk_6BE =
                    (func_8084ABD8(globalCtx, this, 1 as libc::c_int,
                                   -(5000 as libc::c_int) as s16) as
                         libc::c_int -
                         (*this).actor.shape.rot.y as libc::c_int) as s16;
                (*this).unk_6BE =
                    ((*this).unk_6BE as libc::c_int + 5000 as libc::c_int) as
                        s16;
                (*this).unk_6B0 = -(5000 as libc::c_int) as s16
            }
            return
        }
        if (*this).csMode as libc::c_int != 0 as libc::c_int ||
               func_8084C9BC(this, globalCtx) == 0 &&
                   func_8083B040(this, globalCtx) == 0 {
            if !(*this).unk_664.is_null() {
                if func_8002DD78(this) != 0 as libc::c_int {
                    (*this).unk_6BE =
                        (func_8083DB98(this, 1 as libc::c_int) -
                             (*this).actor.shape.rot.y as libc::c_int) as s16;
                    (*this).unk_6BE =
                        if ((*this).unk_6BE as libc::c_int) <
                               -(0x4aaa as libc::c_int) {
                            -(0x4aaa as libc::c_int)
                        } else if (*this).unk_6BE as libc::c_int >
                                      0x4aaa as libc::c_int {
                            0x4aaa as libc::c_int
                        } else { (*this).unk_6BE as libc::c_int } as s16;
                    (*this).actor.focus.rot.y =
                        ((*this).actor.shape.rot.y as libc::c_int +
                             (*this).unk_6BE as libc::c_int) as s16;
                    (*this).unk_6BE =
                        ((*this).unk_6BE as libc::c_int + 5000 as libc::c_int)
                            as s16;
                    (*this).unk_6AE =
                        ((*this).unk_6AE as libc::c_int | 0x80 as libc::c_int)
                            as u16_0
                } else { func_8083DB98(this, 0 as libc::c_int); }
            } else if func_8002DD78(this) != 0 as libc::c_int {
                (*this).unk_6BE =
                    (func_8084ABD8(globalCtx, this, 1 as libc::c_int,
                                   -(5000 as libc::c_int) as s16) as
                         libc::c_int -
                         (*this).actor.shape.rot.y as libc::c_int) as s16;
                (*this).unk_6BE =
                    ((*this).unk_6BE as libc::c_int + 5000 as libc::c_int) as
                        s16;
                (*this).unk_6B0 = -(5000 as libc::c_int) as s16
            }
        }
    };
}
static mut D_808549C4: [struct_80832924; 3] =
    [{
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: 0x2800 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0x833 as libc::c_int as u16_0,
                             field: 0x80a as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0x830 as libc::c_int as u16_0,
                             field: -(0x819 as libc::c_int) as s16,};
         init
     }];
#[no_mangle]
pub unsafe extern "C" fn func_8084D3E4(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    (*this).stateFlags2 |= 0x40 as libc::c_int as libc::c_uint;
    func_8084CBF4(this, 1.0f32, 10.0f32);
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        let mut rideActor: *mut EnHorse = (*this).rideActor as *mut EnHorse;
        func_8083C0E8(this, globalCtx);
        (*this).stateFlags1 &= !(0x800000 as libc::c_int) as libc::c_uint;
        (*this).actor.parent = 0 as *mut Actor;
        (*gGameInfo).data[(19 as libc::c_int * 6 as libc::c_int *
                               16 as libc::c_int + 6 as libc::c_int) as usize]
            = 0 as libc::c_int as s16;
        if Flags_GetEventChkInf(0x18 as libc::c_int) != 0 ||
               (*gGameInfo).data[(7 as libc::c_int * 6 as libc::c_int *
                                      16 as libc::c_int + 1 as libc::c_int) as
                                     usize] as libc::c_int != 0 as libc::c_int
           {
            gSaveContext.horseData.pos.x =
                (*rideActor).actor.world.pos.x as s16;
            gSaveContext.horseData.pos.y =
                (*rideActor).actor.world.pos.y as s16;
            gSaveContext.horseData.pos.z =
                (*rideActor).actor.world.pos.z as s16;
            gSaveContext.horseData.angle = (*rideActor).actor.shape.rot.y
        }
    } else {
        Camera_ChangeSetting(Gameplay_GetCamera(globalCtx,
                                                0 as libc::c_int as s16),
                             CAM_SET_NORMAL0 as libc::c_int as s16);
        if ((*this).mountSide as libc::c_int) < 0 as libc::c_int {
            D_808549C4[0 as libc::c_int as usize].field =
                0x2828 as libc::c_int as s16
        } else {
            D_808549C4[0 as libc::c_int as usize].field =
                0x281d as libc::c_int as s16
        }
        func_80832924(this, D_808549C4.as_mut_ptr());
    };
}
static mut D_808549D0: [struct_80832924; 1] =
    [{
         let mut init =
             struct_80832924{sfxId: 0x839 as libc::c_int as u16_0,
                             field: -(0x800 as libc::c_int) as s16,};
         init
     }];
#[no_mangle]
pub unsafe extern "C" fn func_8084D530(mut this: *mut Player,
                                       mut arg1: *mut f32_0, mut arg2: f32_0,
                                       mut arg3: s16) {
    func_8084AEEC(this, arg1, arg2, arg3);
    func_80832924(this, D_808549D0.as_mut_ptr());
}
#[no_mangle]
pub unsafe extern "C" fn func_8084D574(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player, mut arg2: s16) {
    func_80835C58(globalCtx, this,
                  Some(func_8084D84C as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  0 as libc::c_int);
    (*this).currentYaw = arg2;
    (*this).actor.shape.rot.y = (*this).currentYaw;
    func_80832C6C(globalCtx, this, &mut gPlayerAnim_0032F0);
}
#[no_mangle]
pub unsafe extern "C" fn func_8084D5CC(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    func_80835C58(globalCtx, this,
                  Some(func_8084DAB4 as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  0 as libc::c_int);
    func_80832C6C(globalCtx, this, &mut gPlayerAnim_0032F0);
}
#[no_mangle]
pub unsafe extern "C" fn func_8084D610(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut sp34: f32_0 = 0.;
    let mut sp32: s16 = 0;
    func_80832CB0(globalCtx, this, &mut gPlayerAnim_003328);
    func_8084B000(this);
    if func_8083224C(globalCtx) == 0 &&
           func_80837348(globalCtx, this, D_80854444.as_mut_ptr(),
                         1 as libc::c_int) == 0 &&
           func_8083D12C(globalCtx, this, sControlInput) == 0 {
        if (*this).unk_6AD as libc::c_int != 1 as libc::c_int {
            (*this).unk_6AD = 0 as libc::c_int as u8_0
        }
        if (*this).currentBoots as libc::c_int ==
               PLAYER_BOOTS_IRON as libc::c_int {
            sp34 = 0.0f32;
            sp32 = (*this).actor.shape.rot.y;
            if (*this).actor.bgCheckFlags as libc::c_int & 1 as libc::c_int !=
                   0 {
                func_8083A098(this,
                              D_80853A7C[(*this).modelAnimType as usize],
                              globalCtx);
                func_808328A0(this);
            }
        } else {
            func_80837268(this, &mut sp34, &mut sp32, 0.0f32, globalCtx);
            if sp34 != 0.0f32 {
                let mut temp: s16 =
                    ((*this).actor.shape.rot.y as libc::c_int -
                         sp32 as libc::c_int) as s16;
                if (if temp as libc::c_int >= 0 as libc::c_int {
                        temp as libc::c_int
                    } else { -(temp as libc::c_int) }) > 0x6000 as libc::c_int
                       &&
                       Math_StepToF(&mut (*this).linearVelocity, 0.0f32,
                                    1.0f32) == 0 {
                    return
                }
                if func_80833C04(this) != 0 {
                    func_8084D5CC(globalCtx, this);
                } else { func_8084D574(globalCtx, this, sp32); }
            }
        }
        func_8084AEEC(this, &mut (*this).linearVelocity, sp34, sp32);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8084D7C4(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    if func_8083B040(this, globalCtx) == 0 {
        (*this).stateFlags2 |= 0x20 as libc::c_int as libc::c_uint;
        func_8084B158(globalCtx, this, 0 as *mut Input,
                      (*this).linearVelocity);
        func_8084B000(this);
        if (if (*this).unk_850 as libc::c_int == 0 as libc::c_int {
                0 as libc::c_int
            } else { (*this).unk_850 -= 1; (*this).unk_850 as libc::c_int })
               == 0 as libc::c_int {
            func_80838F18(globalCtx, this);
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8084D84C(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut sp34: f32_0 = 0.;
    let mut sp32: s16 = 0;
    let mut temp: s16 = 0;
    (*this).stateFlags2 |= 0x20 as libc::c_int as libc::c_uint;
    func_8084B158(globalCtx, this, sControlInput, (*this).linearVelocity);
    func_8084B000(this);
    if func_80837348(globalCtx, this, D_80854444.as_mut_ptr(),
                     1 as libc::c_int) == 0 &&
           func_8083D12C(globalCtx, this, sControlInput) == 0 {
        func_80837268(this, &mut sp34, &mut sp32, 0.0f32, globalCtx);
        temp =
            ((*this).actor.shape.rot.y as libc::c_int - sp32 as libc::c_int)
                as s16;
        if sp34 == 0.0f32 ||
               (if temp as libc::c_int >= 0 as libc::c_int {
                    temp as libc::c_int
                } else { -(temp as libc::c_int) }) > 0x6000 as libc::c_int ||
               (*this).currentBoots as libc::c_int ==
                   PLAYER_BOOTS_IRON as libc::c_int {
            func_80838F18(globalCtx, this);
        } else if func_80833C04(this) != 0 { func_8084D5CC(globalCtx, this); }
        func_8084D530(this, &mut (*this).linearVelocity, sp34, sp32);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8084D980(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut f32_0,
                                       mut arg3: *mut s16) -> s32 {
    let mut anim: *mut LinkAnimationHeader = 0 as *mut LinkAnimationHeader;
    let mut temp1: s16 = 0;
    let mut temp2: s32 = 0;
    temp1 = ((*this).currentYaw as libc::c_int - *arg3 as libc::c_int) as s16;
    if (if temp1 as libc::c_int >= 0 as libc::c_int {
            temp1 as libc::c_int
        } else { -(temp1 as libc::c_int) }) > 0x6000 as libc::c_int {
        anim = &mut gPlayerAnim_003328;
        if Math_StepToF(&mut (*this).linearVelocity, 0.0f32, 1.0f32) != 0 {
            (*this).currentYaw = *arg3
        } else { *arg2 = 0.0f32; *arg3 = (*this).currentYaw }
    } else {
        temp2 = func_8083FD78(this, arg2, arg3, globalCtx);
        if temp2 > 0 as libc::c_int {
            anim = &mut gPlayerAnim_0032F0
        } else if temp2 < 0 as libc::c_int {
            anim = &mut gPlayerAnim_0032D8
        } else {
            temp1 =
                ((*this).actor.shape.rot.y as libc::c_int -
                     *arg3 as libc::c_int) as s16;
            if temp1 as libc::c_int > 0 as libc::c_int {
                anim = &mut gPlayerAnim_0032D0
            } else { anim = &mut gPlayerAnim_0032C8 }
        }
    }
    if anim != (*this).skelAnime.animation as *mut LinkAnimationHeader {
        func_80832C6C(globalCtx, this, anim);
        return 1 as libc::c_int
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8084DAB4(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut sp2C: f32_0 = 0.;
    let mut sp2A: s16 = 0;
    func_8084B158(globalCtx, this, sControlInput, (*this).linearVelocity);
    func_8084B000(this);
    if func_80837348(globalCtx, this, D_80854444.as_mut_ptr(),
                     1 as libc::c_int) == 0 &&
           func_8083D12C(globalCtx, this, sControlInput) == 0 {
        func_80837268(this, &mut sp2C, &mut sp2A, 0.0f32, globalCtx);
        if sp2C == 0.0f32 {
            func_80838F18(globalCtx, this);
        } else if func_80833C04(this) == 0 {
            func_8084D574(globalCtx, this, sp2A);
        } else { func_8084D980(globalCtx, this, &mut sp2C, &mut sp2A); }
        func_8084D530(this, &mut (*this).linearVelocity, sp2C, sp2A);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8084DBC4(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: f32_0) {
    let mut sp2C: f32_0 = 0.;
    let mut sp2A: s16 = 0;
    func_80837268(this, &mut sp2C, &mut sp2A, 0.0f32, globalCtx);
    func_8084AEEC(this, &mut (*this).linearVelocity, sp2C * 0.5f32, sp2A);
    func_8084AEEC(this, &mut (*this).actor.velocity.y, arg2,
                  (*this).currentYaw);
}
#[no_mangle]
pub unsafe extern "C" fn func_8084DC48(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut sp2C: f32_0 = 0.;
    (*this).stateFlags2 |= 0x20 as libc::c_int as libc::c_uint;
    (*this).actor.gravity = 0.0f32;
    func_80836670(this, globalCtx);
    if func_8083B040(this, globalCtx) == 0 {
        if (*this).currentBoots as libc::c_int ==
               PLAYER_BOOTS_IRON as libc::c_int {
            func_80838F18(globalCtx, this);
            return
        }
        if (*this).unk_84F as libc::c_int == 0 as libc::c_int {
            if (*this).unk_850 as libc::c_int == 0 as libc::c_int {
                if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) !=
                       0 ||
                       (*this).skelAnime.curFrame >= 22.0f32 &&
                           !(!((*sControlInput).cur.button as libc::c_int |
                                   !(0x8000 as libc::c_int)) ==
                                 0 as libc::c_int) {
                    func_8083D330(globalCtx, this);
                } else if LinkAnimation_OnFrame(&mut (*this).skelAnime,
                                                20.0f32) != 0 as libc::c_int {
                    (*this).actor.velocity.y = -2.0f32
                }
                func_8083721C(this);
                return
            }
            func_8084B158(globalCtx, this, sControlInput,
                          (*this).actor.velocity.y);
            (*this).unk_6C2 = 16000 as libc::c_int as s16;
            if !((*sControlInput).cur.button as libc::c_int |
                     !(0x8000 as libc::c_int)) == 0 as libc::c_int &&
                   func_8083E5A8(this, globalCtx) == 0 &&
                   (*this).actor.bgCheckFlags as libc::c_int &
                       1 as libc::c_int == 0 &&
                   (*this).actor.yDistToWater <
                       D_80854784[((gSaveContext.inventory.upgrades &
                                        gUpgradeMasks[UPG_SCALE as libc::c_int
                                                          as usize]) as s32 >>
                                       gUpgradeShifts[UPG_SCALE as libc::c_int
                                                          as usize] as
                                           libc::c_int) as usize] {
                func_8084DBC4(globalCtx, this, -2.0f32);
            } else {
                (*this).unk_84F += 1;
                func_80832C6C(globalCtx, this, &mut gPlayerAnim_003328);
            }
        } else if (*this).unk_84F as libc::c_int == 1 as libc::c_int {
            LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
            func_8084B000(this);
            if ((*this).unk_6C2 as libc::c_int) < 10000 as libc::c_int {
                (*this).unk_84F += 1;
                (*this).unk_850 = (*this).actor.yDistToWater as s16;
                func_80832C6C(globalCtx, this, &mut gPlayerAnim_0032F0);
            }
        } else if func_8083D12C(globalCtx, this, sControlInput) == 0 {
            sp2C =
                (*this).unk_850 as libc::c_int as libc::c_float * 0.018f32 +
                    4.0f32;
            if (*this).stateFlags1 & 0x800 as libc::c_int as libc::c_uint != 0
               {
                sControlInput = 0 as *mut Input
            }
            func_8084B158(globalCtx, this, sControlInput,
                          fabsf((*this).actor.velocity.y));
            Math_ScaledStepToS(&mut (*this).unk_6C2,
                               -(10000 as libc::c_int) as s16,
                               800 as libc::c_int as s16);
            if sp2C > 8.0f32 { sp2C = 8.0f32 }
            func_8084DBC4(globalCtx, this, sp2C);
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8084DF6C(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    (*this).unk_862 = 0 as libc::c_int as s8;
    (*this).stateFlags1 &= !(0xc00 as libc::c_int) as libc::c_uint;
    (*this).getItemId = GI_NONE as libc::c_int as s8;
    func_8005B1A4(Gameplay_GetCamera(globalCtx, 0 as libc::c_int as s16));
}
#[no_mangle]
pub unsafe extern "C" fn func_8084DFAC(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) {
    func_8084DF6C(globalCtx, this);
    func_808322FC(this);
    func_8083C0E8(this, globalCtx);
    (*this).currentYaw = (*this).actor.shape.rot.y;
}
#[no_mangle]
pub unsafe extern "C" fn func_8084DFF4(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) -> s32 {
    let mut giEntry: *mut GetItemEntry = 0 as *mut GetItemEntry;
    let mut temp1: s32 = 0;
    let mut temp2: s32 = 0;
    if (*this).getItemId as libc::c_int == GI_NONE as libc::c_int {
        return 1 as libc::c_int
    }
    if (*this).unk_84F as libc::c_int == 0 as libc::c_int {
        giEntry =
            &mut *sGetItemTable.as_mut_ptr().offset(((*this).getItemId as
                                                         libc::c_int -
                                                         1 as libc::c_int) as
                                                        isize) as
                *mut GetItemEntry;
        (*this).unk_84F = 1 as libc::c_int as s8;
        Message_StartTextbox(globalCtx, (*giEntry).textId as u16_0,
                             &mut (*this).actor);
        Item_Give(globalCtx, (*giEntry).itemId);
        if (*this).getItemId as libc::c_int >= GI_RUPEE_GREEN as libc::c_int
               &&
               (*this).getItemId as libc::c_int <= GI_RUPEE_RED as libc::c_int
               ||
               (*this).getItemId as libc::c_int >=
                   GI_RUPEE_PURPLE as libc::c_int &&
                   (*this).getItemId as libc::c_int <=
                       GI_RUPEE_GOLD as libc::c_int ||
               (*this).getItemId as libc::c_int >=
                   GI_RUPEE_GREEN_LOSE as libc::c_int &&
                   (*this).getItemId as libc::c_int <=
                       GI_RUPEE_PURPLE_LOSE as libc::c_int ||
               (*this).getItemId as libc::c_int == GI_HEART as libc::c_int {
            Audio_PlaySoundGeneral(0x4831 as libc::c_int as u16_0,
                                   &mut D_801333D4, 4 as libc::c_int as u8_0,
                                   &mut D_801333E0, &mut D_801333E0,
                                   &mut D_801333E8);
        } else {
            if (*this).getItemId as libc::c_int ==
                   GI_HEART_CONTAINER_2 as libc::c_int ||
                   (*this).getItemId as libc::c_int ==
                       GI_HEART_CONTAINER as libc::c_int ||
                   (*this).getItemId as libc::c_int ==
                       GI_HEART_PIECE as libc::c_int &&
                       gSaveContext.inventory.questItems &
                           0xf0000000 as libc::c_uint ==
                           0x40000000 as libc::c_int as libc::c_uint {
                temp1 = 0x24 as libc::c_int | 0x900 as libc::c_int
            } else {
                temp2 =
                    if (*this).getItemId as libc::c_int ==
                           GI_HEART_PIECE as libc::c_int {
                        0x39 as libc::c_int
                    } else { (0x22 as libc::c_int) | 0x900 as libc::c_int };
                temp1 = temp2
            }
            Audio_PlayFanfare(temp1 as u16_0);
        }
    } else if Message_GetState(&mut (*globalCtx).msgCtx) as libc::c_int ==
                  TEXT_STATE_CLOSING as libc::c_int {
        if (*this).getItemId as libc::c_int ==
               GI_GAUNTLETS_SILVER as libc::c_int {
            (*globalCtx).nextEntranceIndex = 0x123 as libc::c_int as s16;
            (*globalCtx).sceneLoadFlag = 0x14 as libc::c_int as s8;
            gSaveContext.nextCutsceneIndex = 0xfff1 as libc::c_int as u16_0;
            (*globalCtx).fadeTransition = 0xf as libc::c_int as u8_0;
            (*this).stateFlags1 &=
                !(0x20000000 as libc::c_int) as libc::c_uint;
            func_80852FFC(globalCtx, 0 as *mut Actor, 8 as libc::c_int);
        }
        (*this).getItemId = GI_NONE as libc::c_int as s8
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8084E1EC(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    (*this).stateFlags2 |= 0x20 as libc::c_int as libc::c_uint;
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        if (*this).stateFlags1 & 0x400 as libc::c_int as libc::c_uint == 0 ||
               func_8084DFF4(globalCtx, this) != 0 {
            func_8084DF6C(globalCtx, this);
            func_80838F18(globalCtx, this);
            func_80832340(globalCtx, this);
        }
    } else if (*this).stateFlags1 & 0x400 as libc::c_int as libc::c_uint != 0
                  &&
                  LinkAnimation_OnFrame(&mut (*this).skelAnime, 10.0f32) != 0
     {
        func_808332F4(this, globalCtx);
        func_80832340(globalCtx, this);
        func_80835EA4(globalCtx, 8 as libc::c_int);
    } else if LinkAnimation_OnFrame(&mut (*this).skelAnime, 5.0f32) != 0 {
        func_80832698(this, 0x680a as libc::c_int as u16_0);
    }
    func_8084B000(this);
    func_8084AEEC(this, &mut (*this).linearVelocity, 0.0f32,
                  (*this).actor.shape.rot.y);
}
#[no_mangle]
pub unsafe extern "C" fn func_8084E30C(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    func_8084B000(this);
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        func_80838F18(globalCtx, this);
    }
    func_8084AEEC(this, &mut (*this).linearVelocity, 0.0f32,
                  (*this).actor.shape.rot.y);
}
#[no_mangle]
pub unsafe extern "C" fn func_8084E368(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    func_8084B000(this);
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        func_80843AE8(globalCtx, this);
    }
    func_8084AEEC(this, &mut (*this).linearVelocity, 0.0f32,
                  (*this).actor.shape.rot.y);
}
static mut D_808549D4: [s16; 6] =
    [0x600 as libc::c_int as s16, 0x4f6 as libc::c_int as s16,
     0x604 as libc::c_int as s16, 0x1f1 as libc::c_int as s16,
     0x568 as libc::c_int as s16, 0x5f4 as libc::c_int as s16];
#[no_mangle]
pub unsafe extern "C" fn func_8084E3C4(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        func_808322A4(globalCtx, this, &mut gPlayerAnim_0030A8);
        (*this).unk_850 = 1 as libc::c_int as s16;
        if (*this).stateFlags2 & 0x2800000 as libc::c_int as libc::c_uint != 0
           {
            (*this).stateFlags2 |= 0x1000000 as libc::c_int as libc::c_uint
        } else {
            func_8010BD58(globalCtx,
                          OCARINA_ACTION_FREE_PLAY as libc::c_int as u16_0);
        }
        return
    }
    if (*this).unk_850 as libc::c_int == 0 as libc::c_int { return }
    if (*globalCtx).msgCtx.ocarinaMode as libc::c_int ==
           OCARINA_MODE_04 as libc::c_int {
        func_8005B1A4(Gameplay_GetCamera(globalCtx, 0 as libc::c_int as s16));
        if !(*this).targetActor.is_null() &&
               (*this).targetActor == (*this).unk_6A8 {
            func_80853148(globalCtx, (*this).targetActor);
        } else if ((*this).naviTextId as libc::c_int) < 0 as libc::c_int {
            (*this).targetActor = (*this).naviActor;
            (*(*this).naviActor).textId =
                -((*this).naviTextId as libc::c_int) as u16_0;
            func_80853148(globalCtx, (*this).targetActor);
        } else if func_8083B040(this, globalCtx) == 0 {
            func_8083A098(this, &mut gPlayerAnim_003098, globalCtx);
        }
        (*this).stateFlags2 &= !(0x3800000 as libc::c_int) as libc::c_uint;
        (*this).unk_6A8 = 0 as *mut Actor
    } else if (*globalCtx).msgCtx.ocarinaMode as libc::c_int ==
                  OCARINA_MODE_02 as libc::c_int {
        gSaveContext.respawn[RESPAWN_MODE_RETURN as libc::c_int as
                                 usize].entranceIndex =
            D_808549D4[(*globalCtx).msgCtx.lastPlayedSong as usize];
        gSaveContext.respawn[RESPAWN_MODE_RETURN as libc::c_int as
                                 usize].playerParams =
            0x5ff as libc::c_int as s16;
        gSaveContext.respawn[RESPAWN_MODE_RETURN as libc::c_int as usize].data
            = (*globalCtx).msgCtx.lastPlayedSong as s8;
        (*this).csMode = 0 as libc::c_int as u8_0;
        (*this).stateFlags1 &= !(0x20000000 as libc::c_int) as libc::c_uint;
        func_80852FFC(globalCtx, 0 as *mut Actor, 8 as libc::c_int);
        (*globalCtx).mainCamera.unk_14C =
            ((*globalCtx).mainCamera.unk_14C as libc::c_int &
                 !(8 as libc::c_int)) as s16;
        (*this).stateFlags1 |= 0x30000000 as libc::c_int as libc::c_uint;
        (*this).stateFlags2 |= 0x8000000 as libc::c_int as libc::c_uint;
        if Actor_Spawn(&mut (*globalCtx).actorCtx, globalCtx,
                       ACTOR_DEMO_KANKYO as libc::c_int as s16, 0.0f32,
                       0.0f32, 0.0f32, 0 as libc::c_int as s16,
                       0 as libc::c_int as s16, 0 as libc::c_int as s16,
                       0xf as libc::c_int as s16).is_null() {
            Environment_WarpSongLeave(globalCtx);
        }
        gSaveContext.seqId = 0xffff as libc::c_int as u8_0;
        gSaveContext.natureAmbienceId = 0xff as libc::c_int as u8_0
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8084E604(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        func_8083A098(this, &mut gPlayerAnim_003050, globalCtx);
    } else if LinkAnimation_OnFrame(&mut (*this).skelAnime, 3.0f32) != 0 {
        Inventory_ChangeAmmo(ITEM_NUT as libc::c_int as s16,
                             -(1 as libc::c_int) as s16);
        Actor_Spawn(&mut (*globalCtx).actorCtx, globalCtx,
                    ACTOR_EN_ARROW as libc::c_int as s16,
                    (*this).bodyPartsPos[15 as libc::c_int as usize].x,
                    (*this).bodyPartsPos[15 as libc::c_int as usize].y,
                    (*this).bodyPartsPos[15 as libc::c_int as usize].z,
                    4000 as libc::c_int as s16, (*this).actor.shape.rot.y,
                    0 as libc::c_int as s16, 10 as libc::c_int as s16);
        func_80832698(this, 0x6800 as libc::c_int as u16_0);
    }
    func_8083721C(this);
}
static mut D_808549E0: [struct_80832924; 4] =
    [{
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: 0x3857 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0x6804 as libc::c_int as u16_0,
                             field: 0x2057 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0x6814 as libc::c_int as u16_0,
                             field: 0x2045 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: -(0x287b as libc::c_int) as s16,};
         init
     }];
#[no_mangle]
pub unsafe extern "C" fn func_8084E6D4(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut cond: s32 = 0;
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        if (*this).unk_850 as libc::c_int != 0 as libc::c_int {
            if (*this).unk_850 as libc::c_int >= 2 as libc::c_int {
                (*this).unk_850 -= 1
            }
            if func_8084DFF4(globalCtx, this) != 0 &&
                   (*this).unk_850 as libc::c_int == 1 as libc::c_int {
                cond =
                    (!(*this).targetActor.is_null() &&
                         ((*this).exchangeItemId as libc::c_int) <
                             0 as libc::c_int ||
                         (*this).stateFlags3 as libc::c_int &
                             0x20 as libc::c_int != 0) as libc::c_int;
                if cond != 0 ||
                       gSaveContext.healthAccumulator as libc::c_int ==
                           0 as libc::c_int {
                    if cond != 0 {
                        func_8084DF6C(globalCtx, this);
                        (*this).exchangeItemId =
                            EXCH_ITEM_NONE as libc::c_int as s8;
                        if func_8084B4D4(globalCtx, this) == 0 as libc::c_int
                           {
                            func_80853148(globalCtx, (*this).targetActor);
                        }
                    } else { func_8084DFAC(globalCtx, this); }
                }
            }
        } else {
            func_80832DBC(this);
            if (*this).getItemId as libc::c_int == GI_ICE_TRAP as libc::c_int
               {
                (*this).stateFlags1 &=
                    !(0xc00 as libc::c_int) as libc::c_uint;
                if (*this).getItemId as libc::c_int !=
                       GI_ICE_TRAP as libc::c_int {
                    Actor_Spawn(&mut (*globalCtx).actorCtx, globalCtx,
                                ACTOR_EN_CLEAR_TAG as libc::c_int as s16,
                                (*this).actor.world.pos.x,
                                (*this).actor.world.pos.y + 100.0f32,
                                (*this).actor.world.pos.z,
                                0 as libc::c_int as s16,
                                0 as libc::c_int as s16,
                                0 as libc::c_int as s16,
                                0 as libc::c_int as s16);
                    func_8083C0E8(this, globalCtx);
                } else {
                    (*this).actor.colChkInfo.damage =
                        0 as libc::c_int as u8_0;
                    func_80837C0C(globalCtx, this, 3 as libc::c_int, 0.0f32,
                                  0.0f32, 0 as libc::c_int as s16,
                                  20 as libc::c_int);
                }
                return
            }
            if (*this).skelAnime.animation ==
                   &mut gPlayerAnim_002DF8 as *mut LinkAnimationHeader as
                       *mut libc::c_void {
                func_808322D0(globalCtx, this, &mut gPlayerAnim_002788);
            } else {
                func_808322D0(globalCtx, this, &mut gPlayerAnim_002780);
            }
            (*this).unk_850 = 2 as libc::c_int as s16;
            func_80835EA4(globalCtx, 9 as libc::c_int);
        }
    } else {
        if (*this).unk_850 as libc::c_int == 0 as libc::c_int {
            if !(gSaveContext.linkAge == 0 as libc::c_int) {
                func_80832924(this, D_808549E0.as_mut_ptr());
            }
            return
        }
        if (*this).skelAnime.animation ==
               &mut gPlayerAnim_002788 as *mut LinkAnimationHeader as
                   *mut libc::c_void {
            Math_ScaledStepToS(&mut (*this).actor.shape.rot.y,
                               (Camera_GetCamDirYaw((*globalCtx).cameraPtrs[(*globalCtx).activeCamera
                                                                                as
                                                                                usize])
                                    as libc::c_int + 0x8000 as libc::c_int) as
                                   s16, 4000 as libc::c_int as s16);
        }
        if LinkAnimation_OnFrame(&mut (*this).skelAnime, 21.0f32) != 0 {
            func_808332F4(this, globalCtx);
        }
    };
}
static mut D_808549F0: [struct_80832924; 1] =
    [{
         let mut init =
             struct_80832924{sfxId: 0x184e as libc::c_int as u16_0,
                             field: -(0x83c as libc::c_int) as s16,};
         init
     }];
#[no_mangle]
pub unsafe extern "C" fn func_8084E988(mut this: *mut Player) {
    func_80832924(this, D_808549F0.as_mut_ptr());
}
static mut D_808549F4: [struct_80832924; 2] =
    [{
         let mut init =
             struct_80832924{sfxId: 0x6814 as libc::c_int as u16_0,
                             field: 0x2005 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: -(0x280f as libc::c_int) as s16,};
         init
     }];
#[no_mangle]
pub unsafe extern "C" fn func_8084E9AC(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        if (*this).unk_84F as libc::c_int == 0 as libc::c_int {
            if (if (*this).unk_850 as libc::c_int == 0 as libc::c_int {
                    0 as libc::c_int
                } else {
                    (*this).unk_850 -= 1;
                    (*this).unk_850 as libc::c_int
                }) == 0 as libc::c_int {
                (*this).unk_84F = 1 as libc::c_int as s8;
                (*this).skelAnime.endFrame =
                    (*this).skelAnime.animLength - 1.0f32
            }
        } else { func_8083C0E8(this, globalCtx); }
    } else {
        if gSaveContext.linkAge == 0 as libc::c_int &&
               LinkAnimation_OnFrame(&mut (*this).skelAnime, 158.0f32) != 0 {
            func_80832698(this, 0x6800 as libc::c_int as u16_0);
            return
        }
        if !(gSaveContext.linkAge == 0 as libc::c_int) {
            func_80832924(this, D_808549F4.as_mut_ptr());
        } else { func_8084E988(this); }
    };
}
static mut D_808549FC: [u8_0; 5] =
    [0x1 as libc::c_int as u8_0, 0x3 as libc::c_int as u8_0,
     0x2 as libc::c_int as u8_0, 0x4 as libc::c_int as u8_0,
     0x4 as libc::c_int as u8_0];
#[no_mangle]
pub unsafe extern "C" fn func_8084EAC0(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        if (*this).unk_850 as libc::c_int == 0 as libc::c_int {
            if (*this).itemActionParam as libc::c_int ==
                   PLAYER_AP_BOTTLE_POE as libc::c_int {
                let mut rand: s32 =
                    Rand_S16Offset(-(1 as libc::c_int) as s16,
                                   3 as libc::c_int as s16) as s32;
                if rand == 0 as libc::c_int { rand = 3 as libc::c_int }
                if rand < 0 as libc::c_int &&
                       gSaveContext.health as libc::c_int <=
                           0x10 as libc::c_int {
                    rand = 3 as libc::c_int
                }
                if rand < 0 as libc::c_int {
                    Health_ChangeBy(globalCtx, -(0x10 as libc::c_int) as s16);
                } else {
                    gSaveContext.healthAccumulator =
                        (rand * 0x10 as libc::c_int) as s16
                }
            } else {
                let mut sp28: s32 =
                    D_808549FC[((*this).itemActionParam as libc::c_int -
                                    PLAYER_AP_BOTTLE_POTION_RED as
                                        libc::c_int) as usize] as s32;
                if sp28 & 1 as libc::c_int != 0 {
                    gSaveContext.healthAccumulator =
                        0x140 as libc::c_int as s16
                }
                if sp28 & 2 as libc::c_int != 0 { Magic_Fill(globalCtx); }
                if sp28 & 4 as libc::c_int != 0 {
                    gSaveContext.healthAccumulator =
                        0x50 as libc::c_int as s16
                }
            }
            func_808322A4(globalCtx, this, &mut gPlayerAnim_002670);
            (*this).unk_850 = 1 as libc::c_int as s16;
            return
        }
        func_8083C0E8(this, globalCtx);
        func_8005B1A4(Gameplay_GetCamera(globalCtx, 0 as libc::c_int as s16));
    } else if (*this).unk_850 as libc::c_int == 1 as libc::c_int {
        if gSaveContext.healthAccumulator as libc::c_int == 0 as libc::c_int
               && gSaveContext.unk_13F0 as libc::c_int != 9 as libc::c_int {
            func_80832B78(globalCtx, this, &mut gPlayerAnim_002660);
            (*this).unk_850 = 2 as libc::c_int as s16;
            Player_UpdateBottleHeld(globalCtx, this,
                                    ITEM_BOTTLE as libc::c_int,
                                    PLAYER_AP_BOTTLE as libc::c_int);
        }
        func_80832698(this,
                      (0x6810 as libc::c_int - 0x800 as libc::c_int) as
                          u16_0);
    } else if (*this).unk_850 as libc::c_int == 2 as libc::c_int &&
                  LinkAnimation_OnFrame(&mut (*this).skelAnime, 29.0f32) != 0
     {
        func_80832698(this, 0x680a as libc::c_int as u16_0);
    };
}
static mut D_80854A04: [BottleCatchInfo; 4] =
    [{
         let mut init =
             BottleCatchInfo{actorId: ACTOR_EN_ELF as libc::c_int as s16,
                             itemId: ITEM_FAIRY as libc::c_int as u8_0,
                             actionParam: 0x2a as libc::c_int as u8_0,
                             textId: 0x46 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             BottleCatchInfo{actorId: ACTOR_EN_FISH as libc::c_int as s16,
                             itemId: ITEM_FISH as libc::c_int as u8_0,
                             actionParam: 0x1f as libc::c_int as u8_0,
                             textId: 0x47 as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             BottleCatchInfo{actorId: ACTOR_EN_ICE_HONO as libc::c_int as s16,
                             itemId: ITEM_BLUE_FIRE as libc::c_int as u8_0,
                             actionParam: 0x20 as libc::c_int as u8_0,
                             textId: 0x5d as libc::c_int as u8_0,};
         init
     },
     {
         let mut init =
             BottleCatchInfo{actorId: ACTOR_EN_INSECT as libc::c_int as s16,
                             itemId: ITEM_BUG as libc::c_int as u8_0,
                             actionParam: 0x21 as libc::c_int as u8_0,
                             textId: 0x7a as libc::c_int as u8_0,};
         init
     }];
#[no_mangle]
pub unsafe extern "C" fn func_8084ECA4(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut sp24: *mut struct_80854554 = 0 as *mut struct_80854554;
    let mut catchInfo: *mut BottleCatchInfo = 0 as *mut BottleCatchInfo;
    let mut temp: s32 = 0;
    let mut i: s32 = 0;
    sp24 =
        &mut *D_80854554.as_mut_ptr().offset((*this).unk_850 as isize) as
            *mut struct_80854554;
    func_8083721C(this);
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        if (*this).unk_84F as libc::c_int != 0 as libc::c_int {
            if (*this).unk_850 as libc::c_int == 0 as libc::c_int {
                Message_StartTextbox(globalCtx,
                                     D_80854A04[((*this).unk_84F as
                                                     libc::c_int -
                                                     1 as libc::c_int) as
                                                    usize].textId as u16_0,
                                     &mut (*this).actor);
                Audio_PlayFanfare((0x22 as libc::c_int | 0x900 as libc::c_int)
                                      as u16_0);
                (*this).unk_850 = 1 as libc::c_int as s16
            } else if Message_GetState(&mut (*globalCtx).msgCtx) as
                          libc::c_int == TEXT_STATE_CLOSING as libc::c_int {
                (*this).unk_84F = 0 as libc::c_int as s8;
                func_8005B1A4(Gameplay_GetCamera(globalCtx,
                                                 0 as libc::c_int as s16));
            }
        } else { func_8083C0E8(this, globalCtx); }
    } else if (*this).unk_84F as libc::c_int == 0 as libc::c_int {
        temp =
            ((*this).skelAnime.curFrame -
                 (*sp24).unk_08 as libc::c_int as libc::c_float) as s32;
        if temp >= 0 as libc::c_int {
            if (*sp24).unk_09 as libc::c_int >= temp {
                if (*this).unk_850 as libc::c_int != 0 as libc::c_int {
                    if temp == 0 as libc::c_int {
                        func_8002F7DC(&mut (*this).actor,
                                      0x2868 as libc::c_int as u16_0);
                    }
                }
                if !(*this).interactRangeActor.is_null() {
                    catchInfo =
                        &mut *D_80854A04.as_mut_ptr().offset(0 as libc::c_int
                                                                 as isize) as
                            *mut BottleCatchInfo;
                    i = 0 as libc::c_int;
                    while i < 4 as libc::c_int {
                        if (*(*this).interactRangeActor).id as libc::c_int ==
                               (*catchInfo).actorId as libc::c_int {
                            break ;
                        }
                        i += 1;
                        catchInfo = catchInfo.offset(1)
                    }
                    if i < 4 as libc::c_int {
                        (*this).unk_84F = (i + 1 as libc::c_int) as s8;
                        (*this).unk_850 = 0 as libc::c_int as s16;
                        (*this).stateFlags1 |=
                            0x30000000 as libc::c_int as libc::c_uint;
                        (*(*this).interactRangeActor).parent =
                            &mut (*this).actor;
                        Player_UpdateBottleHeld(globalCtx, this,
                                                (*catchInfo).itemId as s32,
                                                if (*catchInfo).actionParam as
                                                       libc::c_int >=
                                                       0 as libc::c_int {
                                                    (*catchInfo).actionParam
                                                        as libc::c_int
                                                } else {
                                                    -((*catchInfo).actionParam
                                                          as libc::c_int)
                                                });
                        func_808322D0(globalCtx, this, (*sp24).unk_04);
                        func_80835EA4(globalCtx, 4 as libc::c_int);
                    }
                }
            }
        }
    }
    if (*this).skelAnime.curFrame <= 7.0f32 {
        (*this).stateFlags1 |= 2 as libc::c_int as libc::c_uint
    };
}
static mut D_80854A1C: Vec3f =
    { let mut init = Vec3f{x: 0.0f32, y: 0.0f32, z: 5.0f32,}; init };
#[no_mangle]
pub unsafe extern "C" fn func_8084EED8(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        func_8083C0E8(this, globalCtx);
        func_8005B1A4(Gameplay_GetCamera(globalCtx, 0 as libc::c_int as s16));
        return
    }
    if LinkAnimation_OnFrame(&mut (*this).skelAnime, 37.0f32) != 0 {
        Player_SpawnFairy(globalCtx, this, &mut (*this).leftHandPos,
                          &mut D_80854A1C,
                          FAIRY_REVIVE_BOTTLE as libc::c_int);
        Player_UpdateBottleHeld(globalCtx, this, ITEM_BOTTLE as libc::c_int,
                                PLAYER_AP_BOTTLE as libc::c_int);
        func_8002F7DC(&mut (*this).actor, 0x286c as libc::c_int as u16_0);
        func_8002F7DC(&mut (*this).actor,
                      (0x28a8 as libc::c_int - 0x800 as libc::c_int) as
                          u16_0);
    } else if LinkAnimation_OnFrame(&mut (*this).skelAnime, 47.0f32) != 0 {
        gSaveContext.healthAccumulator = 0x140 as libc::c_int as s16
    };
}
static mut D_80854A28: [BottleDropInfo; 3] =
    [{
         let mut init =
             BottleDropInfo{actorId: ACTOR_EN_FISH as libc::c_int as s16,
                            actorParams: FISH_DROPPED as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             BottleDropInfo{actorId: ACTOR_EN_ICE_HONO as libc::c_int as s16,
                            actorParams: 0 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             BottleDropInfo{actorId: ACTOR_EN_INSECT as libc::c_int as s16,
                            actorParams: 2 as libc::c_int as s16,};
         init
     }];
static mut D_80854A34: [struct_80832924; 2] =
    [{
         let mut init =
             struct_80832924{sfxId: 0x6814 as libc::c_int as u16_0,
                             field: 0x2026 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0x286c as libc::c_int as u16_0,
                             field: -(0x828 as libc::c_int) as s16,};
         init
     }];
#[no_mangle]
pub unsafe extern "C" fn func_8084EFC0(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    func_8083721C(this);
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        func_8083C0E8(this, globalCtx);
        func_8005B1A4(Gameplay_GetCamera(globalCtx, 0 as libc::c_int as s16));
        return
    }
    if LinkAnimation_OnFrame(&mut (*this).skelAnime, 76.0f32) != 0 {
        let mut dropInfo: *mut BottleDropInfo =
            &mut *D_80854A28.as_mut_ptr().offset(((*this).itemActionParam as
                                                      libc::c_int -
                                                      PLAYER_AP_BOTTLE_FISH as
                                                          libc::c_int) as
                                                     isize) as
                *mut BottleDropInfo;
        Actor_Spawn(&mut (*globalCtx).actorCtx, globalCtx,
                    (*dropInfo).actorId,
                    Math_SinS((*this).actor.shape.rot.y) * 5.0f32 +
                        (*this).leftHandPos.x, (*this).leftHandPos.y,
                    Math_CosS((*this).actor.shape.rot.y) * 5.0f32 +
                        (*this).leftHandPos.z, 0x4000 as libc::c_int as s16,
                    (*this).actor.shape.rot.y, 0 as libc::c_int as s16,
                    (*dropInfo).actorParams);
        Player_UpdateBottleHeld(globalCtx, this, ITEM_BOTTLE as libc::c_int,
                                PLAYER_AP_BOTTLE as libc::c_int);
        return
    }
    func_80832924(this, D_80854A34.as_mut_ptr());
}
static mut D_80854A3C: [struct_80832924; 1] =
    [{
         let mut init =
             struct_80832924{sfxId: 0x877 as libc::c_int as u16_0,
                             field: -(0x81e as libc::c_int) as s16,};
         init
     }];
#[no_mangle]
pub unsafe extern "C" fn func_8084F104(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    (*this).stateFlags2 |= 0x20 as libc::c_int as libc::c_uint;
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        if ((*this).unk_850 as libc::c_int) < 0 as libc::c_int {
            func_8083C0E8(this, globalCtx);
        } else if (*this).exchangeItemId as libc::c_int ==
                      EXCH_ITEM_NONE as libc::c_int {
            let mut targetActor: *mut Actor = (*this).targetActor;
            (*this).unk_862 = 0 as libc::c_int as s8;
            if (*targetActor).textId as libc::c_int != 0xffff as libc::c_int {
                (*this).actor.flags |=
                    ((1 as libc::c_int) << 8 as libc::c_int) as libc::c_uint
            }
            func_80853148(globalCtx, targetActor);
        } else {
            let mut giEntry: *mut GetItemEntry =
                &mut *sGetItemTable.as_mut_ptr().offset((*D_80854528.as_mut_ptr().offset(((*this).exchangeItemId
                                                                                              as
                                                                                              libc::c_int
                                                                                              -
                                                                                              1
                                                                                                  as
                                                                                                  libc::c_int)
                                                                                             as
                                                                                             isize)
                                                             as libc::c_int -
                                                             1 as libc::c_int)
                                                            as isize) as
                    *mut GetItemEntry;
            if (*this).itemActionParam as libc::c_int >=
                   PLAYER_AP_LETTER_ZELDA as libc::c_int {
                if (*giEntry).gi as libc::c_int >= 0 as libc::c_int {
                    (*this).unk_862 = (*giEntry).gi
                } else {
                    (*this).unk_862 = -((*giEntry).gi as libc::c_int) as s8
                }
            }
            if (*this).unk_850 as libc::c_int == 0 as libc::c_int {
                Message_StartTextbox(globalCtx, (*this).actor.textId,
                                     &mut (*this).actor);
                if (*this).itemActionParam as libc::c_int ==
                       PLAYER_AP_CHICKEN as libc::c_int ||
                       (*this).itemActionParam as libc::c_int ==
                           PLAYER_AP_POCKET_CUCCO as libc::c_int {
                    func_8002F7DC(&mut (*this).actor,
                                  0x2813 as libc::c_int as u16_0);
                }
                (*this).unk_850 = 1 as libc::c_int as s16
            } else if Message_GetState(&mut (*globalCtx).msgCtx) as
                          libc::c_int == TEXT_STATE_CLOSING as libc::c_int {
                (*this).actor.flags &=
                    !((1 as libc::c_int) << 8 as libc::c_int) as libc::c_uint;
                (*this).unk_862 = 0 as libc::c_int as s8;
                if (*this).unk_84F as libc::c_int == 1 as libc::c_int {
                    func_80832264(globalCtx, this, &mut gPlayerAnim_002698);
                    (*this).unk_850 = -(1 as libc::c_int) as s16
                } else { func_8083C0E8(this, globalCtx); }
                func_8005B1A4(Gameplay_GetCamera(globalCtx,
                                                 0 as libc::c_int as s16));
            }
        }
    } else if (*this).unk_850 as libc::c_int >= 0 as libc::c_int {
        func_80832924(this, D_80854A3C.as_mut_ptr());
    }
    if (*this).unk_84F as libc::c_int == 0 as libc::c_int &&
           !(*this).unk_664.is_null() {
        (*this).actor.shape.rot.y =
            func_8083DB98(this, 0 as libc::c_int) as s16;
        (*this).currentYaw = (*this).actor.shape.rot.y
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8084F308(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    (*this).stateFlags2 |= 0x60 as libc::c_int as libc::c_uint;
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        func_80832284(globalCtx, this, &mut gPlayerAnim_003128);
    }
    if func_80832594(this, 0 as libc::c_int, 100 as libc::c_int) != 0 {
        func_80839F90(this, globalCtx);
        (*this).stateFlags2 &= !(0x80 as libc::c_int) as libc::c_uint
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8084F390(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut floorPoly: *mut CollisionPoly = 0 as *mut CollisionPoly;
    let mut sp50: f32_0 = 0.;
    let mut sp4C: f32_0 = 0.;
    let mut sp48: f32_0 = 0.;
    let mut sp46: s16 = 0;
    let mut sp44: s16 = 0;
    let mut sp38: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    (*this).stateFlags2 |= 0x60 as libc::c_int as libc::c_uint;
    LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
    func_8084269C(globalCtx, this);
    func_800F4138(&mut (*this).actor.projectedPos,
                  (0x8d0 as libc::c_int - 0x800 as libc::c_int) as u16_0,
                  (*this).actor.speedXZ);
    if func_8083B040(this, globalCtx) == 0 as libc::c_int {
        floorPoly = (*this).actor.floorPoly;
        if floorPoly.is_null() { func_80837B9C(this, globalCtx); return }
        func_8083E298(floorPoly, &mut sp38, &mut sp46);
        sp44 = sp46;
        if (*this).unk_84F as libc::c_int != 0 as libc::c_int {
            sp44 = (sp46 as libc::c_int + 0x8000 as libc::c_int) as s16
        }
        if (*this).linearVelocity < 0 as libc::c_int as libc::c_float {
            sp46 = (sp46 as libc::c_int + 0x8000 as libc::c_int) as s16
        }
        sp50 = (1.0f32 - sp38.y) * 40.0f32;
        sp50 =
            if sp50 < 0 as libc::c_int as libc::c_float {
                0 as libc::c_int as libc::c_float
            } else if sp50 > 10.0f32 { 10.0f32 } else { sp50 };
        sp4C = sp50 * sp50 * 0.015f32;
        sp48 = sp38.y * 0.01f32;
        if SurfaceType_GetSlope(&mut (*globalCtx).colCtx, floorPoly,
                                (*this).actor.floorBgId as s32) !=
               1 as libc::c_int as libc::c_uint {
            sp50 = 0 as libc::c_int as f32_0;
            sp48 = sp38.y * 10.0f32
        }
        if sp4C < 1.0f32 { sp4C = 1.0f32 }
        if Math_AsymStepToF(&mut (*this).linearVelocity, sp50, sp4C, sp48) !=
               0 && sp50 == 0 as libc::c_int as libc::c_float {
            let mut anim: *mut LinkAnimationHeader =
                0 as *mut LinkAnimationHeader;
            if (*this).unk_84F as libc::c_int == 0 as libc::c_int {
                anim = D_80853D04[(*this).modelAnimType as usize]
            } else { anim = D_80853D1C[(*this).modelAnimType as usize] }
            func_8083A098(this, anim, globalCtx);
        }
        Math_SmoothStepToS(&mut (*this).currentYaw, sp46,
                           10 as libc::c_int as s16,
                           4000 as libc::c_int as s16,
                           800 as libc::c_int as s16);
        Math_ScaledStepToS(&mut (*this).actor.shape.rot.y, sp44,
                           2000 as libc::c_int as s16);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8084F608(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    if (if (*this).unk_850 as libc::c_int == 0 as libc::c_int {
            0 as libc::c_int
        } else { (*this).unk_850 -= 1; (*this).unk_850 as libc::c_int }) ==
           0 as libc::c_int && func_8083ADD4(globalCtx, this) != 0 {
        func_80852280(globalCtx, this, 0 as *mut CsCmdActorAction);
        func_80835C58(globalCtx, this,
                      Some(func_80852E14 as
                               unsafe extern "C" fn(_: *mut Player,
                                                    _: *mut GlobalContext)
                                   -> ()), 0 as libc::c_int);
        func_80852E14(this, globalCtx);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8084F698(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    func_80835C58(globalCtx, this,
                  Some(func_8084F608 as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  0 as libc::c_int);
    (*this).unk_850 = 40 as libc::c_int as s16;
    Actor_Spawn(&mut (*globalCtx).actorCtx, globalCtx,
                ACTOR_DEMO_KANKYO as libc::c_int as s16, 0.0f32, 0.0f32,
                0.0f32, 0 as libc::c_int as s16, 0 as libc::c_int as s16,
                0 as libc::c_int as s16, 0x10 as libc::c_int as s16);
}
#[no_mangle]
pub unsafe extern "C" fn func_8084F710(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut pad: s32 = 0;
    if (*this).unk_84F as libc::c_int != 0 as libc::c_int &&
           ((*globalCtx).csCtx.frames as libc::c_int) < 0x131 as libc::c_int {
        (*this).actor.gravity = 0.0f32;
        (*this).actor.velocity.y = 0.0f32
    } else if D_80853600 < 150.0f32 {
        if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
            if (*this).unk_850 as libc::c_int == 0 as libc::c_int {
                if (*this).actor.bgCheckFlags as libc::c_int &
                       1 as libc::c_int != 0 {
                    (*this).skelAnime.endFrame =
                        (*this).skelAnime.animLength - 1.0f32;
                    func_808328A0(this);
                    (*this).unk_850 = 1 as libc::c_int as s16
                }
            } else {
                if (*globalCtx).sceneNum as libc::c_int ==
                       SCENE_SPOT04 as libc::c_int &&
                       func_8083ADD4(globalCtx, this) != 0 {
                    return
                }
                func_80853080(this, globalCtx);
            }
        }
        Math_SmoothStepToF(&mut (*this).actor.velocity.y, 2.0f32, 0.3f32,
                           8.0f32, 0.5f32);
    }
    if (*globalCtx).sceneNum as libc::c_int == SCENE_KENJYANOMA as libc::c_int
           && func_8083ADD4(globalCtx, this) != 0 {
        return
    }
    if (*globalCtx).csCtx.state as libc::c_int != CS_STATE_IDLE as libc::c_int
           && !(*globalCtx).csCtx.linkAction.is_null() {
        let mut sp28: f32_0 = (*this).actor.world.pos.y;
        func_808529D0(globalCtx, this, (*globalCtx).csCtx.linkAction);
        (*this).actor.world.pos.y = sp28
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8084F88C(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
    let fresh17 = (*this).unk_850;
    (*this).unk_850 = (*this).unk_850 + 1;
    if fresh17 as libc::c_int > 8 as libc::c_int &&
           (*globalCtx).sceneLoadFlag as libc::c_int == 0 as libc::c_int {
        if (*this).unk_84F as libc::c_int != 0 as libc::c_int {
            if (*globalCtx).sceneNum as libc::c_int == 9 as libc::c_int {
                Gameplay_TriggerRespawn(globalCtx);
                (*globalCtx).nextEntranceIndex = 0x88 as libc::c_int as s16
            } else if ((*this).unk_84F as libc::c_int) < 0 as libc::c_int {
                Gameplay_TriggerRespawn(globalCtx);
            } else { Gameplay_TriggerVoidOut(globalCtx); }
            (*globalCtx).fadeTransition = 4 as libc::c_int as u8_0;
            func_80078884(0x5801 as libc::c_int as u16_0);
        } else {
            (*globalCtx).fadeTransition = 2 as libc::c_int as u8_0;
            gSaveContext.nextTransition = 2 as libc::c_int as u8_0;
            gSaveContext.seqId = 0xffff as libc::c_int as u8_0;
            gSaveContext.natureAmbienceId = 0xff as libc::c_int as u8_0
        }
        (*globalCtx).sceneLoadFlag = 0x14 as libc::c_int as s8
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8084F9A0(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    func_80839800(this, globalCtx);
}
#[no_mangle]
pub unsafe extern "C" fn func_8084F9C0(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    (*this).actor.gravity = -1.0f32;
    LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
    if (*this).actor.velocity.y < 0.0f32 {
        func_80837B9C(this, globalCtx);
    } else if (*this).actor.velocity.y < 6.0f32 {
        Math_StepToF(&mut (*this).linearVelocity, 3.0f32, 0.5f32);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8084FA54(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    (*this).unk_6AD = 2 as libc::c_int as u8_0;
    func_8083AD4C(globalCtx, this);
    LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
    func_80836670(this, globalCtx);
    (*this).unk_6BE =
        (func_8084ABD8(globalCtx, this, 1 as libc::c_int,
                       0 as libc::c_int as s16) as libc::c_int -
             (*this).actor.shape.rot.y as libc::c_int) as s16;
    (*this).unk_6AE =
        ((*this).unk_6AE as libc::c_int | 0x80 as libc::c_int) as u16_0;
    if ((*globalCtx).shootingGalleryStatus as libc::c_int) < 0 as libc::c_int
       {
        (*globalCtx).shootingGalleryStatus += 1;
        if (*globalCtx).shootingGalleryStatus as libc::c_int ==
               0 as libc::c_int {
            func_8083C148(this, globalCtx);
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8084FB10(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    if (*this).unk_84F as libc::c_int >= 0 as libc::c_int {
        if ((*this).unk_84F as libc::c_int) < 6 as libc::c_int {
            (*this).unk_84F += 1
        }
        if func_80832594(this, 1 as libc::c_int, 100 as libc::c_int) != 0 {
            (*this).unk_84F = -(1 as libc::c_int) as s8;
            EffectSsIcePiece_SpawnBurst(globalCtx,
                                        &mut (*this).actor.world.pos,
                                        (*this).actor.scale.x);
            func_8002F7DC(&mut (*this).actor, 0x875 as libc::c_int as u16_0);
        } else {
            (*this).stateFlags2 |= 0x4000 as libc::c_int as libc::c_uint
        }
        if (*globalCtx).gameplayFrames.wrapping_rem(4 as libc::c_int as
                                                        libc::c_uint) ==
               0 as libc::c_int as libc::c_uint {
            Player_InflictDamage(globalCtx, -(1 as libc::c_int));
        }
    } else if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        func_80839F90(this, globalCtx);
        func_80837AFC(this, -(20 as libc::c_int));
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8084FBF4(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
    func_808382BC(this);
    if (*this).unk_850 as libc::c_int % 25 as libc::c_int != 0 as libc::c_int
           || func_80837B18(globalCtx, this, -(1 as libc::c_int)) != 0 {
        if (if (*this).unk_850 as libc::c_int == 0 as libc::c_int {
                0 as libc::c_int
            } else { (*this).unk_850 -= 1; (*this).unk_850 as libc::c_int })
               == 0 as libc::c_int {
            func_80839F90(this, globalCtx);
        }
    }
    (*this).shockTimer = 40 as libc::c_int as u8_0;
    func_8002F8F0(&mut (*this).actor,
                  (0x680c as libc::c_int - 0x800 as libc::c_int +
                       (*(*this).ageProperties).unk_92 as libc::c_int) as
                      u16_0);
}
#[no_mangle]
pub unsafe extern "C" fn func_8084FCAC(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    sControlInput =
        &mut *(*globalCtx).state.input.as_mut_ptr().offset(0 as libc::c_int as
                                                               isize) as
            *mut Input;
    if !((*sControlInput).cur.button as libc::c_int |
             !(0x8000 as libc::c_int | 0x20 as libc::c_int |
                   0x10 as libc::c_int)) == 0 as libc::c_int &&
           !((*sControlInput).press.button as libc::c_int |
                 !(0x4000 as libc::c_int)) == 0 as libc::c_int ||
           !((*sControlInput).cur.button as libc::c_int |
                 !(0x20 as libc::c_int)) == 0 as libc::c_int &&
               !((*sControlInput).press.button as libc::c_int |
                     !(0x100 as libc::c_int)) == 0 as libc::c_int {
        D_808535D0 ^= 1 as libc::c_int as libc::c_uint;
        if D_808535D0 != 0 {
            Camera_ChangeMode(Gameplay_GetCamera(globalCtx,
                                                 0 as libc::c_int as s16),
                              CAM_MODE_BOWARROWZ as libc::c_int as s16);
        }
    }
    if D_808535D0 != 0 {
        let mut speed: f32_0 = 0.;
        if !((*sControlInput).cur.button as libc::c_int |
                 !(0x10 as libc::c_int)) == 0 as libc::c_int {
            speed = 100.0f32
        } else { speed = 20.0f32 }
        func_8006375C(3 as libc::c_int, 2 as libc::c_int,
                      b"DEBUG MODE\x00" as *const u8 as *const libc::c_char);
        if !(!((*sControlInput).cur.button as libc::c_int |
                   !(0x20 as libc::c_int)) == 0 as libc::c_int) {
            if !((*sControlInput).cur.button as libc::c_int |
                     !(0x4000 as libc::c_int)) == 0 as libc::c_int {
                (*this).actor.world.pos.y += speed
            } else if !((*sControlInput).cur.button as libc::c_int |
                            !(0x8000 as libc::c_int)) == 0 as libc::c_int {
                (*this).actor.world.pos.y -= speed
            }
            if (*sControlInput).cur.button as libc::c_int &
                   (0x800 as libc::c_int | 0x200 as libc::c_int |
                        0x400 as libc::c_int | 0x100 as libc::c_int) !=
                   0 as libc::c_int {
                let mut angle: s16 = 0;
                let mut temp: s16 = 0;
                temp =
                    Camera_GetInputDirYaw((*globalCtx).cameraPtrs[(*globalCtx).activeCamera
                                                                      as
                                                                      usize]);
                angle = temp;
                if !((*sControlInput).cur.button as libc::c_int |
                         !(0x400 as libc::c_int)) == 0 as libc::c_int {
                    angle =
                        (temp as libc::c_int + 0x8000 as libc::c_int) as s16
                } else if !((*sControlInput).cur.button as libc::c_int |
                                !(0x200 as libc::c_int)) == 0 as libc::c_int {
                    angle =
                        (temp as libc::c_int + 0x4000 as libc::c_int) as s16
                } else if !((*sControlInput).cur.button as libc::c_int |
                                !(0x100 as libc::c_int)) == 0 as libc::c_int {
                    angle =
                        (temp as libc::c_int - 0x4000 as libc::c_int) as s16
                }
                (*this).actor.world.pos.x += speed * Math_SinS(angle);
                (*this).actor.world.pos.z += speed * Math_CosS(angle)
            }
        }
        func_80832210(this);
        (*this).actor.gravity = 0.0f32;
        (*this).actor.velocity.z = 0.0f32;
        (*this).actor.velocity.y = 0.0f32;
        (*this).actor.velocity.x = 0.0f32;
        if !((*sControlInput).cur.button as libc::c_int |
                 !(0x20 as libc::c_int)) == 0 as libc::c_int &&
               !((*sControlInput).press.button as libc::c_int |
                     !(0x200 as libc::c_int)) == 0 as libc::c_int {
            Flags_SetTempClear(globalCtx,
                               (*globalCtx).roomCtx.curRoom.num as s32);
        }
        Math_Vec3f_Copy(&mut (*this).actor.home.pos,
                        &mut (*this).actor.world.pos);
        return 0 as libc::c_int
    }
    return 1 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_8084FF7C(mut this: *mut Player) {
    (*this).unk_858 += (*this).unk_85C;
    (*this).unk_85C -= (*this).unk_858 * 5.0f32;
    (*this).unk_85C *= 0.3f32;
    if (if (*this).unk_85C >= 0 as libc::c_int as libc::c_float {
            (*this).unk_85C
        } else { -(*this).unk_85C }) < 0.00001f32 {
        (*this).unk_85C = 0.0f32;
        if (if (*this).unk_858 >= 0 as libc::c_int as libc::c_float {
                (*this).unk_858
            } else { -(*this).unk_858 }) < 0.00001f32 {
            (*this).unk_858 = 0.0f32
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8085002C(mut this: *mut Player) {
    let mut pad: s32 = 0;
    let mut sp2A: s16 = 0;
    let mut sp28: s16 = 0;
    let mut sp26: s16 = 0;
    D_80858AC8.unk_06 =
        (D_80858AC8.unk_06 as libc::c_int -
             (D_80858AC8.unk_06 as libc::c_int >> 3 as libc::c_int)) as s16;
    D_80858AC8.unk_08 =
        (D_80858AC8.unk_08 as libc::c_int -
             (D_80858AC8.unk_08 as libc::c_int >> 3 as libc::c_int)) as s16;
    D_80858AC8.unk_06 =
        (D_80858AC8.unk_06 as libc::c_int +
             (-(D_80858AC8.unk_00 as libc::c_int) >> 2 as libc::c_int)) as
            s16;
    D_80858AC8.unk_08 =
        (D_80858AC8.unk_08 as libc::c_int +
             (-(D_80858AC8.unk_02 as libc::c_int) >> 2 as libc::c_int)) as
            s16;
    sp26 =
        ((*this).actor.world.rot.y as libc::c_int -
             (*this).actor.shape.rot.y as libc::c_int) as s16;
    sp28 =
        (((*this).actor.speedXZ * -200.0f32 * Math_CosS(sp26) *
              (Rand_CenteredFloat(2.0f32) + 10.0f32)) as s32 &
             0xffff as libc::c_int) as s16;
    sp2A =
        (((*this).actor.speedXZ * 100.0f32 * Math_SinS(sp26) *
              (Rand_CenteredFloat(2.0f32) + 10.0f32)) as s32 &
             0xffff as libc::c_int) as s16;
    D_80858AC8.unk_06 =
        (D_80858AC8.unk_06 as libc::c_int +
             (sp28 as libc::c_int >> 2 as libc::c_int)) as s16;
    D_80858AC8.unk_08 =
        (D_80858AC8.unk_08 as libc::c_int +
             (sp2A as libc::c_int >> 2 as libc::c_int)) as s16;
    if D_80858AC8.unk_06 as libc::c_int > 6000 as libc::c_int {
        D_80858AC8.unk_06 = 6000 as libc::c_int as s16
    } else if (D_80858AC8.unk_06 as libc::c_int) < -(6000 as libc::c_int) {
        D_80858AC8.unk_06 = -(6000 as libc::c_int) as s16
    }
    if D_80858AC8.unk_08 as libc::c_int > 6000 as libc::c_int {
        D_80858AC8.unk_08 = 6000 as libc::c_int as s16
    } else if (D_80858AC8.unk_08 as libc::c_int) < -(6000 as libc::c_int) {
        D_80858AC8.unk_08 = -(6000 as libc::c_int) as s16
    }
    D_80858AC8.unk_00 =
        (D_80858AC8.unk_00 as libc::c_int + D_80858AC8.unk_06 as libc::c_int)
            as s16;
    D_80858AC8.unk_02 =
        (D_80858AC8.unk_02 as libc::c_int + D_80858AC8.unk_08 as libc::c_int)
            as s16;
    if (D_80858AC8.unk_00 as libc::c_int) < 0 as libc::c_int {
        D_80858AC8.unk_04 =
            (D_80858AC8.unk_00 as libc::c_int >> 1 as libc::c_int) as s16
    } else { D_80858AC8.unk_04 = 0 as libc::c_int as s16 };
}
#[no_mangle]
pub unsafe extern "C" fn func_80850224(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    if func_8083C6B8(globalCtx, this) == 0 as libc::c_int {
        if func_8083BB20(this) != 0 as libc::c_int {
            let mut sp24: s32 = func_80837818(this);
            func_80837948(globalCtx, this, sp24);
            if sp24 >= 0x18 as libc::c_int {
                (*this).stateFlags2 |= 0x20000 as libc::c_int as libc::c_uint;
                func_80837530(globalCtx, this, 0 as libc::c_int);
                return 1 as libc::c_int
            }
        } else { return 0 as libc::c_int }
    }
    return 1 as libc::c_int;
}
static mut D_80854A40: Vec3f =
    { let mut init = Vec3f{x: 0.0f32, y: 40.0f32, z: 45.0f32,}; init };
#[no_mangle]
pub unsafe extern "C" fn func_808502D0(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut sp44: *mut struct_80854190 =
        &mut *D_80854190.as_mut_ptr().offset((*this).swordAnimation as isize)
            as *mut struct_80854190;
    (*this).stateFlags2 |= 0x20 as libc::c_int as libc::c_uint;
    if func_80842DF4(globalCtx, this) == 0 {
        func_8084285C(this, 0.0f32, (*sp44).unk_0C as f32_0,
                      (*sp44).unk_0D as f32_0);
        if (*this).stateFlags2 & 0x40000000 as libc::c_int as libc::c_uint !=
               0 &&
               (*this).heldItemActionParam as libc::c_int !=
                   PLAYER_AP_HAMMER as libc::c_int &&
               LinkAnimation_OnFrame(&mut (*this).skelAnime, 0.0f32) != 0 {
            (*this).linearVelocity = 15.0f32;
            (*this).stateFlags2 &=
                !(0x40000000 as libc::c_int) as libc::c_uint
        }
        if (*this).linearVelocity > 12.0f32 {
            func_8084269C(globalCtx, this);
        }
        Math_StepToF(&mut (*this).linearVelocity, 0.0f32, 5.0f32);
        func_8083C50C(this);
        if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
            if func_80850224(this, globalCtx) == 0 {
                let mut sp43: u8_0 = (*this).skelAnime.moveFlags;
                let mut sp3C: *mut LinkAnimationHeader =
                    0 as *mut LinkAnimationHeader;
                if func_8008E9C4(this) != 0 {
                    sp3C = (*sp44).unk_08
                } else { sp3C = (*sp44).unk_04 }
                func_80832318(this);
                (*this).skelAnime.moveFlags = 0 as libc::c_int as u8_0;
                if sp3C == &mut gPlayerAnim_002908 as *mut LinkAnimationHeader
                       &&
                       (*this).modelAnimType as libc::c_int !=
                           3 as libc::c_int {
                    sp3C = &mut gPlayerAnim_002AC8
                }
                func_8083A098(this, sp3C, globalCtx);
                (*this).skelAnime.moveFlags = sp43;
                (*this).stateFlags3 =
                    ((*this).stateFlags3 as libc::c_int | 8 as libc::c_int) as
                        u8_0
            }
        } else if (*this).heldItemActionParam as libc::c_int ==
                      PLAYER_AP_HAMMER as libc::c_int {
            if (*this).swordAnimation as libc::c_int == 0x16 as libc::c_int ||
                   (*this).swordAnimation as libc::c_int ==
                       0x13 as libc::c_int {
                static mut zeroVec: Vec3f =
                    {
                        let mut init =
                            Vec3f{x: 0.0f32, y: 0.0f32, z: 0.0f32,};
                        init
                    };
                let mut shockwavePos: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
                let mut sp2C: f32_0 = 0.;
                shockwavePos.y =
                    func_8083973C(globalCtx, this, &mut D_80854A40,
                                  &mut shockwavePos);
                sp2C = (*this).actor.world.pos.y - shockwavePos.y;
                Math_ScaledStepToS(&mut (*this).actor.focus.rot.x,
                                   Math_Atan2S(45.0f32, sp2C),
                                   800 as libc::c_int as s16);
                func_80836AB8(this, 1 as libc::c_int);
                if ((*this).swordAnimation as libc::c_int ==
                        0x16 as libc::c_int &&
                        LinkAnimation_OnFrame(&mut (*this).skelAnime, 7.0f32)
                            != 0 ||
                        (*this).swordAnimation as libc::c_int ==
                            0x13 as libc::c_int &&
                            LinkAnimation_OnFrame(&mut (*this).skelAnime,
                                                  2.0f32) != 0) &&
                       sp2C > -40.0f32 && sp2C < 40.0f32 {
                    func_80842A28(globalCtx, this);
                    EffectSsBlast_SpawnWhiteShockwave(globalCtx,
                                                      &mut shockwavePos,
                                                      &mut zeroVec,
                                                      &mut zeroVec);
                }
            }
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_808505DC(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
    func_8083721C(this);
    if (*this).skelAnime.curFrame >= 6.0f32 {
        func_80839FFC(this, globalCtx);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8085063C(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    (*this).stateFlags2 |= 0x20 as libc::c_int as libc::c_uint;
    LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
    func_80836670(this, globalCtx);
    if (*this).unk_850 as libc::c_int == 0 as libc::c_int {
        Message_StartTextbox(globalCtx, 0x3b as libc::c_int as u16_0,
                             &mut (*this).actor);
        (*this).unk_850 = 1 as libc::c_int as s16;
        return
    }
    if Message_GetState(&mut (*globalCtx).msgCtx) as libc::c_int ==
           TEXT_STATE_CLOSING as libc::c_int {
        let mut respawnData: s32 =
            gSaveContext.respawn[RESPAWN_MODE_TOP as libc::c_int as
                                     usize].data as s32;
        if (*globalCtx).msgCtx.choiceIndex as libc::c_int == 0 as libc::c_int
           {
            gSaveContext.respawnFlag = 3 as libc::c_int;
            (*globalCtx).sceneLoadFlag = 0x14 as libc::c_int as s8;
            (*globalCtx).nextEntranceIndex =
                gSaveContext.respawn[RESPAWN_MODE_TOP as libc::c_int as
                                         usize].entranceIndex;
            (*globalCtx).fadeTransition = 5 as libc::c_int as u8_0;
            func_80088AF0(globalCtx);
            return
        }
        if (*globalCtx).msgCtx.choiceIndex as libc::c_int == 1 as libc::c_int
           {
            gSaveContext.respawn[RESPAWN_MODE_TOP as libc::c_int as
                                     usize].data = -respawnData as s8;
            gSaveContext.fw.set = 0 as libc::c_int;
            func_80078914(&mut (*gSaveContext.respawn.as_mut_ptr().offset(RESPAWN_MODE_TOP
                                                                              as
                                                                              libc::c_int
                                                                              as
                                                                              isize)).pos,
                          0x8c8 as libc::c_int as u16_0);
        }
        func_80853080(this, globalCtx);
        func_8005B1A4(Gameplay_GetCamera(globalCtx, 0 as libc::c_int as s16));
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8085076C(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut respawnData: s32 =
        gSaveContext.respawn[RESPAWN_MODE_TOP as libc::c_int as usize].data as
            s32;
    if (*this).unk_850 as libc::c_int > 20 as libc::c_int {
        (*this).actor.draw =
            Some(Player_Draw as
                     unsafe extern "C" fn(_: *mut Actor,
                                          _: *mut GlobalContext) -> ());
        (*this).actor.world.pos.y += 60.0f32;
        func_80837B9C(this, globalCtx);
        return
    }
    let fresh18 = (*this).unk_850;
    (*this).unk_850 = (*this).unk_850 + 1;
    if fresh18 as libc::c_int == 20 as libc::c_int {
        gSaveContext.respawn[RESPAWN_MODE_TOP as libc::c_int as usize].data =
            (respawnData + 1 as libc::c_int) as s8;
        func_80078914(&mut (*gSaveContext.respawn.as_mut_ptr().offset(RESPAWN_MODE_TOP
                                                                          as
                                                                          libc::c_int
                                                                          as
                                                                          isize)).pos,
                      0x87b as libc::c_int as u16_0);
    };
}
static mut D_80854A58: [*mut LinkAnimationHeader; 3] =
    unsafe {
        [&gPlayerAnim_002CF8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002CE0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002D10 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80854A64: [*mut LinkAnimationHeader; 3] =
    unsafe {
        [&gPlayerAnim_002D00 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002CE8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002D18 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80854A70: [*mut LinkAnimationHeader; 3] =
    unsafe {
        [&gPlayerAnim_002D08 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002CF0 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_002D20 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80854A7C: [u8_0; 3] =
    [70 as libc::c_int as u8_0, 10 as libc::c_int as u8_0,
     10 as libc::c_int as u8_0];
static mut D_80854A80: [struct_80832924; 3] =
    [{
         let mut init =
             struct_80832924{sfxId: 0x83d as libc::c_int as u16_0,
                             field: 0x814 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0x6800 as libc::c_int as u16_0,
                             field: 0x2014 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: -(0x301a as libc::c_int) as s16,};
         init
     }];
static mut D_80854A8C: [[struct_80832924; 2]; 3] =
    [[{
          let mut init =
              struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                              field: 0x4014 as libc::c_int as s16,};
          init
      },
      {
          let mut init =
              struct_80832924{sfxId: 0x6817 as libc::c_int as u16_0,
                              field: -(0x201e as libc::c_int) as s16,};
          init
      }],
     [{
          let mut init =
              struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                              field: 0x4014 as libc::c_int as s16,};
          init
      },
      {
          let mut init =
              struct_80832924{sfxId: 0x6815 as libc::c_int as u16_0,
                              field: -(0x202c as libc::c_int) as s16,};
          init
      }],
     [{
          let mut init =
              struct_80832924{sfxId: 0x681c as libc::c_int as u16_0,
                              field: 0x2014 as libc::c_int as s16,};
          init
      },
      {
          let mut init =
              struct_80832924{sfxId: 0x1818 as libc::c_int as u16_0,
                              field: -(0x814 as libc::c_int) as s16,};
          init
      }]];
#[no_mangle]
pub unsafe extern "C" fn func_808507F4(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        if ((*this).unk_84F as libc::c_int) < 0 as libc::c_int {
            if (*this).itemActionParam as libc::c_int ==
                   PLAYER_AP_NAYRUS_LOVE as libc::c_int ||
                   gSaveContext.unk_13F0 as libc::c_int == 0 as libc::c_int {
                func_80839FFC(this, globalCtx);
                func_8005B1A4(Gameplay_GetCamera(globalCtx,
                                                 0 as libc::c_int as s16));
            }
        } else {
            if (*this).unk_850 as libc::c_int == 0 as libc::c_int {
                LinkAnimation_PlayOnceSetSpeed(globalCtx,
                                               &mut (*this).skelAnime,
                                               D_80854A58[(*this).unk_84F as
                                                              usize],
                                               0.83f32);
                if !func_80846A00(globalCtx, this,
                                  (*this).unk_84F as s32).is_null() {
                    (*this).stateFlags1 |=
                        0x30000000 as libc::c_int as libc::c_uint;
                    if (*this).unk_84F as libc::c_int != 0 as libc::c_int ||
                           gSaveContext.respawn[RESPAWN_MODE_TOP as
                                                    libc::c_int as usize].data
                               as libc::c_int <= 0 as libc::c_int {
                        gSaveContext.unk_13F0 = 1 as libc::c_int as s16
                    }
                } else { func_800876C8(globalCtx); }
            } else {
                LinkAnimation_PlayLoopSetSpeed(globalCtx,
                                               &mut (*this).skelAnime,
                                               D_80854A64[(*this).unk_84F as
                                                              usize],
                                               0.83f32);
                if (*this).unk_84F as libc::c_int == 0 as libc::c_int {
                    (*this).unk_850 = -(10 as libc::c_int) as s16
                }
            }
            (*this).unk_850 += 1
        }
    } else if ((*this).unk_850 as libc::c_int) < 0 as libc::c_int {
        (*this).unk_850 += 1;
        if (*this).unk_850 as libc::c_int == 0 as libc::c_int {
            gSaveContext.respawn[RESPAWN_MODE_TOP as libc::c_int as
                                     usize].data = 1 as libc::c_int as s8;
            Gameplay_SetupRespawnPoint(globalCtx,
                                       RESPAWN_MODE_TOP as libc::c_int,
                                       0x6ff as libc::c_int);
            gSaveContext.fw.set = 1 as libc::c_int;
            gSaveContext.fw.pos.x =
                gSaveContext.respawn[RESPAWN_MODE_DOWN as libc::c_int as
                                         usize].pos.x as s32;
            gSaveContext.fw.pos.y =
                gSaveContext.respawn[RESPAWN_MODE_DOWN as libc::c_int as
                                         usize].pos.y as s32;
            gSaveContext.fw.pos.z =
                gSaveContext.respawn[RESPAWN_MODE_DOWN as libc::c_int as
                                         usize].pos.z as s32;
            gSaveContext.fw.yaw =
                gSaveContext.respawn[RESPAWN_MODE_DOWN as libc::c_int as
                                         usize].yaw as s32;
            gSaveContext.fw.playerParams = 0x6ff as libc::c_int;
            gSaveContext.fw.entranceIndex =
                gSaveContext.respawn[RESPAWN_MODE_DOWN as libc::c_int as
                                         usize].entranceIndex as s32;
            gSaveContext.fw.roomIndex =
                gSaveContext.respawn[RESPAWN_MODE_DOWN as libc::c_int as
                                         usize].roomIndex as s32;
            gSaveContext.fw.tempSwchFlags =
                gSaveContext.respawn[RESPAWN_MODE_DOWN as libc::c_int as
                                         usize].tempSwchFlags as s32;
            gSaveContext.fw.tempCollectFlags =
                gSaveContext.respawn[RESPAWN_MODE_DOWN as libc::c_int as
                                         usize].tempCollectFlags as s32;
            (*this).unk_850 = 2 as libc::c_int as s16
        }
    } else if (*this).unk_84F as libc::c_int >= 0 as libc::c_int {
        if (*this).unk_850 as libc::c_int == 0 as libc::c_int {
            func_80832924(this, D_80854A80.as_mut_ptr());
        } else if (*this).unk_850 as libc::c_int == 1 as libc::c_int {
            func_80832924(this,
                          D_80854A8C[(*this).unk_84F as usize].as_mut_ptr());
            if (*this).unk_84F as libc::c_int == 2 as libc::c_int &&
                   LinkAnimation_OnFrame(&mut (*this).skelAnime, 30.0f32) != 0
               {
                (*this).stateFlags1 &=
                    !(0x30000000 as libc::c_int) as libc::c_uint
            }
        } else {
            let fresh19 = (*this).unk_850;
            (*this).unk_850 = (*this).unk_850 + 1;
            if (D_80854A7C[(*this).unk_84F as usize] as libc::c_int) <
                   fresh19 as libc::c_int {
                LinkAnimation_PlayOnceSetSpeed(globalCtx,
                                               &mut (*this).skelAnime,
                                               D_80854A70[(*this).unk_84F as
                                                              usize],
                                               0.83f32);
                (*this).currentYaw = (*this).actor.shape.rot.y;
                (*this).unk_84F = -(1 as libc::c_int) as s8
            }
        }
    }
    func_8083721C(this);
}
#[no_mangle]
pub unsafe extern "C" fn func_80850AEC(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    let mut temp: f32_0 = 0.;
    (*this).stateFlags2 |= 0x20 as libc::c_int as libc::c_uint;
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        func_80832284(globalCtx, this, &mut gPlayerAnim_002C98);
    }
    Math_Vec3f_Sum(&mut (*this).actor.world.pos, &mut (*this).actor.velocity,
                   &mut (*this).actor.world.pos);
    if func_80834FBC(this) != 0 {
        Math_Vec3f_Copy(&mut (*this).actor.prevPos,
                        &mut (*this).actor.world.pos);
        func_80847BA0(globalCtx, this);
        temp = (*this).actor.world.pos.y - (*this).actor.floorHeight;
        if temp > 20.0f32 { temp = 20.0f32 }
        (*this).actor.shape.rot.x = 0 as libc::c_int as s16;
        (*this).actor.world.rot.x = (*this).actor.shape.rot.x;
        (*this).actor.world.pos.y -= temp;
        (*this).linearVelocity = 1.0f32;
        (*this).actor.velocity.y = 0.0f32;
        func_80837B9C(this, globalCtx);
        (*this).stateFlags2 &= !(0x400 as libc::c_int) as libc::c_uint;
        (*this).actor.bgCheckFlags =
            ((*this).actor.bgCheckFlags as libc::c_int | 1 as libc::c_int) as
                u16_0;
        (*this).stateFlags1 |= 4 as libc::c_int as libc::c_uint;
        return
    }
    if (*this).skelAnime.animation !=
           &mut gPlayerAnim_002C90 as *mut LinkAnimationHeader as
               *mut libc::c_void || 4.0f32 <= (*this).skelAnime.curFrame {
        (*this).actor.gravity = 0.0f32;
        Math_ScaledStepToS(&mut (*this).actor.shape.rot.x,
                           (*this).actor.world.rot.x,
                           0x800 as libc::c_int as s16);
        func_8083264C(this, 100 as libc::c_int, 2 as libc::c_int,
                      100 as libc::c_int, 0 as libc::c_int);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80850C68(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    if (*this).unk_850 as libc::c_int != 0 as libc::c_int &&
           ((*this).unk_858 != 0.0f32 || (*this).unk_85C != 0.0f32) {
        let mut updateScale: f32_0 =
            (*gGameInfo).data[(1 as libc::c_int * 6 as libc::c_int *
                                   16 as libc::c_int + 30 as libc::c_int) as
                                  usize] as libc::c_int as libc::c_float *
                0.5f32;
        (*this).skelAnime.curFrame +=
            (*this).skelAnime.playSpeed * updateScale;
        if (*this).skelAnime.curFrame >= (*this).skelAnime.animLength {
            (*this).skelAnime.curFrame -= (*this).skelAnime.animLength
        }
        LinkAnimation_BlendToJoint(globalCtx, &mut (*this).skelAnime,
                                   &mut gPlayerAnim_002C38,
                                   (*this).skelAnime.curFrame,
                                   if (*this).unk_858 < 0.0f32 {
                                       &mut gPlayerAnim_002C18
                                   } else { &mut gPlayerAnim_002C20 }, 5.0f32,
                                   fabsf((*this).unk_858),
                                   (*this).blendTable.as_mut_ptr());
        LinkAnimation_BlendToMorph(globalCtx, &mut (*this).skelAnime,
                                   &mut gPlayerAnim_002C38,
                                   (*this).skelAnime.curFrame,
                                   if (*this).unk_85C < 0.0f32 {
                                       &mut gPlayerAnim_002C28
                                   } else { &mut gPlayerAnim_002C10 }, 5.0f32,
                                   fabsf((*this).unk_85C),
                                   D_80858AD8.as_mut_ptr());
        LinkAnimation_InterpJointMorph(globalCtx, &mut (*this).skelAnime,
                                       0.5f32);
    } else if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        (*this).unk_860 = 2 as libc::c_int as s16;
        func_80832284(globalCtx, this, &mut gPlayerAnim_002C38);
        (*this).unk_850 = 1 as libc::c_int as s16
    }
    func_8083721C(this);
    if (*this).unk_860 as libc::c_int == 0 as libc::c_int {
        func_80853080(this, globalCtx);
    } else if (*this).unk_860 as libc::c_int == 3 as libc::c_int {
        func_80835C58(globalCtx, this,
                      Some(func_80850E84 as
                               unsafe extern "C" fn(_: *mut Player,
                                                    _: *mut GlobalContext)
                                   -> ()), 0 as libc::c_int);
        func_80832B0C(globalCtx, this, &mut gPlayerAnim_002C00);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80850E84(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 &&
           (*this).unk_860 as libc::c_int == 0 as libc::c_int {
        func_8083A098(this, &mut gPlayerAnim_002C08, globalCtx);
    };
}
static mut D_80854AA4:
       [Option<unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player,
                                    _: *mut libc::c_void) -> ()>; 19] =
    unsafe {
        [None,
         Some(func_80851008 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player,
                                       _: *mut libc::c_void) -> ()),
         Some(func_80851030 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player,
                                       _: *mut libc::c_void) -> ()),
         Some(func_80851094 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player,
                                       _: *mut libc::c_void) -> ()),
         Some(func_808510B4 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player,
                                       _: *mut libc::c_void) -> ()),
         Some(func_808510D4 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player,
                                       _: *mut libc::c_void) -> ()),
         Some(func_808510F4 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player,
                                       _: *mut libc::c_void) -> ()),
         Some(func_80851114 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player,
                                       _: *mut libc::c_void) -> ()),
         Some(func_80851134 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player,
                                       _: *mut libc::c_void) -> ()),
         Some(func_80851154 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player,
                                       _: *mut libc::c_void) -> ()),
         Some(func_80851174 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player,
                                       _: *mut libc::c_void) -> ()),
         Some(func_808511D4 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player,
                                       _: *mut libc::c_void) -> ()),
         Some(func_808511FC as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player,
                                       _: *mut libc::c_void) -> ()),
         Some(func_80851294 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player,
                                       _: *mut libc::c_void) -> ()),
         Some(func_80851050 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player,
                                       _: *mut libc::c_void) -> ()),
         Some(func_80851194 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player,
                                       _: *mut libc::c_void) -> ()),
         Some(func_808511B4 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player,
                                       _: *mut libc::c_void) -> ()),
         Some(func_80851248 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player,
                                       _: *mut libc::c_void) -> ()),
         Some(func_808512E0 as
                  unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player,
                                       _: *mut libc::c_void) -> ())]
    };
static mut D_80854AF0: [struct_80832924; 4] =
    [{
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: 0x2822 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0x871 as libc::c_int as u16_0,
                             field: 0x82d as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0x871 as libc::c_int as u16_0,
                             field: 0x833 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0x871 as libc::c_int as u16_0,
                             field: -(0x840 as libc::c_int) as s16,};
         init
     }];
static mut D_80854B00: [struct_80832924; 5] =
    [{
         let mut init =
             struct_80832924{sfxId: 0x6816 as libc::c_int as u16_0,
                             field: 0x2003 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: 0x300f as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: 0x3018 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: 0x301e as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0x6808 as libc::c_int as u16_0,
                             field: -(0x201f as libc::c_int) as s16,};
         init
     }];
static mut D_80854B14: [struct_80832924; 1] =
    [{
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: -(0x300a as libc::c_int) as s16,};
         init
     }];
static mut D_80854B18: [struct_80854B18; 103] =
    unsafe {
        [{
             let mut init =
                 struct_80854B18{type_0: 0 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_808515A4
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 2 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002790
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 0 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 0 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 3 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002740
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 0 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 0 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_808515A4
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 2 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002778
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80851788
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 3 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002860
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_808518DC
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 7 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002348
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 5 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002350
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 5 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002358
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 5 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_0023B0
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 7 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_0023B8
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_808519EC
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 2 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002728
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 2 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002738
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 0 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80851B90
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 3 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_0027A8
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 9 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002DB0
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 2 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002DC0
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80851D2C
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 2 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_003098
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 3 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002780
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_808515A4
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 2 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_003088
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 0 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 0 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 5 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002320
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80851368
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80851E64
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 5 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002328
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 16 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002F90
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80851F84
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80851E90
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 6 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002410
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 6 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002418
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80852080
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 5 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002390
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_808521F4
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_8085225C
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80852280
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 5 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_0023A0
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 5 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002368
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_808515A4
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 5 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002370
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 5 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_0027B0
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 5 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_0027B8
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 5 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_0027C0
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 3 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002768
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 3 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_0027D8
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 4 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_0027E0
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 3 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002380
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 3 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002828
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 6 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002470
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 6 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_0032A8
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 14 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_0032A0
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 3 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_0032A0
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 5 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002AE8
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 16 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002450
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 15 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002460
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 15 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002458
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 3 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002440
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 3 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002438
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 3 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002C88
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 6 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_003450
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 6 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_003448
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 6 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_003460
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 6 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_003440
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 3 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002798
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 3 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002818
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 4 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002848
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 3 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002850
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 3 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_0034E0
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 3 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_0034D8
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 6 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_0034C8
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 3 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_003470
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 3 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_003478
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 3 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_0034C0
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 3 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_003480
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 3 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_003490
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 3 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_003488
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 3 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_003498
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 3 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_0034B0
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_808524B0
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 3 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_003420
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80852544
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80852564
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 3 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_003250
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80852608
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 3 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002810
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 3 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002838
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 3 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002CD0
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 3 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002CD8
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 3 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002868
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 3 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_0027E8
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 3 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_0027F8
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 3 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002800
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         }]
    };
static mut D_80854E50: [struct_80854B18; 103] =
    unsafe {
        [{
             let mut init =
                 struct_80854B18{type_0: 0 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_808514C0
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_8085157C
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80851998
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_808519C0
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 11 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80852C50
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80852944
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80851688
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80851750
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80851828
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_808521B8
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_8085190C
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 11 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 11 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 11 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 18 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          D_80854AF0.as_ptr()
                                                              as *mut _ as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 11 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80851A50
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 12 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002730
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 11 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 0 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80851BE8
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 11 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80851CA4
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 11 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 17 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_0030A8
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 11 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 11 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 11 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80851D80
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80851DEC
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80851E28
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 18 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          D_80854B00.as_ptr()
                                                              as *mut _ as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_808513BC
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 11 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 11 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 11 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 11 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80851ECC
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80851FB0
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80852048
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80852174
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 13 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002398
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80852234
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 0 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 0 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 11 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80852450
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80851688
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80852298
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 13 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_0027D0
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80852480
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 13 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_0027C8
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80852328
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 11 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 11 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 12 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002388
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80852358
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 11 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 18 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          D_80854B14.as_ptr()
                                                              as *mut _ as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 11 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 11 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 11 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 11 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80852388
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 17 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002450
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 12 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002448
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 12 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002450
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 11 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_808526EC
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 17 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_003468
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_808526EC
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 17 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_003468
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 12 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_0027A0
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 12 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002820
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 11 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 12 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002858
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 12 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_0034D0
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 13 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_0034F0
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 12 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_0034E8
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 12 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_0034A8
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 11 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 11 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 11 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 11 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80852648
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 11 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 12 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_0034A0
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_808524D0
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80852514
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_80852554
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_808525C0
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 11 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 11 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 11 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          0 as
                                                              *const libc::c_void
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_8085283C
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_808528C8
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: -(1 as libc::c_int) as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut GlobalContext,
                                                                                                              _:
                                                                                                                  *mut Player,
                                                                                                              _:
                                                                                                                  *mut CsCmdActorAction)
                                                                                             ->
                                                                                                 ()>,
                                                                                  *mut libc::c_void>(Some(func_808528C8
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut GlobalContext,
                                                                                                                                   _:
                                                                                                                                       *mut Player,
                                                                                                                                   _:
                                                                                                                                       *mut CsCmdActorAction)
                                                                                                                  ->
                                                                                                                      ())),},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 12 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002870
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 12 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_0027F0
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 12 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002808
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         },
         {
             let mut init =
                 struct_80854B18{type_0: 12 as libc::c_int as s8,
                                 c2rust_unnamed:
                                     C2RustUnnamed_57{ptr:
                                                          &gPlayerAnim_002450
                                                              as
                                                              *const LinkAnimationHeader
                                                              as
                                                              *mut LinkAnimationHeader
                                                              as
                                                              *mut libc::c_void,},};
             init
         }]
    };
#[no_mangle]
pub unsafe extern "C" fn func_80850ED8(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut LinkAnimationHeader) {
    func_80832DB0(this);
    func_80832B0C(globalCtx, this, anim);
    func_80832210(this);
}
#[no_mangle]
pub unsafe extern "C" fn func_80850F1C(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut LinkAnimationHeader) {
    func_80832DB0(this);
    LinkAnimation_Change(globalCtx, &mut (*this).skelAnime, anim,
                         2.0f32 / 3.0f32, 0.0f32,
                         Animation_GetLastFrame(anim as *mut libc::c_void) as
                             f32_0, ANIMMODE_ONCE as libc::c_int as u8_0,
                         -8.0f32);
    func_80832210(this);
}
#[no_mangle]
pub unsafe extern "C" fn func_80850F9C(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut LinkAnimationHeader) {
    func_80832DB0(this);
    LinkAnimation_Change(globalCtx, &mut (*this).skelAnime, anim,
                         2.0f32 / 3.0f32, 0.0f32, 0.0f32,
                         ANIMMODE_LOOP as libc::c_int as u8_0, -8.0f32);
    func_80832210(this);
}
#[no_mangle]
pub unsafe extern "C" fn func_80851008(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut libc::c_void) {
    func_80832210(this);
}
#[no_mangle]
pub unsafe extern "C" fn func_80851030(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut libc::c_void) {
    func_80850ED8(globalCtx, this, anim as *mut LinkAnimationHeader);
}
#[no_mangle]
pub unsafe extern "C" fn func_80851050(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut libc::c_void) {
    func_80832DB0(this);
    func_80832C2C(globalCtx, this, anim as *mut LinkAnimationHeader);
    func_80832210(this);
}
#[no_mangle]
pub unsafe extern "C" fn func_80851094(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut libc::c_void) {
    func_80850F1C(globalCtx, this, anim as *mut LinkAnimationHeader);
}
#[no_mangle]
pub unsafe extern "C" fn func_808510B4(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut libc::c_void) {
    func_80850F9C(globalCtx, this, anim as *mut LinkAnimationHeader);
}
#[no_mangle]
pub unsafe extern "C" fn func_808510D4(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut libc::c_void) {
    func_8083308C(globalCtx, this, anim as *mut LinkAnimationHeader);
}
#[no_mangle]
pub unsafe extern "C" fn func_808510F4(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut libc::c_void) {
    func_8083303C(globalCtx, this, anim as *mut LinkAnimationHeader,
                  0x9c as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn func_80851114(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut libc::c_void) {
    func_8083313C(globalCtx, this, anim as *mut LinkAnimationHeader);
}
#[no_mangle]
pub unsafe extern "C" fn func_80851134(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut libc::c_void) {
    func_808330EC(globalCtx, this, anim as *mut LinkAnimationHeader,
                  0x9c as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn func_80851154(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut libc::c_void) {
    func_80832264(globalCtx, this, anim as *mut LinkAnimationHeader);
}
#[no_mangle]
pub unsafe extern "C" fn func_80851174(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut libc::c_void) {
    func_80832284(globalCtx, this, anim as *mut LinkAnimationHeader);
}
#[no_mangle]
pub unsafe extern "C" fn func_80851194(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut libc::c_void) {
    func_808322D0(globalCtx, this, anim as *mut LinkAnimationHeader);
}
#[no_mangle]
pub unsafe extern "C" fn func_808511B4(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut libc::c_void) {
    func_808322A4(globalCtx, this, anim as *mut LinkAnimationHeader);
}
#[no_mangle]
pub unsafe extern "C" fn func_808511D4(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut libc::c_void) {
    LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
}
#[no_mangle]
pub unsafe extern "C" fn func_808511FC(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut libc::c_void) {
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        func_80850F9C(globalCtx, this, anim as *mut LinkAnimationHeader);
        (*this).unk_850 = 1 as libc::c_int as s16
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80851248(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut libc::c_void) {
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        func_80832DBC(this);
        func_808322A4(globalCtx, this, anim as *mut LinkAnimationHeader);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80851294(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut libc::c_void) {
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        func_8083313C(globalCtx, this, anim as *mut LinkAnimationHeader);
        (*this).unk_850 = 1 as libc::c_int as s16
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_808512E0(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut libc::c_void) {
    LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
    func_80832924(this, arg2 as *mut struct_80832924);
}
#[no_mangle]
pub unsafe extern "C" fn func_80851314(mut this: *mut Player) {
    if (*this).unk_448.is_null() || (*(*this).unk_448).update.is_none() {
        (*this).unk_448 = 0 as *mut Actor
    }
    (*this).unk_664 = (*this).unk_448;
    if !(*this).unk_664.is_null() {
        (*this).actor.shape.rot.y =
            func_8083DB98(this, 0 as libc::c_int) as s16
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80851368(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    (*this).stateFlags1 |= 0x8000000 as libc::c_int as libc::c_uint;
    (*this).stateFlags2 |= 0x400 as libc::c_int as libc::c_uint;
    (*this).stateFlags1 &= !(0xc0000 as libc::c_int) as libc::c_uint;
    func_80832284(globalCtx, this, &mut gPlayerAnim_0032F0);
}
#[no_mangle]
pub unsafe extern "C" fn func_808513BC(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    (*this).actor.gravity = 0.0f32;
    if (*this).unk_84F as libc::c_int == 0 as libc::c_int {
        if func_8083D12C(globalCtx, this, 0 as *mut Input) != 0 {
            (*this).unk_84F = 1 as libc::c_int as s8
        } else {
            func_8084B158(globalCtx, this, 0 as *mut Input,
                          fabsf((*this).actor.velocity.y));
            Math_ScaledStepToS(&mut (*this).unk_6C2,
                               -(10000 as libc::c_int) as s16,
                               800 as libc::c_int as s16);
            func_8084AEEC(this, &mut (*this).actor.velocity.y, 4.0f32,
                          (*this).currentYaw);
        }
        return
    }
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        if (*this).unk_84F as libc::c_int == 1 as libc::c_int {
            func_80832C6C(globalCtx, this, &mut gPlayerAnim_003328);
        } else { func_80832284(globalCtx, this, &mut gPlayerAnim_003328); }
    }
    func_8084B000(this);
    func_8084AEEC(this, &mut (*this).linearVelocity, 0.0f32,
                  (*this).actor.shape.rot.y);
}
#[no_mangle]
pub unsafe extern "C" fn func_808514C0(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    func_80851314(this);
    if func_808332B8(this) != 0 {
        func_808513BC(globalCtx, this, 0 as *mut CsCmdActorAction);
        return
    }
    LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
    if func_8008F128(this) != 0 ||
           (*this).stateFlags1 & 0x800 as libc::c_int as libc::c_uint != 0 {
        func_80836670(this, globalCtx);
        return
    }
    if !(*this).interactRangeActor.is_null() &&
           (*(*this).interactRangeActor).textId as libc::c_int ==
               0xffff as libc::c_int {
        func_8083E5A8(this, globalCtx);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8085157C(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
}
#[no_mangle]
pub unsafe extern "C" fn func_808515A4(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    let mut anim: *mut LinkAnimationHeader = 0 as *mut LinkAnimationHeader;
    if func_808332B8(this) != 0 {
        func_80851368(globalCtx, this, 0 as *mut CsCmdActorAction);
        return
    }
    anim = D_80853D34[(*this).modelAnimType as usize];
    if (*this).unk_446 as libc::c_int == 6 as libc::c_int ||
           (*this).unk_446 as libc::c_int == 0x2e as libc::c_int {
        func_80832264(globalCtx, this, anim);
    } else {
        func_80832DB0(this);
        LinkAnimation_Change(globalCtx, &mut (*this).skelAnime, anim,
                             2.0f32 / 3.0f32, 0.0f32,
                             Animation_GetLastFrame(anim as *mut libc::c_void)
                                 as f32_0,
                             ANIMMODE_LOOP as libc::c_int as u8_0, -4.0f32);
    }
    func_80832210(this);
}
#[no_mangle]
pub unsafe extern "C" fn func_80851688(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    if func_8084B3CC(globalCtx, this) == 0 as libc::c_int {
        if (*this).csMode as libc::c_int == 0x31 as libc::c_int &&
               (*globalCtx).csCtx.state as libc::c_int ==
                   CS_STATE_IDLE as libc::c_int {
            func_8002DF54(globalCtx, 0 as *mut Actor,
                          7 as libc::c_int as u8_0);
            return
        }
        if func_808332B8(this) != 0 as libc::c_int {
            func_808513BC(globalCtx, this, 0 as *mut CsCmdActorAction);
            return
        }
        LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
        if func_8008F128(this) != 0 ||
               (*this).stateFlags1 & 0x800 as libc::c_int as libc::c_uint != 0
           {
            func_80836670(this, globalCtx);
        }
    };
}
static mut D_80855188: [struct_80832924; 2] =
    [{
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: 0x302a as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: -(0x3030 as libc::c_int) as s16,};
         init
     }];
#[no_mangle]
pub unsafe extern "C" fn func_80851750(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
    func_80832924(this, D_80855188.as_mut_ptr());
}
#[no_mangle]
pub unsafe extern "C" fn func_80851788(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    (*this).stateFlags1 &= !(0x2000000 as libc::c_int) as libc::c_uint;
    (*this).actor.world.rot.y =
        Math_Vec3f_Yaw(&mut (*this).actor.world.pos, &mut (*this).unk_450);
    (*this).actor.shape.rot.y = (*this).actor.world.rot.y;
    (*this).currentYaw = (*this).actor.shape.rot.y;
    if (*this).linearVelocity <= 0.0f32 {
        (*this).linearVelocity = 0.1f32
    } else if (*this).linearVelocity > 2.5f32 {
        (*this).linearVelocity = 2.5f32
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80851828(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    let mut sp1C: f32_0 = 2.5f32;
    func_80845BA0(globalCtx, this, &mut sp1C, 10 as libc::c_int);
    if (*globalCtx).sceneNum as libc::c_int == SCENE_BDAN_BOSS as libc::c_int
       {
        if (*this).unk_850 as libc::c_int == 0 as libc::c_int {
            if Message_GetState(&mut (*globalCtx).msgCtx) as libc::c_int ==
                   TEXT_STATE_NONE as libc::c_int {
                return
            }
        } else if Message_GetState(&mut (*globalCtx).msgCtx) as libc::c_int !=
                      TEXT_STATE_NONE as libc::c_int {
            return
        }
    }
    (*this).unk_850 += 1;
    if (*this).unk_850 as libc::c_int > 20 as libc::c_int {
        (*this).csMode = 0xb as libc::c_int as u8_0
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_808518DC(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    func_8083CEAC(this, globalCtx);
}
#[no_mangle]
pub unsafe extern "C" fn func_8085190C(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    func_80851314(this);
    if (*this).unk_850 as libc::c_int != 0 as libc::c_int {
        if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
            func_80832284(globalCtx, this, func_808334E4(this));
            (*this).unk_850 = 0 as libc::c_int as s16
        }
        func_80833C3C(this);
    } else { func_808401B0(globalCtx, this); };
}
#[no_mangle]
pub unsafe extern "C" fn func_80851998(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    func_80845964(globalCtx, this, arg2, 0.0f32, 0 as libc::c_int as s16,
                  0 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn func_808519C0(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    func_80845964(globalCtx, this, arg2, 0.0f32, 0 as libc::c_int as s16,
                  1 as libc::c_int);
}
static mut D_80855198: Vec3f =
    { let mut init = Vec3f{x: -1.0f32, y: 70.0f32, z: 20.0f32,}; init };
#[no_mangle]
pub unsafe extern "C" fn func_808519EC(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    Math_Vec3f_Copy(&mut (*this).actor.world.pos, &mut D_80855198);
    (*this).actor.shape.rot.y = -(0x8000 as libc::c_int) as s16;
    func_808322D0(globalCtx, this, (*(*this).ageProperties).unk_9C);
    func_80832F54(globalCtx, this, 0x28f as libc::c_int);
}
static mut D_808551A4: [struct_808551A4; 2] =
    [{
         let mut init =
             struct_808551A4{unk_00: 0x182d as libc::c_int as u16_0,
                             unk_02: 0 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_808551A4{unk_00: 0x1836 as libc::c_int as u16_0,
                             unk_02: 0x6800 as libc::c_int as s16,};
         init
     }];
static mut D_808551AC: [struct_80832924; 2] =
    [{
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: 0x401d as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: -(0x4027 as libc::c_int) as s16,};
         init
     }];
#[no_mangle]
pub unsafe extern "C" fn func_80851A50(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    let mut sp2C: *mut struct_808551A4 = 0 as *mut struct_808551A4;
    let mut dLists: *mut *mut Gfx = 0 as *mut *mut Gfx;
    LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
    if gSaveContext.linkAge == 0 as libc::c_int &&
           LinkAnimation_OnFrame(&mut (*this).skelAnime, 70.0f32) != 0 ||
           !(gSaveContext.linkAge == 0 as libc::c_int) &&
               LinkAnimation_OnFrame(&mut (*this).skelAnime, 87.0f32) != 0 {
        sp2C =
            &mut *D_808551A4.as_mut_ptr().offset(gSaveContext.linkAge as
                                                     isize) as
                *mut struct_808551A4;
        (*(*this).interactRangeActor).parent = &mut (*this).actor;
        if !(gSaveContext.linkAge == 0 as libc::c_int) {
            dLists = D_80125DE8.as_mut_ptr()
        } else { dLists = D_80125E18.as_mut_ptr() }
        (*this).leftHandDLists =
            &mut *dLists.offset(gSaveContext.linkAge as isize) as
                *mut *mut Gfx;
        func_8002F7DC(&mut (*this).actor, (*sp2C).unk_00);
        if !(gSaveContext.linkAge == 0 as libc::c_int) {
            func_80832698(this, (*sp2C).unk_02 as u16_0);
        }
    } else if gSaveContext.linkAge == 0 as libc::c_int {
        if LinkAnimation_OnFrame(&mut (*this).skelAnime, 66.0f32) != 0 {
            func_80832698(this, 0x6801 as libc::c_int as u16_0);
        }
    } else { func_80832924(this, D_808551AC.as_mut_ptr()); };
}
#[no_mangle]
pub unsafe extern "C" fn func_80851B90(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    LinkAnimation_Change(globalCtx, &mut (*this).skelAnime,
                         &mut gPlayerAnim_002860, -(2.0f32 / 3.0f32), 12.0f32,
                         12.0f32, ANIMMODE_ONCE as libc::c_int as u8_0,
                         0.0f32);
}
static mut D_808551B4: [struct_80832924; 1] =
    [{
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: -(0x281e as libc::c_int) as s16,};
         init
     }];
#[no_mangle]
pub unsafe extern "C" fn func_80851BE8(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
    (*this).unk_850 += 1;
    if (*this).unk_850 as libc::c_int >= 180 as libc::c_int {
        if (*this).unk_850 as libc::c_int == 180 as libc::c_int {
            LinkAnimation_Change(globalCtx, &mut (*this).skelAnime,
                                 &mut gPlayerAnim_003298, 2.0f32 / 3.0f32,
                                 10.0f32,
                                 Animation_GetLastFrame(&mut gPlayerAnim_003298
                                                            as
                                                            *mut LinkAnimationHeader
                                                            as
                                                            *mut libc::c_void)
                                     as f32_0,
                                 ANIMMODE_ONCE as libc::c_int as u8_0,
                                 -8.0f32);
        }
        func_80832924(this, D_808551B4.as_mut_ptr());
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80851CA4(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 &&
           (*this).unk_850 as libc::c_int == 0 as libc::c_int &&
           (*this).actor.bgCheckFlags as libc::c_int & 1 as libc::c_int != 0 {
        func_80832264(globalCtx, this, &mut gPlayerAnim_002DB8);
        (*this).unk_850 = 1 as libc::c_int as s16
    }
    if (*this).unk_850 as libc::c_int != 0 as libc::c_int {
        func_8083721C(this);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80851D2C(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    func_80850F1C(globalCtx, this, &mut gPlayerAnim_0030A0);
    func_8084B498(this);
    Player_SetModels(this,
                     Player_ActionToModelGroup(this,
                                               (*this).itemActionParam as
                                                   s32));
}
static mut D_808551B8: [struct_80832924; 1] =
    [{
         let mut init =
             struct_80832924{sfxId: 0x1803 as libc::c_int as u16_0,
                             field: -(0x80c as libc::c_int) as s16,};
         init
     }];
#[no_mangle]
pub unsafe extern "C" fn func_80851D80(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
    if LinkAnimation_OnFrame(&mut (*this).skelAnime, 6.0f32) != 0 {
        func_80846720(globalCtx, this, 0 as libc::c_int);
    } else { func_80832924(this, D_808551B8.as_mut_ptr()); };
}
#[no_mangle]
pub unsafe extern "C" fn func_80851DEC(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
    Math_StepToS(&mut (*this).actor.shape.face, 0 as libc::c_int as s16,
                 1 as libc::c_int as s16);
}
#[no_mangle]
pub unsafe extern "C" fn func_80851E28(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
    Math_StepToS(&mut (*this).actor.shape.face, 2 as libc::c_int as s16,
                 1 as libc::c_int as s16);
}
#[no_mangle]
pub unsafe extern "C" fn func_80851E64(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    func_80833064(globalCtx, this, &mut gPlayerAnim_003318,
                  0x98 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn func_80851E90(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    func_8083303C(globalCtx, this, &mut gPlayerAnim_002408,
                  0x9c as libc::c_int);
    func_80832698(this, 0x6813 as libc::c_int as u16_0);
}
#[no_mangle]
pub unsafe extern "C" fn func_80851ECC(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        func_808330EC(globalCtx, this, &mut gPlayerAnim_002428,
                      0x9c as libc::c_int);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80851F14(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut LinkAnimationHeader,
                                       mut arg3: *mut struct_80832924) {
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        func_808322A4(globalCtx, this, anim);
        (*this).unk_850 = 1 as libc::c_int as s16
    } else if (*this).unk_850 as libc::c_int == 0 as libc::c_int {
        func_80832924(this, arg3);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80851F84(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    (*this).actor.shape.shadowDraw = None;
    func_80851134(globalCtx, this,
                  &mut gPlayerAnim_002420 as *mut LinkAnimationHeader as
                      *mut libc::c_void);
}
static mut D_808551BC: [struct_80832924; 3] =
    [{
         let mut init =
             struct_80832924{sfxId: 0x6811 as libc::c_int as u16_0,
                             field: 0x2023 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0x830 as libc::c_int as u16_0,
                             field: 0x8ec as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0x830 as libc::c_int as u16_0,
                             field: -(0x900 as libc::c_int) as s16,};
         init
     }];
#[no_mangle]
pub unsafe extern "C" fn func_80851FB0(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        func_808330EC(globalCtx, this, &mut gPlayerAnim_002430,
                      0x9c as libc::c_int);
        (*this).unk_850 = 1 as libc::c_int as s16
    } else if (*this).unk_850 as libc::c_int == 0 as libc::c_int {
        func_80832924(this, D_808551BC.as_mut_ptr());
        if LinkAnimation_OnFrame(&mut (*this).skelAnime, 240.0f32) != 0 {
            (*this).actor.shape.shadowDraw =
                Some(ActorShadow_DrawFeet as
                         unsafe extern "C" fn(_: *mut Actor, _: *mut Lights,
                                              _: *mut GlobalContext) -> ())
        }
    };
}
static mut D_808551C8: [struct_80832924; 4] =
    [{
         let mut init =
             struct_80832924{sfxId: 0x82a as libc::c_int as u16_0,
                             field: 0x843 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: 0x4854 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: 0x485a as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: -(0x4860 as libc::c_int) as s16,};
         init
     }];
#[no_mangle]
pub unsafe extern "C" fn func_80852048(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
    func_80832924(this, D_808551C8.as_mut_ptr());
}
#[no_mangle]
pub unsafe extern "C" fn func_80852080(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    func_80833064(globalCtx, this, &mut gPlayerAnim_002340,
                  0x9d as libc::c_int);
    func_80832698(this, 0x6808 as libc::c_int as u16_0);
}
#[no_mangle]
pub unsafe extern "C" fn func_808520BC(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    let mut startX: f32_0 = (*arg2).startPos.x as f32_0;
    let mut startY: f32_0 = (*arg2).startPos.y as f32_0;
    let mut startZ: f32_0 = (*arg2).startPos.z as f32_0;
    let mut distX: f32_0 = (*arg2).endPos.x as libc::c_float - startX;
    let mut distY: f32_0 = (*arg2).endPos.y as libc::c_float - startY;
    let mut distZ: f32_0 = (*arg2).endPos.z as libc::c_float - startZ;
    let mut sp4: f32_0 =
        ((*globalCtx).csCtx.frames as libc::c_int -
             (*arg2).startFrame as libc::c_int) as f32_0 /
            ((*arg2).endFrame as libc::c_int -
                 (*arg2).startFrame as libc::c_int) as f32_0;
    (*this).actor.world.pos.x = distX * sp4 + startX;
    (*this).actor.world.pos.y = distY * sp4 + startY;
    (*this).actor.world.pos.z = distZ * sp4 + startZ;
}
static mut D_808551D8: [struct_80832924; 2] =
    [{
         let mut init =
             struct_80832924{sfxId: 0x850 as libc::c_int as u16_0,
                             field: 0x1014 as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0x850 as libc::c_int as u16_0,
                             field: -(0x101e as libc::c_int) as s16,};
         init
     }];
#[no_mangle]
pub unsafe extern "C" fn func_80852174(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    func_808520BC(globalCtx, this, arg2);
    LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
    func_80832924(this, D_808551D8.as_mut_ptr());
}
#[no_mangle]
pub unsafe extern "C" fn func_808521B8(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    if !arg2.is_null() { func_808520BC(globalCtx, this, arg2); }
    LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
}
#[no_mangle]
pub unsafe extern "C" fn func_808521F4(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    func_80832B0C(globalCtx, this,
                  D_80853D34[(*this).modelAnimType as usize]);
    func_80832210(this);
}
#[no_mangle]
pub unsafe extern "C" fn func_80852234(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
}
#[no_mangle]
pub unsafe extern "C" fn func_8085225C(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    func_80832F54(globalCtx, this, 0x98 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn func_80852280(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    (*this).actor.draw =
        Some(Player_Draw as
                 unsafe extern "C" fn(_: *mut Actor, _: *mut GlobalContext)
                     -> ());
}
#[no_mangle]
pub unsafe extern "C" fn func_80852298(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        func_8083313C(globalCtx, this, &mut gPlayerAnim_002378);
        (*this).unk_850 = 1 as libc::c_int as s16
    } else if (*this).unk_850 as libc::c_int == 0 as libc::c_int {
        if LinkAnimation_OnFrame(&mut (*this).skelAnime, 10.0f32) != 0 {
            func_80846720(globalCtx, this, 1 as libc::c_int);
        }
    };
}
static mut D_808551E0: [struct_80832924; 2] =
    [{
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: 0x300a as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: -(0x3018 as libc::c_int) as s16,};
         init
     }];
#[no_mangle]
pub unsafe extern "C" fn func_80852328(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    func_80851F14(globalCtx, this, &mut gPlayerAnim_002770,
                  D_808551E0.as_mut_ptr());
}
static mut D_808551E8: [struct_80832924; 2] =
    [{
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: 0x400f as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: -(0x4023 as libc::c_int) as s16,};
         init
     }];
#[no_mangle]
pub unsafe extern "C" fn func_80852358(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    func_80851F14(globalCtx, this, &mut gPlayerAnim_002830,
                  D_808551E8.as_mut_ptr());
}
#[no_mangle]
pub unsafe extern "C" fn func_80852388(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        func_808322A4(globalCtx, this, &mut gPlayerAnim_002468);
        (*this).unk_850 = 1 as libc::c_int as s16
    }
    if (*this).unk_850 as libc::c_int != 0 as libc::c_int &&
           (*globalCtx).csCtx.frames as libc::c_int >= 900 as libc::c_int {
        (*this).rightHandType = 0 as libc::c_int as u8_0
    } else { (*this).rightHandType = 0xff as libc::c_int as u8_0 };
}
#[no_mangle]
pub unsafe extern "C" fn func_80852414(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut anim: *mut LinkAnimationHeader,
                                       mut arg3: *mut struct_80832924) {
    func_80851294(globalCtx, this, anim as *mut libc::c_void);
    if (*this).unk_850 as libc::c_int == 0 as libc::c_int {
        func_80832924(this, arg3);
    };
}
static mut D_808551F0: [struct_80832924; 2] =
    [{
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: 0x300f as libc::c_int as s16,};
         init
     },
     {
         let mut init =
             struct_80832924{sfxId: 0 as libc::c_int as u16_0,
                             field: -(0x3021 as libc::c_int) as s16,};
         init
     }];
#[no_mangle]
pub unsafe extern "C" fn func_80852450(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    func_80852414(globalCtx, this, &mut gPlayerAnim_002378,
                  D_808551F0.as_mut_ptr());
}
static mut D_808551F8: [struct_80832924; 1] =
    [{
         let mut init =
             struct_80832924{sfxId: 0x870 as libc::c_int as u16_0,
                             field: -(0x84e as libc::c_int) as s16,};
         init
     }];
#[no_mangle]
pub unsafe extern "C" fn func_80852480(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    func_80852414(globalCtx, this, &mut gPlayerAnim_0027D0,
                  D_808551F8.as_mut_ptr());
}
#[no_mangle]
pub unsafe extern "C" fn func_808524B0(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    func_80837704(globalCtx, this);
}
#[no_mangle]
pub unsafe extern "C" fn func_808524D0(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    (*sControlInput).press.button =
        ((*sControlInput).press.button as libc::c_int | 0x4000 as libc::c_int)
            as u16_0;
    func_80844E68(this, globalCtx);
}
#[no_mangle]
pub unsafe extern "C" fn func_80852514(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    func_80844E68(this, globalCtx);
}
#[no_mangle]
pub unsafe extern "C" fn func_80852544(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
}
#[no_mangle]
pub unsafe extern "C" fn func_80852554(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
}
#[no_mangle]
pub unsafe extern "C" fn func_80852564(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    (*this).stateFlags3 =
        ((*this).stateFlags3 as libc::c_int | 2 as libc::c_int) as u8_0;
    (*this).linearVelocity = 2.0f32;
    (*this).actor.velocity.y = -1.0f32;
    func_80832264(globalCtx, this, &mut gPlayerAnim_002DB0);
    func_80832698(this, 0x6808 as libc::c_int as u16_0);
}
static mut D_808551FC:
       [Option<unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                   -> ()>; 3] =
    unsafe {
        [Some(func_8084377C as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> ()),
         Some(func_80843954 as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> ()),
         Some(func_80843A38 as
                  unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
                      -> ())]
    };
#[no_mangle]
pub unsafe extern "C" fn func_808525C0(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    D_808551FC[(*this).unk_850 as
                   usize].expect("non-null function pointer")(this,
                                                              globalCtx);
}
#[no_mangle]
pub unsafe extern "C" fn func_80852608(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    func_80846720(globalCtx, this, 0 as libc::c_int);
    func_808322D0(globalCtx, this, &mut gPlayerAnim_002838);
}
#[no_mangle]
pub unsafe extern "C" fn func_80852648(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    LinkAnimation_Update(globalCtx, &mut (*this).skelAnime);
    if LinkAnimation_OnFrame(&mut (*this).skelAnime, 10.0f32) != 0 {
        (*this).itemActionParam = PLAYER_AP_NONE as libc::c_int as s8;
        (*this).heldItemActionParam = (*this).itemActionParam;
        (*this).heldItemId = ITEM_NONE as libc::c_int as u8_0;
        (*this).nextModelGroup =
            Player_ActionToModelGroup(this, PLAYER_AP_NONE as libc::c_int) as
                u8_0;
        (*this).modelGroup = (*this).nextModelGroup;
        (*this).leftHandDLists = D_80125E08.as_mut_ptr();
        Inventory_ChangeEquipment(EQUIP_SWORD as libc::c_int as s16,
                                  2 as libc::c_int as u16_0);
        gSaveContext.equips.buttonItems[0 as libc::c_int as usize] =
            ITEM_SWORD_MASTER as libc::c_int as u8_0;
        Inventory_DeleteEquipment(globalCtx, 0 as libc::c_int as s16);
    };
}
static mut D_80855208: [*mut LinkAnimationHeader; 2] =
    unsafe {
        [&gPlayerAnim_0034B8 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader,
         &gPlayerAnim_003458 as *const LinkAnimationHeader as
             *mut LinkAnimationHeader]
    };
static mut D_80855210: [[Vec3s; 2]; 2] =
    [[{
          let mut init =
              Vec3s{x: -(200 as libc::c_int) as s16,
                    y: 700 as libc::c_int as s16,
                    z: 100 as libc::c_int as s16,};
          init
      },
      {
          let mut init =
              Vec3s{x: 800 as libc::c_int as s16,
                    y: 600 as libc::c_int as s16,
                    z: 800 as libc::c_int as s16,};
          init
      }],
     [{
          let mut init =
              Vec3s{x: -(200 as libc::c_int) as s16,
                    y: 500 as libc::c_int as s16,
                    z: 0 as libc::c_int as s16,};
          init
      },
      {
          let mut init =
              Vec3s{x: 600 as libc::c_int as s16,
                    y: 400 as libc::c_int as s16,
                    z: 600 as libc::c_int as s16,};
          init
      }]];
#[no_mangle]
pub unsafe extern "C" fn func_808526EC(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    static mut zeroVec: Vec3f =
        { let mut init = Vec3f{x: 0.0f32, y: 0.0f32, z: 0.0f32,}; init };
    static mut primColor: Color_RGBA8 =
        {
            let mut init =
                Color_RGBA8{r: 255 as libc::c_int as u8_0,
                            g: 255 as libc::c_int as u8_0,
                            b: 255 as libc::c_int as u8_0,
                            a: 0 as libc::c_int as u8_0,};
            init
        };
    static mut envColor: Color_RGBA8 =
        {
            let mut init =
                Color_RGBA8{r: 0 as libc::c_int as u8_0,
                            g: 128 as libc::c_int as u8_0,
                            b: 128 as libc::c_int as u8_0,
                            a: 0 as libc::c_int as u8_0,};
            init
        };
    let mut age: s32 = gSaveContext.linkAge;
    let mut sparklePos: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut sp34: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut ptr: *mut Vec3s = 0 as *mut Vec3s;
    func_80851294(globalCtx, this,
                  D_80855208[age as usize] as *mut libc::c_void);
    if (*this).rightHandType as libc::c_int != 0xff as libc::c_int {
        (*this).rightHandType = 0xff as libc::c_int as u8_0;
        return
    }
    ptr = D_80855210[gSaveContext.linkAge as usize].as_mut_ptr();
    sp34.x =
        (*ptr.offset(0 as libc::c_int as isize)).x as libc::c_int as
            libc::c_float +
            Rand_CenteredFloat((*ptr.offset(1 as libc::c_int as isize)).x as
                                   f32_0);
    sp34.y =
        (*ptr.offset(0 as libc::c_int as isize)).y as libc::c_int as
            libc::c_float +
            Rand_CenteredFloat((*ptr.offset(1 as libc::c_int as isize)).y as
                                   f32_0);
    sp34.z =
        (*ptr.offset(0 as libc::c_int as isize)).z as libc::c_int as
            libc::c_float +
            Rand_CenteredFloat((*ptr.offset(1 as libc::c_int as isize)).z as
                                   f32_0);
    SkinMatrix_Vec3fMtxFMultXYZ(&mut (*this).shieldMf, &mut sp34,
                                &mut sparklePos);
    EffectSsKiraKira_SpawnDispersed(globalCtx, &mut sparklePos, &mut zeroVec,
                                    &mut zeroVec, &mut primColor,
                                    &mut envColor, 600 as libc::c_int as s16,
                                    -(10 as libc::c_int));
}
#[no_mangle]
pub unsafe extern "C" fn func_8085283C(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        func_80852944(globalCtx, this, arg2);
    } else if (*this).unk_850 as libc::c_int == 0 as libc::c_int {
        Item_Give(globalCtx, ITEM_SWORD_MASTER as libc::c_int as u8_0);
        func_80846720(globalCtx, this, 0 as libc::c_int);
    } else { func_8084E988(this); };
}
#[no_mangle]
pub unsafe extern "C" fn func_808528C8(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    if LinkAnimation_Update(globalCtx, &mut (*this).skelAnime) != 0 {
        func_8084285C(this, 0.0f32, 99.0f32,
                      (*this).skelAnime.endFrame - 8.0f32);
    }
    if (*this).heldItemActionParam as libc::c_int !=
           PLAYER_AP_SWORD_MASTER as libc::c_int {
        func_80846720(globalCtx, this, 1 as libc::c_int);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80852944(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    if func_808332B8(this) != 0 {
        func_80838F18(globalCtx, this);
        func_80832340(globalCtx, this);
    } else {
        func_8083C148(this, globalCtx);
        if func_8083B644(this, globalCtx) == 0 {
            func_8083E5A8(this, globalCtx);
        }
    }
    (*this).csMode = 0 as libc::c_int as u8_0;
    (*this).unk_6AD = 0 as libc::c_int as u8_0;
}
#[no_mangle]
pub unsafe extern "C" fn func_808529D0(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    (*this).actor.world.pos.x = (*arg2).startPos.x as f32_0;
    (*this).actor.world.pos.y = (*arg2).startPos.y as f32_0;
    if (*globalCtx).sceneNum as libc::c_int == SCENE_SPOT04 as libc::c_int &&
           !(gSaveContext.linkAge == 0 as libc::c_int) {
        (*this).actor.world.pos.y -= 1.0f32
    }
    (*this).actor.world.pos.z = (*arg2).startPos.z as f32_0;
    (*this).actor.shape.rot.y = (*arg2).c2rust_unnamed.rot.y;
    (*this).currentYaw = (*this).actor.shape.rot.y;
}
#[no_mangle]
pub unsafe extern "C" fn func_80852A54(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    let mut dx: f32_0 =
        ((*arg2).startPos.x - (*this).actor.world.pos.x as s32) as f32_0;
    let mut dy: f32_0 =
        ((*arg2).startPos.y - (*this).actor.world.pos.y as s32) as f32_0;
    let mut dz: f32_0 =
        ((*arg2).startPos.z - (*this).actor.world.pos.z as s32) as f32_0;
    let mut dist: f32_0 = sqrtf(dx * dx + dy * dy + dz * dz);
    let mut yawDiff: s16 =
        ((*arg2).c2rust_unnamed.rot.y as libc::c_int -
             (*this).actor.shape.rot.y as libc::c_int) as s16;
    if (*this).linearVelocity == 0.0f32 &&
           (dist > 50.0f32 ||
                (if yawDiff as libc::c_int >= 0 as libc::c_int {
                     yawDiff as libc::c_int
                 } else { -(yawDiff as libc::c_int) }) >
                    0x4000 as libc::c_int) {
        func_808529D0(globalCtx, this, arg2);
    }
    (*this).skelAnime.moveFlags = 0 as libc::c_int as u8_0;
    func_80832DB0(this);
}
#[no_mangle]
pub unsafe extern "C" fn func_80852B4C(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction,
                                       mut arg3: *mut struct_80854B18) {
    if (*arg3).type_0 as libc::c_int > 0 as libc::c_int {
        D_80854AA4[(*arg3).type_0 as
                       usize].expect("non-null function pointer")(globalCtx,
                                                                  this,
                                                                  (*arg3).c2rust_unnamed.ptr);
    } else if ((*arg3).type_0 as libc::c_int) < 0 as libc::c_int {
        (*arg3).c2rust_unnamed.func.expect("non-null function pointer")(globalCtx,
                                                                        this,
                                                                        arg2);
    }
    if D_80858AA0 & 4 as libc::c_int != 0 &&
           (*this).skelAnime.moveFlags as libc::c_int & 4 as libc::c_int == 0
       {
        let ref mut fresh20 =
            (*(*this).skelAnime.morphTable.offset(0 as libc::c_int as
                                                      isize)).y;
        *fresh20 =
            (*fresh20 as libc::c_float / (*(*this).ageProperties).unk_08) as
                s16;
        D_80858AA0 = 0 as libc::c_int
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80852C0C(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut csMode: s32) {
    if csMode != 1 as libc::c_int && csMode != 8 as libc::c_int &&
           csMode != 0x31 as libc::c_int && csMode != 7 as libc::c_int {
        func_808323B4(globalCtx, this);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80852C50(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player,
                                       mut arg2: *mut CsCmdActorAction) {
    let mut linkCsAction: *mut CsCmdActorAction =
        (*globalCtx).csCtx.linkAction;
    let mut pad: s32 = 0;
    let mut sp24: s32 = 0;
    if (*globalCtx).csCtx.state as libc::c_int ==
           CS_STATE_UNSKIPPABLE_INIT as libc::c_int {
        func_8002DF54(globalCtx, 0 as *mut Actor, 7 as libc::c_int as u8_0);
        (*this).unk_446 = 0 as libc::c_int as u8_0;
        func_80832210(this);
        return
    }
    if linkCsAction.is_null() {
        (*this).actor.flags &=
            !((1 as libc::c_int) << 6 as libc::c_int) as libc::c_uint;
        return
    }
    if (*this).unk_446 as libc::c_int != (*linkCsAction).action as libc::c_int
       {
        sp24 = D_808547C4[(*linkCsAction).action as usize] as s32;
        if sp24 >= 0 as libc::c_int {
            if sp24 == 3 as libc::c_int || sp24 == 4 as libc::c_int {
                func_80852A54(globalCtx, this, linkCsAction);
            } else { func_808529D0(globalCtx, this, linkCsAction); }
        }
        D_80858AA0 = (*this).skelAnime.moveFlags as s32;
        func_80832DBC(this);
        osSyncPrintf(b"TOOL MODE=%d\n\x00" as *const u8 as
                         *const libc::c_char, sp24);
        func_80852C0C(globalCtx, this,
                      if sp24 >= 0 as libc::c_int { sp24 } else { -sp24 });
        func_80852B4C(globalCtx, this, linkCsAction,
                      &mut *D_80854B18.as_mut_ptr().offset(if sp24 >=
                                                                  0 as
                                                                      libc::c_int
                                                              {
                                                               sp24
                                                           } else { -sp24 } as
                                                               isize));
        (*this).unk_850 = 0 as libc::c_int as s16;
        (*this).unk_84F = 0 as libc::c_int as s8;
        (*this).unk_446 = (*linkCsAction).action as u8_0
    }
    sp24 = D_808547C4[(*this).unk_446 as usize] as s32;
    func_80852B4C(globalCtx, this, linkCsAction,
                  &mut *D_80854E50.as_mut_ptr().offset(if sp24 >=
                                                              0 as libc::c_int
                                                          {
                                                           sp24
                                                       } else { -sp24 } as
                                                           isize));
}
#[no_mangle]
pub unsafe extern "C" fn func_80852E14(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    if (*this).csMode as libc::c_int != (*this).prevCsMode as libc::c_int {
        D_80858AA0 = (*this).skelAnime.moveFlags as s32;
        func_80832DBC(this);
        (*this).prevCsMode = (*this).csMode;
        osSyncPrintf(b"DEMO MODE=%d\n\x00" as *const u8 as
                         *const libc::c_char, (*this).csMode as libc::c_int);
        func_80852C0C(globalCtx, this, (*this).csMode as s32);
        func_80852B4C(globalCtx, this, 0 as *mut CsCmdActorAction,
                      &mut *D_80854B18.as_mut_ptr().offset((*this).csMode as
                                                               isize));
    }
    func_80852B4C(globalCtx, this, 0 as *mut CsCmdActorAction,
                  &mut *D_80854E50.as_mut_ptr().offset((*this).csMode as
                                                           isize));
}
#[no_mangle]
pub unsafe extern "C" fn Player_IsDroppingFish(mut globalCtx:
                                                   *mut GlobalContext)
 -> s32 {
    let mut this: *mut Player =
        (*globalCtx).actorCtx.actorLists[ACTORCAT_PLAYER as libc::c_int as
                                             usize].head as *mut Player;
    return (Some(func_8084EFC0 as
                     unsafe extern "C" fn(_: *mut Player,
                                          _: *mut GlobalContext) -> ()) ==
                (*this).func_674 &&
                (*this).itemActionParam as libc::c_int ==
                    PLAYER_AP_BOTTLE_FISH as libc::c_int) as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn Player_StartFishing(mut globalCtx:
                                                 *mut GlobalContext) -> s32 {
    let mut this: *mut Player =
        (*globalCtx).actorCtx.actorLists[ACTORCAT_PLAYER as libc::c_int as
                                             usize].head as *mut Player;
    func_80832564(globalCtx, this);
    func_80835F44(globalCtx, this, ITEM_FISHING_POLE as libc::c_int);
    return 1 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80852F38(mut globalCtx: *mut GlobalContext,
                                       mut this: *mut Player) -> s32 {
    if Player_InBlockingCsMode(globalCtx, this) == 0 &&
           (*this).invincibilityTimer as libc::c_int >= 0 as libc::c_int &&
           func_8008F128(this) == 0 &&
           (*this).stateFlags3 as libc::c_int & 0x80 as libc::c_int == 0 {
        func_80832564(globalCtx, this);
        func_80835C58(globalCtx, this,
                      Some(func_8084F308 as
                               unsafe extern "C" fn(_: *mut Player,
                                                    _: *mut GlobalContext)
                                   -> ()), 0 as libc::c_int);
        func_80832264(globalCtx, this, &mut gPlayerAnim_003120);
        (*this).stateFlags2 |= 0x80 as libc::c_int as libc::c_uint;
        func_80832224(this);
        func_80832698(this, 0x680d as libc::c_int as u16_0);
        return 1 as libc::c_int
    }
    return 0 as libc::c_int;
}
// Sets up player cutscene
#[no_mangle]
pub unsafe extern "C" fn func_80852FFC(mut globalCtx: *mut GlobalContext,
                                       mut actor: *mut Actor, mut csMode: s32)
 -> s32 {
    let mut this: *mut Player =
        (*globalCtx).actorCtx.actorLists[ACTORCAT_PLAYER as libc::c_int as
                                             usize].head as *mut Player;
    if Player_InBlockingCsMode(globalCtx, this) == 0 {
        func_80832564(globalCtx, this);
        func_80835C58(globalCtx, this,
                      Some(func_80852E14 as
                               unsafe extern "C" fn(_: *mut Player,
                                                    _: *mut GlobalContext)
                                   -> ()), 0 as libc::c_int);
        (*this).csMode = csMode as u8_0;
        (*this).unk_448 = actor;
        func_80832224(this);
        return 1 as libc::c_int
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_80853080(mut this: *mut Player,
                                       mut globalCtx: *mut GlobalContext) {
    func_80835C58(globalCtx, this,
                  Some(func_80840BC8 as
                           unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()),
                  1 as libc::c_int);
    func_80832B0C(globalCtx, this, func_80833338(this));
    (*this).currentYaw = (*this).actor.shape.rot.y;
}
#[no_mangle]
pub unsafe extern "C" fn Player_InflictDamage(mut globalCtx:
                                                  *mut GlobalContext,
                                              mut damage: s32) -> s32 {
    let mut this: *mut Player =
        (*globalCtx).actorCtx.actorLists[ACTORCAT_PLAYER as libc::c_int as
                                             usize].head as *mut Player;
    if Player_InBlockingCsMode(globalCtx, this) == 0 &&
           func_80837B18(globalCtx, this, damage) == 0 {
        (*this).stateFlags2 &= !(0x80 as libc::c_int) as libc::c_uint;
        return 1 as libc::c_int
    }
    return 0 as libc::c_int;
}
// Start talking with the given actor
#[no_mangle]
pub unsafe extern "C" fn func_80853148(mut globalCtx: *mut GlobalContext,
                                       mut actor: *mut Actor) {
    let mut this: *mut Player =
        (*globalCtx).actorCtx.actorLists[ACTORCAT_PLAYER as libc::c_int as
                                             usize].head as *mut Player;
    let mut pad: s32 = 0;
    if !(*this).targetActor.is_null() || actor == (*this).naviActor ||
           (*actor).flags &
               ((1 as libc::c_int) << 0 as libc::c_int |
                    (1 as libc::c_int) << 18 as libc::c_int) as libc::c_uint
               ==
               ((1 as libc::c_int) << 0 as libc::c_int |
                    (1 as libc::c_int) << 18 as libc::c_int) as libc::c_uint {
        (*actor).flags |=
            ((1 as libc::c_int) << 8 as libc::c_int) as libc::c_uint
    }
    (*this).targetActor = actor;
    (*this).exchangeItemId = EXCH_ITEM_NONE as libc::c_int as s8;
    if (*actor).textId as libc::c_int == 0xffff as libc::c_int {
        func_8002DF54(globalCtx, actor, 1 as libc::c_int as u8_0);
        (*actor).flags |=
            ((1 as libc::c_int) << 8 as libc::c_int) as libc::c_uint;
        func_80832528(globalCtx, this);
    } else {
        if (*this).actor.flags &
               ((1 as libc::c_int) << 8 as libc::c_int) as libc::c_uint != 0 {
            (*this).actor.textId = 0 as libc::c_int as u16_0
        } else {
            (*this).actor.flags |=
                ((1 as libc::c_int) << 8 as libc::c_int) as libc::c_uint;
            (*this).actor.textId = (*actor).textId
        }
        if (*this).stateFlags1 & 0x800000 as libc::c_int as libc::c_uint != 0
           {
            let mut sp24: s32 = (*this).unk_850 as s32;
            func_80832528(globalCtx, this);
            func_8083A2F8(globalCtx, this);
            (*this).unk_850 = sp24 as s16
        } else {
            if func_808332B8(this) != 0 {
                func_80836898(globalCtx, this,
                              Some(func_8083A2F8 as
                                       unsafe extern "C" fn(_:
                                                                *mut GlobalContext,
                                                            _: *mut Player)
                                           -> ()));
                func_80832C6C(globalCtx, this, &mut gPlayerAnim_003328);
            } else if (*actor).category as libc::c_int !=
                          ACTORCAT_NPC as libc::c_int ||
                          (*this).heldItemActionParam as libc::c_int ==
                              PLAYER_AP_FISHING_POLE as libc::c_int {
                func_8083A2F8(globalCtx, this);
                if func_8008E9C4(this) == 0 {
                    if actor != (*this).naviActor &&
                           (*actor).xzDistToPlayer < 40.0f32 {
                        func_808322D0(globalCtx, this,
                                      &mut gPlayerAnim_002DF0);
                    } else {
                        func_80832284(globalCtx, this, func_80833338(this));
                    }
                }
            } else {
                func_80836898(globalCtx, this,
                              Some(func_8083A2F8 as
                                       unsafe extern "C" fn(_:
                                                                *mut GlobalContext,
                                                            _: *mut Player)
                                           -> ()));
                func_808322D0(globalCtx, this,
                              if (*actor).xzDistToPlayer < 40.0f32 {
                                  &mut gPlayerAnim_002DF0
                              } else { &mut gPlayerAnim_0031A0 });
            }
            if (*this).skelAnime.animation ==
                   &mut gPlayerAnim_002DF0 as *mut LinkAnimationHeader as
                       *mut libc::c_void {
                func_80832F54(globalCtx, this, 0x19 as libc::c_int);
            }
            func_80832224(this);
        }
        (*this).stateFlags1 |= 0x20000040 as libc::c_int as libc::c_uint
    }
    if (*this).naviActor == (*this).targetActor &&
           (*(*this).targetActor).textId as libc::c_int &
               0xff00 as libc::c_int != 0x200 as libc::c_int {
        (*(*this).naviActor).flags |=
            ((1 as libc::c_int) << 8 as libc::c_int) as libc::c_uint;
        func_80835EA4(globalCtx, 0xb as libc::c_int);
    };
}
unsafe extern "C" fn run_static_initializers() {
    sGetItemTable =
        [{
             let mut init =
                 GetItemEntry{itemId: ITEM_BOMBS_5 as libc::c_int as u8_0,
                              field: 0x59 as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_BOMB as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x32 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_BOMB_1 as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_NUTS_5 as libc::c_int as u8_0,
                              field: 0xc as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_NUTS as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x34 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_NUTS as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_BOMBCHU as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_BOMBCHU as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x33 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_BOMB_2 as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_BOW as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_BOW as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x31 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_BOW as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_SLINGSHOT as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_SLINGSHOT as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x30 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_PACHINKO as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_BOOMERANG as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_BOOMERANG as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x35 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_BOOMERANG as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_STICK as libc::c_int as u8_0,
                              field: 0xd as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_STICK as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x37 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_STICK as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_HOOKSHOT as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_HOOKSHOT as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x36 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_HOOKSHOT as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_LONGSHOT as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_LONGSHOT as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x4f as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_HOOKSHOT as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_LENS as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_LENS as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x39 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_GLASSES as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId:
                                  ITEM_LETTER_ZELDA as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_LETTER_ZELDA as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x69 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_LETTER as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId:
                                  ITEM_OCARINA_TIME as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_OCARINA_TIME as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x3a as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_OCARINA as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_HAMMER as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_HAMMER as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x38 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_HAMMER as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_COJIRO as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_COJIRO as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x2 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_NIWATORI as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_BOTTLE as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_BOTTLE as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x42 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_BOTTLE as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_POTION_RED as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_POTION_RED as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x43 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_LIQUID as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId:
                                  ITEM_POTION_GREEN as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_POTION_GREEN as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x44 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_LIQUID as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_POTION_BLUE as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_POTION_BLUE as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x45 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_LIQUID as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_FAIRY as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_BOTTLE as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x46 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_BOTTLE as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_MILK_BOTTLE as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_MILK as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x98 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_MILK as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_LETTER_RUTO as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_LETTER_RUTO as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x99 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_BOTTLE_LETTER as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_BEAN as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_BEAN as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x48 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_BEAN as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_MASK_SKULL as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_MASK_SKULL as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x10 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_SKJ_MASK as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_MASK_SPOOKY as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_MASK_SPOOKY as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x11 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_REDEAD_MASK as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_CHICKEN as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_CHICKEN as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x48 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_NIWATORI as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_MASK_KEATON as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_MASK_KEATON as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x12 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_KI_TAN_MASK as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_MASK_BUNNY as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_MASK_BUNNY as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x13 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_RABIT_MASK as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_MASK_TRUTH as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_MASK_TRUTH as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x17 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_TRUTH_MASK as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_POCKET_EGG as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_EGG as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x1 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_EGG as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId:
                                  ITEM_POCKET_CUCCO as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_CHICKEN as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x48 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_NIWATORI as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId:
                                  ITEM_ODD_MUSHROOM as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_ODD_MUSHROOM as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x3 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_MUSHROOM as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_ODD_POTION as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_ODD_POTION as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x4 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_POWDER as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_SAW as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_SAW as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x5 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_SAW as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId:
                                  ITEM_SWORD_BROKEN as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_SWORD_BROKEN as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x8 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_BROKENSWORD as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId:
                                  ITEM_PRESCRIPTION as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_PRESCRIPTION as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x9 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_PRESCRIPTION as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_FROG as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_FROG as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0xd as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_FROG as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_EYEDROPS as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_EYEDROPS as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0xe as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_EYE_LOTION as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_CLAIM_CHECK as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_CLAIM_CHECK as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0xa as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_TICKETSTONE as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId:
                                  ITEM_SWORD_KOKIRI as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_SWORD_KOKIRI as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0xa4 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_SWORD_1 as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_SWORD_BGS as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_SWORD_BGS as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x4b as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_LONGSWORD as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_SHIELD_DEKU as libc::c_int as u8_0,
                              field: 0xa0 as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_SHIELD_DEKU as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x4c as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_SHIELD_1 as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId:
                                  ITEM_SHIELD_HYLIAN as libc::c_int as u8_0,
                              field: 0xa0 as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_SHIELD_HYLIAN as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x4d as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_SHIELD_2 as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId:
                                  ITEM_SHIELD_MIRROR as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_SHIELD_MIRROR as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x4e as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_SHIELD_3 as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_TUNIC_GORON as libc::c_int as u8_0,
                              field: 0xa0 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_TUNIC_GORON as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x50 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_CLOTHES as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_TUNIC_ZORA as libc::c_int as u8_0,
                              field: 0xa0 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_TUNIC_ZORA as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x51 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_CLOTHES as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_BOOTS_IRON as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_BOOTS_IRON as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x53 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_BOOTS_2 as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_BOOTS_HOVER as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_BOOTS_HOVER as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x54 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_HOVERBOOTS as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_QUIVER_40 as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_QUIVER_40 as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x56 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_ARROWCASE as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_QUIVER_50 as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_QUIVER_50 as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x57 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_ARROWCASE as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_BOMB_BAG_20 as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_BOMB_BAG_20 as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x58 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_BOMBPOUCH as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_BOMB_BAG_30 as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_BOMB_BAG_30 as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x59 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_BOMBPOUCH as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_BOMB_BAG_40 as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_BOMB_BAG_40 as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x5a as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_BOMBPOUCH as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId:
                                  ITEM_GAUNTLETS_SILVER as libc::c_int as
                                      u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_GAUNTLETS_SILVER as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x5b as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_GLOVES as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId:
                                  ITEM_GAUNTLETS_GOLD as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_GAUNTLETS_GOLD as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x5c as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_GLOVES as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId:
                                  ITEM_SCALE_SILVER as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_SCALE_SILVER as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0xcd as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_SCALE as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId:
                                  ITEM_SCALE_GOLDEN as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_SCALE_GOLDEN as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0xce as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_SCALE as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId:
                                  ITEM_STONE_OF_AGONY as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_STONE_OF_AGONY as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x68 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_MAP as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_GERUDO_CARD as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_GERUDO_CARD as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x7b as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_GERUDO as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId:
                                  ITEM_OCARINA_FAIRY as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_OCARINA_FAIRY as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x3a as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_OCARINA_0 as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_SEEDS as libc::c_int as u8_0,
                              field: 0x50 as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_SEEDS as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0xdc as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_SEED as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId:
                                  ITEM_HEART_CONTAINER as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_HEART_CONTAINER as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0xc6 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_HEARTS as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId:
                                  ITEM_HEART_PIECE_2 as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_HEART_PIECE as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0xc2 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_HEARTS as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_KEY_BOSS as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_KEY_BOSS as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0xc7 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_BOSSKEY as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_COMPASS as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_COMPASS as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x67 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_COMPASS as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_DUNGEON_MAP as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_DUNGEON_MAP as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x66 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_MAP as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_KEY_SMALL as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_KEY_SMALL as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x60 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_KEY as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_MAGIC_SMALL as libc::c_int as u8_0,
                              field: 0x6f as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_MAGIC_SMALL as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x52 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_MAGICPOT as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_MAGIC_LARGE as libc::c_int as u8_0,
                              field: 0x6e as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_MAGIC_LARGE as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x52 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_MAGICPOT as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId:
                                  ITEM_WALLET_ADULT as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_WALLET_ADULT as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x5e as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_PURSE as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId:
                                  ITEM_WALLET_GIANT as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_WALLET_GIANT as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x5f as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_PURSE as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_WEIRD_EGG as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_EGG as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x9a as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_EGG as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_HEART as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_HEART as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x55 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_HEART as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId:
                                  ITEM_ARROWS_SMALL as libc::c_int as u8_0,
                              field: 0x48 as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_ARROWS_SMALL as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0xe6 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_ARROW as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId:
                                  ITEM_ARROWS_MEDIUM as libc::c_int as u8_0,
                              field: 0x49 as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_ARROWS_MEDIUM as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0xe6 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_ARROW as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId:
                                  ITEM_ARROWS_LARGE as libc::c_int as u8_0,
                              field: 0x4a as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_ARROWS_LARGE as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0xe6 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_ARROW as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_RUPEE_GREEN as libc::c_int as u8_0,
                              field: 0 as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_RUPEE_GREEN as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x6f as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_RUPY as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_RUPEE_BLUE as libc::c_int as u8_0,
                              field: 0x1 as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_RUPEE_BLUE as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0xcc as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_RUPY as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_RUPEE_RED as libc::c_int as u8_0,
                              field: 0x2 as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_RUPEE_RED as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0xf0 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_RUPY as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId:
                                  ITEM_HEART_CONTAINER as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_HEART_CONTAINER as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0xc6 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_HEARTS as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_MILK as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_MILK as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x98 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_MILK as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_MASK_GORON as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_MASK_GORON as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x14 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_GOLONMASK as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_MASK_ZORA as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_MASK_ZORA as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x15 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_ZORAMASK as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_MASK_GERUDO as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_MASK_GERUDO as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x16 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_GERUDOMASK as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_BRACELET as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_BRACELET as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x79 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_BRACELET as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId:
                                  ITEM_RUPEE_PURPLE as libc::c_int as u8_0,
                              field: 0x14 as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_RUPEE_PURPLE as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0xf1 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_RUPY as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_RUPEE_GOLD as libc::c_int as u8_0,
                              field: 0x13 as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_RUPEE_GOLD as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0xf2 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_RUPY as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_SWORD_BGS as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_SWORD_BGS as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0xc as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_LONGSWORD as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_ARROW_FIRE as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_ARROW_FIRE as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x70 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_M_ARROW as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_ARROW_ICE as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_ARROW_ICE as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x71 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_M_ARROW as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_ARROW_LIGHT as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_ARROW_LIGHT as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x72 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_M_ARROW as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_SKULL_TOKEN as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_SKULL_TOKEN as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0xb4 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_SUTARU as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_DINS_FIRE as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_DINS_FIRE as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0xad as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_GODDESS as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId:
                                  ITEM_FARORES_WIND as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_FARORES_WIND as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0xae as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_GODDESS as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_NAYRUS_LOVE as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_NAYRUS_LOVE as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0xaf as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_GODDESS as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId:
                                  ITEM_BULLET_BAG_30 as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_BULLET_BAG as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x7 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_DEKUPOUCH as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId:
                                  ITEM_BULLET_BAG_40 as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_BULLET_BAG as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x7 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_DEKUPOUCH as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_STICKS_5 as libc::c_int as u8_0,
                              field: 0xd as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_STICK as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x37 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_STICK as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_STICKS_10 as libc::c_int as u8_0,
                              field: 0xd as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_STICK as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x37 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_STICK as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_NUTS_5 as libc::c_int as u8_0,
                              field: 0xc as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_NUTS as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x34 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_NUTS as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_NUTS_10 as libc::c_int as u8_0,
                              field: 0xc as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_NUTS as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x34 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_NUTS as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_BOMB as libc::c_int as u8_0,
                              field: 0x59 as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_BOMB as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x32 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_BOMB_1 as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_BOMBS_10 as libc::c_int as u8_0,
                              field: 0x59 as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_BOMB as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x32 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_BOMB_1 as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_BOMBS_20 as libc::c_int as u8_0,
                              field: 0x59 as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_BOMB as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x32 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_BOMB_1 as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_BOMBS_30 as libc::c_int as u8_0,
                              field: 0x59 as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_BOMB as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x32 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_BOMB_1 as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_SEEDS_30 as libc::c_int as u8_0,
                              field: 0x50 as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_SEEDS as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0xdc as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_SEED as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_BOMBCHUS_5 as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_BOMBCHU as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x33 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_BOMB_2 as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_BOMBCHUS_20 as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_BOMBCHU as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x33 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_BOMB_2 as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_FISH as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_FISH as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x47 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_FISH as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_BUG as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_BUG as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x7a as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_INSECT as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_BLUE_FIRE as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_BLUE_FIRE as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x5d as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_FIRE as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_POE as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_POE as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x97 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_GHOST as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_BIG_POE as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_BIG_POE as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0xf9 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_GHOST as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_KEY_SMALL as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_KEY_SMALL as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0xf3 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_KEY as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_RUPEE_GREEN as libc::c_int as u8_0,
                              field: 0 as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_RUPEE_GREEN as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0xf4 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_RUPY as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_RUPEE_BLUE as libc::c_int as u8_0,
                              field: 0x1 as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_RUPEE_BLUE as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0xf5 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_RUPY as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_RUPEE_RED as libc::c_int as u8_0,
                              field: 0x2 as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_RUPEE_RED as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0xf6 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_RUPY as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId:
                                  ITEM_RUPEE_PURPLE as libc::c_int as u8_0,
                              field: 0x14 as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_RUPEE_PURPLE as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0xf7 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_RUPY as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId:
                                  ITEM_HEART_PIECE_2 as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_HEART_PIECE as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0xfa as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_HEARTS as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId:
                                  ITEM_STICK_UPGRADE_20 as libc::c_int as
                                      u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_STICK as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x90 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_STICK as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId:
                                  ITEM_STICK_UPGRADE_30 as libc::c_int as
                                      u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_STICK as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x91 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_STICK as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId:
                                  ITEM_NUT_UPGRADE_30 as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_NUTS as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0xa7 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_NUTS as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId:
                                  ITEM_NUT_UPGRADE_40 as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 0 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_NUTS as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0xa8 as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_NUTS as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId:
                                  ITEM_BULLET_BAG_50 as libc::c_int as u8_0,
                              field: 0x80 as libc::c_int as u8_0,
                              gi:
                                  ((if 1 as libc::c_int != 0 as libc::c_int {
                                        1 as libc::c_int
                                    } else { -(1 as libc::c_int) }) *
                                       (GID_BULLET_BAG_50 as libc::c_int +
                                            1 as libc::c_int)) as s8,
                              textId: 0x6c as libc::c_int as u8_0,
                              objectId:
                                  OBJECT_GI_DEKUPOUCH as libc::c_int as
                                      u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_NONE as libc::c_int as u8_0,
                              field: 0 as libc::c_int as u8_0,
                              gi: 0 as libc::c_int as s8,
                              textId: 0 as libc::c_int as u8_0,
                              objectId: 0 as libc::c_int as u16_0,};
             init
         },
         {
             let mut init =
                 GetItemEntry{itemId: ITEM_NONE as libc::c_int as u8_0,
                              field: 0 as libc::c_int as u8_0,
                              gi: 0 as libc::c_int as s8,
                              textId: 0 as libc::c_int as u8_0,
                              objectId: 0 as libc::c_int as u16_0,};
             init
         }];
    D_80854708 =
        [{
             let mut init = InitChainEntry{cont_type_0_offset_value: [0; 4],};
             init.set_cont(0 as libc::c_int as u32_0);
             init.set_type_0(ICHAINTYPE_F32 as libc::c_int as u32_0);
             init.set_offset(&mut (*(0 as *mut Actor)).targetArrowOffset as
                                 *mut f32_0 as size_t as u32_0);
             init.set_value(500 as libc::c_int);
             init
         }]
}
#[used]
#[cfg_attr(target_os = "linux", link_section = ".init_array")]
#[cfg_attr(target_os = "windows", link_section = ".CRT$XIB")]
#[cfg_attr(target_os = "macos", link_section = "__DATA,__mod_init_func")]
static INIT_ARRAY: [unsafe extern "C" fn(); 1] = [run_static_initializers];
